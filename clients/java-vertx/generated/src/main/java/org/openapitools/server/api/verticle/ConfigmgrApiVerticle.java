package org.openapitools.server.api.verticle;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.eventbus.Message;
import io.vertx.core.json.Json;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.core.logging.Logger;
import io.vertx.core.logging.LoggerFactory;

import org.openapitools.server.api.model.AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo;
import org.openapitools.server.api.model.AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo;
import org.openapitools.server.api.model.AnalyticsComponentQueryCacheServiceInfo;
import org.openapitools.server.api.model.ApacheSlingHealthCheckResultHTMLSerializerInfo;
import java.math.BigDecimal;
import org.openapitools.server.api.model.ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo;
import org.openapitools.server.api.model.ComAdobeAemTransactionCoreImplTransactionRecorderInfo;
import org.openapitools.server.api.model.ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo;
import org.openapitools.server.api.model.ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo;
import org.openapitools.server.api.model.ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo;
import org.openapitools.server.api.model.ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo;
import org.openapitools.server.api.model.ComAdobeCqAccountApiAccountManagementServiceInfo;
import org.openapitools.server.api.model.ComAdobeCqAccountImplAccountManagementServletInfo;
import org.openapitools.server.api.model.ComAdobeCqAddressImplLocationLocationListServletInfo;
import org.openapitools.server.api.model.ComAdobeCqAuditPurgeDamInfo;
import org.openapitools.server.api.model.ComAdobeCqAuditPurgePagesInfo;
import org.openapitools.server.api.model.ComAdobeCqAuditPurgeReplicationInfo;
import org.openapitools.server.api.model.ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo;
import org.openapitools.server.api.model.ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo;
import org.openapitools.server.api.model.ComAdobeCqCdnRewriterImplCDNRewriterInfo;
import org.openapitools.server.api.model.ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo;
import org.openapitools.server.api.model.ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo;
import org.openapitools.server.api.model.ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo;
import org.openapitools.server.api.model.ComAdobeCqCommerceImplAssetStaticImageHandlerInfo;
import org.openapitools.server.api.model.ComAdobeCqCommerceImplAssetVideoHandlerInfo;
import org.openapitools.server.api.model.ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo;
import org.openapitools.server.api.model.ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo;
import org.openapitools.server.api.model.ComAdobeCqCommercePimImplPageEventListenerInfo;
import org.openapitools.server.api.model.ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo;
import org.openapitools.server.api.model.ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo;
import org.openapitools.server.api.model.ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo;
import org.openapitools.server.api.model.ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo;
import org.openapitools.server.api.model.ComAdobeCqDamCfmImplComponentComponentConfigImplInfo;
import org.openapitools.server.api.model.ComAdobeCqDamCfmImplConfFeatureConfigImplInfo;
import org.openapitools.server.api.model.ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo;
import org.openapitools.server.api.model.ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo;
import org.openapitools.server.api.model.ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo;
import org.openapitools.server.api.model.ComAdobeCqDamDmProcessImagePTiffManagerImplInfo;
import org.openapitools.server.api.model.ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo;
import org.openapitools.server.api.model.ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo;
import org.openapitools.server.api.model.ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo;
import org.openapitools.server.api.model.ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo;
import org.openapitools.server.api.model.ComAdobeCqDamS7imagingImplIsImageServerComponentInfo;
import org.openapitools.server.api.model.ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo;
import org.openapitools.server.api.model.ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo;
import org.openapitools.server.api.model.ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo;
import org.openapitools.server.api.model.ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo;
import org.openapitools.server.api.model.ComAdobeCqDeserfwImplDeserializationFirewallImplInfo;
import org.openapitools.server.api.model.ComAdobeCqDtmImplServiceDTMWebServiceImplInfo;
import org.openapitools.server.api.model.ComAdobeCqDtmImplServletsDTMDeployHookServletInfo;
import org.openapitools.server.api.model.ComAdobeCqDtmReactorImplServiceWebServiceImplInfo;
import org.openapitools.server.api.model.ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo;
import org.openapitools.server.api.model.ComAdobeCqHcContentPackagesHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeCqHistoryImplHistoryRequestFilterInfo;
import org.openapitools.server.api.model.ComAdobeCqHistoryImplHistoryServiceImplInfo;
import org.openapitools.server.api.model.ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo;
import org.openapitools.server.api.model.ComAdobeCqProjectsImplServletProjectImageServletInfo;
import org.openapitools.server.api.model.ComAdobeCqProjectsPurgeSchedulerInfo;
import org.openapitools.server.api.model.ComAdobeCqScheduledExporterImplScheduledExporterImplInfo;
import org.openapitools.server.api.model.ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo;
import org.openapitools.server.api.model.ComAdobeCqScreensDeviceImplDeviceServiceInfo;
import org.openapitools.server.api.model.ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo;
import org.openapitools.server.api.model.ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo;
import org.openapitools.server.api.model.ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo;
import org.openapitools.server.api.model.ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo;
import org.openapitools.server.api.model.ComAdobeCqScreensImplScreensChannelPostProcessorInfo;
import org.openapitools.server.api.model.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo;
import org.openapitools.server.api.model.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo;
import org.openapitools.server.api.model.ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo;
import org.openapitools.server.api.model.ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo;
import org.openapitools.server.api.model.ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo;
import org.openapitools.server.api.model.ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo;
import org.openapitools.server.api.model.ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCalendarServletsTimeZoneServletInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialGroupImplGroupServiceImplInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialNotificationsImplMentionsRouterInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialNotificationsImplNotificationsRouterInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialScoringImplScoringEventListenerInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialSrpImplSocialSolrConnectorInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialSyncImplDiffChangesObserverInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialSyncImplUserSyncListenerImplInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo;
import org.openapitools.server.api.model.ComAdobeCqSocialUserImplTransportHttpToPublisherInfo;
import org.openapitools.server.api.model.ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo;
import org.openapitools.server.api.model.ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo;
import org.openapitools.server.api.model.ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo;
import org.openapitools.server.api.model.ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo;
import org.openapitools.server.api.model.ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo;
import org.openapitools.server.api.model.ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo;
import org.openapitools.server.api.model.ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo;
import org.openapitools.server.api.model.ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo;
import org.openapitools.server.api.model.ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo;
import org.openapitools.server.api.model.ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo;
import org.openapitools.server.api.model.ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo;
import org.openapitools.server.api.model.ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo;
import org.openapitools.server.api.model.ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo;
import org.openapitools.server.api.model.ComAdobeFormsCommonServiceImplDefaultDataProviderInfo;
import org.openapitools.server.api.model.ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo;
import org.openapitools.server.api.model.ComAdobeFormsCommonServletTempCleanUpTaskInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAcpPlatformPlatformServletInfo;
import org.openapitools.server.api.model.ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo;
import org.openapitools.server.api.model.ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthImsImplIMSProviderImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthImsInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthOauthAccesstokenProviderInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthOauthImplGithubProviderImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthOauthImplGraniteProviderInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthOauthProviderInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo;
import org.openapitools.server.api.model.ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo;
import org.openapitools.server.api.model.ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo;
import org.openapitools.server.api.model.ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteCompatrouterImplRoutingConfigInfo;
import org.openapitools.server.api.model.ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo;
import org.openapitools.server.api.model.ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo;
import org.openapitools.server.api.model.ComAdobeGraniteContexthubImplContextHubImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteCorsImplCORSPolicyImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteCsrfImplCSRFFilterInfo;
import org.openapitools.server.api.model.ComAdobeGraniteCsrfImplCSRFServletInfo;
import org.openapitools.server.api.model.ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo;
import org.openapitools.server.api.model.ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo;
import org.openapitools.server.api.model.ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo;
import org.openapitools.server.api.model.ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo;
import org.openapitools.server.api.model.ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo;
import org.openapitools.server.api.model.ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo;
import org.openapitools.server.api.model.ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo;
import org.openapitools.server.api.model.ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo;
import org.openapitools.server.api.model.ComAdobeGraniteFragsImplRandomFeatureInfo;
import org.openapitools.server.api.model.ComAdobeGraniteHttpcacheFileFileCacheStoreInfo;
import org.openapitools.server.api.model.ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo;
import org.openapitools.server.api.model.ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo;
import org.openapitools.server.api.model.ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo;
import org.openapitools.server.api.model.ComAdobeGraniteInfocollectorInfoCollectorInfo;
import org.openapitools.server.api.model.ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo;
import org.openapitools.server.api.model.ComAdobeGraniteLicenseImplLicenseCheckFilterInfo;
import org.openapitools.server.api.model.ComAdobeGraniteLoggingImplLogAnalyserImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo;
import org.openapitools.server.api.model.ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo;
import org.openapitools.server.api.model.ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo;
import org.openapitools.server.api.model.ComAdobeGraniteMonitoringImplScriptConfigImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo;
import org.openapitools.server.api.model.ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo;
import org.openapitools.server.api.model.ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo;
import org.openapitools.server.api.model.ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo;
import org.openapitools.server.api.model.ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo;
import org.openapitools.server.api.model.ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo;
import org.openapitools.server.api.model.ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo;
import org.openapitools.server.api.model.ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo;
import org.openapitools.server.api.model.ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo;
import org.openapitools.server.api.model.ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo;
import org.openapitools.server.api.model.ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo;
import org.openapitools.server.api.model.ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteOptoutImplOptOutServiceImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo;
import org.openapitools.server.api.model.ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo;
import org.openapitools.server.api.model.ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo;
import org.openapitools.server.api.model.ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo;
import org.openapitools.server.api.model.ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo;
import org.openapitools.server.api.model.ComAdobeGraniteRepositoryImplCommitStatsConfigInfo;
import org.openapitools.server.api.model.ComAdobeGraniteRepositoryServiceUserConfigurationInfo;
import org.openapitools.server.api.model.ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo;
import org.openapitools.server.api.model.ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo;
import org.openapitools.server.api.model.ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo;
import org.openapitools.server.api.model.ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteRestImplServletDefaultGETServletInfo;
import org.openapitools.server.api.model.ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo;
import org.openapitools.server.api.model.ComAdobeGraniteSecurityUserUserPropertiesServiceInfo;
import org.openapitools.server.api.model.ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo;
import org.openapitools.server.api.model.ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo;
import org.openapitools.server.api.model.ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo;
import org.openapitools.server.api.model.ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo;
import org.openapitools.server.api.model.ComAdobeGraniteThreaddumpThreadDumpCollectorInfo;
import org.openapitools.server.api.model.ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo;
import org.openapitools.server.api.model.ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo;
import org.openapitools.server.api.model.ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo;
import org.openapitools.server.api.model.ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo;
import org.openapitools.server.api.model.ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo;
import org.openapitools.server.api.model.ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo;
import org.openapitools.server.api.model.ComAdobeGraniteWorkflowCoreJobJobHandlerInfo;
import org.openapitools.server.api.model.ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo;
import org.openapitools.server.api.model.ComAdobeGraniteWorkflowCorePayloadMapCacheInfo;
import org.openapitools.server.api.model.ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo;
import org.openapitools.server.api.model.ComAdobeGraniteWorkflowCoreWorkflowConfigInfo;
import org.openapitools.server.api.model.ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo;
import org.openapitools.server.api.model.ComAdobeGraniteWorkflowPurgeSchedulerInfo;
import org.openapitools.server.api.model.ComAdobeOctopusNcommBootstrapInfo;
import org.openapitools.server.api.model.ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo;
import org.openapitools.server.api.model.ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo;
import org.openapitools.server.api.model.ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo;
import org.openapitools.server.api.model.ComDayCommonsHttpclientInfo;
import org.openapitools.server.api.model.ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo;
import org.openapitools.server.api.model.ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo;
import org.openapitools.server.api.model.ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo;
import org.openapitools.server.api.model.ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo;
import org.openapitools.server.api.model.ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo;
import org.openapitools.server.api.model.ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo;
import org.openapitools.server.api.model.ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo;
import org.openapitools.server.api.model.ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo;
import org.openapitools.server.api.model.ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo;
import org.openapitools.server.api.model.ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo;
import org.openapitools.server.api.model.ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo;
import org.openapitools.server.api.model.ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo;
import org.openapitools.server.api.model.ComDayCqAuthImplCugCugSupportImplInfo;
import org.openapitools.server.api.model.ComDayCqAuthImplLoginSelectorHandlerInfo;
import org.openapitools.server.api.model.ComDayCqCommonsImplExternalizerImplInfo;
import org.openapitools.server.api.model.ComDayCqCommonsServletsRootMappingServletInfo;
import org.openapitools.server.api.model.ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo;
import org.openapitools.server.api.model.ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo;
import org.openapitools.server.api.model.ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo;
import org.openapitools.server.api.model.ComDayCqContentsyncImplContentSyncManagerImplInfo;
import org.openapitools.server.api.model.ComDayCqDamCommonsHandlerStandardImageHandlerInfo;
import org.openapitools.server.api.model.ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo;
import org.openapitools.server.api.model.ComDayCqDamCommonsUtilImplAssetCacheImplInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplAssetMoveListenerInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplDamChangeEventListenerInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplDamEventPurgeServiceInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplDamEventRecorderImplInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplEventDamEventAuditListenerInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplExpiryNotificationJobImplInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplGfxCommonsGfxRendererInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplHandlerJpegHandlerInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplLightboxLightboxServletInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplMissingMetadataNotificationJobInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplProcessTextExtractionProcessInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplRenditionMakerImplInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplReportsReportExportServiceInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplReportsReportPurgeServiceInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplServletAssetDownloadServletInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplServletAssetStatusServletInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplServletAssetXMPSearchServletInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplServletBatchMetadataServletInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplServletBinaryProviderServletInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplServletCollectionServletInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplServletCollectionsServletInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplServletCompanionServletInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplServletCreateAssetServletInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplServletDamContentDispositionFilterInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplServletGuidLookupFilterInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplServletHealthCheckServletInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplServletMetadataGetServletInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplServletResourceCollectionServletInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreImplUnzipUnzipConfigInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreProcessExtractMetadataProcessInfo;
import org.openapitools.server.api.model.ComDayCqDamCoreProcessMetadataProcessorProcessInfo;
import org.openapitools.server.api.model.ComDayCqDamHandlerFfmpegLocatorImplInfo;
import org.openapitools.server.api.model.ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo;
import org.openapitools.server.api.model.ComDayCqDamHandlerStandardPdfPdfHandlerInfo;
import org.openapitools.server.api.model.ComDayCqDamHandlerStandardPsPostScriptHandlerInfo;
import org.openapitools.server.api.model.ComDayCqDamHandlerStandardPsdPsdHandlerInfo;
import org.openapitools.server.api.model.ComDayCqDamIdsImplIDSJobProcessorInfo;
import org.openapitools.server.api.model.ComDayCqDamIdsImplIDSPoolManagerImplInfo;
import org.openapitools.server.api.model.ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo;
import org.openapitools.server.api.model.ComDayCqDamInddImplServletSnippetCreationServletInfo;
import org.openapitools.server.api.model.ComDayCqDamInddProcessINDDMediaExtractProcessInfo;
import org.openapitools.server.api.model.ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo;
import org.openapitools.server.api.model.ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo;
import org.openapitools.server.api.model.ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo;
import org.openapitools.server.api.model.ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo;
import org.openapitools.server.api.model.ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo;
import org.openapitools.server.api.model.ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo;
import org.openapitools.server.api.model.ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo;
import org.openapitools.server.api.model.ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo;
import org.openapitools.server.api.model.ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo;
import org.openapitools.server.api.model.ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo;
import org.openapitools.server.api.model.ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo;
import org.openapitools.server.api.model.ComDayCqDamScene7ImplScene7APIClientImplInfo;
import org.openapitools.server.api.model.ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo;
import org.openapitools.server.api.model.ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo;
import org.openapitools.server.api.model.ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo;
import org.openapitools.server.api.model.ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo;
import org.openapitools.server.api.model.ComDayCqDamScene7ImplScene7UploadServiceImplInfo;
import org.openapitools.server.api.model.ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo;
import org.openapitools.server.api.model.ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo;
import org.openapitools.server.api.model.ComDayCqDamVideoImplServletVideoTestServletInfo;
import org.openapitools.server.api.model.ComDayCqExtwidgetServletsImageSpriteServletInfo;
import org.openapitools.server.api.model.ComDayCqImageInternalFontFontHelperInfo;
import org.openapitools.server.api.model.ComDayCqJcrclustersupportClusterStartLevelControllerInfo;
import org.openapitools.server.api.model.ComDayCqMailerDefaultMailServiceInfo;
import org.openapitools.server.api.model.ComDayCqMailerImplCqMailingServiceInfo;
import org.openapitools.server.api.model.ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo;
import org.openapitools.server.api.model.ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo;
import org.openapitools.server.api.model.ComDayCqMcmCampaignImplIntegrationConfigImplInfo;
import org.openapitools.server.api.model.ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo;
import org.openapitools.server.api.model.ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo;
import org.openapitools.server.api.model.ComDayCqMcmImplMCMConfigurationInfo;
import org.openapitools.server.api.model.ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo;
import org.openapitools.server.api.model.ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo;
import org.openapitools.server.api.model.ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo;
import org.openapitools.server.api.model.ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo;
import org.openapitools.server.api.model.ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo;
import org.openapitools.server.api.model.ComDayCqNotificationImplNotificationServiceImplInfo;
import org.openapitools.server.api.model.ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo;
import org.openapitools.server.api.model.ComDayCqPollingImporterImplManagedPollConfigImplInfo;
import org.openapitools.server.api.model.ComDayCqPollingImporterImplManagedPollingImporterImplInfo;
import org.openapitools.server.api.model.ComDayCqPollingImporterImplPollingImporterImplInfo;
import org.openapitools.server.api.model.ComDayCqReplicationAuditReplicationEventListenerInfo;
import org.openapitools.server.api.model.ComDayCqReplicationContentStaticContentBuilderInfo;
import org.openapitools.server.api.model.ComDayCqReplicationImplAgentManagerImplInfo;
import org.openapitools.server.api.model.ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo;
import org.openapitools.server.api.model.ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo;
import org.openapitools.server.api.model.ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo;
import org.openapitools.server.api.model.ComDayCqReplicationImplReplicationReceiverImplInfo;
import org.openapitools.server.api.model.ComDayCqReplicationImplReplicatorImplInfo;
import org.openapitools.server.api.model.ComDayCqReplicationImplReverseReplicatorInfo;
import org.openapitools.server.api.model.ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo;
import org.openapitools.server.api.model.ComDayCqReplicationImplTransportHttpInfo;
import org.openapitools.server.api.model.ComDayCqReportingImplCacheCacheImplInfo;
import org.openapitools.server.api.model.ComDayCqReportingImplConfigServiceImplInfo;
import org.openapitools.server.api.model.ComDayCqReportingImplRLogAnalyzerInfo;
import org.openapitools.server.api.model.ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo;
import org.openapitools.server.api.model.ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo;
import org.openapitools.server.api.model.ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo;
import org.openapitools.server.api.model.ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo;
import org.openapitools.server.api.model.ComDayCqRewriterProcessorImplHtmlParserFactoryInfo;
import org.openapitools.server.api.model.ComDayCqSearchImplBuilderQueryBuilderImplInfo;
import org.openapitools.server.api.model.ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo;
import org.openapitools.server.api.model.ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo;
import org.openapitools.server.api.model.ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo;
import org.openapitools.server.api.model.ComDayCqSecurityACLSetupInfo;
import org.openapitools.server.api.model.ComDayCqStatisticsImplStatisticsServiceImplInfo;
import org.openapitools.server.api.model.ComDayCqTaggingImplJcrTagManagerFactoryImplInfo;
import org.openapitools.server.api.model.ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo;
import org.openapitools.server.api.model.ComDayCqTaggingImplTagGarbageCollectorInfo;
import org.openapitools.server.api.model.ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo;
import org.openapitools.server.api.model.ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplCommandsWCMCommandServletInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplEventPageEventAuditListenerInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplEventPagePostProcessorInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplEventTemplatePostProcessorInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplLanguageManagerImplInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplServletsFindReplaceServletInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplServletsReferenceSearchServletInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplServletsThumbnailServletInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplVersionManagerImplInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplVersionPurgeTaskInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplWCMDebugFilterInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreImplWarpTimeWarpFilterInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreMvtMVTStatisticsImplInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreStatsPageViewStatisticsImplInfo;
import org.openapitools.server.api.model.ComDayCqWcmCoreWCMRequestFilterInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterDesignPackageImporterInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo;
import org.openapitools.server.api.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo;
import org.openapitools.server.api.model.ComDayCqWcmFoundationFormsImplFormChooserServletInfo;
import org.openapitools.server.api.model.ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo;
import org.openapitools.server.api.model.ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo;
import org.openapitools.server.api.model.ComDayCqWcmFoundationFormsImplMailServletInfo;
import org.openapitools.server.api.model.ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo;
import org.openapitools.server.api.model.ComDayCqWcmFoundationImplHTTPAuthHandlerInfo;
import org.openapitools.server.api.model.ComDayCqWcmFoundationImplPageImpressionsTrackerInfo;
import org.openapitools.server.api.model.ComDayCqWcmFoundationImplPageRedirectServletInfo;
import org.openapitools.server.api.model.ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo;
import org.openapitools.server.api.model.ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo;
import org.openapitools.server.api.model.ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo;
import org.openapitools.server.api.model.ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo;
import org.openapitools.server.api.model.ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo;
import org.openapitools.server.api.model.ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo;
import org.openapitools.server.api.model.ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo;
import org.openapitools.server.api.model.ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo;
import org.openapitools.server.api.model.ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo;
import org.openapitools.server.api.model.ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo;
import org.openapitools.server.api.model.ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo;
import org.openapitools.server.api.model.ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo;
import org.openapitools.server.api.model.ComDayCqWcmMsmImplRolloutManagerImplInfo;
import org.openapitools.server.api.model.ComDayCqWcmMsmImplServletsAuditLogServletInfo;
import org.openapitools.server.api.model.ComDayCqWcmNotificationEmailImplEmailChannelInfo;
import org.openapitools.server.api.model.ComDayCqWcmNotificationImplNotificationManagerImplInfo;
import org.openapitools.server.api.model.ComDayCqWcmScriptingImplBVPManagerInfo;
import org.openapitools.server.api.model.ComDayCqWcmUndoUndoConfigInfo;
import org.openapitools.server.api.model.ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo;
import org.openapitools.server.api.model.ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo;
import org.openapitools.server.api.model.ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo;
import org.openapitools.server.api.model.ComDayCqWidgetImplHtmlLibraryManagerImplInfo;
import org.openapitools.server.api.model.ComDayCqWidgetImplWidgetExtensionProviderImplInfo;
import org.openapitools.server.api.model.ComDayCqWorkflowImplEmailEMailNotificationServiceInfo;
import org.openapitools.server.api.model.ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo;
import org.openapitools.server.api.model.ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo;
import org.openapitools.server.api.model.ComDayCrxSecurityTokenImplTokenCleanupTaskInfo;
import org.openapitools.server.api.model.GuideLocalizationServiceInfo;
import org.openapitools.server.api.MainApiException;
import org.openapitools.server.api.model.MessagingUserComponentFactoryInfo;
import org.openapitools.server.api.model.OrgApacheAriesJmxFrameworkStateConfigInfo;
import org.openapitools.server.api.model.OrgApacheFelixEventadminImplEventAdminInfo;
import org.openapitools.server.api.model.OrgApacheFelixHttpInfo;
import org.openapitools.server.api.model.OrgApacheFelixHttpSslfilterSslFilterInfo;
import org.openapitools.server.api.model.OrgApacheFelixJaasConfigurationFactoryInfo;
import org.openapitools.server.api.model.OrgApacheFelixJaasConfigurationSpiInfo;
import org.openapitools.server.api.model.OrgApacheFelixScrScrServiceInfo;
import org.openapitools.server.api.model.OrgApacheFelixSystemreadyImplComponentsCheckInfo;
import org.openapitools.server.api.model.OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo;
import org.openapitools.server.api.model.OrgApacheFelixSystemreadyImplServicesCheckInfo;
import org.openapitools.server.api.model.OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo;
import org.openapitools.server.api.model.OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo;
import org.openapitools.server.api.model.OrgApacheFelixSystemreadySystemReadyMonitorInfo;
import org.openapitools.server.api.model.OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo;
import org.openapitools.server.api.model.OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo;
import org.openapitools.server.api.model.OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo;
import org.openapitools.server.api.model.OrgApacheHttpProxyconfiguratorInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo;
import org.openapitools.server.api.model.OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo;
import org.openapitools.server.api.model.OrgApacheSlingAuthCoreImplLogoutServletInfo;
import org.openapitools.server.api.model.OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo;
import org.openapitools.server.api.model.OrgApacheSlingCaconfigImplConfigurationResolverImplInfo;
import org.openapitools.server.api.model.OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo;
import org.openapitools.server.api.model.OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo;
import org.openapitools.server.api.model.OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo;
import org.openapitools.server.api.model.OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo;
import org.openapitools.server.api.model.OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo;
import org.openapitools.server.api.model.OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo;
import org.openapitools.server.api.model.OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo;
import org.openapitools.server.api.model.OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo;
import org.openapitools.server.api.model.OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo;
import org.openapitools.server.api.model.OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo;
import org.openapitools.server.api.model.OrgApacheSlingCommonsLogLogManagerInfo;
import org.openapitools.server.api.model.OrgApacheSlingCommonsMetricsInternalLogReporterInfo;
import org.openapitools.server.api.model.OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo;
import org.openapitools.server.api.model.OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo;
import org.openapitools.server.api.model.OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo;
import org.openapitools.server.api.model.OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo;
import org.openapitools.server.api.model.OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo;
import org.openapitools.server.api.model.OrgApacheSlingDatasourceDataSourceFactoryInfo;
import org.openapitools.server.api.model.OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo;
import org.openapitools.server.api.model.OrgApacheSlingDiscoveryOakConfigInfo;
import org.openapitools.server.api.model.OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo;
import org.openapitools.server.api.model.OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo;
import org.openapitools.server.api.model.OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo;
import org.openapitools.server.api.model.OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo;
import org.openapitools.server.api.model.OrgApacheSlingEngineImplLogRequestLoggerInfo;
import org.openapitools.server.api.model.OrgApacheSlingEngineImplLogRequestLoggerServiceInfo;
import org.openapitools.server.api.model.OrgApacheSlingEngineImplSlingMainServletInfo;
import org.openapitools.server.api.model.OrgApacheSlingEngineParametersInfo;
import org.openapitools.server.api.model.OrgApacheSlingEventImplEventingThreadPoolInfo;
import org.openapitools.server.api.model.OrgApacheSlingEventImplJobsDefaultJobManagerInfo;
import org.openapitools.server.api.model.OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo;
import org.openapitools.server.api.model.OrgApacheSlingEventImplJobsJobConsumerManagerInfo;
import org.openapitools.server.api.model.OrgApacheSlingEventJobsQueueConfigurationInfo;
import org.openapitools.server.api.model.OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo;
import org.openapitools.server.api.model.OrgApacheSlingFeatureflagsFeatureInfo;
import org.openapitools.server.api.model.OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo;
import org.openapitools.server.api.model.OrgApacheSlingHapiImplHApiUtilImplInfo;
import org.openapitools.server.api.model.OrgApacheSlingHcCoreImplCompositeHealthCheckInfo;
import org.openapitools.server.api.model.OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo;
import org.openapitools.server.api.model.OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo;
import org.openapitools.server.api.model.OrgApacheSlingHcCoreImplScriptableHealthCheckInfo;
import org.openapitools.server.api.model.OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo;
import org.openapitools.server.api.model.OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo;
import org.openapitools.server.api.model.OrgApacheSlingI18nImplI18NFilterInfo;
import org.openapitools.server.api.model.OrgApacheSlingI18nImplJcrResourceBundleProviderInfo;
import org.openapitools.server.api.model.OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo;
import org.openapitools.server.api.model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo;
import org.openapitools.server.api.model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo;
import org.openapitools.server.api.model.OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo;
import org.openapitools.server.api.model.OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo;
import org.openapitools.server.api.model.OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo;
import org.openapitools.server.api.model.OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo;
import org.openapitools.server.api.model.OrgApacheSlingJcrRepoinitRepositoryInitializerInfo;
import org.openapitools.server.api.model.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo;
import org.openapitools.server.api.model.OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo;
import org.openapitools.server.api.model.OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo;
import org.openapitools.server.api.model.OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo;
import org.openapitools.server.api.model.OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo;
import org.openapitools.server.api.model.OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo;
import org.openapitools.server.api.model.OrgApacheSlingJmxProviderImplJMXResourceProviderInfo;
import org.openapitools.server.api.model.OrgApacheSlingModelsImplModelAdapterFactoryInfo;
import org.openapitools.server.api.model.OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo;
import org.openapitools.server.api.model.OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo;
import org.openapitools.server.api.model.OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo;
import org.openapitools.server.api.model.OrgApacheSlingResourcemergerPickerOverridingInfo;
import org.openapitools.server.api.model.OrgApacheSlingScriptingCoreImplScriptCacheImplInfo;
import org.openapitools.server.api.model.OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo;
import org.openapitools.server.api.model.OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo;
import org.openapitools.server.api.model.OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo;
import org.openapitools.server.api.model.OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo;
import org.openapitools.server.api.model.OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo;
import org.openapitools.server.api.model.OrgApacheSlingSecurityImplContentDispositionFilterInfo;
import org.openapitools.server.api.model.OrgApacheSlingSecurityImplReferrerFilterInfo;
import org.openapitools.server.api.model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo;
import org.openapitools.server.api.model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo;
import org.openapitools.server.api.model.OrgApacheSlingServletsGetDefaultGetServletInfo;
import org.openapitools.server.api.model.OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo;
import org.openapitools.server.api.model.OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo;
import org.openapitools.server.api.model.OrgApacheSlingServletsPostImplSlingPostServletInfo;
import org.openapitools.server.api.model.OrgApacheSlingServletsResolverSlingServletResolverInfo;
import org.openapitools.server.api.model.OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo;
import org.openapitools.server.api.model.OrgApacheSlingStartupfilterImplStartupFilterImplInfo;
import org.openapitools.server.api.model.OrgApacheSlingTenantInternalTenantProviderImplInfo;
import org.openapitools.server.api.model.OrgApacheSlingTracerInternalLogTracerInfo;
import org.openapitools.server.api.model.OrgApacheSlingXssImplXSSFilterImplInfo;

import java.util.List;
import java.util.Map;

public class ConfigmgrApiVerticle extends AbstractVerticle {
    final static Logger LOGGER = LoggerFactory.getLogger(ConfigmgrApiVerticle.class); 
    
    final static String ADAPTIVEFORMANDINTERACTIVECOMMUNICATIONWEBCHANNELCONFIGURATION_SERVICE_ID = "adaptiveFormAndInteractiveCommunicationWebChannelConfiguration";
    final static String ADAPTIVEFORMANDINTERACTIVECOMMUNICATIONWEBCHANNELTHEMECONFIGUR_SERVICE_ID = "adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur";
    final static String ANALYTICSCOMPONENTQUERYCACHESERVICE_SERVICE_ID = "analyticsComponentQueryCacheService";
    final static String APACHESLINGHEALTHCHECKRESULTHTMLSERIALIZER_SERVICE_ID = "apacheSlingHealthCheckResultHTMLSerializer";
    final static String COMADOBEAEMFORMSNDOCUMENTSCONFIGAEMFORMSMANAGERCONFIGURATION_SERVICE_ID = "comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration";
    final static String COMADOBEAEMTRANSACTIONCOREIMPLTRANSACTIONRECORDER_SERVICE_ID = "comAdobeAemTransactionCoreImplTransactionRecorder";
    final static String COMADOBEAEMUPGRADEPRECHECKSHCIMPLDEPRECATEINDEXESHC_SERVICE_ID = "comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC";
    final static String COMADOBEAEMUPGRADEPRECHECKSHCIMPLREPLICATIONAGENTSDISABLEDHC_SERVICE_ID = "comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC";
    final static String COMADOBEAEMUPGRADEPRECHECKSMBEANIMPLPREUPGRADETASKSMBEANIMPL_SERVICE_ID = "comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl";
    final static String COMADOBEAEMUPGRADEPRECHECKSTASKSIMPLCONSISTENCYCHECKTASKIMPL_SERVICE_ID = "comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl";
    final static String COMADOBECQACCOUNTAPIACCOUNTMANAGEMENTSERVICE_SERVICE_ID = "comAdobeCqAccountApiAccountManagementService";
    final static String COMADOBECQACCOUNTIMPLACCOUNTMANAGEMENTSERVLET_SERVICE_ID = "comAdobeCqAccountImplAccountManagementServlet";
    final static String COMADOBECQADDRESSIMPLLOCATIONLOCATIONLISTSERVLET_SERVICE_ID = "comAdobeCqAddressImplLocationLocationListServlet";
    final static String COMADOBECQAUDITPURGEDAM_SERVICE_ID = "comAdobeCqAuditPurgeDam";
    final static String COMADOBECQAUDITPURGEPAGES_SERVICE_ID = "comAdobeCqAuditPurgePages";
    final static String COMADOBECQAUDITPURGEREPLICATION_SERVICE_ID = "comAdobeCqAuditPurgeReplication";
    final static String COMADOBECQCDNREWRITERIMPLAWSCLOUDFRONTREWRITER_SERVICE_ID = "comAdobeCqCdnRewriterImplAWSCloudFrontRewriter";
    final static String COMADOBECQCDNREWRITERIMPLCDNCONFIGSERVICEIMPL_SERVICE_ID = "comAdobeCqCdnRewriterImplCDNConfigServiceImpl";
    final static String COMADOBECQCDNREWRITERIMPLCDNREWRITER_SERVICE_ID = "comAdobeCqCdnRewriterImplCDNRewriter";
    final static String COMADOBECQCLOUDCONFIGCOREIMPLCONFIGURATIONREPLICATIONEVENTHANDLE_SERVICE_ID = "comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle";
    final static String COMADOBECQCOMMERCEIMPLASSETDYNAMICIMAGEHANDLER_SERVICE_ID = "comAdobeCqCommerceImplAssetDynamicImageHandler";
    final static String COMADOBECQCOMMERCEIMPLASSETPRODUCTASSETHANDLERPROVIDERIMPL_SERVICE_ID = "comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl";
    final static String COMADOBECQCOMMERCEIMPLASSETSTATICIMAGEHANDLER_SERVICE_ID = "comAdobeCqCommerceImplAssetStaticImageHandler";
    final static String COMADOBECQCOMMERCEIMPLASSETVIDEOHANDLER_SERVICE_ID = "comAdobeCqCommerceImplAssetVideoHandler";
    final static String COMADOBECQCOMMERCEIMPLPROMOTIONPROMOTIONMANAGERIMPL_SERVICE_ID = "comAdobeCqCommerceImplPromotionPromotionManagerImpl";
    final static String COMADOBECQCOMMERCEPIMIMPLCATALOGGENERATORCATALOGGENERATORIMPL_SERVICE_ID = "comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl";
    final static String COMADOBECQCOMMERCEPIMIMPLPAGEEVENTLISTENER_SERVICE_ID = "comAdobeCqCommercePimImplPageEventListener";
    final static String COMADOBECQCOMMERCEPIMIMPLPRODUCTFEEDPRODUCTFEEDSERVICEIMPL_SERVICE_ID = "comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl";
    final static String COMADOBECQCONTENTINSIGHTIMPLREPORTINGSERVICESSETTINGSPROVIDER_SERVICE_ID = "comAdobeCqContentinsightImplReportingServicesSettingsProvider";
    final static String COMADOBECQCONTENTINSIGHTIMPLSERVLETSBRIGHTEDGEPROXYSERVLET_SERVICE_ID = "comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet";
    final static String COMADOBECQCONTENTINSIGHTIMPLSERVLETSREPORTINGSERVICESPROXYSERVLE_SERVICE_ID = "comAdobeCqContentinsightImplServletsReportingServicesProxyServle";
    final static String COMADOBECQDAMCFMIMPLCOMPONENTCOMPONENTCONFIGIMPL_SERVICE_ID = "comAdobeCqDamCfmImplComponentComponentConfigImpl";
    final static String COMADOBECQDAMCFMIMPLCONFFEATURECONFIGIMPL_SERVICE_ID = "comAdobeCqDamCfmImplConfFeatureConfigImpl";
    final static String COMADOBECQDAMCFMIMPLCONTENTREWRITERASSETPROCESSOR_SERVICE_ID = "comAdobeCqDamCfmImplContentRewriterAssetProcessor";
    final static String COMADOBECQDAMCFMIMPLCONTENTREWRITERPARRANGEFILTER_SERVICE_ID = "comAdobeCqDamCfmImplContentRewriterParRangeFilter";
    final static String COMADOBECQDAMCFMIMPLCONTENTREWRITERPAYLOADFILTER_SERVICE_ID = "comAdobeCqDamCfmImplContentRewriterPayloadFilter";
    final static String COMADOBECQDAMDMPROCESSIMAGEPTIFFMANAGERIMPL_SERVICE_ID = "comAdobeCqDamDmProcessImagePTiffManagerImpl";
    final static String COMADOBECQDAMIPSIMPLREPLICATIONTRIGGERREPLICATEONMODIFYWORKER_SERVICE_ID = "comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker";
    final static String COMADOBECQDAMMACSYNCHELPERIMPLMACSYNCCLIENTIMPL_SERVICE_ID = "comAdobeCqDamMacSyncHelperImplMACSyncClientImpl";
    final static String COMADOBECQDAMMACSYNCIMPLDAMSYNCSERVICEIMPL_SERVICE_ID = "comAdobeCqDamMacSyncImplDAMSyncServiceImpl";
    final static String COMADOBECQDAMPROCESSORNUIIMPLNUIASSETPROCESSOR_SERVICE_ID = "comAdobeCqDamProcessorNuiImplNuiAssetProcessor";
    final static String COMADOBECQDAMS7IMAGINGIMPLISIMAGESERVERCOMPONENT_SERVICE_ID = "comAdobeCqDamS7imagingImplIsImageServerComponent";
    final static String COMADOBECQDAMS7IMAGINGIMPLPSPLATFORMSERVERSERVLET_SERVICE_ID = "comAdobeCqDamS7imagingImplPsPlatformServerServlet";
    final static String COMADOBECQDAMWEBDAVIMPLIOASSETIOHANDLER_SERVICE_ID = "comAdobeCqDamWebdavImplIoAssetIOHandler";
    final static String COMADOBECQDAMWEBDAVIMPLIODAMWEBDAVVERSIONLINKINGJOB_SERVICE_ID = "comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob";
    final static String COMADOBECQDAMWEBDAVIMPLIOSPECIALFILESHANDLER_SERVICE_ID = "comAdobeCqDamWebdavImplIoSpecialFilesHandler";
    final static String COMADOBECQDESERFWIMPLDESERIALIZATIONFIREWALLIMPL_SERVICE_ID = "comAdobeCqDeserfwImplDeserializationFirewallImpl";
    final static String COMADOBECQDTMIMPLSERVICEDTMWEBSERVICEIMPL_SERVICE_ID = "comAdobeCqDtmImplServiceDTMWebServiceImpl";
    final static String COMADOBECQDTMIMPLSERVLETSDTMDEPLOYHOOKSERVLET_SERVICE_ID = "comAdobeCqDtmImplServletsDTMDeployHookServlet";
    final static String COMADOBECQDTMREACTORIMPLSERVICEWEBSERVICEIMPL_SERVICE_ID = "comAdobeCqDtmReactorImplServiceWebServiceImpl";
    final static String COMADOBECQEXPERIENCELOGIMPLEXPERIENCELOGCONFIGSERVLET_SERVICE_ID = "comAdobeCqExperiencelogImplExperienceLogConfigServlet";
    final static String COMADOBECQHCCONTENTPACKAGESHEALTHCHECK_SERVICE_ID = "comAdobeCqHcContentPackagesHealthCheck";
    final static String COMADOBECQHISTORYIMPLHISTORYREQUESTFILTER_SERVICE_ID = "comAdobeCqHistoryImplHistoryRequestFilter";
    final static String COMADOBECQHISTORYIMPLHISTORYSERVICEIMPL_SERVICE_ID = "comAdobeCqHistoryImplHistoryServiceImpl";
    final static String COMADOBECQINBOXIMPLTYPEPROVIDERITEMTYPEPROVIDER_SERVICE_ID = "comAdobeCqInboxImplTypeproviderItemTypeProvider";
    final static String COMADOBECQPROJECTSIMPLSERVLETPROJECTIMAGESERVLET_SERVICE_ID = "comAdobeCqProjectsImplServletProjectImageServlet";
    final static String COMADOBECQPROJECTSPURGESCHEDULER_SERVICE_ID = "comAdobeCqProjectsPurgeScheduler";
    final static String COMADOBECQSCHEDULEDEXPORTERIMPLSCHEDULEDEXPORTERIMPL_SERVICE_ID = "comAdobeCqScheduledExporterImplScheduledExporterImpl";
    final static String COMADOBECQSCREENSANALYTICSIMPLSCREENSANALYTICSSERVICEIMPL_SERVICE_ID = "comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl";
    final static String COMADOBECQSCREENSDEVICEIMPLDEVICESERVICE_SERVICE_ID = "comAdobeCqScreensDeviceImplDeviceService";
    final static String COMADOBECQSCREENSDEVICEREGISTRATIONIMPLREGISTRATIONSERVICEIMPL_SERVICE_ID = "comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl";
    final static String COMADOBECQSCREENSIMPLHANDLERCHANNELSUPDATEHANDLER_SERVICE_ID = "comAdobeCqScreensImplHandlerChannelsUpdateHandler";
    final static String COMADOBECQSCREENSIMPLJOBSDISTRIBUTEDDEVICESSTATIUPDATEJOB_SERVICE_ID = "comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob";
    final static String COMADOBECQSCREENSIMPLREMOTEIMPLDISTRIBUTEDHTTPCLIENTIMPL_SERVICE_ID = "comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl";
    final static String COMADOBECQSCREENSIMPLSCREENSCHANNELPOSTPROCESSOR_SERVICE_ID = "comAdobeCqScreensImplScreensChannelPostProcessor";
    final static String COMADOBECQSCREENSMONITORINGIMPLSCREENSMONITORINGSERVICEIMPL_SERVICE_ID = "comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl";
    final static String COMADOBECQSCREENSMQACTIVEMQIMPLARTEMISJMSPROVIDER_SERVICE_ID = "comAdobeCqScreensMqActivemqImplArtemisJMSProvider";
    final static String COMADOBECQSCREENSOFFLINECONTENTIMPLBULKOFFLINEUPDATESERVICEIMPL_SERVICE_ID = "comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl";
    final static String COMADOBECQSCREENSOFFLINECONTENTIMPLOFFLINECONTENTSERVICEIMPL_SERVICE_ID = "comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl";
    final static String COMADOBECQSCREENSSEGMENTATIONIMPLSEGMENTATIONFEATUREFLAG_SERVICE_ID = "comAdobeCqScreensSegmentationImplSegmentationFeatureFlag";
    final static String COMADOBECQSECURITYHCBUNDLESIMPLHTMLLIBRARYMANAGERCONFIGHEALTHCH_SERVICE_ID = "comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh";
    final static String COMADOBECQSECURITYHCBUNDLESIMPLWCMFILTERHEALTHCHECK_SERVICE_ID = "comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck";
    final static String COMADOBECQSECURITYHCDISPATCHERIMPLDISPATCHERACCESSHEALTHCHECK_SERVICE_ID = "comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck";
    final static String COMADOBECQSECURITYHCPACKAGESIMPLEXAMPLECONTENTHEALTHCHECK_SERVICE_ID = "comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck";
    final static String COMADOBECQSECURITYHCWEBSERVERIMPLCLICKJACKINGHEALTHCHECK_SERVICE_ID = "comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck";
    final static String COMADOBECQSOCIALACCOUNTVERIFICATIONIMPLACCOUNTMANAGEMENTCONFIGIM_SERVICE_ID = "comAdobeCqSocialAccountverificationImplAccountManagementConfigIm";
    final static String COMADOBECQSOCIALACTIVITYSTREAMSCLIENTIMPLSOCIALACTIVITYCOMPONEN_SERVICE_ID = "comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen";
    final static String COMADOBECQSOCIALACTIVITYSTREAMSCLIENTIMPLSOCIALACTIVITYSTREAMCO_SERVICE_ID = "comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo";
    final static String COMADOBECQSOCIALACTIVITYSTREAMSLISTENERIMPLEVENTLISTENERHANDLER_SERVICE_ID = "comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler";
    final static String COMADOBECQSOCIALACTIVITYSTREAMSLISTENERIMPLMODERATIONEVENTEXTEN_SERVICE_ID = "comAdobeCqSocialActivitystreamsListenerImplModerationEventExten";
    final static String COMADOBECQSOCIALACTIVITYSTREAMSLISTENERIMPLRATINGEVENTACTIVITYS_SERVICE_ID = "comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS";
    final static String COMADOBECQSOCIALACTIVITYSTREAMSLISTENERIMPLRESOURCEACTIVITYSTRE_SERVICE_ID = "comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre";
    final static String COMADOBECQSOCIALCALENDARCLIENTENDPOINTSIMPLCALENDAROPERATIONSI_SERVICE_ID = "comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI";
    final static String COMADOBECQSOCIALCALENDARCLIENTOPERATIONEXTENSIONSEVENTATTACHMEN_SERVICE_ID = "comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen";
    final static String COMADOBECQSOCIALCALENDARSERVLETSTIMEZONESERVLET_SERVICE_ID = "comAdobeCqSocialCalendarServletsTimeZoneServlet";
    final static String COMADOBECQSOCIALCOMMONSCOMMENTSENDPOINTSIMPLCOMMENTDELETEEVENT_SERVICE_ID = "comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent";
    final static String COMADOBECQSOCIALCOMMONSCOMMENTSENDPOINTSIMPLCOMMENTOPERATIONSE_SERVICE_ID = "comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe";
    final static String COMADOBECQSOCIALCOMMONSCOMMENTSENDPOINTSIMPLTRANSLATIONOPERATI_SERVICE_ID = "comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati";
    final static String COMADOBECQSOCIALCOMMONSCOMMENTSLISTINGIMPLSEARCHCOMMENTSOCIALC_SERVICE_ID = "comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC";
    final static String COMADOBECQSOCIALCOMMONSCOMMENTSSCHEDULERIMPLSEARCHSCHEDULEDPOS_SERVICE_ID = "comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos";
    final static String COMADOBECQSOCIALCOMMONSCORSCORSAUTHENTICATIONFILTER_SERVICE_ID = "comAdobeCqSocialCommonsCorsCORSAuthenticationFilter";
    final static String COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLANDROIDEMAILCLIENTPROVIDER_SERVICE_ID = "comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider";
    final static String COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLCOMMENTEMAILBUILDERIMPL_SERVICE_ID = "comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl";
    final static String COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLCOMMENTEMAILEVENTLISTENER_SERVICE_ID = "comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener";
    final static String COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLCUSTOMEMAILCLIENTPROVIDER_SERVICE_ID = "comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider";
    final static String COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLEMAILQUOTEDTEXTPATTERNSIMP_SERVICE_ID = "comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp";
    final static String COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLEMAILREPLYCONFIGURATIONIMP_SERVICE_ID = "comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp";
    final static String COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLEMAILREPLYIMPORTER_SERVICE_ID = "comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter";
    final static String COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLGMAILEMAILCLIENTPROVIDER_SERVICE_ID = "comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider";
    final static String COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLIOSEMAILCLIENTPROVIDER_SERVICE_ID = "comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider";
    final static String COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLMACMAILEMAILCLIENTPROVIDER_SERVICE_ID = "comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider";
    final static String COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLOUTLOOKEMAILCLIENTPROVIDER_SERVICE_ID = "comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider";
    final static String COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLUNKNOWNEMAILCLIENTPROVIDER_SERVICE_ID = "comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider";
    final static String COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLYAHOOEMAILCLIENTPROVIDER_SERVICE_ID = "comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider";
    final static String COMADOBECQSOCIALCOMMONSMAINTAINANCEIMPLDELETETEMPUGCIMAGEUPLOAD_SERVICE_ID = "comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload";
    final static String COMADOBECQSOCIALCOMMONSUGCLIMITERIMPLUGCLIMITERSERVICEIMPL_SERVICE_ID = "comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl";
    final static String COMADOBECQSOCIALCOMMONSUGCLIMITSCONFIGIMPLCOMMUNITYUSERUGCLIMIT_SERVICE_ID = "comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit";
    final static String COMADOBECQSOCIALCONNECTOAUTHIMPLFACEBOOKPROVIDERIMPL_SERVICE_ID = "comAdobeCqSocialConnectOauthImplFacebookProviderImpl";
    final static String COMADOBECQSOCIALCONNECTOAUTHIMPLSOCIALOAUTHAUTHENTICATIONHANDLE_SERVICE_ID = "comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle";
    final static String COMADOBECQSOCIALCONNECTOAUTHIMPLSOCIALOAUTHUSERPROFILEMAPPER_SERVICE_ID = "comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper";
    final static String COMADOBECQSOCIALCONNECTOAUTHIMPLTWITTERPROVIDERIMPL_SERVICE_ID = "comAdobeCqSocialConnectOauthImplTwitterProviderImpl";
    final static String COMADOBECQSOCIALCONTENTFRAGMENTSSERVICESIMPLCOMMUNITIESFRAGMEN_SERVICE_ID = "comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen";
    final static String COMADOBECQSOCIALDATASTOREASIMPLASRESOURCEPROVIDERFACTORY_SERVICE_ID = "comAdobeCqSocialDatastoreAsImplASResourceProviderFactory";
    final static String COMADOBECQSOCIALDATASTOREOPIMPLSOCIALMSRESOURCEPROVIDERFACTORY_SERVICE_ID = "comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory";
    final static String COMADOBECQSOCIALDATASTORERDBIMPLSOCIALRDBRESOURCEPROVIDERFACTOR_SERVICE_ID = "comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor";
    final static String COMADOBECQSOCIALENABLEMENTADAPTORSENABLEMENTLEARNINGPATHADAPTORF_SERVICE_ID = "comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF";
    final static String COMADOBECQSOCIALENABLEMENTADAPTORSENABLEMENTRESOURCEADAPTORFACTO_SERVICE_ID = "comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto";
    final static String COMADOBECQSOCIALENABLEMENTLEARNINGPATHENDPOINTSIMPLENABLEMENTL_SERVICE_ID = "comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL";
    final static String COMADOBECQSOCIALENABLEMENTRESOURCEENDPOINTSIMPLENABLEMENTRESOU_SERVICE_ID = "comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou";
    final static String COMADOBECQSOCIALENABLEMENTSERVICESIMPLAUTHORMARKERIMPL_SERVICE_ID = "comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl";
    final static String COMADOBECQSOCIALFILELIBRARYCLIENTENDPOINTSFILELIBRARYDOWNLOADGE_SERVICE_ID = "comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe";
    final static String COMADOBECQSOCIALFILELIBRARYCLIENTENDPOINTSIMPLFILELIBRARYOPERA_SERVICE_ID = "comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera";
    final static String COMADOBECQSOCIALFORUMCLIENTENDPOINTSIMPLFORUMOPERATIONSSERVICE_SERVICE_ID = "comAdobeCqSocialForumClientEndpointsImplForumOperationsService";
    final static String COMADOBECQSOCIALFORUMDISPATCHERIMPLFLUSHOPERATIONS_SERVICE_ID = "comAdobeCqSocialForumDispatcherImplFlushOperations";
    final static String COMADOBECQSOCIALGROUPCLIENTIMPLCOMMUNITYGROUPCOLLECTIONCOMPONEN_SERVICE_ID = "comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen";
    final static String COMADOBECQSOCIALGROUPIMPLGROUPSERVICEIMPL_SERVICE_ID = "comAdobeCqSocialGroupImplGroupServiceImpl";
    final static String COMADOBECQSOCIALHANDLEBARSGUAVATEMPLATECACHEIMPL_SERVICE_ID = "comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl";
    final static String COMADOBECQSOCIALIDEATIONCLIENTENDPOINTSIMPLIDEATIONOPERATIONSS_SERVICE_ID = "comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS";
    final static String COMADOBECQSOCIALJOURNALCLIENTENDPOINTSIMPLJOURNALOPERATIONSSER_SERVICE_ID = "comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer";
    final static String COMADOBECQSOCIALMEMBERSENDPOINTSIMPLCOMMUNITYMEMBERGROUPPROFILE_SERVICE_ID = "comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile";
    final static String COMADOBECQSOCIALMEMBERSENDPOINTSIMPLCOMMUNITYMEMBERUSERPROFILEO_SERVICE_ID = "comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO";
    final static String COMADOBECQSOCIALMEMBERSIMPLCOMMUNITYMEMBERGROUPPROFILECOMPONENTF_SERVICE_ID = "comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF";
    final static String COMADOBECQSOCIALMESSAGINGCLIENTENDPOINTSIMPLMESSAGINGOPERATION_SERVICE_ID = "comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation";
    final static String COMADOBECQSOCIALMODERATIONDASHBOARDAPIFILTERGROUPSOCIALCOMPONEN_SERVICE_ID = "comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen";
    final static String COMADOBECQSOCIALMODERATIONDASHBOARDAPIMODERATIONDASHBOARDSOCIAL_SERVICE_ID = "comAdobeCqSocialModerationDashboardApiModerationDashboardSocial";
    final static String COMADOBECQSOCIALMODERATIONDASHBOARDAPIUSERDETAILSSOCIALCOMPONEN_SERVICE_ID = "comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen";
    final static String COMADOBECQSOCIALMODERATIONDASHBOARDINTERNALIMPLFILTERGROUPSOCI_SERVICE_ID = "comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci";
    final static String COMADOBECQSOCIALNOTIFICATIONSIMPLMENTIONSROUTER_SERVICE_ID = "comAdobeCqSocialNotificationsImplMentionsRouter";
    final static String COMADOBECQSOCIALNOTIFICATIONSIMPLNOTIFICATIONMANAGERIMPL_SERVICE_ID = "comAdobeCqSocialNotificationsImplNotificationManagerImpl";
    final static String COMADOBECQSOCIALNOTIFICATIONSIMPLNOTIFICATIONSROUTER_SERVICE_ID = "comAdobeCqSocialNotificationsImplNotificationsRouter";
    final static String COMADOBECQSOCIALQNACLIENTENDPOINTSIMPLQNAFORUMOPERATIONSSERVIC_SERVICE_ID = "comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic";
    final static String COMADOBECQSOCIALREPORTINGANALYTICSSERVICESIMPLANALYTICSREPORTI_SERVICE_ID = "comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI";
    final static String COMADOBECQSOCIALREPORTINGANALYTICSSERVICESIMPLANALYTICSREPORTM_SERVICE_ID = "comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM";
    final static String COMADOBECQSOCIALREPORTINGANALYTICSSERVICESIMPLSITETRENDREPORTS_SERVICE_ID = "comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS";
    final static String COMADOBECQSOCIALREVIEWCLIENTENDPOINTSIMPLREVIEWOPERATIONSSERVI_SERVICE_ID = "comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi";
    final static String COMADOBECQSOCIALSCFCOREOPERATIONSIMPLSOCIALOPERATIONSSERVLET_SERVICE_ID = "comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet";
    final static String COMADOBECQSOCIALSCFENDPOINTSIMPLDEFAULTSOCIALGETSERVLET_SERVICE_ID = "comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet";
    final static String COMADOBECQSOCIALSCORINGIMPLSCORINGEVENTLISTENER_SERVICE_ID = "comAdobeCqSocialScoringImplScoringEventListener";
    final static String COMADOBECQSOCIALSERVICEUSERSINTERNALIMPLSERVICEUSERWRAPPERIMPL_SERVICE_ID = "comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl";
    final static String COMADOBECQSOCIALSITEENDPOINTSIMPLSITEOPERATIONSERVICE_SERVICE_ID = "comAdobeCqSocialSiteEndpointsImplSiteOperationService";
    final static String COMADOBECQSOCIALSITEIMPLANALYTICSCOMPONENTCONFIGURATIONSERVICEIM_SERVICE_ID = "comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm";
    final static String COMADOBECQSOCIALSITEIMPLSITECONFIGURATORIMPL_SERVICE_ID = "comAdobeCqSocialSiteImplSiteConfiguratorImpl";
    final static String COMADOBECQSOCIALSRPIMPLSOCIALSOLRCONNECTOR_SERVICE_ID = "comAdobeCqSocialSrpImplSocialSolrConnector";
    final static String COMADOBECQSOCIALSYNCIMPLDIFFCHANGESOBSERVER_SERVICE_ID = "comAdobeCqSocialSyncImplDiffChangesObserver";
    final static String COMADOBECQSOCIALSYNCIMPLGROUPSYNCLISTENERIMPL_SERVICE_ID = "comAdobeCqSocialSyncImplGroupSyncListenerImpl";
    final static String COMADOBECQSOCIALSYNCIMPLPUBLISHERSYNCSERVICEIMPL_SERVICE_ID = "comAdobeCqSocialSyncImplPublisherSyncServiceImpl";
    final static String COMADOBECQSOCIALSYNCIMPLUSERSYNCLISTENERIMPL_SERVICE_ID = "comAdobeCqSocialSyncImplUserSyncListenerImpl";
    final static String COMADOBECQSOCIALTRANSLATIONIMPLTRANSLATIONSERVICECONFIGMANAGER_SERVICE_ID = "comAdobeCqSocialTranslationImplTranslationServiceConfigManager";
    final static String COMADOBECQSOCIALTRANSLATIONIMPLUGCLANGUAGEDETECTOR_SERVICE_ID = "comAdobeCqSocialTranslationImplUGCLanguageDetector";
    final static String COMADOBECQSOCIALUGCBASEDISPATCHERIMPLFLUSHSERVICEIMPL_SERVICE_ID = "comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl";
    final static String COMADOBECQSOCIALUGCBASEIMPLAYSNCREVERSEREPLICATORIMPL_SERVICE_ID = "comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl";
    final static String COMADOBECQSOCIALUGCBASEIMPLPUBLISHERCONFIGURATIONIMPL_SERVICE_ID = "comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl";
    final static String COMADOBECQSOCIALUGCBASEIMPLSOCIALUTILSIMPL_SERVICE_ID = "comAdobeCqSocialUgcbaseImplSocialUtilsImpl";
    final static String COMADOBECQSOCIALUGCBASEMODERATIONIMPLAUTOMODERATIONIMPL_SERVICE_ID = "comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl";
    final static String COMADOBECQSOCIALUGCBASEMODERATIONIMPLSENTIMENTPROCESS_SERVICE_ID = "comAdobeCqSocialUgcbaseModerationImplSentimentProcess";
    final static String COMADOBECQSOCIALUGCBASESECURITYIMPLDEFAULTATTACHMENTTYPEBLACKLI_SERVICE_ID = "comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli";
    final static String COMADOBECQSOCIALUGCBASESECURITYIMPLSAFERSLINGPOSTVALIDATORIMPL_SERVICE_ID = "comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl";
    final static String COMADOBECQSOCIALUSERENDPOINTSIMPLUSERSGROUPFROMPUBLISHSERVLET_SERVICE_ID = "comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet";
    final static String COMADOBECQSOCIALUSERIMPLTRANSPORTHTTPTOPUBLISHER_SERVICE_ID = "comAdobeCqSocialUserImplTransportHttpToPublisher";
    final static String COMADOBECQUIWCMCOMMONSINTERNALSERVLETSRTERTEFILTERSERVLETFACT_SERVICE_ID = "comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact";
    final static String COMADOBECQUPGRADESCLEANUPIMPLUPGRADECONTENTCLEANUP_SERVICE_ID = "comAdobeCqUpgradesCleanupImplUpgradeContentCleanup";
    final static String COMADOBECQUPGRADESCLEANUPIMPLUPGRADEINSTALLFOLDERCLEANUP_SERVICE_ID = "comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup";
    final static String COMADOBECQWCMJOBSASYNCIMPLASYNCDELETECONFIGPROVIDERSERVICE_SERVICE_ID = "comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService";
    final static String COMADOBECQWCMJOBSASYNCIMPLASYNCJOBCLEANUPTASK_SERVICE_ID = "comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask";
    final static String COMADOBECQWCMJOBSASYNCIMPLASYNCMOVECONFIGPROVIDERSERVICE_SERVICE_ID = "comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService";
    final static String COMADOBECQWCMJOBSASYNCIMPLASYNCPAGEMOVECONFIGPROVIDERSERVICE_SERVICE_ID = "comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService";
    final static String COMADOBECQWCMLAUNCHESIMPLLAUNCHESEVENTHANDLER_SERVICE_ID = "comAdobeCqWcmLaunchesImplLaunchesEventHandler";
    final static String COMADOBECQWCMMOBILEQRCODESERVLETQRCODEIMAGEGENERATOR_SERVICE_ID = "comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator";
    final static String COMADOBECQWCMSTYLEINTERNALCOMPONENTSTYLEINFOCACHEIMPL_SERVICE_ID = "comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl";
    final static String COMADOBECQWCMTRANSLATIONIMPLTRANSLATIONPLATFORMCONFIGURATIONIMPL_SERVICE_ID = "comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl";
    final static String COMADOBEFDFPCONFIGFORMSPORTALDRAFTSANDSUBMISSIONCONFIGSERVICE_SERVICE_ID = "comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService";
    final static String COMADOBEFDFPCONFIGFORMSPORTALSCHEDULERSERVICE_SERVICE_ID = "comAdobeFdFpConfigFormsPortalSchedulerService";
    final static String COMADOBEFORMSCOMMONSERVICEIMPLDEFAULTDATAPROVIDER_SERVICE_ID = "comAdobeFormsCommonServiceImplDefaultDataProvider";
    final static String COMADOBEFORMSCOMMONSERVICEIMPLFORMSCOMMONCONFIGURATIONSERVICEIMP_SERVICE_ID = "comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp";
    final static String COMADOBEFORMSCOMMONSERVLETTEMPCLEANUPTASK_SERVICE_ID = "comAdobeFormsCommonServletTempCleanUpTask";
    final static String COMADOBEGRANITEACPPLATFORMPLATFORMSERVLET_SERVICE_ID = "comAdobeGraniteAcpPlatformPlatformServlet";
    final static String COMADOBEGRANITEACTIVITYSTREAMSIMPLACTIVITYMANAGERIMPL_SERVICE_ID = "comAdobeGraniteActivitystreamsImplActivityManagerImpl";
    final static String COMADOBEGRANITEANALYZERBASESYSTEMSTATUSSERVLET_SERVICE_ID = "comAdobeGraniteAnalyzerBaseSystemStatusServlet";
    final static String COMADOBEGRANITEANALYZERSCRIPTSCOMPILEALLSCRIPTSCOMPILERSERVLET_SERVICE_ID = "comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet";
    final static String COMADOBEGRANITEAPICONTROLLERFILTERRESOLVERHOOKFACTORY_SERVICE_ID = "comAdobeGraniteApicontrollerFilterResolverHookFactory";
    final static String COMADOBEGRANITEAUTHCERTIMPLCLIENTCERTAUTHHANDLER_SERVICE_ID = "comAdobeGraniteAuthCertImplClientCertAuthHandler";
    final static String COMADOBEGRANITEAUTHIMS_SERVICE_ID = "comAdobeGraniteAuthIms";
    final static String COMADOBEGRANITEAUTHIMSIMPLEXTERNALUSERIDMAPPINGPROVIDEREXTENSION_SERVICE_ID = "comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension";
    final static String COMADOBEGRANITEAUTHIMSIMPLIMSACCESSTOKENREQUESTCUSTOMIZERIMPL_SERVICE_ID = "comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl";
    final static String COMADOBEGRANITEAUTHIMSIMPLIMSINSTANCECREDENTIALSVALIDATOR_SERVICE_ID = "comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator";
    final static String COMADOBEGRANITEAUTHIMSIMPLIMSPROVIDERIMPL_SERVICE_ID = "comAdobeGraniteAuthImsImplIMSProviderImpl";
    final static String COMADOBEGRANITEAUTHIMSIMPLIMSCONFIGPROVIDERIMPL_SERVICE_ID = "comAdobeGraniteAuthImsImplImsConfigProviderImpl";
    final static String COMADOBEGRANITEAUTHOAUTHACCESSTOKENPROVIDER_SERVICE_ID = "comAdobeGraniteAuthOauthAccesstokenProvider";
    final static String COMADOBEGRANITEAUTHOAUTHIMPLBEARERAUTHENTICATIONHANDLER_SERVICE_ID = "comAdobeGraniteAuthOauthImplBearerAuthenticationHandler";
    final static String COMADOBEGRANITEAUTHOAUTHIMPLDEFAULTTOKENVALIDATORIMPL_SERVICE_ID = "comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl";
    final static String COMADOBEGRANITEAUTHOAUTHIMPLFACEBOOKPROVIDERIMPL_SERVICE_ID = "comAdobeGraniteAuthOauthImplFacebookProviderImpl";
    final static String COMADOBEGRANITEAUTHOAUTHIMPLGITHUBPROVIDERIMPL_SERVICE_ID = "comAdobeGraniteAuthOauthImplGithubProviderImpl";
    final static String COMADOBEGRANITEAUTHOAUTHIMPLGRANITEPROVIDER_SERVICE_ID = "comAdobeGraniteAuthOauthImplGraniteProvider";
    final static String COMADOBEGRANITEAUTHOAUTHIMPLHELPERPROVIDERCONFIGMANAGER_SERVICE_ID = "comAdobeGraniteAuthOauthImplHelperProviderConfigManager";
    final static String COMADOBEGRANITEAUTHOAUTHIMPLHELPERPROVIDERCONFIGMANAGERINTERNAL_SERVICE_ID = "comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal";
    final static String COMADOBEGRANITEAUTHOAUTHIMPLOAUTHAUTHENTICATIONHANDLER_SERVICE_ID = "comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler";
    final static String COMADOBEGRANITEAUTHOAUTHIMPLTWITTERPROVIDERIMPL_SERVICE_ID = "comAdobeGraniteAuthOauthImplTwitterProviderImpl";
    final static String COMADOBEGRANITEAUTHOAUTHPROVIDER_SERVICE_ID = "comAdobeGraniteAuthOauthProvider";
    final static String COMADOBEGRANITEAUTHREQUIREMENTIMPLDEFAULTREQUIREMENTHANDLER_SERVICE_ID = "comAdobeGraniteAuthRequirementImplDefaultRequirementHandler";
    final static String COMADOBEGRANITEAUTHSAMLSAMLAUTHENTICATIONHANDLER_SERVICE_ID = "comAdobeGraniteAuthSamlSamlAuthenticationHandler";
    final static String COMADOBEGRANITEAUTHSSOIMPLSSOAUTHENTICATIONHANDLER_SERVICE_ID = "comAdobeGraniteAuthSsoImplSsoAuthenticationHandler";
    final static String COMADOBEGRANITEBUNDLESHCIMPLCODECACHEHEALTHCHECK_SERVICE_ID = "comAdobeGraniteBundlesHcImplCodeCacheHealthCheck";
    final static String COMADOBEGRANITEBUNDLESHCIMPLCRXDESUPPORTBUNDLEHEALTHCHECK_SERVICE_ID = "comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck";
    final static String COMADOBEGRANITEBUNDLESHCIMPLDAVEXBUNDLEHEALTHCHECK_SERVICE_ID = "comAdobeGraniteBundlesHcImplDavExBundleHealthCheck";
    final static String COMADOBEGRANITEBUNDLESHCIMPLINACTIVEBUNDLESHEALTHCHECK_SERVICE_ID = "comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck";
    final static String COMADOBEGRANITEBUNDLESHCIMPLJOBSHEALTHCHECK_SERVICE_ID = "comAdobeGraniteBundlesHcImplJobsHealthCheck";
    final static String COMADOBEGRANITEBUNDLESHCIMPLSLINGGETSERVLETHEALTHCHECK_SERVICE_ID = "comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck";
    final static String COMADOBEGRANITEBUNDLESHCIMPLSLINGJAVASCRIPTHANDLERHEALTHCHECK_SERVICE_ID = "comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck";
    final static String COMADOBEGRANITEBUNDLESHCIMPLSLINGJSPSCRIPTHANDLERHEALTHCHECK_SERVICE_ID = "comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck";
    final static String COMADOBEGRANITEBUNDLESHCIMPLSLINGREFERRERFILTERHEALTHCHECK_SERVICE_ID = "comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck";
    final static String COMADOBEGRANITEBUNDLESHCIMPLWEBDAVBUNDLEHEALTHCHECK_SERVICE_ID = "comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck";
    final static String COMADOBEGRANITECOMMENTSINTERNALCOMMENTREPLICATIONCONTENTFILTERFAC_SERVICE_ID = "comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac";
    final static String COMADOBEGRANITECOMPATROUTERIMPLCOMPATSWITCHINGSERVICEIMPL_SERVICE_ID = "comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl";
    final static String COMADOBEGRANITECOMPATROUTERIMPLROUTINGCONFIG_SERVICE_ID = "comAdobeGraniteCompatrouterImplRoutingConfig";
    final static String COMADOBEGRANITECOMPATROUTERIMPLSWITCHMAPPINGCONFIG_SERVICE_ID = "comAdobeGraniteCompatrouterImplSwitchMappingConfig";
    final static String COMADOBEGRANITECONFIMPLRUNTIMEAWARECONFIGURATIONRESOURCERESOLVING_SERVICE_ID = "comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving";
    final static String COMADOBEGRANITECONTEXTHUBIMPLCONTEXTHUBIMPL_SERVICE_ID = "comAdobeGraniteContexthubImplContextHubImpl";
    final static String COMADOBEGRANITECORSIMPLCORSPOLICYIMPL_SERVICE_ID = "comAdobeGraniteCorsImplCORSPolicyImpl";
    final static String COMADOBEGRANITECSRFIMPLCSRFFILTER_SERVICE_ID = "comAdobeGraniteCsrfImplCSRFFilter";
    final static String COMADOBEGRANITECSRFIMPLCSRFSERVLET_SERVICE_ID = "comAdobeGraniteCsrfImplCSRFServlet";
    final static String COMADOBEGRANITEDISTRIBUTIONCOREIMPLCRYPTODISTRIBUTIONTRANSPORTSE_SERVICE_ID = "comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe";
    final static String COMADOBEGRANITEDISTRIBUTIONCOREIMPLDIFFDIFFCHANGESOBSERVER_SERVICE_ID = "comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver";
    final static String COMADOBEGRANITEDISTRIBUTIONCOREIMPLDIFFDIFFEVENTLISTENER_SERVICE_ID = "comAdobeGraniteDistributionCoreImplDiffDiffEventListener";
    final static String COMADOBEGRANITEDISTRIBUTIONCOREIMPLDISTRIBUTIONTOREPLICATIONEVEN_SERVICE_ID = "comAdobeGraniteDistributionCoreImplDistributionToReplicationEven";
    final static String COMADOBEGRANITEDISTRIBUTIONCOREIMPLREPLICATIONADAPTERSREPLICAT_SERVICE_ID = "comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat";
    final static String COMADOBEGRANITEDISTRIBUTIONCOREIMPLREPLICATIONDISTRIBUTIONTRANS_SERVICE_ID = "comAdobeGraniteDistributionCoreImplReplicationDistributionTrans";
    final static String COMADOBEGRANITEDISTRIBUTIONCOREIMPLTRANSPORTACCESSTOKENDISTRIBU_SERVICE_ID = "comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu";
    final static String COMADOBEGRANITEFRAGSIMPLCHECKHTTPHEADERFLAG_SERVICE_ID = "comAdobeGraniteFragsImplCheckHttpHeaderFlag";
    final static String COMADOBEGRANITEFRAGSIMPLRANDOMFEATURE_SERVICE_ID = "comAdobeGraniteFragsImplRandomFeature";
    final static String COMADOBEGRANITEHTTPCACHEFILEFILECACHESTORE_SERVICE_ID = "comAdobeGraniteHttpcacheFileFileCacheStore";
    final static String COMADOBEGRANITEHTTPCACHEIMPLOUTERCACHEFILTER_SERVICE_ID = "comAdobeGraniteHttpcacheImplOuterCacheFilter";
    final static String COMADOBEGRANITEI18NIMPLBUNDLEPSEUDOTRANSLATIONS_SERVICE_ID = "comAdobeGraniteI18nImplBundlePseudoTranslations";
    final static String COMADOBEGRANITEI18NIMPLPREFERENCESLOCALERESOLVERSERVICE_SERVICE_ID = "comAdobeGraniteI18nImplPreferencesLocaleResolverService";
    final static String COMADOBEGRANITEINFOCOLLECTORINFOCOLLECTOR_SERVICE_ID = "comAdobeGraniteInfocollectorInfoCollector";
    final static String COMADOBEGRANITEJETTYSSLINTERNALGRANITESSLCONNECTORFACTORY_SERVICE_ID = "comAdobeGraniteJettySslInternalGraniteSslConnectorFactory";
    final static String COMADOBEGRANITELICENSEIMPLLICENSECHECKFILTER_SERVICE_ID = "comAdobeGraniteLicenseImplLicenseCheckFilter";
    final static String COMADOBEGRANITELOGGINGIMPLLOGANALYSERIMPL_SERVICE_ID = "comAdobeGraniteLoggingImplLogAnalyserImpl";
    final static String COMADOBEGRANITELOGGINGIMPLLOGERRORHEALTHCHECK_SERVICE_ID = "comAdobeGraniteLoggingImplLogErrorHealthCheck";
    final static String COMADOBEGRANITEMAINTENANCECRXIMPLDATASTOREGARBAGECOLLECTIONTASK_SERVICE_ID = "comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask";
    final static String COMADOBEGRANITEMAINTENANCECRXIMPLLUCENEBINARIESCLEANUPTASK_SERVICE_ID = "comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask";
    final static String COMADOBEGRANITEMAINTENANCECRXIMPLREVISIONCLEANUPTASK_SERVICE_ID = "comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask";
    final static String COMADOBEGRANITEMONITORINGIMPLSCRIPTCONFIGIMPL_SERVICE_ID = "comAdobeGraniteMonitoringImplScriptConfigImpl";
    final static String COMADOBEGRANITEOAUTHSERVERAUTHIMPLOAUTH2SERVERAUTHENTICATIONHAN_SERVICE_ID = "comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan";
    final static String COMADOBEGRANITEOAUTHSERVERIMPLACCESSTOKENCLEANUPTASK_SERVICE_ID = "comAdobeGraniteOauthServerImplAccessTokenCleanupTask";
    final static String COMADOBEGRANITEOAUTHSERVERIMPLOAUTH2CLIENTREVOCATIONSERVLET_SERVICE_ID = "comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet";
    final static String COMADOBEGRANITEOAUTHSERVERIMPLOAUTH2REVOCATIONENDPOINTSERVLET_SERVICE_ID = "comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet";
    final static String COMADOBEGRANITEOAUTHSERVERIMPLOAUTH2TOKENENDPOINTSERVLET_SERVICE_ID = "comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet";
    final static String COMADOBEGRANITEOAUTHSERVERIMPLOAUTH2TOKENREVOCATIONSERVLET_SERVICE_ID = "comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet";
    final static String COMADOBEGRANITEOFFLOADINGIMPLOFFLOADINGCONFIGURATOR_SERVICE_ID = "comAdobeGraniteOffloadingImplOffloadingConfigurator";
    final static String COMADOBEGRANITEOFFLOADINGIMPLOFFLOADINGJOBCLONER_SERVICE_ID = "comAdobeGraniteOffloadingImplOffloadingJobCloner";
    final static String COMADOBEGRANITEOFFLOADINGIMPLOFFLOADINGJOBOFFLOADER_SERVICE_ID = "comAdobeGraniteOffloadingImplOffloadingJobOffloader";
    final static String COMADOBEGRANITEOFFLOADINGIMPLTRANSPORTEROFFLOADINGAGENTMANAGER_SERVICE_ID = "comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager";
    final static String COMADOBEGRANITEOFFLOADINGIMPLTRANSPORTEROFFLOADINGDEFAULTTRANSPO_SERVICE_ID = "comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo";
    final static String COMADOBEGRANITEOMNISEARCHIMPLCOREOMNISEARCHSERVICEIMPL_SERVICE_ID = "comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl";
    final static String COMADOBEGRANITEOPTOUTIMPLOPTOUTSERVICEIMPL_SERVICE_ID = "comAdobeGraniteOptoutImplOptOutServiceImpl";
    final static String COMADOBEGRANITEQUERIESIMPLHCASYNCINDEXHEALTHCHECK_SERVICE_ID = "comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck";
    final static String COMADOBEGRANITEQUERIESIMPLHCLARGEINDEXHEALTHCHECK_SERVICE_ID = "comAdobeGraniteQueriesImplHcLargeIndexHealthCheck";
    final static String COMADOBEGRANITEQUERIESIMPLHCQUERIESSTATUSHEALTHCHECK_SERVICE_ID = "comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck";
    final static String COMADOBEGRANITEQUERIESIMPLHCQUERYHEALTHCHECKMETRICS_SERVICE_ID = "comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics";
    final static String COMADOBEGRANITEQUERIESIMPLHCQUERYLIMITSHEALTHCHECK_SERVICE_ID = "comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck";
    final static String COMADOBEGRANITEREPLICATIONHCIMPLREPLICATIONQUEUEHEALTHCHECK_SERVICE_ID = "comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck";
    final static String COMADOBEGRANITEREPLICATIONHCIMPLREPLICATIONTRANSPORTUSERSHEALTHC_SERVICE_ID = "comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC";
    final static String COMADOBEGRANITEREPOSITORYHCIMPLAUTHORIZABLENODENAMEHEALTHCHECK_SERVICE_ID = "comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck";
    final static String COMADOBEGRANITEREPOSITORYHCIMPLCONTENTSLINGSLINGCONTENTHEALTHC_SERVICE_ID = "comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC";
    final static String COMADOBEGRANITEREPOSITORYHCIMPLCONTINUOUSRGCHEALTHCHECK_SERVICE_ID = "comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck";
    final static String COMADOBEGRANITEREPOSITORYHCIMPLDEFAULTACCESSUSERPROFILEHEALTHCHE_SERVICE_ID = "comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe";
    final static String COMADOBEGRANITEREPOSITORYHCIMPLDEFAULTLOGINSHEALTHCHECK_SERVICE_ID = "comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck";
    final static String COMADOBEGRANITEREPOSITORYHCIMPLDISKSPACEHEALTHCHECK_SERVICE_ID = "comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck";
    final static String COMADOBEGRANITEREPOSITORYHCIMPLOBSERVATIONQUEUELENGTHHEALTHCHECK_SERVICE_ID = "comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck";
    final static String COMADOBEGRANITEREPOSITORYIMPLCOMMITSTATSCONFIG_SERVICE_ID = "comAdobeGraniteRepositoryImplCommitStatsConfig";
    final static String COMADOBEGRANITEREPOSITORYSERVICEUSERCONFIGURATION_SERVICE_ID = "comAdobeGraniteRepositoryServiceUserConfiguration";
    final static String COMADOBEGRANITEREQUESTSLOGGINGIMPLHCREQUESTSSTATUSHEALTHCHECKIM_SERVICE_ID = "comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm";
    final static String COMADOBEGRANITERESOURCESTATUSIMPLCOMPOSITESTATUSTYPE_SERVICE_ID = "comAdobeGraniteResourcestatusImplCompositeStatusType";
    final static String COMADOBEGRANITERESOURCESTATUSIMPLSTATUSRESOURCEPROVIDERIMPL_SERVICE_ID = "comAdobeGraniteResourcestatusImplStatusResourceProviderImpl";
    final static String COMADOBEGRANITERESTASSETSIMPLASSETCONTENTDISPOSITIONFILTER_SERVICE_ID = "comAdobeGraniteRestAssetsImplAssetContentDispositionFilter";
    final static String COMADOBEGRANITERESTIMPLAPIENDPOINTRESOURCEPROVIDERFACTORYIMPL_SERVICE_ID = "comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl";
    final static String COMADOBEGRANITERESTIMPLSERVLETDEFAULTGETSERVLET_SERVICE_ID = "comAdobeGraniteRestImplServletDefaultGETServlet";
    final static String COMADOBEGRANITESECURITYUSERUIINTERNALSERVLETSSSLCONFIGURATIONS_SERVICE_ID = "comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS";
    final static String COMADOBEGRANITESECURITYUSERUSERPROPERTIESSERVICE_SERVICE_ID = "comAdobeGraniteSecurityUserUserPropertiesService";
    final static String COMADOBEGRANITESOCIALGRAPHIMPLSOCIALGRAPHFACTORYIMPL_SERVICE_ID = "comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl";
    final static String COMADOBEGRANITESYSTEMMONITORINGIMPLSYSTEMSTATSMBEANIMPL_SERVICE_ID = "comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl";
    final static String COMADOBEGRANITETASKMANAGEMENTIMPLJCRTASKADAPTERFACTORY_SERVICE_ID = "comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory";
    final static String COMADOBEGRANITETASKMANAGEMENTIMPLJCRTASKARCHIVESERVICE_SERVICE_ID = "comAdobeGraniteTaskmanagementImplJcrTaskArchiveService";
    final static String COMADOBEGRANITETASKMANAGEMENTIMPLPURGETASKPURGEMAINTENANCETASK_SERVICE_ID = "comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask";
    final static String COMADOBEGRANITETASKMANAGEMENTIMPLSERVICETASKMANAGERADAPTERFACTOR_SERVICE_ID = "comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor";
    final static String COMADOBEGRANITETHREADDUMPTHREADDUMPCOLLECTOR_SERVICE_ID = "comAdobeGraniteThreaddumpThreadDumpCollector";
    final static String COMADOBEGRANITETRANSLATIONCONNECTORMSFTCOREIMPLMICROSOFTTRANSL_SERVICE_ID = "comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl";
    final static String COMADOBEGRANITETRANSLATIONCOREIMPLTRANSLATIONMANAGERIMPL_SERVICE_ID = "comAdobeGraniteTranslationCoreImplTranslationManagerImpl";
    final static String COMADOBEGRANITEUICLIENTLIBSIMPLHTMLLIBRARYMANAGERIMPL_SERVICE_ID = "comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl";
    final static String COMADOBEGRANITEWORKFLOWCONSOLEFRAGSWORKFLOWWITHDRAWFEATURE_SERVICE_ID = "comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature";
    final static String COMADOBEGRANITEWORKFLOWCONSOLEPUBLISHWORKFLOWPUBLISHEVENTSERVICE_SERVICE_ID = "comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService";
    final static String COMADOBEGRANITEWORKFLOWCOREJCRWORKFLOWBUCKETMANAGER_SERVICE_ID = "comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager";
    final static String COMADOBEGRANITEWORKFLOWCOREJOBEXTERNALPROCESSJOBHANDLER_SERVICE_ID = "comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler";
    final static String COMADOBEGRANITEWORKFLOWCOREJOBJOBHANDLER_SERVICE_ID = "comAdobeGraniteWorkflowCoreJobJobHandler";
    final static String COMADOBEGRANITEWORKFLOWCOREOFFLOADINGWORKFLOWOFFLOADINGJOBCONSUM_SERVICE_ID = "comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum";
    final static String COMADOBEGRANITEWORKFLOWCOREPAYLOADMAPCACHE_SERVICE_ID = "comAdobeGraniteWorkflowCorePayloadMapCache";
    final static String COMADOBEGRANITEWORKFLOWCOREPAYLOADMAPPAYLOADMOVELISTENER_SERVICE_ID = "comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener";
    final static String COMADOBEGRANITEWORKFLOWCOREWORKFLOWCONFIG_SERVICE_ID = "comAdobeGraniteWorkflowCoreWorkflowConfig";
    final static String COMADOBEGRANITEWORKFLOWCOREWORKFLOWSESSIONFACTORY_SERVICE_ID = "comAdobeGraniteWorkflowCoreWorkflowSessionFactory";
    final static String COMADOBEGRANITEWORKFLOWPURGESCHEDULER_SERVICE_ID = "comAdobeGraniteWorkflowPurgeScheduler";
    final static String COMADOBEOCTOPUSNCOMMBOOTSTRAP_SERVICE_ID = "comAdobeOctopusNcommBootstrap";
    final static String COMADOBESOCIALINTEGRATIONSLIVEFYREUSERPINGFORPULLIMPLPINGPULLS_SERVICE_ID = "comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS";
    final static String COMADOBEXMPWORKERFILESNCOMMXMPFILESNCOMM_SERVICE_ID = "comAdobeXmpWorkerFilesNcommXMPFilesNComm";
    final static String COMDAYCOMMONSDATASOURCEJDBCPOOLJDBCPOOLSERVICE_SERVICE_ID = "comDayCommonsDatasourceJdbcpoolJdbcPoolService";
    final static String COMDAYCOMMONSHTTPCLIENT_SERVICE_ID = "comDayCommonsHttpclient";
    final static String COMDAYCQANALYTICSIMPLSTOREPROPERTIESCHANGELISTENER_SERVICE_ID = "comDayCqAnalyticsImplStorePropertiesChangeListener";
    final static String COMDAYCQANALYTICSSITECATALYSTIMPLEXPORTERCLASSIFICATIONSEXPORTE_SERVICE_ID = "comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte";
    final static String COMDAYCQANALYTICSSITECATALYSTIMPLIMPORTERREPORTIMPORTER_SERVICE_ID = "comDayCqAnalyticsSitecatalystImplImporterReportImporter";
    final static String COMDAYCQANALYTICSSITECATALYSTIMPLSITECATALYSTADAPTERFACTORY_SERVICE_ID = "comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory";
    final static String COMDAYCQANALYTICSSITECATALYSTIMPLSITECATALYSTHTTPCLIENTIMPL_SERVICE_ID = "comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl";
    final static String COMDAYCQANALYTICSTESTANDTARGETIMPLACCOUNTOPTIONSUPDATER_SERVICE_ID = "comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater";
    final static String COMDAYCQANALYTICSTESTANDTARGETIMPLDELETEAUTHORACTIVITYLISTENER_SERVICE_ID = "comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener";
    final static String COMDAYCQANALYTICSTESTANDTARGETIMPLPUSHAUTHORCAMPAIGNPAGELISTENER_SERVICE_ID = "comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener";
    final static String COMDAYCQANALYTICSTESTANDTARGETIMPLSEGMENTIMPORTER_SERVICE_ID = "comDayCqAnalyticsTestandtargetImplSegmentImporter";
    final static String COMDAYCQANALYTICSTESTANDTARGETIMPLSERVICEWEBSERVICEIMPL_SERVICE_ID = "comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl";
    final static String COMDAYCQANALYTICSTESTANDTARGETIMPLSERVLETSADMINSERVERSERVLET_SERVICE_ID = "comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet";
    final static String COMDAYCQANALYTICSTESTANDTARGETIMPLTESTANDTARGETHTTPCLIENTIMPL_SERVICE_ID = "comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl";
    final static String COMDAYCQAUTHIMPLCUGCUGSUPPORTIMPL_SERVICE_ID = "comDayCqAuthImplCugCugSupportImpl";
    final static String COMDAYCQAUTHIMPLLOGINSELECTORHANDLER_SERVICE_ID = "comDayCqAuthImplLoginSelectorHandler";
    final static String COMDAYCQCOMMONSIMPLEXTERNALIZERIMPL_SERVICE_ID = "comDayCqCommonsImplExternalizerImpl";
    final static String COMDAYCQCOMMONSSERVLETSROOTMAPPINGSERVLET_SERVICE_ID = "comDayCqCommonsServletsRootMappingServlet";
    final static String COMDAYCQCOMPATCODEUPGRADEIMPLCODEUPGRADEEXECUTIONCONDITIONCHECKE_SERVICE_ID = "comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke";
    final static String COMDAYCQCOMPATCODEUPGRADEIMPLUPGRADETASKIGNORELIST_SERVICE_ID = "comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList";
    final static String COMDAYCQCOMPATCODEUPGRADEIMPLVERSIONRANGETASKIGNORELIST_SERVICE_ID = "comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist";
    final static String COMDAYCQCONTENTSYNCIMPLCONTENTSYNCMANAGERIMPL_SERVICE_ID = "comDayCqContentsyncImplContentSyncManagerImpl";
    final static String COMDAYCQDAMCOMMONSHANDLERSTANDARDIMAGEHANDLER_SERVICE_ID = "comDayCqDamCommonsHandlerStandardImageHandler";
    final static String COMDAYCQDAMCOMMONSMETADATAXMPFILTERBLACKWHITE_SERVICE_ID = "comDayCqDamCommonsMetadataXmpFilterBlackWhite";
    final static String COMDAYCQDAMCOMMONSUTILIMPLASSETCACHEIMPL_SERVICE_ID = "comDayCqDamCommonsUtilImplAssetCacheImpl";
    final static String COMDAYCQDAMCOREIMPLANNOTATIONPDFANNOTATIONPDFCONFIG_SERVICE_ID = "comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig";
    final static String COMDAYCQDAMCOREIMPLASSETMOVELISTENER_SERVICE_ID = "comDayCqDamCoreImplAssetMoveListener";
    final static String COMDAYCQDAMCOREIMPLASSETHOMEASSETHOMEPAGECONFIGURATION_SERVICE_ID = "comDayCqDamCoreImplAssethomeAssetHomePageConfiguration";
    final static String COMDAYCQDAMCOREIMPLASSETLINKSHAREADHOCASSETSHAREPROXYSERVLET_SERVICE_ID = "comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet";
    final static String COMDAYCQDAMCOREIMPLCACHECQBUFFEREDIMAGECACHE_SERVICE_ID = "comDayCqDamCoreImplCacheCQBufferedImageCache";
    final static String COMDAYCQDAMCOREIMPLDAMCHANGEEVENTLISTENER_SERVICE_ID = "comDayCqDamCoreImplDamChangeEventListener";
    final static String COMDAYCQDAMCOREIMPLDAMEVENTPURGESERVICE_SERVICE_ID = "comDayCqDamCoreImplDamEventPurgeService";
    final static String COMDAYCQDAMCOREIMPLDAMEVENTRECORDERIMPL_SERVICE_ID = "comDayCqDamCoreImplDamEventRecorderImpl";
    final static String COMDAYCQDAMCOREIMPLEVENTDAMEVENTAUDITLISTENER_SERVICE_ID = "comDayCqDamCoreImplEventDamEventAuditListener";
    final static String COMDAYCQDAMCOREIMPLEXPIRYNOTIFICATIONJOBIMPL_SERVICE_ID = "comDayCqDamCoreImplExpiryNotificationJobImpl";
    final static String COMDAYCQDAMCOREIMPLFOLDERMETADATASCHEMAFOLDERMETADATASCHEMAFEAT_SERVICE_ID = "comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat";
    final static String COMDAYCQDAMCOREIMPLGFXCOMMONSGFXRENDERER_SERVICE_ID = "comDayCqDamCoreImplGfxCommonsGfxRenderer";
    final static String COMDAYCQDAMCOREIMPLHANDLEREPSFORMATHANDLER_SERVICE_ID = "comDayCqDamCoreImplHandlerEPSFormatHandler";
    final static String COMDAYCQDAMCOREIMPLHANDLERINDESIGNFORMATHANDLER_SERVICE_ID = "comDayCqDamCoreImplHandlerIndesignFormatHandler";
    final static String COMDAYCQDAMCOREIMPLHANDLERJPEGHANDLER_SERVICE_ID = "comDayCqDamCoreImplHandlerJpegHandler";
    final static String COMDAYCQDAMCOREIMPLHANDLERXMPNCOMMXMPHANDLER_SERVICE_ID = "comDayCqDamCoreImplHandlerXmpNCommXMPHandler";
    final static String COMDAYCQDAMCOREIMPLJMXASSETINDEXUPDATEMONITOR_SERVICE_ID = "comDayCqDamCoreImplJmxAssetIndexUpdateMonitor";
    final static String COMDAYCQDAMCOREIMPLJMXASSETMIGRATIONMBEANIMPL_SERVICE_ID = "comDayCqDamCoreImplJmxAssetMigrationMBeanImpl";
    final static String COMDAYCQDAMCOREIMPLJMXASSETUPDATEMONITORIMPL_SERVICE_ID = "comDayCqDamCoreImplJmxAssetUpdateMonitorImpl";
    final static String COMDAYCQDAMCOREIMPLJOBSMETADATAEXPORTASYNCMETADATAEXPORTCONFIG_SERVICE_ID = "comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig";
    final static String COMDAYCQDAMCOREIMPLJOBSMETADATAIMPORTASYNCMETADATAIMPORTCONFIG_SERVICE_ID = "comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig";
    final static String COMDAYCQDAMCOREIMPLLIGHTBOXLIGHTBOXSERVLET_SERVICE_ID = "comDayCqDamCoreImplLightboxLightboxServlet";
    final static String COMDAYCQDAMCOREIMPLMETADATAEDITORSELECTCOMPONENTHANDLER_SERVICE_ID = "comDayCqDamCoreImplMetadataEditorSelectComponentHandler";
    final static String COMDAYCQDAMCOREIMPLMIMETYPEASSETUPLOADRESTRICTIONHELPER_SERVICE_ID = "comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper";
    final static String COMDAYCQDAMCOREIMPLMIMETYPEDAMMIMETYPESERVICEIMPL_SERVICE_ID = "comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl";
    final static String COMDAYCQDAMCOREIMPLMISSINGMETADATANOTIFICATIONJOB_SERVICE_ID = "comDayCqDamCoreImplMissingMetadataNotificationJob";
    final static String COMDAYCQDAMCOREIMPLPROCESSSENDTRANSIENTWORKFLOWCOMPLETEDEMAILPR_SERVICE_ID = "comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr";
    final static String COMDAYCQDAMCOREIMPLPROCESSTEXTEXTRACTIONPROCESS_SERVICE_ID = "comDayCqDamCoreImplProcessTextExtractionProcess";
    final static String COMDAYCQDAMCOREIMPLRENDITIONMAKERIMPL_SERVICE_ID = "comDayCqDamCoreImplRenditionMakerImpl";
    final static String COMDAYCQDAMCOREIMPLREPORTSREPORTEXPORTSERVICE_SERVICE_ID = "comDayCqDamCoreImplReportsReportExportService";
    final static String COMDAYCQDAMCOREIMPLREPORTSREPORTPURGESERVICE_SERVICE_ID = "comDayCqDamCoreImplReportsReportPurgeService";
    final static String COMDAYCQDAMCOREIMPLSERVLETASSETDOWNLOADSERVLET_SERVICE_ID = "comDayCqDamCoreImplServletAssetDownloadServlet";
    final static String COMDAYCQDAMCOREIMPLSERVLETASSETSTATUSSERVLET_SERVICE_ID = "comDayCqDamCoreImplServletAssetStatusServlet";
    final static String COMDAYCQDAMCOREIMPLSERVLETASSETXMPSEARCHSERVLET_SERVICE_ID = "comDayCqDamCoreImplServletAssetXMPSearchServlet";
    final static String COMDAYCQDAMCOREIMPLSERVLETBATCHMETADATASERVLET_SERVICE_ID = "comDayCqDamCoreImplServletBatchMetadataServlet";
    final static String COMDAYCQDAMCOREIMPLSERVLETBINARYPROVIDERSERVLET_SERVICE_ID = "comDayCqDamCoreImplServletBinaryProviderServlet";
    final static String COMDAYCQDAMCOREIMPLSERVLETCOLLECTIONSERVLET_SERVICE_ID = "comDayCqDamCoreImplServletCollectionServlet";
    final static String COMDAYCQDAMCOREIMPLSERVLETCOLLECTIONSSERVLET_SERVICE_ID = "comDayCqDamCoreImplServletCollectionsServlet";
    final static String COMDAYCQDAMCOREIMPLSERVLETCOMPANIONSERVLET_SERVICE_ID = "comDayCqDamCoreImplServletCompanionServlet";
    final static String COMDAYCQDAMCOREIMPLSERVLETCREATEASSETSERVLET_SERVICE_ID = "comDayCqDamCoreImplServletCreateAssetServlet";
    final static String COMDAYCQDAMCOREIMPLSERVLETDAMCONTENTDISPOSITIONFILTER_SERVICE_ID = "comDayCqDamCoreImplServletDamContentDispositionFilter";
    final static String COMDAYCQDAMCOREIMPLSERVLETGUIDLOOKUPFILTER_SERVICE_ID = "comDayCqDamCoreImplServletGuidLookupFilter";
    final static String COMDAYCQDAMCOREIMPLSERVLETHEALTHCHECKSERVLET_SERVICE_ID = "comDayCqDamCoreImplServletHealthCheckServlet";
    final static String COMDAYCQDAMCOREIMPLSERVLETMETADATAGETSERVLET_SERVICE_ID = "comDayCqDamCoreImplServletMetadataGetServlet";
    final static String COMDAYCQDAMCOREIMPLSERVLETMULTIPLELICENSEACCEPTSERVLET_SERVICE_ID = "comDayCqDamCoreImplServletMultipleLicenseAcceptServlet";
    final static String COMDAYCQDAMCOREIMPLSERVLETRESOURCECOLLECTIONSERVLET_SERVICE_ID = "comDayCqDamCoreImplServletResourceCollectionServlet";
    final static String COMDAYCQDAMCOREIMPLUIPREVIEWFOLDERPREVIEWUPDATERIMPL_SERVICE_ID = "comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl";
    final static String COMDAYCQDAMCOREIMPLUNZIPUNZIPCONFIG_SERVICE_ID = "comDayCqDamCoreImplUnzipUnzipConfig";
    final static String COMDAYCQDAMCOREPROCESSEXIFTOOLEXTRACTMETADATAPROCESS_SERVICE_ID = "comDayCqDamCoreProcessExifToolExtractMetadataProcess";
    final static String COMDAYCQDAMCOREPROCESSEXTRACTMETADATAPROCESS_SERVICE_ID = "comDayCqDamCoreProcessExtractMetadataProcess";
    final static String COMDAYCQDAMCOREPROCESSMETADATAPROCESSORPROCESS_SERVICE_ID = "comDayCqDamCoreProcessMetadataProcessorProcess";
    final static String COMDAYCQDAMHANDLERFFMPEGLOCATORIMPL_SERVICE_ID = "comDayCqDamHandlerFfmpegLocatorImpl";
    final static String COMDAYCQDAMHANDLERGIBSONFONTMANAGERIMPLFONTMANAGERSERVICEIMPL_SERVICE_ID = "comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl";
    final static String COMDAYCQDAMHANDLERSTANDARDPDFPDFHANDLER_SERVICE_ID = "comDayCqDamHandlerStandardPdfPdfHandler";
    final static String COMDAYCQDAMHANDLERSTANDARDPSPOSTSCRIPTHANDLER_SERVICE_ID = "comDayCqDamHandlerStandardPsPostScriptHandler";
    final static String COMDAYCQDAMHANDLERSTANDARDPSDPSDHANDLER_SERVICE_ID = "comDayCqDamHandlerStandardPsdPsdHandler";
    final static String COMDAYCQDAMIDSIMPLIDSJOBPROCESSOR_SERVICE_ID = "comDayCqDamIdsImplIDSJobProcessor";
    final static String COMDAYCQDAMIDSIMPLIDSPOOLMANAGERIMPL_SERVICE_ID = "comDayCqDamIdsImplIDSPoolManagerImpl";
    final static String COMDAYCQDAMINDDIMPLHANDLERINDESIGNXMPHANDLER_SERVICE_ID = "comDayCqDamInddImplHandlerIndesignXMPHandler";
    final static String COMDAYCQDAMINDDIMPLSERVLETSNIPPETCREATIONSERVLET_SERVICE_ID = "comDayCqDamInddImplServletSnippetCreationServlet";
    final static String COMDAYCQDAMINDDPROCESSINDDMEDIAEXTRACTPROCESS_SERVICE_ID = "comDayCqDamInddProcessINDDMediaExtractProcess";
    final static String COMDAYCQDAMPERFORMANCEINTERNALASSETPERFORMANCEDATAHANDLERIMPL_SERVICE_ID = "comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl";
    final static String COMDAYCQDAMPERFORMANCEINTERNALASSETPERFORMANCEREPORTSYNCJOB_SERVICE_ID = "comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob";
    final static String COMDAYCQDAMPIMIMPLSOURCINGUPLOADPROCESSPRODUCTASSETSUPLOADPRO_SERVICE_ID = "comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro";
    final static String COMDAYCQDAMS7DAMCOMMONANALYTICSIMPLS7DAMDYNAMICMEDIACONFIGEVEN_SERVICE_ID = "comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven";
    final static String COMDAYCQDAMS7DAMCOMMONANALYTICSIMPLSITECATALYSTREPORTRUNNER_SERVICE_ID = "comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner";
    final static String COMDAYCQDAMS7DAMCOMMONPOSTSERVLETSSETCREATEHANDLER_SERVICE_ID = "comDayCqDamS7damCommonPostServletsSetCreateHandler";
    final static String COMDAYCQDAMS7DAMCOMMONPOSTSERVLETSSETMODIFYHANDLER_SERVICE_ID = "comDayCqDamS7damCommonPostServletsSetModifyHandler";
    final static String COMDAYCQDAMS7DAMCOMMONPROCESSVIDEOTHUMBNAILDOWNLOADPROCESS_SERVICE_ID = "comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess";
    final static String COMDAYCQDAMS7DAMCOMMONS7DAMDAMCHANGEEVENTLISTENER_SERVICE_ID = "comDayCqDamS7damCommonS7damDamChangeEventListener";
    final static String COMDAYCQDAMS7DAMCOMMONSERVLETSS7DAMPRODUCTINFOSERVLET_SERVICE_ID = "comDayCqDamS7damCommonServletsS7damProductInfoServlet";
    final static String COMDAYCQDAMS7DAMCOMMONVIDEOIMPLVIDEOPROXYCLIENTSERVICEIMPL_SERVICE_ID = "comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl";
    final static String COMDAYCQDAMSCENE7IMPLSCENE7APICLIENTIMPL_SERVICE_ID = "comDayCqDamScene7ImplScene7APIClientImpl";
    final static String COMDAYCQDAMSCENE7IMPLSCENE7ASSETMIMETYPESERVICEIMPL_SERVICE_ID = "comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl";
    final static String COMDAYCQDAMSCENE7IMPLSCENE7CONFIGURATIONEVENTLISTENER_SERVICE_ID = "comDayCqDamScene7ImplScene7ConfigurationEventListener";
    final static String COMDAYCQDAMSCENE7IMPLSCENE7DAMCHANGEEVENTLISTENER_SERVICE_ID = "comDayCqDamScene7ImplScene7DamChangeEventListener";
    final static String COMDAYCQDAMSCENE7IMPLSCENE7FLASHTEMPLATESSERVICEIMPL_SERVICE_ID = "comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl";
    final static String COMDAYCQDAMSCENE7IMPLSCENE7UPLOADSERVICEIMPL_SERVICE_ID = "comDayCqDamScene7ImplScene7UploadServiceImpl";
    final static String COMDAYCQDAMSTOCKINTEGRATIONIMPLCACHESTOCKCACHECONFIGURATIONSER_SERVICE_ID = "comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer";
    final static String COMDAYCQDAMSTOCKINTEGRATIONIMPLCONFIGURATIONSTOCKCONFIGURATION_SERVICE_ID = "comDayCqDamStockIntegrationImplConfigurationStockConfiguration";
    final static String COMDAYCQDAMVIDEOIMPLSERVLETVIDEOTESTSERVLET_SERVICE_ID = "comDayCqDamVideoImplServletVideoTestServlet";
    final static String COMDAYCQEXTWIDGETSERVLETSIMAGESPRITESERVLET_SERVICE_ID = "comDayCqExtwidgetServletsImageSpriteServlet";
    final static String COMDAYCQIMAGEINTERNALFONTFONTHELPER_SERVICE_ID = "comDayCqImageInternalFontFontHelper";
    final static String COMDAYCQJCRCLUSTERSUPPORTCLUSTERSTARTLEVELCONTROLLER_SERVICE_ID = "comDayCqJcrclustersupportClusterStartLevelController";
    final static String COMDAYCQMAILERDEFAULTMAILSERVICE_SERVICE_ID = "comDayCqMailerDefaultMailService";
    final static String COMDAYCQMAILERIMPLCQMAILINGSERVICE_SERVICE_ID = "comDayCqMailerImplCqMailingService";
    final static String COMDAYCQMAILERIMPLEMAILCQEMAILTEMPLATEFACTORY_SERVICE_ID = "comDayCqMailerImplEmailCqEmailTemplateFactory";
    final static String COMDAYCQMAILERIMPLEMAILCQRETRIEVERTEMPLATEFACTORY_SERVICE_ID = "comDayCqMailerImplEmailCqRetrieverTemplateFactory";
    final static String COMDAYCQMCMCAMPAIGNIMPLINTEGRATIONCONFIGIMPL_SERVICE_ID = "comDayCqMcmCampaignImplIntegrationConfigImpl";
    final static String COMDAYCQMCMCAMPAIGNIMPORTERPERSONALIZEDTEXTHANDLERFACTORY_SERVICE_ID = "comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory";
    final static String COMDAYCQMCMCORENEWSLETTERNEWSLETTEREMAILSERVICEIMPL_SERVICE_ID = "comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl";
    final static String COMDAYCQMCMIMPLMCMCONFIGURATION_SERVICE_ID = "comDayCqMcmImplMCMConfiguration";
    final static String COMDAYCQMCMLANDINGPAGEPARSERTAGHANDLERSCTACLICKTHROUGHCOMPONEN_SERVICE_ID = "comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen";
    final static String COMDAYCQMCMLANDINGPAGEPARSERTAGHANDLERSCTAGRAPHICALCLICKTHROUG_SERVICE_ID = "comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug";
    final static String COMDAYCQMCMLANDINGPAGEPARSERTAGHANDLERSCTALEADFORMCTACOMPONENT_SERVICE_ID = "comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent";
    final static String COMDAYCQMCMLANDINGPAGEPARSERTAGHANDLERSMBOXMBOXEXPERIENCETAGHA_SERVICE_ID = "comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa";
    final static String COMDAYCQMCMLANDINGPAGEPARSERTAGHANDLERSMBOXTARGETCOMPONENTTAGH_SERVICE_ID = "comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH";
    final static String COMDAYCQNOTIFICATIONIMPLNOTIFICATIONSERVICEIMPL_SERVICE_ID = "comDayCqNotificationImplNotificationServiceImpl";
    final static String COMDAYCQPERSONALIZATIONIMPLSERVLETSTARGETINGCONFIGURATIONSERVLET_SERVICE_ID = "comDayCqPersonalizationImplServletsTargetingConfigurationServlet";
    final static String COMDAYCQPOLLINGIMPORTERIMPLMANAGEDPOLLCONFIGIMPL_SERVICE_ID = "comDayCqPollingImporterImplManagedPollConfigImpl";
    final static String COMDAYCQPOLLINGIMPORTERIMPLMANAGEDPOLLINGIMPORTERIMPL_SERVICE_ID = "comDayCqPollingImporterImplManagedPollingImporterImpl";
    final static String COMDAYCQPOLLINGIMPORTERIMPLPOLLINGIMPORTERIMPL_SERVICE_ID = "comDayCqPollingImporterImplPollingImporterImpl";
    final static String COMDAYCQREPLICATIONAUDITREPLICATIONEVENTLISTENER_SERVICE_ID = "comDayCqReplicationAuditReplicationEventListener";
    final static String COMDAYCQREPLICATIONCONTENTSTATICCONTENTBUILDER_SERVICE_ID = "comDayCqReplicationContentStaticContentBuilder";
    final static String COMDAYCQREPLICATIONIMPLAGENTMANAGERIMPL_SERVICE_ID = "comDayCqReplicationImplAgentManagerImpl";
    final static String COMDAYCQREPLICATIONIMPLCONTENTDURBOBINARYLESSCONTENTBUILDER_SERVICE_ID = "comDayCqReplicationImplContentDurboBinaryLessContentBuilder";
    final static String COMDAYCQREPLICATIONIMPLCONTENTDURBODURBOIMPORTCONFIGURATIONPROV_SERVICE_ID = "comDayCqReplicationImplContentDurboDurboImportConfigurationProv";
    final static String COMDAYCQREPLICATIONIMPLREPLICATIONCONTENTFACTORYPROVIDERIMPL_SERVICE_ID = "comDayCqReplicationImplReplicationContentFactoryProviderImpl";
    final static String COMDAYCQREPLICATIONIMPLREPLICATIONRECEIVERIMPL_SERVICE_ID = "comDayCqReplicationImplReplicationReceiverImpl";
    final static String COMDAYCQREPLICATIONIMPLREPLICATORIMPL_SERVICE_ID = "comDayCqReplicationImplReplicatorImpl";
    final static String COMDAYCQREPLICATIONIMPLREVERSEREPLICATOR_SERVICE_ID = "comDayCqReplicationImplReverseReplicator";
    final static String COMDAYCQREPLICATIONIMPLTRANSPORTBINARYLESSTRANSPORTHANDLER_SERVICE_ID = "comDayCqReplicationImplTransportBinaryLessTransportHandler";
    final static String COMDAYCQREPLICATIONIMPLTRANSPORTHTTP_SERVICE_ID = "comDayCqReplicationImplTransportHttp";
    final static String COMDAYCQREPORTINGIMPLCACHECACHEIMPL_SERVICE_ID = "comDayCqReportingImplCacheCacheImpl";
    final static String COMDAYCQREPORTINGIMPLCONFIGSERVICEIMPL_SERVICE_ID = "comDayCqReportingImplConfigServiceImpl";
    final static String COMDAYCQREPORTINGIMPLRLOGANALYZER_SERVICE_ID = "comDayCqReportingImplRLogAnalyzer";
    final static String COMDAYCQREWRITERLINKCHECKERIMPLLINKCHECKERIMPL_SERVICE_ID = "comDayCqRewriterLinkcheckerImplLinkCheckerImpl";
    final static String COMDAYCQREWRITERLINKCHECKERIMPLLINKCHECKERTASK_SERVICE_ID = "comDayCqRewriterLinkcheckerImplLinkCheckerTask";
    final static String COMDAYCQREWRITERLINKCHECKERIMPLLINKCHECKERTRANSFORMERFACTORY_SERVICE_ID = "comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory";
    final static String COMDAYCQREWRITERLINKCHECKERIMPLLINKINFOSTORAGEIMPL_SERVICE_ID = "comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl";
    final static String COMDAYCQREWRITERPROCESSORIMPLHTMLPARSERFACTORY_SERVICE_ID = "comDayCqRewriterProcessorImplHtmlParserFactory";
    final static String COMDAYCQSEARCHIMPLBUILDERQUERYBUILDERIMPL_SERVICE_ID = "comDayCqSearchImplBuilderQueryBuilderImpl";
    final static String COMDAYCQSEARCHSUGGESTIMPLSUGGESTIONINDEXMANAGERIMPL_SERVICE_ID = "comDayCqSearchSuggestImplSuggestionIndexManagerImpl";
    final static String COMDAYCQSEARCHPROMOTEIMPLPUBLISHSEARCHPROMOTECONFIGHANDLER_SERVICE_ID = "comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler";
    final static String COMDAYCQSEARCHPROMOTEIMPLSEARCHPROMOTESERVICEIMPL_SERVICE_ID = "comDayCqSearchpromoteImplSearchPromoteServiceImpl";
    final static String COMDAYCQSECURITYACLSETUP_SERVICE_ID = "comDayCqSecurityACLSetup";
    final static String COMDAYCQSTATISTICSIMPLSTATISTICSSERVICEIMPL_SERVICE_ID = "comDayCqStatisticsImplStatisticsServiceImpl";
    final static String COMDAYCQTAGGINGIMPLJCRTAGMANAGERFACTORYIMPL_SERVICE_ID = "comDayCqTaggingImplJcrTagManagerFactoryImpl";
    final static String COMDAYCQTAGGINGIMPLSEARCHTAGPREDICATEEVALUATOR_SERVICE_ID = "comDayCqTaggingImplSearchTagPredicateEvaluator";
    final static String COMDAYCQTAGGINGIMPLTAGGARBAGECOLLECTOR_SERVICE_ID = "comDayCqTaggingImplTagGarbageCollector";
    final static String COMDAYCQWCMCONTENTSYNCIMPLHANDLERPAGESUPDATEHANDLER_SERVICE_ID = "comDayCqWcmContentsyncImplHandlerPagesUpdateHandler";
    final static String COMDAYCQWCMCONTENTSYNCIMPLREWRITERPATHREWRITERTRANSFORMERFACTOR_SERVICE_ID = "comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor";
    final static String COMDAYCQWCMCOREIMPLAUTHORINGUIMODESERVICEIMPL_SERVICE_ID = "comDayCqWcmCoreImplAuthoringUIModeServiceImpl";
    final static String COMDAYCQWCMCOREIMPLCOMMANDSWCMCOMMANDSERVLET_SERVICE_ID = "comDayCqWcmCoreImplCommandsWCMCommandServlet";
    final static String COMDAYCQWCMCOREIMPLDEVICEDETECTIONDEVICEIDENTIFICATIONMODEIMPL_SERVICE_ID = "comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl";
    final static String COMDAYCQWCMCOREIMPLEVENTPAGEEVENTAUDITLISTENER_SERVICE_ID = "comDayCqWcmCoreImplEventPageEventAuditListener";
    final static String COMDAYCQWCMCOREIMPLEVENTPAGEPOSTPROCESSOR_SERVICE_ID = "comDayCqWcmCoreImplEventPagePostProcessor";
    final static String COMDAYCQWCMCOREIMPLEVENTREPOSITORYCHANGEEVENTLISTENER_SERVICE_ID = "comDayCqWcmCoreImplEventRepositoryChangeEventListener";
    final static String COMDAYCQWCMCOREIMPLEVENTTEMPLATEPOSTPROCESSOR_SERVICE_ID = "comDayCqWcmCoreImplEventTemplatePostProcessor";
    final static String COMDAYCQWCMCOREIMPLLANGUAGEMANAGERIMPL_SERVICE_ID = "comDayCqWcmCoreImplLanguageManagerImpl";
    final static String COMDAYCQWCMCOREIMPLLINKCHECKERCONFIGURATIONFACTORYIMPL_SERVICE_ID = "comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl";
    final static String COMDAYCQWCMCOREIMPLPAGEPAGEINFOAGGREGATORIMPL_SERVICE_ID = "comDayCqWcmCoreImplPagePageInfoAggregatorImpl";
    final static String COMDAYCQWCMCOREIMPLPAGEPAGEMANAGERFACTORYIMPL_SERVICE_ID = "comDayCqWcmCoreImplPagePageManagerFactoryImpl";
    final static String COMDAYCQWCMCOREIMPLREFERENCESCONTENTCONTENTREFERENCECONFIG_SERVICE_ID = "comDayCqWcmCoreImplReferencesContentContentReferenceConfig";
    final static String COMDAYCQWCMCOREIMPLSERVLETSCONTENTFINDERASSETVIEWHANDLER_SERVICE_ID = "comDayCqWcmCoreImplServletsContentfinderAssetViewHandler";
    final static String COMDAYCQWCMCOREIMPLSERVLETSCONTENTFINDERCONNECTORCONNECTORVIE_SERVICE_ID = "comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie";
    final static String COMDAYCQWCMCOREIMPLSERVLETSCONTENTFINDERPAGEVIEWHANDLER_SERVICE_ID = "comDayCqWcmCoreImplServletsContentfinderPageViewHandler";
    final static String COMDAYCQWCMCOREIMPLSERVLETSFINDREPLACESERVLET_SERVICE_ID = "comDayCqWcmCoreImplServletsFindReplaceServlet";
    final static String COMDAYCQWCMCOREIMPLSERVLETSREFERENCESEARCHSERVLET_SERVICE_ID = "comDayCqWcmCoreImplServletsReferenceSearchServlet";
    final static String COMDAYCQWCMCOREIMPLSERVLETSTHUMBNAILSERVLET_SERVICE_ID = "comDayCqWcmCoreImplServletsThumbnailServlet";
    final static String COMDAYCQWCMCOREIMPLUTILSDEFAULTPAGENAMEVALIDATOR_SERVICE_ID = "comDayCqWcmCoreImplUtilsDefaultPageNameValidator";
    final static String COMDAYCQWCMCOREIMPLVARIANTSPAGEVARIANTSPROVIDERIMPL_SERVICE_ID = "comDayCqWcmCoreImplVariantsPageVariantsProviderImpl";
    final static String COMDAYCQWCMCOREIMPLVERSIONMANAGERIMPL_SERVICE_ID = "comDayCqWcmCoreImplVersionManagerImpl";
    final static String COMDAYCQWCMCOREIMPLVERSIONPURGETASK_SERVICE_ID = "comDayCqWcmCoreImplVersionPurgeTask";
    final static String COMDAYCQWCMCOREIMPLWCMDEBUGFILTER_SERVICE_ID = "comDayCqWcmCoreImplWCMDebugFilter";
    final static String COMDAYCQWCMCOREIMPLWCMDEVELOPERMODEFILTER_SERVICE_ID = "comDayCqWcmCoreImplWCMDeveloperModeFilter";
    final static String COMDAYCQWCMCOREIMPLWARPTIMEWARPFILTER_SERVICE_ID = "comDayCqWcmCoreImplWarpTimeWarpFilter";
    final static String COMDAYCQWCMCOREMVTMVTSTATISTICSIMPL_SERVICE_ID = "comDayCqWcmCoreMvtMVTStatisticsImpl";
    final static String COMDAYCQWCMCORESTATSPAGEVIEWSTATISTICSIMPL_SERVICE_ID = "comDayCqWcmCoreStatsPageViewStatisticsImpl";
    final static String COMDAYCQWCMCOREWCMREQUESTFILTER_SERVICE_ID = "comDayCqWcmCoreWCMRequestFilter";
    final static String COMDAYCQWCMDESIGNIMPORTERDESIGNPACKAGEIMPORTER_SERVICE_ID = "comDayCqWcmDesignimporterDesignPackageImporter";
    final static String COMDAYCQWCMDESIGNIMPORTERIMPLCANVASBUILDERIMPL_SERVICE_ID = "comDayCqWcmDesignimporterImplCanvasBuilderImpl";
    final static String COMDAYCQWCMDESIGNIMPORTERIMPLCANVASPAGEDELETEHANDLER_SERVICE_ID = "comDayCqWcmDesignimporterImplCanvasPageDeleteHandler";
    final static String COMDAYCQWCMDESIGNIMPORTERIMPLENTRYPREPROCESSORIMPL_SERVICE_ID = "comDayCqWcmDesignimporterImplEntryPreprocessorImpl";
    final static String COMDAYCQWCMDESIGNIMPORTERIMPLMOBILECANVASBUILDERIMPL_SERVICE_ID = "comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl";
    final static String COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYCANVASCOMPONE_SERVICE_ID = "comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone";
    final static String COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYDEFAULTCOMPON_SERVICE_ID = "comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon";
    final static String COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYDEFAULTTAGHAN_SERVICE_ID = "comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan";
    final static String COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYHEADTAGHANDLE_SERVICE_ID = "comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle";
    final static String COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYIFRAMETAGHAND_SERVICE_ID = "comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand";
    final static String COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYIMAGECOMPONEN_SERVICE_ID = "comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen";
    final static String COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYIMGTAGHANDLER_SERVICE_ID = "comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler";
    final static String COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYINLINESCRIPTT_SERVICE_ID = "comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT";
    final static String COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYLINKTAGHANDLE_SERVICE_ID = "comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle";
    final static String COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYMETATAGHANDLE_SERVICE_ID = "comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle";
    final static String COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYNONSCRIPTTAGH_SERVICE_ID = "comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH";
    final static String COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYPARSYSCOMPONE_SERVICE_ID = "comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone";
    final static String COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYSCRIPTTAGHAND_SERVICE_ID = "comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand";
    final static String COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYSTYLETAGHANDL_SERVICE_ID = "comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl";
    final static String COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYTEXTCOMPONENT_SERVICE_ID = "comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent";
    final static String COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYTITLECOMPONEN_SERVICE_ID = "comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen";
    final static String COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYTITLETAGHANDL_SERVICE_ID = "comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl";
    final static String COMDAYCQWCMFOUNDATIONFORMSIMPLFORMCHOOSERSERVLET_SERVICE_ID = "comDayCqWcmFoundationFormsImplFormChooserServlet";
    final static String COMDAYCQWCMFOUNDATIONFORMSIMPLFORMPARAGRAPHPOSTPROCESSOR_SERVICE_ID = "comDayCqWcmFoundationFormsImplFormParagraphPostProcessor";
    final static String COMDAYCQWCMFOUNDATIONFORMSIMPLFORMSHANDLINGSERVLET_SERVICE_ID = "comDayCqWcmFoundationFormsImplFormsHandlingServlet";
    final static String COMDAYCQWCMFOUNDATIONFORMSIMPLMAILSERVLET_SERVICE_ID = "comDayCqWcmFoundationFormsImplMailServlet";
    final static String COMDAYCQWCMFOUNDATIONIMPLADAPTIVEIMAGECOMPONENTSERVLET_SERVICE_ID = "comDayCqWcmFoundationImplAdaptiveImageComponentServlet";
    final static String COMDAYCQWCMFOUNDATIONIMPLHTTPAUTHHANDLER_SERVICE_ID = "comDayCqWcmFoundationImplHTTPAuthHandler";
    final static String COMDAYCQWCMFOUNDATIONIMPLPAGEIMPRESSIONSTRACKER_SERVICE_ID = "comDayCqWcmFoundationImplPageImpressionsTracker";
    final static String COMDAYCQWCMFOUNDATIONIMPLPAGEREDIRECTSERVLET_SERVICE_ID = "comDayCqWcmFoundationImplPageRedirectServlet";
    final static String COMDAYCQWCMFOUNDATIONSECURITYIMPLDEFAULTATTACHMENTTYPEBLACKLIST_SERVICE_ID = "comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist";
    final static String COMDAYCQWCMFOUNDATIONSECURITYIMPLSAFERSLINGPOSTVALIDATORIMPL_SERVICE_ID = "comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl";
    final static String COMDAYCQWCMMOBILECOREIMPLDEVICEDEVICEINFOTRANSFORMERFACTORY_SERVICE_ID = "comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory";
    final static String COMDAYCQWCMMOBILECOREIMPLREDIRECTREDIRECTFILTER_SERVICE_ID = "comDayCqWcmMobileCoreImplRedirectRedirectFilter";
    final static String COMDAYCQWCMMSMIMPLACTIONSCONTENTCOPYACTIONFACTORY_SERVICE_ID = "comDayCqWcmMsmImplActionsContentCopyActionFactory";
    final static String COMDAYCQWCMMSMIMPLACTIONSCONTENTDELETEACTIONFACTORY_SERVICE_ID = "comDayCqWcmMsmImplActionsContentDeleteActionFactory";
    final static String COMDAYCQWCMMSMIMPLACTIONSCONTENTUPDATEACTIONFACTORY_SERVICE_ID = "comDayCqWcmMsmImplActionsContentUpdateActionFactory";
    final static String COMDAYCQWCMMSMIMPLACTIONSORDERCHILDRENACTIONFACTORY_SERVICE_ID = "comDayCqWcmMsmImplActionsOrderChildrenActionFactory";
    final static String COMDAYCQWCMMSMIMPLACTIONSPAGEMOVEACTIONFACTORY_SERVICE_ID = "comDayCqWcmMsmImplActionsPageMoveActionFactory";
    final static String COMDAYCQWCMMSMIMPLACTIONSREFERENCESUPDATEACTIONFACTORY_SERVICE_ID = "comDayCqWcmMsmImplActionsReferencesUpdateActionFactory";
    final static String COMDAYCQWCMMSMIMPLACTIONSVERSIONCOPYACTIONFACTORY_SERVICE_ID = "comDayCqWcmMsmImplActionsVersionCopyActionFactory";
    final static String COMDAYCQWCMMSMIMPLLIVERELATIONSHIPMANAGERIMPL_SERVICE_ID = "comDayCqWcmMsmImplLiveRelationshipManagerImpl";
    final static String COMDAYCQWCMMSMIMPLROLLOUTMANAGERIMPL_SERVICE_ID = "comDayCqWcmMsmImplRolloutManagerImpl";
    final static String COMDAYCQWCMMSMIMPLSERVLETSAUDITLOGSERVLET_SERVICE_ID = "comDayCqWcmMsmImplServletsAuditLogServlet";
    final static String COMDAYCQWCMNOTIFICATIONEMAILIMPLEMAILCHANNEL_SERVICE_ID = "comDayCqWcmNotificationEmailImplEmailChannel";
    final static String COMDAYCQWCMNOTIFICATIONIMPLNOTIFICATIONMANAGERIMPL_SERVICE_ID = "comDayCqWcmNotificationImplNotificationManagerImpl";
    final static String COMDAYCQWCMSCRIPTINGIMPLBVPMANAGER_SERVICE_ID = "comDayCqWcmScriptingImplBVPManager";
    final static String COMDAYCQWCMUNDOUNDOCONFIG_SERVICE_ID = "comDayCqWcmUndoUndoConfig";
    final static String COMDAYCQWCMWEBSERVICESUPPORTIMPLREPLICATIONEVENTLISTENER_SERVICE_ID = "comDayCqWcmWebservicesupportImplReplicationEventListener";
    final static String COMDAYCQWCMWORKFLOWIMPLWCMWORKFLOWSERVICEIMPL_SERVICE_ID = "comDayCqWcmWorkflowImplWcmWorkflowServiceImpl";
    final static String COMDAYCQWCMWORKFLOWIMPLWORKFLOWPACKAGEINFOPROVIDER_SERVICE_ID = "comDayCqWcmWorkflowImplWorkflowPackageInfoProvider";
    final static String COMDAYCQWIDGETIMPLHTMLLIBRARYMANAGERIMPL_SERVICE_ID = "comDayCqWidgetImplHtmlLibraryManagerImpl";
    final static String COMDAYCQWIDGETIMPLWIDGETEXTENSIONPROVIDERIMPL_SERVICE_ID = "comDayCqWidgetImplWidgetExtensionProviderImpl";
    final static String COMDAYCQWORKFLOWIMPLEMAILEMAILNOTIFICATIONSERVICE_SERVICE_ID = "comDayCqWorkflowImplEmailEMailNotificationService";
    final static String COMDAYCQWORKFLOWIMPLEMAILTASKEMAILNOTIFICATIONSERVICE_SERVICE_ID = "comDayCqWorkflowImplEmailTaskEMailNotificationService";
    final static String COMDAYCRXSECURITYTOKENIMPLIMPLTOKENAUTHENTICATIONHANDLER_SERVICE_ID = "comDayCrxSecurityTokenImplImplTokenAuthenticationHandler";
    final static String COMDAYCRXSECURITYTOKENIMPLTOKENCLEANUPTASK_SERVICE_ID = "comDayCrxSecurityTokenImplTokenCleanupTask";
    final static String GUIDELOCALIZATIONSERVICE_SERVICE_ID = "guideLocalizationService";
    final static String MESSAGINGUSERCOMPONENTFACTORY_SERVICE_ID = "MessagingUserComponentFactory";
    final static String ORGAPACHEARIESJMXFRAMEWORKSTATECONFIG_SERVICE_ID = "orgApacheAriesJmxFrameworkStateConfig";
    final static String ORGAPACHEFELIXEVENTADMINIMPLEVENTADMIN_SERVICE_ID = "orgApacheFelixEventadminImplEventAdmin";
    final static String ORGAPACHEFELIXHTTP_SERVICE_ID = "orgApacheFelixHttp";
    final static String ORGAPACHEFELIXHTTPSSLFILTERSSLFILTER_SERVICE_ID = "orgApacheFelixHttpSslfilterSslFilter";
    final static String ORGAPACHEFELIXJAASCONFIGURATIONFACTORY_SERVICE_ID = "orgApacheFelixJaasConfigurationFactory";
    final static String ORGAPACHEFELIXJAASCONFIGURATIONSPI_SERVICE_ID = "orgApacheFelixJaasConfigurationSpi";
    final static String ORGAPACHEFELIXSCRSCRSERVICE_SERVICE_ID = "orgApacheFelixScrScrService";
    final static String ORGAPACHEFELIXSYSTEMREADYIMPLCOMPONENTSCHECK_SERVICE_ID = "orgApacheFelixSystemreadyImplComponentsCheck";
    final static String ORGAPACHEFELIXSYSTEMREADYIMPLFRAMEWORKSTARTCHECK_SERVICE_ID = "orgApacheFelixSystemreadyImplFrameworkStartCheck";
    final static String ORGAPACHEFELIXSYSTEMREADYIMPLSERVICESCHECK_SERVICE_ID = "orgApacheFelixSystemreadyImplServicesCheck";
    final static String ORGAPACHEFELIXSYSTEMREADYIMPLSERVLETSYSTEMALIVESERVLET_SERVICE_ID = "orgApacheFelixSystemreadyImplServletSystemAliveServlet";
    final static String ORGAPACHEFELIXSYSTEMREADYIMPLSERVLETSYSTEMREADYSERVLET_SERVICE_ID = "orgApacheFelixSystemreadyImplServletSystemReadyServlet";
    final static String ORGAPACHEFELIXSYSTEMREADYSYSTEMREADYMONITOR_SERVICE_ID = "orgApacheFelixSystemreadySystemReadyMonitor";
    final static String ORGAPACHEFELIXWEBCONSOLEINTERNALSERVLETOSGIMANAGER_SERVICE_ID = "orgApacheFelixWebconsoleInternalServletOsgiManager";
    final static String ORGAPACHEFELIXWEBCONSOLEPLUGINSEVENTINTERNALPLUGINSERVLET_SERVICE_ID = "orgApacheFelixWebconsolePluginsEventInternalPluginServlet";
    final static String ORGAPACHEFELIXWEBCONSOLEPLUGINSMEMORYUSAGEINTERNALMEMORYUSAGECO_SERVICE_ID = "orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo";
    final static String ORGAPACHEHTTPPROXYCONFIGURATOR_SERVICE_ID = "orgApacheHttpProxyconfigurator";
    final static String ORGAPACHEJACKRABBITOAKPLUGINSBLOBDATASTOREDATASTORETEXTPROVIDER_SERVICE_ID = "orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider";
    final static String ORGAPACHEJACKRABBITOAKPLUGINSBLOBDATASTOREFILEDATASTORE_SERVICE_ID = "orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore";
    final static String ORGAPACHEJACKRABBITOAKPLUGINSDOCUMENTDOCUMENTNODESTORESERVICE_SERVICE_ID = "orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService";
    final static String ORGAPACHEJACKRABBITOAKPLUGINSDOCUMENTDOCUMENTNODESTORESERVICEPRE_SERVICE_ID = "orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre";
    final static String ORGAPACHEJACKRABBITOAKPLUGINSDOCUMENTSECONDARYSECONDARYSTORECAC_SERVICE_ID = "orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac";
    final static String ORGAPACHEJACKRABBITOAKPLUGINSINDEXASYNCINDEXERSERVICE_SERVICE_ID = "orgApacheJackrabbitOakPluginsIndexAsyncIndexerService";
    final static String ORGAPACHEJACKRABBITOAKPLUGINSINDEXLUCENELUCENEINDEXPROVIDERSERV_SERVICE_ID = "orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ";
    final static String ORGAPACHEJACKRABBITOAKPLUGINSINDEXSOLROSGIEMBEDDEDSOLRSERVERCO_SERVICE_ID = "orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo";
    final static String ORGAPACHEJACKRABBITOAKPLUGINSINDEXSOLROSGINODESTATESOLRSERVERS_SERVICE_ID = "orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers";
    final static String ORGAPACHEJACKRABBITOAKPLUGINSINDEXSOLROSGIOAKSOLRCONFIGURATION_SERVICE_ID = "orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration";
    final static String ORGAPACHEJACKRABBITOAKPLUGINSINDEXSOLROSGIREMOTESOLRSERVERCONF_SERVICE_ID = "orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf";
    final static String ORGAPACHEJACKRABBITOAKPLUGINSINDEXSOLROSGISOLRQUERYINDEXPROVID_SERVICE_ID = "orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid";
    final static String ORGAPACHEJACKRABBITOAKPLUGINSINDEXSOLROSGISOLRSERVERPROVIDERSE_SERVICE_ID = "orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe";
    final static String ORGAPACHEJACKRABBITOAKPLUGINSMETRICSTATISTICSPROVIDERFACTORY_SERVICE_ID = "orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory";
    final static String ORGAPACHEJACKRABBITOAKPLUGINSOBSERVATIONCHANGECOLLECTORPROVIDER_SERVICE_ID = "orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider";
    final static String ORGAPACHEJACKRABBITOAKQUERYQUERYENGINESETTINGSSERVICE_SERVICE_ID = "orgApacheJackrabbitOakQueryQueryEngineSettingsService";
    final static String ORGAPACHEJACKRABBITOAKSECURITYAUTHENTICATIONAUTHENTICATIONCONFIG_SERVICE_ID = "orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig";
    final static String ORGAPACHEJACKRABBITOAKSECURITYAUTHENTICATIONLDAPIMPLLDAPIDENTI_SERVICE_ID = "orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti";
    final static String ORGAPACHEJACKRABBITOAKSECURITYAUTHENTICATIONTOKENTOKENCONFIGURA_SERVICE_ID = "orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura";
    final static String ORGAPACHEJACKRABBITOAKSECURITYAUTHORIZATIONAUTHORIZATIONCONFIGUR_SERVICE_ID = "orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur";
    final static String ORGAPACHEJACKRABBITOAKSECURITYINTERNALSECURITYPROVIDERREGISTRATI_SERVICE_ID = "orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati";
    final static String ORGAPACHEJACKRABBITOAKSECURITYUSERRANDOMAUTHORIZABLENODENAME_SERVICE_ID = "orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName";
    final static String ORGAPACHEJACKRABBITOAKSECURITYUSERUSERCONFIGURATIONIMPL_SERVICE_ID = "orgApacheJackrabbitOakSecurityUserUserConfigurationImpl";
    final static String ORGAPACHEJACKRABBITOAKSEGMENTAZUREAZURESEGMENTSTORESERVICE_SERVICE_ID = "orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService";
    final static String ORGAPACHEJACKRABBITOAKSEGMENTSEGMENTNODESTOREFACTORY_SERVICE_ID = "orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory";
    final static String ORGAPACHEJACKRABBITOAKSEGMENTSEGMENTNODESTOREMONITORSERVICE_SERVICE_ID = "orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService";
    final static String ORGAPACHEJACKRABBITOAKSEGMENTSEGMENTNODESTORESERVICE_SERVICE_ID = "orgApacheJackrabbitOakSegmentSegmentNodeStoreService";
    final static String ORGAPACHEJACKRABBITOAKSEGMENTSTANDBYSTORESTANDBYSTORESERVICE_SERVICE_ID = "orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService";
    final static String ORGAPACHEJACKRABBITOAKSPISECURITYAUTHENTICATIONEXTERNALIMPLDE_SERVICE_ID = "orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe";
    final static String ORGAPACHEJACKRABBITOAKSPISECURITYAUTHENTICATIONEXTERNALIMPLEX_SERVICE_ID = "orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx";
    final static String ORGAPACHEJACKRABBITOAKSPISECURITYAUTHENTICATIONEXTERNALIMPLPR_SERVICE_ID = "orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr";
    final static String ORGAPACHEJACKRABBITOAKSPISECURITYAUTHORIZATIONCUGIMPLCUGCONFI_SERVICE_ID = "orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi";
    final static String ORGAPACHEJACKRABBITOAKSPISECURITYAUTHORIZATIONCUGIMPLCUGEXCLU_SERVICE_ID = "orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu";
    final static String ORGAPACHEJACKRABBITOAKSPISECURITYUSERACTIONDEFAULTAUTHORIZABLE_SERVICE_ID = "orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable";
    final static String ORGAPACHEJACKRABBITVAULTPACKAGINGIMPLPACKAGINGIMPL_SERVICE_ID = "orgApacheJackrabbitVaultPackagingImplPackagingImpl";
    final static String ORGAPACHEJACKRABBITVAULTPACKAGINGREGISTRYIMPLFSPACKAGEREGISTRY_SERVICE_ID = "orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry";
    final static String ORGAPACHESLINGAUTHCOREIMPLLOGOUTSERVLET_SERVICE_ID = "orgApacheSlingAuthCoreImplLogoutServlet";
    final static String ORGAPACHESLINGCACONFIGIMPLCONFIGURATIONBINDINGSVALUEPROVIDER_SERVICE_ID = "orgApacheSlingCaconfigImplConfigurationBindingsValueProvider";
    final static String ORGAPACHESLINGCACONFIGIMPLCONFIGURATIONRESOLVERIMPL_SERVICE_ID = "orgApacheSlingCaconfigImplConfigurationResolverImpl";
    final static String ORGAPACHESLINGCACONFIGIMPLDEFDEFAULTCONFIGURATIONINHERITANCESTRA_SERVICE_ID = "orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra";
    final static String ORGAPACHESLINGCACONFIGIMPLDEFDEFAULTCONFIGURATIONPERSISTENCESTRA_SERVICE_ID = "orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra";
    final static String ORGAPACHESLINGCACONFIGIMPLOVERRIDEOSGICONFIGURATIONOVERRIDEPROVI_SERVICE_ID = "orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi";
    final static String ORGAPACHESLINGCACONFIGIMPLOVERRIDESYSTEMPROPERTYCONFIGURATIONOVE_SERVICE_ID = "orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve";
    final static String ORGAPACHESLINGCACONFIGMANAGEMENTIMPLCONFIGURATIONMANAGEMENTSETTI_SERVICE_ID = "orgApacheSlingCaconfigManagementImplConfigurationManagementSetti";
    final static String ORGAPACHESLINGCACONFIGRESOURCEIMPLDEFDEFAULTCONFIGURATIONRESOUR_SERVICE_ID = "orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour";
    final static String ORGAPACHESLINGCACONFIGRESOURCEIMPLDEFDEFAULTCONTEXTPATHSTRATEGY_SERVICE_ID = "orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy";
    final static String ORGAPACHESLINGCOMMONSHTMLINTERNALTAGSOUPHTMLPARSER_SERVICE_ID = "orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser";
    final static String ORGAPACHESLINGCOMMONSLOGLOGMANAGER_SERVICE_ID = "orgApacheSlingCommonsLogLogManager";
    final static String ORGAPACHESLINGCOMMONSLOGLOGMANAGERFACTORYCONFIG_SERVICE_ID = "orgApacheSlingCommonsLogLogManagerFactoryConfig";
    final static String ORGAPACHESLINGCOMMONSLOGLOGMANAGERFACTORYWRITER_SERVICE_ID = "orgApacheSlingCommonsLogLogManagerFactoryWriter";
    final static String ORGAPACHESLINGCOMMONSMETRICSINTERNALLOGREPORTER_SERVICE_ID = "orgApacheSlingCommonsMetricsInternalLogReporter";
    final static String ORGAPACHESLINGCOMMONSMETRICSRRD4JIMPLCODAHALEMETRICSREPORTER_SERVICE_ID = "orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter";
    final static String ORGAPACHESLINGCOMMONSMIMEINTERNALMIMETYPESERVICEIMPL_SERVICE_ID = "orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl";
    final static String ORGAPACHESLINGCOMMONSSCHEDULERIMPLQUARTZSCHEDULER_SERVICE_ID = "orgApacheSlingCommonsSchedulerImplQuartzScheduler";
    final static String ORGAPACHESLINGCOMMONSSCHEDULERIMPLSCHEDULERHEALTHCHECK_SERVICE_ID = "orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck";
    final static String ORGAPACHESLINGCOMMONSTHREADSIMPLDEFAULTTHREADPOOLFACTORY_SERVICE_ID = "orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory";
    final static String ORGAPACHESLINGDATASOURCEDATASOURCEFACTORY_SERVICE_ID = "orgApacheSlingDatasourceDataSourceFactory";
    final static String ORGAPACHESLINGDATASOURCEJNDIDATASOURCEFACTORY_SERVICE_ID = "orgApacheSlingDatasourceJNDIDataSourceFactory";
    final static String ORGAPACHESLINGDISCOVERYOAKCONFIG_SERVICE_ID = "orgApacheSlingDiscoveryOakConfig";
    final static String ORGAPACHESLINGDISCOVERYOAKSYNCHRONIZEDCLOCKSHEALTHCHECK_SERVICE_ID = "orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck";
    final static String ORGAPACHESLINGDISTRIBUTIONAGENTIMPLFORWARDDISTRIBUTIONAGENTFACTO_SERVICE_ID = "orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto";
    final static String ORGAPACHESLINGDISTRIBUTIONAGENTIMPLPRIVILEGEDISTRIBUTIONREQUESTA_SERVICE_ID = "orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA";
    final static String ORGAPACHESLINGDISTRIBUTIONAGENTIMPLQUEUEDISTRIBUTIONAGENTFACTORY_SERVICE_ID = "orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory";
    final static String ORGAPACHESLINGDISTRIBUTIONAGENTIMPLREVERSEDISTRIBUTIONAGENTFACTO_SERVICE_ID = "orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto";
    final static String ORGAPACHESLINGDISTRIBUTIONAGENTIMPLSIMPLEDISTRIBUTIONAGENTFACTOR_SERVICE_ID = "orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor";
    final static String ORGAPACHESLINGDISTRIBUTIONAGENTIMPLSYNCDISTRIBUTIONAGENTFACTORY_SERVICE_ID = "orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory";
    final static String ORGAPACHESLINGDISTRIBUTIONMONITORDISTRIBUTIONQUEUEHEALTHCHECK_SERVICE_ID = "orgApacheSlingDistributionMonitorDistributionQueueHealthCheck";
    final static String ORGAPACHESLINGDISTRIBUTIONPACKAGINGIMPLEXPORTERAGENTDISTRIBUTIO_SERVICE_ID = "orgApacheSlingDistributionPackagingImplExporterAgentDistributio";
    final static String ORGAPACHESLINGDISTRIBUTIONPACKAGINGIMPLEXPORTERLOCALDISTRIBUTIO_SERVICE_ID = "orgApacheSlingDistributionPackagingImplExporterLocalDistributio";
    final static String ORGAPACHESLINGDISTRIBUTIONPACKAGINGIMPLEXPORTERREMOTEDISTRIBUTI_SERVICE_ID = "orgApacheSlingDistributionPackagingImplExporterRemoteDistributi";
    final static String ORGAPACHESLINGDISTRIBUTIONPACKAGINGIMPLIMPORTERLOCALDISTRIBUTIO_SERVICE_ID = "orgApacheSlingDistributionPackagingImplImporterLocalDistributio";
    final static String ORGAPACHESLINGDISTRIBUTIONPACKAGINGIMPLIMPORTERREMOTEDISTRIBUTI_SERVICE_ID = "orgApacheSlingDistributionPackagingImplImporterRemoteDistributi";
    final static String ORGAPACHESLINGDISTRIBUTIONPACKAGINGIMPLIMPORTERREPOSITORYDISTRI_SERVICE_ID = "orgApacheSlingDistributionPackagingImplImporterRepositoryDistri";
    final static String ORGAPACHESLINGDISTRIBUTIONRESOURCESIMPLDISTRIBUTIONCONFIGURATION_SERVICE_ID = "orgApacheSlingDistributionResourcesImplDistributionConfiguration";
    final static String ORGAPACHESLINGDISTRIBUTIONRESOURCESIMPLDISTRIBUTIONSERVICERESOUR_SERVICE_ID = "orgApacheSlingDistributionResourcesImplDistributionServiceResour";
    final static String ORGAPACHESLINGDISTRIBUTIONSERIALIZATIONIMPLDISTRIBUTIONPACKAGEBU_SERVICE_ID = "orgApacheSlingDistributionSerializationImplDistributionPackageBu";
    final static String ORGAPACHESLINGDISTRIBUTIONSERIALIZATIONIMPLVLTVAULTDISTRIBUTION_SERVICE_ID = "orgApacheSlingDistributionSerializationImplVltVaultDistribution";
    final static String ORGAPACHESLINGDISTRIBUTIONTRANSPORTIMPLUSERCREDENTIALSDISTRIBUTI_SERVICE_ID = "orgApacheSlingDistributionTransportImplUserCredentialsDistributi";
    final static String ORGAPACHESLINGDISTRIBUTIONTRIGGERIMPLDISTRIBUTIONEVENTDISTRIBUTE_SERVICE_ID = "orgApacheSlingDistributionTriggerImplDistributionEventDistribute";
    final static String ORGAPACHESLINGDISTRIBUTIONTRIGGERIMPLJCREVENTDISTRIBUTIONTRIGGER_SERVICE_ID = "orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger";
    final static String ORGAPACHESLINGDISTRIBUTIONTRIGGERIMPLPERSISTEDJCREVENTDISTRIBUTI_SERVICE_ID = "orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi";
    final static String ORGAPACHESLINGDISTRIBUTIONTRIGGERIMPLREMOTEEVENTDISTRIBUTIONTRIG_SERVICE_ID = "orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig";
    final static String ORGAPACHESLINGDISTRIBUTIONTRIGGERIMPLRESOURCEEVENTDISTRIBUTIONTR_SERVICE_ID = "orgApacheSlingDistributionTriggerImplResourceEventDistributionTr";
    final static String ORGAPACHESLINGDISTRIBUTIONTRIGGERIMPLSCHEDULEDDISTRIBUTIONTRIGGE_SERVICE_ID = "orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge";
    final static String ORGAPACHESLINGENGINEIMPLAUTHSLINGAUTHENTICATOR_SERVICE_ID = "orgApacheSlingEngineImplAuthSlingAuthenticator";
    final static String ORGAPACHESLINGENGINEIMPLDEBUGREQUESTPROGRESSTRACKERLOGFILTER_SERVICE_ID = "orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter";
    final static String ORGAPACHESLINGENGINEIMPLLOGREQUESTLOGGER_SERVICE_ID = "orgApacheSlingEngineImplLogRequestLogger";
    final static String ORGAPACHESLINGENGINEIMPLLOGREQUESTLOGGERSERVICE_SERVICE_ID = "orgApacheSlingEngineImplLogRequestLoggerService";
    final static String ORGAPACHESLINGENGINEIMPLSLINGMAINSERVLET_SERVICE_ID = "orgApacheSlingEngineImplSlingMainServlet";
    final static String ORGAPACHESLINGENGINEPARAMETERS_SERVICE_ID = "orgApacheSlingEngineParameters";
    final static String ORGAPACHESLINGEVENTIMPLEVENTINGTHREADPOOL_SERVICE_ID = "orgApacheSlingEventImplEventingThreadPool";
    final static String ORGAPACHESLINGEVENTIMPLJOBSDEFAULTJOBMANAGER_SERVICE_ID = "orgApacheSlingEventImplJobsDefaultJobManager";
    final static String ORGAPACHESLINGEVENTIMPLJOBSJCRPERSISTENCEHANDLER_SERVICE_ID = "orgApacheSlingEventImplJobsJcrPersistenceHandler";
    final static String ORGAPACHESLINGEVENTIMPLJOBSJOBCONSUMERMANAGER_SERVICE_ID = "orgApacheSlingEventImplJobsJobConsumerManager";
    final static String ORGAPACHESLINGEVENTJOBSQUEUECONFIGURATION_SERVICE_ID = "orgApacheSlingEventJobsQueueConfiguration";
    final static String ORGAPACHESLINGEXTENSIONSWEBCONSOLESECURITYPROVIDERINTERNALSLINGW_SERVICE_ID = "orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW";
    final static String ORGAPACHESLINGFEATUREFLAGSFEATURE_SERVICE_ID = "orgApacheSlingFeatureflagsFeature";
    final static String ORGAPACHESLINGFEATUREFLAGSIMPLCONFIGUREDFEATURE_SERVICE_ID = "orgApacheSlingFeatureflagsImplConfiguredFeature";
    final static String ORGAPACHESLINGHAPIIMPLHAPIUTILIMPL_SERVICE_ID = "orgApacheSlingHapiImplHApiUtilImpl";
    final static String ORGAPACHESLINGHCCOREIMPLCOMPOSITEHEALTHCHECK_SERVICE_ID = "orgApacheSlingHcCoreImplCompositeHealthCheck";
    final static String ORGAPACHESLINGHCCOREIMPLEXECUTORHEALTHCHECKEXECUTORIMPL_SERVICE_ID = "orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl";
    final static String ORGAPACHESLINGHCCOREIMPLJMXATTRIBUTEHEALTHCHECK_SERVICE_ID = "orgApacheSlingHcCoreImplJmxAttributeHealthCheck";
    final static String ORGAPACHESLINGHCCOREIMPLSCRIPTABLEHEALTHCHECK_SERVICE_ID = "orgApacheSlingHcCoreImplScriptableHealthCheck";
    final static String ORGAPACHESLINGHCCOREIMPLSERVLETHEALTHCHECKEXECUTORSERVLET_SERVICE_ID = "orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet";
    final static String ORGAPACHESLINGHCCOREIMPLSERVLETRESULTTXTVERBOSESERIALIZER_SERVICE_ID = "orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer";
    final static String ORGAPACHESLINGI18NIMPLI18NFILTER_SERVICE_ID = "orgApacheSlingI18nImplI18NFilter";
    final static String ORGAPACHESLINGI18NIMPLJCRRESOURCEBUNDLEPROVIDER_SERVICE_ID = "orgApacheSlingI18nImplJcrResourceBundleProvider";
    final static String ORGAPACHESLINGINSTALLERPROVIDERJCRIMPLJCRINSTALLER_SERVICE_ID = "orgApacheSlingInstallerProviderJcrImplJcrInstaller";
    final static String ORGAPACHESLINGJCRBASEINTERNALLOGINADMINWHITELIST_SERVICE_ID = "orgApacheSlingJcrBaseInternalLoginAdminWhitelist";
    final static String ORGAPACHESLINGJCRBASEINTERNALLOGINADMINWHITELISTFRAGMENT_SERVICE_ID = "orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment";
    final static String ORGAPACHESLINGJCRDAVEXIMPLSERVLETSSLINGDAVEXSERVLET_SERVICE_ID = "orgApacheSlingJcrDavexImplServletsSlingDavExServlet";
    final static String ORGAPACHESLINGJCRJACKRABBITSERVERJNDIREGISTRATIONSUPPORT_SERVICE_ID = "orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport";
    final static String ORGAPACHESLINGJCRJACKRABBITSERVERRMIREGISTRATIONSUPPORT_SERVICE_ID = "orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport";
    final static String ORGAPACHESLINGJCRREPOINITIMPLREPOSITORYINITIALIZER_SERVICE_ID = "orgApacheSlingJcrRepoinitImplRepositoryInitializer";
    final static String ORGAPACHESLINGJCRREPOINITREPOSITORYINITIALIZER_SERVICE_ID = "orgApacheSlingJcrRepoinitRepositoryInitializer";
    final static String ORGAPACHESLINGJCRRESOURCEINTERNALJCRRESOURCERESOLVERFACTORYIMPL_SERVICE_ID = "orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl";
    final static String ORGAPACHESLINGJCRRESOURCEINTERNALJCRSYSTEMUSERVALIDATOR_SERVICE_ID = "orgApacheSlingJcrResourceInternalJcrSystemUserValidator";
    final static String ORGAPACHESLINGJCRRESOURCESECURITYIMPLRESOURCEACCESSGATEFACTORY_SERVICE_ID = "orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory";
    final static String ORGAPACHESLINGJCRWEBDAVIMPLHANDLERDEFAULTHANDLERSERVICE_SERVICE_ID = "orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService";
    final static String ORGAPACHESLINGJCRWEBDAVIMPLHANDLERDIRLISTINGEXPORTHANDLERSERVIC_SERVICE_ID = "orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic";
    final static String ORGAPACHESLINGJCRWEBDAVIMPLSERVLETSSIMPLEWEBDAVSERVLET_SERVICE_ID = "orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet";
    final static String ORGAPACHESLINGJMXPROVIDERIMPLJMXRESOURCEPROVIDER_SERVICE_ID = "orgApacheSlingJmxProviderImplJMXResourceProvider";
    final static String ORGAPACHESLINGMODELSIMPLMODELADAPTERFACTORY_SERVICE_ID = "orgApacheSlingModelsImplModelAdapterFactory";
    final static String ORGAPACHESLINGMODELSJACKSONEXPORTERIMPLRESOURCEMODULEPROVIDER_SERVICE_ID = "orgApacheSlingModelsJacksonexporterImplResourceModuleProvider";
    final static String ORGAPACHESLINGRESOURCEINVENTORYIMPLRESOURCEINVENTORYPRINTERFACTO_SERVICE_ID = "orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto";
    final static String ORGAPACHESLINGRESOURCEMERGERIMPLMERGEDRESOURCEPROVIDERFACTORY_SERVICE_ID = "orgApacheSlingResourcemergerImplMergedResourceProviderFactory";
    final static String ORGAPACHESLINGRESOURCEMERGERPICKEROVERRIDING_SERVICE_ID = "orgApacheSlingResourcemergerPickerOverriding";
    final static String ORGAPACHESLINGSCRIPTINGCOREIMPLSCRIPTCACHEIMPL_SERVICE_ID = "orgApacheSlingScriptingCoreImplScriptCacheImpl";
    final static String ORGAPACHESLINGSCRIPTINGCOREIMPLSCRIPTINGRESOURCERESOLVERPROVIDER_SERVICE_ID = "orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider";
    final static String ORGAPACHESLINGSCRIPTINGJAVAIMPLJAVASCRIPTENGINEFACTORY_SERVICE_ID = "orgApacheSlingScriptingJavaImplJavaScriptEngineFactory";
    final static String ORGAPACHESLINGSCRIPTINGJAVASCRIPTINTERNALRHINOJAVASCRIPTENGINEFA_SERVICE_ID = "orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa";
    final static String ORGAPACHESLINGSCRIPTINGJSPJSPSCRIPTENGINEFACTORY_SERVICE_ID = "orgApacheSlingScriptingJspJspScriptEngineFactory";
    final static String ORGAPACHESLINGSCRIPTINGSIGHTLYJSIMPLJSAPISLYBINDINGSVALUESPROV_SERVICE_ID = "orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv";
    final static String ORGAPACHESLINGSECURITYIMPLCONTENTDISPOSITIONFILTER_SERVICE_ID = "orgApacheSlingSecurityImplContentDispositionFilter";
    final static String ORGAPACHESLINGSECURITYIMPLREFERRERFILTER_SERVICE_ID = "orgApacheSlingSecurityImplReferrerFilter";
    final static String ORGAPACHESLINGSERVICEUSERMAPPINGIMPLSERVICEUSERMAPPERIMPL_SERVICE_ID = "orgApacheSlingServiceusermappingImplServiceUserMapperImpl";
    final static String ORGAPACHESLINGSERVICEUSERMAPPINGIMPLSERVICEUSERMAPPERIMPLAMENDED_SERVICE_ID = "orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended";
    final static String ORGAPACHESLINGSERVLETSGETDEFAULTGETSERVLET_SERVICE_ID = "orgApacheSlingServletsGetDefaultGetServlet";
    final static String ORGAPACHESLINGSERVLETSGETIMPLVERSIONVERSIONINFOSERVLET_SERVICE_ID = "orgApacheSlingServletsGetImplVersionVersionInfoServlet";
    final static String ORGAPACHESLINGSERVLETSPOSTIMPLHELPERCHUNKCLEANUPTASK_SERVICE_ID = "orgApacheSlingServletsPostImplHelperChunkCleanUpTask";
    final static String ORGAPACHESLINGSERVLETSPOSTIMPLSLINGPOSTSERVLET_SERVICE_ID = "orgApacheSlingServletsPostImplSlingPostServlet";
    final static String ORGAPACHESLINGSERVLETSRESOLVERSLINGSERVLETRESOLVER_SERVICE_ID = "orgApacheSlingServletsResolverSlingServletResolver";
    final static String ORGAPACHESLINGSETTINGSIMPLSLINGSETTINGSSERVICEIMPL_SERVICE_ID = "orgApacheSlingSettingsImplSlingSettingsServiceImpl";
    final static String ORGAPACHESLINGSTARTUPFILTERIMPLSTARTUPFILTERIMPL_SERVICE_ID = "orgApacheSlingStartupfilterImplStartupFilterImpl";
    final static String ORGAPACHESLINGTENANTINTERNALTENANTPROVIDERIMPL_SERVICE_ID = "orgApacheSlingTenantInternalTenantProviderImpl";
    final static String ORGAPACHESLINGTRACERINTERNALLOGTRACER_SERVICE_ID = "orgApacheSlingTracerInternalLogTracer";
    final static String ORGAPACHESLINGXSSIMPLXSSFILTERIMPL_SERVICE_ID = "orgApacheSlingXssImplXSSFilterImpl";
    
    final ConfigmgrApi service;

    public ConfigmgrApiVerticle() {
        try {
            Class serviceImplClass = getClass().getClassLoader().loadClass("org.openapitools.server.api.verticle.ConfigmgrApiImpl");
            service = (ConfigmgrApi)serviceImplClass.newInstance();
        } catch (Exception e) {
            logUnexpectedError("ConfigmgrApiVerticle constructor", e);
            throw new RuntimeException(e);
        }
    }

    @Override
    public void start() throws Exception {
        
        //Consumer for adaptiveFormAndInteractiveCommunicationWebChannelConfiguration
        vertx.eventBus().<JsonObject> consumer(ADAPTIVEFORMANDINTERACTIVECOMMUNICATIONWEBCHANNELCONFIGURATION_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "adaptiveFormAndInteractiveCommunicationWebChannelConfiguration";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String showPlaceholderParam = message.body().getString("showPlaceholder");
                Boolean showPlaceholder = (showPlaceholderParam == null) ? null : Json.mapper.readValue(showPlaceholderParam, Boolean.class);
                String maximumCacheEntriesParam = message.body().getString("maximumCacheEntries");
                Integer maximumCacheEntries = (maximumCacheEntriesParam == null) ? null : Json.mapper.readValue(maximumCacheEntriesParam, Integer.class);
                String afScriptingCompatversionParam = message.body().getString("af.scripting.compatversion");
                String afScriptingCompatversion = (afScriptingCompatversionParam == null) ? null : afScriptingCompatversionParam;
                String makeFileNameUniqueParam = message.body().getString("makeFileNameUnique");
                Boolean makeFileNameUnique = (makeFileNameUniqueParam == null) ? null : Json.mapper.readValue(makeFileNameUniqueParam, Boolean.class);
                String generatingCompliantDataParam = message.body().getString("generatingCompliantData");
                Boolean generatingCompliantData = (generatingCompliantDataParam == null) ? null : Json.mapper.readValue(generatingCompliantDataParam, Boolean.class);
                service.adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(post, apply, delete, action, $location, propertylist, showPlaceholder, maximumCacheEntries, afScriptingCompatversion, makeFileNameUnique, generatingCompliantData, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "adaptiveFormAndInteractiveCommunicationWebChannelConfiguration");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("adaptiveFormAndInteractiveCommunicationWebChannelConfiguration", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur
        vertx.eventBus().<JsonObject> consumer(ADAPTIVEFORMANDINTERACTIVECOMMUNICATIONWEBCHANNELTHEMECONFIGUR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray fontListParam = message.body().getJsonArray("fontList");
                List<String> fontList = (fontListParam == null) ? null : Json.mapper.readValue(fontListParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(post, apply, delete, action, $location, propertylist, fontList, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for analyticsComponentQueryCacheService
        vertx.eventBus().<JsonObject> consumer(ANALYTICSCOMPONENTQUERYCACHESERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "analyticsComponentQueryCacheService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqAnalyticsComponentQueryCacheSizeParam = message.body().getString("cq.analytics.component.query.cache.size");
                Integer cqAnalyticsComponentQueryCacheSize = (cqAnalyticsComponentQueryCacheSizeParam == null) ? null : Json.mapper.readValue(cqAnalyticsComponentQueryCacheSizeParam, Integer.class);
                service.analyticsComponentQueryCacheService(post, apply, delete, action, $location, propertylist, cqAnalyticsComponentQueryCacheSize, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "analyticsComponentQueryCacheService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("analyticsComponentQueryCacheService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for apacheSlingHealthCheckResultHTMLSerializer
        vertx.eventBus().<JsonObject> consumer(APACHESLINGHEALTHCHECKRESULTHTMLSERIALIZER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "apacheSlingHealthCheckResultHTMLSerializer";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String styleStringParam = message.body().getString("styleString");
                String styleString = (styleStringParam == null) ? null : styleStringParam;
                service.apacheSlingHealthCheckResultHTMLSerializer(post, apply, delete, action, $location, propertylist, styleString, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "apacheSlingHealthCheckResultHTMLSerializer");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("apacheSlingHealthCheckResultHTMLSerializer", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration
        vertx.eventBus().<JsonObject> consumer(COMADOBEAEMFORMSNDOCUMENTSCONFIGAEMFORMSMANAGERCONFIGURATION_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String formsManagerConfigIncludeOOTBTemplatesParam = message.body().getString("formsManagerConfig.includeOOTBTemplates");
                Boolean formsManagerConfigIncludeOOTBTemplates = (formsManagerConfigIncludeOOTBTemplatesParam == null) ? null : Json.mapper.readValue(formsManagerConfigIncludeOOTBTemplatesParam, Boolean.class);
                String formsManagerConfigIncludeDeprecatedTemplatesParam = message.body().getString("formsManagerConfig.includeDeprecatedTemplates");
                Boolean formsManagerConfigIncludeDeprecatedTemplates = (formsManagerConfigIncludeDeprecatedTemplatesParam == null) ? null : Json.mapper.readValue(formsManagerConfigIncludeDeprecatedTemplatesParam, Boolean.class);
                service.comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(post, apply, delete, action, $location, propertylist, formsManagerConfigIncludeOOTBTemplates, formsManagerConfigIncludeDeprecatedTemplates, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeAemTransactionCoreImplTransactionRecorder
        vertx.eventBus().<JsonObject> consumer(COMADOBEAEMTRANSACTIONCOREIMPLTRANSACTIONRECORDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeAemTransactionCoreImplTransactionRecorder";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String isTransactionRecordingEnabledParam = message.body().getString("isTransactionRecordingEnabled");
                Boolean isTransactionRecordingEnabled = (isTransactionRecordingEnabledParam == null) ? null : Json.mapper.readValue(isTransactionRecordingEnabledParam, Boolean.class);
                service.comAdobeAemTransactionCoreImplTransactionRecorder(post, apply, delete, action, $location, propertylist, isTransactionRecordingEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeAemTransactionCoreImplTransactionRecorder");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeAemTransactionCoreImplTransactionRecorder", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC
        vertx.eventBus().<JsonObject> consumer(COMADOBEAEMUPGRADEPRECHECKSHCIMPLDEPRECATEINDEXESHC_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String hcNameParam = message.body().getString("hc.name");
                String hcName = (hcNameParam == null) ? null : hcNameParam;
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String hcMbeanNameParam = message.body().getString("hc.mbean.name");
                String hcMbeanName = (hcMbeanNameParam == null) ? null : hcMbeanNameParam;
                service.comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC
        vertx.eventBus().<JsonObject> consumer(COMADOBEAEMUPGRADEPRECHECKSHCIMPLREPLICATIONAGENTSDISABLEDHC_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String hcNameParam = message.body().getString("hc.name");
                String hcName = (hcNameParam == null) ? null : hcNameParam;
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String hcMbeanNameParam = message.body().getString("hc.mbean.name");
                String hcMbeanName = (hcMbeanNameParam == null) ? null : hcMbeanNameParam;
                service.comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEAEMUPGRADEPRECHECKSMBEANIMPLPREUPGRADETASKSMBEANIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray preUpgradeMaintenanceTasksParam = message.body().getJsonArray("pre-upgrade.maintenance.tasks");
                List<String> preUpgradeMaintenanceTasks = (preUpgradeMaintenanceTasksParam == null) ? null : Json.mapper.readValue(preUpgradeMaintenanceTasksParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray preUpgradeHcTagsParam = message.body().getJsonArray("pre-upgrade.hc.tags");
                List<String> preUpgradeHcTags = (preUpgradeHcTagsParam == null) ? null : Json.mapper.readValue(preUpgradeHcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(post, apply, delete, action, $location, propertylist, preUpgradeMaintenanceTasks, preUpgradeHcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEAEMUPGRADEPRECHECKSTASKSIMPLCONSISTENCYCHECKTASKIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String rootPathParam = message.body().getString("root.path");
                String rootPath = (rootPathParam == null) ? null : rootPathParam;
                String fixInconsistenciesParam = message.body().getString("fix.inconsistencies");
                Boolean fixInconsistencies = (fixInconsistenciesParam == null) ? null : Json.mapper.readValue(fixInconsistenciesParam, Boolean.class);
                service.comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(post, apply, delete, action, $location, propertylist, rootPath, fixInconsistencies, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqAccountApiAccountManagementService
        vertx.eventBus().<JsonObject> consumer(COMADOBECQACCOUNTAPIACCOUNTMANAGEMENTSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqAccountApiAccountManagementService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqAccountmanagerTokenValidityPeriodParam = message.body().getString("cq.accountmanager.token.validity.period");
                Integer cqAccountmanagerTokenValidityPeriod = (cqAccountmanagerTokenValidityPeriodParam == null) ? null : Json.mapper.readValue(cqAccountmanagerTokenValidityPeriodParam, Integer.class);
                String cqAccountmanagerConfigRequestnewaccountMailParam = message.body().getString("cq.accountmanager.config.requestnewaccount.mail");
                String cqAccountmanagerConfigRequestnewaccountMail = (cqAccountmanagerConfigRequestnewaccountMailParam == null) ? null : cqAccountmanagerConfigRequestnewaccountMailParam;
                String cqAccountmanagerConfigRequestnewpwdMailParam = message.body().getString("cq.accountmanager.config.requestnewpwd.mail");
                String cqAccountmanagerConfigRequestnewpwdMail = (cqAccountmanagerConfigRequestnewpwdMailParam == null) ? null : cqAccountmanagerConfigRequestnewpwdMailParam;
                service.comAdobeCqAccountApiAccountManagementService(post, apply, delete, action, $location, propertylist, cqAccountmanagerTokenValidityPeriod, cqAccountmanagerConfigRequestnewaccountMail, cqAccountmanagerConfigRequestnewpwdMail, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqAccountApiAccountManagementService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqAccountApiAccountManagementService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqAccountImplAccountManagementServlet
        vertx.eventBus().<JsonObject> consumer(COMADOBECQACCOUNTIMPLACCOUNTMANAGEMENTSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqAccountImplAccountManagementServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqAccountmanagerConfigInformnewaccountMailParam = message.body().getString("cq.accountmanager.config.informnewaccount.mail");
                String cqAccountmanagerConfigInformnewaccountMail = (cqAccountmanagerConfigInformnewaccountMailParam == null) ? null : cqAccountmanagerConfigInformnewaccountMailParam;
                String cqAccountmanagerConfigInformnewpwdMailParam = message.body().getString("cq.accountmanager.config.informnewpwd.mail");
                String cqAccountmanagerConfigInformnewpwdMail = (cqAccountmanagerConfigInformnewpwdMailParam == null) ? null : cqAccountmanagerConfigInformnewpwdMailParam;
                service.comAdobeCqAccountImplAccountManagementServlet(post, apply, delete, action, $location, propertylist, cqAccountmanagerConfigInformnewaccountMail, cqAccountmanagerConfigInformnewpwdMail, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqAccountImplAccountManagementServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqAccountImplAccountManagementServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqAddressImplLocationLocationListServlet
        vertx.eventBus().<JsonObject> consumer(COMADOBECQADDRESSIMPLLOCATIONLOCATIONLISTSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqAddressImplLocationLocationListServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqAddressLocationDefaultMaxResultsParam = message.body().getString("cq.address.location.default.maxResults");
                Integer cqAddressLocationDefaultMaxResults = (cqAddressLocationDefaultMaxResultsParam == null) ? null : Json.mapper.readValue(cqAddressLocationDefaultMaxResultsParam, Integer.class);
                service.comAdobeCqAddressImplLocationLocationListServlet(post, apply, delete, action, $location, propertylist, cqAddressLocationDefaultMaxResults, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqAddressImplLocationLocationListServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqAddressImplLocationLocationListServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqAuditPurgeDam
        vertx.eventBus().<JsonObject> consumer(COMADOBECQAUDITPURGEDAM_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqAuditPurgeDam";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String auditlogRuleNameParam = message.body().getString("auditlog.rule.name");
                String auditlogRuleName = (auditlogRuleNameParam == null) ? null : auditlogRuleNameParam;
                String auditlogRuleContentpathParam = message.body().getString("auditlog.rule.contentpath");
                String auditlogRuleContentpath = (auditlogRuleContentpathParam == null) ? null : auditlogRuleContentpathParam;
                String auditlogRuleMinimumageParam = message.body().getString("auditlog.rule.minimumage");
                Integer auditlogRuleMinimumage = (auditlogRuleMinimumageParam == null) ? null : Json.mapper.readValue(auditlogRuleMinimumageParam, Integer.class);
                String auditlogRuleTypesParam = message.body().getString("auditlog.rule.types");
                String auditlogRuleTypes = (auditlogRuleTypesParam == null) ? null : auditlogRuleTypesParam;
                service.comAdobeCqAuditPurgeDam(post, apply, delete, action, $location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqAuditPurgeDam");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqAuditPurgeDam", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqAuditPurgePages
        vertx.eventBus().<JsonObject> consumer(COMADOBECQAUDITPURGEPAGES_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqAuditPurgePages";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String auditlogRuleNameParam = message.body().getString("auditlog.rule.name");
                String auditlogRuleName = (auditlogRuleNameParam == null) ? null : auditlogRuleNameParam;
                String auditlogRuleContentpathParam = message.body().getString("auditlog.rule.contentpath");
                String auditlogRuleContentpath = (auditlogRuleContentpathParam == null) ? null : auditlogRuleContentpathParam;
                String auditlogRuleMinimumageParam = message.body().getString("auditlog.rule.minimumage");
                Integer auditlogRuleMinimumage = (auditlogRuleMinimumageParam == null) ? null : Json.mapper.readValue(auditlogRuleMinimumageParam, Integer.class);
                String auditlogRuleTypesParam = message.body().getString("auditlog.rule.types");
                String auditlogRuleTypes = (auditlogRuleTypesParam == null) ? null : auditlogRuleTypesParam;
                service.comAdobeCqAuditPurgePages(post, apply, delete, action, $location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqAuditPurgePages");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqAuditPurgePages", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqAuditPurgeReplication
        vertx.eventBus().<JsonObject> consumer(COMADOBECQAUDITPURGEREPLICATION_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqAuditPurgeReplication";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String auditlogRuleNameParam = message.body().getString("auditlog.rule.name");
                String auditlogRuleName = (auditlogRuleNameParam == null) ? null : auditlogRuleNameParam;
                String auditlogRuleContentpathParam = message.body().getString("auditlog.rule.contentpath");
                String auditlogRuleContentpath = (auditlogRuleContentpathParam == null) ? null : auditlogRuleContentpathParam;
                String auditlogRuleMinimumageParam = message.body().getString("auditlog.rule.minimumage");
                Integer auditlogRuleMinimumage = (auditlogRuleMinimumageParam == null) ? null : Json.mapper.readValue(auditlogRuleMinimumageParam, Integer.class);
                String auditlogRuleTypesParam = message.body().getString("auditlog.rule.types");
                String auditlogRuleTypes = (auditlogRuleTypesParam == null) ? null : auditlogRuleTypesParam;
                service.comAdobeCqAuditPurgeReplication(post, apply, delete, action, $location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqAuditPurgeReplication");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqAuditPurgeReplication", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqCdnRewriterImplAWSCloudFrontRewriter
        vertx.eventBus().<JsonObject> consumer(COMADOBECQCDNREWRITERIMPLAWSCLOUDFRONTREWRITER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqCdnRewriterImplAWSCloudFrontRewriter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String keypairIdParam = message.body().getString("keypair.id");
                String keypairId = (keypairIdParam == null) ? null : keypairIdParam;
                String keypairAliasParam = message.body().getString("keypair.alias");
                String keypairAlias = (keypairAliasParam == null) ? null : keypairAliasParam;
                JsonArray cdnrewriterAttributesParam = message.body().getJsonArray("cdnrewriter.attributes");
                List<String> cdnrewriterAttributes = (cdnrewriterAttributesParam == null) ? null : Json.mapper.readValue(cdnrewriterAttributesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cdnRewriterDistributionDomainParam = message.body().getString("cdn.rewriter.distribution.domain");
                String cdnRewriterDistributionDomain = (cdnRewriterDistributionDomainParam == null) ? null : cdnRewriterDistributionDomainParam;
                service.comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(post, apply, delete, action, $location, propertylist, serviceRanking, keypairId, keypairAlias, cdnrewriterAttributes, cdnRewriterDistributionDomain, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqCdnRewriterImplAWSCloudFrontRewriter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqCdnRewriterImplAWSCloudFrontRewriter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqCdnRewriterImplCDNConfigServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQCDNREWRITERIMPLCDNCONFIGSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqCdnRewriterImplCDNConfigServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cdnConfigDistributionDomainParam = message.body().getString("cdn.config.distribution.domain");
                String cdnConfigDistributionDomain = (cdnConfigDistributionDomainParam == null) ? null : cdnConfigDistributionDomainParam;
                String cdnConfigEnableRewritingParam = message.body().getString("cdn.config.enable.rewriting");
                Boolean cdnConfigEnableRewriting = (cdnConfigEnableRewritingParam == null) ? null : Json.mapper.readValue(cdnConfigEnableRewritingParam, Boolean.class);
                JsonArray cdnConfigPathPrefixesParam = message.body().getJsonArray("cdn.config.path.prefixes");
                List<String> cdnConfigPathPrefixes = (cdnConfigPathPrefixesParam == null) ? null : Json.mapper.readValue(cdnConfigPathPrefixesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cdnConfigCdnttlParam = message.body().getString("cdn.config.cdnttl");
                Integer cdnConfigCdnttl = (cdnConfigCdnttlParam == null) ? null : Json.mapper.readValue(cdnConfigCdnttlParam, Integer.class);
                String cdnConfigApplicationProtocolParam = message.body().getString("cdn.config.application.protocol");
                String cdnConfigApplicationProtocol = (cdnConfigApplicationProtocolParam == null) ? null : cdnConfigApplicationProtocolParam;
                service.comAdobeCqCdnRewriterImplCDNConfigServiceImpl(post, apply, delete, action, $location, propertylist, cdnConfigDistributionDomain, cdnConfigEnableRewriting, cdnConfigPathPrefixes, cdnConfigCdnttl, cdnConfigApplicationProtocol, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqCdnRewriterImplCDNConfigServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqCdnRewriterImplCDNConfigServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqCdnRewriterImplCDNRewriter
        vertx.eventBus().<JsonObject> consumer(COMADOBECQCDNREWRITERIMPLCDNREWRITER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqCdnRewriterImplCDNRewriter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                JsonArray cdnrewriterAttributesParam = message.body().getJsonArray("cdnrewriter.attributes");
                List<String> cdnrewriterAttributes = (cdnrewriterAttributesParam == null) ? null : Json.mapper.readValue(cdnrewriterAttributesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cdnRewriterDistributionDomainParam = message.body().getString("cdn.rewriter.distribution.domain");
                String cdnRewriterDistributionDomain = (cdnRewriterDistributionDomainParam == null) ? null : cdnRewriterDistributionDomainParam;
                service.comAdobeCqCdnRewriterImplCDNRewriter(post, apply, delete, action, $location, propertylist, serviceRanking, cdnrewriterAttributes, cdnRewriterDistributionDomain, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqCdnRewriterImplCDNRewriter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqCdnRewriterImplCDNRewriter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle
        vertx.eventBus().<JsonObject> consumer(COMADOBECQCLOUDCONFIGCOREIMPLCONFIGURATIONREPLICATIONEVENTHANDLE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray flushAgentsParam = message.body().getJsonArray("flush.agents");
                List<String> flushAgents = (flushAgentsParam == null) ? null : Json.mapper.readValue(flushAgentsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(post, apply, delete, action, $location, propertylist, flushAgents, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqCommerceImplAssetDynamicImageHandler
        vertx.eventBus().<JsonObject> consumer(COMADOBECQCOMMERCEIMPLASSETDYNAMICIMAGEHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqCommerceImplAssetDynamicImageHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqCommerceAssetHandlerActiveParam = message.body().getString("cq.commerce.asset.handler.active");
                Boolean cqCommerceAssetHandlerActive = (cqCommerceAssetHandlerActiveParam == null) ? null : Json.mapper.readValue(cqCommerceAssetHandlerActiveParam, Boolean.class);
                String cqCommerceAssetHandlerNameParam = message.body().getString("cq.commerce.asset.handler.name");
                String cqCommerceAssetHandlerName = (cqCommerceAssetHandlerNameParam == null) ? null : cqCommerceAssetHandlerNameParam;
                service.comAdobeCqCommerceImplAssetDynamicImageHandler(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqCommerceImplAssetDynamicImageHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqCommerceImplAssetDynamicImageHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQCOMMERCEIMPLASSETPRODUCTASSETHANDLERPROVIDERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqCommerceAssetHandlerFallbackParam = message.body().getString("cq.commerce.asset.handler.fallback");
                String cqCommerceAssetHandlerFallback = (cqCommerceAssetHandlerFallbackParam == null) ? null : cqCommerceAssetHandlerFallbackParam;
                service.comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerFallback, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqCommerceImplAssetStaticImageHandler
        vertx.eventBus().<JsonObject> consumer(COMADOBECQCOMMERCEIMPLASSETSTATICIMAGEHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqCommerceImplAssetStaticImageHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqCommerceAssetHandlerActiveParam = message.body().getString("cq.commerce.asset.handler.active");
                Boolean cqCommerceAssetHandlerActive = (cqCommerceAssetHandlerActiveParam == null) ? null : Json.mapper.readValue(cqCommerceAssetHandlerActiveParam, Boolean.class);
                String cqCommerceAssetHandlerNameParam = message.body().getString("cq.commerce.asset.handler.name");
                String cqCommerceAssetHandlerName = (cqCommerceAssetHandlerNameParam == null) ? null : cqCommerceAssetHandlerNameParam;
                service.comAdobeCqCommerceImplAssetStaticImageHandler(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqCommerceImplAssetStaticImageHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqCommerceImplAssetStaticImageHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqCommerceImplAssetVideoHandler
        vertx.eventBus().<JsonObject> consumer(COMADOBECQCOMMERCEIMPLASSETVIDEOHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqCommerceImplAssetVideoHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqCommerceAssetHandlerActiveParam = message.body().getString("cq.commerce.asset.handler.active");
                Boolean cqCommerceAssetHandlerActive = (cqCommerceAssetHandlerActiveParam == null) ? null : Json.mapper.readValue(cqCommerceAssetHandlerActiveParam, Boolean.class);
                String cqCommerceAssetHandlerNameParam = message.body().getString("cq.commerce.asset.handler.name");
                String cqCommerceAssetHandlerName = (cqCommerceAssetHandlerNameParam == null) ? null : cqCommerceAssetHandlerNameParam;
                service.comAdobeCqCommerceImplAssetVideoHandler(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqCommerceImplAssetVideoHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqCommerceImplAssetVideoHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqCommerceImplPromotionPromotionManagerImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQCOMMERCEIMPLPROMOTIONPROMOTIONMANAGERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqCommerceImplPromotionPromotionManagerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqCommercePromotionRootParam = message.body().getString("cq.commerce.promotion.root");
                String cqCommercePromotionRoot = (cqCommercePromotionRootParam == null) ? null : cqCommercePromotionRootParam;
                service.comAdobeCqCommerceImplPromotionPromotionManagerImpl(post, apply, delete, action, $location, propertylist, cqCommercePromotionRoot, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqCommerceImplPromotionPromotionManagerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqCommerceImplPromotionPromotionManagerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQCOMMERCEPIMIMPLCATALOGGENERATORCATALOGGENERATORIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqCommerceCataloggeneratorBucketsizeParam = message.body().getString("cq.commerce.cataloggenerator.bucketsize");
                Integer cqCommerceCataloggeneratorBucketsize = (cqCommerceCataloggeneratorBucketsizeParam == null) ? null : Json.mapper.readValue(cqCommerceCataloggeneratorBucketsizeParam, Integer.class);
                String cqCommerceCataloggeneratorBucketnameParam = message.body().getString("cq.commerce.cataloggenerator.bucketname");
                String cqCommerceCataloggeneratorBucketname = (cqCommerceCataloggeneratorBucketnameParam == null) ? null : cqCommerceCataloggeneratorBucketnameParam;
                JsonArray cqCommerceCataloggeneratorExcludedtemplatepropertiesParam = message.body().getJsonArray("cq.commerce.cataloggenerator.excludedtemplateproperties");
                List<String> cqCommerceCataloggeneratorExcludedtemplateproperties = (cqCommerceCataloggeneratorExcludedtemplatepropertiesParam == null) ? null : Json.mapper.readValue(cqCommerceCataloggeneratorExcludedtemplatepropertiesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(post, apply, delete, action, $location, propertylist, cqCommerceCataloggeneratorBucketsize, cqCommerceCataloggeneratorBucketname, cqCommerceCataloggeneratorExcludedtemplateproperties, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqCommercePimImplPageEventListener
        vertx.eventBus().<JsonObject> consumer(COMADOBECQCOMMERCEPIMIMPLPAGEEVENTLISTENER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqCommercePimImplPageEventListener";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqCommercePageeventlistenerEnabledParam = message.body().getString("cq.commerce.pageeventlistener.enabled");
                Boolean cqCommercePageeventlistenerEnabled = (cqCommercePageeventlistenerEnabledParam == null) ? null : Json.mapper.readValue(cqCommercePageeventlistenerEnabledParam, Boolean.class);
                service.comAdobeCqCommercePimImplPageEventListener(post, apply, delete, action, $location, propertylist, cqCommercePageeventlistenerEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqCommercePimImplPageEventListener");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqCommercePimImplPageEventListener", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQCOMMERCEPIMIMPLPRODUCTFEEDPRODUCTFEEDSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String feedGeneratorAlgorithmParam = message.body().getString("Feed generator algorithm");
                String feedGeneratorAlgorithm = (feedGeneratorAlgorithmParam == null) ? null : feedGeneratorAlgorithmParam;
                service.comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(post, apply, delete, action, $location, propertylist, feedGeneratorAlgorithm, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqContentinsightImplReportingServicesSettingsProvider
        vertx.eventBus().<JsonObject> consumer(COMADOBECQCONTENTINSIGHTIMPLREPORTINGSERVICESSETTINGSPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqContentinsightImplReportingServicesSettingsProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String reportingservicesUrlParam = message.body().getString("reportingservices.url");
                String reportingservicesUrl = (reportingservicesUrlParam == null) ? null : reportingservicesUrlParam;
                service.comAdobeCqContentinsightImplReportingServicesSettingsProvider(post, apply, delete, action, $location, propertylist, reportingservicesUrl, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqContentinsightImplReportingServicesSettingsProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqContentinsightImplReportingServicesSettingsProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet
        vertx.eventBus().<JsonObject> consumer(COMADOBECQCONTENTINSIGHTIMPLSERVLETSBRIGHTEDGEPROXYSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String brightedgeUrlParam = message.body().getString("brightedge.url");
                String brightedgeUrl = (brightedgeUrlParam == null) ? null : brightedgeUrlParam;
                service.comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(post, apply, delete, action, $location, propertylist, brightedgeUrl, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqContentinsightImplServletsReportingServicesProxyServle
        vertx.eventBus().<JsonObject> consumer(COMADOBECQCONTENTINSIGHTIMPLSERVLETSREPORTINGSERVICESPROXYSERVLE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqContentinsightImplServletsReportingServicesProxyServle";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray reportingservicesProxyWhitelistParam = message.body().getJsonArray("reportingservices.proxy.whitelist");
                List<String> reportingservicesProxyWhitelist = (reportingservicesProxyWhitelistParam == null) ? null : Json.mapper.readValue(reportingservicesProxyWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqContentinsightImplServletsReportingServicesProxyServle(post, apply, delete, action, $location, propertylist, reportingservicesProxyWhitelist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqContentinsightImplServletsReportingServicesProxyServle");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqContentinsightImplServletsReportingServicesProxyServle", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqDamCfmImplComponentComponentConfigImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQDAMCFMIMPLCOMPONENTCOMPONENTCONFIGIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqDamCfmImplComponentComponentConfigImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String damCfmComponentResourceTypeParam = message.body().getString("dam.cfm.component.resourceType");
                String damCfmComponentResourceType = (damCfmComponentResourceTypeParam == null) ? null : damCfmComponentResourceTypeParam;
                String damCfmComponentFileReferencePropParam = message.body().getString("dam.cfm.component.fileReferenceProp");
                String damCfmComponentFileReferenceProp = (damCfmComponentFileReferencePropParam == null) ? null : damCfmComponentFileReferencePropParam;
                String damCfmComponentElementsPropParam = message.body().getString("dam.cfm.component.elementsProp");
                String damCfmComponentElementsProp = (damCfmComponentElementsPropParam == null) ? null : damCfmComponentElementsPropParam;
                String damCfmComponentVariationPropParam = message.body().getString("dam.cfm.component.variationProp");
                String damCfmComponentVariationProp = (damCfmComponentVariationPropParam == null) ? null : damCfmComponentVariationPropParam;
                service.comAdobeCqDamCfmImplComponentComponentConfigImpl(post, apply, delete, action, $location, propertylist, damCfmComponentResourceType, damCfmComponentFileReferenceProp, damCfmComponentElementsProp, damCfmComponentVariationProp, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqDamCfmImplComponentComponentConfigImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqDamCfmImplComponentComponentConfigImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqDamCfmImplConfFeatureConfigImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQDAMCFMIMPLCONFFEATURECONFIGIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqDamCfmImplConfFeatureConfigImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray damCfmResourceTypesParam = message.body().getJsonArray("dam.cfm.resourceTypes");
                List<String> damCfmResourceTypes = (damCfmResourceTypesParam == null) ? null : Json.mapper.readValue(damCfmResourceTypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray damCfmReferencePropertiesParam = message.body().getJsonArray("dam.cfm.referenceProperties");
                List<String> damCfmReferenceProperties = (damCfmReferencePropertiesParam == null) ? null : Json.mapper.readValue(damCfmReferencePropertiesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqDamCfmImplConfFeatureConfigImpl(post, apply, delete, action, $location, propertylist, damCfmResourceTypes, damCfmReferenceProperties, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqDamCfmImplConfFeatureConfigImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqDamCfmImplConfFeatureConfigImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqDamCfmImplContentRewriterAssetProcessor
        vertx.eventBus().<JsonObject> consumer(COMADOBECQDAMCFMIMPLCONTENTREWRITERASSETPROCESSOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqDamCfmImplContentRewriterAssetProcessor";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pipelineTypeParam = message.body().getString("pipeline.type");
                String pipelineType = (pipelineTypeParam == null) ? null : pipelineTypeParam;
                service.comAdobeCqDamCfmImplContentRewriterAssetProcessor(post, apply, delete, action, $location, propertylist, pipelineType, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqDamCfmImplContentRewriterAssetProcessor");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqDamCfmImplContentRewriterAssetProcessor", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqDamCfmImplContentRewriterParRangeFilter
        vertx.eventBus().<JsonObject> consumer(COMADOBECQDAMCFMIMPLCONTENTREWRITERPARRANGEFILTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqDamCfmImplContentRewriterParRangeFilter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pipelineTypeParam = message.body().getString("pipeline.type");
                String pipelineType = (pipelineTypeParam == null) ? null : pipelineTypeParam;
                service.comAdobeCqDamCfmImplContentRewriterParRangeFilter(post, apply, delete, action, $location, propertylist, pipelineType, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqDamCfmImplContentRewriterParRangeFilter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqDamCfmImplContentRewriterParRangeFilter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqDamCfmImplContentRewriterPayloadFilter
        vertx.eventBus().<JsonObject> consumer(COMADOBECQDAMCFMIMPLCONTENTREWRITERPAYLOADFILTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqDamCfmImplContentRewriterPayloadFilter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pipelineTypeParam = message.body().getString("pipeline.type");
                String pipelineType = (pipelineTypeParam == null) ? null : pipelineTypeParam;
                service.comAdobeCqDamCfmImplContentRewriterPayloadFilter(post, apply, delete, action, $location, propertylist, pipelineType, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqDamCfmImplContentRewriterPayloadFilter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqDamCfmImplContentRewriterPayloadFilter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqDamDmProcessImagePTiffManagerImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQDAMDMPROCESSIMAGEPTIFFMANAGERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqDamDmProcessImagePTiffManagerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String maxMemoryParam = message.body().getString("maxMemory");
                Integer maxMemory = (maxMemoryParam == null) ? null : Json.mapper.readValue(maxMemoryParam, Integer.class);
                service.comAdobeCqDamDmProcessImagePTiffManagerImpl(post, apply, delete, action, $location, propertylist, maxMemory, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqDamDmProcessImagePTiffManagerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqDamDmProcessImagePTiffManagerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker
        vertx.eventBus().<JsonObject> consumer(COMADOBECQDAMIPSIMPLREPLICATIONTRIGGERREPLICATEONMODIFYWORKER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String dmreplicateonmodifyEnabledParam = message.body().getString("dmreplicateonmodify.enabled");
                Boolean dmreplicateonmodifyEnabled = (dmreplicateonmodifyEnabledParam == null) ? null : Json.mapper.readValue(dmreplicateonmodifyEnabledParam, Boolean.class);
                String dmreplicateonmodifyForcesyncdeletesParam = message.body().getString("dmreplicateonmodify.forcesyncdeletes");
                Boolean dmreplicateonmodifyForcesyncdeletes = (dmreplicateonmodifyForcesyncdeletesParam == null) ? null : Json.mapper.readValue(dmreplicateonmodifyForcesyncdeletesParam, Boolean.class);
                service.comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(post, apply, delete, action, $location, propertylist, dmreplicateonmodifyEnabled, dmreplicateonmodifyForcesyncdeletes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqDamMacSyncHelperImplMACSyncClientImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQDAMMACSYNCHELPERIMPLMACSYNCCLIENTIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqDamMacSyncHelperImplMACSyncClientImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String comAdobeDamMacSyncClientSoTimeoutParam = message.body().getString("com.adobe.dam.mac.sync.client.so.timeout");
                Integer comAdobeDamMacSyncClientSoTimeout = (comAdobeDamMacSyncClientSoTimeoutParam == null) ? null : Json.mapper.readValue(comAdobeDamMacSyncClientSoTimeoutParam, Integer.class);
                service.comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(post, apply, delete, action, $location, propertylist, comAdobeDamMacSyncClientSoTimeout, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqDamMacSyncHelperImplMACSyncClientImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqDamMacSyncHelperImplMACSyncClientImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqDamMacSyncImplDAMSyncServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQDAMMACSYNCIMPLDAMSYNCSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqDamMacSyncImplDAMSyncServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray comAdobeCqDamMacSyncDamsyncserviceRegisteredPathsParam = message.body().getJsonArray("com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths");
                List<String> comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths = (comAdobeCqDamMacSyncDamsyncserviceRegisteredPathsParam == null) ? null : Json.mapper.readValue(comAdobeCqDamMacSyncDamsyncserviceRegisteredPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String comAdobeCqDamMacSyncDamsyncserviceSyncRenditionsParam = message.body().getString("com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions");
                Boolean comAdobeCqDamMacSyncDamsyncserviceSyncRenditions = (comAdobeCqDamMacSyncDamsyncserviceSyncRenditionsParam == null) ? null : Json.mapper.readValue(comAdobeCqDamMacSyncDamsyncserviceSyncRenditionsParam, Boolean.class);
                String comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMsParam = message.body().getString("com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms");
                Integer comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs = (comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMsParam == null) ? null : Json.mapper.readValue(comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMsParam, Integer.class);
                String comAdobeCqDamMacSyncDamsyncservicePlatformParam = message.body().getString("com.adobe.cq.dam.mac.sync.damsyncservice.platform");
                String comAdobeCqDamMacSyncDamsyncservicePlatform = (comAdobeCqDamMacSyncDamsyncservicePlatformParam == null) ? null : comAdobeCqDamMacSyncDamsyncservicePlatformParam;
                service.comAdobeCqDamMacSyncImplDAMSyncServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths, comAdobeCqDamMacSyncDamsyncserviceSyncRenditions, comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs, comAdobeCqDamMacSyncDamsyncservicePlatform, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqDamMacSyncImplDAMSyncServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqDamMacSyncImplDAMSyncServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqDamProcessorNuiImplNuiAssetProcessor
        vertx.eventBus().<JsonObject> consumer(COMADOBECQDAMPROCESSORNUIIMPLNUIASSETPROCESSOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqDamProcessorNuiImplNuiAssetProcessor";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nuiEnabledParam = message.body().getString("nuiEnabled");
                Boolean nuiEnabled = (nuiEnabledParam == null) ? null : Json.mapper.readValue(nuiEnabledParam, Boolean.class);
                String nuiServiceUrlParam = message.body().getString("nuiServiceUrl");
                String nuiServiceUrl = (nuiServiceUrlParam == null) ? null : nuiServiceUrlParam;
                String nuiApiKeyParam = message.body().getString("nuiApiKey");
                String nuiApiKey = (nuiApiKeyParam == null) ? null : nuiApiKeyParam;
                service.comAdobeCqDamProcessorNuiImplNuiAssetProcessor(post, apply, delete, action, $location, propertylist, nuiEnabled, nuiServiceUrl, nuiApiKey, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqDamProcessorNuiImplNuiAssetProcessor");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqDamProcessorNuiImplNuiAssetProcessor", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqDamS7imagingImplIsImageServerComponent
        vertx.eventBus().<JsonObject> consumer(COMADOBECQDAMS7IMAGINGIMPLISIMAGESERVERCOMPONENT_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqDamS7imagingImplIsImageServerComponent";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String tcpPortParam = message.body().getString("TcpPort");
                String tcpPort = (tcpPortParam == null) ? null : tcpPortParam;
                String allowRemoteAccessParam = message.body().getString("AllowRemoteAccess");
                Boolean allowRemoteAccess = (allowRemoteAccessParam == null) ? null : Json.mapper.readValue(allowRemoteAccessParam, Boolean.class);
                String maxRenderRgnPixelsParam = message.body().getString("MaxRenderRgnPixels");
                String maxRenderRgnPixels = (maxRenderRgnPixelsParam == null) ? null : maxRenderRgnPixelsParam;
                String maxMessageSizeParam = message.body().getString("MaxMessageSize");
                String maxMessageSize = (maxMessageSizeParam == null) ? null : maxMessageSizeParam;
                String randomAccessUrlTimeoutParam = message.body().getString("RandomAccessUrlTimeout");
                Integer randomAccessUrlTimeout = (randomAccessUrlTimeoutParam == null) ? null : Json.mapper.readValue(randomAccessUrlTimeoutParam, Integer.class);
                String workerThreadsParam = message.body().getString("WorkerThreads");
                Integer workerThreads = (workerThreadsParam == null) ? null : Json.mapper.readValue(workerThreadsParam, Integer.class);
                service.comAdobeCqDamS7imagingImplIsImageServerComponent(post, apply, delete, action, $location, propertylist, tcpPort, allowRemoteAccess, maxRenderRgnPixels, maxMessageSize, randomAccessUrlTimeout, workerThreads, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqDamS7imagingImplIsImageServerComponent");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqDamS7imagingImplIsImageServerComponent", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqDamS7imagingImplPsPlatformServerServlet
        vertx.eventBus().<JsonObject> consumer(COMADOBECQDAMS7IMAGINGIMPLPSPLATFORMSERVERSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqDamS7imagingImplPsPlatformServerServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cacheEnableParam = message.body().getString("cache.enable");
                Boolean cacheEnable = (cacheEnableParam == null) ? null : Json.mapper.readValue(cacheEnableParam, Boolean.class);
                JsonArray cacheRootPathsParam = message.body().getJsonArray("cache.rootPaths");
                List<String> cacheRootPaths = (cacheRootPathsParam == null) ? null : Json.mapper.readValue(cacheRootPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cacheMaxSizeParam = message.body().getString("cache.maxSize");
                Integer cacheMaxSize = (cacheMaxSizeParam == null) ? null : Json.mapper.readValue(cacheMaxSizeParam, Integer.class);
                String cacheMaxEntriesParam = message.body().getString("cache.maxEntries");
                Integer cacheMaxEntries = (cacheMaxEntriesParam == null) ? null : Json.mapper.readValue(cacheMaxEntriesParam, Integer.class);
                service.comAdobeCqDamS7imagingImplPsPlatformServerServlet(post, apply, delete, action, $location, propertylist, cacheEnable, cacheRootPaths, cacheMaxSize, cacheMaxEntries, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqDamS7imagingImplPsPlatformServerServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqDamS7imagingImplPsPlatformServerServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqDamWebdavImplIoAssetIOHandler
        vertx.eventBus().<JsonObject> consumer(COMADOBECQDAMWEBDAVIMPLIOASSETIOHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqDamWebdavImplIoAssetIOHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String pathPrefixParam = message.body().getString("pathPrefix");
                String pathPrefix = (pathPrefixParam == null) ? null : pathPrefixParam;
                String createVersionParam = message.body().getString("createVersion");
                Boolean createVersion = (createVersionParam == null) ? null : Json.mapper.readValue(createVersionParam, Boolean.class);
                service.comAdobeCqDamWebdavImplIoAssetIOHandler(post, apply, delete, action, $location, propertylist, serviceRanking, pathPrefix, createVersion, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqDamWebdavImplIoAssetIOHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqDamWebdavImplIoAssetIOHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob
        vertx.eventBus().<JsonObject> consumer(COMADOBECQDAMWEBDAVIMPLIODAMWEBDAVVERSIONLINKINGJOB_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamWebdavVersionLinkingEnableParam = message.body().getString("cq.dam.webdav.version.linking.enable");
                Boolean cqDamWebdavVersionLinkingEnable = (cqDamWebdavVersionLinkingEnableParam == null) ? null : Json.mapper.readValue(cqDamWebdavVersionLinkingEnableParam, Boolean.class);
                String cqDamWebdavVersionLinkingSchedulerPeriodParam = message.body().getString("cq.dam.webdav.version.linking.scheduler.period");
                Integer cqDamWebdavVersionLinkingSchedulerPeriod = (cqDamWebdavVersionLinkingSchedulerPeriodParam == null) ? null : Json.mapper.readValue(cqDamWebdavVersionLinkingSchedulerPeriodParam, Integer.class);
                String cqDamWebdavVersionLinkingStagingTimeoutParam = message.body().getString("cq.dam.webdav.version.linking.staging.timeout");
                Integer cqDamWebdavVersionLinkingStagingTimeout = (cqDamWebdavVersionLinkingStagingTimeoutParam == null) ? null : Json.mapper.readValue(cqDamWebdavVersionLinkingStagingTimeoutParam, Integer.class);
                service.comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(post, apply, delete, action, $location, propertylist, cqDamWebdavVersionLinkingEnable, cqDamWebdavVersionLinkingSchedulerPeriod, cqDamWebdavVersionLinkingStagingTimeout, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqDamWebdavImplIoSpecialFilesHandler
        vertx.eventBus().<JsonObject> consumer(COMADOBECQDAMWEBDAVIMPLIOSPECIALFILESHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqDamWebdavImplIoSpecialFilesHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray comDayCqDamCoreImplIoSpecialFilesHandlerFilepattersParam = message.body().getJsonArray("com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters");
                List<String> comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters = (comDayCqDamCoreImplIoSpecialFilesHandlerFilepattersParam == null) ? null : Json.mapper.readValue(comDayCqDamCoreImplIoSpecialFilesHandlerFilepattersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqDamWebdavImplIoSpecialFilesHandler(post, apply, delete, action, $location, propertylist, comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqDamWebdavImplIoSpecialFilesHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqDamWebdavImplIoSpecialFilesHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqDeserfwImplDeserializationFirewallImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQDESERFWIMPLDESERIALIZATIONFIREWALLIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqDeserfwImplDeserializationFirewallImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray firewallDeserializationWhitelistParam = message.body().getJsonArray("firewall.deserialization.whitelist");
                List<String> firewallDeserializationWhitelist = (firewallDeserializationWhitelistParam == null) ? null : Json.mapper.readValue(firewallDeserializationWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray firewallDeserializationBlacklistParam = message.body().getJsonArray("firewall.deserialization.blacklist");
                List<String> firewallDeserializationBlacklist = (firewallDeserializationBlacklistParam == null) ? null : Json.mapper.readValue(firewallDeserializationBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String firewallDeserializationDiagnosticsParam = message.body().getString("firewall.deserialization.diagnostics");
                String firewallDeserializationDiagnostics = (firewallDeserializationDiagnosticsParam == null) ? null : firewallDeserializationDiagnosticsParam;
                service.comAdobeCqDeserfwImplDeserializationFirewallImpl(post, apply, delete, action, $location, propertylist, firewallDeserializationWhitelist, firewallDeserializationBlacklist, firewallDeserializationDiagnostics, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqDeserfwImplDeserializationFirewallImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqDeserfwImplDeserializationFirewallImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqDtmImplServiceDTMWebServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQDTMIMPLSERVICEDTMWEBSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqDtmImplServiceDTMWebServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String connectionTimeoutParam = message.body().getString("connection.timeout");
                Integer connectionTimeout = (connectionTimeoutParam == null) ? null : Json.mapper.readValue(connectionTimeoutParam, Integer.class);
                String socketTimeoutParam = message.body().getString("socket.timeout");
                Integer socketTimeout = (socketTimeoutParam == null) ? null : Json.mapper.readValue(socketTimeoutParam, Integer.class);
                service.comAdobeCqDtmImplServiceDTMWebServiceImpl(post, apply, delete, action, $location, propertylist, connectionTimeout, socketTimeout, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqDtmImplServiceDTMWebServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqDtmImplServiceDTMWebServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqDtmImplServletsDTMDeployHookServlet
        vertx.eventBus().<JsonObject> consumer(COMADOBECQDTMIMPLSERVLETSDTMDEPLOYHOOKSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqDtmImplServletsDTMDeployHookServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray dtmStagingIpWhitelistParam = message.body().getJsonArray("dtm.staging.ip.whitelist");
                List<String> dtmStagingIpWhitelist = (dtmStagingIpWhitelistParam == null) ? null : Json.mapper.readValue(dtmStagingIpWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray dtmProductionIpWhitelistParam = message.body().getJsonArray("dtm.production.ip.whitelist");
                List<String> dtmProductionIpWhitelist = (dtmProductionIpWhitelistParam == null) ? null : Json.mapper.readValue(dtmProductionIpWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqDtmImplServletsDTMDeployHookServlet(post, apply, delete, action, $location, propertylist, dtmStagingIpWhitelist, dtmProductionIpWhitelist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqDtmImplServletsDTMDeployHookServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqDtmImplServletsDTMDeployHookServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqDtmReactorImplServiceWebServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQDTMREACTORIMPLSERVICEWEBSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqDtmReactorImplServiceWebServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String endpointUriParam = message.body().getString("endpointUri");
                String endpointUri = (endpointUriParam == null) ? null : endpointUriParam;
                String connectionTimeoutParam = message.body().getString("connectionTimeout");
                Integer connectionTimeout = (connectionTimeoutParam == null) ? null : Json.mapper.readValue(connectionTimeoutParam, Integer.class);
                String socketTimeoutParam = message.body().getString("socketTimeout");
                Integer socketTimeout = (socketTimeoutParam == null) ? null : Json.mapper.readValue(socketTimeoutParam, Integer.class);
                service.comAdobeCqDtmReactorImplServiceWebServiceImpl(post, apply, delete, action, $location, propertylist, endpointUri, connectionTimeout, socketTimeout, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqDtmReactorImplServiceWebServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqDtmReactorImplServiceWebServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqExperiencelogImplExperienceLogConfigServlet
        vertx.eventBus().<JsonObject> consumer(COMADOBECQEXPERIENCELOGIMPLEXPERIENCELOGCONFIGSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqExperiencelogImplExperienceLogConfigServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                JsonArray disabledForGroupsParam = message.body().getJsonArray("disabledForGroups");
                List<String> disabledForGroups = (disabledForGroupsParam == null) ? null : Json.mapper.readValue(disabledForGroupsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqExperiencelogImplExperienceLogConfigServlet(post, apply, delete, action, $location, propertylist, enabled, disabledForGroups, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqExperiencelogImplExperienceLogConfigServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqExperiencelogImplExperienceLogConfigServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqHcContentPackagesHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBECQHCCONTENTPACKAGESHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqHcContentPackagesHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String hcNameParam = message.body().getString("hc.name");
                String hcName = (hcNameParam == null) ? null : hcNameParam;
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String hcMbeanNameParam = message.body().getString("hc.mbean.name");
                String hcMbeanName = (hcMbeanNameParam == null) ? null : hcMbeanNameParam;
                JsonArray packageNamesParam = message.body().getJsonArray("package.names");
                List<String> packageNames = (packageNamesParam == null) ? null : Json.mapper.readValue(packageNamesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqHcContentPackagesHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, packageNames, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqHcContentPackagesHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqHcContentPackagesHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqHistoryImplHistoryRequestFilter
        vertx.eventBus().<JsonObject> consumer(COMADOBECQHISTORYIMPLHISTORYREQUESTFILTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqHistoryImplHistoryRequestFilter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray historyRequestFilterExcludedSelectorsParam = message.body().getJsonArray("history.requestFilter.excludedSelectors");
                List<String> historyRequestFilterExcludedSelectors = (historyRequestFilterExcludedSelectorsParam == null) ? null : Json.mapper.readValue(historyRequestFilterExcludedSelectorsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray historyRequestFilterExcludedExtensionsParam = message.body().getJsonArray("history.requestFilter.excludedExtensions");
                List<String> historyRequestFilterExcludedExtensions = (historyRequestFilterExcludedExtensionsParam == null) ? null : Json.mapper.readValue(historyRequestFilterExcludedExtensionsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqHistoryImplHistoryRequestFilter(post, apply, delete, action, $location, propertylist, historyRequestFilterExcludedSelectors, historyRequestFilterExcludedExtensions, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqHistoryImplHistoryRequestFilter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqHistoryImplHistoryRequestFilter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqHistoryImplHistoryServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQHISTORYIMPLHISTORYSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqHistoryImplHistoryServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray historyServiceResourceTypesParam = message.body().getJsonArray("history.service.resourceTypes");
                List<String> historyServiceResourceTypes = (historyServiceResourceTypesParam == null) ? null : Json.mapper.readValue(historyServiceResourceTypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray historyServicePathFilterParam = message.body().getJsonArray("history.service.pathFilter");
                List<String> historyServicePathFilter = (historyServicePathFilterParam == null) ? null : Json.mapper.readValue(historyServicePathFilterParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqHistoryImplHistoryServiceImpl(post, apply, delete, action, $location, propertylist, historyServiceResourceTypes, historyServicePathFilter, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqHistoryImplHistoryServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqHistoryImplHistoryServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqInboxImplTypeproviderItemTypeProvider
        vertx.eventBus().<JsonObject> consumer(COMADOBECQINBOXIMPLTYPEPROVIDERITEMTYPEPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqInboxImplTypeproviderItemTypeProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray inboxImplTypeproviderRegistrypathsParam = message.body().getJsonArray("inbox.impl.typeprovider.registrypaths");
                List<String> inboxImplTypeproviderRegistrypaths = (inboxImplTypeproviderRegistrypathsParam == null) ? null : Json.mapper.readValue(inboxImplTypeproviderRegistrypathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray inboxImplTypeproviderLegacypathsParam = message.body().getJsonArray("inbox.impl.typeprovider.legacypaths");
                List<String> inboxImplTypeproviderLegacypaths = (inboxImplTypeproviderLegacypathsParam == null) ? null : Json.mapper.readValue(inboxImplTypeproviderLegacypathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String inboxImplTypeproviderDefaulturlFailureitemParam = message.body().getString("inbox.impl.typeprovider.defaulturl.failureitem");
                String inboxImplTypeproviderDefaulturlFailureitem = (inboxImplTypeproviderDefaulturlFailureitemParam == null) ? null : inboxImplTypeproviderDefaulturlFailureitemParam;
                String inboxImplTypeproviderDefaulturlWorkitemParam = message.body().getString("inbox.impl.typeprovider.defaulturl.workitem");
                String inboxImplTypeproviderDefaulturlWorkitem = (inboxImplTypeproviderDefaulturlWorkitemParam == null) ? null : inboxImplTypeproviderDefaulturlWorkitemParam;
                String inboxImplTypeproviderDefaulturlTaskParam = message.body().getString("inbox.impl.typeprovider.defaulturl.task");
                String inboxImplTypeproviderDefaulturlTask = (inboxImplTypeproviderDefaulturlTaskParam == null) ? null : inboxImplTypeproviderDefaulturlTaskParam;
                service.comAdobeCqInboxImplTypeproviderItemTypeProvider(post, apply, delete, action, $location, propertylist, inboxImplTypeproviderRegistrypaths, inboxImplTypeproviderLegacypaths, inboxImplTypeproviderDefaulturlFailureitem, inboxImplTypeproviderDefaulturlWorkitem, inboxImplTypeproviderDefaulturlTask, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqInboxImplTypeproviderItemTypeProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqInboxImplTypeproviderItemTypeProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqProjectsImplServletProjectImageServlet
        vertx.eventBus().<JsonObject> consumer(COMADOBECQPROJECTSIMPLSERVLETPROJECTIMAGESERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqProjectsImplServletProjectImageServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String imageQualityParam = message.body().getString("image.quality");
                String imageQuality = (imageQualityParam == null) ? null : imageQualityParam;
                String imageSupportedResolutionsParam = message.body().getString("image.supported.resolutions");
                String imageSupportedResolutions = (imageSupportedResolutionsParam == null) ? null : imageSupportedResolutionsParam;
                service.comAdobeCqProjectsImplServletProjectImageServlet(post, apply, delete, action, $location, propertylist, imageQuality, imageSupportedResolutions, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqProjectsImplServletProjectImageServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqProjectsImplServletProjectImageServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqProjectsPurgeScheduler
        vertx.eventBus().<JsonObject> consumer(COMADOBECQPROJECTSPURGESCHEDULER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqProjectsPurgeScheduler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String scheduledpurgeNameParam = message.body().getString("scheduledpurge.name");
                String scheduledpurgeName = (scheduledpurgeNameParam == null) ? null : scheduledpurgeNameParam;
                String scheduledpurgePurgeActiveParam = message.body().getString("scheduledpurge.purgeActive");
                Boolean scheduledpurgePurgeActive = (scheduledpurgePurgeActiveParam == null) ? null : Json.mapper.readValue(scheduledpurgePurgeActiveParam, Boolean.class);
                JsonArray scheduledpurgeTemplatesParam = message.body().getJsonArray("scheduledpurge.templates");
                List<String> scheduledpurgeTemplates = (scheduledpurgeTemplatesParam == null) ? null : Json.mapper.readValue(scheduledpurgeTemplatesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String scheduledpurgePurgeGroupsParam = message.body().getString("scheduledpurge.purgeGroups");
                Boolean scheduledpurgePurgeGroups = (scheduledpurgePurgeGroupsParam == null) ? null : Json.mapper.readValue(scheduledpurgePurgeGroupsParam, Boolean.class);
                String scheduledpurgePurgeAssetsParam = message.body().getString("scheduledpurge.purgeAssets");
                Boolean scheduledpurgePurgeAssets = (scheduledpurgePurgeAssetsParam == null) ? null : Json.mapper.readValue(scheduledpurgePurgeAssetsParam, Boolean.class);
                String scheduledpurgeTerminateRunningWorkflowsParam = message.body().getString("scheduledpurge.terminateRunningWorkflows");
                Boolean scheduledpurgeTerminateRunningWorkflows = (scheduledpurgeTerminateRunningWorkflowsParam == null) ? null : Json.mapper.readValue(scheduledpurgeTerminateRunningWorkflowsParam, Boolean.class);
                String scheduledpurgeDaysoldParam = message.body().getString("scheduledpurge.daysold");
                Integer scheduledpurgeDaysold = (scheduledpurgeDaysoldParam == null) ? null : Json.mapper.readValue(scheduledpurgeDaysoldParam, Integer.class);
                String scheduledpurgeSaveThresholdParam = message.body().getString("scheduledpurge.saveThreshold");
                Integer scheduledpurgeSaveThreshold = (scheduledpurgeSaveThresholdParam == null) ? null : Json.mapper.readValue(scheduledpurgeSaveThresholdParam, Integer.class);
                service.comAdobeCqProjectsPurgeScheduler(post, apply, delete, action, $location, propertylist, scheduledpurgeName, scheduledpurgePurgeActive, scheduledpurgeTemplates, scheduledpurgePurgeGroups, scheduledpurgePurgeAssets, scheduledpurgeTerminateRunningWorkflows, scheduledpurgeDaysold, scheduledpurgeSaveThreshold, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqProjectsPurgeScheduler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqProjectsPurgeScheduler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqScheduledExporterImplScheduledExporterImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSCHEDULEDEXPORTERIMPLSCHEDULEDEXPORTERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqScheduledExporterImplScheduledExporterImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray includePathsParam = message.body().getJsonArray("include.paths");
                List<String> includePaths = (includePathsParam == null) ? null : Json.mapper.readValue(includePathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String exporterUserParam = message.body().getString("exporter.user");
                String exporterUser = (exporterUserParam == null) ? null : exporterUserParam;
                service.comAdobeCqScheduledExporterImplScheduledExporterImpl(post, apply, delete, action, $location, propertylist, includePaths, exporterUser, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqScheduledExporterImplScheduledExporterImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqScheduledExporterImplScheduledExporterImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSCREENSANALYTICSIMPLSCREENSANALYTICSSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String comAdobeCqScreensAnalyticsImplUrlParam = message.body().getString("com.adobe.cq.screens.analytics.impl.url");
                String comAdobeCqScreensAnalyticsImplUrl = (comAdobeCqScreensAnalyticsImplUrlParam == null) ? null : comAdobeCqScreensAnalyticsImplUrlParam;
                String comAdobeCqScreensAnalyticsImplApikeyParam = message.body().getString("com.adobe.cq.screens.analytics.impl.apikey");
                String comAdobeCqScreensAnalyticsImplApikey = (comAdobeCqScreensAnalyticsImplApikeyParam == null) ? null : comAdobeCqScreensAnalyticsImplApikeyParam;
                String comAdobeCqScreensAnalyticsImplProjectParam = message.body().getString("com.adobe.cq.screens.analytics.impl.project");
                String comAdobeCqScreensAnalyticsImplProject = (comAdobeCqScreensAnalyticsImplProjectParam == null) ? null : comAdobeCqScreensAnalyticsImplProjectParam;
                String comAdobeCqScreensAnalyticsImplEnvironmentParam = message.body().getString("com.adobe.cq.screens.analytics.impl.environment");
                String comAdobeCqScreensAnalyticsImplEnvironment = (comAdobeCqScreensAnalyticsImplEnvironmentParam == null) ? null : comAdobeCqScreensAnalyticsImplEnvironmentParam;
                String comAdobeCqScreensAnalyticsImplSendFrequencyParam = message.body().getString("com.adobe.cq.screens.analytics.impl.sendFrequency");
                Integer comAdobeCqScreensAnalyticsImplSendFrequency = (comAdobeCqScreensAnalyticsImplSendFrequencyParam == null) ? null : Json.mapper.readValue(comAdobeCqScreensAnalyticsImplSendFrequencyParam, Integer.class);
                service.comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqScreensAnalyticsImplUrl, comAdobeCqScreensAnalyticsImplApikey, comAdobeCqScreensAnalyticsImplProject, comAdobeCqScreensAnalyticsImplEnvironment, comAdobeCqScreensAnalyticsImplSendFrequency, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqScreensDeviceImplDeviceService
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSCREENSDEVICEIMPLDEVICESERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqScreensDeviceImplDeviceService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String comAdobeAemScreensPlayerPingfrequencyParam = message.body().getString("com.adobe.aem.screens.player.pingfrequency");
                Integer comAdobeAemScreensPlayerPingfrequency = (comAdobeAemScreensPlayerPingfrequencyParam == null) ? null : Json.mapper.readValue(comAdobeAemScreensPlayerPingfrequencyParam, Integer.class);
                String comAdobeAemScreensDevicePaswordSpecialcharsParam = message.body().getString("com.adobe.aem.screens.device.pasword.specialchars");
                String comAdobeAemScreensDevicePaswordSpecialchars = (comAdobeAemScreensDevicePaswordSpecialcharsParam == null) ? null : comAdobeAemScreensDevicePaswordSpecialcharsParam;
                String comAdobeAemScreensDevicePaswordMinlowercasecharsParam = message.body().getString("com.adobe.aem.screens.device.pasword.minlowercasechars");
                Integer comAdobeAemScreensDevicePaswordMinlowercasechars = (comAdobeAemScreensDevicePaswordMinlowercasecharsParam == null) ? null : Json.mapper.readValue(comAdobeAemScreensDevicePaswordMinlowercasecharsParam, Integer.class);
                String comAdobeAemScreensDevicePaswordMinuppercasecharsParam = message.body().getString("com.adobe.aem.screens.device.pasword.minuppercasechars");
                Integer comAdobeAemScreensDevicePaswordMinuppercasechars = (comAdobeAemScreensDevicePaswordMinuppercasecharsParam == null) ? null : Json.mapper.readValue(comAdobeAemScreensDevicePaswordMinuppercasecharsParam, Integer.class);
                String comAdobeAemScreensDevicePaswordMinnumbercharsParam = message.body().getString("com.adobe.aem.screens.device.pasword.minnumberchars");
                Integer comAdobeAemScreensDevicePaswordMinnumberchars = (comAdobeAemScreensDevicePaswordMinnumbercharsParam == null) ? null : Json.mapper.readValue(comAdobeAemScreensDevicePaswordMinnumbercharsParam, Integer.class);
                String comAdobeAemScreensDevicePaswordMinspecialcharsParam = message.body().getString("com.adobe.aem.screens.device.pasword.minspecialchars");
                Integer comAdobeAemScreensDevicePaswordMinspecialchars = (comAdobeAemScreensDevicePaswordMinspecialcharsParam == null) ? null : Json.mapper.readValue(comAdobeAemScreensDevicePaswordMinspecialcharsParam, Integer.class);
                String comAdobeAemScreensDevicePaswordMinlengthParam = message.body().getString("com.adobe.aem.screens.device.pasword.minlength");
                Integer comAdobeAemScreensDevicePaswordMinlength = (comAdobeAemScreensDevicePaswordMinlengthParam == null) ? null : Json.mapper.readValue(comAdobeAemScreensDevicePaswordMinlengthParam, Integer.class);
                service.comAdobeCqScreensDeviceImplDeviceService(post, apply, delete, action, $location, propertylist, comAdobeAemScreensPlayerPingfrequency, comAdobeAemScreensDevicePaswordSpecialchars, comAdobeAemScreensDevicePaswordMinlowercasechars, comAdobeAemScreensDevicePaswordMinuppercasechars, comAdobeAemScreensDevicePaswordMinnumberchars, comAdobeAemScreensDevicePaswordMinspecialchars, comAdobeAemScreensDevicePaswordMinlength, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqScreensDeviceImplDeviceService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqScreensDeviceImplDeviceService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSCREENSDEVICEREGISTRATIONIMPLREGISTRATIONSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String deviceRegistrationTimeoutParam = message.body().getString("deviceRegistrationTimeout");
                Integer deviceRegistrationTimeout = (deviceRegistrationTimeoutParam == null) ? null : Json.mapper.readValue(deviceRegistrationTimeoutParam, Integer.class);
                service.comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(post, apply, delete, action, $location, propertylist, deviceRegistrationTimeout, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqScreensImplHandlerChannelsUpdateHandler
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSCREENSIMPLHANDLERCHANNELSUPDATEHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqScreensImplHandlerChannelsUpdateHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqPagesupdatehandlerImageresourcetypesParam = message.body().getJsonArray("cq.pagesupdatehandler.imageresourcetypes");
                List<String> cqPagesupdatehandlerImageresourcetypes = (cqPagesupdatehandlerImageresourcetypesParam == null) ? null : Json.mapper.readValue(cqPagesupdatehandlerImageresourcetypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqPagesupdatehandlerProductresourcetypesParam = message.body().getJsonArray("cq.pagesupdatehandler.productresourcetypes");
                List<String> cqPagesupdatehandlerProductresourcetypes = (cqPagesupdatehandlerProductresourcetypesParam == null) ? null : Json.mapper.readValue(cqPagesupdatehandlerProductresourcetypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqPagesupdatehandlerVideoresourcetypesParam = message.body().getJsonArray("cq.pagesupdatehandler.videoresourcetypes");
                List<String> cqPagesupdatehandlerVideoresourcetypes = (cqPagesupdatehandlerVideoresourcetypesParam == null) ? null : Json.mapper.readValue(cqPagesupdatehandlerVideoresourcetypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqPagesupdatehandlerDynamicsequenceresourcetypesParam = message.body().getJsonArray("cq.pagesupdatehandler.dynamicsequenceresourcetypes");
                List<String> cqPagesupdatehandlerDynamicsequenceresourcetypes = (cqPagesupdatehandlerDynamicsequenceresourcetypesParam == null) ? null : Json.mapper.readValue(cqPagesupdatehandlerDynamicsequenceresourcetypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqPagesupdatehandlerPreviewmodepathsParam = message.body().getJsonArray("cq.pagesupdatehandler.previewmodepaths");
                List<String> cqPagesupdatehandlerPreviewmodepaths = (cqPagesupdatehandlerPreviewmodepathsParam == null) ? null : Json.mapper.readValue(cqPagesupdatehandlerPreviewmodepathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqScreensImplHandlerChannelsUpdateHandler(post, apply, delete, action, $location, propertylist, cqPagesupdatehandlerImageresourcetypes, cqPagesupdatehandlerProductresourcetypes, cqPagesupdatehandlerVideoresourcetypes, cqPagesupdatehandlerDynamicsequenceresourcetypes, cqPagesupdatehandlerPreviewmodepaths, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqScreensImplHandlerChannelsUpdateHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqScreensImplHandlerChannelsUpdateHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSCREENSIMPLJOBSDISTRIBUTEDDEVICESSTATIUPDATEJOB_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String schedulerExpressionParam = message.body().getString("scheduler.expression");
                String schedulerExpression = (schedulerExpressionParam == null) ? null : schedulerExpressionParam;
                service.comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(post, apply, delete, action, $location, propertylist, schedulerExpression, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSCREENSIMPLREMOTEIMPLDISTRIBUTEDHTTPCLIENTIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String comAdobeAemScreensImplRemoteRequestTimeoutParam = message.body().getString("com.adobe.aem.screens.impl.remote.request_timeout");
                Integer comAdobeAemScreensImplRemoteRequestTimeout = (comAdobeAemScreensImplRemoteRequestTimeoutParam == null) ? null : Json.mapper.readValue(comAdobeAemScreensImplRemoteRequestTimeoutParam, Integer.class);
                service.comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(post, apply, delete, action, $location, propertylist, comAdobeAemScreensImplRemoteRequestTimeout, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqScreensImplScreensChannelPostProcessor
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSCREENSIMPLSCREENSCHANNELPOSTPROCESSOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqScreensImplScreensChannelPostProcessor";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray screensChannelsPropertiesToRemoveParam = message.body().getJsonArray("screens.channels.properties.to.remove");
                List<String> screensChannelsPropertiesToRemove = (screensChannelsPropertiesToRemoveParam == null) ? null : Json.mapper.readValue(screensChannelsPropertiesToRemoveParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqScreensImplScreensChannelPostProcessor(post, apply, delete, action, $location, propertylist, screensChannelsPropertiesToRemove, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqScreensImplScreensChannelPostProcessor");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqScreensImplScreensChannelPostProcessor", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSCREENSMONITORINGIMPLSCREENSMONITORINGSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPathParam = message.body().getJsonArray("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath");
                List<String> comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath = (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPathParam == null) ? null : Json.mapper.readValue(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPathParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequencyParam = message.body().getString("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency");
                String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency = (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequencyParam == null) ? null : comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequencyParam;
                String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeoutParam = message.body().getString("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout");
                Integer comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout = (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeoutParam == null) ? null : Json.mapper.readValue(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeoutParam, Integer.class);
                String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipientsParam = message.body().getString("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients");
                String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients = (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipientsParam == null) ? null : comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipientsParam;
                String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserverParam = message.body().getString("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver");
                String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver = (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserverParam == null) ? null : comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserverParam;
                String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpportParam = message.body().getString("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport");
                Integer comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport = (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpportParam == null) ? null : Json.mapper.readValue(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpportParam, Integer.class);
                String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetlsParam = message.body().getString("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls");
                Boolean comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls = (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetlsParam == null) ? null : Json.mapper.readValue(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetlsParam, Boolean.class);
                String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsernameParam = message.body().getString("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username");
                String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername = (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsernameParam == null) ? null : comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsernameParam;
                String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPasswordParam = message.body().getString("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password");
                String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword = (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPasswordParam == null) ? null : comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPasswordParam;
                service.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqScreensMqActivemqImplArtemisJMSProvider
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSCREENSMQACTIVEMQIMPLARTEMISJMSPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqScreensMqActivemqImplArtemisJMSProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String globalSizeParam = message.body().getString("global.size");
                Integer globalSize = (globalSizeParam == null) ? null : Json.mapper.readValue(globalSizeParam, Integer.class);
                String maxDiskUsageParam = message.body().getString("max.disk.usage");
                Integer maxDiskUsage = (maxDiskUsageParam == null) ? null : Json.mapper.readValue(maxDiskUsageParam, Integer.class);
                String persistenceEnabledParam = message.body().getString("persistence.enabled");
                Boolean persistenceEnabled = (persistenceEnabledParam == null) ? null : Json.mapper.readValue(persistenceEnabledParam, Boolean.class);
                String threadPoolMaxSizeParam = message.body().getString("thread.pool.max.size");
                Integer threadPoolMaxSize = (threadPoolMaxSizeParam == null) ? null : Json.mapper.readValue(threadPoolMaxSizeParam, Integer.class);
                String scheduledThreadPoolMaxSizeParam = message.body().getString("scheduled.thread.pool.max.size");
                Integer scheduledThreadPoolMaxSize = (scheduledThreadPoolMaxSizeParam == null) ? null : Json.mapper.readValue(scheduledThreadPoolMaxSizeParam, Integer.class);
                String gracefulShutdownTimeoutParam = message.body().getString("graceful.shutdown.timeout");
                Integer gracefulShutdownTimeout = (gracefulShutdownTimeoutParam == null) ? null : Json.mapper.readValue(gracefulShutdownTimeoutParam, Integer.class);
                JsonArray queuesParam = message.body().getJsonArray("queues");
                List<String> queues = (queuesParam == null) ? null : Json.mapper.readValue(queuesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray topicsParam = message.body().getJsonArray("topics");
                List<String> topics = (topicsParam == null) ? null : Json.mapper.readValue(topicsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String addressesMaxDeliveryAttemptsParam = message.body().getString("addresses.max.delivery.attempts");
                Integer addressesMaxDeliveryAttempts = (addressesMaxDeliveryAttemptsParam == null) ? null : Json.mapper.readValue(addressesMaxDeliveryAttemptsParam, Integer.class);
                String addressesExpiryDelayParam = message.body().getString("addresses.expiry.delay");
                Integer addressesExpiryDelay = (addressesExpiryDelayParam == null) ? null : Json.mapper.readValue(addressesExpiryDelayParam, Integer.class);
                String addressesAddressFullMessagePolicyParam = message.body().getString("addresses.address.full.message.policy");
                String addressesAddressFullMessagePolicy = (addressesAddressFullMessagePolicyParam == null) ? null : addressesAddressFullMessagePolicyParam;
                String addressesMaxSizeBytesParam = message.body().getString("addresses.max.size.bytes");
                Integer addressesMaxSizeBytes = (addressesMaxSizeBytesParam == null) ? null : Json.mapper.readValue(addressesMaxSizeBytesParam, Integer.class);
                String addressesPageSizeBytesParam = message.body().getString("addresses.page.size.bytes");
                Integer addressesPageSizeBytes = (addressesPageSizeBytesParam == null) ? null : Json.mapper.readValue(addressesPageSizeBytesParam, Integer.class);
                String addressesPageCacheMaxSizeParam = message.body().getString("addresses.page.cache.max.size");
                Integer addressesPageCacheMaxSize = (addressesPageCacheMaxSizeParam == null) ? null : Json.mapper.readValue(addressesPageCacheMaxSizeParam, Integer.class);
                String clusterUserParam = message.body().getString("cluster.user");
                String clusterUser = (clusterUserParam == null) ? null : clusterUserParam;
                String clusterPasswordParam = message.body().getString("cluster.password");
                String clusterPassword = (clusterPasswordParam == null) ? null : clusterPasswordParam;
                String clusterCallTimeoutParam = message.body().getString("cluster.call.timeout");
                Integer clusterCallTimeout = (clusterCallTimeoutParam == null) ? null : Json.mapper.readValue(clusterCallTimeoutParam, Integer.class);
                String clusterCallFailoverTimeoutParam = message.body().getString("cluster.call.failover.timeout");
                Integer clusterCallFailoverTimeout = (clusterCallFailoverTimeoutParam == null) ? null : Json.mapper.readValue(clusterCallFailoverTimeoutParam, Integer.class);
                String clusterClientFailureCheckPeriodParam = message.body().getString("cluster.client.failure.check.period");
                Integer clusterClientFailureCheckPeriod = (clusterClientFailureCheckPeriodParam == null) ? null : Json.mapper.readValue(clusterClientFailureCheckPeriodParam, Integer.class);
                String clusterNotificationAttemptsParam = message.body().getString("cluster.notification.attempts");
                Integer clusterNotificationAttempts = (clusterNotificationAttemptsParam == null) ? null : Json.mapper.readValue(clusterNotificationAttemptsParam, Integer.class);
                String clusterNotificationIntervalParam = message.body().getString("cluster.notification.interval");
                Integer clusterNotificationInterval = (clusterNotificationIntervalParam == null) ? null : Json.mapper.readValue(clusterNotificationIntervalParam, Integer.class);
                String idCacheSizeParam = message.body().getString("id.cache.size");
                Integer idCacheSize = (idCacheSizeParam == null) ? null : Json.mapper.readValue(idCacheSizeParam, Integer.class);
                String clusterConfirmationWindowSizeParam = message.body().getString("cluster.confirmation.window.size");
                Integer clusterConfirmationWindowSize = (clusterConfirmationWindowSizeParam == null) ? null : Json.mapper.readValue(clusterConfirmationWindowSizeParam, Integer.class);
                String clusterConnectionTtlParam = message.body().getString("cluster.connection.ttl");
                Integer clusterConnectionTtl = (clusterConnectionTtlParam == null) ? null : Json.mapper.readValue(clusterConnectionTtlParam, Integer.class);
                String clusterDuplicateDetectionParam = message.body().getString("cluster.duplicate.detection");
                Boolean clusterDuplicateDetection = (clusterDuplicateDetectionParam == null) ? null : Json.mapper.readValue(clusterDuplicateDetectionParam, Boolean.class);
                String clusterInitialConnectAttemptsParam = message.body().getString("cluster.initial.connect.attempts");
                Integer clusterInitialConnectAttempts = (clusterInitialConnectAttemptsParam == null) ? null : Json.mapper.readValue(clusterInitialConnectAttemptsParam, Integer.class);
                String clusterMaxRetryIntervalParam = message.body().getString("cluster.max.retry.interval");
                Integer clusterMaxRetryInterval = (clusterMaxRetryIntervalParam == null) ? null : Json.mapper.readValue(clusterMaxRetryIntervalParam, Integer.class);
                String clusterMinLargeMessageSizeParam = message.body().getString("cluster.min.large.message.size");
                Integer clusterMinLargeMessageSize = (clusterMinLargeMessageSizeParam == null) ? null : Json.mapper.readValue(clusterMinLargeMessageSizeParam, Integer.class);
                String clusterProducerWindowSizeParam = message.body().getString("cluster.producer.window.size");
                Integer clusterProducerWindowSize = (clusterProducerWindowSizeParam == null) ? null : Json.mapper.readValue(clusterProducerWindowSizeParam, Integer.class);
                String clusterReconnectAttemptsParam = message.body().getString("cluster.reconnect.attempts");
                Integer clusterReconnectAttempts = (clusterReconnectAttemptsParam == null) ? null : Json.mapper.readValue(clusterReconnectAttemptsParam, Integer.class);
                String clusterRetryIntervalParam = message.body().getString("cluster.retry.interval");
                Integer clusterRetryInterval = (clusterRetryIntervalParam == null) ? null : Json.mapper.readValue(clusterRetryIntervalParam, Integer.class);
                String clusterRetryIntervalMultiplierParam = message.body().getString("cluster.retry.interval.multiplier");
                BigDecimal clusterRetryIntervalMultiplier = (clusterRetryIntervalMultiplierParam == null) ? null : Json.mapper.readValue(clusterRetryIntervalMultiplierParam, BigDecimal.class);
                service.comAdobeCqScreensMqActivemqImplArtemisJMSProvider(post, apply, delete, action, $location, propertylist, serviceRanking, globalSize, maxDiskUsage, persistenceEnabled, threadPoolMaxSize, scheduledThreadPoolMaxSize, gracefulShutdownTimeout, queues, topics, addressesMaxDeliveryAttempts, addressesExpiryDelay, addressesAddressFullMessagePolicy, addressesMaxSizeBytes, addressesPageSizeBytes, addressesPageCacheMaxSize, clusterUser, clusterPassword, clusterCallTimeout, clusterCallFailoverTimeout, clusterClientFailureCheckPeriod, clusterNotificationAttempts, clusterNotificationInterval, idCacheSize, clusterConfirmationWindowSize, clusterConnectionTtl, clusterDuplicateDetection, clusterInitialConnectAttempts, clusterMaxRetryInterval, clusterMinLargeMessageSize, clusterProducerWindowSize, clusterReconnectAttempts, clusterRetryInterval, clusterRetryIntervalMultiplier, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqScreensMqActivemqImplArtemisJMSProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqScreensMqActivemqImplArtemisJMSProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSCREENSOFFLINECONTENTIMPLBULKOFFLINEUPDATESERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPathParam = message.body().getJsonArray("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath");
                List<String> comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath = (comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPathParam == null) ? null : Json.mapper.readValue(comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPathParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequencyParam = message.body().getString("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency");
                String comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency = (comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequencyParam == null) ? null : comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequencyParam;
                service.comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSCREENSOFFLINECONTENTIMPLOFFLINECONTENTSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String disableSmartSyncParam = message.body().getString("disableSmartSync");
                Boolean disableSmartSync = (disableSmartSyncParam == null) ? null : Json.mapper.readValue(disableSmartSyncParam, Boolean.class);
                service.comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(post, apply, delete, action, $location, propertylist, disableSmartSync, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqScreensSegmentationImplSegmentationFeatureFlag
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSCREENSSEGMENTATIONIMPLSEGMENTATIONFEATUREFLAG_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqScreensSegmentationImplSegmentationFeatureFlag";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enableDataTriggeredContentParam = message.body().getString("enableDataTriggeredContent");
                Boolean enableDataTriggeredContent = (enableDataTriggeredContentParam == null) ? null : Json.mapper.readValue(enableDataTriggeredContentParam, Boolean.class);
                service.comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(post, apply, delete, action, $location, propertylist, enableDataTriggeredContent, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqScreensSegmentationImplSegmentationFeatureFlag");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqScreensSegmentationImplSegmentationFeatureFlag", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSECURITYHCBUNDLESIMPLHTMLLIBRARYMANAGERCONFIGHEALTHCH_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(post, apply, delete, action, $location, propertylist, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSECURITYHCBUNDLESIMPLWCMFILTERHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSECURITYHCDISPATCHERIMPLDISPATCHERACCESSHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String dispatcherAddressParam = message.body().getString("dispatcher.address");
                String dispatcherAddress = (dispatcherAddressParam == null) ? null : dispatcherAddressParam;
                JsonArray dispatcherFilterAllowedParam = message.body().getJsonArray("dispatcher.filter.allowed");
                List<String> dispatcherFilterAllowed = (dispatcherFilterAllowedParam == null) ? null : Json.mapper.readValue(dispatcherFilterAllowedParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray dispatcherFilterBlockedParam = message.body().getJsonArray("dispatcher.filter.blocked");
                List<String> dispatcherFilterBlocked = (dispatcherFilterBlockedParam == null) ? null : Json.mapper.readValue(dispatcherFilterBlockedParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, dispatcherAddress, dispatcherFilterAllowed, dispatcherFilterBlocked, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSECURITYHCPACKAGESIMPLEXAMPLECONTENTHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSECURITYHCWEBSERVERIMPLCLICKJACKINGHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String webserverAddressParam = message.body().getString("webserver.address");
                String webserverAddress = (webserverAddressParam == null) ? null : webserverAddressParam;
                service.comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, webserverAddress, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialAccountverificationImplAccountManagementConfigIm
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALACCOUNTVERIFICATIONIMPLACCOUNTMANAGEMENTCONFIGIM_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialAccountverificationImplAccountManagementConfigIm";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enableParam = message.body().getString("enable");
                Boolean enable = (enableParam == null) ? null : Json.mapper.readValue(enableParam, Boolean.class);
                String ttl1Param = message.body().getString("ttl1");
                Integer ttl1 = (ttl1Param == null) ? null : Json.mapper.readValue(ttl1Param, Integer.class);
                String ttl2Param = message.body().getString("ttl2");
                Integer ttl2 = (ttl2Param == null) ? null : Json.mapper.readValue(ttl2Param, Integer.class);
                service.comAdobeCqSocialAccountverificationImplAccountManagementConfigIm(post, apply, delete, action, $location, propertylist, enable, ttl1, ttl2, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialAccountverificationImplAccountManagementConfigIm");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialAccountverificationImplAccountManagementConfigIm", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALACTIVITYSTREAMSCLIENTIMPLSOCIALACTIVITYCOMPONEN_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String priorityParam = message.body().getString("priority");
                Integer priority = (priorityParam == null) ? null : Json.mapper.readValue(priorityParam, Integer.class);
                service.comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(post, apply, delete, action, $location, propertylist, priority, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALACTIVITYSTREAMSCLIENTIMPLSOCIALACTIVITYSTREAMCO_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String priorityParam = message.body().getString("priority");
                Integer priority = (priorityParam == null) ? null : Json.mapper.readValue(priorityParam, Integer.class);
                service.comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(post, apply, delete, action, $location, propertylist, priority, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALACTIVITYSTREAMSLISTENERIMPLEVENTLISTENERHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String eventTopicsParam = message.body().getString("event.topics");
                String eventTopics = (eventTopicsParam == null) ? null : eventTopicsParam;
                String eventFilterParam = message.body().getString("event.filter");
                String eventFilter = (eventFilterParam == null) ? null : eventFilterParam;
                service.comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialActivitystreamsListenerImplModerationEventExten
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALACTIVITYSTREAMSLISTENERIMPLMODERATIONEVENTEXTEN_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialActivitystreamsListenerImplModerationEventExten";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String acceptedParam = message.body().getString("accepted");
                Boolean accepted = (acceptedParam == null) ? null : Json.mapper.readValue(acceptedParam, Boolean.class);
                String rankedParam = message.body().getString("ranked");
                Integer ranked = (rankedParam == null) ? null : Json.mapper.readValue(rankedParam, Integer.class);
                service.comAdobeCqSocialActivitystreamsListenerImplModerationEventExten(post, apply, delete, action, $location, propertylist, accepted, ranked, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialActivitystreamsListenerImplModerationEventExten");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialActivitystreamsListenerImplModerationEventExten", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALACTIVITYSTREAMSLISTENERIMPLRATINGEVENTACTIVITYS_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String rankingParam = message.body().getString("ranking");
                Integer ranking = (rankingParam == null) ? null : Json.mapper.readValue(rankingParam, Integer.class);
                String enableParam = message.body().getString("enable");
                Boolean enable = (enableParam == null) ? null : Json.mapper.readValue(enableParam, Boolean.class);
                service.comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(post, apply, delete, action, $location, propertylist, ranking, enable, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALACTIVITYSTREAMSLISTENERIMPLRESOURCEACTIVITYSTRE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String streamPathParam = message.body().getString("streamPath");
                String streamPath = (streamPathParam == null) ? null : streamPathParam;
                String streamNameParam = message.body().getString("streamName");
                String streamName = (streamNameParam == null) ? null : streamNameParam;
                service.comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(post, apply, delete, action, $location, propertylist, streamPath, streamName, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCALENDARCLIENTENDPOINTSIMPLCALENDAROPERATIONSI_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String maxRetryParam = message.body().getString("MaxRetry");
                Integer maxRetry = (maxRetryParam == null) ? null : Json.mapper.readValue(maxRetryParam, Integer.class);
                JsonArray fieldWhitelistParam = message.body().getJsonArray("fieldWhitelist");
                List<String> fieldWhitelist = (fieldWhitelistParam == null) ? null : Json.mapper.readValue(fieldWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray attachmentTypeBlacklistParam = message.body().getJsonArray("attachmentTypeBlacklist");
                List<String> attachmentTypeBlacklist = (attachmentTypeBlacklistParam == null) ? null : Json.mapper.readValue(attachmentTypeBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(post, apply, delete, action, $location, propertylist, maxRetry, fieldWhitelist, attachmentTypeBlacklist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCALENDARCLIENTOPERATIONEXTENSIONSEVENTATTACHMEN_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String attachmentTypeBlacklistParam = message.body().getString("attachmentTypeBlacklist");
                String attachmentTypeBlacklist = (attachmentTypeBlacklistParam == null) ? null : attachmentTypeBlacklistParam;
                String extensionOrderParam = message.body().getString("extension.order");
                Integer extensionOrder = (extensionOrderParam == null) ? null : Json.mapper.readValue(extensionOrderParam, Integer.class);
                service.comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(post, apply, delete, action, $location, propertylist, attachmentTypeBlacklist, extensionOrder, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCalendarServletsTimeZoneServlet
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCALENDARSERVLETSTIMEZONESERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCalendarServletsTimeZoneServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String timezonesExpirytimeParam = message.body().getString("timezones.expirytime");
                Integer timezonesExpirytime = (timezonesExpirytimeParam == null) ? null : Json.mapper.readValue(timezonesExpirytimeParam, Integer.class);
                service.comAdobeCqSocialCalendarServletsTimeZoneServlet(post, apply, delete, action, $location, propertylist, timezonesExpirytime, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCalendarServletsTimeZoneServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCalendarServletsTimeZoneServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSCOMMENTSENDPOINTSIMPLCOMMENTDELETEEVENT_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String rankingParam = message.body().getString("ranking");
                Integer ranking = (rankingParam == null) ? null : Json.mapper.readValue(rankingParam, Integer.class);
                service.comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(post, apply, delete, action, $location, propertylist, ranking, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSCOMMENTSENDPOINTSIMPLCOMMENTOPERATIONSE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray fieldWhitelistParam = message.body().getJsonArray("fieldWhitelist");
                List<String> fieldWhitelist = (fieldWhitelistParam == null) ? null : Json.mapper.readValue(fieldWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray attachmentTypeBlacklistParam = message.body().getJsonArray("attachmentTypeBlacklist");
                List<String> attachmentTypeBlacklist = (attachmentTypeBlacklistParam == null) ? null : Json.mapper.readValue(attachmentTypeBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSCOMMENTSENDPOINTSIMPLTRANSLATIONOPERATI_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray fieldWhitelistParam = message.body().getJsonArray("fieldWhitelist");
                List<String> fieldWhitelist = (fieldWhitelistParam == null) ? null : Json.mapper.readValue(fieldWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray attachmentTypeBlacklistParam = message.body().getJsonArray("attachmentTypeBlacklist");
                List<String> attachmentTypeBlacklist = (attachmentTypeBlacklistParam == null) ? null : Json.mapper.readValue(attachmentTypeBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSCOMMENTSLISTINGIMPLSEARCHCOMMENTSOCIALC_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String numUserLimitParam = message.body().getString("numUserLimit");
                Integer numUserLimit = (numUserLimitParam == null) ? null : Json.mapper.readValue(numUserLimitParam, Integer.class);
                service.comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(post, apply, delete, action, $location, propertylist, numUserLimit, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSCOMMENTSSCHEDULERIMPLSEARCHSCHEDULEDPOS_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enableScheduledPostsSearchParam = message.body().getString("enableScheduledPostsSearch");
                Boolean enableScheduledPostsSearch = (enableScheduledPostsSearchParam == null) ? null : Json.mapper.readValue(enableScheduledPostsSearchParam, Boolean.class);
                String numberOfMinutesParam = message.body().getString("numberOfMinutes");
                Integer numberOfMinutes = (numberOfMinutesParam == null) ? null : Json.mapper.readValue(numberOfMinutesParam, Integer.class);
                String maxSearchLimitParam = message.body().getString("maxSearchLimit");
                Integer maxSearchLimit = (maxSearchLimitParam == null) ? null : Json.mapper.readValue(maxSearchLimitParam, Integer.class);
                service.comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(post, apply, delete, action, $location, propertylist, enableScheduledPostsSearch, numberOfMinutes, maxSearchLimit, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsCorsCORSAuthenticationFilter
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSCORSCORSAUTHENTICATIONFILTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsCorsCORSAuthenticationFilter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String corsEnablingParam = message.body().getString("cors.enabling");
                Boolean corsEnabling = (corsEnablingParam == null) ? null : Json.mapper.readValue(corsEnablingParam, Boolean.class);
                service.comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(post, apply, delete, action, $location, propertylist, corsEnabling, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsCorsCORSAuthenticationFilter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsCorsCORSAuthenticationFilter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLANDROIDEMAILCLIENTPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String priorityOrderParam = message.body().getString("priorityOrder");
                Integer priorityOrder = (priorityOrderParam == null) ? null : Json.mapper.readValue(priorityOrderParam, Integer.class);
                JsonArray replyEmailPatternsParam = message.body().getJsonArray("replyEmailPatterns");
                List<String> replyEmailPatterns = (replyEmailPatternsParam == null) ? null : Json.mapper.readValue(replyEmailPatternsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLCOMMENTEMAILBUILDERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String contextPathParam = message.body().getString("context.path");
                String contextPath = (contextPathParam == null) ? null : contextPathParam;
                service.comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(post, apply, delete, action, $location, propertylist, contextPath, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLCOMMENTEMAILEVENTLISTENER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String eventTopicsParam = message.body().getString("event.topics");
                String eventTopics = (eventTopicsParam == null) ? null : eventTopicsParam;
                service.comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(post, apply, delete, action, $location, propertylist, eventTopics, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLCUSTOMEMAILCLIENTPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String priorityOrderParam = message.body().getString("priorityOrder");
                Integer priorityOrder = (priorityOrderParam == null) ? null : Json.mapper.readValue(priorityOrderParam, Integer.class);
                JsonArray replyEmailPatternsParam = message.body().getJsonArray("replyEmailPatterns");
                List<String> replyEmailPatterns = (replyEmailPatternsParam == null) ? null : Json.mapper.readValue(replyEmailPatternsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLEMAILQUOTEDTEXTPATTERNSIMP_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String patternTimeParam = message.body().getString("pattern.time");
                String patternTime = (patternTimeParam == null) ? null : patternTimeParam;
                String patternNewlineParam = message.body().getString("pattern.newline");
                String patternNewline = (patternNewlineParam == null) ? null : patternNewlineParam;
                String patternDayOfMonthParam = message.body().getString("pattern.dayOfMonth");
                String patternDayOfMonth = (patternDayOfMonthParam == null) ? null : patternDayOfMonthParam;
                String patternMonthParam = message.body().getString("pattern.month");
                String patternMonth = (patternMonthParam == null) ? null : patternMonthParam;
                String patternYearParam = message.body().getString("pattern.year");
                String patternYear = (patternYearParam == null) ? null : patternYearParam;
                String patternDateParam = message.body().getString("pattern.date");
                String patternDate = (patternDateParam == null) ? null : patternDateParam;
                String patternDateTimeParam = message.body().getString("pattern.dateTime");
                String patternDateTime = (patternDateTimeParam == null) ? null : patternDateTimeParam;
                String patternEmailParam = message.body().getString("pattern.email");
                String patternEmail = (patternEmailParam == null) ? null : patternEmailParam;
                service.comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(post, apply, delete, action, $location, propertylist, patternTime, patternNewline, patternDayOfMonth, patternMonth, patternYear, patternDate, patternDateTime, patternEmail, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLEMAILREPLYCONFIGURATIONIMP_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String emailNameParam = message.body().getString("email.name");
                String emailName = (emailNameParam == null) ? null : emailNameParam;
                String emailCreatePostFromReplyParam = message.body().getString("email.createPostFromReply");
                Boolean emailCreatePostFromReply = (emailCreatePostFromReplyParam == null) ? null : Json.mapper.readValue(emailCreatePostFromReplyParam, Boolean.class);
                String emailAddCommentIdToParam = message.body().getString("email.addCommentIdTo");
                String emailAddCommentIdTo = (emailAddCommentIdToParam == null) ? null : emailAddCommentIdToParam;
                String emailSubjectMaximumLengthParam = message.body().getString("email.subjectMaximumLength");
                Integer emailSubjectMaximumLength = (emailSubjectMaximumLengthParam == null) ? null : Json.mapper.readValue(emailSubjectMaximumLengthParam, Integer.class);
                String emailReplyToAddressParam = message.body().getString("email.replyToAddress");
                String emailReplyToAddress = (emailReplyToAddressParam == null) ? null : emailReplyToAddressParam;
                String emailReplyToDelimiterParam = message.body().getString("email.replyToDelimiter");
                String emailReplyToDelimiter = (emailReplyToDelimiterParam == null) ? null : emailReplyToDelimiterParam;
                String emailTrackerIdPrefixInSubjectParam = message.body().getString("email.trackerIdPrefixInSubject");
                String emailTrackerIdPrefixInSubject = (emailTrackerIdPrefixInSubjectParam == null) ? null : emailTrackerIdPrefixInSubjectParam;
                String emailTrackerIdPrefixInBodyParam = message.body().getString("email.trackerIdPrefixInBody");
                String emailTrackerIdPrefixInBody = (emailTrackerIdPrefixInBodyParam == null) ? null : emailTrackerIdPrefixInBodyParam;
                String emailAsHTMLParam = message.body().getString("email.asHTML");
                Boolean emailAsHTML = (emailAsHTMLParam == null) ? null : Json.mapper.readValue(emailAsHTMLParam, Boolean.class);
                String emailDefaultUserNameParam = message.body().getString("email.defaultUserName");
                String emailDefaultUserName = (emailDefaultUserNameParam == null) ? null : emailDefaultUserNameParam;
                String emailTemplatesRootPathParam = message.body().getString("email.templates.rootPath");
                String emailTemplatesRootPath = (emailTemplatesRootPathParam == null) ? null : emailTemplatesRootPathParam;
                service.comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(post, apply, delete, action, $location, propertylist, emailName, emailCreatePostFromReply, emailAddCommentIdTo, emailSubjectMaximumLength, emailReplyToAddress, emailReplyToDelimiter, emailTrackerIdPrefixInSubject, emailTrackerIdPrefixInBody, emailAsHTML, emailDefaultUserName, emailTemplatesRootPath, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLEMAILREPLYIMPORTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String connectProtocolParam = message.body().getString("connectProtocol");
                String connectProtocol = (connectProtocolParam == null) ? null : connectProtocolParam;
                service.comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(post, apply, delete, action, $location, propertylist, connectProtocol, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLGMAILEMAILCLIENTPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String priorityOrderParam = message.body().getString("priorityOrder");
                Integer priorityOrder = (priorityOrderParam == null) ? null : Json.mapper.readValue(priorityOrderParam, Integer.class);
                JsonArray replyEmailPatternsParam = message.body().getJsonArray("replyEmailPatterns");
                List<String> replyEmailPatterns = (replyEmailPatternsParam == null) ? null : Json.mapper.readValue(replyEmailPatternsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLIOSEMAILCLIENTPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String priorityOrderParam = message.body().getString("priorityOrder");
                Integer priorityOrder = (priorityOrderParam == null) ? null : Json.mapper.readValue(priorityOrderParam, Integer.class);
                JsonArray replyEmailPatternsParam = message.body().getJsonArray("replyEmailPatterns");
                List<String> replyEmailPatterns = (replyEmailPatternsParam == null) ? null : Json.mapper.readValue(replyEmailPatternsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLMACMAILEMAILCLIENTPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String priorityOrderParam = message.body().getString("priorityOrder");
                Integer priorityOrder = (priorityOrderParam == null) ? null : Json.mapper.readValue(priorityOrderParam, Integer.class);
                JsonArray replyEmailPatternsParam = message.body().getJsonArray("replyEmailPatterns");
                List<String> replyEmailPatterns = (replyEmailPatternsParam == null) ? null : Json.mapper.readValue(replyEmailPatternsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLOUTLOOKEMAILCLIENTPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String priorityOrderParam = message.body().getString("priorityOrder");
                Integer priorityOrder = (priorityOrderParam == null) ? null : Json.mapper.readValue(priorityOrderParam, Integer.class);
                JsonArray replyEmailPatternsParam = message.body().getJsonArray("replyEmailPatterns");
                List<String> replyEmailPatterns = (replyEmailPatternsParam == null) ? null : Json.mapper.readValue(replyEmailPatternsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLUNKNOWNEMAILCLIENTPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray replyEmailPatternsParam = message.body().getJsonArray("replyEmailPatterns");
                List<String> replyEmailPatterns = (replyEmailPatternsParam == null) ? null : Json.mapper.readValue(replyEmailPatternsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String priorityOrderParam = message.body().getString("priorityOrder");
                Integer priorityOrder = (priorityOrderParam == null) ? null : Json.mapper.readValue(priorityOrderParam, Integer.class);
                service.comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(post, apply, delete, action, $location, propertylist, replyEmailPatterns, priorityOrder, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSEMAILREPLYIMPLYAHOOEMAILCLIENTPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String priorityOrderParam = message.body().getString("priorityOrder");
                Integer priorityOrder = (priorityOrderParam == null) ? null : Json.mapper.readValue(priorityOrderParam, Integer.class);
                JsonArray replyEmailPatternsParam = message.body().getJsonArray("replyEmailPatterns");
                List<String> replyEmailPatterns = (replyEmailPatternsParam == null) ? null : Json.mapper.readValue(replyEmailPatternsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSMAINTAINANCEIMPLDELETETEMPUGCIMAGEUPLOAD_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String numberOfDaysParam = message.body().getString("numberOfDays");
                Integer numberOfDays = (numberOfDaysParam == null) ? null : Json.mapper.readValue(numberOfDaysParam, Integer.class);
                String ageOfFileParam = message.body().getString("ageOfFile");
                Integer ageOfFile = (ageOfFileParam == null) ? null : Json.mapper.readValue(ageOfFileParam, Integer.class);
                service.comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(post, apply, delete, action, $location, propertylist, numberOfDays, ageOfFile, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSUGCLIMITERIMPLUGCLIMITERSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String eventTopicsParam = message.body().getString("event.topics");
                String eventTopics = (eventTopicsParam == null) ? null : eventTopicsParam;
                String eventFilterParam = message.body().getString("event.filter");
                String eventFilter = (eventFilterParam == null) ? null : eventFilterParam;
                JsonArray verbsParam = message.body().getJsonArray("verbs");
                List<String> verbs = (verbsParam == null) ? null : Json.mapper.readValue(verbsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter, verbs, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCOMMONSUGCLIMITSCONFIGIMPLCOMMUNITYUSERUGCLIMIT_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enableParam = message.body().getString("enable");
                Boolean enable = (enableParam == null) ? null : Json.mapper.readValue(enableParam, Boolean.class);
                String ugCLimitParam = message.body().getString("UGCLimit");
                Integer ugCLimit = (ugCLimitParam == null) ? null : Json.mapper.readValue(ugCLimitParam, Integer.class);
                String ugcLimitDurationParam = message.body().getString("ugcLimitDuration");
                Integer ugcLimitDuration = (ugcLimitDurationParam == null) ? null : Json.mapper.readValue(ugcLimitDurationParam, Integer.class);
                JsonArray domainsParam = message.body().getJsonArray("domains");
                List<String> domains = (domainsParam == null) ? null : Json.mapper.readValue(domainsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray toListParam = message.body().getJsonArray("toList");
                List<String> toList = (toListParam == null) ? null : Json.mapper.readValue(toListParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(post, apply, delete, action, $location, propertylist, enable, ugCLimit, ugcLimitDuration, domains, toList, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialConnectOauthImplFacebookProviderImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCONNECTOAUTHIMPLFACEBOOKPROVIDERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialConnectOauthImplFacebookProviderImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String oauthProviderIdParam = message.body().getString("oauth.provider.id");
                String oauthProviderId = (oauthProviderIdParam == null) ? null : oauthProviderIdParam;
                String oauthCloudConfigRootParam = message.body().getString("oauth.cloud.config.root");
                String oauthCloudConfigRoot = (oauthCloudConfigRootParam == null) ? null : oauthCloudConfigRootParam;
                String providerConfigRootParam = message.body().getString("provider.config.root");
                String providerConfigRoot = (providerConfigRootParam == null) ? null : providerConfigRootParam;
                String providerConfigCreateTagsEnabledParam = message.body().getString("provider.config.create.tags.enabled");
                Boolean providerConfigCreateTagsEnabled = (providerConfigCreateTagsEnabledParam == null) ? null : Json.mapper.readValue(providerConfigCreateTagsEnabledParam, Boolean.class);
                String providerConfigUserFolderParam = message.body().getString("provider.config.user.folder");
                String providerConfigUserFolder = (providerConfigUserFolderParam == null) ? null : providerConfigUserFolderParam;
                String providerConfigFacebookFetchFieldsParam = message.body().getString("provider.config.facebook.fetch.fields");
                Boolean providerConfigFacebookFetchFields = (providerConfigFacebookFetchFieldsParam == null) ? null : Json.mapper.readValue(providerConfigFacebookFetchFieldsParam, Boolean.class);
                JsonArray providerConfigFacebookFieldsParam = message.body().getJsonArray("provider.config.facebook.fields");
                List<String> providerConfigFacebookFields = (providerConfigFacebookFieldsParam == null) ? null : Json.mapper.readValue(providerConfigFacebookFieldsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String providerConfigRefreshUserdataEnabledParam = message.body().getString("provider.config.refresh.userdata.enabled");
                Boolean providerConfigRefreshUserdataEnabled = (providerConfigRefreshUserdataEnabledParam == null) ? null : Json.mapper.readValue(providerConfigRefreshUserdataEnabledParam, Boolean.class);
                service.comAdobeCqSocialConnectOauthImplFacebookProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthCloudConfigRoot, providerConfigRoot, providerConfigCreateTagsEnabled, providerConfigUserFolder, providerConfigFacebookFetchFields, providerConfigFacebookFields, providerConfigRefreshUserdataEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialConnectOauthImplFacebookProviderImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialConnectOauthImplFacebookProviderImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCONNECTOAUTHIMPLSOCIALOAUTHAUTHENTICATIONHANDLE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray pathParam = message.body().getJsonArray("path");
                List<String> path = (pathParam == null) ? null : Json.mapper.readValue(pathParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                service.comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(post, apply, delete, action, $location, propertylist, path, serviceRanking, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCONNECTOAUTHIMPLSOCIALOAUTHUSERPROFILEMAPPER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray facebookParam = message.body().getJsonArray("facebook");
                List<String> facebook = (facebookParam == null) ? null : Json.mapper.readValue(facebookParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray twitterParam = message.body().getJsonArray("twitter");
                List<String> twitter = (twitterParam == null) ? null : Json.mapper.readValue(twitterParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String providerConfigUserFolderParam = message.body().getString("provider.config.user.folder");
                String providerConfigUserFolder = (providerConfigUserFolderParam == null) ? null : providerConfigUserFolderParam;
                service.comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(post, apply, delete, action, $location, propertylist, facebook, twitter, providerConfigUserFolder, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialConnectOauthImplTwitterProviderImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCONNECTOAUTHIMPLTWITTERPROVIDERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialConnectOauthImplTwitterProviderImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String oauthProviderIdParam = message.body().getString("oauth.provider.id");
                String oauthProviderId = (oauthProviderIdParam == null) ? null : oauthProviderIdParam;
                String oauthCloudConfigRootParam = message.body().getString("oauth.cloud.config.root");
                String oauthCloudConfigRoot = (oauthCloudConfigRootParam == null) ? null : oauthCloudConfigRootParam;
                String providerConfigRootParam = message.body().getString("provider.config.root");
                String providerConfigRoot = (providerConfigRootParam == null) ? null : providerConfigRootParam;
                String providerConfigUserFolderParam = message.body().getString("provider.config.user.folder");
                String providerConfigUserFolder = (providerConfigUserFolderParam == null) ? null : providerConfigUserFolderParam;
                String providerConfigTwitterEnableParamsParam = message.body().getString("provider.config.twitter.enable.params");
                Boolean providerConfigTwitterEnableParams = (providerConfigTwitterEnableParamsParam == null) ? null : Json.mapper.readValue(providerConfigTwitterEnableParamsParam, Boolean.class);
                JsonArray providerConfigTwitterParamsParam = message.body().getJsonArray("provider.config.twitter.params");
                List<String> providerConfigTwitterParams = (providerConfigTwitterParamsParam == null) ? null : Json.mapper.readValue(providerConfigTwitterParamsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String providerConfigRefreshUserdataEnabledParam = message.body().getString("provider.config.refresh.userdata.enabled");
                Boolean providerConfigRefreshUserdataEnabled = (providerConfigRefreshUserdataEnabledParam == null) ? null : Json.mapper.readValue(providerConfigRefreshUserdataEnabledParam, Boolean.class);
                service.comAdobeCqSocialConnectOauthImplTwitterProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthCloudConfigRoot, providerConfigRoot, providerConfigUserFolder, providerConfigTwitterEnableParams, providerConfigTwitterParams, providerConfigRefreshUserdataEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialConnectOauthImplTwitterProviderImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialConnectOauthImplTwitterProviderImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALCONTENTFRAGMENTSSERVICESIMPLCOMMUNITIESFRAGMEN_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqSocialContentFragmentsServicesEnabledParam = message.body().getString("cq.social.content.fragments.services.enabled");
                Boolean cqSocialContentFragmentsServicesEnabled = (cqSocialContentFragmentsServicesEnabledParam == null) ? null : Json.mapper.readValue(cqSocialContentFragmentsServicesEnabledParam, Boolean.class);
                String cqSocialContentFragmentsServicesWaitTimeSecondsParam = message.body().getString("cq.social.content.fragments.services.waitTimeSeconds");
                Integer cqSocialContentFragmentsServicesWaitTimeSeconds = (cqSocialContentFragmentsServicesWaitTimeSecondsParam == null) ? null : Json.mapper.readValue(cqSocialContentFragmentsServicesWaitTimeSecondsParam, Integer.class);
                service.comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(post, apply, delete, action, $location, propertylist, cqSocialContentFragmentsServicesEnabled, cqSocialContentFragmentsServicesWaitTimeSeconds, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialDatastoreAsImplASResourceProviderFactory
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALDATASTOREASIMPLASRESOURCEPROVIDERFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialDatastoreAsImplASResourceProviderFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String versionIdParam = message.body().getString("version.id");
                String versionId = (versionIdParam == null) ? null : versionIdParam;
                String cacheOnParam = message.body().getString("cache.on");
                Boolean cacheOn = (cacheOnParam == null) ? null : Json.mapper.readValue(cacheOnParam, Boolean.class);
                String concurrencyLevelParam = message.body().getString("concurrency.level");
                Integer concurrencyLevel = (concurrencyLevelParam == null) ? null : Json.mapper.readValue(concurrencyLevelParam, Integer.class);
                String cacheStartSizeParam = message.body().getString("cache.start.size");
                Integer cacheStartSize = (cacheStartSizeParam == null) ? null : Json.mapper.readValue(cacheStartSizeParam, Integer.class);
                String cacheTtlParam = message.body().getString("cache.ttl");
                Integer cacheTtl = (cacheTtlParam == null) ? null : Json.mapper.readValue(cacheTtlParam, Integer.class);
                String cacheSizeParam = message.body().getString("cache.size");
                Integer cacheSize = (cacheSizeParam == null) ? null : Json.mapper.readValue(cacheSizeParam, Integer.class);
                String timeLimitParam = message.body().getString("time.limit");
                Integer timeLimit = (timeLimitParam == null) ? null : Json.mapper.readValue(timeLimitParam, Integer.class);
                service.comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(post, apply, delete, action, $location, propertylist, versionId, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize, timeLimit, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialDatastoreAsImplASResourceProviderFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialDatastoreAsImplASResourceProviderFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALDATASTOREOPIMPLSOCIALMSRESOURCEPROVIDERFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String solrZkTimeoutParam = message.body().getString("solr.zk.timeout");
                String solrZkTimeout = (solrZkTimeoutParam == null) ? null : solrZkTimeoutParam;
                String solrCommitParam = message.body().getString("solr.commit");
                String solrCommit = (solrCommitParam == null) ? null : solrCommitParam;
                String cacheOnParam = message.body().getString("cache.on");
                Boolean cacheOn = (cacheOnParam == null) ? null : Json.mapper.readValue(cacheOnParam, Boolean.class);
                String concurrencyLevelParam = message.body().getString("concurrency.level");
                Integer concurrencyLevel = (concurrencyLevelParam == null) ? null : Json.mapper.readValue(concurrencyLevelParam, Integer.class);
                String cacheStartSizeParam = message.body().getString("cache.start.size");
                Integer cacheStartSize = (cacheStartSizeParam == null) ? null : Json.mapper.readValue(cacheStartSizeParam, Integer.class);
                String cacheTtlParam = message.body().getString("cache.ttl");
                Integer cacheTtl = (cacheTtlParam == null) ? null : Json.mapper.readValue(cacheTtlParam, Integer.class);
                String cacheSizeParam = message.body().getString("cache.size");
                Integer cacheSize = (cacheSizeParam == null) ? null : Json.mapper.readValue(cacheSizeParam, Integer.class);
                service.comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(post, apply, delete, action, $location, propertylist, solrZkTimeout, solrCommit, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALDATASTORERDBIMPLSOCIALRDBRESOURCEPROVIDERFACTOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String solrZkTimeoutParam = message.body().getString("solr.zk.timeout");
                String solrZkTimeout = (solrZkTimeoutParam == null) ? null : solrZkTimeoutParam;
                String solrCommitParam = message.body().getString("solr.commit");
                String solrCommit = (solrCommitParam == null) ? null : solrCommitParam;
                String cacheOnParam = message.body().getString("cache.on");
                Boolean cacheOn = (cacheOnParam == null) ? null : Json.mapper.readValue(cacheOnParam, Boolean.class);
                String concurrencyLevelParam = message.body().getString("concurrency.level");
                Integer concurrencyLevel = (concurrencyLevelParam == null) ? null : Json.mapper.readValue(concurrencyLevelParam, Integer.class);
                String cacheStartSizeParam = message.body().getString("cache.start.size");
                Integer cacheStartSize = (cacheStartSizeParam == null) ? null : Json.mapper.readValue(cacheStartSizeParam, Integer.class);
                String cacheTtlParam = message.body().getString("cache.ttl");
                Integer cacheTtl = (cacheTtlParam == null) ? null : Json.mapper.readValue(cacheTtlParam, Integer.class);
                String cacheSizeParam = message.body().getString("cache.size");
                Integer cacheSize = (cacheSizeParam == null) ? null : Json.mapper.readValue(cacheSizeParam, Integer.class);
                service.comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(post, apply, delete, action, $location, propertylist, solrZkTimeout, solrCommit, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALENABLEMENTADAPTORSENABLEMENTLEARNINGPATHADAPTORF_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String isMemberCheckParam = message.body().getString("isMemberCheck");
                Boolean isMemberCheck = (isMemberCheckParam == null) ? null : Json.mapper.readValue(isMemberCheckParam, Boolean.class);
                service.comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(post, apply, delete, action, $location, propertylist, isMemberCheck, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALENABLEMENTADAPTORSENABLEMENTRESOURCEADAPTORFACTO_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String isMemberCheckParam = message.body().getString("isMemberCheck");
                Boolean isMemberCheck = (isMemberCheckParam == null) ? null : Json.mapper.readValue(isMemberCheckParam, Boolean.class);
                service.comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(post, apply, delete, action, $location, propertylist, isMemberCheck, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALENABLEMENTLEARNINGPATHENDPOINTSIMPLENABLEMENTL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray fieldWhitelistParam = message.body().getJsonArray("fieldWhitelist");
                List<String> fieldWhitelist = (fieldWhitelistParam == null) ? null : Json.mapper.readValue(fieldWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(post, apply, delete, action, $location, propertylist, fieldWhitelist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALENABLEMENTRESOURCEENDPOINTSIMPLENABLEMENTRESOU_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray fieldWhitelistParam = message.body().getJsonArray("fieldWhitelist");
                List<String> fieldWhitelist = (fieldWhitelistParam == null) ? null : Json.mapper.readValue(fieldWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(post, apply, delete, action, $location, propertylist, fieldWhitelist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALENABLEMENTSERVICESIMPLAUTHORMARKERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                service.comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(post, apply, delete, action, $location, propertylist, serviceRanking, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALFILELIBRARYCLIENTENDPOINTSFILELIBRARYDOWNLOADGE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingServletSelectorsParam = message.body().getString("sling.servlet.selectors");
                String slingServletSelectors = (slingServletSelectorsParam == null) ? null : slingServletSelectorsParam;
                String slingServletExtensionsParam = message.body().getString("sling.servlet.extensions");
                String slingServletExtensions = (slingServletExtensionsParam == null) ? null : slingServletExtensionsParam;
                service.comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(post, apply, delete, action, $location, propertylist, slingServletSelectors, slingServletExtensions, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALFILELIBRARYCLIENTENDPOINTSIMPLFILELIBRARYOPERA_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray fieldWhitelistParam = message.body().getJsonArray("fieldWhitelist");
                List<String> fieldWhitelist = (fieldWhitelistParam == null) ? null : Json.mapper.readValue(fieldWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray attachmentTypeBlacklistParam = message.body().getJsonArray("attachmentTypeBlacklist");
                List<String> attachmentTypeBlacklist = (attachmentTypeBlacklistParam == null) ? null : Json.mapper.readValue(attachmentTypeBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialForumClientEndpointsImplForumOperationsService
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALFORUMCLIENTENDPOINTSIMPLFORUMOPERATIONSSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialForumClientEndpointsImplForumOperationsService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray fieldWhitelistParam = message.body().getJsonArray("fieldWhitelist");
                List<String> fieldWhitelist = (fieldWhitelistParam == null) ? null : Json.mapper.readValue(fieldWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray attachmentTypeBlacklistParam = message.body().getJsonArray("attachmentTypeBlacklist");
                List<String> attachmentTypeBlacklist = (attachmentTypeBlacklistParam == null) ? null : Json.mapper.readValue(attachmentTypeBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialForumClientEndpointsImplForumOperationsService(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialForumClientEndpointsImplForumOperationsService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialForumClientEndpointsImplForumOperationsService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialForumDispatcherImplFlushOperations
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALFORUMDISPATCHERIMPLFLUSHOPERATIONS_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialForumDispatcherImplFlushOperations";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String extensionOrderParam = message.body().getString("extension.order");
                Integer extensionOrder = (extensionOrderParam == null) ? null : Json.mapper.readValue(extensionOrderParam, Integer.class);
                String flushForumontopicParam = message.body().getString("flush.forumontopic");
                Boolean flushForumontopic = (flushForumontopicParam == null) ? null : Json.mapper.readValue(flushForumontopicParam, Boolean.class);
                service.comAdobeCqSocialForumDispatcherImplFlushOperations(post, apply, delete, action, $location, propertylist, extensionOrder, flushForumontopic, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialForumDispatcherImplFlushOperations");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialForumDispatcherImplFlushOperations", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALGROUPCLIENTIMPLCOMMUNITYGROUPCOLLECTIONCOMPONEN_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String groupListingPaginationEnableParam = message.body().getString("group.listing.pagination.enable");
                Boolean groupListingPaginationEnable = (groupListingPaginationEnableParam == null) ? null : Json.mapper.readValue(groupListingPaginationEnableParam, Boolean.class);
                String groupListingLazyloadingEnableParam = message.body().getString("group.listing.lazyloading.enable");
                Boolean groupListingLazyloadingEnable = (groupListingLazyloadingEnableParam == null) ? null : Json.mapper.readValue(groupListingLazyloadingEnableParam, Boolean.class);
                String pageSizeParam = message.body().getString("page.size");
                Integer pageSize = (pageSizeParam == null) ? null : Json.mapper.readValue(pageSizeParam, Integer.class);
                String priorityParam = message.body().getString("priority");
                Integer priority = (priorityParam == null) ? null : Json.mapper.readValue(priorityParam, Integer.class);
                service.comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(post, apply, delete, action, $location, propertylist, groupListingPaginationEnable, groupListingLazyloadingEnable, pageSize, priority, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialGroupImplGroupServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALGROUPIMPLGROUPSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialGroupImplGroupServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String maxWaitTimeParam = message.body().getString("maxWaitTime");
                Integer maxWaitTime = (maxWaitTimeParam == null) ? null : Json.mapper.readValue(maxWaitTimeParam, Integer.class);
                String minWaitBetweenRetriesParam = message.body().getString("minWaitBetweenRetries");
                Integer minWaitBetweenRetries = (minWaitBetweenRetriesParam == null) ? null : Json.mapper.readValue(minWaitBetweenRetriesParam, Integer.class);
                service.comAdobeCqSocialGroupImplGroupServiceImpl(post, apply, delete, action, $location, propertylist, maxWaitTime, minWaitBetweenRetries, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialGroupImplGroupServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialGroupImplGroupServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALHANDLEBARSGUAVATEMPLATECACHEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String parameterGuavaCacheEnabledParam = message.body().getString("parameter.guava.cache.enabled");
                Boolean parameterGuavaCacheEnabled = (parameterGuavaCacheEnabledParam == null) ? null : Json.mapper.readValue(parameterGuavaCacheEnabledParam, Boolean.class);
                String parameterGuavaCacheParamsParam = message.body().getString("parameter.guava.cache.params");
                String parameterGuavaCacheParams = (parameterGuavaCacheParamsParam == null) ? null : parameterGuavaCacheParamsParam;
                String parameterGuavaCacheReloadParam = message.body().getString("parameter.guava.cache.reload");
                Boolean parameterGuavaCacheReload = (parameterGuavaCacheReloadParam == null) ? null : Json.mapper.readValue(parameterGuavaCacheReloadParam, Boolean.class);
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                service.comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(post, apply, delete, action, $location, propertylist, parameterGuavaCacheEnabled, parameterGuavaCacheParams, parameterGuavaCacheReload, serviceRanking, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALIDEATIONCLIENTENDPOINTSIMPLIDEATIONOPERATIONSS_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray fieldWhitelistParam = message.body().getJsonArray("fieldWhitelist");
                List<String> fieldWhitelist = (fieldWhitelistParam == null) ? null : Json.mapper.readValue(fieldWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray attachmentTypeBlacklistParam = message.body().getJsonArray("attachmentTypeBlacklist");
                List<String> attachmentTypeBlacklist = (attachmentTypeBlacklistParam == null) ? null : Json.mapper.readValue(attachmentTypeBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALJOURNALCLIENTENDPOINTSIMPLJOURNALOPERATIONSSER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray fieldWhitelistParam = message.body().getJsonArray("fieldWhitelist");
                List<String> fieldWhitelist = (fieldWhitelistParam == null) ? null : Json.mapper.readValue(fieldWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray attachmentTypeBlacklistParam = message.body().getJsonArray("attachmentTypeBlacklist");
                List<String> attachmentTypeBlacklist = (attachmentTypeBlacklistParam == null) ? null : Json.mapper.readValue(attachmentTypeBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALMEMBERSENDPOINTSIMPLCOMMUNITYMEMBERGROUPPROFILE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray fieldWhitelistParam = message.body().getJsonArray("fieldWhitelist");
                List<String> fieldWhitelist = (fieldWhitelistParam == null) ? null : Json.mapper.readValue(fieldWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(post, apply, delete, action, $location, propertylist, fieldWhitelist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALMEMBERSENDPOINTSIMPLCOMMUNITYMEMBERUSERPROFILEO_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray fieldWhitelistParam = message.body().getJsonArray("fieldWhitelist");
                List<String> fieldWhitelist = (fieldWhitelistParam == null) ? null : Json.mapper.readValue(fieldWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(post, apply, delete, action, $location, propertylist, fieldWhitelist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALMEMBERSIMPLCOMMUNITYMEMBERGROUPPROFILECOMPONENTF_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String everyoneLimitParam = message.body().getString("everyoneLimit");
                Integer everyoneLimit = (everyoneLimitParam == null) ? null : Json.mapper.readValue(everyoneLimitParam, Integer.class);
                String priorityParam = message.body().getString("priority");
                Integer priority = (priorityParam == null) ? null : Json.mapper.readValue(priorityParam, Integer.class);
                service.comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(post, apply, delete, action, $location, propertylist, everyoneLimit, priority, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALMESSAGINGCLIENTENDPOINTSIMPLMESSAGINGOPERATION_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray messagePropertiesParam = message.body().getJsonArray("message.properties");
                List<String> messageProperties = (messagePropertiesParam == null) ? null : Json.mapper.readValue(messagePropertiesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String messageBoxSizeLimitParam = message.body().getString("messageBoxSizeLimit");
                Integer messageBoxSizeLimit = (messageBoxSizeLimitParam == null) ? null : Json.mapper.readValue(messageBoxSizeLimitParam, Integer.class);
                String messageCountLimitParam = message.body().getString("messageCountLimit");
                Integer messageCountLimit = (messageCountLimitParam == null) ? null : Json.mapper.readValue(messageCountLimitParam, Integer.class);
                String notifyFailureParam = message.body().getString("notifyFailure");
                Boolean notifyFailure = (notifyFailureParam == null) ? null : Json.mapper.readValue(notifyFailureParam, Boolean.class);
                String failureMessageFromParam = message.body().getString("failureMessageFrom");
                String failureMessageFrom = (failureMessageFromParam == null) ? null : failureMessageFromParam;
                String failureTemplatePathParam = message.body().getString("failureTemplatePath");
                String failureTemplatePath = (failureTemplatePathParam == null) ? null : failureTemplatePathParam;
                String maxRetriesParam = message.body().getString("maxRetries");
                Integer maxRetries = (maxRetriesParam == null) ? null : Json.mapper.readValue(maxRetriesParam, Integer.class);
                String minWaitBetweenRetriesParam = message.body().getString("minWaitBetweenRetries");
                Integer minWaitBetweenRetries = (minWaitBetweenRetriesParam == null) ? null : Json.mapper.readValue(minWaitBetweenRetriesParam, Integer.class);
                String countUpdatePoolSizeParam = message.body().getString("countUpdatePoolSize");
                Integer countUpdatePoolSize = (countUpdatePoolSizeParam == null) ? null : Json.mapper.readValue(countUpdatePoolSizeParam, Integer.class);
                String inboxPathParam = message.body().getString("inbox.path");
                String inboxPath = (inboxPathParam == null) ? null : inboxPathParam;
                String sentitemsPathParam = message.body().getString("sentitems.path");
                String sentitemsPath = (sentitemsPathParam == null) ? null : sentitemsPathParam;
                String supportAttachmentsParam = message.body().getString("supportAttachments");
                Boolean supportAttachments = (supportAttachmentsParam == null) ? null : Json.mapper.readValue(supportAttachmentsParam, Boolean.class);
                String supportGroupMessagingParam = message.body().getString("supportGroupMessaging");
                Boolean supportGroupMessaging = (supportGroupMessagingParam == null) ? null : Json.mapper.readValue(supportGroupMessagingParam, Boolean.class);
                String maxTotalRecipientsParam = message.body().getString("maxTotalRecipients");
                Integer maxTotalRecipients = (maxTotalRecipientsParam == null) ? null : Json.mapper.readValue(maxTotalRecipientsParam, Integer.class);
                String batchSizeParam = message.body().getString("batchSize");
                Integer batchSize = (batchSizeParam == null) ? null : Json.mapper.readValue(batchSizeParam, Integer.class);
                String maxTotalAttachmentSizeParam = message.body().getString("maxTotalAttachmentSize");
                Integer maxTotalAttachmentSize = (maxTotalAttachmentSizeParam == null) ? null : Json.mapper.readValue(maxTotalAttachmentSizeParam, Integer.class);
                JsonArray attachmentTypeBlacklistParam = message.body().getJsonArray("attachmentTypeBlacklist");
                List<String> attachmentTypeBlacklist = (attachmentTypeBlacklistParam == null) ? null : Json.mapper.readValue(attachmentTypeBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray allowedAttachmentTypesParam = message.body().getJsonArray("allowedAttachmentTypes");
                List<String> allowedAttachmentTypes = (allowedAttachmentTypesParam == null) ? null : Json.mapper.readValue(allowedAttachmentTypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceSelectorParam = message.body().getString("serviceSelector");
                String serviceSelector = (serviceSelectorParam == null) ? null : serviceSelectorParam;
                JsonArray fieldWhitelistParam = message.body().getJsonArray("fieldWhitelist");
                List<String> fieldWhitelist = (fieldWhitelistParam == null) ? null : Json.mapper.readValue(fieldWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(post, apply, delete, action, $location, propertylist, messageProperties, messageBoxSizeLimit, messageCountLimit, notifyFailure, failureMessageFrom, failureTemplatePath, maxRetries, minWaitBetweenRetries, countUpdatePoolSize, inboxPath, sentitemsPath, supportAttachments, supportGroupMessaging, maxTotalRecipients, batchSize, maxTotalAttachmentSize, attachmentTypeBlacklist, allowedAttachmentTypes, serviceSelector, fieldWhitelist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALMODERATIONDASHBOARDAPIFILTERGROUPSOCIALCOMPONEN_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray resourceTypeFiltersParam = message.body().getJsonArray("resourceType.filters");
                List<String> resourceTypeFilters = (resourceTypeFiltersParam == null) ? null : Json.mapper.readValue(resourceTypeFiltersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String priorityParam = message.body().getString("priority");
                Integer priority = (priorityParam == null) ? null : Json.mapper.readValue(priorityParam, Integer.class);
                service.comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(post, apply, delete, action, $location, propertylist, resourceTypeFilters, priority, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialModerationDashboardApiModerationDashboardSocial
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALMODERATIONDASHBOARDAPIMODERATIONDASHBOARDSOCIAL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialModerationDashboardApiModerationDashboardSocial";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String priorityParam = message.body().getString("priority");
                Integer priority = (priorityParam == null) ? null : Json.mapper.readValue(priorityParam, Integer.class);
                service.comAdobeCqSocialModerationDashboardApiModerationDashboardSocial(post, apply, delete, action, $location, propertylist, priority, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialModerationDashboardApiModerationDashboardSocial");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialModerationDashboardApiModerationDashboardSocial", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALMODERATIONDASHBOARDAPIUSERDETAILSSOCIALCOMPONEN_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String priorityParam = message.body().getString("priority");
                Integer priority = (priorityParam == null) ? null : Json.mapper.readValue(priorityParam, Integer.class);
                service.comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(post, apply, delete, action, $location, propertylist, priority, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALMODERATIONDASHBOARDINTERNALIMPLFILTERGROUPSOCI_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray resourceTypeFiltersParam = message.body().getJsonArray("resourceType.filters");
                List<String> resourceTypeFilters = (resourceTypeFiltersParam == null) ? null : Json.mapper.readValue(resourceTypeFiltersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String priorityParam = message.body().getString("priority");
                Integer priority = (priorityParam == null) ? null : Json.mapper.readValue(priorityParam, Integer.class);
                service.comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(post, apply, delete, action, $location, propertylist, resourceTypeFilters, priority, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialNotificationsImplMentionsRouter
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALNOTIFICATIONSIMPLMENTIONSROUTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialNotificationsImplMentionsRouter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String eventTopicsParam = message.body().getString("event.topics");
                String eventTopics = (eventTopicsParam == null) ? null : eventTopicsParam;
                String eventFilterParam = message.body().getString("event.filter");
                String eventFilter = (eventFilterParam == null) ? null : eventFilterParam;
                service.comAdobeCqSocialNotificationsImplMentionsRouter(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialNotificationsImplMentionsRouter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialNotificationsImplMentionsRouter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialNotificationsImplNotificationManagerImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALNOTIFICATIONSIMPLNOTIFICATIONMANAGERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialNotificationsImplNotificationManagerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String maxUnreadNotificationCountParam = message.body().getString("max.unread.notification.count");
                Integer maxUnreadNotificationCount = (maxUnreadNotificationCountParam == null) ? null : Json.mapper.readValue(maxUnreadNotificationCountParam, Integer.class);
                service.comAdobeCqSocialNotificationsImplNotificationManagerImpl(post, apply, delete, action, $location, propertylist, maxUnreadNotificationCount, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialNotificationsImplNotificationManagerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialNotificationsImplNotificationManagerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialNotificationsImplNotificationsRouter
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALNOTIFICATIONSIMPLNOTIFICATIONSROUTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialNotificationsImplNotificationsRouter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String eventTopicsParam = message.body().getString("event.topics");
                String eventTopics = (eventTopicsParam == null) ? null : eventTopicsParam;
                String eventFilterParam = message.body().getString("event.filter");
                String eventFilter = (eventFilterParam == null) ? null : eventFilterParam;
                service.comAdobeCqSocialNotificationsImplNotificationsRouter(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialNotificationsImplNotificationsRouter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialNotificationsImplNotificationsRouter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALQNACLIENTENDPOINTSIMPLQNAFORUMOPERATIONSSERVIC_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray fieldWhitelistParam = message.body().getJsonArray("fieldWhitelist");
                List<String> fieldWhitelist = (fieldWhitelistParam == null) ? null : Json.mapper.readValue(fieldWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray attachmentTypeBlacklistParam = message.body().getJsonArray("attachmentTypeBlacklist");
                List<String> attachmentTypeBlacklist = (attachmentTypeBlacklistParam == null) ? null : Json.mapper.readValue(attachmentTypeBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALREPORTINGANALYTICSSERVICESIMPLANALYTICSREPORTI_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqSocialReportingAnalyticsPollingImporterIntervalParam = message.body().getString("cq.social.reporting.analytics.polling.importer.interval");
                Integer cqSocialReportingAnalyticsPollingImporterInterval = (cqSocialReportingAnalyticsPollingImporterIntervalParam == null) ? null : Json.mapper.readValue(cqSocialReportingAnalyticsPollingImporterIntervalParam, Integer.class);
                String cqSocialReportingAnalyticsPollingImporterPageSizeParam = message.body().getString("cq.social.reporting.analytics.polling.importer.pageSize");
                Integer cqSocialReportingAnalyticsPollingImporterPageSize = (cqSocialReportingAnalyticsPollingImporterPageSizeParam == null) ? null : Json.mapper.readValue(cqSocialReportingAnalyticsPollingImporterPageSizeParam, Integer.class);
                service.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(post, apply, delete, action, $location, propertylist, cqSocialReportingAnalyticsPollingImporterInterval, cqSocialReportingAnalyticsPollingImporterPageSize, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALREPORTINGANALYTICSSERVICESIMPLANALYTICSREPORTM_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String reportFetchDelayParam = message.body().getString("report.fetch.delay");
                Integer reportFetchDelay = (reportFetchDelayParam == null) ? null : Json.mapper.readValue(reportFetchDelayParam, Integer.class);
                service.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(post, apply, delete, action, $location, propertylist, reportFetchDelay, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALREPORTINGANALYTICSSERVICESIMPLSITETRENDREPORTS_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqSocialConsoleAnalyticsSitesMappingParam = message.body().getJsonArray("cq.social.console.analytics.sites.mapping");
                List<String> cqSocialConsoleAnalyticsSitesMapping = (cqSocialConsoleAnalyticsSitesMappingParam == null) ? null : Json.mapper.readValue(cqSocialConsoleAnalyticsSitesMappingParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String priorityParam = message.body().getString("priority");
                Integer priority = (priorityParam == null) ? null : Json.mapper.readValue(priorityParam, Integer.class);
                service.comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(post, apply, delete, action, $location, propertylist, cqSocialConsoleAnalyticsSitesMapping, priority, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALREVIEWCLIENTENDPOINTSIMPLREVIEWOPERATIONSSERVI_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray fieldWhitelistParam = message.body().getJsonArray("fieldWhitelist");
                List<String> fieldWhitelist = (fieldWhitelistParam == null) ? null : Json.mapper.readValue(fieldWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray attachmentTypeBlacklistParam = message.body().getJsonArray("attachmentTypeBlacklist");
                List<String> attachmentTypeBlacklist = (attachmentTypeBlacklistParam == null) ? null : Json.mapper.readValue(attachmentTypeBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALSCFCOREOPERATIONSIMPLSOCIALOPERATIONSSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingServletSelectorsParam = message.body().getString("sling.servlet.selectors");
                String slingServletSelectors = (slingServletSelectorsParam == null) ? null : slingServletSelectorsParam;
                String slingServletExtensionsParam = message.body().getString("sling.servlet.extensions");
                String slingServletExtensions = (slingServletExtensionsParam == null) ? null : slingServletExtensionsParam;
                service.comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(post, apply, delete, action, $location, propertylist, slingServletSelectors, slingServletExtensions, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALSCFENDPOINTSIMPLDEFAULTSOCIALGETSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray slingServletSelectorsParam = message.body().getJsonArray("sling.servlet.selectors");
                List<String> slingServletSelectors = (slingServletSelectorsParam == null) ? null : Json.mapper.readValue(slingServletSelectorsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingServletExtensionsParam = message.body().getString("sling.servlet.extensions");
                String slingServletExtensions = (slingServletExtensionsParam == null) ? null : slingServletExtensionsParam;
                service.comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(post, apply, delete, action, $location, propertylist, slingServletSelectors, slingServletExtensions, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialScoringImplScoringEventListener
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALSCORINGIMPLSCORINGEVENTLISTENER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialScoringImplScoringEventListener";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String eventTopicsParam = message.body().getString("event.topics");
                String eventTopics = (eventTopicsParam == null) ? null : eventTopicsParam;
                String eventFilterParam = message.body().getString("event.filter");
                String eventFilter = (eventFilterParam == null) ? null : eventFilterParam;
                service.comAdobeCqSocialScoringImplScoringEventListener(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialScoringImplScoringEventListener");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialScoringImplScoringEventListener", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALSERVICEUSERSINTERNALIMPLSERVICEUSERWRAPPERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enableFallbackParam = message.body().getString("enableFallback");
                Boolean enableFallback = (enableFallbackParam == null) ? null : Json.mapper.readValue(enableFallbackParam, Boolean.class);
                service.comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(post, apply, delete, action, $location, propertylist, enableFallback, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialSiteEndpointsImplSiteOperationService
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALSITEENDPOINTSIMPLSITEOPERATIONSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialSiteEndpointsImplSiteOperationService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray fieldWhitelistParam = message.body().getJsonArray("fieldWhitelist");
                List<String> fieldWhitelist = (fieldWhitelistParam == null) ? null : Json.mapper.readValue(fieldWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray sitePathFiltersParam = message.body().getJsonArray("sitePathFilters");
                List<String> sitePathFilters = (sitePathFiltersParam == null) ? null : Json.mapper.readValue(sitePathFiltersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String sitePackageGroupParam = message.body().getString("sitePackageGroup");
                String sitePackageGroup = (sitePackageGroupParam == null) ? null : sitePackageGroupParam;
                service.comAdobeCqSocialSiteEndpointsImplSiteOperationService(post, apply, delete, action, $location, propertylist, fieldWhitelist, sitePathFilters, sitePackageGroup, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialSiteEndpointsImplSiteOperationService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialSiteEndpointsImplSiteOperationService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALSITEIMPLANALYTICSCOMPONENTCONFIGURATIONSERVICEIM_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqSocialConsoleAnalyticsComponentsParam = message.body().getJsonArray("cq.social.console.analytics.components");
                List<String> cqSocialConsoleAnalyticsComponents = (cqSocialConsoleAnalyticsComponentsParam == null) ? null : Json.mapper.readValue(cqSocialConsoleAnalyticsComponentsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(post, apply, delete, action, $location, propertylist, cqSocialConsoleAnalyticsComponents, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialSiteImplSiteConfiguratorImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALSITEIMPLSITECONFIGURATORIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialSiteImplSiteConfiguratorImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray componentsUsingTagsParam = message.body().getJsonArray("componentsUsingTags");
                List<String> componentsUsingTags = (componentsUsingTagsParam == null) ? null : Json.mapper.readValue(componentsUsingTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialSiteImplSiteConfiguratorImpl(post, apply, delete, action, $location, propertylist, componentsUsingTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialSiteImplSiteConfiguratorImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialSiteImplSiteConfiguratorImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialSrpImplSocialSolrConnector
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALSRPIMPLSOCIALSOLRCONNECTOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialSrpImplSocialSolrConnector";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String srpTypeParam = message.body().getString("srp.type");
                String srpType = (srpTypeParam == null) ? null : srpTypeParam;
                service.comAdobeCqSocialSrpImplSocialSolrConnector(post, apply, delete, action, $location, propertylist, srpType, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialSrpImplSocialSolrConnector");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialSrpImplSocialSolrConnector", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialSyncImplDiffChangesObserver
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALSYNCIMPLDIFFCHANGESOBSERVER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialSyncImplDiffChangesObserver";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                String agentNameParam = message.body().getString("agentName");
                String agentName = (agentNameParam == null) ? null : agentNameParam;
                String diffPathParam = message.body().getString("diffPath");
                String diffPath = (diffPathParam == null) ? null : diffPathParam;
                String propertyNamesParam = message.body().getString("propertyNames");
                String propertyNames = (propertyNamesParam == null) ? null : propertyNamesParam;
                service.comAdobeCqSocialSyncImplDiffChangesObserver(post, apply, delete, action, $location, propertylist, enabled, agentName, diffPath, propertyNames, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialSyncImplDiffChangesObserver");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialSyncImplDiffChangesObserver", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialSyncImplGroupSyncListenerImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALSYNCIMPLGROUPSYNCLISTENERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialSyncImplGroupSyncListenerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray nodetypesParam = message.body().getJsonArray("nodetypes");
                List<String> nodetypes = (nodetypesParam == null) ? null : Json.mapper.readValue(nodetypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray ignorablepropsParam = message.body().getJsonArray("ignorableprops");
                List<String> ignorableprops = (ignorablepropsParam == null) ? null : Json.mapper.readValue(ignorablepropsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String ignorablenodesParam = message.body().getString("ignorablenodes");
                String ignorablenodes = (ignorablenodesParam == null) ? null : ignorablenodesParam;
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                String distfoldersParam = message.body().getString("distfolders");
                String distfolders = (distfoldersParam == null) ? null : distfoldersParam;
                service.comAdobeCqSocialSyncImplGroupSyncListenerImpl(post, apply, delete, action, $location, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialSyncImplGroupSyncListenerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialSyncImplGroupSyncListenerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialSyncImplPublisherSyncServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALSYNCIMPLPUBLISHERSYNCSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialSyncImplPublisherSyncServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray activeRunModesParam = message.body().getJsonArray("activeRunModes");
                List<String> activeRunModes = (activeRunModesParam == null) ? null : Json.mapper.readValue(activeRunModesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialSyncImplPublisherSyncServiceImpl(post, apply, delete, action, $location, propertylist, activeRunModes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialSyncImplPublisherSyncServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialSyncImplPublisherSyncServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialSyncImplUserSyncListenerImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALSYNCIMPLUSERSYNCLISTENERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialSyncImplUserSyncListenerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray nodetypesParam = message.body().getJsonArray("nodetypes");
                List<String> nodetypes = (nodetypesParam == null) ? null : Json.mapper.readValue(nodetypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray ignorablepropsParam = message.body().getJsonArray("ignorableprops");
                List<String> ignorableprops = (ignorablepropsParam == null) ? null : Json.mapper.readValue(ignorablepropsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray ignorablenodesParam = message.body().getJsonArray("ignorablenodes");
                List<String> ignorablenodes = (ignorablenodesParam == null) ? null : Json.mapper.readValue(ignorablenodesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                JsonArray distfoldersParam = message.body().getJsonArray("distfolders");
                List<String> distfolders = (distfoldersParam == null) ? null : Json.mapper.readValue(distfoldersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialSyncImplUserSyncListenerImpl(post, apply, delete, action, $location, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialSyncImplUserSyncListenerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialSyncImplUserSyncListenerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialTranslationImplTranslationServiceConfigManager
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALTRANSLATIONIMPLTRANSLATIONSERVICECONFIGMANAGER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialTranslationImplTranslationServiceConfigManager";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String translateLanguageParam = message.body().getString("translate.language");
                String translateLanguage = (translateLanguageParam == null) ? null : translateLanguageParam;
                String translateDisplayParam = message.body().getString("translate.display");
                String translateDisplay = (translateDisplayParam == null) ? null : translateDisplayParam;
                String translateAttributionParam = message.body().getString("translate.attribution");
                Boolean translateAttribution = (translateAttributionParam == null) ? null : Json.mapper.readValue(translateAttributionParam, Boolean.class);
                String translateCachingParam = message.body().getString("translate.caching");
                String translateCaching = (translateCachingParam == null) ? null : translateCachingParam;
                String translateSmartRenderingParam = message.body().getString("translate.smart.rendering");
                String translateSmartRendering = (translateSmartRenderingParam == null) ? null : translateSmartRenderingParam;
                String translateCachingDurationParam = message.body().getString("translate.caching.duration");
                String translateCachingDuration = (translateCachingDurationParam == null) ? null : translateCachingDurationParam;
                String translateSessionSaveIntervalParam = message.body().getString("translate.session.save.interval");
                String translateSessionSaveInterval = (translateSessionSaveIntervalParam == null) ? null : translateSessionSaveIntervalParam;
                String translateSessionSaveBatchLimitParam = message.body().getString("translate.session.save.batchLimit");
                String translateSessionSaveBatchLimit = (translateSessionSaveBatchLimitParam == null) ? null : translateSessionSaveBatchLimitParam;
                service.comAdobeCqSocialTranslationImplTranslationServiceConfigManager(post, apply, delete, action, $location, propertylist, translateLanguage, translateDisplay, translateAttribution, translateCaching, translateSmartRendering, translateCachingDuration, translateSessionSaveInterval, translateSessionSaveBatchLimit, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialTranslationImplTranslationServiceConfigManager");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialTranslationImplTranslationServiceConfigManager", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialTranslationImplUGCLanguageDetector
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALTRANSLATIONIMPLUGCLANGUAGEDETECTOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialTranslationImplUGCLanguageDetector";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String eventTopicsParam = message.body().getString("event.topics");
                String eventTopics = (eventTopicsParam == null) ? null : eventTopicsParam;
                String eventFilterParam = message.body().getString("event.filter");
                String eventFilter = (eventFilterParam == null) ? null : eventFilterParam;
                JsonArray translateListenerTypeParam = message.body().getJsonArray("translate.listener.type");
                List<String> translateListenerType = (translateListenerTypeParam == null) ? null : Json.mapper.readValue(translateListenerTypeParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray translatePropertyListParam = message.body().getJsonArray("translate.property.list");
                List<String> translatePropertyList = (translatePropertyListParam == null) ? null : Json.mapper.readValue(translatePropertyListParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String poolSizeParam = message.body().getString("poolSize");
                Integer poolSize = (poolSizeParam == null) ? null : Json.mapper.readValue(poolSizeParam, Integer.class);
                String maxPoolSizeParam = message.body().getString("maxPoolSize");
                Integer maxPoolSize = (maxPoolSizeParam == null) ? null : Json.mapper.readValue(maxPoolSizeParam, Integer.class);
                String queueSizeParam = message.body().getString("queueSize");
                Integer queueSize = (queueSizeParam == null) ? null : Json.mapper.readValue(queueSizeParam, Integer.class);
                String keepAliveTimeParam = message.body().getString("keepAliveTime");
                Integer keepAliveTime = (keepAliveTimeParam == null) ? null : Json.mapper.readValue(keepAliveTimeParam, Integer.class);
                service.comAdobeCqSocialTranslationImplUGCLanguageDetector(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter, translateListenerType, translatePropertyList, poolSize, maxPoolSize, queueSize, keepAliveTime, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialTranslationImplUGCLanguageDetector");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialTranslationImplUGCLanguageDetector", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALUGCBASEDISPATCHERIMPLFLUSHSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String threadPoolSizeParam = message.body().getString("threadPoolSize");
                Integer threadPoolSize = (threadPoolSizeParam == null) ? null : Json.mapper.readValue(threadPoolSizeParam, Integer.class);
                String delayTimeParam = message.body().getString("delayTime");
                Integer delayTime = (delayTimeParam == null) ? null : Json.mapper.readValue(delayTimeParam, Integer.class);
                String workerSleepTimeParam = message.body().getString("workerSleepTime");
                Integer workerSleepTime = (workerSleepTimeParam == null) ? null : Json.mapper.readValue(workerSleepTimeParam, Integer.class);
                service.comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(post, apply, delete, action, $location, propertylist, threadPoolSize, delayTime, workerSleepTime, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALUGCBASEIMPLAYSNCREVERSEREPLICATORIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String poolSizeParam = message.body().getString("poolSize");
                Integer poolSize = (poolSizeParam == null) ? null : Json.mapper.readValue(poolSizeParam, Integer.class);
                String maxPoolSizeParam = message.body().getString("maxPoolSize");
                Integer maxPoolSize = (maxPoolSizeParam == null) ? null : Json.mapper.readValue(maxPoolSizeParam, Integer.class);
                String queueSizeParam = message.body().getString("queueSize");
                Integer queueSize = (queueSizeParam == null) ? null : Json.mapper.readValue(queueSizeParam, Integer.class);
                String keepAliveTimeParam = message.body().getString("keepAliveTime");
                Integer keepAliveTime = (keepAliveTimeParam == null) ? null : Json.mapper.readValue(keepAliveTimeParam, Integer.class);
                service.comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(post, apply, delete, action, $location, propertylist, poolSize, maxPoolSize, queueSize, keepAliveTime, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALUGCBASEIMPLPUBLISHERCONFIGURATIONIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String isPrimaryPublisherParam = message.body().getString("isPrimaryPublisher");
                Boolean isPrimaryPublisher = (isPrimaryPublisherParam == null) ? null : Json.mapper.readValue(isPrimaryPublisherParam, Boolean.class);
                service.comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(post, apply, delete, action, $location, propertylist, isPrimaryPublisher, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialUgcbaseImplSocialUtilsImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALUGCBASEIMPLSOCIALUTILSIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialUgcbaseImplSocialUtilsImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String legacyCloudUGCPathMappingParam = message.body().getString("legacyCloudUGCPathMapping");
                Boolean legacyCloudUGCPathMapping = (legacyCloudUGCPathMappingParam == null) ? null : Json.mapper.readValue(legacyCloudUGCPathMappingParam, Boolean.class);
                service.comAdobeCqSocialUgcbaseImplSocialUtilsImpl(post, apply, delete, action, $location, propertylist, legacyCloudUGCPathMapping, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialUgcbaseImplSocialUtilsImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialUgcbaseImplSocialUtilsImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALUGCBASEMODERATIONIMPLAUTOMODERATIONIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray automoderationSequenceParam = message.body().getJsonArray("automoderation.sequence");
                List<String> automoderationSequence = (automoderationSequenceParam == null) ? null : Json.mapper.readValue(automoderationSequenceParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String automoderationOnfailurestopParam = message.body().getString("automoderation.onfailurestop");
                Boolean automoderationOnfailurestop = (automoderationOnfailurestopParam == null) ? null : Json.mapper.readValue(automoderationOnfailurestopParam, Boolean.class);
                service.comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(post, apply, delete, action, $location, propertylist, automoderationSequence, automoderationOnfailurestop, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialUgcbaseModerationImplSentimentProcess
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALUGCBASEMODERATIONIMPLSENTIMENTPROCESS_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialUgcbaseModerationImplSentimentProcess";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray watchwordsPositiveParam = message.body().getJsonArray("watchwords.positive");
                List<String> watchwordsPositive = (watchwordsPositiveParam == null) ? null : Json.mapper.readValue(watchwordsPositiveParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray watchwordsNegativeParam = message.body().getJsonArray("watchwords.negative");
                List<String> watchwordsNegative = (watchwordsNegativeParam == null) ? null : Json.mapper.readValue(watchwordsNegativeParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String watchwordsPathParam = message.body().getString("watchwords.path");
                String watchwordsPath = (watchwordsPathParam == null) ? null : watchwordsPathParam;
                String sentimentPathParam = message.body().getString("sentiment.path");
                String sentimentPath = (sentimentPathParam == null) ? null : sentimentPathParam;
                service.comAdobeCqSocialUgcbaseModerationImplSentimentProcess(post, apply, delete, action, $location, propertylist, watchwordsPositive, watchwordsNegative, watchwordsPath, sentimentPath, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialUgcbaseModerationImplSentimentProcess");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialUgcbaseModerationImplSentimentProcess", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALUGCBASESECURITYIMPLDEFAULTATTACHMENTTYPEBLACKLI_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray defaultAttachmentTypeBlacklistParam = message.body().getJsonArray("default.attachment.type.blacklist");
                List<String> defaultAttachmentTypeBlacklist = (defaultAttachmentTypeBlacklistParam == null) ? null : Json.mapper.readValue(defaultAttachmentTypeBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray baselineAttachmentTypeBlacklistParam = message.body().getJsonArray("baseline.attachment.type.blacklist");
                List<String> baselineAttachmentTypeBlacklist = (baselineAttachmentTypeBlacklistParam == null) ? null : Json.mapper.readValue(baselineAttachmentTypeBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(post, apply, delete, action, $location, propertylist, defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALUGCBASESECURITYIMPLSAFERSLINGPOSTVALIDATORIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray parameterWhitelistParam = message.body().getJsonArray("parameter.whitelist");
                List<String> parameterWhitelist = (parameterWhitelistParam == null) ? null : Json.mapper.readValue(parameterWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray parameterWhitelistPrefixesParam = message.body().getJsonArray("parameter.whitelist.prefixes");
                List<String> parameterWhitelistPrefixes = (parameterWhitelistPrefixesParam == null) ? null : Json.mapper.readValue(parameterWhitelistPrefixesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray binaryParameterWhitelistParam = message.body().getJsonArray("binary.parameter.whitelist");
                List<String> binaryParameterWhitelist = (binaryParameterWhitelistParam == null) ? null : Json.mapper.readValue(binaryParameterWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray modifierWhitelistParam = message.body().getJsonArray("modifier.whitelist");
                List<String> modifierWhitelist = (modifierWhitelistParam == null) ? null : Json.mapper.readValue(modifierWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray operationWhitelistParam = message.body().getJsonArray("operation.whitelist");
                List<String> operationWhitelist = (operationWhitelistParam == null) ? null : Json.mapper.readValue(operationWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray operationWhitelistPrefixesParam = message.body().getJsonArray("operation.whitelist.prefixes");
                List<String> operationWhitelistPrefixes = (operationWhitelistPrefixesParam == null) ? null : Json.mapper.readValue(operationWhitelistPrefixesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray typehintWhitelistParam = message.body().getJsonArray("typehint.whitelist");
                List<String> typehintWhitelist = (typehintWhitelistParam == null) ? null : Json.mapper.readValue(typehintWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray resourcetypeWhitelistParam = message.body().getJsonArray("resourcetype.whitelist");
                List<String> resourcetypeWhitelist = (resourcetypeWhitelistParam == null) ? null : Json.mapper.readValue(resourcetypeWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(post, apply, delete, action, $location, propertylist, parameterWhitelist, parameterWhitelistPrefixes, binaryParameterWhitelist, modifierWhitelist, operationWhitelist, operationWhitelistPrefixes, typehintWhitelist, resourcetypeWhitelist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALUSERENDPOINTSIMPLUSERSGROUPFROMPUBLISHSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingServletExtensionsParam = message.body().getString("sling.servlet.extensions");
                String slingServletExtensions = (slingServletExtensionsParam == null) ? null : slingServletExtensionsParam;
                String slingServletPathsParam = message.body().getString("sling.servlet.paths");
                String slingServletPaths = (slingServletPathsParam == null) ? null : slingServletPathsParam;
                String slingServletMethodsParam = message.body().getString("sling.servlet.methods");
                String slingServletMethods = (slingServletMethodsParam == null) ? null : slingServletMethodsParam;
                service.comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(post, apply, delete, action, $location, propertylist, slingServletExtensions, slingServletPaths, slingServletMethods, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqSocialUserImplTransportHttpToPublisher
        vertx.eventBus().<JsonObject> consumer(COMADOBECQSOCIALUSERIMPLTRANSPORTHTTPTOPUBLISHER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqSocialUserImplTransportHttpToPublisher";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enableParam = message.body().getString("enable");
                Boolean enable = (enableParam == null) ? null : Json.mapper.readValue(enableParam, Boolean.class);
                JsonArray agentConfigurationParam = message.body().getJsonArray("agent.configuration");
                List<String> agentConfiguration = (agentConfigurationParam == null) ? null : Json.mapper.readValue(agentConfigurationParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String contextPathParam = message.body().getString("context.path");
                String contextPath = (contextPathParam == null) ? null : contextPathParam;
                JsonArray disabledCipherSuitesParam = message.body().getJsonArray("disabled.cipher.suites");
                List<String> disabledCipherSuites = (disabledCipherSuitesParam == null) ? null : Json.mapper.readValue(disabledCipherSuitesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray enabledCipherSuitesParam = message.body().getJsonArray("enabled.cipher.suites");
                List<String> enabledCipherSuites = (enabledCipherSuitesParam == null) ? null : Json.mapper.readValue(enabledCipherSuitesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqSocialUserImplTransportHttpToPublisher(post, apply, delete, action, $location, propertylist, enable, agentConfiguration, contextPath, disabledCipherSuites, enabledCipherSuites, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqSocialUserImplTransportHttpToPublisher");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqSocialUserImplTransportHttpToPublisher", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact
        vertx.eventBus().<JsonObject> consumer(COMADOBECQUIWCMCOMMONSINTERNALSERVLETSRTERTEFILTERSERVLETFACT_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray resourceTypesParam = message.body().getJsonArray("resource.types");
                List<String> resourceTypes = (resourceTypesParam == null) ? null : Json.mapper.readValue(resourceTypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(post, apply, delete, action, $location, propertylist, resourceTypes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqUpgradesCleanupImplUpgradeContentCleanup
        vertx.eventBus().<JsonObject> consumer(COMADOBECQUPGRADESCLEANUPIMPLUPGRADECONTENTCLEANUP_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqUpgradesCleanupImplUpgradeContentCleanup";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray deletePathRegexpsParam = message.body().getJsonArray("delete.path.regexps");
                List<String> deletePathRegexps = (deletePathRegexpsParam == null) ? null : Json.mapper.readValue(deletePathRegexpsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String deleteSql2QueryParam = message.body().getString("delete.sql2.query");
                String deleteSql2Query = (deleteSql2QueryParam == null) ? null : deleteSql2QueryParam;
                service.comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(post, apply, delete, action, $location, propertylist, deletePathRegexps, deleteSql2Query, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqUpgradesCleanupImplUpgradeContentCleanup");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqUpgradesCleanupImplUpgradeContentCleanup", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup
        vertx.eventBus().<JsonObject> consumer(COMADOBECQUPGRADESCLEANUPIMPLUPGRADEINSTALLFOLDERCLEANUP_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray deleteNameRegexpsParam = message.body().getJsonArray("delete.name.regexps");
                List<String> deleteNameRegexps = (deleteNameRegexpsParam == null) ? null : Json.mapper.readValue(deleteNameRegexpsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(post, apply, delete, action, $location, propertylist, deleteNameRegexps, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService
        vertx.eventBus().<JsonObject> consumer(COMADOBECQWCMJOBSASYNCIMPLASYNCDELETECONFIGPROVIDERSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String thresholdParam = message.body().getString("threshold");
                Integer threshold = (thresholdParam == null) ? null : Json.mapper.readValue(thresholdParam, Integer.class);
                String jobTopicNameParam = message.body().getString("jobTopicName");
                String jobTopicName = (jobTopicNameParam == null) ? null : jobTopicNameParam;
                String emailEnabledParam = message.body().getString("emailEnabled");
                Boolean emailEnabled = (emailEnabledParam == null) ? null : Json.mapper.readValue(emailEnabledParam, Boolean.class);
                service.comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(post, apply, delete, action, $location, propertylist, threshold, jobTopicName, emailEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask
        vertx.eventBus().<JsonObject> consumer(COMADOBECQWCMJOBSASYNCIMPLASYNCJOBCLEANUPTASK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String schedulerExpressionParam = message.body().getString("scheduler.expression");
                String schedulerExpression = (schedulerExpressionParam == null) ? null : schedulerExpressionParam;
                String jobPurgeThresholdParam = message.body().getString("job.purge.threshold");
                Integer jobPurgeThreshold = (jobPurgeThresholdParam == null) ? null : Json.mapper.readValue(jobPurgeThresholdParam, Integer.class);
                String jobPurgeMaxJobsParam = message.body().getString("job.purge.max.jobs");
                Integer jobPurgeMaxJobs = (jobPurgeMaxJobsParam == null) ? null : Json.mapper.readValue(jobPurgeMaxJobsParam, Integer.class);
                service.comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(post, apply, delete, action, $location, propertylist, schedulerExpression, jobPurgeThreshold, jobPurgeMaxJobs, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService
        vertx.eventBus().<JsonObject> consumer(COMADOBECQWCMJOBSASYNCIMPLASYNCMOVECONFIGPROVIDERSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String thresholdParam = message.body().getString("threshold");
                Integer threshold = (thresholdParam == null) ? null : Json.mapper.readValue(thresholdParam, Integer.class);
                String jobTopicNameParam = message.body().getString("jobTopicName");
                String jobTopicName = (jobTopicNameParam == null) ? null : jobTopicNameParam;
                String emailEnabledParam = message.body().getString("emailEnabled");
                Boolean emailEnabled = (emailEnabledParam == null) ? null : Json.mapper.readValue(emailEnabledParam, Boolean.class);
                service.comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(post, apply, delete, action, $location, propertylist, threshold, jobTopicName, emailEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService
        vertx.eventBus().<JsonObject> consumer(COMADOBECQWCMJOBSASYNCIMPLASYNCPAGEMOVECONFIGPROVIDERSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String thresholdParam = message.body().getString("threshold");
                Integer threshold = (thresholdParam == null) ? null : Json.mapper.readValue(thresholdParam, Integer.class);
                String jobTopicNameParam = message.body().getString("jobTopicName");
                String jobTopicName = (jobTopicNameParam == null) ? null : jobTopicNameParam;
                String emailEnabledParam = message.body().getString("emailEnabled");
                Boolean emailEnabled = (emailEnabledParam == null) ? null : Json.mapper.readValue(emailEnabledParam, Boolean.class);
                service.comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(post, apply, delete, action, $location, propertylist, threshold, jobTopicName, emailEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqWcmLaunchesImplLaunchesEventHandler
        vertx.eventBus().<JsonObject> consumer(COMADOBECQWCMLAUNCHESIMPLLAUNCHESEVENTHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqWcmLaunchesImplLaunchesEventHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String eventFilterParam = message.body().getString("event.filter");
                String eventFilter = (eventFilterParam == null) ? null : eventFilterParam;
                String launchesEventhandlerThreadpoolMaxsizeParam = message.body().getString("launches.eventhandler.threadpool.maxsize");
                Integer launchesEventhandlerThreadpoolMaxsize = (launchesEventhandlerThreadpoolMaxsizeParam == null) ? null : Json.mapper.readValue(launchesEventhandlerThreadpoolMaxsizeParam, Integer.class);
                String launchesEventhandlerThreadpoolPriorityParam = message.body().getString("launches.eventhandler.threadpool.priority");
                String launchesEventhandlerThreadpoolPriority = (launchesEventhandlerThreadpoolPriorityParam == null) ? null : launchesEventhandlerThreadpoolPriorityParam;
                String launchesEventhandlerUpdatelastmodificationParam = message.body().getString("launches.eventhandler.updatelastmodification");
                Boolean launchesEventhandlerUpdatelastmodification = (launchesEventhandlerUpdatelastmodificationParam == null) ? null : Json.mapper.readValue(launchesEventhandlerUpdatelastmodificationParam, Boolean.class);
                service.comAdobeCqWcmLaunchesImplLaunchesEventHandler(post, apply, delete, action, $location, propertylist, eventFilter, launchesEventhandlerThreadpoolMaxsize, launchesEventhandlerThreadpoolPriority, launchesEventhandlerUpdatelastmodification, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqWcmLaunchesImplLaunchesEventHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqWcmLaunchesImplLaunchesEventHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator
        vertx.eventBus().<JsonObject> consumer(COMADOBECQWCMMOBILEQRCODESERVLETQRCODEIMAGEGENERATOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmQrcodeServletWhitelistParam = message.body().getJsonArray("cq.wcm.qrcode.servlet.whitelist");
                List<String> cqWcmQrcodeServletWhitelist = (cqWcmQrcodeServletWhitelistParam == null) ? null : Json.mapper.readValue(cqWcmQrcodeServletWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(post, apply, delete, action, $location, propertylist, cqWcmQrcodeServletWhitelist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQWCMSTYLEINTERNALCOMPONENTSTYLEINFOCACHEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String sizeParam = message.body().getString("size");
                Integer size = (sizeParam == null) ? null : Json.mapper.readValue(sizeParam, Integer.class);
                service.comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(post, apply, delete, action, $location, propertylist, size, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBECQWCMTRANSLATIONIMPLTRANSLATIONPLATFORMCONFIGURATIONIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String syncTranslationStateSchedulingFormatParam = message.body().getString("syncTranslationState.schedulingFormat");
                String syncTranslationStateSchedulingFormat = (syncTranslationStateSchedulingFormatParam == null) ? null : syncTranslationStateSchedulingFormatParam;
                String schedulingRepeatTranslationSchedulingFormatParam = message.body().getString("schedulingRepeatTranslation.schedulingFormat");
                String schedulingRepeatTranslationSchedulingFormat = (schedulingRepeatTranslationSchedulingFormatParam == null) ? null : schedulingRepeatTranslationSchedulingFormatParam;
                String syncTranslationStateLockTimeoutInMinutesParam = message.body().getString("syncTranslationState.lockTimeoutInMinutes");
                String syncTranslationStateLockTimeoutInMinutes = (syncTranslationStateLockTimeoutInMinutesParam == null) ? null : syncTranslationStateLockTimeoutInMinutesParam;
                String exportFormatParam = message.body().getString("export.format");
                String exportFormat = (exportFormatParam == null) ? null : exportFormatParam;
                service.comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(post, apply, delete, action, $location, propertylist, syncTranslationStateSchedulingFormat, schedulingRepeatTranslationSchedulingFormat, syncTranslationStateLockTimeoutInMinutes, exportFormat, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService
        vertx.eventBus().<JsonObject> consumer(COMADOBEFDFPCONFIGFORMSPORTALDRAFTSANDSUBMISSIONCONFIGSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray portalOutboxesParam = message.body().getJsonArray("portal.outboxes");
                List<String> portalOutboxes = (portalOutboxesParam == null) ? null : Json.mapper.readValue(portalOutboxesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String draftDataServiceParam = message.body().getString("draft.data.service");
                String draftDataService = (draftDataServiceParam == null) ? null : draftDataServiceParam;
                String draftMetadataServiceParam = message.body().getString("draft.metadata.service");
                String draftMetadataService = (draftMetadataServiceParam == null) ? null : draftMetadataServiceParam;
                String submitDataServiceParam = message.body().getString("submit.data.service");
                String submitDataService = (submitDataServiceParam == null) ? null : submitDataServiceParam;
                String submitMetadataServiceParam = message.body().getString("submit.metadata.service");
                String submitMetadataService = (submitMetadataServiceParam == null) ? null : submitMetadataServiceParam;
                String pendingSignDataServiceParam = message.body().getString("pendingSign.data.service");
                String pendingSignDataService = (pendingSignDataServiceParam == null) ? null : pendingSignDataServiceParam;
                String pendingSignMetadataServiceParam = message.body().getString("pendingSign.metadata.service");
                String pendingSignMetadataService = (pendingSignMetadataServiceParam == null) ? null : pendingSignMetadataServiceParam;
                service.comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(post, apply, delete, action, $location, propertylist, portalOutboxes, draftDataService, draftMetadataService, submitDataService, submitMetadataService, pendingSignDataService, pendingSignMetadataService, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeFdFpConfigFormsPortalSchedulerService
        vertx.eventBus().<JsonObject> consumer(COMADOBEFDFPCONFIGFORMSPORTALSCHEDULERSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeFdFpConfigFormsPortalSchedulerService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String formportalIntervalParam = message.body().getString("formportal.interval");
                String formportalInterval = (formportalIntervalParam == null) ? null : formportalIntervalParam;
                service.comAdobeFdFpConfigFormsPortalSchedulerService(post, apply, delete, action, $location, propertylist, formportalInterval, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeFdFpConfigFormsPortalSchedulerService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeFdFpConfigFormsPortalSchedulerService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeFormsCommonServiceImplDefaultDataProvider
        vertx.eventBus().<JsonObject> consumer(COMADOBEFORMSCOMMONSERVICEIMPLDEFAULTDATAPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeFormsCommonServiceImplDefaultDataProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray alloweddataFileLocationsParam = message.body().getJsonArray("alloweddataFileLocations");
                List<String> alloweddataFileLocations = (alloweddataFileLocationsParam == null) ? null : Json.mapper.readValue(alloweddataFileLocationsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeFormsCommonServiceImplDefaultDataProvider(post, apply, delete, action, $location, propertylist, alloweddataFileLocations, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeFormsCommonServiceImplDefaultDataProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeFormsCommonServiceImplDefaultDataProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp
        vertx.eventBus().<JsonObject> consumer(COMADOBEFORMSCOMMONSERVICEIMPLFORMSCOMMONCONFIGURATIONSERVICEIMP_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String tempStorageConfigParam = message.body().getString("tempStorageConfig");
                String tempStorageConfig = (tempStorageConfigParam == null) ? null : tempStorageConfigParam;
                service.comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(post, apply, delete, action, $location, propertylist, tempStorageConfig, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeFormsCommonServletTempCleanUpTask
        vertx.eventBus().<JsonObject> consumer(COMADOBEFORMSCOMMONSERVLETTEMPCLEANUPTASK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeFormsCommonServletTempCleanUpTask";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String schedulerExpressionParam = message.body().getString("scheduler.expression");
                String schedulerExpression = (schedulerExpressionParam == null) ? null : schedulerExpressionParam;
                String durationForTemporaryStorageParam = message.body().getString("Duration for Temporary Storage");
                String durationForTemporaryStorage = (durationForTemporaryStorageParam == null) ? null : durationForTemporaryStorageParam;
                String durationForAnonymousStorageParam = message.body().getString("Duration for Anonymous Storage");
                String durationForAnonymousStorage = (durationForAnonymousStorageParam == null) ? null : durationForAnonymousStorageParam;
                service.comAdobeFormsCommonServletTempCleanUpTask(post, apply, delete, action, $location, propertylist, schedulerExpression, durationForTemporaryStorage, durationForAnonymousStorage, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeFormsCommonServletTempCleanUpTask");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeFormsCommonServletTempCleanUpTask", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAcpPlatformPlatformServlet
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEACPPLATFORMPLATFORMSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAcpPlatformPlatformServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String queryLimitParam = message.body().getString("query.limit");
                Integer queryLimit = (queryLimitParam == null) ? null : Json.mapper.readValue(queryLimitParam, Integer.class);
                JsonArray fileTypeExtensionMapParam = message.body().getJsonArray("file.type.extension.map");
                List<String> fileTypeExtensionMap = (fileTypeExtensionMapParam == null) ? null : Json.mapper.readValue(fileTypeExtensionMapParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteAcpPlatformPlatformServlet(post, apply, delete, action, $location, propertylist, queryLimit, fileTypeExtensionMap, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAcpPlatformPlatformServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAcpPlatformPlatformServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteActivitystreamsImplActivityManagerImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEACTIVITYSTREAMSIMPLACTIVITYMANAGERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteActivitystreamsImplActivityManagerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray aggregateRelationshipsParam = message.body().getJsonArray("aggregate.relationships");
                List<String> aggregateRelationships = (aggregateRelationshipsParam == null) ? null : Json.mapper.readValue(aggregateRelationshipsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String aggregateDescendVirtualParam = message.body().getString("aggregate.descend.virtual");
                Boolean aggregateDescendVirtual = (aggregateDescendVirtualParam == null) ? null : Json.mapper.readValue(aggregateDescendVirtualParam, Boolean.class);
                service.comAdobeGraniteActivitystreamsImplActivityManagerImpl(post, apply, delete, action, $location, propertylist, aggregateRelationships, aggregateDescendVirtual, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteActivitystreamsImplActivityManagerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteActivitystreamsImplActivityManagerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAnalyzerBaseSystemStatusServlet
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEANALYZERBASESYSTEMSTATUSSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAnalyzerBaseSystemStatusServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String disabledParam = message.body().getString("disabled");
                Boolean disabled = (disabledParam == null) ? null : Json.mapper.readValue(disabledParam, Boolean.class);
                service.comAdobeGraniteAnalyzerBaseSystemStatusServlet(post, apply, delete, action, $location, propertylist, disabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAnalyzerBaseSystemStatusServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAnalyzerBaseSystemStatusServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEANALYZERSCRIPTSCOMPILEALLSCRIPTSCOMPILERSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String disabledParam = message.body().getString("disabled");
                Boolean disabled = (disabledParam == null) ? null : Json.mapper.readValue(disabledParam, Boolean.class);
                service.comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(post, apply, delete, action, $location, propertylist, disabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteApicontrollerFilterResolverHookFactory
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAPICONTROLLERFILTERRESOLVERHOOKFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteApicontrollerFilterResolverHookFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String comAdobeCqCdnCdnRewriterParam = message.body().getString("com.adobe.cq.cdn.cdn-rewriter");
                String comAdobeCqCdnCdnRewriter = (comAdobeCqCdnCdnRewriterParam == null) ? null : comAdobeCqCdnCdnRewriterParam;
                String comAdobeCqCloudConfigComponentsParam = message.body().getString("com.adobe.cq.cloud-config.components");
                String comAdobeCqCloudConfigComponents = (comAdobeCqCloudConfigComponentsParam == null) ? null : comAdobeCqCloudConfigComponentsParam;
                String comAdobeCqCloudConfigCoreParam = message.body().getString("com.adobe.cq.cloud-config.core");
                String comAdobeCqCloudConfigCore = (comAdobeCqCloudConfigCoreParam == null) ? null : comAdobeCqCloudConfigCoreParam;
                String comAdobeCqCloudConfigUiParam = message.body().getString("com.adobe.cq.cloud-config.ui");
                String comAdobeCqCloudConfigUi = (comAdobeCqCloudConfigUiParam == null) ? null : comAdobeCqCloudConfigUiParam;
                String comAdobeCqComAdobeCqEditorParam = message.body().getString("com.adobe.cq.com.adobe.cq.editor");
                String comAdobeCqComAdobeCqEditor = (comAdobeCqComAdobeCqEditorParam == null) ? null : comAdobeCqComAdobeCqEditorParam;
                String comAdobeCqComAdobeCqProjectsCoreParam = message.body().getString("com.adobe.cq.com.adobe.cq.projects.core");
                String comAdobeCqComAdobeCqProjectsCore = (comAdobeCqComAdobeCqProjectsCoreParam == null) ? null : comAdobeCqComAdobeCqProjectsCoreParam;
                String comAdobeCqComAdobeCqProjectsWcmCoreParam = message.body().getString("com.adobe.cq.com.adobe.cq.projects.wcm.core");
                String comAdobeCqComAdobeCqProjectsWcmCore = (comAdobeCqComAdobeCqProjectsWcmCoreParam == null) ? null : comAdobeCqComAdobeCqProjectsWcmCoreParam;
                String comAdobeCqComAdobeCqUiCommonsParam = message.body().getString("com.adobe.cq.com.adobe.cq.ui.commons");
                String comAdobeCqComAdobeCqUiCommons = (comAdobeCqComAdobeCqUiCommonsParam == null) ? null : comAdobeCqComAdobeCqUiCommonsParam;
                String comAdobeCqComAdobeCqWcmStyleParam = message.body().getString("com.adobe.cq.com.adobe.cq.wcm.style");
                String comAdobeCqComAdobeCqWcmStyle = (comAdobeCqComAdobeCqWcmStyleParam == null) ? null : comAdobeCqComAdobeCqWcmStyleParam;
                String comAdobeCqCqActivitymapIntegrationParam = message.body().getString("com.adobe.cq.cq-activitymap-integration");
                String comAdobeCqCqActivitymapIntegration = (comAdobeCqCqActivitymapIntegrationParam == null) ? null : comAdobeCqCqActivitymapIntegrationParam;
                String comAdobeCqCqContexthubCommonsParam = message.body().getString("com.adobe.cq.cq-contexthub-commons");
                String comAdobeCqCqContexthubCommons = (comAdobeCqCqContexthubCommonsParam == null) ? null : comAdobeCqCqContexthubCommonsParam;
                String comAdobeCqCqDtmParam = message.body().getString("com.adobe.cq.cq-dtm");
                String comAdobeCqCqDtm = (comAdobeCqCqDtmParam == null) ? null : comAdobeCqCqDtmParam;
                String comAdobeCqCqHealthcheckParam = message.body().getString("com.adobe.cq.cq-healthcheck");
                String comAdobeCqCqHealthcheck = (comAdobeCqCqHealthcheckParam == null) ? null : comAdobeCqCqHealthcheckParam;
                String comAdobeCqCqMultisiteTargetingParam = message.body().getString("com.adobe.cq.cq-multisite-targeting");
                String comAdobeCqCqMultisiteTargeting = (comAdobeCqCqMultisiteTargetingParam == null) ? null : comAdobeCqCqMultisiteTargetingParam;
                String comAdobeCqCqPreUpgradeCleanupParam = message.body().getString("com.adobe.cq.cq-pre-upgrade-cleanup");
                String comAdobeCqCqPreUpgradeCleanup = (comAdobeCqCqPreUpgradeCleanupParam == null) ? null : comAdobeCqCqPreUpgradeCleanupParam;
                String comAdobeCqCqProductInfoProviderParam = message.body().getString("com.adobe.cq.cq-product-info-provider");
                String comAdobeCqCqProductInfoProvider = (comAdobeCqCqProductInfoProviderParam == null) ? null : comAdobeCqCqProductInfoProviderParam;
                String comAdobeCqCqRestSitesParam = message.body().getString("com.adobe.cq.cq-rest-sites");
                String comAdobeCqCqRestSites = (comAdobeCqCqRestSitesParam == null) ? null : comAdobeCqCqRestSitesParam;
                String comAdobeCqCqSecurityHcParam = message.body().getString("com.adobe.cq.cq-security-hc");
                String comAdobeCqCqSecurityHc = (comAdobeCqCqSecurityHcParam == null) ? null : comAdobeCqCqSecurityHcParam;
                String comAdobeCqDamCqDamSvgHandlerParam = message.body().getString("com.adobe.cq.dam.cq-dam-svg-handler");
                String comAdobeCqDamCqDamSvgHandler = (comAdobeCqDamCqDamSvgHandlerParam == null) ? null : comAdobeCqDamCqDamSvgHandlerParam;
                String comAdobeCqDamCqScene7ImagingParam = message.body().getString("com.adobe.cq.dam.cq-scene7-imaging");
                String comAdobeCqDamCqScene7Imaging = (comAdobeCqDamCqScene7ImagingParam == null) ? null : comAdobeCqDamCqScene7ImagingParam;
                String comAdobeCqDtmReactorCoreParam = message.body().getString("com.adobe.cq.dtm-reactor.core");
                String comAdobeCqDtmReactorCore = (comAdobeCqDtmReactorCoreParam == null) ? null : comAdobeCqDtmReactorCoreParam;
                String comAdobeCqDtmReactorUiParam = message.body().getString("com.adobe.cq.dtm-reactor.ui");
                String comAdobeCqDtmReactorUi = (comAdobeCqDtmReactorUiParam == null) ? null : comAdobeCqDtmReactorUiParam;
                String comAdobeCqExpJspelResolverParam = message.body().getString("com.adobe.cq.exp-jspel-resolver");
                String comAdobeCqExpJspelResolver = (comAdobeCqExpJspelResolverParam == null) ? null : comAdobeCqExpJspelResolverParam;
                String comAdobeCqInboxCqInboxParam = message.body().getString("com.adobe.cq.inbox.cq-inbox");
                String comAdobeCqInboxCqInbox = (comAdobeCqInboxCqInboxParam == null) ? null : comAdobeCqInboxCqInboxParam;
                String comAdobeCqJsonSchemaParserParam = message.body().getString("com.adobe.cq.json-schema-parser");
                String comAdobeCqJsonSchemaParser = (comAdobeCqJsonSchemaParserParam == null) ? null : comAdobeCqJsonSchemaParserParam;
                String comAdobeCqMediaCqMediaPublishingDpsFpCoreParam = message.body().getString("com.adobe.cq.media.cq-media-publishing-dps-fp-core");
                String comAdobeCqMediaCqMediaPublishingDpsFpCore = (comAdobeCqMediaCqMediaPublishingDpsFpCoreParam == null) ? null : comAdobeCqMediaCqMediaPublishingDpsFpCoreParam;
                String comAdobeCqMobileCqMobileCaasParam = message.body().getString("com.adobe.cq.mobile.cq-mobile-caas");
                String comAdobeCqMobileCqMobileCaas = (comAdobeCqMobileCqMobileCaasParam == null) ? null : comAdobeCqMobileCqMobileCaasParam;
                String comAdobeCqMobileCqMobileIndexBuilderParam = message.body().getString("com.adobe.cq.mobile.cq-mobile-index-builder");
                String comAdobeCqMobileCqMobileIndexBuilder = (comAdobeCqMobileCqMobileIndexBuilderParam == null) ? null : comAdobeCqMobileCqMobileIndexBuilderParam;
                String comAdobeCqMobileCqMobilePhonegapBuildParam = message.body().getString("com.adobe.cq.mobile.cq-mobile-phonegap-build");
                String comAdobeCqMobileCqMobilePhonegapBuild = (comAdobeCqMobileCqMobilePhonegapBuildParam == null) ? null : comAdobeCqMobileCqMobilePhonegapBuildParam;
                String comAdobeCqMyspellParam = message.body().getString("com.adobe.cq.myspell");
                String comAdobeCqMyspell = (comAdobeCqMyspellParam == null) ? null : comAdobeCqMyspellParam;
                String comAdobeCqSampleWeRetailCoreParam = message.body().getString("com.adobe.cq.sample.we.retail.core");
                String comAdobeCqSampleWeRetailCore = (comAdobeCqSampleWeRetailCoreParam == null) ? null : comAdobeCqSampleWeRetailCoreParam;
                String comAdobeCqScreensComAdobeCqScreensDccParam = message.body().getString("com.adobe.cq.screens.com.adobe.cq.screens.dcc");
                String comAdobeCqScreensComAdobeCqScreensDcc = (comAdobeCqScreensComAdobeCqScreensDccParam == null) ? null : comAdobeCqScreensComAdobeCqScreensDccParam;
                String comAdobeCqScreensComAdobeCqScreensMqCoreParam = message.body().getString("com.adobe.cq.screens.com.adobe.cq.screens.mq.core");
                String comAdobeCqScreensComAdobeCqScreensMqCore = (comAdobeCqScreensComAdobeCqScreensMqCoreParam == null) ? null : comAdobeCqScreensComAdobeCqScreensMqCoreParam;
                String comAdobeCqSocialCqSocialAsProviderParam = message.body().getString("com.adobe.cq.social.cq-social-as-provider");
                String comAdobeCqSocialCqSocialAsProvider = (comAdobeCqSocialCqSocialAsProviderParam == null) ? null : comAdobeCqSocialCqSocialAsProviderParam;
                String comAdobeCqSocialCqSocialBadgingBasicImplParam = message.body().getString("com.adobe.cq.social.cq-social-badging-basic-impl");
                String comAdobeCqSocialCqSocialBadgingBasicImpl = (comAdobeCqSocialCqSocialBadgingBasicImplParam == null) ? null : comAdobeCqSocialCqSocialBadgingBasicImplParam;
                String comAdobeCqSocialCqSocialBadgingImplParam = message.body().getString("com.adobe.cq.social.cq-social-badging-impl");
                String comAdobeCqSocialCqSocialBadgingImpl = (comAdobeCqSocialCqSocialBadgingImplParam == null) ? null : comAdobeCqSocialCqSocialBadgingImplParam;
                String comAdobeCqSocialCqSocialCalendarImplParam = message.body().getString("com.adobe.cq.social.cq-social-calendar-impl");
                String comAdobeCqSocialCqSocialCalendarImpl = (comAdobeCqSocialCqSocialCalendarImplParam == null) ? null : comAdobeCqSocialCqSocialCalendarImplParam;
                String comAdobeCqSocialCqSocialContentFragmentsImplParam = message.body().getString("com.adobe.cq.social.cq-social-content-fragments-impl");
                String comAdobeCqSocialCqSocialContentFragmentsImpl = (comAdobeCqSocialCqSocialContentFragmentsImplParam == null) ? null : comAdobeCqSocialCqSocialContentFragmentsImplParam;
                String comAdobeCqSocialCqSocialEnablementImplParam = message.body().getString("com.adobe.cq.social.cq-social-enablement-impl");
                String comAdobeCqSocialCqSocialEnablementImpl = (comAdobeCqSocialCqSocialEnablementImplParam == null) ? null : comAdobeCqSocialCqSocialEnablementImplParam;
                String comAdobeCqSocialCqSocialGraphImplParam = message.body().getString("com.adobe.cq.social.cq-social-graph-impl");
                String comAdobeCqSocialCqSocialGraphImpl = (comAdobeCqSocialCqSocialGraphImplParam == null) ? null : comAdobeCqSocialCqSocialGraphImplParam;
                String comAdobeCqSocialCqSocialIdeationImplParam = message.body().getString("com.adobe.cq.social.cq-social-ideation-impl");
                String comAdobeCqSocialCqSocialIdeationImpl = (comAdobeCqSocialCqSocialIdeationImplParam == null) ? null : comAdobeCqSocialCqSocialIdeationImplParam;
                String comAdobeCqSocialCqSocialJcrProviderParam = message.body().getString("com.adobe.cq.social.cq-social-jcr-provider");
                String comAdobeCqSocialCqSocialJcrProvider = (comAdobeCqSocialCqSocialJcrProviderParam == null) ? null : comAdobeCqSocialCqSocialJcrProviderParam;
                String comAdobeCqSocialCqSocialMembersImplParam = message.body().getString("com.adobe.cq.social.cq-social-members-impl");
                String comAdobeCqSocialCqSocialMembersImpl = (comAdobeCqSocialCqSocialMembersImplParam == null) ? null : comAdobeCqSocialCqSocialMembersImplParam;
                String comAdobeCqSocialCqSocialMsProviderParam = message.body().getString("com.adobe.cq.social.cq-social-ms-provider");
                String comAdobeCqSocialCqSocialMsProvider = (comAdobeCqSocialCqSocialMsProviderParam == null) ? null : comAdobeCqSocialCqSocialMsProviderParam;
                String comAdobeCqSocialCqSocialNotificationsChannelsWebParam = message.body().getString("com.adobe.cq.social.cq-social-notifications-channels-web");
                String comAdobeCqSocialCqSocialNotificationsChannelsWeb = (comAdobeCqSocialCqSocialNotificationsChannelsWebParam == null) ? null : comAdobeCqSocialCqSocialNotificationsChannelsWebParam;
                String comAdobeCqSocialCqSocialNotificationsImplParam = message.body().getString("com.adobe.cq.social.cq-social-notifications-impl");
                String comAdobeCqSocialCqSocialNotificationsImpl = (comAdobeCqSocialCqSocialNotificationsImplParam == null) ? null : comAdobeCqSocialCqSocialNotificationsImplParam;
                String comAdobeCqSocialCqSocialRdbProviderParam = message.body().getString("com.adobe.cq.social.cq-social-rdb-provider");
                String comAdobeCqSocialCqSocialRdbProvider = (comAdobeCqSocialCqSocialRdbProviderParam == null) ? null : comAdobeCqSocialCqSocialRdbProviderParam;
                String comAdobeCqSocialCqSocialScfImplParam = message.body().getString("com.adobe.cq.social.cq-social-scf-impl");
                String comAdobeCqSocialCqSocialScfImpl = (comAdobeCqSocialCqSocialScfImplParam == null) ? null : comAdobeCqSocialCqSocialScfImplParam;
                String comAdobeCqSocialCqSocialScoringBasicImplParam = message.body().getString("com.adobe.cq.social.cq-social-scoring-basic-impl");
                String comAdobeCqSocialCqSocialScoringBasicImpl = (comAdobeCqSocialCqSocialScoringBasicImplParam == null) ? null : comAdobeCqSocialCqSocialScoringBasicImplParam;
                String comAdobeCqSocialCqSocialScoringImplParam = message.body().getString("com.adobe.cq.social.cq-social-scoring-impl");
                String comAdobeCqSocialCqSocialScoringImpl = (comAdobeCqSocialCqSocialScoringImplParam == null) ? null : comAdobeCqSocialCqSocialScoringImplParam;
                String comAdobeCqSocialCqSocialServiceusersImplParam = message.body().getString("com.adobe.cq.social.cq-social-serviceusers-impl");
                String comAdobeCqSocialCqSocialServiceusersImpl = (comAdobeCqSocialCqSocialServiceusersImplParam == null) ? null : comAdobeCqSocialCqSocialServiceusersImplParam;
                String comAdobeCqSocialCqSocialSrpImplParam = message.body().getString("com.adobe.cq.social.cq-social-srp-impl");
                String comAdobeCqSocialCqSocialSrpImpl = (comAdobeCqSocialCqSocialSrpImplParam == null) ? null : comAdobeCqSocialCqSocialSrpImplParam;
                String comAdobeCqSocialCqSocialUgcbaseImplParam = message.body().getString("com.adobe.cq.social.cq-social-ugcbase-impl");
                String comAdobeCqSocialCqSocialUgcbaseImpl = (comAdobeCqSocialCqSocialUgcbaseImplParam == null) ? null : comAdobeCqSocialCqSocialUgcbaseImplParam;
                String comAdobeDamCqDamCfmImplParam = message.body().getString("com.adobe.dam.cq-dam-cfm-impl");
                String comAdobeDamCqDamCfmImpl = (comAdobeDamCqDamCfmImplParam == null) ? null : comAdobeDamCqDamCfmImplParam;
                String comAdobeFormsFoundationFormsFoundationBaseParam = message.body().getString("com.adobe.forms.foundation-forms-foundation-base");
                String comAdobeFormsFoundationFormsFoundationBase = (comAdobeFormsFoundationFormsFoundationBaseParam == null) ? null : comAdobeFormsFoundationFormsFoundationBaseParam;
                String comAdobeGraniteApicontrollerParam = message.body().getString("com.adobe.granite.apicontroller");
                String comAdobeGraniteApicontroller = (comAdobeGraniteApicontrollerParam == null) ? null : comAdobeGraniteApicontrollerParam;
                String comAdobeGraniteAssetCoreParam = message.body().getString("com.adobe.granite.asset.core");
                String comAdobeGraniteAssetCore = (comAdobeGraniteAssetCoreParam == null) ? null : comAdobeGraniteAssetCoreParam;
                String comAdobeGraniteAuthSsoParam = message.body().getString("com.adobe.granite.auth.sso");
                String comAdobeGraniteAuthSso = (comAdobeGraniteAuthSsoParam == null) ? null : comAdobeGraniteAuthSsoParam;
                String comAdobeGraniteBundlesHcImplParam = message.body().getString("com.adobe.granite.bundles.hc.impl");
                String comAdobeGraniteBundlesHcImpl = (comAdobeGraniteBundlesHcImplParam == null) ? null : comAdobeGraniteBundlesHcImplParam;
                String comAdobeGraniteCompatRouterParam = message.body().getString("com.adobe.granite.compat-router");
                String comAdobeGraniteCompatRouter = (comAdobeGraniteCompatRouterParam == null) ? null : comAdobeGraniteCompatRouterParam;
                String comAdobeGraniteConfParam = message.body().getString("com.adobe.granite.conf");
                String comAdobeGraniteConf = (comAdobeGraniteConfParam == null) ? null : comAdobeGraniteConfParam;
                String comAdobeGraniteConfUiCoreParam = message.body().getString("com.adobe.granite.conf.ui.core");
                String comAdobeGraniteConfUiCore = (comAdobeGraniteConfUiCoreParam == null) ? null : comAdobeGraniteConfUiCoreParam;
                String comAdobeGraniteCorsParam = message.body().getString("com.adobe.granite.cors");
                String comAdobeGraniteCors = (comAdobeGraniteCorsParam == null) ? null : comAdobeGraniteCorsParam;
                String comAdobeGraniteCrxExplorerParam = message.body().getString("com.adobe.granite.crx-explorer");
                String comAdobeGraniteCrxExplorer = (comAdobeGraniteCrxExplorerParam == null) ? null : comAdobeGraniteCrxExplorerParam;
                String comAdobeGraniteCrxdeLiteParam = message.body().getString("com.adobe.granite.crxde-lite");
                String comAdobeGraniteCrxdeLite = (comAdobeGraniteCrxdeLiteParam == null) ? null : comAdobeGraniteCrxdeLiteParam;
                String comAdobeGraniteCryptoConfigParam = message.body().getString("com.adobe.granite.crypto.config");
                String comAdobeGraniteCryptoConfig = (comAdobeGraniteCryptoConfigParam == null) ? null : comAdobeGraniteCryptoConfigParam;
                String comAdobeGraniteCryptoExtensionParam = message.body().getString("com.adobe.granite.crypto.extension");
                String comAdobeGraniteCryptoExtension = (comAdobeGraniteCryptoExtensionParam == null) ? null : comAdobeGraniteCryptoExtensionParam;
                String comAdobeGraniteCryptoFileParam = message.body().getString("com.adobe.granite.crypto.file");
                String comAdobeGraniteCryptoFile = (comAdobeGraniteCryptoFileParam == null) ? null : comAdobeGraniteCryptoFileParam;
                String comAdobeGraniteCryptoJcrParam = message.body().getString("com.adobe.granite.crypto.jcr");
                String comAdobeGraniteCryptoJcr = (comAdobeGraniteCryptoJcrParam == null) ? null : comAdobeGraniteCryptoJcrParam;
                String comAdobeGraniteCsrfParam = message.body().getString("com.adobe.granite.csrf");
                String comAdobeGraniteCsrf = (comAdobeGraniteCsrfParam == null) ? null : comAdobeGraniteCsrfParam;
                String comAdobeGraniteDistributionCoreParam = message.body().getString("com.adobe.granite.distribution.core");
                String comAdobeGraniteDistributionCore = (comAdobeGraniteDistributionCoreParam == null) ? null : comAdobeGraniteDistributionCoreParam;
                String comAdobeGraniteDropwizardMetricsParam = message.body().getString("com.adobe.granite.dropwizard.metrics");
                String comAdobeGraniteDropwizardMetrics = (comAdobeGraniteDropwizardMetricsParam == null) ? null : comAdobeGraniteDropwizardMetricsParam;
                String comAdobeGraniteFragsImplParam = message.body().getString("com.adobe.granite.frags.impl");
                String comAdobeGraniteFragsImpl = (comAdobeGraniteFragsImplParam == null) ? null : comAdobeGraniteFragsImplParam;
                String comAdobeGraniteGibsonParam = message.body().getString("com.adobe.granite.gibson");
                String comAdobeGraniteGibson = (comAdobeGraniteGibsonParam == null) ? null : comAdobeGraniteGibsonParam;
                String comAdobeGraniteInfocollectorParam = message.body().getString("com.adobe.granite.infocollector");
                String comAdobeGraniteInfocollector = (comAdobeGraniteInfocollectorParam == null) ? null : comAdobeGraniteInfocollectorParam;
                String comAdobeGraniteInstallerFactoryPackagesParam = message.body().getString("com.adobe.granite.installer.factory.packages");
                String comAdobeGraniteInstallerFactoryPackages = (comAdobeGraniteInstallerFactoryPackagesParam == null) ? null : comAdobeGraniteInstallerFactoryPackagesParam;
                String comAdobeGraniteJettySslParam = message.body().getString("com.adobe.granite.jetty.ssl");
                String comAdobeGraniteJettySsl = (comAdobeGraniteJettySslParam == null) ? null : comAdobeGraniteJettySslParam;
                String comAdobeGraniteJobsAsyncParam = message.body().getString("com.adobe.granite.jobs.async");
                String comAdobeGraniteJobsAsync = (comAdobeGraniteJobsAsyncParam == null) ? null : comAdobeGraniteJobsAsyncParam;
                String comAdobeGraniteMaintenanceOakParam = message.body().getString("com.adobe.granite.maintenance.oak");
                String comAdobeGraniteMaintenanceOak = (comAdobeGraniteMaintenanceOakParam == null) ? null : comAdobeGraniteMaintenanceOakParam;
                String comAdobeGraniteMonitoringCoreParam = message.body().getString("com.adobe.granite.monitoring.core");
                String comAdobeGraniteMonitoringCore = (comAdobeGraniteMonitoringCoreParam == null) ? null : comAdobeGraniteMonitoringCoreParam;
                String comAdobeGraniteQueriesParam = message.body().getString("com.adobe.granite.queries");
                String comAdobeGraniteQueries = (comAdobeGraniteQueriesParam == null) ? null : comAdobeGraniteQueriesParam;
                String comAdobeGraniteReplicationHcImplParam = message.body().getString("com.adobe.granite.replication.hc.impl");
                String comAdobeGraniteReplicationHcImpl = (comAdobeGraniteReplicationHcImplParam == null) ? null : comAdobeGraniteReplicationHcImplParam;
                String comAdobeGraniteRepositoryCheckerParam = message.body().getString("com.adobe.granite.repository.checker");
                String comAdobeGraniteRepositoryChecker = (comAdobeGraniteRepositoryCheckerParam == null) ? null : comAdobeGraniteRepositoryCheckerParam;
                String comAdobeGraniteRepositoryHcImplParam = message.body().getString("com.adobe.granite.repository.hc.impl");
                String comAdobeGraniteRepositoryHcImpl = (comAdobeGraniteRepositoryHcImplParam == null) ? null : comAdobeGraniteRepositoryHcImplParam;
                String comAdobeGraniteRestAssetsParam = message.body().getString("com.adobe.granite.rest.assets");
                String comAdobeGraniteRestAssets = (comAdobeGraniteRestAssetsParam == null) ? null : comAdobeGraniteRestAssetsParam;
                String comAdobeGraniteSecurityUiParam = message.body().getString("com.adobe.granite.security.ui");
                String comAdobeGraniteSecurityUi = (comAdobeGraniteSecurityUiParam == null) ? null : comAdobeGraniteSecurityUiParam;
                String comAdobeGraniteStartupParam = message.body().getString("com.adobe.granite.startup");
                String comAdobeGraniteStartup = (comAdobeGraniteStartupParam == null) ? null : comAdobeGraniteStartupParam;
                String comAdobeGraniteTagsoupParam = message.body().getString("com.adobe.granite.tagsoup");
                String comAdobeGraniteTagsoup = (comAdobeGraniteTagsoupParam == null) ? null : comAdobeGraniteTagsoupParam;
                String comAdobeGraniteTaskmanagementCoreParam = message.body().getString("com.adobe.granite.taskmanagement.core");
                String comAdobeGraniteTaskmanagementCore = (comAdobeGraniteTaskmanagementCoreParam == null) ? null : comAdobeGraniteTaskmanagementCoreParam;
                String comAdobeGraniteTaskmanagementWorkflowParam = message.body().getString("com.adobe.granite.taskmanagement.workflow");
                String comAdobeGraniteTaskmanagementWorkflow = (comAdobeGraniteTaskmanagementWorkflowParam == null) ? null : comAdobeGraniteTaskmanagementWorkflowParam;
                String comAdobeGraniteUiClientlibsCompilerLessParam = message.body().getString("com.adobe.granite.ui.clientlibs.compiler.less");
                String comAdobeGraniteUiClientlibsCompilerLess = (comAdobeGraniteUiClientlibsCompilerLessParam == null) ? null : comAdobeGraniteUiClientlibsCompilerLessParam;
                String comAdobeGraniteUiClientlibsProcessorGccParam = message.body().getString("com.adobe.granite.ui.clientlibs.processor.gcc");
                String comAdobeGraniteUiClientlibsProcessorGcc = (comAdobeGraniteUiClientlibsProcessorGccParam == null) ? null : comAdobeGraniteUiClientlibsProcessorGccParam;
                String comAdobeGraniteWebconsolePluginsParam = message.body().getString("com.adobe.granite.webconsole.plugins");
                String comAdobeGraniteWebconsolePlugins = (comAdobeGraniteWebconsolePluginsParam == null) ? null : comAdobeGraniteWebconsolePluginsParam;
                String comAdobeGraniteWorkflowConsoleParam = message.body().getString("com.adobe.granite.workflow.console");
                String comAdobeGraniteWorkflowConsole = (comAdobeGraniteWorkflowConsoleParam == null) ? null : comAdobeGraniteWorkflowConsoleParam;
                String comAdobeXmpWorkerFilesNativeFragmentLinuxParam = message.body().getString("com.adobe.xmp.worker.files.native.fragment.linux");
                String comAdobeXmpWorkerFilesNativeFragmentLinux = (comAdobeXmpWorkerFilesNativeFragmentLinuxParam == null) ? null : comAdobeXmpWorkerFilesNativeFragmentLinuxParam;
                String comAdobeXmpWorkerFilesNativeFragmentMacosxParam = message.body().getString("com.adobe.xmp.worker.files.native.fragment.macosx");
                String comAdobeXmpWorkerFilesNativeFragmentMacosx = (comAdobeXmpWorkerFilesNativeFragmentMacosxParam == null) ? null : comAdobeXmpWorkerFilesNativeFragmentMacosxParam;
                String comAdobeXmpWorkerFilesNativeFragmentWinParam = message.body().getString("com.adobe.xmp.worker.files.native.fragment.win");
                String comAdobeXmpWorkerFilesNativeFragmentWin = (comAdobeXmpWorkerFilesNativeFragmentWinParam == null) ? null : comAdobeXmpWorkerFilesNativeFragmentWinParam;
                String comDayCommonsOsgiWrapperSimpleJndiParam = message.body().getString("com.day.commons.osgi.wrapper.simple-jndi");
                String comDayCommonsOsgiWrapperSimpleJndi = (comDayCommonsOsgiWrapperSimpleJndiParam == null) ? null : comDayCommonsOsgiWrapperSimpleJndiParam;
                String comDayCqCqAuthhandlerParam = message.body().getString("com.day.cq.cq-authhandler");
                String comDayCqCqAuthhandler = (comDayCqCqAuthhandlerParam == null) ? null : comDayCqCqAuthhandlerParam;
                String comDayCqCqCompatConfigupdateParam = message.body().getString("com.day.cq.cq-compat-configupdate");
                String comDayCqCqCompatConfigupdate = (comDayCqCqCompatConfigupdateParam == null) ? null : comDayCqCqCompatConfigupdateParam;
                String comDayCqCqLicensebrandingParam = message.body().getString("com.day.cq.cq-licensebranding");
                String comDayCqCqLicensebranding = (comDayCqCqLicensebrandingParam == null) ? null : comDayCqCqLicensebrandingParam;
                String comDayCqCqNotifcationImplParam = message.body().getString("com.day.cq.cq-notifcation-impl");
                String comDayCqCqNotifcationImpl = (comDayCqCqNotifcationImplParam == null) ? null : comDayCqCqNotifcationImplParam;
                String comDayCqCqReplicationAuditParam = message.body().getString("com.day.cq.cq-replication-audit");
                String comDayCqCqReplicationAudit = (comDayCqCqReplicationAuditParam == null) ? null : comDayCqCqReplicationAuditParam;
                String comDayCqCqSearchExtParam = message.body().getString("com.day.cq.cq-search-ext");
                String comDayCqCqSearchExt = (comDayCqCqSearchExtParam == null) ? null : comDayCqCqSearchExtParam;
                String comDayCqDamCqDamAnnotationPrintParam = message.body().getString("com.day.cq.dam.cq-dam-annotation-print");
                String comDayCqDamCqDamAnnotationPrint = (comDayCqDamCqDamAnnotationPrintParam == null) ? null : comDayCqDamCqDamAnnotationPrintParam;
                String comDayCqDamCqDamAssetUsageParam = message.body().getString("com.day.cq.dam.cq-dam-asset-usage");
                String comDayCqDamCqDamAssetUsage = (comDayCqDamCqDamAssetUsageParam == null) ? null : comDayCqDamCqDamAssetUsageParam;
                String comDayCqDamCqDamS7damParam = message.body().getString("com.day.cq.dam.cq-dam-s7dam");
                String comDayCqDamCqDamS7dam = (comDayCqDamCqDamS7damParam == null) ? null : comDayCqDamCqDamS7damParam;
                String comDayCqDamCqDamSimilaritysearchParam = message.body().getString("com.day.cq.dam.cq-dam-similaritysearch");
                String comDayCqDamCqDamSimilaritysearch = (comDayCqDamCqDamSimilaritysearchParam == null) ? null : comDayCqDamCqDamSimilaritysearchParam;
                String comDayCqDamDamWebdavSupportParam = message.body().getString("com.day.cq.dam.dam-webdav-support");
                String comDayCqDamDamWebdavSupport = (comDayCqDamDamWebdavSupportParam == null) ? null : comDayCqDamDamWebdavSupportParam;
                String comDayCqPreUpgradeTasksParam = message.body().getString("com.day.cq.pre-upgrade-tasks");
                String comDayCqPreUpgradeTasks = (comDayCqPreUpgradeTasksParam == null) ? null : comDayCqPreUpgradeTasksParam;
                String comDayCqReplicationExtensionsParam = message.body().getString("com.day.cq.replication.extensions");
                String comDayCqReplicationExtensions = (comDayCqReplicationExtensionsParam == null) ? null : comDayCqReplicationExtensionsParam;
                String comDayCqWcmCqMsmCoreParam = message.body().getString("com.day.cq.wcm.cq-msm-core");
                String comDayCqWcmCqMsmCore = (comDayCqWcmCqMsmCoreParam == null) ? null : comDayCqWcmCqMsmCoreParam;
                String comDayCqWcmCqWcmTranslationParam = message.body().getString("com.day.cq.wcm.cq-wcm-translation");
                String comDayCqWcmCqWcmTranslation = (comDayCqWcmCqWcmTranslationParam == null) ? null : comDayCqWcmCqWcmTranslationParam;
                String dayCommonsJrawioParam = message.body().getString("day-commons-jrawio");
                String dayCommonsJrawio = (dayCommonsJrawioParam == null) ? null : dayCommonsJrawioParam;
                String orgApacheAriesJmxWhiteboardParam = message.body().getString("org.apache.aries.jmx.whiteboard");
                String orgApacheAriesJmxWhiteboard = (orgApacheAriesJmxWhiteboardParam == null) ? null : orgApacheAriesJmxWhiteboardParam;
                String orgApacheFelixHttpSslfilterParam = message.body().getString("org.apache.felix.http.sslfilter");
                String orgApacheFelixHttpSslfilter = (orgApacheFelixHttpSslfilterParam == null) ? null : orgApacheFelixHttpSslfilterParam;
                String orgApacheFelixOrgApacheFelixThreaddumpParam = message.body().getString("org.apache.felix.org.apache.felix.threaddump");
                String orgApacheFelixOrgApacheFelixThreaddump = (orgApacheFelixOrgApacheFelixThreaddumpParam == null) ? null : orgApacheFelixOrgApacheFelixThreaddumpParam;
                String orgApacheFelixWebconsolePluginsDsParam = message.body().getString("org.apache.felix.webconsole.plugins.ds");
                String orgApacheFelixWebconsolePluginsDs = (orgApacheFelixWebconsolePluginsDsParam == null) ? null : orgApacheFelixWebconsolePluginsDsParam;
                String orgApacheFelixWebconsolePluginsEventParam = message.body().getString("org.apache.felix.webconsole.plugins.event");
                String orgApacheFelixWebconsolePluginsEvent = (orgApacheFelixWebconsolePluginsEventParam == null) ? null : orgApacheFelixWebconsolePluginsEventParam;
                String orgApacheFelixWebconsolePluginsMemoryusageParam = message.body().getString("org.apache.felix.webconsole.plugins.memoryusage");
                String orgApacheFelixWebconsolePluginsMemoryusage = (orgApacheFelixWebconsolePluginsMemoryusageParam == null) ? null : orgApacheFelixWebconsolePluginsMemoryusageParam;
                String orgApacheFelixWebconsolePluginsPackageadminParam = message.body().getString("org.apache.felix.webconsole.plugins.packageadmin");
                String orgApacheFelixWebconsolePluginsPackageadmin = (orgApacheFelixWebconsolePluginsPackageadminParam == null) ? null : orgApacheFelixWebconsolePluginsPackageadminParam;
                String orgApacheJackrabbitOakAuthLdapParam = message.body().getString("org.apache.jackrabbit.oak-auth-ldap");
                String orgApacheJackrabbitOakAuthLdap = (orgApacheJackrabbitOakAuthLdapParam == null) ? null : orgApacheJackrabbitOakAuthLdapParam;
                String orgApacheJackrabbitOakSegmentTarParam = message.body().getString("org.apache.jackrabbit.oak-segment-tar");
                String orgApacheJackrabbitOakSegmentTar = (orgApacheJackrabbitOakSegmentTarParam == null) ? null : orgApacheJackrabbitOakSegmentTarParam;
                String orgApacheJackrabbitOakSolrOsgiParam = message.body().getString("org.apache.jackrabbit.oak-solr-osgi");
                String orgApacheJackrabbitOakSolrOsgi = (orgApacheJackrabbitOakSolrOsgiParam == null) ? null : orgApacheJackrabbitOakSolrOsgiParam;
                String orgApacheSlingBundleresourceImplParam = message.body().getString("org.apache.sling.bundleresource.impl");
                String orgApacheSlingBundleresourceImpl = (orgApacheSlingBundleresourceImplParam == null) ? null : orgApacheSlingBundleresourceImplParam;
                String orgApacheSlingCommonsFsclassloaderParam = message.body().getString("org.apache.sling.commons.fsclassloader");
                String orgApacheSlingCommonsFsclassloader = (orgApacheSlingCommonsFsclassloaderParam == null) ? null : orgApacheSlingCommonsFsclassloaderParam;
                String orgApacheSlingCommonsLogWebconsoleParam = message.body().getString("org.apache.sling.commons.log.webconsole");
                String orgApacheSlingCommonsLogWebconsole = (orgApacheSlingCommonsLogWebconsoleParam == null) ? null : orgApacheSlingCommonsLogWebconsoleParam;
                String orgApacheSlingDatasourceParam = message.body().getString("org.apache.sling.datasource");
                String orgApacheSlingDatasource = (orgApacheSlingDatasourceParam == null) ? null : orgApacheSlingDatasourceParam;
                String orgApacheSlingDiscoveryBaseParam = message.body().getString("org.apache.sling.discovery.base");
                String orgApacheSlingDiscoveryBase = (orgApacheSlingDiscoveryBaseParam == null) ? null : orgApacheSlingDiscoveryBaseParam;
                String orgApacheSlingDiscoveryOakParam = message.body().getString("org.apache.sling.discovery.oak");
                String orgApacheSlingDiscoveryOak = (orgApacheSlingDiscoveryOakParam == null) ? null : orgApacheSlingDiscoveryOakParam;
                String orgApacheSlingDiscoverySupportParam = message.body().getString("org.apache.sling.discovery.support");
                String orgApacheSlingDiscoverySupport = (orgApacheSlingDiscoverySupportParam == null) ? null : orgApacheSlingDiscoverySupportParam;
                String orgApacheSlingDistributionApiParam = message.body().getString("org.apache.sling.distribution.api");
                String orgApacheSlingDistributionApi = (orgApacheSlingDistributionApiParam == null) ? null : orgApacheSlingDistributionApiParam;
                String orgApacheSlingDistributionCoreParam = message.body().getString("org.apache.sling.distribution.core");
                String orgApacheSlingDistributionCore = (orgApacheSlingDistributionCoreParam == null) ? null : orgApacheSlingDistributionCoreParam;
                String orgApacheSlingExtensionsWebconsolesecurityproviderParam = message.body().getString("org.apache.sling.extensions.webconsolesecurityprovider");
                String orgApacheSlingExtensionsWebconsolesecurityprovider = (orgApacheSlingExtensionsWebconsolesecurityproviderParam == null) ? null : orgApacheSlingExtensionsWebconsolesecurityproviderParam;
                String orgApacheSlingHcWebconsoleParam = message.body().getString("org.apache.sling.hc.webconsole");
                String orgApacheSlingHcWebconsole = (orgApacheSlingHcWebconsoleParam == null) ? null : orgApacheSlingHcWebconsoleParam;
                String orgApacheSlingInstallerConsoleParam = message.body().getString("org.apache.sling.installer.console");
                String orgApacheSlingInstallerConsole = (orgApacheSlingInstallerConsoleParam == null) ? null : orgApacheSlingInstallerConsoleParam;
                String orgApacheSlingInstallerProviderFileParam = message.body().getString("org.apache.sling.installer.provider.file");
                String orgApacheSlingInstallerProviderFile = (orgApacheSlingInstallerProviderFileParam == null) ? null : orgApacheSlingInstallerProviderFileParam;
                String orgApacheSlingInstallerProviderJcrParam = message.body().getString("org.apache.sling.installer.provider.jcr");
                String orgApacheSlingInstallerProviderJcr = (orgApacheSlingInstallerProviderJcrParam == null) ? null : orgApacheSlingInstallerProviderJcrParam;
                String orgApacheSlingJcrDavexParam = message.body().getString("org.apache.sling.jcr.davex");
                String orgApacheSlingJcrDavex = (orgApacheSlingJcrDavexParam == null) ? null : orgApacheSlingJcrDavexParam;
                String orgApacheSlingJcrResourcesecurityParam = message.body().getString("org.apache.sling.jcr.resourcesecurity");
                String orgApacheSlingJcrResourcesecurity = (orgApacheSlingJcrResourcesecurityParam == null) ? null : orgApacheSlingJcrResourcesecurityParam;
                String orgApacheSlingJmxProviderParam = message.body().getString("org.apache.sling.jmx.provider");
                String orgApacheSlingJmxProvider = (orgApacheSlingJmxProviderParam == null) ? null : orgApacheSlingJmxProviderParam;
                String orgApacheSlingLaunchpadInstallerParam = message.body().getString("org.apache.sling.launchpad.installer");
                String orgApacheSlingLaunchpadInstaller = (orgApacheSlingLaunchpadInstallerParam == null) ? null : orgApacheSlingLaunchpadInstallerParam;
                String orgApacheSlingModelsImplParam = message.body().getString("org.apache.sling.models.impl");
                String orgApacheSlingModelsImpl = (orgApacheSlingModelsImplParam == null) ? null : orgApacheSlingModelsImplParam;
                String orgApacheSlingRepoinitParserParam = message.body().getString("org.apache.sling.repoinit.parser");
                String orgApacheSlingRepoinitParser = (orgApacheSlingRepoinitParserParam == null) ? null : orgApacheSlingRepoinitParserParam;
                String orgApacheSlingResourceInventoryParam = message.body().getString("org.apache.sling.resource.inventory");
                String orgApacheSlingResourceInventory = (orgApacheSlingResourceInventoryParam == null) ? null : orgApacheSlingResourceInventoryParam;
                String orgApacheSlingResourceresolverParam = message.body().getString("org.apache.sling.resourceresolver");
                String orgApacheSlingResourceresolver = (orgApacheSlingResourceresolverParam == null) ? null : orgApacheSlingResourceresolverParam;
                String orgApacheSlingScriptingJavascriptParam = message.body().getString("org.apache.sling.scripting.javascript");
                String orgApacheSlingScriptingJavascript = (orgApacheSlingScriptingJavascriptParam == null) ? null : orgApacheSlingScriptingJavascriptParam;
                String orgApacheSlingScriptingJstParam = message.body().getString("org.apache.sling.scripting.jst");
                String orgApacheSlingScriptingJst = (orgApacheSlingScriptingJstParam == null) ? null : orgApacheSlingScriptingJstParam;
                String orgApacheSlingScriptingSightlyJsProviderParam = message.body().getString("org.apache.sling.scripting.sightly.js.provider");
                String orgApacheSlingScriptingSightlyJsProvider = (orgApacheSlingScriptingSightlyJsProviderParam == null) ? null : orgApacheSlingScriptingSightlyJsProviderParam;
                String orgApacheSlingScriptingSightlyModelsProviderParam = message.body().getString("org.apache.sling.scripting.sightly.models.provider");
                String orgApacheSlingScriptingSightlyModelsProvider = (orgApacheSlingScriptingSightlyModelsProviderParam == null) ? null : orgApacheSlingScriptingSightlyModelsProviderParam;
                String orgApacheSlingSecurityParam = message.body().getString("org.apache.sling.security");
                String orgApacheSlingSecurity = (orgApacheSlingSecurityParam == null) ? null : orgApacheSlingSecurityParam;
                String orgApacheSlingServletsCompatParam = message.body().getString("org.apache.sling.servlets.compat");
                String orgApacheSlingServletsCompat = (orgApacheSlingServletsCompatParam == null) ? null : orgApacheSlingServletsCompatParam;
                String orgApacheSlingServletsGetParam = message.body().getString("org.apache.sling.servlets.get");
                String orgApacheSlingServletsGet = (orgApacheSlingServletsGetParam == null) ? null : orgApacheSlingServletsGetParam;
                String orgApacheSlingStartupfilterDisablerParam = message.body().getString("org.apache.sling.startupfilter.disabler");
                String orgApacheSlingStartupfilterDisabler = (orgApacheSlingStartupfilterDisablerParam == null) ? null : orgApacheSlingStartupfilterDisablerParam;
                String orgApacheSlingTracerParam = message.body().getString("org.apache.sling.tracer");
                String orgApacheSlingTracer = (orgApacheSlingTracerParam == null) ? null : orgApacheSlingTracerParam;
                String weRetailClientAppCoreParam = message.body().getString("we.retail.client.app.core");
                String weRetailClientAppCore = (weRetailClientAppCoreParam == null) ? null : weRetailClientAppCoreParam;
                service.comAdobeGraniteApicontrollerFilterResolverHookFactory(post, apply, delete, action, $location, propertylist, comAdobeCqCdnCdnRewriter, comAdobeCqCloudConfigComponents, comAdobeCqCloudConfigCore, comAdobeCqCloudConfigUi, comAdobeCqComAdobeCqEditor, comAdobeCqComAdobeCqProjectsCore, comAdobeCqComAdobeCqProjectsWcmCore, comAdobeCqComAdobeCqUiCommons, comAdobeCqComAdobeCqWcmStyle, comAdobeCqCqActivitymapIntegration, comAdobeCqCqContexthubCommons, comAdobeCqCqDtm, comAdobeCqCqHealthcheck, comAdobeCqCqMultisiteTargeting, comAdobeCqCqPreUpgradeCleanup, comAdobeCqCqProductInfoProvider, comAdobeCqCqRestSites, comAdobeCqCqSecurityHc, comAdobeCqDamCqDamSvgHandler, comAdobeCqDamCqScene7Imaging, comAdobeCqDtmReactorCore, comAdobeCqDtmReactorUi, comAdobeCqExpJspelResolver, comAdobeCqInboxCqInbox, comAdobeCqJsonSchemaParser, comAdobeCqMediaCqMediaPublishingDpsFpCore, comAdobeCqMobileCqMobileCaas, comAdobeCqMobileCqMobileIndexBuilder, comAdobeCqMobileCqMobilePhonegapBuild, comAdobeCqMyspell, comAdobeCqSampleWeRetailCore, comAdobeCqScreensComAdobeCqScreensDcc, comAdobeCqScreensComAdobeCqScreensMqCore, comAdobeCqSocialCqSocialAsProvider, comAdobeCqSocialCqSocialBadgingBasicImpl, comAdobeCqSocialCqSocialBadgingImpl, comAdobeCqSocialCqSocialCalendarImpl, comAdobeCqSocialCqSocialContentFragmentsImpl, comAdobeCqSocialCqSocialEnablementImpl, comAdobeCqSocialCqSocialGraphImpl, comAdobeCqSocialCqSocialIdeationImpl, comAdobeCqSocialCqSocialJcrProvider, comAdobeCqSocialCqSocialMembersImpl, comAdobeCqSocialCqSocialMsProvider, comAdobeCqSocialCqSocialNotificationsChannelsWeb, comAdobeCqSocialCqSocialNotificationsImpl, comAdobeCqSocialCqSocialRdbProvider, comAdobeCqSocialCqSocialScfImpl, comAdobeCqSocialCqSocialScoringBasicImpl, comAdobeCqSocialCqSocialScoringImpl, comAdobeCqSocialCqSocialServiceusersImpl, comAdobeCqSocialCqSocialSrpImpl, comAdobeCqSocialCqSocialUgcbaseImpl, comAdobeDamCqDamCfmImpl, comAdobeFormsFoundationFormsFoundationBase, comAdobeGraniteApicontroller, comAdobeGraniteAssetCore, comAdobeGraniteAuthSso, comAdobeGraniteBundlesHcImpl, comAdobeGraniteCompatRouter, comAdobeGraniteConf, comAdobeGraniteConfUiCore, comAdobeGraniteCors, comAdobeGraniteCrxExplorer, comAdobeGraniteCrxdeLite, comAdobeGraniteCryptoConfig, comAdobeGraniteCryptoExtension, comAdobeGraniteCryptoFile, comAdobeGraniteCryptoJcr, comAdobeGraniteCsrf, comAdobeGraniteDistributionCore, comAdobeGraniteDropwizardMetrics, comAdobeGraniteFragsImpl, comAdobeGraniteGibson, comAdobeGraniteInfocollector, comAdobeGraniteInstallerFactoryPackages, comAdobeGraniteJettySsl, comAdobeGraniteJobsAsync, comAdobeGraniteMaintenanceOak, comAdobeGraniteMonitoringCore, comAdobeGraniteQueries, comAdobeGraniteReplicationHcImpl, comAdobeGraniteRepositoryChecker, comAdobeGraniteRepositoryHcImpl, comAdobeGraniteRestAssets, comAdobeGraniteSecurityUi, comAdobeGraniteStartup, comAdobeGraniteTagsoup, comAdobeGraniteTaskmanagementCore, comAdobeGraniteTaskmanagementWorkflow, comAdobeGraniteUiClientlibsCompilerLess, comAdobeGraniteUiClientlibsProcessorGcc, comAdobeGraniteWebconsolePlugins, comAdobeGraniteWorkflowConsole, comAdobeXmpWorkerFilesNativeFragmentLinux, comAdobeXmpWorkerFilesNativeFragmentMacosx, comAdobeXmpWorkerFilesNativeFragmentWin, comDayCommonsOsgiWrapperSimpleJndi, comDayCqCqAuthhandler, comDayCqCqCompatConfigupdate, comDayCqCqLicensebranding, comDayCqCqNotifcationImpl, comDayCqCqReplicationAudit, comDayCqCqSearchExt, comDayCqDamCqDamAnnotationPrint, comDayCqDamCqDamAssetUsage, comDayCqDamCqDamS7dam, comDayCqDamCqDamSimilaritysearch, comDayCqDamDamWebdavSupport, comDayCqPreUpgradeTasks, comDayCqReplicationExtensions, comDayCqWcmCqMsmCore, comDayCqWcmCqWcmTranslation, dayCommonsJrawio, orgApacheAriesJmxWhiteboard, orgApacheFelixHttpSslfilter, orgApacheFelixOrgApacheFelixThreaddump, orgApacheFelixWebconsolePluginsDs, orgApacheFelixWebconsolePluginsEvent, orgApacheFelixWebconsolePluginsMemoryusage, orgApacheFelixWebconsolePluginsPackageadmin, orgApacheJackrabbitOakAuthLdap, orgApacheJackrabbitOakSegmentTar, orgApacheJackrabbitOakSolrOsgi, orgApacheSlingBundleresourceImpl, orgApacheSlingCommonsFsclassloader, orgApacheSlingCommonsLogWebconsole, orgApacheSlingDatasource, orgApacheSlingDiscoveryBase, orgApacheSlingDiscoveryOak, orgApacheSlingDiscoverySupport, orgApacheSlingDistributionApi, orgApacheSlingDistributionCore, orgApacheSlingExtensionsWebconsolesecurityprovider, orgApacheSlingHcWebconsole, orgApacheSlingInstallerConsole, orgApacheSlingInstallerProviderFile, orgApacheSlingInstallerProviderJcr, orgApacheSlingJcrDavex, orgApacheSlingJcrResourcesecurity, orgApacheSlingJmxProvider, orgApacheSlingLaunchpadInstaller, orgApacheSlingModelsImpl, orgApacheSlingRepoinitParser, orgApacheSlingResourceInventory, orgApacheSlingResourceresolver, orgApacheSlingScriptingJavascript, orgApacheSlingScriptingJst, orgApacheSlingScriptingSightlyJsProvider, orgApacheSlingScriptingSightlyModelsProvider, orgApacheSlingSecurity, orgApacheSlingServletsCompat, orgApacheSlingServletsGet, orgApacheSlingStartupfilterDisabler, orgApacheSlingTracer, weRetailClientAppCore, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteApicontrollerFilterResolverHookFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteApicontrollerFilterResolverHookFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthCertImplClientCertAuthHandler
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHCERTIMPLCLIENTCERTAUTHHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthCertImplClientCertAuthHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pathParam = message.body().getString("path");
                String path = (pathParam == null) ? null : pathParam;
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                service.comAdobeGraniteAuthCertImplClientCertAuthHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthCertImplClientCertAuthHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthCertImplClientCertAuthHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthIms
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHIMS_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthIms";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String configidParam = message.body().getString("configid");
                String configid = (configidParam == null) ? null : configidParam;
                String scopeParam = message.body().getString("scope");
                String scope = (scopeParam == null) ? null : scopeParam;
                service.comAdobeGraniteAuthIms(post, apply, delete, action, $location, propertylist, configid, scope, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthIms");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthIms", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHIMSIMPLEXTERNALUSERIDMAPPINGPROVIDEREXTENSION_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String oauthProviderIdParam = message.body().getString("oauth.provider.id");
                String oauthProviderId = (oauthProviderIdParam == null) ? null : oauthProviderIdParam;
                service.comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(post, apply, delete, action, $location, propertylist, oauthProviderId, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHIMSIMPLIMSACCESSTOKENREQUESTCUSTOMIZERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String authImsClientSecretParam = message.body().getString("auth.ims.client.secret");
                String authImsClientSecret = (authImsClientSecretParam == null) ? null : authImsClientSecretParam;
                String customizerTypeParam = message.body().getString("customizer.type");
                String customizerType = (customizerTypeParam == null) ? null : customizerTypeParam;
                service.comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(post, apply, delete, action, $location, propertylist, authImsClientSecret, customizerType, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHIMSIMPLIMSINSTANCECREDENTIALSVALIDATOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String oauthProviderIdParam = message.body().getString("oauth.provider.id");
                String oauthProviderId = (oauthProviderIdParam == null) ? null : oauthProviderIdParam;
                service.comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(post, apply, delete, action, $location, propertylist, oauthProviderId, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthImsImplIMSProviderImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHIMSIMPLIMSPROVIDERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthImsImplIMSProviderImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String oauthProviderIdParam = message.body().getString("oauth.provider.id");
                String oauthProviderId = (oauthProviderIdParam == null) ? null : oauthProviderIdParam;
                String oauthProviderImsAuthorizationUrlParam = message.body().getString("oauth.provider.ims.authorization.url");
                String oauthProviderImsAuthorizationUrl = (oauthProviderImsAuthorizationUrlParam == null) ? null : oauthProviderImsAuthorizationUrlParam;
                String oauthProviderImsTokenUrlParam = message.body().getString("oauth.provider.ims.token.url");
                String oauthProviderImsTokenUrl = (oauthProviderImsTokenUrlParam == null) ? null : oauthProviderImsTokenUrlParam;
                String oauthProviderImsProfileUrlParam = message.body().getString("oauth.provider.ims.profile.url");
                String oauthProviderImsProfileUrl = (oauthProviderImsProfileUrlParam == null) ? null : oauthProviderImsProfileUrlParam;
                JsonArray oauthProviderImsExtendedDetailsUrlsParam = message.body().getJsonArray("oauth.provider.ims.extended.details.urls");
                List<String> oauthProviderImsExtendedDetailsUrls = (oauthProviderImsExtendedDetailsUrlsParam == null) ? null : Json.mapper.readValue(oauthProviderImsExtendedDetailsUrlsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String oauthProviderImsValidateTokenUrlParam = message.body().getString("oauth.provider.ims.validate.token.url");
                String oauthProviderImsValidateTokenUrl = (oauthProviderImsValidateTokenUrlParam == null) ? null : oauthProviderImsValidateTokenUrlParam;
                String oauthProviderImsSessionPropertyParam = message.body().getString("oauth.provider.ims.session.property");
                String oauthProviderImsSessionProperty = (oauthProviderImsSessionPropertyParam == null) ? null : oauthProviderImsSessionPropertyParam;
                String oauthProviderImsServiceTokenClientIdParam = message.body().getString("oauth.provider.ims.service.token.client.id");
                String oauthProviderImsServiceTokenClientId = (oauthProviderImsServiceTokenClientIdParam == null) ? null : oauthProviderImsServiceTokenClientIdParam;
                String oauthProviderImsServiceTokenClientSecretParam = message.body().getString("oauth.provider.ims.service.token.client.secret");
                String oauthProviderImsServiceTokenClientSecret = (oauthProviderImsServiceTokenClientSecretParam == null) ? null : oauthProviderImsServiceTokenClientSecretParam;
                String oauthProviderImsServiceTokenParam = message.body().getString("oauth.provider.ims.service.token");
                String oauthProviderImsServiceToken = (oauthProviderImsServiceTokenParam == null) ? null : oauthProviderImsServiceTokenParam;
                String imsOrgRefParam = message.body().getString("ims.org.ref");
                String imsOrgRef = (imsOrgRefParam == null) ? null : imsOrgRefParam;
                JsonArray imsGroupMappingParam = message.body().getJsonArray("ims.group.mapping");
                List<String> imsGroupMapping = (imsGroupMappingParam == null) ? null : Json.mapper.readValue(imsGroupMappingParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String oauthProviderImsOnlyLicenseGroupParam = message.body().getString("oauth.provider.ims.only.license.group");
                Boolean oauthProviderImsOnlyLicenseGroup = (oauthProviderImsOnlyLicenseGroupParam == null) ? null : Json.mapper.readValue(oauthProviderImsOnlyLicenseGroupParam, Boolean.class);
                service.comAdobeGraniteAuthImsImplIMSProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthProviderImsAuthorizationUrl, oauthProviderImsTokenUrl, oauthProviderImsProfileUrl, oauthProviderImsExtendedDetailsUrls, oauthProviderImsValidateTokenUrl, oauthProviderImsSessionProperty, oauthProviderImsServiceTokenClientId, oauthProviderImsServiceTokenClientSecret, oauthProviderImsServiceToken, imsOrgRef, imsGroupMapping, oauthProviderImsOnlyLicenseGroup, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthImsImplIMSProviderImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthImsImplIMSProviderImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthImsImplImsConfigProviderImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHIMSIMPLIMSCONFIGPROVIDERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthImsImplImsConfigProviderImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String oauthConfigmanagerImsConfigidParam = message.body().getString("oauth.configmanager.ims.configid");
                String oauthConfigmanagerImsConfigid = (oauthConfigmanagerImsConfigidParam == null) ? null : oauthConfigmanagerImsConfigidParam;
                String imsOwningEntityParam = message.body().getString("ims.owningEntity");
                String imsOwningEntity = (imsOwningEntityParam == null) ? null : imsOwningEntityParam;
                String aemInstanceIdParam = message.body().getString("aem.instanceId");
                String aemInstanceId = (aemInstanceIdParam == null) ? null : aemInstanceIdParam;
                String imsServiceCodeParam = message.body().getString("ims.serviceCode");
                String imsServiceCode = (imsServiceCodeParam == null) ? null : imsServiceCodeParam;
                service.comAdobeGraniteAuthImsImplImsConfigProviderImpl(post, apply, delete, action, $location, propertylist, oauthConfigmanagerImsConfigid, imsOwningEntity, aemInstanceId, imsServiceCode, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthImsImplImsConfigProviderImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthImsImplImsConfigProviderImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthOauthAccesstokenProvider
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHOAUTHACCESSTOKENPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthOauthAccesstokenProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String authTokenProviderTitleParam = message.body().getString("auth.token.provider.title");
                String authTokenProviderTitle = (authTokenProviderTitleParam == null) ? null : authTokenProviderTitleParam;
                JsonArray authTokenProviderDefaultClaimsParam = message.body().getJsonArray("auth.token.provider.default.claims");
                List<String> authTokenProviderDefaultClaims = (authTokenProviderDefaultClaimsParam == null) ? null : Json.mapper.readValue(authTokenProviderDefaultClaimsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String authTokenProviderEndpointParam = message.body().getString("auth.token.provider.endpoint");
                String authTokenProviderEndpoint = (authTokenProviderEndpointParam == null) ? null : authTokenProviderEndpointParam;
                String authAccessTokenRequestParam = message.body().getString("auth.access.token.request");
                String authAccessTokenRequest = (authAccessTokenRequestParam == null) ? null : authAccessTokenRequestParam;
                String authTokenProviderKeypairAliasParam = message.body().getString("auth.token.provider.keypair.alias");
                String authTokenProviderKeypairAlias = (authTokenProviderKeypairAliasParam == null) ? null : authTokenProviderKeypairAliasParam;
                String authTokenProviderConnTimeoutParam = message.body().getString("auth.token.provider.conn.timeout");
                Integer authTokenProviderConnTimeout = (authTokenProviderConnTimeoutParam == null) ? null : Json.mapper.readValue(authTokenProviderConnTimeoutParam, Integer.class);
                String authTokenProviderSoTimeoutParam = message.body().getString("auth.token.provider.so.timeout");
                Integer authTokenProviderSoTimeout = (authTokenProviderSoTimeoutParam == null) ? null : Json.mapper.readValue(authTokenProviderSoTimeoutParam, Integer.class);
                String authTokenProviderClientIdParam = message.body().getString("auth.token.provider.client.id");
                String authTokenProviderClientId = (authTokenProviderClientIdParam == null) ? null : authTokenProviderClientIdParam;
                String authTokenProviderScopeParam = message.body().getString("auth.token.provider.scope");
                String authTokenProviderScope = (authTokenProviderScopeParam == null) ? null : authTokenProviderScopeParam;
                String authTokenProviderReuseAccessTokenParam = message.body().getString("auth.token.provider.reuse.access.token");
                Boolean authTokenProviderReuseAccessToken = (authTokenProviderReuseAccessTokenParam == null) ? null : Json.mapper.readValue(authTokenProviderReuseAccessTokenParam, Boolean.class);
                String authTokenProviderRelaxedSslParam = message.body().getString("auth.token.provider.relaxed.ssl");
                Boolean authTokenProviderRelaxedSsl = (authTokenProviderRelaxedSslParam == null) ? null : Json.mapper.readValue(authTokenProviderRelaxedSslParam, Boolean.class);
                String tokenRequestCustomizerTypeParam = message.body().getString("token.request.customizer.type");
                String tokenRequestCustomizerType = (tokenRequestCustomizerTypeParam == null) ? null : tokenRequestCustomizerTypeParam;
                String authTokenValidatorTypeParam = message.body().getString("auth.token.validator.type");
                String authTokenValidatorType = (authTokenValidatorTypeParam == null) ? null : authTokenValidatorTypeParam;
                service.comAdobeGraniteAuthOauthAccesstokenProvider(post, apply, delete, action, $location, propertylist, name, authTokenProviderTitle, authTokenProviderDefaultClaims, authTokenProviderEndpoint, authAccessTokenRequest, authTokenProviderKeypairAlias, authTokenProviderConnTimeout, authTokenProviderSoTimeout, authTokenProviderClientId, authTokenProviderScope, authTokenProviderReuseAccessToken, authTokenProviderRelaxedSsl, tokenRequestCustomizerType, authTokenValidatorType, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthOauthAccesstokenProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthOauthAccesstokenProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthOauthImplBearerAuthenticationHandler
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHOAUTHIMPLBEARERAUTHENTICATIONHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthOauthImplBearerAuthenticationHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pathParam = message.body().getString("path");
                String path = (pathParam == null) ? null : pathParam;
                JsonArray oauthClientIdsAllowedParam = message.body().getJsonArray("oauth.clientIds.allowed");
                List<String> oauthClientIdsAllowed = (oauthClientIdsAllowedParam == null) ? null : Json.mapper.readValue(oauthClientIdsAllowedParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String authBearerSyncImsParam = message.body().getString("auth.bearer.sync.ims");
                Boolean authBearerSyncIms = (authBearerSyncImsParam == null) ? null : Json.mapper.readValue(authBearerSyncImsParam, Boolean.class);
                String authTokenRequestParameterParam = message.body().getString("auth.tokenRequestParameter");
                String authTokenRequestParameter = (authTokenRequestParameterParam == null) ? null : authTokenRequestParameterParam;
                String oauthBearerConfigidParam = message.body().getString("oauth.bearer.configid");
                String oauthBearerConfigid = (oauthBearerConfigidParam == null) ? null : oauthBearerConfigidParam;
                String oauthJwtSupportParam = message.body().getString("oauth.jwt.support");
                Boolean oauthJwtSupport = (oauthJwtSupportParam == null) ? null : Json.mapper.readValue(oauthJwtSupportParam, Boolean.class);
                service.comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, oauthClientIdsAllowed, authBearerSyncIms, authTokenRequestParameter, oauthBearerConfigid, oauthJwtSupport, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthOauthImplBearerAuthenticationHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthOauthImplBearerAuthenticationHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHOAUTHIMPLDEFAULTTOKENVALIDATORIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String authTokenValidatorTypeParam = message.body().getString("auth.token.validator.type");
                String authTokenValidatorType = (authTokenValidatorTypeParam == null) ? null : authTokenValidatorTypeParam;
                service.comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(post, apply, delete, action, $location, propertylist, authTokenValidatorType, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthOauthImplFacebookProviderImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHOAUTHIMPLFACEBOOKPROVIDERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthOauthImplFacebookProviderImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String oauthProviderIdParam = message.body().getString("oauth.provider.id");
                String oauthProviderId = (oauthProviderIdParam == null) ? null : oauthProviderIdParam;
                service.comAdobeGraniteAuthOauthImplFacebookProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthOauthImplFacebookProviderImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthOauthImplFacebookProviderImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthOauthImplGithubProviderImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHOAUTHIMPLGITHUBPROVIDERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthOauthImplGithubProviderImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String oauthProviderIdParam = message.body().getString("oauth.provider.id");
                String oauthProviderId = (oauthProviderIdParam == null) ? null : oauthProviderIdParam;
                String oauthProviderGithubAuthorizationUrlParam = message.body().getString("oauth.provider.github.authorization.url");
                String oauthProviderGithubAuthorizationUrl = (oauthProviderGithubAuthorizationUrlParam == null) ? null : oauthProviderGithubAuthorizationUrlParam;
                String oauthProviderGithubTokenUrlParam = message.body().getString("oauth.provider.github.token.url");
                String oauthProviderGithubTokenUrl = (oauthProviderGithubTokenUrlParam == null) ? null : oauthProviderGithubTokenUrlParam;
                String oauthProviderGithubProfileUrlParam = message.body().getString("oauth.provider.github.profile.url");
                String oauthProviderGithubProfileUrl = (oauthProviderGithubProfileUrlParam == null) ? null : oauthProviderGithubProfileUrlParam;
                service.comAdobeGraniteAuthOauthImplGithubProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthProviderGithubAuthorizationUrl, oauthProviderGithubTokenUrl, oauthProviderGithubProfileUrl, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthOauthImplGithubProviderImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthOauthImplGithubProviderImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthOauthImplGraniteProvider
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHOAUTHIMPLGRANITEPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthOauthImplGraniteProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String oauthProviderIdParam = message.body().getString("oauth.provider.id");
                String oauthProviderId = (oauthProviderIdParam == null) ? null : oauthProviderIdParam;
                String oauthProviderGraniteAuthorizationUrlParam = message.body().getString("oauth.provider.granite.authorization.url");
                String oauthProviderGraniteAuthorizationUrl = (oauthProviderGraniteAuthorizationUrlParam == null) ? null : oauthProviderGraniteAuthorizationUrlParam;
                String oauthProviderGraniteTokenUrlParam = message.body().getString("oauth.provider.granite.token.url");
                String oauthProviderGraniteTokenUrl = (oauthProviderGraniteTokenUrlParam == null) ? null : oauthProviderGraniteTokenUrlParam;
                String oauthProviderGraniteProfileUrlParam = message.body().getString("oauth.provider.granite.profile.url");
                String oauthProviderGraniteProfileUrl = (oauthProviderGraniteProfileUrlParam == null) ? null : oauthProviderGraniteProfileUrlParam;
                String oauthProviderGraniteExtendedDetailsUrlsParam = message.body().getString("oauth.provider.granite.extended.details.urls");
                String oauthProviderGraniteExtendedDetailsUrls = (oauthProviderGraniteExtendedDetailsUrlsParam == null) ? null : oauthProviderGraniteExtendedDetailsUrlsParam;
                service.comAdobeGraniteAuthOauthImplGraniteProvider(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthProviderGraniteAuthorizationUrl, oauthProviderGraniteTokenUrl, oauthProviderGraniteProfileUrl, oauthProviderGraniteExtendedDetailsUrls, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthOauthImplGraniteProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthOauthImplGraniteProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthOauthImplHelperProviderConfigManager
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHOAUTHIMPLHELPERPROVIDERCONFIGMANAGER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthOauthImplHelperProviderConfigManager";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String oauthCookieLoginTimeoutParam = message.body().getString("oauth.cookie.login.timeout");
                String oauthCookieLoginTimeout = (oauthCookieLoginTimeoutParam == null) ? null : oauthCookieLoginTimeoutParam;
                String oauthCookieMaxAgeParam = message.body().getString("oauth.cookie.max.age");
                String oauthCookieMaxAge = (oauthCookieMaxAgeParam == null) ? null : oauthCookieMaxAgeParam;
                service.comAdobeGraniteAuthOauthImplHelperProviderConfigManager(post, apply, delete, action, $location, propertylist, oauthCookieLoginTimeout, oauthCookieMaxAge, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthOauthImplHelperProviderConfigManager");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthOauthImplHelperProviderConfigManager", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHOAUTHIMPLHELPERPROVIDERCONFIGMANAGERINTERNAL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String oauthCookieLoginTimeoutParam = message.body().getString("oauth.cookie.login.timeout");
                String oauthCookieLoginTimeout = (oauthCookieLoginTimeoutParam == null) ? null : oauthCookieLoginTimeoutParam;
                String oauthCookieMaxAgeParam = message.body().getString("oauth.cookie.max.age");
                String oauthCookieMaxAge = (oauthCookieMaxAgeParam == null) ? null : oauthCookieMaxAgeParam;
                service.comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(post, apply, delete, action, $location, propertylist, oauthCookieLoginTimeout, oauthCookieMaxAge, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHOAUTHIMPLOAUTHAUTHENTICATIONHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pathParam = message.body().getString("path");
                String path = (pathParam == null) ? null : pathParam;
                service.comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthOauthImplTwitterProviderImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHOAUTHIMPLTWITTERPROVIDERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthOauthImplTwitterProviderImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String oauthProviderIdParam = message.body().getString("oauth.provider.id");
                String oauthProviderId = (oauthProviderIdParam == null) ? null : oauthProviderIdParam;
                service.comAdobeGraniteAuthOauthImplTwitterProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthOauthImplTwitterProviderImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthOauthImplTwitterProviderImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthOauthProvider
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHOAUTHPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthOauthProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String oauthConfigIdParam = message.body().getString("oauth.config.id");
                String oauthConfigId = (oauthConfigIdParam == null) ? null : oauthConfigIdParam;
                String oauthClientIdParam = message.body().getString("oauth.client.id");
                String oauthClientId = (oauthClientIdParam == null) ? null : oauthClientIdParam;
                String oauthClientSecretParam = message.body().getString("oauth.client.secret");
                String oauthClientSecret = (oauthClientSecretParam == null) ? null : oauthClientSecretParam;
                JsonArray oauthScopeParam = message.body().getJsonArray("oauth.scope");
                List<String> oauthScope = (oauthScopeParam == null) ? null : Json.mapper.readValue(oauthScopeParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String oauthConfigProviderIdParam = message.body().getString("oauth.config.provider.id");
                String oauthConfigProviderId = (oauthConfigProviderIdParam == null) ? null : oauthConfigProviderIdParam;
                String oauthCreateUsersParam = message.body().getString("oauth.create.users");
                Boolean oauthCreateUsers = (oauthCreateUsersParam == null) ? null : Json.mapper.readValue(oauthCreateUsersParam, Boolean.class);
                String oauthUseridPropertyParam = message.body().getString("oauth.userid.property");
                String oauthUseridProperty = (oauthUseridPropertyParam == null) ? null : oauthUseridPropertyParam;
                String forceStrictUsernameMatchingParam = message.body().getString("force.strict.username.matching");
                Boolean forceStrictUsernameMatching = (forceStrictUsernameMatchingParam == null) ? null : Json.mapper.readValue(forceStrictUsernameMatchingParam, Boolean.class);
                String oauthEncodeUseridsParam = message.body().getString("oauth.encode.userids");
                Boolean oauthEncodeUserids = (oauthEncodeUseridsParam == null) ? null : Json.mapper.readValue(oauthEncodeUseridsParam, Boolean.class);
                String oauthHashUseridsParam = message.body().getString("oauth.hash.userids");
                Boolean oauthHashUserids = (oauthHashUseridsParam == null) ? null : Json.mapper.readValue(oauthHashUseridsParam, Boolean.class);
                String oauthCallBackUrlParam = message.body().getString("oauth.callBackUrl");
                String oauthCallBackUrl = (oauthCallBackUrlParam == null) ? null : oauthCallBackUrlParam;
                String oauthAccessTokenPersistParam = message.body().getString("oauth.access.token.persist");
                Boolean oauthAccessTokenPersist = (oauthAccessTokenPersistParam == null) ? null : Json.mapper.readValue(oauthAccessTokenPersistParam, Boolean.class);
                String oauthAccessTokenPersistCookieParam = message.body().getString("oauth.access.token.persist.cookie");
                Boolean oauthAccessTokenPersistCookie = (oauthAccessTokenPersistCookieParam == null) ? null : Json.mapper.readValue(oauthAccessTokenPersistCookieParam, Boolean.class);
                String oauthCsrfStateProtectionParam = message.body().getString("oauth.csrf.state.protection");
                Boolean oauthCsrfStateProtection = (oauthCsrfStateProtectionParam == null) ? null : Json.mapper.readValue(oauthCsrfStateProtectionParam, Boolean.class);
                String oauthRedirectRequestParamsParam = message.body().getString("oauth.redirect.request.params");
                Boolean oauthRedirectRequestParams = (oauthRedirectRequestParamsParam == null) ? null : Json.mapper.readValue(oauthRedirectRequestParamsParam, Boolean.class);
                String oauthConfigSiblingsAllowParam = message.body().getString("oauth.config.siblings.allow");
                Boolean oauthConfigSiblingsAllow = (oauthConfigSiblingsAllowParam == null) ? null : Json.mapper.readValue(oauthConfigSiblingsAllowParam, Boolean.class);
                service.comAdobeGraniteAuthOauthProvider(post, apply, delete, action, $location, propertylist, oauthConfigId, oauthClientId, oauthClientSecret, oauthScope, oauthConfigProviderId, oauthCreateUsers, oauthUseridProperty, forceStrictUsernameMatching, oauthEncodeUserids, oauthHashUserids, oauthCallBackUrl, oauthAccessTokenPersist, oauthAccessTokenPersistCookie, oauthCsrfStateProtection, oauthRedirectRequestParams, oauthConfigSiblingsAllow, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthOauthProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthOauthProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthRequirementImplDefaultRequirementHandler
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHREQUIREMENTIMPLDEFAULTREQUIREMENTHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthRequirementImplDefaultRequirementHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray supportedPathsParam = message.body().getJsonArray("supportedPaths");
                List<String> supportedPaths = (supportedPathsParam == null) ? null : Json.mapper.readValue(supportedPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(post, apply, delete, action, $location, propertylist, supportedPaths, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthRequirementImplDefaultRequirementHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthRequirementImplDefaultRequirementHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthSamlSamlAuthenticationHandler
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHSAMLSAMLAUTHENTICATIONHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthSamlSamlAuthenticationHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray pathParam = message.body().getJsonArray("path");
                List<String> path = (pathParam == null) ? null : Json.mapper.readValue(pathParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String idpUrlParam = message.body().getString("idpUrl");
                String idpUrl = (idpUrlParam == null) ? null : idpUrlParam;
                String idpCertAliasParam = message.body().getString("idpCertAlias");
                String idpCertAlias = (idpCertAliasParam == null) ? null : idpCertAliasParam;
                String idpHttpRedirectParam = message.body().getString("idpHttpRedirect");
                Boolean idpHttpRedirect = (idpHttpRedirectParam == null) ? null : Json.mapper.readValue(idpHttpRedirectParam, Boolean.class);
                String serviceProviderEntityIdParam = message.body().getString("serviceProviderEntityId");
                String serviceProviderEntityId = (serviceProviderEntityIdParam == null) ? null : serviceProviderEntityIdParam;
                String assertionConsumerServiceURLParam = message.body().getString("assertionConsumerServiceURL");
                String assertionConsumerServiceURL = (assertionConsumerServiceURLParam == null) ? null : assertionConsumerServiceURLParam;
                String spPrivateKeyAliasParam = message.body().getString("spPrivateKeyAlias");
                String spPrivateKeyAlias = (spPrivateKeyAliasParam == null) ? null : spPrivateKeyAliasParam;
                String keyStorePasswordParam = message.body().getString("keyStorePassword");
                String keyStorePassword = (keyStorePasswordParam == null) ? null : keyStorePasswordParam;
                String defaultRedirectUrlParam = message.body().getString("defaultRedirectUrl");
                String defaultRedirectUrl = (defaultRedirectUrlParam == null) ? null : defaultRedirectUrlParam;
                String userIDAttributeParam = message.body().getString("userIDAttribute");
                String userIDAttribute = (userIDAttributeParam == null) ? null : userIDAttributeParam;
                String useEncryptionParam = message.body().getString("useEncryption");
                Boolean useEncryption = (useEncryptionParam == null) ? null : Json.mapper.readValue(useEncryptionParam, Boolean.class);
                String createUserParam = message.body().getString("createUser");
                Boolean createUser = (createUserParam == null) ? null : Json.mapper.readValue(createUserParam, Boolean.class);
                String userIntermediatePathParam = message.body().getString("userIntermediatePath");
                String userIntermediatePath = (userIntermediatePathParam == null) ? null : userIntermediatePathParam;
                String addGroupMembershipsParam = message.body().getString("addGroupMemberships");
                Boolean addGroupMemberships = (addGroupMembershipsParam == null) ? null : Json.mapper.readValue(addGroupMembershipsParam, Boolean.class);
                String groupMembershipAttributeParam = message.body().getString("groupMembershipAttribute");
                String groupMembershipAttribute = (groupMembershipAttributeParam == null) ? null : groupMembershipAttributeParam;
                JsonArray defaultGroupsParam = message.body().getJsonArray("defaultGroups");
                List<String> defaultGroups = (defaultGroupsParam == null) ? null : Json.mapper.readValue(defaultGroupsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameIdFormatParam = message.body().getString("nameIdFormat");
                String nameIdFormat = (nameIdFormatParam == null) ? null : nameIdFormatParam;
                JsonArray synchronizeAttributesParam = message.body().getJsonArray("synchronizeAttributes");
                List<String> synchronizeAttributes = (synchronizeAttributesParam == null) ? null : Json.mapper.readValue(synchronizeAttributesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String handleLogoutParam = message.body().getString("handleLogout");
                Boolean handleLogout = (handleLogoutParam == null) ? null : Json.mapper.readValue(handleLogoutParam, Boolean.class);
                String logoutUrlParam = message.body().getString("logoutUrl");
                String logoutUrl = (logoutUrlParam == null) ? null : logoutUrlParam;
                String clockToleranceParam = message.body().getString("clockTolerance");
                Integer clockTolerance = (clockToleranceParam == null) ? null : Json.mapper.readValue(clockToleranceParam, Integer.class);
                String digestMethodParam = message.body().getString("digestMethod");
                String digestMethod = (digestMethodParam == null) ? null : digestMethodParam;
                String signatureMethodParam = message.body().getString("signatureMethod");
                String signatureMethod = (signatureMethodParam == null) ? null : signatureMethodParam;
                String identitySyncTypeParam = message.body().getString("identitySyncType");
                String identitySyncType = (identitySyncTypeParam == null) ? null : identitySyncTypeParam;
                String idpIdentifierParam = message.body().getString("idpIdentifier");
                String idpIdentifier = (idpIdentifierParam == null) ? null : idpIdentifierParam;
                service.comAdobeGraniteAuthSamlSamlAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, userIntermediatePath, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, identitySyncType, idpIdentifier, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthSamlSamlAuthenticationHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthSamlSamlAuthenticationHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteAuthSsoImplSsoAuthenticationHandler
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEAUTHSSOIMPLSSOAUTHENTICATIONHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteAuthSsoImplSsoAuthenticationHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pathParam = message.body().getString("path");
                String path = (pathParam == null) ? null : pathParam;
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String jaasControlFlagParam = message.body().getString("jaas.controlFlag");
                String jaasControlFlag = (jaasControlFlagParam == null) ? null : jaasControlFlagParam;
                String jaasRealmNameParam = message.body().getString("jaas.realmName");
                String jaasRealmName = (jaasRealmNameParam == null) ? null : jaasRealmNameParam;
                String jaasRankingParam = message.body().getString("jaas.ranking");
                Integer jaasRanking = (jaasRankingParam == null) ? null : Json.mapper.readValue(jaasRankingParam, Integer.class);
                JsonArray headersParam = message.body().getJsonArray("headers");
                List<String> headers = (headersParam == null) ? null : Json.mapper.readValue(headersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cookiesParam = message.body().getJsonArray("cookies");
                List<String> cookies = (cookiesParam == null) ? null : Json.mapper.readValue(cookiesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray parametersParam = message.body().getJsonArray("parameters");
                List<String> parameters = (parametersParam == null) ? null : Json.mapper.readValue(parametersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray usermapParam = message.body().getJsonArray("usermap");
                List<String> usermap = (usermapParam == null) ? null : Json.mapper.readValue(usermapParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String formatParam = message.body().getString("format");
                String format = (formatParam == null) ? null : formatParam;
                String trustedCredentialsAttributeParam = message.body().getString("trustedCredentialsAttribute");
                String trustedCredentialsAttribute = (trustedCredentialsAttributeParam == null) ? null : trustedCredentialsAttributeParam;
                service.comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking, jaasControlFlag, jaasRealmName, jaasRanking, headers, cookies, parameters, usermap, format, trustedCredentialsAttribute, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteAuthSsoImplSsoAuthenticationHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteAuthSsoImplSsoAuthenticationHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteBundlesHcImplCodeCacheHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEBUNDLESHCIMPLCODECACHEHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteBundlesHcImplCodeCacheHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String minimumCodeCacheSizeParam = message.body().getString("minimum.code.cache.size");
                Integer minimumCodeCacheSize = (minimumCodeCacheSizeParam == null) ? null : Json.mapper.readValue(minimumCodeCacheSizeParam, Integer.class);
                service.comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, minimumCodeCacheSize, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteBundlesHcImplCodeCacheHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteBundlesHcImplCodeCacheHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEBUNDLESHCIMPLCRXDESUPPORTBUNDLEHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteBundlesHcImplDavExBundleHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEBUNDLESHCIMPLDAVEXBUNDLEHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteBundlesHcImplDavExBundleHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteBundlesHcImplDavExBundleHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteBundlesHcImplDavExBundleHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEBUNDLESHCIMPLINACTIVEBUNDLESHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray ignoredBundlesParam = message.body().getJsonArray("ignored.bundles");
                List<String> ignoredBundles = (ignoredBundlesParam == null) ? null : Json.mapper.readValue(ignoredBundlesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, ignoredBundles, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteBundlesHcImplJobsHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEBUNDLESHCIMPLJOBSHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteBundlesHcImplJobsHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String maxQueuedJobsParam = message.body().getString("max.queued.jobs");
                Integer maxQueuedJobs = (maxQueuedJobsParam == null) ? null : Json.mapper.readValue(maxQueuedJobsParam, Integer.class);
                service.comAdobeGraniteBundlesHcImplJobsHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, maxQueuedJobs, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteBundlesHcImplJobsHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteBundlesHcImplJobsHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEBUNDLESHCIMPLSLINGGETSERVLETHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEBUNDLESHCIMPLSLINGJAVASCRIPTHANDLERHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEBUNDLESHCIMPLSLINGJSPSCRIPTHANDLERHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEBUNDLESHCIMPLSLINGREFERRERFILTERHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEBUNDLESHCIMPLWEBDAVBUNDLEHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITECOMMENTSINTERNALCOMMENTREPLICATIONCONTENTFILTERFAC_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray replicateCommentResourceTypesParam = message.body().getJsonArray("replicate.comment.resourceTypes");
                List<String> replicateCommentResourceTypes = (replicateCommentResourceTypesParam == null) ? null : Json.mapper.readValue(replicateCommentResourceTypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(post, apply, delete, action, $location, propertylist, replicateCommentResourceTypes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITECOMPATROUTERIMPLCOMPATSWITCHINGSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray compatgroupsParam = message.body().getJsonArray("compatgroups");
                List<String> compatgroups = (compatgroupsParam == null) ? null : Json.mapper.readValue(compatgroupsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                service.comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(post, apply, delete, action, $location, propertylist, compatgroups, enabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteCompatrouterImplRoutingConfig
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITECOMPATROUTERIMPLROUTINGCONFIG_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteCompatrouterImplRoutingConfig";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String idParam = message.body().getString("id");
                String id = (idParam == null) ? null : idParam;
                String compatPathParam = message.body().getString("compatPath");
                String compatPath = (compatPathParam == null) ? null : compatPathParam;
                String newPathParam = message.body().getString("newPath");
                String newPath = (newPathParam == null) ? null : newPathParam;
                service.comAdobeGraniteCompatrouterImplRoutingConfig(post, apply, delete, action, $location, propertylist, id, compatPath, newPath, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteCompatrouterImplRoutingConfig");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteCompatrouterImplRoutingConfig", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteCompatrouterImplSwitchMappingConfig
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITECOMPATROUTERIMPLSWITCHMAPPINGCONFIG_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteCompatrouterImplSwitchMappingConfig";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String groupParam = message.body().getString("group");
                String group = (groupParam == null) ? null : groupParam;
                JsonArray idsParam = message.body().getJsonArray("ids");
                List<String> ids = (idsParam == null) ? null : Json.mapper.readValue(idsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteCompatrouterImplSwitchMappingConfig(post, apply, delete, action, $location, propertylist, group, ids, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteCompatrouterImplSwitchMappingConfig");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteCompatrouterImplSwitchMappingConfig", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITECONFIMPLRUNTIMEAWARECONFIGURATIONRESOURCERESOLVING_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                JsonArray fallbackPathsParam = message.body().getJsonArray("fallbackPaths");
                List<String> fallbackPaths = (fallbackPathsParam == null) ? null : Json.mapper.readValue(fallbackPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(post, apply, delete, action, $location, propertylist, enabled, fallbackPaths, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteContexthubImplContextHubImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITECONTEXTHUBIMPLCONTEXTHUBIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteContexthubImplContextHubImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String comAdobeGraniteContexthubSilentModeParam = message.body().getString("com.adobe.granite.contexthub.silent_mode");
                Boolean comAdobeGraniteContexthubSilentMode = (comAdobeGraniteContexthubSilentModeParam == null) ? null : Json.mapper.readValue(comAdobeGraniteContexthubSilentModeParam, Boolean.class);
                String comAdobeGraniteContexthubShowUiParam = message.body().getString("com.adobe.granite.contexthub.show_ui");
                Boolean comAdobeGraniteContexthubShowUi = (comAdobeGraniteContexthubShowUiParam == null) ? null : Json.mapper.readValue(comAdobeGraniteContexthubShowUiParam, Boolean.class);
                service.comAdobeGraniteContexthubImplContextHubImpl(post, apply, delete, action, $location, propertylist, comAdobeGraniteContexthubSilentMode, comAdobeGraniteContexthubShowUi, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteContexthubImplContextHubImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteContexthubImplContextHubImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteCorsImplCORSPolicyImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITECORSIMPLCORSPOLICYIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteCorsImplCORSPolicyImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray alloworiginParam = message.body().getJsonArray("alloworigin");
                List<String> alloworigin = (alloworiginParam == null) ? null : Json.mapper.readValue(alloworiginParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray alloworiginregexpParam = message.body().getJsonArray("alloworiginregexp");
                List<String> alloworiginregexp = (alloworiginregexpParam == null) ? null : Json.mapper.readValue(alloworiginregexpParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray allowedpathsParam = message.body().getJsonArray("allowedpaths");
                List<String> allowedpaths = (allowedpathsParam == null) ? null : Json.mapper.readValue(allowedpathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray exposedheadersParam = message.body().getJsonArray("exposedheaders");
                List<String> exposedheaders = (exposedheadersParam == null) ? null : Json.mapper.readValue(exposedheadersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String maxageParam = message.body().getString("maxage");
                Integer maxage = (maxageParam == null) ? null : Json.mapper.readValue(maxageParam, Integer.class);
                JsonArray supportedheadersParam = message.body().getJsonArray("supportedheaders");
                List<String> supportedheaders = (supportedheadersParam == null) ? null : Json.mapper.readValue(supportedheadersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray supportedmethodsParam = message.body().getJsonArray("supportedmethods");
                List<String> supportedmethods = (supportedmethodsParam == null) ? null : Json.mapper.readValue(supportedmethodsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String supportscredentialsParam = message.body().getString("supportscredentials");
                Boolean supportscredentials = (supportscredentialsParam == null) ? null : Json.mapper.readValue(supportscredentialsParam, Boolean.class);
                service.comAdobeGraniteCorsImplCORSPolicyImpl(post, apply, delete, action, $location, propertylist, alloworigin, alloworiginregexp, allowedpaths, exposedheaders, maxage, supportedheaders, supportedmethods, supportscredentials, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteCorsImplCORSPolicyImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteCorsImplCORSPolicyImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteCsrfImplCSRFFilter
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITECSRFIMPLCSRFFILTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteCsrfImplCSRFFilter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray filterMethodsParam = message.body().getJsonArray("filter.methods");
                List<String> filterMethods = (filterMethodsParam == null) ? null : Json.mapper.readValue(filterMethodsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String filterEnableSafeUserAgentsParam = message.body().getString("filter.enable.safe.user.agents");
                Boolean filterEnableSafeUserAgents = (filterEnableSafeUserAgentsParam == null) ? null : Json.mapper.readValue(filterEnableSafeUserAgentsParam, Boolean.class);
                JsonArray filterSafeUserAgentsParam = message.body().getJsonArray("filter.safe.user.agents");
                List<String> filterSafeUserAgents = (filterSafeUserAgentsParam == null) ? null : Json.mapper.readValue(filterSafeUserAgentsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray filterExcludedPathsParam = message.body().getJsonArray("filter.excluded.paths");
                List<String> filterExcludedPaths = (filterExcludedPathsParam == null) ? null : Json.mapper.readValue(filterExcludedPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteCsrfImplCSRFFilter(post, apply, delete, action, $location, propertylist, filterMethods, filterEnableSafeUserAgents, filterSafeUserAgents, filterExcludedPaths, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteCsrfImplCSRFFilter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteCsrfImplCSRFFilter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteCsrfImplCSRFServlet
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITECSRFIMPLCSRFSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteCsrfImplCSRFServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String csrfTokenExpiresInParam = message.body().getString("csrf.token.expires.in");
                Integer csrfTokenExpiresIn = (csrfTokenExpiresInParam == null) ? null : Json.mapper.readValue(csrfTokenExpiresInParam, Integer.class);
                String slingAuthRequirementsParam = message.body().getString("sling.auth.requirements");
                String slingAuthRequirements = (slingAuthRequirementsParam == null) ? null : slingAuthRequirementsParam;
                service.comAdobeGraniteCsrfImplCSRFServlet(post, apply, delete, action, $location, propertylist, csrfTokenExpiresIn, slingAuthRequirements, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteCsrfImplCSRFServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteCsrfImplCSRFServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEDISTRIBUTIONCOREIMPLCRYPTODISTRIBUTIONTRANSPORTSE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String usernameParam = message.body().getString("username");
                String username = (usernameParam == null) ? null : usernameParam;
                String encryptedPasswordParam = message.body().getString("encryptedPassword");
                String encryptedPassword = (encryptedPasswordParam == null) ? null : encryptedPasswordParam;
                service.comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(post, apply, delete, action, $location, propertylist, name, username, encryptedPassword, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEDISTRIBUTIONCOREIMPLDIFFDIFFCHANGESOBSERVER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                String agentNameParam = message.body().getString("agentName");
                String agentName = (agentNameParam == null) ? null : agentNameParam;
                String diffPathParam = message.body().getString("diffPath");
                String diffPath = (diffPathParam == null) ? null : diffPathParam;
                String observedPathParam = message.body().getString("observedPath");
                String observedPath = (observedPathParam == null) ? null : observedPathParam;
                String serviceNameParam = message.body().getString("serviceName");
                String serviceName = (serviceNameParam == null) ? null : serviceNameParam;
                String propertyNamesParam = message.body().getString("propertyNames");
                String propertyNames = (propertyNamesParam == null) ? null : propertyNamesParam;
                String distributionDelayParam = message.body().getString("distributionDelay");
                Integer distributionDelay = (distributionDelayParam == null) ? null : Json.mapper.readValue(distributionDelayParam, Integer.class);
                String serviceUserTargetParam = message.body().getString("serviceUser.target");
                String serviceUserTarget = (serviceUserTargetParam == null) ? null : serviceUserTargetParam;
                service.comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(post, apply, delete, action, $location, propertylist, enabled, agentName, diffPath, observedPath, serviceName, propertyNames, distributionDelay, serviceUserTarget, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteDistributionCoreImplDiffDiffEventListener
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEDISTRIBUTIONCOREIMPLDIFFDIFFEVENTLISTENER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteDistributionCoreImplDiffDiffEventListener";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String diffPathParam = message.body().getString("diffPath");
                String diffPath = (diffPathParam == null) ? null : diffPathParam;
                String serviceNameParam = message.body().getString("serviceName");
                String serviceName = (serviceNameParam == null) ? null : serviceNameParam;
                String serviceUserTargetParam = message.body().getString("serviceUser.target");
                String serviceUserTarget = (serviceUserTargetParam == null) ? null : serviceUserTargetParam;
                service.comAdobeGraniteDistributionCoreImplDiffDiffEventListener(post, apply, delete, action, $location, propertylist, diffPath, serviceName, serviceUserTarget, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteDistributionCoreImplDiffDiffEventListener");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteDistributionCoreImplDiffDiffEventListener", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteDistributionCoreImplDistributionToReplicationEven
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEDISTRIBUTIONCOREIMPLDISTRIBUTIONTOREPLICATIONEVEN_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteDistributionCoreImplDistributionToReplicationEven";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray importerNameParam = message.body().getJsonArray("importer.name");
                List<String> importerName = (importerNameParam == null) ? null : Json.mapper.readValue(importerNameParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteDistributionCoreImplDistributionToReplicationEven(post, apply, delete, action, $location, propertylist, importerName, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteDistributionCoreImplDistributionToReplicationEven");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteDistributionCoreImplDistributionToReplicationEven", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEDISTRIBUTIONCOREIMPLREPLICATIONADAPTERSREPLICAT_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String providerNameParam = message.body().getString("providerName");
                String providerName = (providerNameParam == null) ? null : providerNameParam;
                String forwardRequestsParam = message.body().getString("forward.requests");
                Boolean forwardRequests = (forwardRequestsParam == null) ? null : Json.mapper.readValue(forwardRequestsParam, Boolean.class);
                service.comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(post, apply, delete, action, $location, propertylist, providerName, forwardRequests, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteDistributionCoreImplReplicationDistributionTrans
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEDISTRIBUTIONCOREIMPLREPLICATIONDISTRIBUTIONTRANS_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteDistributionCoreImplReplicationDistributionTrans";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String forwardRequestsParam = message.body().getString("forward.requests");
                Boolean forwardRequests = (forwardRequestsParam == null) ? null : Json.mapper.readValue(forwardRequestsParam, Boolean.class);
                service.comAdobeGraniteDistributionCoreImplReplicationDistributionTrans(post, apply, delete, action, $location, propertylist, forwardRequests, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteDistributionCoreImplReplicationDistributionTrans");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteDistributionCoreImplReplicationDistributionTrans", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEDISTRIBUTIONCOREIMPLTRANSPORTACCESSTOKENDISTRIBU_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String serviceNameParam = message.body().getString("serviceName");
                String serviceName = (serviceNameParam == null) ? null : serviceNameParam;
                String userIdParam = message.body().getString("userId");
                String userId = (userIdParam == null) ? null : userIdParam;
                String accessTokenProviderTargetParam = message.body().getString("accessTokenProvider.target");
                String accessTokenProviderTarget = (accessTokenProviderTargetParam == null) ? null : accessTokenProviderTargetParam;
                service.comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(post, apply, delete, action, $location, propertylist, name, serviceName, userId, accessTokenProviderTarget, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteFragsImplCheckHttpHeaderFlag
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEFRAGSIMPLCHECKHTTPHEADERFLAG_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteFragsImplCheckHttpHeaderFlag";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String featureNameParam = message.body().getString("feature.name");
                String featureName = (featureNameParam == null) ? null : featureNameParam;
                String featureDescriptionParam = message.body().getString("feature.description");
                String featureDescription = (featureDescriptionParam == null) ? null : featureDescriptionParam;
                String httpHeaderNameParam = message.body().getString("http.header.name");
                String httpHeaderName = (httpHeaderNameParam == null) ? null : httpHeaderNameParam;
                String httpHeaderValuepatternParam = message.body().getString("http.header.valuepattern");
                String httpHeaderValuepattern = (httpHeaderValuepatternParam == null) ? null : httpHeaderValuepatternParam;
                service.comAdobeGraniteFragsImplCheckHttpHeaderFlag(post, apply, delete, action, $location, propertylist, featureName, featureDescription, httpHeaderName, httpHeaderValuepattern, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteFragsImplCheckHttpHeaderFlag");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteFragsImplCheckHttpHeaderFlag", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteFragsImplRandomFeature
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEFRAGSIMPLRANDOMFEATURE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteFragsImplRandomFeature";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String featureNameParam = message.body().getString("feature.name");
                String featureName = (featureNameParam == null) ? null : featureNameParam;
                String featureDescriptionParam = message.body().getString("feature.description");
                String featureDescription = (featureDescriptionParam == null) ? null : featureDescriptionParam;
                String activePercentageParam = message.body().getString("active.percentage");
                String activePercentage = (activePercentageParam == null) ? null : activePercentageParam;
                String cookieNameParam = message.body().getString("cookie.name");
                String cookieName = (cookieNameParam == null) ? null : cookieNameParam;
                String cookieMaxAgeParam = message.body().getString("cookie.maxAge");
                Integer cookieMaxAge = (cookieMaxAgeParam == null) ? null : Json.mapper.readValue(cookieMaxAgeParam, Integer.class);
                service.comAdobeGraniteFragsImplRandomFeature(post, apply, delete, action, $location, propertylist, featureName, featureDescription, activePercentage, cookieName, cookieMaxAge, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteFragsImplRandomFeature");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteFragsImplRandomFeature", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteHttpcacheFileFileCacheStore
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEHTTPCACHEFILEFILECACHESTORE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteHttpcacheFileFileCacheStore";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String comAdobeGraniteHttpcacheFileDocumentRootParam = message.body().getString("com.adobe.granite.httpcache.file.documentRoot");
                String comAdobeGraniteHttpcacheFileDocumentRoot = (comAdobeGraniteHttpcacheFileDocumentRootParam == null) ? null : comAdobeGraniteHttpcacheFileDocumentRootParam;
                String comAdobeGraniteHttpcacheFileIncludeHostParam = message.body().getString("com.adobe.granite.httpcache.file.includeHost");
                String comAdobeGraniteHttpcacheFileIncludeHost = (comAdobeGraniteHttpcacheFileIncludeHostParam == null) ? null : comAdobeGraniteHttpcacheFileIncludeHostParam;
                service.comAdobeGraniteHttpcacheFileFileCacheStore(post, apply, delete, action, $location, propertylist, comAdobeGraniteHttpcacheFileDocumentRoot, comAdobeGraniteHttpcacheFileIncludeHost, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteHttpcacheFileFileCacheStore");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteHttpcacheFileFileCacheStore", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteHttpcacheImplOuterCacheFilter
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEHTTPCACHEIMPLOUTERCACHEFILTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteHttpcacheImplOuterCacheFilter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray comAdobeGraniteHttpcacheUrlPathsParam = message.body().getJsonArray("com.adobe.granite.httpcache.url.paths");
                List<String> comAdobeGraniteHttpcacheUrlPaths = (comAdobeGraniteHttpcacheUrlPathsParam == null) ? null : Json.mapper.readValue(comAdobeGraniteHttpcacheUrlPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteHttpcacheImplOuterCacheFilter(post, apply, delete, action, $location, propertylist, comAdobeGraniteHttpcacheUrlPaths, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteHttpcacheImplOuterCacheFilter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteHttpcacheImplOuterCacheFilter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteI18nImplBundlePseudoTranslations
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEI18NIMPLBUNDLEPSEUDOTRANSLATIONS_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteI18nImplBundlePseudoTranslations";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray pseudoPatternsParam = message.body().getJsonArray("pseudo.patterns");
                List<String> pseudoPatterns = (pseudoPatternsParam == null) ? null : Json.mapper.readValue(pseudoPatternsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteI18nImplBundlePseudoTranslations(post, apply, delete, action, $location, propertylist, pseudoPatterns, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteI18nImplBundlePseudoTranslations");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteI18nImplBundlePseudoTranslations", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteI18nImplPreferencesLocaleResolverService
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEI18NIMPLPREFERENCESLOCALERESOLVERSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteI18nImplPreferencesLocaleResolverService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String securityPreferencesNameParam = message.body().getString("security.preferences.name");
                String securityPreferencesName = (securityPreferencesNameParam == null) ? null : securityPreferencesNameParam;
                service.comAdobeGraniteI18nImplPreferencesLocaleResolverService(post, apply, delete, action, $location, propertylist, securityPreferencesName, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteI18nImplPreferencesLocaleResolverService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteI18nImplPreferencesLocaleResolverService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteInfocollectorInfoCollector
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEINFOCOLLECTORINFOCOLLECTOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteInfocollectorInfoCollector";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String graniteInfocollectorIncludeThreadDumpsParam = message.body().getString("granite.infocollector.includeThreadDumps");
                Boolean graniteInfocollectorIncludeThreadDumps = (graniteInfocollectorIncludeThreadDumpsParam == null) ? null : Json.mapper.readValue(graniteInfocollectorIncludeThreadDumpsParam, Boolean.class);
                String graniteInfocollectorIncludeHeapDumpParam = message.body().getString("granite.infocollector.includeHeapDump");
                Boolean graniteInfocollectorIncludeHeapDump = (graniteInfocollectorIncludeHeapDumpParam == null) ? null : Json.mapper.readValue(graniteInfocollectorIncludeHeapDumpParam, Boolean.class);
                service.comAdobeGraniteInfocollectorInfoCollector(post, apply, delete, action, $location, propertylist, graniteInfocollectorIncludeThreadDumps, graniteInfocollectorIncludeHeapDump, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteInfocollectorInfoCollector");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteInfocollectorInfoCollector", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteJettySslInternalGraniteSslConnectorFactory
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEJETTYSSLINTERNALGRANITESSLCONNECTORFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteJettySslInternalGraniteSslConnectorFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String comAdobeGraniteJettySslPortParam = message.body().getString("com.adobe.granite.jetty.ssl.port");
                Integer comAdobeGraniteJettySslPort = (comAdobeGraniteJettySslPortParam == null) ? null : Json.mapper.readValue(comAdobeGraniteJettySslPortParam, Integer.class);
                String comAdobeGraniteJettySslKeystoreUserParam = message.body().getString("com.adobe.granite.jetty.ssl.keystore.user");
                String comAdobeGraniteJettySslKeystoreUser = (comAdobeGraniteJettySslKeystoreUserParam == null) ? null : comAdobeGraniteJettySslKeystoreUserParam;
                String comAdobeGraniteJettySslKeystorePasswordParam = message.body().getString("com.adobe.granite.jetty.ssl.keystore.password");
                String comAdobeGraniteJettySslKeystorePassword = (comAdobeGraniteJettySslKeystorePasswordParam == null) ? null : comAdobeGraniteJettySslKeystorePasswordParam;
                JsonArray comAdobeGraniteJettySslCiphersuitesExcludedParam = message.body().getJsonArray("com.adobe.granite.jetty.ssl.ciphersuites.excluded");
                List<String> comAdobeGraniteJettySslCiphersuitesExcluded = (comAdobeGraniteJettySslCiphersuitesExcludedParam == null) ? null : Json.mapper.readValue(comAdobeGraniteJettySslCiphersuitesExcludedParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray comAdobeGraniteJettySslCiphersuitesIncludedParam = message.body().getJsonArray("com.adobe.granite.jetty.ssl.ciphersuites.included");
                List<String> comAdobeGraniteJettySslCiphersuitesIncluded = (comAdobeGraniteJettySslCiphersuitesIncludedParam == null) ? null : Json.mapper.readValue(comAdobeGraniteJettySslCiphersuitesIncludedParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String comAdobeGraniteJettySslClientCertificateParam = message.body().getString("com.adobe.granite.jetty.ssl.client.certificate");
                String comAdobeGraniteJettySslClientCertificate = (comAdobeGraniteJettySslClientCertificateParam == null) ? null : comAdobeGraniteJettySslClientCertificateParam;
                service.comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(post, apply, delete, action, $location, propertylist, comAdobeGraniteJettySslPort, comAdobeGraniteJettySslKeystoreUser, comAdobeGraniteJettySslKeystorePassword, comAdobeGraniteJettySslCiphersuitesExcluded, comAdobeGraniteJettySslCiphersuitesIncluded, comAdobeGraniteJettySslClientCertificate, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteJettySslInternalGraniteSslConnectorFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteJettySslInternalGraniteSslConnectorFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteLicenseImplLicenseCheckFilter
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITELICENSEIMPLLICENSECHECKFILTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteLicenseImplLicenseCheckFilter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String checkInternvalParam = message.body().getString("checkInternval");
                Integer checkInternval = (checkInternvalParam == null) ? null : Json.mapper.readValue(checkInternvalParam, Integer.class);
                JsonArray excludeIdsParam = message.body().getJsonArray("excludeIds");
                List<String> excludeIds = (excludeIdsParam == null) ? null : Json.mapper.readValue(excludeIdsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String encryptPingParam = message.body().getString("encryptPing");
                Boolean encryptPing = (encryptPingParam == null) ? null : Json.mapper.readValue(encryptPingParam, Boolean.class);
                service.comAdobeGraniteLicenseImplLicenseCheckFilter(post, apply, delete, action, $location, propertylist, checkInternval, excludeIds, encryptPing, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteLicenseImplLicenseCheckFilter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteLicenseImplLicenseCheckFilter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteLoggingImplLogAnalyserImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITELOGGINGIMPLLOGANALYSERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteLoggingImplLogAnalyserImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String messagesQueueSizeParam = message.body().getString("messages.queue.size");
                Integer messagesQueueSize = (messagesQueueSizeParam == null) ? null : Json.mapper.readValue(messagesQueueSizeParam, Integer.class);
                JsonArray loggerConfigParam = message.body().getJsonArray("logger.config");
                List<String> loggerConfig = (loggerConfigParam == null) ? null : Json.mapper.readValue(loggerConfigParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String messagesSizeParam = message.body().getString("messages.size");
                Integer messagesSize = (messagesSizeParam == null) ? null : Json.mapper.readValue(messagesSizeParam, Integer.class);
                service.comAdobeGraniteLoggingImplLogAnalyserImpl(post, apply, delete, action, $location, propertylist, messagesQueueSize, loggerConfig, messagesSize, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteLoggingImplLogAnalyserImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteLoggingImplLogAnalyserImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteLoggingImplLogErrorHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITELOGGINGIMPLLOGERRORHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteLoggingImplLogErrorHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteLoggingImplLogErrorHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteLoggingImplLogErrorHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteLoggingImplLogErrorHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEMAINTENANCECRXIMPLDATASTOREGARBAGECOLLECTIONTASK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String graniteMaintenanceMandatoryParam = message.body().getString("granite.maintenance.mandatory");
                Boolean graniteMaintenanceMandatory = (graniteMaintenanceMandatoryParam == null) ? null : Json.mapper.readValue(graniteMaintenanceMandatoryParam, Boolean.class);
                String jobTopicsParam = message.body().getString("job.topics");
                String jobTopics = (jobTopicsParam == null) ? null : jobTopicsParam;
                service.comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(post, apply, delete, action, $location, propertylist, graniteMaintenanceMandatory, jobTopics, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEMAINTENANCECRXIMPLLUCENEBINARIESCLEANUPTASK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String jobTopicsParam = message.body().getString("job.topics");
                String jobTopics = (jobTopicsParam == null) ? null : jobTopicsParam;
                service.comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(post, apply, delete, action, $location, propertylist, jobTopics, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEMAINTENANCECRXIMPLREVISIONCLEANUPTASK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray fullGcDaysParam = message.body().getJsonArray("full.gc.days");
                List<String> fullGcDays = (fullGcDaysParam == null) ? null : Json.mapper.readValue(fullGcDaysParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(post, apply, delete, action, $location, propertylist, fullGcDays, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteMonitoringImplScriptConfigImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEMONITORINGIMPLSCRIPTCONFIGIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteMonitoringImplScriptConfigImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String scriptFilenameParam = message.body().getString("script.filename");
                String scriptFilename = (scriptFilenameParam == null) ? null : scriptFilenameParam;
                String scriptDisplayParam = message.body().getString("script.display");
                String scriptDisplay = (scriptDisplayParam == null) ? null : scriptDisplayParam;
                String scriptPathParam = message.body().getString("script.path");
                String scriptPath = (scriptPathParam == null) ? null : scriptPathParam;
                JsonArray scriptPlatformParam = message.body().getJsonArray("script.platform");
                List<String> scriptPlatform = (scriptPlatformParam == null) ? null : Json.mapper.readValue(scriptPlatformParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String intervalParam = message.body().getString("interval");
                Integer interval = (intervalParam == null) ? null : Json.mapper.readValue(intervalParam, Integer.class);
                String jmxdomainParam = message.body().getString("jmxdomain");
                String jmxdomain = (jmxdomainParam == null) ? null : jmxdomainParam;
                service.comAdobeGraniteMonitoringImplScriptConfigImpl(post, apply, delete, action, $location, propertylist, scriptFilename, scriptDisplay, scriptPath, scriptPlatform, interval, jmxdomain, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteMonitoringImplScriptConfigImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteMonitoringImplScriptConfigImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEOAUTHSERVERAUTHIMPLOAUTH2SERVERAUTHENTICATIONHAN_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pathParam = message.body().getString("path");
                String path = (pathParam == null) ? null : pathParam;
                String jaasControlFlagParam = message.body().getString("jaas.controlFlag");
                String jaasControlFlag = (jaasControlFlagParam == null) ? null : jaasControlFlagParam;
                String jaasRealmNameParam = message.body().getString("jaas.realmName");
                String jaasRealmName = (jaasRealmNameParam == null) ? null : jaasRealmNameParam;
                String jaasRankingParam = message.body().getString("jaas.ranking");
                Integer jaasRanking = (jaasRankingParam == null) ? null : Json.mapper.readValue(jaasRankingParam, Integer.class);
                String oauthOfflineValidationParam = message.body().getString("oauth.offline.validation");
                Boolean oauthOfflineValidation = (oauthOfflineValidationParam == null) ? null : Json.mapper.readValue(oauthOfflineValidationParam, Boolean.class);
                service.comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(post, apply, delete, action, $location, propertylist, path, jaasControlFlag, jaasRealmName, jaasRanking, oauthOfflineValidation, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteOauthServerImplAccessTokenCleanupTask
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEOAUTHSERVERIMPLACCESSTOKENCLEANUPTASK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteOauthServerImplAccessTokenCleanupTask";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String schedulerExpressionParam = message.body().getString("scheduler.expression");
                String schedulerExpression = (schedulerExpressionParam == null) ? null : schedulerExpressionParam;
                service.comAdobeGraniteOauthServerImplAccessTokenCleanupTask(post, apply, delete, action, $location, propertylist, schedulerExpression, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteOauthServerImplAccessTokenCleanupTask");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteOauthServerImplAccessTokenCleanupTask", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEOAUTHSERVERIMPLOAUTH2CLIENTREVOCATIONSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String oauthClientRevocationActiveParam = message.body().getString("oauth.client.revocation.active");
                Boolean oauthClientRevocationActive = (oauthClientRevocationActiveParam == null) ? null : Json.mapper.readValue(oauthClientRevocationActiveParam, Boolean.class);
                service.comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(post, apply, delete, action, $location, propertylist, oauthClientRevocationActive, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEOAUTHSERVERIMPLOAUTH2REVOCATIONENDPOINTSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingServletPathsParam = message.body().getString("sling.servlet.paths");
                String slingServletPaths = (slingServletPathsParam == null) ? null : slingServletPathsParam;
                String oauthRevocationActiveParam = message.body().getString("oauth.revocation.active");
                Boolean oauthRevocationActive = (oauthRevocationActiveParam == null) ? null : Json.mapper.readValue(oauthRevocationActiveParam, Boolean.class);
                service.comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(post, apply, delete, action, $location, propertylist, slingServletPaths, oauthRevocationActive, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEOAUTHSERVERIMPLOAUTH2TOKENENDPOINTSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String oauthIssuerParam = message.body().getString("oauth.issuer");
                String oauthIssuer = (oauthIssuerParam == null) ? null : oauthIssuerParam;
                String oauthAccessTokenExpiresInParam = message.body().getString("oauth.access.token.expires.in");
                String oauthAccessTokenExpiresIn = (oauthAccessTokenExpiresInParam == null) ? null : oauthAccessTokenExpiresInParam;
                String osgiHttpWhiteboardServletPatternParam = message.body().getString("osgi.http.whiteboard.servlet.pattern");
                String osgiHttpWhiteboardServletPattern = (osgiHttpWhiteboardServletPatternParam == null) ? null : osgiHttpWhiteboardServletPatternParam;
                String osgiHttpWhiteboardContextSelectParam = message.body().getString("osgi.http.whiteboard.context.select");
                String osgiHttpWhiteboardContextSelect = (osgiHttpWhiteboardContextSelectParam == null) ? null : osgiHttpWhiteboardContextSelectParam;
                service.comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(post, apply, delete, action, $location, propertylist, oauthIssuer, oauthAccessTokenExpiresIn, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEOAUTHSERVERIMPLOAUTH2TOKENREVOCATIONSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String oauthTokenRevocationActiveParam = message.body().getString("oauth.token.revocation.active");
                Boolean oauthTokenRevocationActive = (oauthTokenRevocationActiveParam == null) ? null : Json.mapper.readValue(oauthTokenRevocationActiveParam, Boolean.class);
                service.comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(post, apply, delete, action, $location, propertylist, oauthTokenRevocationActive, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteOffloadingImplOffloadingConfigurator
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEOFFLOADINGIMPLOFFLOADINGCONFIGURATOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteOffloadingImplOffloadingConfigurator";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String offloadingTransporterParam = message.body().getString("offloading.transporter");
                String offloadingTransporter = (offloadingTransporterParam == null) ? null : offloadingTransporterParam;
                String offloadingCleanupPayloadParam = message.body().getString("offloading.cleanup.payload");
                Boolean offloadingCleanupPayload = (offloadingCleanupPayloadParam == null) ? null : Json.mapper.readValue(offloadingCleanupPayloadParam, Boolean.class);
                service.comAdobeGraniteOffloadingImplOffloadingConfigurator(post, apply, delete, action, $location, propertylist, offloadingTransporter, offloadingCleanupPayload, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteOffloadingImplOffloadingConfigurator");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteOffloadingImplOffloadingConfigurator", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteOffloadingImplOffloadingJobCloner
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEOFFLOADINGIMPLOFFLOADINGJOBCLONER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteOffloadingImplOffloadingJobCloner";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String offloadingJobclonerEnabledParam = message.body().getString("offloading.jobcloner.enabled");
                Boolean offloadingJobclonerEnabled = (offloadingJobclonerEnabledParam == null) ? null : Json.mapper.readValue(offloadingJobclonerEnabledParam, Boolean.class);
                service.comAdobeGraniteOffloadingImplOffloadingJobCloner(post, apply, delete, action, $location, propertylist, offloadingJobclonerEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteOffloadingImplOffloadingJobCloner");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteOffloadingImplOffloadingJobCloner", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteOffloadingImplOffloadingJobOffloader
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEOFFLOADINGIMPLOFFLOADINGJOBOFFLOADER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteOffloadingImplOffloadingJobOffloader";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String offloadingOffloaderEnabledParam = message.body().getString("offloading.offloader.enabled");
                Boolean offloadingOffloaderEnabled = (offloadingOffloaderEnabledParam == null) ? null : Json.mapper.readValue(offloadingOffloaderEnabledParam, Boolean.class);
                service.comAdobeGraniteOffloadingImplOffloadingJobOffloader(post, apply, delete, action, $location, propertylist, offloadingOffloaderEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteOffloadingImplOffloadingJobOffloader");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteOffloadingImplOffloadingJobOffloader", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEOFFLOADINGIMPLTRANSPORTEROFFLOADINGAGENTMANAGER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String offloadingAgentmanagerEnabledParam = message.body().getString("offloading.agentmanager.enabled");
                Boolean offloadingAgentmanagerEnabled = (offloadingAgentmanagerEnabledParam == null) ? null : Json.mapper.readValue(offloadingAgentmanagerEnabledParam, Boolean.class);
                service.comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(post, apply, delete, action, $location, propertylist, offloadingAgentmanagerEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEOFFLOADINGIMPLTRANSPORTEROFFLOADINGDEFAULTTRANSPO_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String defaultTransportAgentToWorkerPrefixParam = message.body().getString("default.transport.agent-to-worker.prefix");
                String defaultTransportAgentToWorkerPrefix = (defaultTransportAgentToWorkerPrefixParam == null) ? null : defaultTransportAgentToWorkerPrefixParam;
                String defaultTransportAgentToMasterPrefixParam = message.body().getString("default.transport.agent-to-master.prefix");
                String defaultTransportAgentToMasterPrefix = (defaultTransportAgentToMasterPrefixParam == null) ? null : defaultTransportAgentToMasterPrefixParam;
                String defaultTransportInputPackageParam = message.body().getString("default.transport.input.package");
                String defaultTransportInputPackage = (defaultTransportInputPackageParam == null) ? null : defaultTransportInputPackageParam;
                String defaultTransportOutputPackageParam = message.body().getString("default.transport.output.package");
                String defaultTransportOutputPackage = (defaultTransportOutputPackageParam == null) ? null : defaultTransportOutputPackageParam;
                String defaultTransportReplicationSynchronousParam = message.body().getString("default.transport.replication.synchronous");
                Boolean defaultTransportReplicationSynchronous = (defaultTransportReplicationSynchronousParam == null) ? null : Json.mapper.readValue(defaultTransportReplicationSynchronousParam, Boolean.class);
                String defaultTransportContentpackageParam = message.body().getString("default.transport.contentpackage");
                Boolean defaultTransportContentpackage = (defaultTransportContentpackageParam == null) ? null : Json.mapper.readValue(defaultTransportContentpackageParam, Boolean.class);
                String offloadingTransporterDefaultEnabledParam = message.body().getString("offloading.transporter.default.enabled");
                Boolean offloadingTransporterDefaultEnabled = (offloadingTransporterDefaultEnabledParam == null) ? null : Json.mapper.readValue(offloadingTransporterDefaultEnabledParam, Boolean.class);
                service.comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(post, apply, delete, action, $location, propertylist, defaultTransportAgentToWorkerPrefix, defaultTransportAgentToMasterPrefix, defaultTransportInputPackage, defaultTransportOutputPackage, defaultTransportReplicationSynchronous, defaultTransportContentpackage, offloadingTransporterDefaultEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEOMNISEARCHIMPLCOREOMNISEARCHSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String omnisearchSuggestionRequiretextMinParam = message.body().getString("omnisearch.suggestion.requiretext.min");
                Integer omnisearchSuggestionRequiretextMin = (omnisearchSuggestionRequiretextMinParam == null) ? null : Json.mapper.readValue(omnisearchSuggestionRequiretextMinParam, Integer.class);
                String omnisearchSuggestionSpellcheckRequireParam = message.body().getString("omnisearch.suggestion.spellcheck.require");
                Boolean omnisearchSuggestionSpellcheckRequire = (omnisearchSuggestionSpellcheckRequireParam == null) ? null : Json.mapper.readValue(omnisearchSuggestionSpellcheckRequireParam, Boolean.class);
                service.comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(post, apply, delete, action, $location, propertylist, omnisearchSuggestionRequiretextMin, omnisearchSuggestionSpellcheckRequire, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteOptoutImplOptOutServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEOPTOUTIMPLOPTOUTSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteOptoutImplOptOutServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray optoutCookiesParam = message.body().getJsonArray("optout.cookies");
                List<String> optoutCookies = (optoutCookiesParam == null) ? null : Json.mapper.readValue(optoutCookiesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray optoutHeadersParam = message.body().getJsonArray("optout.headers");
                List<String> optoutHeaders = (optoutHeadersParam == null) ? null : Json.mapper.readValue(optoutHeadersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray optoutWhitelistCookiesParam = message.body().getJsonArray("optout.whitelist.cookies");
                List<String> optoutWhitelistCookies = (optoutWhitelistCookiesParam == null) ? null : Json.mapper.readValue(optoutWhitelistCookiesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteOptoutImplOptOutServiceImpl(post, apply, delete, action, $location, propertylist, optoutCookies, optoutHeaders, optoutWhitelistCookies, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteOptoutImplOptOutServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteOptoutImplOptOutServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEQUERIESIMPLHCASYNCINDEXHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String indexingCriticalThresholdParam = message.body().getString("indexing.critical.threshold");
                Integer indexingCriticalThreshold = (indexingCriticalThresholdParam == null) ? null : Json.mapper.readValue(indexingCriticalThresholdParam, Integer.class);
                String indexingWarnThresholdParam = message.body().getString("indexing.warn.threshold");
                Integer indexingWarnThreshold = (indexingWarnThresholdParam == null) ? null : Json.mapper.readValue(indexingWarnThresholdParam, Integer.class);
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(post, apply, delete, action, $location, propertylist, indexingCriticalThreshold, indexingWarnThreshold, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteQueriesImplHcLargeIndexHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEQUERIESIMPLHCLARGEINDEXHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteQueriesImplHcLargeIndexHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String largeIndexCriticalThresholdParam = message.body().getString("large.index.critical.threshold");
                Integer largeIndexCriticalThreshold = (largeIndexCriticalThresholdParam == null) ? null : Json.mapper.readValue(largeIndexCriticalThresholdParam, Integer.class);
                String largeIndexWarnThresholdParam = message.body().getString("large.index.warn.threshold");
                Integer largeIndexWarnThreshold = (largeIndexWarnThresholdParam == null) ? null : Json.mapper.readValue(largeIndexWarnThresholdParam, Integer.class);
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(post, apply, delete, action, $location, propertylist, largeIndexCriticalThreshold, largeIndexWarnThreshold, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteQueriesImplHcLargeIndexHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteQueriesImplHcLargeIndexHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEQUERIESIMPLHCQUERIESSTATUSHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEQUERIESIMPLHCQUERYHEALTHCHECKMETRICS_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String getPeriodParam = message.body().getString("getPeriod");
                Integer getPeriod = (getPeriodParam == null) ? null : Json.mapper.readValue(getPeriodParam, Integer.class);
                service.comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(post, apply, delete, action, $location, propertylist, getPeriod, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEQUERIESIMPLHCQUERYLIMITSHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEREPLICATIONHCIMPLREPLICATIONQUEUEHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String numberOfRetriesAllowedParam = message.body().getString("number.of.retries.allowed");
                Integer numberOfRetriesAllowed = (numberOfRetriesAllowedParam == null) ? null : Json.mapper.readValue(numberOfRetriesAllowedParam, Integer.class);
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(post, apply, delete, action, $location, propertylist, numberOfRetriesAllowed, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEREPLICATIONHCIMPLREPLICATIONTRANSPORTUSERSHEALTHC_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(post, apply, delete, action, $location, propertylist, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEREPOSITORYHCIMPLAUTHORIZABLENODENAMEHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEREPOSITORYHCIMPLCONTENTSLINGSLINGCONTENTHEALTHC_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray excludeSearchPathParam = message.body().getJsonArray("exclude.search.path");
                List<String> excludeSearchPath = (excludeSearchPathParam == null) ? null : Json.mapper.readValue(excludeSearchPathParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(post, apply, delete, action, $location, propertylist, hcTags, excludeSearchPath, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEREPOSITORYHCIMPLCONTINUOUSRGCHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEREPOSITORYHCIMPLDEFAULTACCESSUSERPROFILEHEALTHCHE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(post, apply, delete, action, $location, propertylist, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEREPOSITORYHCIMPLDEFAULTLOGINSHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray accountLoginsParam = message.body().getJsonArray("account.logins");
                List<String> accountLogins = (accountLoginsParam == null) ? null : Json.mapper.readValue(accountLoginsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray consoleLoginsParam = message.body().getJsonArray("console.logins");
                List<String> consoleLogins = (consoleLoginsParam == null) ? null : Json.mapper.readValue(consoleLoginsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, accountLogins, consoleLogins, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEREPOSITORYHCIMPLDISKSPACEHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String diskSpaceWarnThresholdParam = message.body().getString("disk.space.warn.threshold");
                Integer diskSpaceWarnThreshold = (diskSpaceWarnThresholdParam == null) ? null : Json.mapper.readValue(diskSpaceWarnThresholdParam, Integer.class);
                String diskSpaceErrorThresholdParam = message.body().getString("disk.space.error.threshold");
                Integer diskSpaceErrorThreshold = (diskSpaceErrorThresholdParam == null) ? null : Json.mapper.readValue(diskSpaceErrorThresholdParam, Integer.class);
                service.comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, diskSpaceWarnThreshold, diskSpaceErrorThreshold, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEREPOSITORYHCIMPLOBSERVATIONQUEUELENGTHHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteRepositoryImplCommitStatsConfig
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEREPOSITORYIMPLCOMMITSTATSCONFIG_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteRepositoryImplCommitStatsConfig";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                String intervalSecondsParam = message.body().getString("intervalSeconds");
                Integer intervalSeconds = (intervalSecondsParam == null) ? null : Json.mapper.readValue(intervalSecondsParam, Integer.class);
                String commitsPerIntervalThresholdParam = message.body().getString("commitsPerIntervalThreshold");
                Integer commitsPerIntervalThreshold = (commitsPerIntervalThresholdParam == null) ? null : Json.mapper.readValue(commitsPerIntervalThresholdParam, Integer.class);
                String maxLocationLengthParam = message.body().getString("maxLocationLength");
                Integer maxLocationLength = (maxLocationLengthParam == null) ? null : Json.mapper.readValue(maxLocationLengthParam, Integer.class);
                String maxDetailsShownParam = message.body().getString("maxDetailsShown");
                Integer maxDetailsShown = (maxDetailsShownParam == null) ? null : Json.mapper.readValue(maxDetailsShownParam, Integer.class);
                String minDetailsPercentageParam = message.body().getString("minDetailsPercentage");
                Integer minDetailsPercentage = (minDetailsPercentageParam == null) ? null : Json.mapper.readValue(minDetailsPercentageParam, Integer.class);
                JsonArray threadMatchersParam = message.body().getJsonArray("threadMatchers");
                List<String> threadMatchers = (threadMatchersParam == null) ? null : Json.mapper.readValue(threadMatchersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String maxGreedyDepthParam = message.body().getString("maxGreedyDepth");
                Integer maxGreedyDepth = (maxGreedyDepthParam == null) ? null : Json.mapper.readValue(maxGreedyDepthParam, Integer.class);
                String greedyStackMatchersParam = message.body().getString("greedyStackMatchers");
                String greedyStackMatchers = (greedyStackMatchersParam == null) ? null : greedyStackMatchersParam;
                JsonArray stackFiltersParam = message.body().getJsonArray("stackFilters");
                List<String> stackFilters = (stackFiltersParam == null) ? null : Json.mapper.readValue(stackFiltersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray stackMatchersParam = message.body().getJsonArray("stackMatchers");
                List<String> stackMatchers = (stackMatchersParam == null) ? null : Json.mapper.readValue(stackMatchersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray stackCategorizersParam = message.body().getJsonArray("stackCategorizers");
                List<String> stackCategorizers = (stackCategorizersParam == null) ? null : Json.mapper.readValue(stackCategorizersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray stackShortenersParam = message.body().getJsonArray("stackShorteners");
                List<String> stackShorteners = (stackShortenersParam == null) ? null : Json.mapper.readValue(stackShortenersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteRepositoryImplCommitStatsConfig(post, apply, delete, action, $location, propertylist, enabled, intervalSeconds, commitsPerIntervalThreshold, maxLocationLength, maxDetailsShown, minDetailsPercentage, threadMatchers, maxGreedyDepth, greedyStackMatchers, stackFilters, stackMatchers, stackCategorizers, stackShorteners, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteRepositoryImplCommitStatsConfig");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteRepositoryImplCommitStatsConfig", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteRepositoryServiceUserConfiguration
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEREPOSITORYSERVICEUSERCONFIGURATION_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteRepositoryServiceUserConfiguration";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String serviceusersSimpleSubjectPopulationParam = message.body().getString("serviceusers.simpleSubjectPopulation");
                Boolean serviceusersSimpleSubjectPopulation = (serviceusersSimpleSubjectPopulationParam == null) ? null : Json.mapper.readValue(serviceusersSimpleSubjectPopulationParam, Boolean.class);
                JsonArray serviceusersListParam = message.body().getJsonArray("serviceusers.list");
                List<String> serviceusersList = (serviceusersListParam == null) ? null : Json.mapper.readValue(serviceusersListParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteRepositoryServiceUserConfiguration(post, apply, delete, action, $location, propertylist, serviceRanking, serviceusersSimpleSubjectPopulation, serviceusersList, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteRepositoryServiceUserConfiguration");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteRepositoryServiceUserConfiguration", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEREQUESTSLOGGINGIMPLHCREQUESTSSTATUSHEALTHCHECKIM_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(post, apply, delete, action, $location, propertylist, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteResourcestatusImplCompositeStatusType
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITERESOURCESTATUSIMPLCOMPOSITESTATUSTYPE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteResourcestatusImplCompositeStatusType";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                JsonArray typesParam = message.body().getJsonArray("types");
                List<String> types = (typesParam == null) ? null : Json.mapper.readValue(typesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteResourcestatusImplCompositeStatusType(post, apply, delete, action, $location, propertylist, name, types, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteResourcestatusImplCompositeStatusType");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteResourcestatusImplCompositeStatusType", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteResourcestatusImplStatusResourceProviderImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITERESOURCESTATUSIMPLSTATUSRESOURCEPROVIDERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteResourcestatusImplStatusResourceProviderImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String providerRootParam = message.body().getString("provider.root");
                String providerRoot = (providerRootParam == null) ? null : providerRootParam;
                service.comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(post, apply, delete, action, $location, propertylist, providerRoot, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteResourcestatusImplStatusResourceProviderImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteResourcestatusImplStatusResourceProviderImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteRestAssetsImplAssetContentDispositionFilter
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITERESTASSETSIMPLASSETCONTENTDISPOSITIONFILTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteRestAssetsImplAssetContentDispositionFilter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String mimeAllowEmptyParam = message.body().getString("mime.allowEmpty");
                Boolean mimeAllowEmpty = (mimeAllowEmptyParam == null) ? null : Json.mapper.readValue(mimeAllowEmptyParam, Boolean.class);
                JsonArray mimeAllowedParam = message.body().getJsonArray("mime.allowed");
                List<String> mimeAllowed = (mimeAllowedParam == null) ? null : Json.mapper.readValue(mimeAllowedParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(post, apply, delete, action, $location, propertylist, mimeAllowEmpty, mimeAllowed, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteRestAssetsImplAssetContentDispositionFilter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteRestAssetsImplAssetContentDispositionFilter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITERESTIMPLAPIENDPOINTRESOURCEPROVIDERFACTORYIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String providerRootsParam = message.body().getString("provider.roots");
                String providerRoots = (providerRootsParam == null) ? null : providerRootsParam;
                service.comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(post, apply, delete, action, $location, propertylist, providerRoots, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteRestImplServletDefaultGETServlet
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITERESTIMPLSERVLETDEFAULTGETSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteRestImplServletDefaultGETServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String defaultLimitParam = message.body().getString("default.limit");
                Integer defaultLimit = (defaultLimitParam == null) ? null : Json.mapper.readValue(defaultLimitParam, Integer.class);
                String useAbsoluteUriParam = message.body().getString("use.absolute.uri");
                Boolean useAbsoluteUri = (useAbsoluteUriParam == null) ? null : Json.mapper.readValue(useAbsoluteUriParam, Boolean.class);
                service.comAdobeGraniteRestImplServletDefaultGETServlet(post, apply, delete, action, $location, propertylist, defaultLimit, useAbsoluteUri, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteRestImplServletDefaultGETServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteRestImplServletDefaultGETServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITESECURITYUSERUIINTERNALSERVLETSSSLCONFIGURATIONS_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(post, apply, delete, action, $location, propertylist, hcTags, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteSecurityUserUserPropertiesService
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITESECURITYUSERUSERPROPERTIESSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteSecurityUserUserPropertiesService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String adapterConditionParam = message.body().getString("adapter.condition");
                String adapterCondition = (adapterConditionParam == null) ? null : adapterConditionParam;
                JsonArray graniteUserpropertiesNodetypesParam = message.body().getJsonArray("granite.userproperties.nodetypes");
                List<String> graniteUserpropertiesNodetypes = (graniteUserpropertiesNodetypesParam == null) ? null : Json.mapper.readValue(graniteUserpropertiesNodetypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray graniteUserpropertiesResourcetypesParam = message.body().getJsonArray("granite.userproperties.resourcetypes");
                List<String> graniteUserpropertiesResourcetypes = (graniteUserpropertiesResourcetypesParam == null) ? null : Json.mapper.readValue(graniteUserpropertiesResourcetypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteSecurityUserUserPropertiesService(post, apply, delete, action, $location, propertylist, adapterCondition, graniteUserpropertiesNodetypes, graniteUserpropertiesResourcetypes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteSecurityUserUserPropertiesService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteSecurityUserUserPropertiesService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITESOCIALGRAPHIMPLSOCIALGRAPHFACTORYIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String group2memberRelationshipOutgoingParam = message.body().getString("group2member.relationship.outgoing");
                String group2memberRelationshipOutgoing = (group2memberRelationshipOutgoingParam == null) ? null : group2memberRelationshipOutgoingParam;
                JsonArray group2memberExcludedOutgoingParam = message.body().getJsonArray("group2member.excluded.outgoing");
                List<String> group2memberExcludedOutgoing = (group2memberExcludedOutgoingParam == null) ? null : Json.mapper.readValue(group2memberExcludedOutgoingParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String group2memberRelationshipIncomingParam = message.body().getString("group2member.relationship.incoming");
                String group2memberRelationshipIncoming = (group2memberRelationshipIncomingParam == null) ? null : group2memberRelationshipIncomingParam;
                JsonArray group2memberExcludedIncomingParam = message.body().getJsonArray("group2member.excluded.incoming");
                List<String> group2memberExcludedIncoming = (group2memberExcludedIncomingParam == null) ? null : Json.mapper.readValue(group2memberExcludedIncomingParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(post, apply, delete, action, $location, propertylist, group2memberRelationshipOutgoing, group2memberExcludedOutgoing, group2memberRelationshipIncoming, group2memberExcludedIncoming, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITESYSTEMMONITORINGIMPLSYSTEMSTATSMBEANIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String schedulerExpressionParam = message.body().getString("scheduler.expression");
                String schedulerExpression = (schedulerExpressionParam == null) ? null : schedulerExpressionParam;
                String jmxObjectnameParam = message.body().getString("jmx.objectname");
                String jmxObjectname = (jmxObjectnameParam == null) ? null : jmxObjectnameParam;
                service.comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(post, apply, delete, action, $location, propertylist, schedulerExpression, jmxObjectname, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITETASKMANAGEMENTIMPLJCRTASKADAPTERFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String adapterConditionParam = message.body().getString("adapter.condition");
                String adapterCondition = (adapterConditionParam == null) ? null : adapterConditionParam;
                service.comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(post, apply, delete, action, $location, propertylist, adapterCondition, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteTaskmanagementImplJcrTaskArchiveService
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITETASKMANAGEMENTIMPLJCRTASKARCHIVESERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteTaskmanagementImplJcrTaskArchiveService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String archivingEnabledParam = message.body().getString("archiving.enabled");
                Boolean archivingEnabled = (archivingEnabledParam == null) ? null : Json.mapper.readValue(archivingEnabledParam, Boolean.class);
                String schedulerExpressionParam = message.body().getString("scheduler.expression");
                String schedulerExpression = (schedulerExpressionParam == null) ? null : schedulerExpressionParam;
                String archiveSinceDaysCompletedParam = message.body().getString("archive.since.days.completed");
                Integer archiveSinceDaysCompleted = (archiveSinceDaysCompletedParam == null) ? null : Json.mapper.readValue(archiveSinceDaysCompletedParam, Integer.class);
                service.comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(post, apply, delete, action, $location, propertylist, archivingEnabled, schedulerExpression, archiveSinceDaysCompleted, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteTaskmanagementImplJcrTaskArchiveService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteTaskmanagementImplJcrTaskArchiveService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITETASKMANAGEMENTIMPLPURGETASKPURGEMAINTENANCETASK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String purgeCompletedParam = message.body().getString("purgeCompleted");
                Boolean purgeCompleted = (purgeCompletedParam == null) ? null : Json.mapper.readValue(purgeCompletedParam, Boolean.class);
                String completedAgeParam = message.body().getString("completedAge");
                Integer completedAge = (completedAgeParam == null) ? null : Json.mapper.readValue(completedAgeParam, Integer.class);
                String purgeActiveParam = message.body().getString("purgeActive");
                Boolean purgeActive = (purgeActiveParam == null) ? null : Json.mapper.readValue(purgeActiveParam, Boolean.class);
                String activeAgeParam = message.body().getString("activeAge");
                Integer activeAge = (activeAgeParam == null) ? null : Json.mapper.readValue(activeAgeParam, Integer.class);
                String saveThresholdParam = message.body().getString("saveThreshold");
                Integer saveThreshold = (saveThresholdParam == null) ? null : Json.mapper.readValue(saveThresholdParam, Integer.class);
                service.comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(post, apply, delete, action, $location, propertylist, purgeCompleted, completedAge, purgeActive, activeAge, saveThreshold, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITETASKMANAGEMENTIMPLSERVICETASKMANAGERADAPTERFACTOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String adapterConditionParam = message.body().getString("adapter.condition");
                String adapterCondition = (adapterConditionParam == null) ? null : adapterConditionParam;
                JsonArray taskmanagerAdmingroupsParam = message.body().getJsonArray("taskmanager.admingroups");
                List<String> taskmanagerAdmingroups = (taskmanagerAdmingroupsParam == null) ? null : Json.mapper.readValue(taskmanagerAdmingroupsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(post, apply, delete, action, $location, propertylist, adapterCondition, taskmanagerAdmingroups, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteThreaddumpThreadDumpCollector
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITETHREADDUMPTHREADDUMPCOLLECTOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteThreaddumpThreadDumpCollector";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String schedulerPeriodParam = message.body().getString("scheduler.period");
                Integer schedulerPeriod = (schedulerPeriodParam == null) ? null : Json.mapper.readValue(schedulerPeriodParam, Integer.class);
                String schedulerRunOnParam = message.body().getString("scheduler.runOn");
                String schedulerRunOn = (schedulerRunOnParam == null) ? null : schedulerRunOnParam;
                String graniteThreaddumpEnabledParam = message.body().getString("granite.threaddump.enabled");
                Boolean graniteThreaddumpEnabled = (graniteThreaddumpEnabledParam == null) ? null : Json.mapper.readValue(graniteThreaddumpEnabledParam, Boolean.class);
                String graniteThreaddumpDumpsPerFileParam = message.body().getString("granite.threaddump.dumpsPerFile");
                Integer graniteThreaddumpDumpsPerFile = (graniteThreaddumpDumpsPerFileParam == null) ? null : Json.mapper.readValue(graniteThreaddumpDumpsPerFileParam, Integer.class);
                String graniteThreaddumpEnableGzipCompressionParam = message.body().getString("granite.threaddump.enableGzipCompression");
                Boolean graniteThreaddumpEnableGzipCompression = (graniteThreaddumpEnableGzipCompressionParam == null) ? null : Json.mapper.readValue(graniteThreaddumpEnableGzipCompressionParam, Boolean.class);
                String graniteThreaddumpEnableDirectoriesCompressionParam = message.body().getString("granite.threaddump.enableDirectoriesCompression");
                Boolean graniteThreaddumpEnableDirectoriesCompression = (graniteThreaddumpEnableDirectoriesCompressionParam == null) ? null : Json.mapper.readValue(graniteThreaddumpEnableDirectoriesCompressionParam, Boolean.class);
                String graniteThreaddumpEnableJStackParam = message.body().getString("granite.threaddump.enableJStack");
                Boolean graniteThreaddumpEnableJStack = (graniteThreaddumpEnableJStackParam == null) ? null : Json.mapper.readValue(graniteThreaddumpEnableJStackParam, Boolean.class);
                String graniteThreaddumpMaxBackupDaysParam = message.body().getString("granite.threaddump.maxBackupDays");
                Integer graniteThreaddumpMaxBackupDays = (graniteThreaddumpMaxBackupDaysParam == null) ? null : Json.mapper.readValue(graniteThreaddumpMaxBackupDaysParam, Integer.class);
                String graniteThreaddumpBackupCleanTriggerParam = message.body().getString("granite.threaddump.backupCleanTrigger");
                String graniteThreaddumpBackupCleanTrigger = (graniteThreaddumpBackupCleanTriggerParam == null) ? null : graniteThreaddumpBackupCleanTriggerParam;
                service.comAdobeGraniteThreaddumpThreadDumpCollector(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerRunOn, graniteThreaddumpEnabled, graniteThreaddumpDumpsPerFile, graniteThreaddumpEnableGzipCompression, graniteThreaddumpEnableDirectoriesCompression, graniteThreaddumpEnableJStack, graniteThreaddumpMaxBackupDays, graniteThreaddumpBackupCleanTrigger, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteThreaddumpThreadDumpCollector");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteThreaddumpThreadDumpCollector", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITETRANSLATIONCONNECTORMSFTCOREIMPLMICROSOFTTRANSL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String translationFactoryParam = message.body().getString("translationFactory");
                String translationFactory = (translationFactoryParam == null) ? null : translationFactoryParam;
                String defaultConnectorLabelParam = message.body().getString("defaultConnectorLabel");
                String defaultConnectorLabel = (defaultConnectorLabelParam == null) ? null : defaultConnectorLabelParam;
                String defaultConnectorAttributionParam = message.body().getString("defaultConnectorAttribution");
                String defaultConnectorAttribution = (defaultConnectorAttributionParam == null) ? null : defaultConnectorAttributionParam;
                String defaultConnectorWorkspaceIdParam = message.body().getString("defaultConnectorWorkspaceId");
                String defaultConnectorWorkspaceId = (defaultConnectorWorkspaceIdParam == null) ? null : defaultConnectorWorkspaceIdParam;
                String defaultConnectorSubscriptionKeyParam = message.body().getString("defaultConnectorSubscriptionKey");
                String defaultConnectorSubscriptionKey = (defaultConnectorSubscriptionKeyParam == null) ? null : defaultConnectorSubscriptionKeyParam;
                String languageMapLocationParam = message.body().getString("languageMapLocation");
                String languageMapLocation = (languageMapLocationParam == null) ? null : languageMapLocationParam;
                String categoryMapLocationParam = message.body().getString("categoryMapLocation");
                String categoryMapLocation = (categoryMapLocationParam == null) ? null : categoryMapLocationParam;
                String retryAttemptsParam = message.body().getString("retryAttempts");
                Integer retryAttempts = (retryAttemptsParam == null) ? null : Json.mapper.readValue(retryAttemptsParam, Integer.class);
                String timeoutCountParam = message.body().getString("timeoutCount");
                Integer timeoutCount = (timeoutCountParam == null) ? null : Json.mapper.readValue(timeoutCountParam, Integer.class);
                service.comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(post, apply, delete, action, $location, propertylist, translationFactory, defaultConnectorLabel, defaultConnectorAttribution, defaultConnectorWorkspaceId, defaultConnectorSubscriptionKey, languageMapLocation, categoryMapLocation, retryAttempts, timeoutCount, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteTranslationCoreImplTranslationManagerImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITETRANSLATIONCOREIMPLTRANSLATIONMANAGERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteTranslationCoreImplTranslationManagerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String defaultConnectorNameParam = message.body().getString("defaultConnectorName");
                String defaultConnectorName = (defaultConnectorNameParam == null) ? null : defaultConnectorNameParam;
                String defaultCategoryParam = message.body().getString("defaultCategory");
                String defaultCategory = (defaultCategoryParam == null) ? null : defaultCategoryParam;
                service.comAdobeGraniteTranslationCoreImplTranslationManagerImpl(post, apply, delete, action, $location, propertylist, defaultConnectorName, defaultCategory, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteTranslationCoreImplTranslationManagerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteTranslationCoreImplTranslationManagerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEUICLIENTLIBSIMPLHTMLLIBRARYMANAGERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String htmllibmanagerTimingParam = message.body().getString("htmllibmanager.timing");
                Boolean htmllibmanagerTiming = (htmllibmanagerTimingParam == null) ? null : Json.mapper.readValue(htmllibmanagerTimingParam, Boolean.class);
                String htmllibmanagerDebugInitJsParam = message.body().getString("htmllibmanager.debug.init.js");
                String htmllibmanagerDebugInitJs = (htmllibmanagerDebugInitJsParam == null) ? null : htmllibmanagerDebugInitJsParam;
                String htmllibmanagerMinifyParam = message.body().getString("htmllibmanager.minify");
                Boolean htmllibmanagerMinify = (htmllibmanagerMinifyParam == null) ? null : Json.mapper.readValue(htmllibmanagerMinifyParam, Boolean.class);
                String htmllibmanagerDebugParam = message.body().getString("htmllibmanager.debug");
                Boolean htmllibmanagerDebug = (htmllibmanagerDebugParam == null) ? null : Json.mapper.readValue(htmllibmanagerDebugParam, Boolean.class);
                String htmllibmanagerGzipParam = message.body().getString("htmllibmanager.gzip");
                Boolean htmllibmanagerGzip = (htmllibmanagerGzipParam == null) ? null : Json.mapper.readValue(htmllibmanagerGzipParam, Boolean.class);
                String htmllibmanagerMaxDataUriSizeParam = message.body().getString("htmllibmanager.maxDataUriSize");
                Integer htmllibmanagerMaxDataUriSize = (htmllibmanagerMaxDataUriSizeParam == null) ? null : Json.mapper.readValue(htmllibmanagerMaxDataUriSizeParam, Integer.class);
                String htmllibmanagerMaxageParam = message.body().getString("htmllibmanager.maxage");
                Integer htmllibmanagerMaxage = (htmllibmanagerMaxageParam == null) ? null : Json.mapper.readValue(htmllibmanagerMaxageParam, Integer.class);
                String htmllibmanagerForceCQUrlInfoParam = message.body().getString("htmllibmanager.forceCQUrlInfo");
                Boolean htmllibmanagerForceCQUrlInfo = (htmllibmanagerForceCQUrlInfoParam == null) ? null : Json.mapper.readValue(htmllibmanagerForceCQUrlInfoParam, Boolean.class);
                String htmllibmanagerDefaultthemenameParam = message.body().getString("htmllibmanager.defaultthemename");
                String htmllibmanagerDefaultthemename = (htmllibmanagerDefaultthemenameParam == null) ? null : htmllibmanagerDefaultthemenameParam;
                String htmllibmanagerDefaultuserthemenameParam = message.body().getString("htmllibmanager.defaultuserthemename");
                String htmllibmanagerDefaultuserthemename = (htmllibmanagerDefaultuserthemenameParam == null) ? null : htmllibmanagerDefaultuserthemenameParam;
                String htmllibmanagerClientmanagerParam = message.body().getString("htmllibmanager.clientmanager");
                String htmllibmanagerClientmanager = (htmllibmanagerClientmanagerParam == null) ? null : htmllibmanagerClientmanagerParam;
                JsonArray htmllibmanagerPathListParam = message.body().getJsonArray("htmllibmanager.path.list");
                List<String> htmllibmanagerPathList = (htmllibmanagerPathListParam == null) ? null : Json.mapper.readValue(htmllibmanagerPathListParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray htmllibmanagerExcludedPathListParam = message.body().getJsonArray("htmllibmanager.excluded.path.list");
                List<String> htmllibmanagerExcludedPathList = (htmllibmanagerExcludedPathListParam == null) ? null : Json.mapper.readValue(htmllibmanagerExcludedPathListParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray htmllibmanagerProcessorJsParam = message.body().getJsonArray("htmllibmanager.processor.js");
                List<String> htmllibmanagerProcessorJs = (htmllibmanagerProcessorJsParam == null) ? null : Json.mapper.readValue(htmllibmanagerProcessorJsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray htmllibmanagerProcessorCssParam = message.body().getJsonArray("htmllibmanager.processor.css");
                List<String> htmllibmanagerProcessorCss = (htmllibmanagerProcessorCssParam == null) ? null : Json.mapper.readValue(htmllibmanagerProcessorCssParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray htmllibmanagerLongcachePatternsParam = message.body().getJsonArray("htmllibmanager.longcache.patterns");
                List<String> htmllibmanagerLongcachePatterns = (htmllibmanagerLongcachePatternsParam == null) ? null : Json.mapper.readValue(htmllibmanagerLongcachePatternsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String htmllibmanagerLongcacheFormatParam = message.body().getString("htmllibmanager.longcache.format");
                String htmllibmanagerLongcacheFormat = (htmllibmanagerLongcacheFormatParam == null) ? null : htmllibmanagerLongcacheFormatParam;
                String htmllibmanagerUseFileSystemOutputCacheParam = message.body().getString("htmllibmanager.useFileSystemOutputCache");
                Boolean htmllibmanagerUseFileSystemOutputCache = (htmllibmanagerUseFileSystemOutputCacheParam == null) ? null : Json.mapper.readValue(htmllibmanagerUseFileSystemOutputCacheParam, Boolean.class);
                String htmllibmanagerFileSystemOutputCacheLocationParam = message.body().getString("htmllibmanager.fileSystemOutputCacheLocation");
                String htmllibmanagerFileSystemOutputCacheLocation = (htmllibmanagerFileSystemOutputCacheLocationParam == null) ? null : htmllibmanagerFileSystemOutputCacheLocationParam;
                JsonArray htmllibmanagerDisableReplacementParam = message.body().getJsonArray("htmllibmanager.disable.replacement");
                List<String> htmllibmanagerDisableReplacement = (htmllibmanagerDisableReplacementParam == null) ? null : Json.mapper.readValue(htmllibmanagerDisableReplacementParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(post, apply, delete, action, $location, propertylist, htmllibmanagerTiming, htmllibmanagerDebugInitJs, htmllibmanagerMinify, htmllibmanagerDebug, htmllibmanagerGzip, htmllibmanagerMaxDataUriSize, htmllibmanagerMaxage, htmllibmanagerForceCQUrlInfo, htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename, htmllibmanagerClientmanager, htmllibmanagerPathList, htmllibmanagerExcludedPathList, htmllibmanagerProcessorJs, htmllibmanagerProcessorCss, htmllibmanagerLongcachePatterns, htmllibmanagerLongcacheFormat, htmllibmanagerUseFileSystemOutputCache, htmllibmanagerFileSystemOutputCacheLocation, htmllibmanagerDisableReplacement, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEWORKFLOWCONSOLEFRAGSWORKFLOWWITHDRAWFEATURE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                service.comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(post, apply, delete, action, $location, propertylist, enabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEWORKFLOWCONSOLEPUBLISHWORKFLOWPUBLISHEVENTSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String graniteWorkflowWorkflowPublishEventServiceEnabledParam = message.body().getString("granite.workflow.WorkflowPublishEventService.enabled");
                Boolean graniteWorkflowWorkflowPublishEventServiceEnabled = (graniteWorkflowWorkflowPublishEventServiceEnabledParam == null) ? null : Json.mapper.readValue(graniteWorkflowWorkflowPublishEventServiceEnabledParam, Boolean.class);
                service.comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(post, apply, delete, action, $location, propertylist, graniteWorkflowWorkflowPublishEventServiceEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEWORKFLOWCOREJCRWORKFLOWBUCKETMANAGER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String bucketSizeParam = message.body().getString("bucketSize");
                Integer bucketSize = (bucketSizeParam == null) ? null : Json.mapper.readValue(bucketSizeParam, Integer.class);
                service.comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(post, apply, delete, action, $location, propertylist, bucketSize, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEWORKFLOWCOREJOBEXTERNALPROCESSJOBHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String defaultTimeoutParam = message.body().getString("default.timeout");
                Integer defaultTimeout = (defaultTimeoutParam == null) ? null : Json.mapper.readValue(defaultTimeoutParam, Integer.class);
                String maxTimeoutParam = message.body().getString("max.timeout");
                Integer maxTimeout = (maxTimeoutParam == null) ? null : Json.mapper.readValue(maxTimeoutParam, Integer.class);
                String defaultPeriodParam = message.body().getString("default.period");
                Integer defaultPeriod = (defaultPeriodParam == null) ? null : Json.mapper.readValue(defaultPeriodParam, Integer.class);
                service.comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(post, apply, delete, action, $location, propertylist, defaultTimeout, maxTimeout, defaultPeriod, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteWorkflowCoreJobJobHandler
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEWORKFLOWCOREJOBJOBHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteWorkflowCoreJobJobHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray jobTopicsParam = message.body().getJsonArray("job.topics");
                List<String> jobTopics = (jobTopicsParam == null) ? null : Json.mapper.readValue(jobTopicsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String allowSelfProcessTerminationParam = message.body().getString("allow.self.process.termination");
                Boolean allowSelfProcessTermination = (allowSelfProcessTerminationParam == null) ? null : Json.mapper.readValue(allowSelfProcessTerminationParam, Boolean.class);
                service.comAdobeGraniteWorkflowCoreJobJobHandler(post, apply, delete, action, $location, propertylist, jobTopics, allowSelfProcessTermination, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteWorkflowCoreJobJobHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteWorkflowCoreJobJobHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEWORKFLOWCOREOFFLOADINGWORKFLOWOFFLOADINGJOBCONSUM_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String jobTopicsParam = message.body().getString("job.topics");
                String jobTopics = (jobTopicsParam == null) ? null : jobTopicsParam;
                service.comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(post, apply, delete, action, $location, propertylist, jobTopics, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteWorkflowCorePayloadMapCache
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEWORKFLOWCOREPAYLOADMAPCACHE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteWorkflowCorePayloadMapCache";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray getSystemWorkflowModelsParam = message.body().getJsonArray("getSystemWorkflowModels");
                List<String> getSystemWorkflowModels = (getSystemWorkflowModelsParam == null) ? null : Json.mapper.readValue(getSystemWorkflowModelsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String getPackageRootPathParam = message.body().getString("getPackageRootPath");
                String getPackageRootPath = (getPackageRootPathParam == null) ? null : getPackageRootPathParam;
                service.comAdobeGraniteWorkflowCorePayloadMapCache(post, apply, delete, action, $location, propertylist, getSystemWorkflowModels, getPackageRootPath, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteWorkflowCorePayloadMapCache");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteWorkflowCorePayloadMapCache", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEWORKFLOWCOREPAYLOADMAPPAYLOADMOVELISTENER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray payloadMoveWhiteListParam = message.body().getJsonArray("payload.move.white.list");
                List<String> payloadMoveWhiteList = (payloadMoveWhiteListParam == null) ? null : Json.mapper.readValue(payloadMoveWhiteListParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String payloadMoveHandleFromWorkflowProcessParam = message.body().getString("payload.move.handle.from.workflow.process");
                Boolean payloadMoveHandleFromWorkflowProcess = (payloadMoveHandleFromWorkflowProcessParam == null) ? null : Json.mapper.readValue(payloadMoveHandleFromWorkflowProcessParam, Boolean.class);
                service.comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(post, apply, delete, action, $location, propertylist, payloadMoveWhiteList, payloadMoveHandleFromWorkflowProcess, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteWorkflowCoreWorkflowConfig
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEWORKFLOWCOREWORKFLOWCONFIG_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteWorkflowCoreWorkflowConfig";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWorkflowConfigWorkflowPackagesRootPathParam = message.body().getJsonArray("cq.workflow.config.workflow.packages.root.path");
                List<String> cqWorkflowConfigWorkflowPackagesRootPath = (cqWorkflowConfigWorkflowPackagesRootPathParam == null) ? null : Json.mapper.readValue(cqWorkflowConfigWorkflowPackagesRootPathParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqWorkflowConfigWorkflowProcessLegacyModeParam = message.body().getString("cq.workflow.config.workflow.process.legacy.mode");
                Boolean cqWorkflowConfigWorkflowProcessLegacyMode = (cqWorkflowConfigWorkflowProcessLegacyModeParam == null) ? null : Json.mapper.readValue(cqWorkflowConfigWorkflowProcessLegacyModeParam, Boolean.class);
                String cqWorkflowConfigAllowLockingParam = message.body().getString("cq.workflow.config.allow.locking");
                Boolean cqWorkflowConfigAllowLocking = (cqWorkflowConfigAllowLockingParam == null) ? null : Json.mapper.readValue(cqWorkflowConfigAllowLockingParam, Boolean.class);
                service.comAdobeGraniteWorkflowCoreWorkflowConfig(post, apply, delete, action, $location, propertylist, cqWorkflowConfigWorkflowPackagesRootPath, cqWorkflowConfigWorkflowProcessLegacyMode, cqWorkflowConfigAllowLocking, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteWorkflowCoreWorkflowConfig");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteWorkflowCoreWorkflowConfig", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteWorkflowCoreWorkflowSessionFactory
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEWORKFLOWCOREWORKFLOWSESSIONFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteWorkflowCoreWorkflowSessionFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String graniteWorkflowinboxSortPropertyNameParam = message.body().getString("granite.workflowinbox.sort.propertyName");
                String graniteWorkflowinboxSortPropertyName = (graniteWorkflowinboxSortPropertyNameParam == null) ? null : graniteWorkflowinboxSortPropertyNameParam;
                String graniteWorkflowinboxSortOrderParam = message.body().getString("granite.workflowinbox.sort.order");
                String graniteWorkflowinboxSortOrder = (graniteWorkflowinboxSortOrderParam == null) ? null : graniteWorkflowinboxSortOrderParam;
                String cqWorkflowJobRetryParam = message.body().getString("cq.workflow.job.retry");
                Integer cqWorkflowJobRetry = (cqWorkflowJobRetryParam == null) ? null : Json.mapper.readValue(cqWorkflowJobRetryParam, Integer.class);
                JsonArray cqWorkflowSuperuserParam = message.body().getJsonArray("cq.workflow.superuser");
                List<String> cqWorkflowSuperuser = (cqWorkflowSuperuserParam == null) ? null : Json.mapper.readValue(cqWorkflowSuperuserParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String graniteWorkflowInboxQuerySizeParam = message.body().getString("granite.workflow.inboxQuerySize");
                Integer graniteWorkflowInboxQuerySize = (graniteWorkflowInboxQuerySizeParam == null) ? null : Json.mapper.readValue(graniteWorkflowInboxQuerySizeParam, Integer.class);
                String graniteWorkflowAdminUserGroupFilterParam = message.body().getString("granite.workflow.adminUserGroupFilter");
                Boolean graniteWorkflowAdminUserGroupFilter = (graniteWorkflowAdminUserGroupFilterParam == null) ? null : Json.mapper.readValue(graniteWorkflowAdminUserGroupFilterParam, Boolean.class);
                String graniteWorkflowEnforceWorkitemAssigneePermissionsParam = message.body().getString("granite.workflow.enforceWorkitemAssigneePermissions");
                Boolean graniteWorkflowEnforceWorkitemAssigneePermissions = (graniteWorkflowEnforceWorkitemAssigneePermissionsParam == null) ? null : Json.mapper.readValue(graniteWorkflowEnforceWorkitemAssigneePermissionsParam, Boolean.class);
                String graniteWorkflowEnforceWorkflowInitiatorPermissionsParam = message.body().getString("granite.workflow.enforceWorkflowInitiatorPermissions");
                Boolean graniteWorkflowEnforceWorkflowInitiatorPermissions = (graniteWorkflowEnforceWorkflowInitiatorPermissionsParam == null) ? null : Json.mapper.readValue(graniteWorkflowEnforceWorkflowInitiatorPermissionsParam, Boolean.class);
                String graniteWorkflowInjectTenantIdInJobTopicsParam = message.body().getString("granite.workflow.injectTenantIdInJobTopics");
                Boolean graniteWorkflowInjectTenantIdInJobTopics = (graniteWorkflowInjectTenantIdInJobTopicsParam == null) ? null : Json.mapper.readValue(graniteWorkflowInjectTenantIdInJobTopicsParam, Boolean.class);
                String graniteWorkflowMaxPurgeSaveThresholdParam = message.body().getString("granite.workflow.maxPurgeSaveThreshold");
                Integer graniteWorkflowMaxPurgeSaveThreshold = (graniteWorkflowMaxPurgeSaveThresholdParam == null) ? null : Json.mapper.readValue(graniteWorkflowMaxPurgeSaveThresholdParam, Integer.class);
                String graniteWorkflowMaxPurgeQueryCountParam = message.body().getString("granite.workflow.maxPurgeQueryCount");
                Integer graniteWorkflowMaxPurgeQueryCount = (graniteWorkflowMaxPurgeQueryCountParam == null) ? null : Json.mapper.readValue(graniteWorkflowMaxPurgeQueryCountParam, Integer.class);
                service.comAdobeGraniteWorkflowCoreWorkflowSessionFactory(post, apply, delete, action, $location, propertylist, graniteWorkflowinboxSortPropertyName, graniteWorkflowinboxSortOrder, cqWorkflowJobRetry, cqWorkflowSuperuser, graniteWorkflowInboxQuerySize, graniteWorkflowAdminUserGroupFilter, graniteWorkflowEnforceWorkitemAssigneePermissions, graniteWorkflowEnforceWorkflowInitiatorPermissions, graniteWorkflowInjectTenantIdInJobTopics, graniteWorkflowMaxPurgeSaveThreshold, graniteWorkflowMaxPurgeQueryCount, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteWorkflowCoreWorkflowSessionFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteWorkflowCoreWorkflowSessionFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeGraniteWorkflowPurgeScheduler
        vertx.eventBus().<JsonObject> consumer(COMADOBEGRANITEWORKFLOWPURGESCHEDULER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeGraniteWorkflowPurgeScheduler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String scheduledpurgeNameParam = message.body().getString("scheduledpurge.name");
                String scheduledpurgeName = (scheduledpurgeNameParam == null) ? null : scheduledpurgeNameParam;
                String scheduledpurgeWorkflowStatusParam = message.body().getString("scheduledpurge.workflowStatus");
                String scheduledpurgeWorkflowStatus = (scheduledpurgeWorkflowStatusParam == null) ? null : scheduledpurgeWorkflowStatusParam;
                JsonArray scheduledpurgeModelIdsParam = message.body().getJsonArray("scheduledpurge.modelIds");
                List<String> scheduledpurgeModelIds = (scheduledpurgeModelIdsParam == null) ? null : Json.mapper.readValue(scheduledpurgeModelIdsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String scheduledpurgeDaysoldParam = message.body().getString("scheduledpurge.daysold");
                Integer scheduledpurgeDaysold = (scheduledpurgeDaysoldParam == null) ? null : Json.mapper.readValue(scheduledpurgeDaysoldParam, Integer.class);
                service.comAdobeGraniteWorkflowPurgeScheduler(post, apply, delete, action, $location, propertylist, scheduledpurgeName, scheduledpurgeWorkflowStatus, scheduledpurgeModelIds, scheduledpurgeDaysold, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeGraniteWorkflowPurgeScheduler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeGraniteWorkflowPurgeScheduler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeOctopusNcommBootstrap
        vertx.eventBus().<JsonObject> consumer(COMADOBEOCTOPUSNCOMMBOOTSTRAP_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeOctopusNcommBootstrap";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String maxConnectionsParam = message.body().getString("maxConnections");
                Integer maxConnections = (maxConnectionsParam == null) ? null : Json.mapper.readValue(maxConnectionsParam, Integer.class);
                String maxRequestsParam = message.body().getString("maxRequests");
                Integer maxRequests = (maxRequestsParam == null) ? null : Json.mapper.readValue(maxRequestsParam, Integer.class);
                String requestTimeoutParam = message.body().getString("requestTimeout");
                Integer requestTimeout = (requestTimeoutParam == null) ? null : Json.mapper.readValue(requestTimeoutParam, Integer.class);
                String requestRetriesParam = message.body().getString("requestRetries");
                Integer requestRetries = (requestRetriesParam == null) ? null : Json.mapper.readValue(requestRetriesParam, Integer.class);
                String launchTimeoutParam = message.body().getString("launchTimeout");
                Integer launchTimeout = (launchTimeoutParam == null) ? null : Json.mapper.readValue(launchTimeoutParam, Integer.class);
                service.comAdobeOctopusNcommBootstrap(post, apply, delete, action, $location, propertylist, maxConnections, maxRequests, requestTimeout, requestRetries, launchTimeout, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeOctopusNcommBootstrap");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeOctopusNcommBootstrap", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS
        vertx.eventBus().<JsonObject> consumer(COMADOBESOCIALINTEGRATIONSLIVEFYREUSERPINGFORPULLIMPLPINGPULLS_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String communitiesIntegrationLivefyreSlingEventFilterParam = message.body().getString("communities.integration.livefyre.sling.event.filter");
                String communitiesIntegrationLivefyreSlingEventFilter = (communitiesIntegrationLivefyreSlingEventFilterParam == null) ? null : communitiesIntegrationLivefyreSlingEventFilterParam;
                service.comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(post, apply, delete, action, $location, propertylist, communitiesIntegrationLivefyreSlingEventFilter, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comAdobeXmpWorkerFilesNcommXMPFilesNComm
        vertx.eventBus().<JsonObject> consumer(COMADOBEXMPWORKERFILESNCOMMXMPFILESNCOMM_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comAdobeXmpWorkerFilesNcommXMPFilesNComm";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String maxConnectionsParam = message.body().getString("maxConnections");
                String maxConnections = (maxConnectionsParam == null) ? null : maxConnectionsParam;
                String maxRequestsParam = message.body().getString("maxRequests");
                String maxRequests = (maxRequestsParam == null) ? null : maxRequestsParam;
                String requestTimeoutParam = message.body().getString("requestTimeout");
                String requestTimeout = (requestTimeoutParam == null) ? null : requestTimeoutParam;
                String logDirParam = message.body().getString("logDir");
                String logDir = (logDirParam == null) ? null : logDirParam;
                service.comAdobeXmpWorkerFilesNcommXMPFilesNComm(post, apply, delete, action, $location, propertylist, maxConnections, maxRequests, requestTimeout, logDir, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comAdobeXmpWorkerFilesNcommXMPFilesNComm");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comAdobeXmpWorkerFilesNcommXMPFilesNComm", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCommonsDatasourceJdbcpoolJdbcPoolService
        vertx.eventBus().<JsonObject> consumer(COMDAYCOMMONSDATASOURCEJDBCPOOLJDBCPOOLSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCommonsDatasourceJdbcpoolJdbcPoolService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String jdbcDriverClassParam = message.body().getString("jdbc.driver.class");
                String jdbcDriverClass = (jdbcDriverClassParam == null) ? null : jdbcDriverClassParam;
                String jdbcConnectionUriParam = message.body().getString("jdbc.connection.uri");
                String jdbcConnectionUri = (jdbcConnectionUriParam == null) ? null : jdbcConnectionUriParam;
                String jdbcUsernameParam = message.body().getString("jdbc.username");
                String jdbcUsername = (jdbcUsernameParam == null) ? null : jdbcUsernameParam;
                String jdbcPasswordParam = message.body().getString("jdbc.password");
                String jdbcPassword = (jdbcPasswordParam == null) ? null : jdbcPasswordParam;
                String jdbcValidationQueryParam = message.body().getString("jdbc.validation.query");
                String jdbcValidationQuery = (jdbcValidationQueryParam == null) ? null : jdbcValidationQueryParam;
                String defaultReadonlyParam = message.body().getString("default.readonly");
                Boolean defaultReadonly = (defaultReadonlyParam == null) ? null : Json.mapper.readValue(defaultReadonlyParam, Boolean.class);
                String defaultAutocommitParam = message.body().getString("default.autocommit");
                Boolean defaultAutocommit = (defaultAutocommitParam == null) ? null : Json.mapper.readValue(defaultAutocommitParam, Boolean.class);
                String poolSizeParam = message.body().getString("pool.size");
                Integer poolSize = (poolSizeParam == null) ? null : Json.mapper.readValue(poolSizeParam, Integer.class);
                String poolMaxWaitMsecParam = message.body().getString("pool.max.wait.msec");
                Integer poolMaxWaitMsec = (poolMaxWaitMsecParam == null) ? null : Json.mapper.readValue(poolMaxWaitMsecParam, Integer.class);
                String datasourceNameParam = message.body().getString("datasource.name");
                String datasourceName = (datasourceNameParam == null) ? null : datasourceNameParam;
                JsonArray datasourceSvcPropertiesParam = message.body().getJsonArray("datasource.svc.properties");
                List<String> datasourceSvcProperties = (datasourceSvcPropertiesParam == null) ? null : Json.mapper.readValue(datasourceSvcPropertiesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCommonsDatasourceJdbcpoolJdbcPoolService(post, apply, delete, action, $location, propertylist, jdbcDriverClass, jdbcConnectionUri, jdbcUsername, jdbcPassword, jdbcValidationQuery, defaultReadonly, defaultAutocommit, poolSize, poolMaxWaitMsec, datasourceName, datasourceSvcProperties, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCommonsDatasourceJdbcpoolJdbcPoolService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCommonsDatasourceJdbcpoolJdbcPoolService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCommonsHttpclient
        vertx.eventBus().<JsonObject> consumer(COMDAYCOMMONSHTTPCLIENT_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCommonsHttpclient";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String proxyEnabledParam = message.body().getString("proxy.enabled");
                Boolean proxyEnabled = (proxyEnabledParam == null) ? null : Json.mapper.readValue(proxyEnabledParam, Boolean.class);
                String proxyHostParam = message.body().getString("proxy.host");
                String proxyHost = (proxyHostParam == null) ? null : proxyHostParam;
                String proxyUserParam = message.body().getString("proxy.user");
                String proxyUser = (proxyUserParam == null) ? null : proxyUserParam;
                String proxyPasswordParam = message.body().getString("proxy.password");
                String proxyPassword = (proxyPasswordParam == null) ? null : proxyPasswordParam;
                String proxyNtlmHostParam = message.body().getString("proxy.ntlm.host");
                String proxyNtlmHost = (proxyNtlmHostParam == null) ? null : proxyNtlmHostParam;
                String proxyNtlmDomainParam = message.body().getString("proxy.ntlm.domain");
                String proxyNtlmDomain = (proxyNtlmDomainParam == null) ? null : proxyNtlmDomainParam;
                JsonArray proxyExceptionsParam = message.body().getJsonArray("proxy.exceptions");
                List<String> proxyExceptions = (proxyExceptionsParam == null) ? null : Json.mapper.readValue(proxyExceptionsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCommonsHttpclient(post, apply, delete, action, $location, propertylist, proxyEnabled, proxyHost, proxyUser, proxyPassword, proxyNtlmHost, proxyNtlmDomain, proxyExceptions, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCommonsHttpclient");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCommonsHttpclient", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqAnalyticsImplStorePropertiesChangeListener
        vertx.eventBus().<JsonObject> consumer(COMDAYCQANALYTICSIMPLSTOREPROPERTIESCHANGELISTENER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqAnalyticsImplStorePropertiesChangeListener";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqStoreListenerAdditionalStorePathsParam = message.body().getJsonArray("cq.store.listener.additionalStorePaths");
                List<String> cqStoreListenerAdditionalStorePaths = (cqStoreListenerAdditionalStorePathsParam == null) ? null : Json.mapper.readValue(cqStoreListenerAdditionalStorePathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqAnalyticsImplStorePropertiesChangeListener(post, apply, delete, action, $location, propertylist, cqStoreListenerAdditionalStorePaths, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqAnalyticsImplStorePropertiesChangeListener");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqAnalyticsImplStorePropertiesChangeListener", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte
        vertx.eventBus().<JsonObject> consumer(COMDAYCQANALYTICSSITECATALYSTIMPLEXPORTERCLASSIFICATIONSEXPORTE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray allowedPathsParam = message.body().getJsonArray("allowed.paths");
                List<String> allowedPaths = (allowedPathsParam == null) ? null : Json.mapper.readValue(allowedPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqAnalyticsSaintExporterPagesizeParam = message.body().getString("cq.analytics.saint.exporter.pagesize");
                Integer cqAnalyticsSaintExporterPagesize = (cqAnalyticsSaintExporterPagesizeParam == null) ? null : Json.mapper.readValue(cqAnalyticsSaintExporterPagesizeParam, Integer.class);
                service.comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(post, apply, delete, action, $location, propertylist, allowedPaths, cqAnalyticsSaintExporterPagesize, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqAnalyticsSitecatalystImplImporterReportImporter
        vertx.eventBus().<JsonObject> consumer(COMDAYCQANALYTICSSITECATALYSTIMPLIMPORTERREPORTIMPORTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqAnalyticsSitecatalystImplImporterReportImporter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String reportFetchAttemptsParam = message.body().getString("report.fetch.attempts");
                Integer reportFetchAttempts = (reportFetchAttemptsParam == null) ? null : Json.mapper.readValue(reportFetchAttemptsParam, Integer.class);
                String reportFetchDelayParam = message.body().getString("report.fetch.delay");
                Integer reportFetchDelay = (reportFetchDelayParam == null) ? null : Json.mapper.readValue(reportFetchDelayParam, Integer.class);
                service.comDayCqAnalyticsSitecatalystImplImporterReportImporter(post, apply, delete, action, $location, propertylist, reportFetchAttempts, reportFetchDelay, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqAnalyticsSitecatalystImplImporterReportImporter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqAnalyticsSitecatalystImplImporterReportImporter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory
        vertx.eventBus().<JsonObject> consumer(COMDAYCQANALYTICSSITECATALYSTIMPLSITECATALYSTADAPTERFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqAnalyticsAdapterfactoryContextstoresParam = message.body().getJsonArray("cq.analytics.adapterfactory.contextstores");
                List<String> cqAnalyticsAdapterfactoryContextstores = (cqAnalyticsAdapterfactoryContextstoresParam == null) ? null : Json.mapper.readValue(cqAnalyticsAdapterfactoryContextstoresParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(post, apply, delete, action, $location, propertylist, cqAnalyticsAdapterfactoryContextstores, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQANALYTICSSITECATALYSTIMPLSITECATALYSTHTTPCLIENTIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqAnalyticsSitecatalystServiceDatacenterUrlParam = message.body().getJsonArray("cq.analytics.sitecatalyst.service.datacenter.url");
                List<String> cqAnalyticsSitecatalystServiceDatacenterUrl = (cqAnalyticsSitecatalystServiceDatacenterUrlParam == null) ? null : Json.mapper.readValue(cqAnalyticsSitecatalystServiceDatacenterUrlParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray devhostnamepatternsParam = message.body().getJsonArray("devhostnamepatterns");
                List<String> devhostnamepatterns = (devhostnamepatternsParam == null) ? null : Json.mapper.readValue(devhostnamepatternsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String connectionTimeoutParam = message.body().getString("connection.timeout");
                Integer connectionTimeout = (connectionTimeoutParam == null) ? null : Json.mapper.readValue(connectionTimeoutParam, Integer.class);
                String socketTimeoutParam = message.body().getString("socket.timeout");
                Integer socketTimeout = (socketTimeoutParam == null) ? null : Json.mapper.readValue(socketTimeoutParam, Integer.class);
                service.comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(post, apply, delete, action, $location, propertylist, cqAnalyticsSitecatalystServiceDatacenterUrl, devhostnamepatterns, connectionTimeout, socketTimeout, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater
        vertx.eventBus().<JsonObject> consumer(COMDAYCQANALYTICSTESTANDTARGETIMPLACCOUNTOPTIONSUPDATER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqAnalyticsTestandtargetAccountoptionsupdaterEnabledParam = message.body().getString("cq.analytics.testandtarget.accountoptionsupdater.enabled");
                Boolean cqAnalyticsTestandtargetAccountoptionsupdaterEnabled = (cqAnalyticsTestandtargetAccountoptionsupdaterEnabledParam == null) ? null : Json.mapper.readValue(cqAnalyticsTestandtargetAccountoptionsupdaterEnabledParam, Boolean.class);
                service.comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetAccountoptionsupdaterEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener
        vertx.eventBus().<JsonObject> consumer(COMDAYCQANALYTICSTESTANDTARGETIMPLDELETEAUTHORACTIVITYLISTENER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabledParam = message.body().getString("cq.analytics.testandtarget.deleteauthoractivitylistener.enabled");
                Boolean cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled = (cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabledParam == null) ? null : Json.mapper.readValue(cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabledParam, Boolean.class);
                service.comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener
        vertx.eventBus().<JsonObject> consumer(COMDAYCQANALYTICSTESTANDTARGETIMPLPUSHAUTHORCAMPAIGNPAGELISTENER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabledParam = message.body().getString("cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled");
                Boolean cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled = (cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabledParam == null) ? null : Json.mapper.readValue(cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabledParam, Boolean.class);
                service.comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqAnalyticsTestandtargetImplSegmentImporter
        vertx.eventBus().<JsonObject> consumer(COMDAYCQANALYTICSTESTANDTARGETIMPLSEGMENTIMPORTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqAnalyticsTestandtargetImplSegmentImporter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqAnalyticsTestandtargetSegmentimporterEnabledParam = message.body().getString("cq.analytics.testandtarget.segmentimporter.enabled");
                Boolean cqAnalyticsTestandtargetSegmentimporterEnabled = (cqAnalyticsTestandtargetSegmentimporterEnabledParam == null) ? null : Json.mapper.readValue(cqAnalyticsTestandtargetSegmentimporterEnabledParam, Boolean.class);
                service.comDayCqAnalyticsTestandtargetImplSegmentImporter(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetSegmentimporterEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqAnalyticsTestandtargetImplSegmentImporter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqAnalyticsTestandtargetImplSegmentImporter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQANALYTICSTESTANDTARGETIMPLSERVICEWEBSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String endpointUriParam = message.body().getString("endpointUri");
                String endpointUri = (endpointUriParam == null) ? null : endpointUriParam;
                String connectionTimeoutParam = message.body().getString("connectionTimeout");
                Integer connectionTimeout = (connectionTimeoutParam == null) ? null : Json.mapper.readValue(connectionTimeoutParam, Integer.class);
                String socketTimeoutParam = message.body().getString("socketTimeout");
                Integer socketTimeout = (socketTimeoutParam == null) ? null : Json.mapper.readValue(socketTimeoutParam, Integer.class);
                service.comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(post, apply, delete, action, $location, propertylist, endpointUri, connectionTimeout, socketTimeout, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQANALYTICSTESTANDTARGETIMPLSERVLETSADMINSERVERSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String testandtargetEndpointUrlParam = message.body().getString("testandtarget.endpoint.url");
                String testandtargetEndpointUrl = (testandtargetEndpointUrlParam == null) ? null : testandtargetEndpointUrlParam;
                service.comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(post, apply, delete, action, $location, propertylist, testandtargetEndpointUrl, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQANALYTICSTESTANDTARGETIMPLTESTANDTARGETHTTPCLIENTIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqAnalyticsTestandtargetApiUrlParam = message.body().getString("cq.analytics.testandtarget.api.url");
                String cqAnalyticsTestandtargetApiUrl = (cqAnalyticsTestandtargetApiUrlParam == null) ? null : cqAnalyticsTestandtargetApiUrlParam;
                String cqAnalyticsTestandtargetTimeoutParam = message.body().getString("cq.analytics.testandtarget.timeout");
                Integer cqAnalyticsTestandtargetTimeout = (cqAnalyticsTestandtargetTimeoutParam == null) ? null : Json.mapper.readValue(cqAnalyticsTestandtargetTimeoutParam, Integer.class);
                String cqAnalyticsTestandtargetSockettimeoutParam = message.body().getString("cq.analytics.testandtarget.sockettimeout");
                Integer cqAnalyticsTestandtargetSockettimeout = (cqAnalyticsTestandtargetSockettimeoutParam == null) ? null : Json.mapper.readValue(cqAnalyticsTestandtargetSockettimeoutParam, Integer.class);
                String cqAnalyticsTestandtargetRecommendationsUrlReplaceParam = message.body().getString("cq.analytics.testandtarget.recommendations.url.replace");
                String cqAnalyticsTestandtargetRecommendationsUrlReplace = (cqAnalyticsTestandtargetRecommendationsUrlReplaceParam == null) ? null : cqAnalyticsTestandtargetRecommendationsUrlReplaceParam;
                String cqAnalyticsTestandtargetRecommendationsUrlReplacewithParam = message.body().getString("cq.analytics.testandtarget.recommendations.url.replacewith");
                String cqAnalyticsTestandtargetRecommendationsUrlReplacewith = (cqAnalyticsTestandtargetRecommendationsUrlReplacewithParam == null) ? null : cqAnalyticsTestandtargetRecommendationsUrlReplacewithParam;
                service.comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetApiUrl, cqAnalyticsTestandtargetTimeout, cqAnalyticsTestandtargetSockettimeout, cqAnalyticsTestandtargetRecommendationsUrlReplace, cqAnalyticsTestandtargetRecommendationsUrlReplacewith, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqAuthImplCugCugSupportImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQAUTHIMPLCUGCUGSUPPORTIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqAuthImplCugCugSupportImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cugExemptedPrincipalsParam = message.body().getJsonArray("cug.exempted.principals");
                List<String> cugExemptedPrincipals = (cugExemptedPrincipalsParam == null) ? null : Json.mapper.readValue(cugExemptedPrincipalsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cugEnabledParam = message.body().getString("cug.enabled");
                Boolean cugEnabled = (cugEnabledParam == null) ? null : Json.mapper.readValue(cugEnabledParam, Boolean.class);
                String cugPrincipalsRegexParam = message.body().getString("cug.principals.regex");
                String cugPrincipalsRegex = (cugPrincipalsRegexParam == null) ? null : cugPrincipalsRegexParam;
                String cugPrincipalsReplacementParam = message.body().getString("cug.principals.replacement");
                String cugPrincipalsReplacement = (cugPrincipalsReplacementParam == null) ? null : cugPrincipalsReplacementParam;
                service.comDayCqAuthImplCugCugSupportImpl(post, apply, delete, action, $location, propertylist, cugExemptedPrincipals, cugEnabled, cugPrincipalsRegex, cugPrincipalsReplacement, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqAuthImplCugCugSupportImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqAuthImplCugCugSupportImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqAuthImplLoginSelectorHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQAUTHIMPLLOGINSELECTORHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqAuthImplLoginSelectorHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pathParam = message.body().getString("path");
                String path = (pathParam == null) ? null : pathParam;
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                JsonArray authLoginselectorMappingsParam = message.body().getJsonArray("auth.loginselector.mappings");
                List<String> authLoginselectorMappings = (authLoginselectorMappingsParam == null) ? null : Json.mapper.readValue(authLoginselectorMappingsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray authLoginselectorChangepwMappingsParam = message.body().getJsonArray("auth.loginselector.changepw.mappings");
                List<String> authLoginselectorChangepwMappings = (authLoginselectorChangepwMappingsParam == null) ? null : Json.mapper.readValue(authLoginselectorChangepwMappingsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String authLoginselectorDefaultloginpageParam = message.body().getString("auth.loginselector.defaultloginpage");
                String authLoginselectorDefaultloginpage = (authLoginselectorDefaultloginpageParam == null) ? null : authLoginselectorDefaultloginpageParam;
                String authLoginselectorDefaultchangepwpageParam = message.body().getString("auth.loginselector.defaultchangepwpage");
                String authLoginselectorDefaultchangepwpage = (authLoginselectorDefaultchangepwpageParam == null) ? null : authLoginselectorDefaultchangepwpageParam;
                JsonArray authLoginselectorHandleParam = message.body().getJsonArray("auth.loginselector.handle");
                List<String> authLoginselectorHandle = (authLoginselectorHandleParam == null) ? null : Json.mapper.readValue(authLoginselectorHandleParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String authLoginselectorHandleAllExtensionsParam = message.body().getString("auth.loginselector.handle.all.extensions");
                Boolean authLoginselectorHandleAllExtensions = (authLoginselectorHandleAllExtensionsParam == null) ? null : Json.mapper.readValue(authLoginselectorHandleAllExtensionsParam, Boolean.class);
                service.comDayCqAuthImplLoginSelectorHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking, authLoginselectorMappings, authLoginselectorChangepwMappings, authLoginselectorDefaultloginpage, authLoginselectorDefaultchangepwpage, authLoginselectorHandle, authLoginselectorHandleAllExtensions, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqAuthImplLoginSelectorHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqAuthImplLoginSelectorHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqCommonsImplExternalizerImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQCOMMONSIMPLEXTERNALIZERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqCommonsImplExternalizerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray externalizerDomainsParam = message.body().getJsonArray("externalizer.domains");
                List<String> externalizerDomains = (externalizerDomainsParam == null) ? null : Json.mapper.readValue(externalizerDomainsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String externalizerHostParam = message.body().getString("externalizer.host");
                String externalizerHost = (externalizerHostParam == null) ? null : externalizerHostParam;
                String externalizerContextpathParam = message.body().getString("externalizer.contextpath");
                String externalizerContextpath = (externalizerContextpathParam == null) ? null : externalizerContextpathParam;
                String externalizerEncodedpathParam = message.body().getString("externalizer.encodedpath");
                Boolean externalizerEncodedpath = (externalizerEncodedpathParam == null) ? null : Json.mapper.readValue(externalizerEncodedpathParam, Boolean.class);
                service.comDayCqCommonsImplExternalizerImpl(post, apply, delete, action, $location, propertylist, externalizerDomains, externalizerHost, externalizerContextpath, externalizerEncodedpath, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqCommonsImplExternalizerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqCommonsImplExternalizerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqCommonsServletsRootMappingServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQCOMMONSSERVLETSROOTMAPPINGSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqCommonsServletsRootMappingServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String rootmappingTargetParam = message.body().getString("rootmapping.target");
                String rootmappingTarget = (rootmappingTargetParam == null) ? null : rootmappingTargetParam;
                service.comDayCqCommonsServletsRootMappingServlet(post, apply, delete, action, $location, propertylist, rootmappingTarget, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqCommonsServletsRootMappingServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqCommonsServletsRootMappingServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke
        vertx.eventBus().<JsonObject> consumer(COMDAYCQCOMPATCODEUPGRADEIMPLCODEUPGRADEEXECUTIONCONDITIONCHECKE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray codeupgradetasksParam = message.body().getJsonArray("codeupgradetasks");
                List<String> codeupgradetasks = (codeupgradetasksParam == null) ? null : Json.mapper.readValue(codeupgradetasksParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray codeupgradetaskfiltersParam = message.body().getJsonArray("codeupgradetaskfilters");
                List<String> codeupgradetaskfilters = (codeupgradetaskfiltersParam == null) ? null : Json.mapper.readValue(codeupgradetaskfiltersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(post, apply, delete, action, $location, propertylist, codeupgradetasks, codeupgradetaskfilters, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList
        vertx.eventBus().<JsonObject> consumer(COMDAYCQCOMPATCODEUPGRADEIMPLUPGRADETASKIGNORELIST_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray upgradeTaskIgnoreListParam = message.body().getJsonArray("upgradeTaskIgnoreList");
                List<String> upgradeTaskIgnoreList = (upgradeTaskIgnoreListParam == null) ? null : Json.mapper.readValue(upgradeTaskIgnoreListParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(post, apply, delete, action, $location, propertylist, upgradeTaskIgnoreList, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist
        vertx.eventBus().<JsonObject> consumer(COMDAYCQCOMPATCODEUPGRADEIMPLVERSIONRANGETASKIGNORELIST_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String effectiveBundleListPathParam = message.body().getString("effectiveBundleListPath");
                String effectiveBundleListPath = (effectiveBundleListPathParam == null) ? null : effectiveBundleListPathParam;
                service.comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(post, apply, delete, action, $location, propertylist, effectiveBundleListPath, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqContentsyncImplContentSyncManagerImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQCONTENTSYNCIMPLCONTENTSYNCMANAGERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqContentsyncImplContentSyncManagerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String contentsyncFallbackAuthorizableParam = message.body().getString("contentsync.fallback.authorizable");
                String contentsyncFallbackAuthorizable = (contentsyncFallbackAuthorizableParam == null) ? null : contentsyncFallbackAuthorizableParam;
                String contentsyncFallbackUpdateuserParam = message.body().getString("contentsync.fallback.updateuser");
                String contentsyncFallbackUpdateuser = (contentsyncFallbackUpdateuserParam == null) ? null : contentsyncFallbackUpdateuserParam;
                service.comDayCqContentsyncImplContentSyncManagerImpl(post, apply, delete, action, $location, propertylist, contentsyncFallbackAuthorizable, contentsyncFallbackUpdateuser, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqContentsyncImplContentSyncManagerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqContentsyncImplContentSyncManagerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCommonsHandlerStandardImageHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOMMONSHANDLERSTANDARDIMAGEHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCommonsHandlerStandardImageHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String largeFileThresholdParam = message.body().getString("large_file_threshold");
                Integer largeFileThreshold = (largeFileThresholdParam == null) ? null : Json.mapper.readValue(largeFileThresholdParam, Integer.class);
                String largeCommentThresholdParam = message.body().getString("large_comment_threshold");
                Integer largeCommentThreshold = (largeCommentThresholdParam == null) ? null : Json.mapper.readValue(largeCommentThresholdParam, Integer.class);
                String cqDamEnableExtMetaExtractionParam = message.body().getString("cq.dam.enable.ext.meta.extraction");
                Boolean cqDamEnableExtMetaExtraction = (cqDamEnableExtMetaExtractionParam == null) ? null : Json.mapper.readValue(cqDamEnableExtMetaExtractionParam, Boolean.class);
                service.comDayCqDamCommonsHandlerStandardImageHandler(post, apply, delete, action, $location, propertylist, largeFileThreshold, largeCommentThreshold, cqDamEnableExtMetaExtraction, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCommonsHandlerStandardImageHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCommonsHandlerStandardImageHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCommonsMetadataXmpFilterBlackWhite
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOMMONSMETADATAXMPFILTERBLACKWHITE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCommonsMetadataXmpFilterBlackWhite";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String xmpFilterApplyWhitelistParam = message.body().getString("xmp.filter.apply_whitelist");
                Boolean xmpFilterApplyWhitelist = (xmpFilterApplyWhitelistParam == null) ? null : Json.mapper.readValue(xmpFilterApplyWhitelistParam, Boolean.class);
                JsonArray xmpFilterWhitelistParam = message.body().getJsonArray("xmp.filter.whitelist");
                List<String> xmpFilterWhitelist = (xmpFilterWhitelistParam == null) ? null : Json.mapper.readValue(xmpFilterWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String xmpFilterApplyBlacklistParam = message.body().getString("xmp.filter.apply_blacklist");
                Boolean xmpFilterApplyBlacklist = (xmpFilterApplyBlacklistParam == null) ? null : Json.mapper.readValue(xmpFilterApplyBlacklistParam, Boolean.class);
                JsonArray xmpFilterBlacklistParam = message.body().getJsonArray("xmp.filter.blacklist");
                List<String> xmpFilterBlacklist = (xmpFilterBlacklistParam == null) ? null : Json.mapper.readValue(xmpFilterBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqDamCommonsMetadataXmpFilterBlackWhite(post, apply, delete, action, $location, propertylist, xmpFilterApplyWhitelist, xmpFilterWhitelist, xmpFilterApplyBlacklist, xmpFilterBlacklist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCommonsMetadataXmpFilterBlackWhite");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCommonsMetadataXmpFilterBlackWhite", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCommonsUtilImplAssetCacheImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOMMONSUTILIMPLASSETCACHEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCommonsUtilImplAssetCacheImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String largeFileMinParam = message.body().getString("large.file.min");
                Integer largeFileMin = (largeFileMinParam == null) ? null : Json.mapper.readValue(largeFileMinParam, Integer.class);
                String cacheApplyParam = message.body().getString("cache.apply");
                Boolean cacheApply = (cacheApplyParam == null) ? null : Json.mapper.readValue(cacheApplyParam, Boolean.class);
                JsonArray mimeTypesParam = message.body().getJsonArray("mime.types");
                List<String> mimeTypes = (mimeTypesParam == null) ? null : Json.mapper.readValue(mimeTypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqDamCommonsUtilImplAssetCacheImpl(post, apply, delete, action, $location, propertylist, largeFileMin, cacheApply, mimeTypes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCommonsUtilImplAssetCacheImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCommonsUtilImplAssetCacheImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLANNOTATIONPDFANNOTATIONPDFCONFIG_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamConfigAnnotationPdfDocumentWidthParam = message.body().getString("cq.dam.config.annotation.pdf.document.width");
                Integer cqDamConfigAnnotationPdfDocumentWidth = (cqDamConfigAnnotationPdfDocumentWidthParam == null) ? null : Json.mapper.readValue(cqDamConfigAnnotationPdfDocumentWidthParam, Integer.class);
                String cqDamConfigAnnotationPdfDocumentHeightParam = message.body().getString("cq.dam.config.annotation.pdf.document.height");
                Integer cqDamConfigAnnotationPdfDocumentHeight = (cqDamConfigAnnotationPdfDocumentHeightParam == null) ? null : Json.mapper.readValue(cqDamConfigAnnotationPdfDocumentHeightParam, Integer.class);
                String cqDamConfigAnnotationPdfDocumentPaddingHorizontalParam = message.body().getString("cq.dam.config.annotation.pdf.document.padding.horizontal");
                Integer cqDamConfigAnnotationPdfDocumentPaddingHorizontal = (cqDamConfigAnnotationPdfDocumentPaddingHorizontalParam == null) ? null : Json.mapper.readValue(cqDamConfigAnnotationPdfDocumentPaddingHorizontalParam, Integer.class);
                String cqDamConfigAnnotationPdfDocumentPaddingVerticalParam = message.body().getString("cq.dam.config.annotation.pdf.document.padding.vertical");
                Integer cqDamConfigAnnotationPdfDocumentPaddingVertical = (cqDamConfigAnnotationPdfDocumentPaddingVerticalParam == null) ? null : Json.mapper.readValue(cqDamConfigAnnotationPdfDocumentPaddingVerticalParam, Integer.class);
                String cqDamConfigAnnotationPdfFontSizeParam = message.body().getString("cq.dam.config.annotation.pdf.font.size");
                Integer cqDamConfigAnnotationPdfFontSize = (cqDamConfigAnnotationPdfFontSizeParam == null) ? null : Json.mapper.readValue(cqDamConfigAnnotationPdfFontSizeParam, Integer.class);
                String cqDamConfigAnnotationPdfFontColorParam = message.body().getString("cq.dam.config.annotation.pdf.font.color");
                String cqDamConfigAnnotationPdfFontColor = (cqDamConfigAnnotationPdfFontColorParam == null) ? null : cqDamConfigAnnotationPdfFontColorParam;
                String cqDamConfigAnnotationPdfFontFamilyParam = message.body().getString("cq.dam.config.annotation.pdf.font.family");
                String cqDamConfigAnnotationPdfFontFamily = (cqDamConfigAnnotationPdfFontFamilyParam == null) ? null : cqDamConfigAnnotationPdfFontFamilyParam;
                String cqDamConfigAnnotationPdfFontLightParam = message.body().getString("cq.dam.config.annotation.pdf.font.light");
                String cqDamConfigAnnotationPdfFontLight = (cqDamConfigAnnotationPdfFontLightParam == null) ? null : cqDamConfigAnnotationPdfFontLightParam;
                String cqDamConfigAnnotationPdfMarginTextImageParam = message.body().getString("cq.dam.config.annotation.pdf.marginTextImage");
                Integer cqDamConfigAnnotationPdfMarginTextImage = (cqDamConfigAnnotationPdfMarginTextImageParam == null) ? null : Json.mapper.readValue(cqDamConfigAnnotationPdfMarginTextImageParam, Integer.class);
                String cqDamConfigAnnotationPdfMinImageHeightParam = message.body().getString("cq.dam.config.annotation.pdf.minImageHeight");
                Integer cqDamConfigAnnotationPdfMinImageHeight = (cqDamConfigAnnotationPdfMinImageHeightParam == null) ? null : Json.mapper.readValue(cqDamConfigAnnotationPdfMinImageHeightParam, Integer.class);
                String cqDamConfigAnnotationPdfReviewStatusWidthParam = message.body().getString("cq.dam.config.annotation.pdf.reviewStatus.width");
                Integer cqDamConfigAnnotationPdfReviewStatusWidth = (cqDamConfigAnnotationPdfReviewStatusWidthParam == null) ? null : Json.mapper.readValue(cqDamConfigAnnotationPdfReviewStatusWidthParam, Integer.class);
                String cqDamConfigAnnotationPdfReviewStatusColorApprovedParam = message.body().getString("cq.dam.config.annotation.pdf.reviewStatus.color.approved");
                String cqDamConfigAnnotationPdfReviewStatusColorApproved = (cqDamConfigAnnotationPdfReviewStatusColorApprovedParam == null) ? null : cqDamConfigAnnotationPdfReviewStatusColorApprovedParam;
                String cqDamConfigAnnotationPdfReviewStatusColorRejectedParam = message.body().getString("cq.dam.config.annotation.pdf.reviewStatus.color.rejected");
                String cqDamConfigAnnotationPdfReviewStatusColorRejected = (cqDamConfigAnnotationPdfReviewStatusColorRejectedParam == null) ? null : cqDamConfigAnnotationPdfReviewStatusColorRejectedParam;
                String cqDamConfigAnnotationPdfReviewStatusColorChangesRequestedParam = message.body().getString("cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested");
                String cqDamConfigAnnotationPdfReviewStatusColorChangesRequested = (cqDamConfigAnnotationPdfReviewStatusColorChangesRequestedParam == null) ? null : cqDamConfigAnnotationPdfReviewStatusColorChangesRequestedParam;
                String cqDamConfigAnnotationPdfAnnotationMarkerWidthParam = message.body().getString("cq.dam.config.annotation.pdf.annotationMarker.width");
                Integer cqDamConfigAnnotationPdfAnnotationMarkerWidth = (cqDamConfigAnnotationPdfAnnotationMarkerWidthParam == null) ? null : Json.mapper.readValue(cqDamConfigAnnotationPdfAnnotationMarkerWidthParam, Integer.class);
                String cqDamConfigAnnotationPdfAssetMinheightParam = message.body().getString("cq.dam.config.annotation.pdf.asset.minheight");
                Integer cqDamConfigAnnotationPdfAssetMinheight = (cqDamConfigAnnotationPdfAssetMinheightParam == null) ? null : Json.mapper.readValue(cqDamConfigAnnotationPdfAssetMinheightParam, Integer.class);
                service.comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(post, apply, delete, action, $location, propertylist, cqDamConfigAnnotationPdfDocumentWidth, cqDamConfigAnnotationPdfDocumentHeight, cqDamConfigAnnotationPdfDocumentPaddingHorizontal, cqDamConfigAnnotationPdfDocumentPaddingVertical, cqDamConfigAnnotationPdfFontSize, cqDamConfigAnnotationPdfFontColor, cqDamConfigAnnotationPdfFontFamily, cqDamConfigAnnotationPdfFontLight, cqDamConfigAnnotationPdfMarginTextImage, cqDamConfigAnnotationPdfMinImageHeight, cqDamConfigAnnotationPdfReviewStatusWidth, cqDamConfigAnnotationPdfReviewStatusColorApproved, cqDamConfigAnnotationPdfReviewStatusColorRejected, cqDamConfigAnnotationPdfReviewStatusColorChangesRequested, cqDamConfigAnnotationPdfAnnotationMarkerWidth, cqDamConfigAnnotationPdfAssetMinheight, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplAssetMoveListener
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLASSETMOVELISTENER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplAssetMoveListener";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                service.comDayCqDamCoreImplAssetMoveListener(post, apply, delete, action, $location, propertylist, enabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplAssetMoveListener");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplAssetMoveListener", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplAssethomeAssetHomePageConfiguration
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLASSETHOMEASSETHOMEPAGECONFIGURATION_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplAssethomeAssetHomePageConfiguration";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String isEnabledParam = message.body().getString("isEnabled");
                Boolean isEnabled = (isEnabledParam == null) ? null : Json.mapper.readValue(isEnabledParam, Boolean.class);
                service.comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(post, apply, delete, action, $location, propertylist, isEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplAssethomeAssetHomePageConfiguration");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplAssethomeAssetHomePageConfiguration", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLASSETLINKSHAREADHOCASSETSHAREPROXYSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamAdhocAssetSharePrezipMaxcontentsizeParam = message.body().getString("cq.dam.adhoc.asset.share.prezip.maxcontentsize");
                Integer cqDamAdhocAssetSharePrezipMaxcontentsize = (cqDamAdhocAssetSharePrezipMaxcontentsizeParam == null) ? null : Json.mapper.readValue(cqDamAdhocAssetSharePrezipMaxcontentsizeParam, Integer.class);
                service.comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(post, apply, delete, action, $location, propertylist, cqDamAdhocAssetSharePrezipMaxcontentsize, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplCacheCQBufferedImageCache
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLCACHECQBUFFEREDIMAGECACHE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplCacheCQBufferedImageCache";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamImageCacheMaxMemoryParam = message.body().getString("cq.dam.image.cache.max.memory");
                Integer cqDamImageCacheMaxMemory = (cqDamImageCacheMaxMemoryParam == null) ? null : Json.mapper.readValue(cqDamImageCacheMaxMemoryParam, Integer.class);
                String cqDamImageCacheMaxAgeParam = message.body().getString("cq.dam.image.cache.max.age");
                Integer cqDamImageCacheMaxAge = (cqDamImageCacheMaxAgeParam == null) ? null : Json.mapper.readValue(cqDamImageCacheMaxAgeParam, Integer.class);
                String cqDamImageCacheMaxDimensionParam = message.body().getString("cq.dam.image.cache.max.dimension");
                String cqDamImageCacheMaxDimension = (cqDamImageCacheMaxDimensionParam == null) ? null : cqDamImageCacheMaxDimensionParam;
                service.comDayCqDamCoreImplCacheCQBufferedImageCache(post, apply, delete, action, $location, propertylist, cqDamImageCacheMaxMemory, cqDamImageCacheMaxAge, cqDamImageCacheMaxDimension, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplCacheCQBufferedImageCache");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplCacheCQBufferedImageCache", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplDamChangeEventListener
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLDAMCHANGEEVENTLISTENER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplDamChangeEventListener";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray changeeventlistenerObservedPathsParam = message.body().getJsonArray("changeeventlistener.observed.paths");
                List<String> changeeventlistenerObservedPaths = (changeeventlistenerObservedPathsParam == null) ? null : Json.mapper.readValue(changeeventlistenerObservedPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqDamCoreImplDamChangeEventListener(post, apply, delete, action, $location, propertylist, changeeventlistenerObservedPaths, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplDamChangeEventListener");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplDamChangeEventListener", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplDamEventPurgeService
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLDAMEVENTPURGESERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplDamEventPurgeService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String schedulerExpressionParam = message.body().getString("scheduler.expression");
                String schedulerExpression = (schedulerExpressionParam == null) ? null : schedulerExpressionParam;
                String maxSavedActivitiesParam = message.body().getString("maxSavedActivities");
                Integer maxSavedActivities = (maxSavedActivitiesParam == null) ? null : Json.mapper.readValue(maxSavedActivitiesParam, Integer.class);
                String saveIntervalParam = message.body().getString("saveInterval");
                Integer saveInterval = (saveIntervalParam == null) ? null : Json.mapper.readValue(saveIntervalParam, Integer.class);
                String enableActivityPurgeParam = message.body().getString("enableActivityPurge");
                Boolean enableActivityPurge = (enableActivityPurgeParam == null) ? null : Json.mapper.readValue(enableActivityPurgeParam, Boolean.class);
                String eventTypesParam = message.body().getString("eventTypes");
                String eventTypes = (eventTypesParam == null) ? null : eventTypesParam;
                service.comDayCqDamCoreImplDamEventPurgeService(post, apply, delete, action, $location, propertylist, schedulerExpression, maxSavedActivities, saveInterval, enableActivityPurge, eventTypes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplDamEventPurgeService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplDamEventPurgeService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplDamEventRecorderImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLDAMEVENTRECORDERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplDamEventRecorderImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String eventFilterParam = message.body().getString("event.filter");
                String eventFilter = (eventFilterParam == null) ? null : eventFilterParam;
                String eventQueueLengthParam = message.body().getString("event.queue.length");
                Integer eventQueueLength = (eventQueueLengthParam == null) ? null : Json.mapper.readValue(eventQueueLengthParam, Integer.class);
                String eventrecorderEnabledParam = message.body().getString("eventrecorder.enabled");
                Boolean eventrecorderEnabled = (eventrecorderEnabledParam == null) ? null : Json.mapper.readValue(eventrecorderEnabledParam, Boolean.class);
                JsonArray eventrecorderBlacklistParam = message.body().getJsonArray("eventrecorder.blacklist");
                List<String> eventrecorderBlacklist = (eventrecorderBlacklistParam == null) ? null : Json.mapper.readValue(eventrecorderBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String eventrecorderEventtypesParam = message.body().getString("eventrecorder.eventtypes");
                String eventrecorderEventtypes = (eventrecorderEventtypesParam == null) ? null : eventrecorderEventtypesParam;
                service.comDayCqDamCoreImplDamEventRecorderImpl(post, apply, delete, action, $location, propertylist, eventFilter, eventQueueLength, eventrecorderEnabled, eventrecorderBlacklist, eventrecorderEventtypes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplDamEventRecorderImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplDamEventRecorderImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplEventDamEventAuditListener
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLEVENTDAMEVENTAUDITLISTENER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplEventDamEventAuditListener";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String eventFilterParam = message.body().getString("event.filter");
                String eventFilter = (eventFilterParam == null) ? null : eventFilterParam;
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                service.comDayCqDamCoreImplEventDamEventAuditListener(post, apply, delete, action, $location, propertylist, eventFilter, enabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplEventDamEventAuditListener");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplEventDamEventAuditListener", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplExpiryNotificationJobImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLEXPIRYNOTIFICATIONJOBIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplExpiryNotificationJobImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamExpiryNotificationSchedulerIstimebasedParam = message.body().getString("cq.dam.expiry.notification.scheduler.istimebased");
                Boolean cqDamExpiryNotificationSchedulerIstimebased = (cqDamExpiryNotificationSchedulerIstimebasedParam == null) ? null : Json.mapper.readValue(cqDamExpiryNotificationSchedulerIstimebasedParam, Boolean.class);
                String cqDamExpiryNotificationSchedulerTimebasedRuleParam = message.body().getString("cq.dam.expiry.notification.scheduler.timebased.rule");
                String cqDamExpiryNotificationSchedulerTimebasedRule = (cqDamExpiryNotificationSchedulerTimebasedRuleParam == null) ? null : cqDamExpiryNotificationSchedulerTimebasedRuleParam;
                String cqDamExpiryNotificationSchedulerPeriodRuleParam = message.body().getString("cq.dam.expiry.notification.scheduler.period.rule");
                Integer cqDamExpiryNotificationSchedulerPeriodRule = (cqDamExpiryNotificationSchedulerPeriodRuleParam == null) ? null : Json.mapper.readValue(cqDamExpiryNotificationSchedulerPeriodRuleParam, Integer.class);
                String sendEmailParam = message.body().getString("send_email");
                Boolean sendEmail = (sendEmailParam == null) ? null : Json.mapper.readValue(sendEmailParam, Boolean.class);
                String assetExpiredLimitParam = message.body().getString("asset_expired_limit");
                Integer assetExpiredLimit = (assetExpiredLimitParam == null) ? null : Json.mapper.readValue(assetExpiredLimitParam, Integer.class);
                String priorNotificationSecondsParam = message.body().getString("prior_notification_seconds");
                Integer priorNotificationSeconds = (priorNotificationSecondsParam == null) ? null : Json.mapper.readValue(priorNotificationSecondsParam, Integer.class);
                String cqDamExpiryNotificationUrlProtocolParam = message.body().getString("cq.dam.expiry.notification.url.protocol");
                String cqDamExpiryNotificationUrlProtocol = (cqDamExpiryNotificationUrlProtocolParam == null) ? null : cqDamExpiryNotificationUrlProtocolParam;
                service.comDayCqDamCoreImplExpiryNotificationJobImpl(post, apply, delete, action, $location, propertylist, cqDamExpiryNotificationSchedulerIstimebased, cqDamExpiryNotificationSchedulerTimebasedRule, cqDamExpiryNotificationSchedulerPeriodRule, sendEmail, assetExpiredLimit, priorNotificationSeconds, cqDamExpiryNotificationUrlProtocol, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplExpiryNotificationJobImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplExpiryNotificationJobImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLFOLDERMETADATASCHEMAFOLDERMETADATASCHEMAFEAT_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String isEnabledParam = message.body().getString("isEnabled");
                Boolean isEnabled = (isEnabledParam == null) ? null : Json.mapper.readValue(isEnabledParam, Boolean.class);
                service.comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(post, apply, delete, action, $location, propertylist, isEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplGfxCommonsGfxRenderer
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLGFXCOMMONSGFXRENDERER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplGfxCommonsGfxRenderer";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String skipBufferedcacheParam = message.body().getString("skip.bufferedcache");
                Boolean skipBufferedcache = (skipBufferedcacheParam == null) ? null : Json.mapper.readValue(skipBufferedcacheParam, Boolean.class);
                service.comDayCqDamCoreImplGfxCommonsGfxRenderer(post, apply, delete, action, $location, propertylist, skipBufferedcache, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplGfxCommonsGfxRenderer");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplGfxCommonsGfxRenderer", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplHandlerEPSFormatHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLHANDLEREPSFORMATHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplHandlerEPSFormatHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String mimetypeParam = message.body().getString("mimetype");
                String mimetype = (mimetypeParam == null) ? null : mimetypeParam;
                service.comDayCqDamCoreImplHandlerEPSFormatHandler(post, apply, delete, action, $location, propertylist, mimetype, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplHandlerEPSFormatHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplHandlerEPSFormatHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplHandlerIndesignFormatHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLHANDLERINDESIGNFORMATHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplHandlerIndesignFormatHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray mimetypeParam = message.body().getJsonArray("mimetype");
                List<String> mimetype = (mimetypeParam == null) ? null : Json.mapper.readValue(mimetypeParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqDamCoreImplHandlerIndesignFormatHandler(post, apply, delete, action, $location, propertylist, mimetype, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplHandlerIndesignFormatHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplHandlerIndesignFormatHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplHandlerJpegHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLHANDLERJPEGHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplHandlerJpegHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamEnableExtMetaExtractionParam = message.body().getString("cq.dam.enable.ext.meta.extraction");
                Boolean cqDamEnableExtMetaExtraction = (cqDamEnableExtMetaExtractionParam == null) ? null : Json.mapper.readValue(cqDamEnableExtMetaExtractionParam, Boolean.class);
                String largeFileThresholdParam = message.body().getString("large_file_threshold");
                Integer largeFileThreshold = (largeFileThresholdParam == null) ? null : Json.mapper.readValue(largeFileThresholdParam, Integer.class);
                String largeCommentThresholdParam = message.body().getString("large_comment_threshold");
                Integer largeCommentThreshold = (largeCommentThresholdParam == null) ? null : Json.mapper.readValue(largeCommentThresholdParam, Integer.class);
                service.comDayCqDamCoreImplHandlerJpegHandler(post, apply, delete, action, $location, propertylist, cqDamEnableExtMetaExtraction, largeFileThreshold, largeCommentThreshold, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplHandlerJpegHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplHandlerJpegHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplHandlerXmpNCommXMPHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLHANDLERXMPNCOMMXMPHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplHandlerXmpNCommXMPHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray xmphandlerCqFormatsParam = message.body().getJsonArray("xmphandler.cq.formats");
                List<String> xmphandlerCqFormats = (xmphandlerCqFormatsParam == null) ? null : Json.mapper.readValue(xmphandlerCqFormatsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqDamCoreImplHandlerXmpNCommXMPHandler(post, apply, delete, action, $location, propertylist, xmphandlerCqFormats, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplHandlerXmpNCommXMPHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplHandlerXmpNCommXMPHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplJmxAssetIndexUpdateMonitor
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLJMXASSETINDEXUPDATEMONITOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplJmxAssetIndexUpdateMonitor";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String jmxObjectnameParam = message.body().getString("jmx.objectname");
                String jmxObjectname = (jmxObjectnameParam == null) ? null : jmxObjectnameParam;
                String propertyMeasureEnabledParam = message.body().getString("property.measure.enabled");
                Boolean propertyMeasureEnabled = (propertyMeasureEnabledParam == null) ? null : Json.mapper.readValue(propertyMeasureEnabledParam, Boolean.class);
                String propertyNameParam = message.body().getString("property.name");
                String propertyName = (propertyNameParam == null) ? null : propertyNameParam;
                String propertyMaxWaitMsParam = message.body().getString("property.max.wait.ms");
                Integer propertyMaxWaitMs = (propertyMaxWaitMsParam == null) ? null : Json.mapper.readValue(propertyMaxWaitMsParam, Integer.class);
                String propertyMaxRateParam = message.body().getString("property.max.rate");
                BigDecimal propertyMaxRate = (propertyMaxRateParam == null) ? null : Json.mapper.readValue(propertyMaxRateParam, BigDecimal.class);
                String fulltextMeasureEnabledParam = message.body().getString("fulltext.measure.enabled");
                Boolean fulltextMeasureEnabled = (fulltextMeasureEnabledParam == null) ? null : Json.mapper.readValue(fulltextMeasureEnabledParam, Boolean.class);
                String fulltextNameParam = message.body().getString("fulltext.name");
                String fulltextName = (fulltextNameParam == null) ? null : fulltextNameParam;
                String fulltextMaxWaitMsParam = message.body().getString("fulltext.max.wait.ms");
                Integer fulltextMaxWaitMs = (fulltextMaxWaitMsParam == null) ? null : Json.mapper.readValue(fulltextMaxWaitMsParam, Integer.class);
                String fulltextMaxRateParam = message.body().getString("fulltext.max.rate");
                BigDecimal fulltextMaxRate = (fulltextMaxRateParam == null) ? null : Json.mapper.readValue(fulltextMaxRateParam, BigDecimal.class);
                service.comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(post, apply, delete, action, $location, propertylist, jmxObjectname, propertyMeasureEnabled, propertyName, propertyMaxWaitMs, propertyMaxRate, fulltextMeasureEnabled, fulltextName, fulltextMaxWaitMs, fulltextMaxRate, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplJmxAssetIndexUpdateMonitor");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplJmxAssetIndexUpdateMonitor", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplJmxAssetMigrationMBeanImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLJMXASSETMIGRATIONMBEANIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplJmxAssetMigrationMBeanImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String jmxObjectnameParam = message.body().getString("jmx.objectname");
                String jmxObjectname = (jmxObjectnameParam == null) ? null : jmxObjectnameParam;
                service.comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(post, apply, delete, action, $location, propertylist, jmxObjectname, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplJmxAssetMigrationMBeanImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplJmxAssetMigrationMBeanImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplJmxAssetUpdateMonitorImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLJMXASSETUPDATEMONITORIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplJmxAssetUpdateMonitorImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String jmxObjectnameParam = message.body().getString("jmx.objectname");
                String jmxObjectname = (jmxObjectnameParam == null) ? null : jmxObjectnameParam;
                String activeParam = message.body().getString("active");
                Boolean active = (activeParam == null) ? null : Json.mapper.readValue(activeParam, Boolean.class);
                service.comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(post, apply, delete, action, $location, propertylist, jmxObjectname, active, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplJmxAssetUpdateMonitorImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplJmxAssetUpdateMonitorImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLJOBSMETADATAEXPORTASYNCMETADATAEXPORTCONFIG_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String operationParam = message.body().getString("operation");
                String operation = (operationParam == null) ? null : operationParam;
                String emailEnabledParam = message.body().getString("emailEnabled");
                Boolean emailEnabled = (emailEnabledParam == null) ? null : Json.mapper.readValue(emailEnabledParam, Boolean.class);
                service.comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(post, apply, delete, action, $location, propertylist, operation, emailEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLJOBSMETADATAIMPORTASYNCMETADATAIMPORTCONFIG_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String operationParam = message.body().getString("operation");
                String operation = (operationParam == null) ? null : operationParam;
                String operationIconParam = message.body().getString("operationIcon");
                String operationIcon = (operationIconParam == null) ? null : operationIconParam;
                String topicNameParam = message.body().getString("topicName");
                String topicName = (topicNameParam == null) ? null : topicNameParam;
                String emailEnabledParam = message.body().getString("emailEnabled");
                Boolean emailEnabled = (emailEnabledParam == null) ? null : Json.mapper.readValue(emailEnabledParam, Boolean.class);
                service.comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(post, apply, delete, action, $location, propertylist, operation, operationIcon, topicName, emailEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplLightboxLightboxServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLLIGHTBOXLIGHTBOXSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplLightboxLightboxServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingServletPathsParam = message.body().getString("sling.servlet.paths");
                String slingServletPaths = (slingServletPathsParam == null) ? null : slingServletPathsParam;
                JsonArray slingServletMethodsParam = message.body().getJsonArray("sling.servlet.methods");
                List<String> slingServletMethods = (slingServletMethodsParam == null) ? null : Json.mapper.readValue(slingServletMethodsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamEnableAnonymousParam = message.body().getString("cq.dam.enable.anonymous");
                Boolean cqDamEnableAnonymous = (cqDamEnableAnonymousParam == null) ? null : Json.mapper.readValue(cqDamEnableAnonymousParam, Boolean.class);
                service.comDayCqDamCoreImplLightboxLightboxServlet(post, apply, delete, action, $location, propertylist, slingServletPaths, slingServletMethods, cqDamEnableAnonymous, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplLightboxLightboxServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplLightboxLightboxServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplMetadataEditorSelectComponentHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLMETADATAEDITORSELECTCOMPONENTHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplMetadataEditorSelectComponentHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray graniteColonDataParam = message.body().getJsonArray("granite:data");
                List<String> graniteColonData = (graniteColonDataParam == null) ? null : Json.mapper.readValue(graniteColonDataParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqDamCoreImplMetadataEditorSelectComponentHandler(post, apply, delete, action, $location, propertylist, graniteColonData, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplMetadataEditorSelectComponentHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplMetadataEditorSelectComponentHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLMIMETYPEASSETUPLOADRESTRICTIONHELPER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamAllowAllMimeParam = message.body().getString("cq.dam.allow.all.mime");
                Boolean cqDamAllowAllMime = (cqDamAllowAllMimeParam == null) ? null : Json.mapper.readValue(cqDamAllowAllMimeParam, Boolean.class);
                JsonArray cqDamAllowedAssetMimesParam = message.body().getJsonArray("cq.dam.allowed.asset.mimes");
                List<String> cqDamAllowedAssetMimes = (cqDamAllowedAssetMimesParam == null) ? null : Json.mapper.readValue(cqDamAllowedAssetMimesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(post, apply, delete, action, $location, propertylist, cqDamAllowAllMime, cqDamAllowedAssetMimes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLMIMETYPEDAMMIMETYPESERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamDetectAssetMimeFromContentParam = message.body().getString("cq.dam.detect.asset.mime.from.content");
                Boolean cqDamDetectAssetMimeFromContent = (cqDamDetectAssetMimeFromContentParam == null) ? null : Json.mapper.readValue(cqDamDetectAssetMimeFromContentParam, Boolean.class);
                service.comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(post, apply, delete, action, $location, propertylist, cqDamDetectAssetMimeFromContent, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplMissingMetadataNotificationJob
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLMISSINGMETADATANOTIFICATIONJOB_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplMissingMetadataNotificationJob";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamMissingmetadataNotificationSchedulerIstimebasedParam = message.body().getString("cq.dam.missingmetadata.notification.scheduler.istimebased");
                Boolean cqDamMissingmetadataNotificationSchedulerIstimebased = (cqDamMissingmetadataNotificationSchedulerIstimebasedParam == null) ? null : Json.mapper.readValue(cqDamMissingmetadataNotificationSchedulerIstimebasedParam, Boolean.class);
                String cqDamMissingmetadataNotificationSchedulerTimebasedRuleParam = message.body().getString("cq.dam.missingmetadata.notification.scheduler.timebased.rule");
                String cqDamMissingmetadataNotificationSchedulerTimebasedRule = (cqDamMissingmetadataNotificationSchedulerTimebasedRuleParam == null) ? null : cqDamMissingmetadataNotificationSchedulerTimebasedRuleParam;
                String cqDamMissingmetadataNotificationSchedulerPeriodRuleParam = message.body().getString("cq.dam.missingmetadata.notification.scheduler.period.rule");
                Integer cqDamMissingmetadataNotificationSchedulerPeriodRule = (cqDamMissingmetadataNotificationSchedulerPeriodRuleParam == null) ? null : Json.mapper.readValue(cqDamMissingmetadataNotificationSchedulerPeriodRuleParam, Integer.class);
                String cqDamMissingmetadataNotificationRecipientParam = message.body().getString("cq.dam.missingmetadata.notification.recipient");
                String cqDamMissingmetadataNotificationRecipient = (cqDamMissingmetadataNotificationRecipientParam == null) ? null : cqDamMissingmetadataNotificationRecipientParam;
                service.comDayCqDamCoreImplMissingMetadataNotificationJob(post, apply, delete, action, $location, propertylist, cqDamMissingmetadataNotificationSchedulerIstimebased, cqDamMissingmetadataNotificationSchedulerTimebasedRule, cqDamMissingmetadataNotificationSchedulerPeriodRule, cqDamMissingmetadataNotificationRecipient, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplMissingMetadataNotificationJob");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplMissingMetadataNotificationJob", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLPROCESSSENDTRANSIENTWORKFLOWCOMPLETEDEMAILPR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String processLabelParam = message.body().getString("process.label");
                String processLabel = (processLabelParam == null) ? null : processLabelParam;
                String notifyOnCompleteParam = message.body().getString("Notify on Complete");
                Boolean notifyOnComplete = (notifyOnCompleteParam == null) ? null : Json.mapper.readValue(notifyOnCompleteParam, Boolean.class);
                service.comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(post, apply, delete, action, $location, propertylist, processLabel, notifyOnComplete, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplProcessTextExtractionProcess
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLPROCESSTEXTEXTRACTIONPROCESS_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplProcessTextExtractionProcess";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray mimeTypesParam = message.body().getJsonArray("mimeTypes");
                List<String> mimeTypes = (mimeTypesParam == null) ? null : Json.mapper.readValue(mimeTypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String maxExtractParam = message.body().getString("maxExtract");
                Integer maxExtract = (maxExtractParam == null) ? null : Json.mapper.readValue(maxExtractParam, Integer.class);
                service.comDayCqDamCoreImplProcessTextExtractionProcess(post, apply, delete, action, $location, propertylist, mimeTypes, maxExtract, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplProcessTextExtractionProcess");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplProcessTextExtractionProcess", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplRenditionMakerImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLRENDITIONMAKERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplRenditionMakerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String xmpPropagateParam = message.body().getString("xmp.propagate");
                Boolean xmpPropagate = (xmpPropagateParam == null) ? null : Json.mapper.readValue(xmpPropagateParam, Boolean.class);
                JsonArray xmpExcludesParam = message.body().getJsonArray("xmp.excludes");
                List<String> xmpExcludes = (xmpExcludesParam == null) ? null : Json.mapper.readValue(xmpExcludesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqDamCoreImplRenditionMakerImpl(post, apply, delete, action, $location, propertylist, xmpPropagate, xmpExcludes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplRenditionMakerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplRenditionMakerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplReportsReportExportService
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLREPORTSREPORTEXPORTSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplReportsReportExportService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String queryBatchSizeParam = message.body().getString("queryBatchSize");
                Integer queryBatchSize = (queryBatchSizeParam == null) ? null : Json.mapper.readValue(queryBatchSizeParam, Integer.class);
                service.comDayCqDamCoreImplReportsReportExportService(post, apply, delete, action, $location, propertylist, queryBatchSize, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplReportsReportExportService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplReportsReportExportService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplReportsReportPurgeService
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLREPORTSREPORTPURGESERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplReportsReportPurgeService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String schedulerExpressionParam = message.body().getString("scheduler.expression");
                String schedulerExpression = (schedulerExpressionParam == null) ? null : schedulerExpressionParam;
                String maxSavedReportsParam = message.body().getString("maxSavedReports");
                Integer maxSavedReports = (maxSavedReportsParam == null) ? null : Json.mapper.readValue(maxSavedReportsParam, Integer.class);
                String timeDurationParam = message.body().getString("timeDuration");
                Integer timeDuration = (timeDurationParam == null) ? null : Json.mapper.readValue(timeDurationParam, Integer.class);
                String enableReportPurgeParam = message.body().getString("enableReportPurge");
                Boolean enableReportPurge = (enableReportPurgeParam == null) ? null : Json.mapper.readValue(enableReportPurgeParam, Boolean.class);
                service.comDayCqDamCoreImplReportsReportPurgeService(post, apply, delete, action, $location, propertylist, schedulerExpression, maxSavedReports, timeDuration, enableReportPurge, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplReportsReportPurgeService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplReportsReportPurgeService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplServletAssetDownloadServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLSERVLETASSETDOWNLOADSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplServletAssetDownloadServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                service.comDayCqDamCoreImplServletAssetDownloadServlet(post, apply, delete, action, $location, propertylist, enabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplServletAssetDownloadServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplServletAssetDownloadServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplServletAssetStatusServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLSERVLETASSETSTATUSSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplServletAssetStatusServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamBatchStatusMaxassetsParam = message.body().getString("cq.dam.batch.status.maxassets");
                Integer cqDamBatchStatusMaxassets = (cqDamBatchStatusMaxassetsParam == null) ? null : Json.mapper.readValue(cqDamBatchStatusMaxassetsParam, Integer.class);
                service.comDayCqDamCoreImplServletAssetStatusServlet(post, apply, delete, action, $location, propertylist, cqDamBatchStatusMaxassets, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplServletAssetStatusServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplServletAssetStatusServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplServletAssetXMPSearchServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLSERVLETASSETXMPSEARCHSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplServletAssetXMPSearchServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamBatchIndesignMaxassetsParam = message.body().getString("cq.dam.batch.indesign.maxassets");
                Integer cqDamBatchIndesignMaxassets = (cqDamBatchIndesignMaxassetsParam == null) ? null : Json.mapper.readValue(cqDamBatchIndesignMaxassetsParam, Integer.class);
                service.comDayCqDamCoreImplServletAssetXMPSearchServlet(post, apply, delete, action, $location, propertylist, cqDamBatchIndesignMaxassets, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplServletAssetXMPSearchServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplServletAssetXMPSearchServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplServletBatchMetadataServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLSERVLETBATCHMETADATASERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplServletBatchMetadataServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqDamBatchMetadataAssetDefaultParam = message.body().getJsonArray("cq.dam.batch.metadata.asset.default");
                List<String> cqDamBatchMetadataAssetDefault = (cqDamBatchMetadataAssetDefaultParam == null) ? null : Json.mapper.readValue(cqDamBatchMetadataAssetDefaultParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqDamBatchMetadataCollectionDefaultParam = message.body().getJsonArray("cq.dam.batch.metadata.collection.default");
                List<String> cqDamBatchMetadataCollectionDefault = (cqDamBatchMetadataCollectionDefaultParam == null) ? null : Json.mapper.readValue(cqDamBatchMetadataCollectionDefaultParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamBatchMetadataMaxresourcesParam = message.body().getString("cq.dam.batch.metadata.maxresources");
                Integer cqDamBatchMetadataMaxresources = (cqDamBatchMetadataMaxresourcesParam == null) ? null : Json.mapper.readValue(cqDamBatchMetadataMaxresourcesParam, Integer.class);
                service.comDayCqDamCoreImplServletBatchMetadataServlet(post, apply, delete, action, $location, propertylist, cqDamBatchMetadataAssetDefault, cqDamBatchMetadataCollectionDefault, cqDamBatchMetadataMaxresources, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplServletBatchMetadataServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplServletBatchMetadataServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplServletBinaryProviderServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLSERVLETBINARYPROVIDERSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplServletBinaryProviderServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray slingServletResourceTypesParam = message.body().getJsonArray("sling.servlet.resourceTypes");
                List<String> slingServletResourceTypes = (slingServletResourceTypesParam == null) ? null : Json.mapper.readValue(slingServletResourceTypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray slingServletMethodsParam = message.body().getJsonArray("sling.servlet.methods");
                List<String> slingServletMethods = (slingServletMethodsParam == null) ? null : Json.mapper.readValue(slingServletMethodsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamDrmEnableParam = message.body().getString("cq.dam.drm.enable");
                Boolean cqDamDrmEnable = (cqDamDrmEnableParam == null) ? null : Json.mapper.readValue(cqDamDrmEnableParam, Boolean.class);
                service.comDayCqDamCoreImplServletBinaryProviderServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletMethods, cqDamDrmEnable, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplServletBinaryProviderServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplServletBinaryProviderServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplServletCollectionServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLSERVLETCOLLECTIONSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplServletCollectionServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqDamBatchCollectionPropertiesParam = message.body().getJsonArray("cq.dam.batch.collection.properties");
                List<String> cqDamBatchCollectionProperties = (cqDamBatchCollectionPropertiesParam == null) ? null : Json.mapper.readValue(cqDamBatchCollectionPropertiesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamBatchCollectionMaxcollectionsParam = message.body().getString("cq.dam.batch.collection.maxcollections");
                Integer cqDamBatchCollectionMaxcollections = (cqDamBatchCollectionMaxcollectionsParam == null) ? null : Json.mapper.readValue(cqDamBatchCollectionMaxcollectionsParam, Integer.class);
                service.comDayCqDamCoreImplServletCollectionServlet(post, apply, delete, action, $location, propertylist, cqDamBatchCollectionProperties, cqDamBatchCollectionMaxcollections, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplServletCollectionServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplServletCollectionServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplServletCollectionsServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLSERVLETCOLLECTIONSSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplServletCollectionsServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqDamBatchCollectionsPropertiesParam = message.body().getJsonArray("cq.dam.batch.collections.properties");
                List<String> cqDamBatchCollectionsProperties = (cqDamBatchCollectionsPropertiesParam == null) ? null : Json.mapper.readValue(cqDamBatchCollectionsPropertiesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamBatchCollectionsLimitParam = message.body().getString("cq.dam.batch.collections.limit");
                Integer cqDamBatchCollectionsLimit = (cqDamBatchCollectionsLimitParam == null) ? null : Json.mapper.readValue(cqDamBatchCollectionsLimitParam, Integer.class);
                service.comDayCqDamCoreImplServletCollectionsServlet(post, apply, delete, action, $location, propertylist, cqDamBatchCollectionsProperties, cqDamBatchCollectionsLimit, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplServletCollectionsServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplServletCollectionsServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplServletCompanionServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLSERVLETCOMPANIONSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplServletCompanionServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String moreInfoParam = message.body().getString("More Info");
                String moreInfo = (moreInfoParam == null) ? null : moreInfoParam;
                String slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracketParam = message.body().getString("/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}");
                String slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket = (slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracketParam == null) ? null : slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracketParam;
                service.comDayCqDamCoreImplServletCompanionServlet(post, apply, delete, action, $location, propertylist, moreInfo, slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplServletCompanionServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplServletCompanionServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplServletCreateAssetServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLSERVLETCREATEASSETSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplServletCreateAssetServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String detectDuplicateParam = message.body().getString("detect_duplicate");
                Boolean detectDuplicate = (detectDuplicateParam == null) ? null : Json.mapper.readValue(detectDuplicateParam, Boolean.class);
                service.comDayCqDamCoreImplServletCreateAssetServlet(post, apply, delete, action, $location, propertylist, detectDuplicate, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplServletCreateAssetServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplServletCreateAssetServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplServletDamContentDispositionFilter
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLSERVLETDAMCONTENTDISPOSITIONFILTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplServletDamContentDispositionFilter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqMimeTypeBlacklistParam = message.body().getJsonArray("cq.mime.type.blacklist");
                List<String> cqMimeTypeBlacklist = (cqMimeTypeBlacklistParam == null) ? null : Json.mapper.readValue(cqMimeTypeBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamEmptyMimeParam = message.body().getString("cq.dam.empty.mime");
                Boolean cqDamEmptyMime = (cqDamEmptyMimeParam == null) ? null : Json.mapper.readValue(cqDamEmptyMimeParam, Boolean.class);
                service.comDayCqDamCoreImplServletDamContentDispositionFilter(post, apply, delete, action, $location, propertylist, cqMimeTypeBlacklist, cqDamEmptyMime, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplServletDamContentDispositionFilter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplServletDamContentDispositionFilter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplServletGuidLookupFilter
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLSERVLETGUIDLOOKUPFILTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplServletGuidLookupFilter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamCoreGuidlookupfilterEnabledParam = message.body().getString("cq.dam.core.guidlookupfilter.enabled");
                Boolean cqDamCoreGuidlookupfilterEnabled = (cqDamCoreGuidlookupfilterEnabledParam == null) ? null : Json.mapper.readValue(cqDamCoreGuidlookupfilterEnabledParam, Boolean.class);
                service.comDayCqDamCoreImplServletGuidLookupFilter(post, apply, delete, action, $location, propertylist, cqDamCoreGuidlookupfilterEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplServletGuidLookupFilter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplServletGuidLookupFilter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplServletHealthCheckServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLSERVLETHEALTHCHECKSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplServletHealthCheckServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamSyncWorkflowIdParam = message.body().getString("cq.dam.sync.workflow.id");
                String cqDamSyncWorkflowId = (cqDamSyncWorkflowIdParam == null) ? null : cqDamSyncWorkflowIdParam;
                JsonArray cqDamSyncFolderTypesParam = message.body().getJsonArray("cq.dam.sync.folder.types");
                List<String> cqDamSyncFolderTypes = (cqDamSyncFolderTypesParam == null) ? null : Json.mapper.readValue(cqDamSyncFolderTypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqDamCoreImplServletHealthCheckServlet(post, apply, delete, action, $location, propertylist, cqDamSyncWorkflowId, cqDamSyncFolderTypes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplServletHealthCheckServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplServletHealthCheckServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplServletMetadataGetServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLSERVLETMETADATAGETSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplServletMetadataGetServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingServletResourceTypesParam = message.body().getString("sling.servlet.resourceTypes");
                String slingServletResourceTypes = (slingServletResourceTypesParam == null) ? null : slingServletResourceTypesParam;
                String slingServletMethodsParam = message.body().getString("sling.servlet.methods");
                String slingServletMethods = (slingServletMethodsParam == null) ? null : slingServletMethodsParam;
                String slingServletExtensionsParam = message.body().getString("sling.servlet.extensions");
                String slingServletExtensions = (slingServletExtensionsParam == null) ? null : slingServletExtensionsParam;
                String slingServletSelectorsParam = message.body().getString("sling.servlet.selectors");
                String slingServletSelectors = (slingServletSelectorsParam == null) ? null : slingServletSelectorsParam;
                service.comDayCqDamCoreImplServletMetadataGetServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletMethods, slingServletExtensions, slingServletSelectors, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplServletMetadataGetServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplServletMetadataGetServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplServletMultipleLicenseAcceptServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLSERVLETMULTIPLELICENSEACCEPTSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplServletMultipleLicenseAcceptServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamDrmEnableParam = message.body().getString("cq.dam.drm.enable");
                Boolean cqDamDrmEnable = (cqDamDrmEnableParam == null) ? null : Json.mapper.readValue(cqDamDrmEnableParam, Boolean.class);
                service.comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(post, apply, delete, action, $location, propertylist, cqDamDrmEnable, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplServletMultipleLicenseAcceptServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplServletMultipleLicenseAcceptServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplServletResourceCollectionServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLSERVLETRESOURCECOLLECTIONSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplServletResourceCollectionServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray slingServletResourceTypesParam = message.body().getJsonArray("sling.servlet.resourceTypes");
                List<String> slingServletResourceTypes = (slingServletResourceTypesParam == null) ? null : Json.mapper.readValue(slingServletResourceTypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingServletMethodsParam = message.body().getString("sling.servlet.methods");
                String slingServletMethods = (slingServletMethodsParam == null) ? null : slingServletMethodsParam;
                String slingServletSelectorsParam = message.body().getString("sling.servlet.selectors");
                String slingServletSelectors = (slingServletSelectorsParam == null) ? null : slingServletSelectorsParam;
                String downloadConfigParam = message.body().getString("download.config");
                String downloadConfig = (downloadConfigParam == null) ? null : downloadConfigParam;
                String viewSelectorParam = message.body().getString("view.selector");
                String viewSelector = (viewSelectorParam == null) ? null : viewSelectorParam;
                String sendEmailParam = message.body().getString("send_email");
                Boolean sendEmail = (sendEmailParam == null) ? null : Json.mapper.readValue(sendEmailParam, Boolean.class);
                service.comDayCqDamCoreImplServletResourceCollectionServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletMethods, slingServletSelectors, downloadConfig, viewSelector, sendEmail, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplServletResourceCollectionServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplServletResourceCollectionServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLUIPREVIEWFOLDERPREVIEWUPDATERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String createPreviewEnabledParam = message.body().getString("createPreviewEnabled");
                Boolean createPreviewEnabled = (createPreviewEnabledParam == null) ? null : Json.mapper.readValue(createPreviewEnabledParam, Boolean.class);
                String updatePreviewEnabledParam = message.body().getString("updatePreviewEnabled");
                Boolean updatePreviewEnabled = (updatePreviewEnabledParam == null) ? null : Json.mapper.readValue(updatePreviewEnabledParam, Boolean.class);
                String queueSizeParam = message.body().getString("queueSize");
                Integer queueSize = (queueSizeParam == null) ? null : Json.mapper.readValue(queueSizeParam, Integer.class);
                String folderPreviewRenditionRegexParam = message.body().getString("folderPreviewRenditionRegex");
                String folderPreviewRenditionRegex = (folderPreviewRenditionRegexParam == null) ? null : folderPreviewRenditionRegexParam;
                service.comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(post, apply, delete, action, $location, propertylist, createPreviewEnabled, updatePreviewEnabled, queueSize, folderPreviewRenditionRegex, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreImplUnzipUnzipConfig
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREIMPLUNZIPUNZIPCONFIG_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreImplUnzipUnzipConfig";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamConfigUnzipMaxuncompressedsizeParam = message.body().getString("cq.dam.config.unzip.maxuncompressedsize");
                Integer cqDamConfigUnzipMaxuncompressedsize = (cqDamConfigUnzipMaxuncompressedsizeParam == null) ? null : Json.mapper.readValue(cqDamConfigUnzipMaxuncompressedsizeParam, Integer.class);
                String cqDamConfigUnzipEncodingParam = message.body().getString("cq.dam.config.unzip.encoding");
                String cqDamConfigUnzipEncoding = (cqDamConfigUnzipEncodingParam == null) ? null : cqDamConfigUnzipEncodingParam;
                service.comDayCqDamCoreImplUnzipUnzipConfig(post, apply, delete, action, $location, propertylist, cqDamConfigUnzipMaxuncompressedsize, cqDamConfigUnzipEncoding, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreImplUnzipUnzipConfig");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreImplUnzipUnzipConfig", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreProcessExifToolExtractMetadataProcess
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREPROCESSEXIFTOOLEXTRACTMETADATAPROCESS_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreProcessExifToolExtractMetadataProcess";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String processLabelParam = message.body().getString("process.label");
                String processLabel = (processLabelParam == null) ? null : processLabelParam;
                String cqDamEnableSha1Param = message.body().getString("cq.dam.enable.sha1");
                Boolean cqDamEnableSha1 = (cqDamEnableSha1Param == null) ? null : Json.mapper.readValue(cqDamEnableSha1Param, Boolean.class);
                service.comDayCqDamCoreProcessExifToolExtractMetadataProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamEnableSha1, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreProcessExifToolExtractMetadataProcess");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreProcessExifToolExtractMetadataProcess", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreProcessExtractMetadataProcess
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREPROCESSEXTRACTMETADATAPROCESS_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreProcessExtractMetadataProcess";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String processLabelParam = message.body().getString("process.label");
                String processLabel = (processLabelParam == null) ? null : processLabelParam;
                String cqDamEnableSha1Param = message.body().getString("cq.dam.enable.sha1");
                Boolean cqDamEnableSha1 = (cqDamEnableSha1Param == null) ? null : Json.mapper.readValue(cqDamEnableSha1Param, Boolean.class);
                service.comDayCqDamCoreProcessExtractMetadataProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamEnableSha1, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreProcessExtractMetadataProcess");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreProcessExtractMetadataProcess", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamCoreProcessMetadataProcessorProcess
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMCOREPROCESSMETADATAPROCESSORPROCESS_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamCoreProcessMetadataProcessorProcess";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String processLabelParam = message.body().getString("process.label");
                String processLabel = (processLabelParam == null) ? null : processLabelParam;
                String cqDamEnableSha1Param = message.body().getString("cq.dam.enable.sha1");
                Boolean cqDamEnableSha1 = (cqDamEnableSha1Param == null) ? null : Json.mapper.readValue(cqDamEnableSha1Param, Boolean.class);
                JsonArray cqDamMetadataXssprotectedPropertiesParam = message.body().getJsonArray("cq.dam.metadata.xssprotected.properties");
                List<String> cqDamMetadataXssprotectedProperties = (cqDamMetadataXssprotectedPropertiesParam == null) ? null : Json.mapper.readValue(cqDamMetadataXssprotectedPropertiesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqDamCoreProcessMetadataProcessorProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamEnableSha1, cqDamMetadataXssprotectedProperties, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamCoreProcessMetadataProcessorProcess");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamCoreProcessMetadataProcessorProcess", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamHandlerFfmpegLocatorImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMHANDLERFFMPEGLOCATORIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamHandlerFfmpegLocatorImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray executableSearchpathParam = message.body().getJsonArray("executable.searchpath");
                List<String> executableSearchpath = (executableSearchpathParam == null) ? null : Json.mapper.readValue(executableSearchpathParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqDamHandlerFfmpegLocatorImpl(post, apply, delete, action, $location, propertylist, executableSearchpath, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamHandlerFfmpegLocatorImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamHandlerFfmpegLocatorImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMHANDLERGIBSONFONTMANAGERIMPLFONTMANAGERSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String eventFilterParam = message.body().getString("event.filter");
                String eventFilter = (eventFilterParam == null) ? null : eventFilterParam;
                JsonArray fontmgrSystemFontDirParam = message.body().getJsonArray("fontmgr.system.font.dir");
                List<String> fontmgrSystemFontDir = (fontmgrSystemFontDirParam == null) ? null : Json.mapper.readValue(fontmgrSystemFontDirParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String fontmgrAdobeFontDirParam = message.body().getString("fontmgr.adobe.font.dir");
                String fontmgrAdobeFontDir = (fontmgrAdobeFontDirParam == null) ? null : fontmgrAdobeFontDirParam;
                String fontmgrCustomerFontDirParam = message.body().getString("fontmgr.customer.font.dir");
                String fontmgrCustomerFontDir = (fontmgrCustomerFontDirParam == null) ? null : fontmgrCustomerFontDirParam;
                service.comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(post, apply, delete, action, $location, propertylist, eventFilter, fontmgrSystemFontDir, fontmgrAdobeFontDir, fontmgrCustomerFontDir, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamHandlerStandardPdfPdfHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMHANDLERSTANDARDPDFPDFHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamHandlerStandardPdfPdfHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String rasterAnnotationParam = message.body().getString("raster.annotation");
                Boolean rasterAnnotation = (rasterAnnotationParam == null) ? null : Json.mapper.readValue(rasterAnnotationParam, Boolean.class);
                service.comDayCqDamHandlerStandardPdfPdfHandler(post, apply, delete, action, $location, propertylist, rasterAnnotation, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamHandlerStandardPdfPdfHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamHandlerStandardPdfPdfHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamHandlerStandardPsPostScriptHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMHANDLERSTANDARDPSPOSTSCRIPTHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamHandlerStandardPsPostScriptHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String rasterAnnotationParam = message.body().getString("raster.annotation");
                Boolean rasterAnnotation = (rasterAnnotationParam == null) ? null : Json.mapper.readValue(rasterAnnotationParam, Boolean.class);
                service.comDayCqDamHandlerStandardPsPostScriptHandler(post, apply, delete, action, $location, propertylist, rasterAnnotation, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamHandlerStandardPsPostScriptHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamHandlerStandardPsPostScriptHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamHandlerStandardPsdPsdHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMHANDLERSTANDARDPSDPSDHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamHandlerStandardPsdPsdHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String largeFileThresholdParam = message.body().getString("large_file_threshold");
                Integer largeFileThreshold = (largeFileThresholdParam == null) ? null : Json.mapper.readValue(largeFileThresholdParam, Integer.class);
                service.comDayCqDamHandlerStandardPsdPsdHandler(post, apply, delete, action, $location, propertylist, largeFileThreshold, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamHandlerStandardPsdPsdHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamHandlerStandardPsdPsdHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamIdsImplIDSJobProcessor
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMIDSIMPLIDSJOBPROCESSOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamIdsImplIDSJobProcessor";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enableMultisessionParam = message.body().getString("enable.multisession");
                Boolean enableMultisession = (enableMultisessionParam == null) ? null : Json.mapper.readValue(enableMultisessionParam, Boolean.class);
                String idsCcEnableParam = message.body().getString("ids.cc.enable");
                Boolean idsCcEnable = (idsCcEnableParam == null) ? null : Json.mapper.readValue(idsCcEnableParam, Boolean.class);
                String enableRetryParam = message.body().getString("enable.retry");
                Boolean enableRetry = (enableRetryParam == null) ? null : Json.mapper.readValue(enableRetryParam, Boolean.class);
                String enableRetryScripterrorParam = message.body().getString("enable.retry.scripterror");
                Boolean enableRetryScripterror = (enableRetryScripterrorParam == null) ? null : Json.mapper.readValue(enableRetryScripterrorParam, Boolean.class);
                String externalizerDomainCqhostParam = message.body().getString("externalizer.domain.cqhost");
                String externalizerDomainCqhost = (externalizerDomainCqhostParam == null) ? null : externalizerDomainCqhostParam;
                String externalizerDomainHttpParam = message.body().getString("externalizer.domain.http");
                String externalizerDomainHttp = (externalizerDomainHttpParam == null) ? null : externalizerDomainHttpParam;
                service.comDayCqDamIdsImplIDSJobProcessor(post, apply, delete, action, $location, propertylist, enableMultisession, idsCcEnable, enableRetry, enableRetryScripterror, externalizerDomainCqhost, externalizerDomainHttp, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamIdsImplIDSJobProcessor");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamIdsImplIDSJobProcessor", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamIdsImplIDSPoolManagerImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMIDSIMPLIDSPOOLMANAGERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamIdsImplIDSPoolManagerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String maxErrorsToBlacklistParam = message.body().getString("max.errors.to.blacklist");
                Integer maxErrorsToBlacklist = (maxErrorsToBlacklistParam == null) ? null : Json.mapper.readValue(maxErrorsToBlacklistParam, Integer.class);
                String retryIntervalToWhitelistParam = message.body().getString("retry.interval.to.whitelist");
                Integer retryIntervalToWhitelist = (retryIntervalToWhitelistParam == null) ? null : Json.mapper.readValue(retryIntervalToWhitelistParam, Integer.class);
                String connectTimeoutParam = message.body().getString("connect.timeout");
                Integer connectTimeout = (connectTimeoutParam == null) ? null : Json.mapper.readValue(connectTimeoutParam, Integer.class);
                String socketTimeoutParam = message.body().getString("socket.timeout");
                Integer socketTimeout = (socketTimeoutParam == null) ? null : Json.mapper.readValue(socketTimeoutParam, Integer.class);
                String processLabelParam = message.body().getString("process.label");
                String processLabel = (processLabelParam == null) ? null : processLabelParam;
                String connectionUseMaxParam = message.body().getString("connection.use.max");
                Integer connectionUseMax = (connectionUseMaxParam == null) ? null : Json.mapper.readValue(connectionUseMaxParam, Integer.class);
                service.comDayCqDamIdsImplIDSPoolManagerImpl(post, apply, delete, action, $location, propertylist, maxErrorsToBlacklist, retryIntervalToWhitelist, connectTimeout, socketTimeout, processLabel, connectionUseMax, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamIdsImplIDSPoolManagerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamIdsImplIDSPoolManagerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamInddImplHandlerIndesignXMPHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMINDDIMPLHANDLERINDESIGNXMPHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamInddImplHandlerIndesignXMPHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String processLabelParam = message.body().getString("process.label");
                String processLabel = (processLabelParam == null) ? null : processLabelParam;
                String extractPagesParam = message.body().getString("extract.pages");
                Boolean extractPages = (extractPagesParam == null) ? null : Json.mapper.readValue(extractPagesParam, Boolean.class);
                service.comDayCqDamInddImplHandlerIndesignXMPHandler(post, apply, delete, action, $location, propertylist, processLabel, extractPages, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamInddImplHandlerIndesignXMPHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamInddImplHandlerIndesignXMPHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamInddImplServletSnippetCreationServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMINDDIMPLSERVLETSNIPPETCREATIONSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamInddImplServletSnippetCreationServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String snippetcreationMaxcollectionsParam = message.body().getString("snippetcreation.maxcollections");
                Integer snippetcreationMaxcollections = (snippetcreationMaxcollectionsParam == null) ? null : Json.mapper.readValue(snippetcreationMaxcollectionsParam, Integer.class);
                service.comDayCqDamInddImplServletSnippetCreationServlet(post, apply, delete, action, $location, propertylist, snippetcreationMaxcollections, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamInddImplServletSnippetCreationServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamInddImplServletSnippetCreationServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamInddProcessINDDMediaExtractProcess
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMINDDPROCESSINDDMEDIAEXTRACTPROCESS_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamInddProcessINDDMediaExtractProcess";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String processLabelParam = message.body().getString("process.label");
                String processLabel = (processLabelParam == null) ? null : processLabelParam;
                String cqDamInddPagesRegexParam = message.body().getString("cq.dam.indd.pages.regex");
                String cqDamInddPagesRegex = (cqDamInddPagesRegexParam == null) ? null : cqDamInddPagesRegexParam;
                String idsJobDecoupledParam = message.body().getString("ids.job.decoupled");
                Boolean idsJobDecoupled = (idsJobDecoupledParam == null) ? null : Json.mapper.readValue(idsJobDecoupledParam, Boolean.class);
                String idsJobWorkflowModelParam = message.body().getString("ids.job.workflow.model");
                String idsJobWorkflowModel = (idsJobWorkflowModelParam == null) ? null : idsJobWorkflowModelParam;
                service.comDayCqDamInddProcessINDDMediaExtractProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamInddPagesRegex, idsJobDecoupled, idsJobWorkflowModel, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamInddProcessINDDMediaExtractProcess");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamInddProcessINDDMediaExtractProcess", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMPERFORMANCEINTERNALASSETPERFORMANCEDATAHANDLERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String batchCommitSizeParam = message.body().getString("batch.commit.size");
                Integer batchCommitSize = (batchCommitSizeParam == null) ? null : Json.mapper.readValue(batchCommitSizeParam, Integer.class);
                service.comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(post, apply, delete, action, $location, propertylist, batchCommitSize, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMPERFORMANCEINTERNALASSETPERFORMANCEREPORTSYNCJOB_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String schedulerExpressionParam = message.body().getString("scheduler.expression");
                String schedulerExpression = (schedulerExpressionParam == null) ? null : schedulerExpressionParam;
                service.comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(post, apply, delete, action, $location, propertylist, schedulerExpression, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMPIMIMPLSOURCINGUPLOADPROCESSPRODUCTASSETSUPLOADPRO_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String deleteZipFileParam = message.body().getString("delete.zip.file");
                Boolean deleteZipFile = (deleteZipFileParam == null) ? null : Json.mapper.readValue(deleteZipFileParam, Boolean.class);
                service.comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(post, apply, delete, action, $location, propertylist, deleteZipFile, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMS7DAMCOMMONANALYTICSIMPLS7DAMDYNAMICMEDIACONFIGEVEN_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamS7damDynamicmediaconfigeventlistenerEnabledParam = message.body().getString("cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled");
                Boolean cqDamS7damDynamicmediaconfigeventlistenerEnabled = (cqDamS7damDynamicmediaconfigeventlistenerEnabledParam == null) ? null : Json.mapper.readValue(cqDamS7damDynamicmediaconfigeventlistenerEnabledParam, Boolean.class);
                service.comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(post, apply, delete, action, $location, propertylist, cqDamS7damDynamicmediaconfigeventlistenerEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMS7DAMCOMMONANALYTICSIMPLSITECATALYSTREPORTRUNNER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String schedulerExpressionParam = message.body().getString("scheduler.expression");
                String schedulerExpression = (schedulerExpressionParam == null) ? null : schedulerExpressionParam;
                String schedulerConcurrentParam = message.body().getString("scheduler.concurrent");
                Boolean schedulerConcurrent = (schedulerConcurrentParam == null) ? null : Json.mapper.readValue(schedulerConcurrentParam, Boolean.class);
                service.comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(post, apply, delete, action, $location, propertylist, schedulerExpression, schedulerConcurrent, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamS7damCommonPostServletsSetCreateHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMS7DAMCOMMONPOSTSERVLETSSETCREATEHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamS7damCommonPostServletsSetCreateHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingPostOperationParam = message.body().getString("sling.post.operation");
                String slingPostOperation = (slingPostOperationParam == null) ? null : slingPostOperationParam;
                String slingServletMethodsParam = message.body().getString("sling.servlet.methods");
                String slingServletMethods = (slingServletMethodsParam == null) ? null : slingServletMethodsParam;
                service.comDayCqDamS7damCommonPostServletsSetCreateHandler(post, apply, delete, action, $location, propertylist, slingPostOperation, slingServletMethods, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamS7damCommonPostServletsSetCreateHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamS7damCommonPostServletsSetCreateHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamS7damCommonPostServletsSetModifyHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMS7DAMCOMMONPOSTSERVLETSSETMODIFYHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamS7damCommonPostServletsSetModifyHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingPostOperationParam = message.body().getString("sling.post.operation");
                String slingPostOperation = (slingPostOperationParam == null) ? null : slingPostOperationParam;
                String slingServletMethodsParam = message.body().getString("sling.servlet.methods");
                String slingServletMethods = (slingServletMethodsParam == null) ? null : slingServletMethodsParam;
                service.comDayCqDamS7damCommonPostServletsSetModifyHandler(post, apply, delete, action, $location, propertylist, slingPostOperation, slingServletMethods, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamS7damCommonPostServletsSetModifyHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamS7damCommonPostServletsSetModifyHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMS7DAMCOMMONPROCESSVIDEOTHUMBNAILDOWNLOADPROCESS_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String processLabelParam = message.body().getString("process.label");
                String processLabel = (processLabelParam == null) ? null : processLabelParam;
                service.comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(post, apply, delete, action, $location, propertylist, processLabel, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamS7damCommonS7damDamChangeEventListener
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMS7DAMCOMMONS7DAMDAMCHANGEEVENTLISTENER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamS7damCommonS7damDamChangeEventListener";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamS7damDamchangeeventlistenerEnabledParam = message.body().getString("cq.dam.s7dam.damchangeeventlistener.enabled");
                Boolean cqDamS7damDamchangeeventlistenerEnabled = (cqDamS7damDamchangeeventlistenerEnabledParam == null) ? null : Json.mapper.readValue(cqDamS7damDamchangeeventlistenerEnabledParam, Boolean.class);
                service.comDayCqDamS7damCommonS7damDamChangeEventListener(post, apply, delete, action, $location, propertylist, cqDamS7damDamchangeeventlistenerEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamS7damCommonS7damDamChangeEventListener");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamS7damCommonS7damDamChangeEventListener", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamS7damCommonServletsS7damProductInfoServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMS7DAMCOMMONSERVLETSS7DAMPRODUCTINFOSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamS7damCommonServletsS7damProductInfoServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingServletPathsParam = message.body().getString("sling.servlet.paths");
                String slingServletPaths = (slingServletPathsParam == null) ? null : slingServletPathsParam;
                String slingServletMethodsParam = message.body().getString("sling.servlet.methods");
                String slingServletMethods = (slingServletMethodsParam == null) ? null : slingServletMethodsParam;
                service.comDayCqDamS7damCommonServletsS7damProductInfoServlet(post, apply, delete, action, $location, propertylist, slingServletPaths, slingServletMethods, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamS7damCommonServletsS7damProductInfoServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamS7damCommonServletsS7damProductInfoServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMS7DAMCOMMONVIDEOIMPLVIDEOPROXYCLIENTSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeNameParam = message.body().getString("cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name");
                Integer cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName = (cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeNameParam == null) ? null : Json.mapper.readValue(cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeNameParam, Integer.class);
                String cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeNameParam = message.body().getString("cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name");
                Integer cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName = (cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeNameParam == null) ? null : Json.mapper.readValue(cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeNameParam, Integer.class);
                String cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadNameParam = message.body().getString("cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name");
                Integer cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName = (cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadNameParam == null) ? null : Json.mapper.readValue(cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadNameParam, Integer.class);
                String cqDamS7damVideoproxyclientserviceHttpReadtimeoutNameParam = message.body().getString("cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name");
                Integer cqDamS7damVideoproxyclientserviceHttpReadtimeoutName = (cqDamS7damVideoproxyclientserviceHttpReadtimeoutNameParam == null) ? null : Json.mapper.readValue(cqDamS7damVideoproxyclientserviceHttpReadtimeoutNameParam, Integer.class);
                String cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutNameParam = message.body().getString("cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name");
                Integer cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName = (cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutNameParam == null) ? null : Json.mapper.readValue(cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutNameParam, Integer.class);
                String cqDamS7damVideoproxyclientserviceHttpMaxretrycountNameParam = message.body().getString("cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name");
                Integer cqDamS7damVideoproxyclientserviceHttpMaxretrycountName = (cqDamS7damVideoproxyclientserviceHttpMaxretrycountNameParam == null) ? null : Json.mapper.readValue(cqDamS7damVideoproxyclientserviceHttpMaxretrycountNameParam, Integer.class);
                String cqDamS7damVideoproxyclientserviceUploadprogressIntervalNameParam = message.body().getString("cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name");
                Integer cqDamS7damVideoproxyclientserviceUploadprogressIntervalName = (cqDamS7damVideoproxyclientserviceUploadprogressIntervalNameParam == null) ? null : Json.mapper.readValue(cqDamS7damVideoproxyclientserviceUploadprogressIntervalNameParam, Integer.class);
                service.comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(post, apply, delete, action, $location, propertylist, cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName, cqDamS7damVideoproxyclientserviceHttpReadtimeoutName, cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName, cqDamS7damVideoproxyclientserviceHttpMaxretrycountName, cqDamS7damVideoproxyclientserviceUploadprogressIntervalName, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamScene7ImplScene7APIClientImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMSCENE7IMPLSCENE7APICLIENTIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamScene7ImplScene7APIClientImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamScene7ApiclientRecordsperpageNofilterNameParam = message.body().getString("cq.dam.scene7.apiclient.recordsperpage.nofilter.name");
                Integer cqDamScene7ApiclientRecordsperpageNofilterName = (cqDamScene7ApiclientRecordsperpageNofilterNameParam == null) ? null : Json.mapper.readValue(cqDamScene7ApiclientRecordsperpageNofilterNameParam, Integer.class);
                String cqDamScene7ApiclientRecordsperpageWithfilterNameParam = message.body().getString("cq.dam.scene7.apiclient.recordsperpage.withfilter.name");
                Integer cqDamScene7ApiclientRecordsperpageWithfilterName = (cqDamScene7ApiclientRecordsperpageWithfilterNameParam == null) ? null : Json.mapper.readValue(cqDamScene7ApiclientRecordsperpageWithfilterNameParam, Integer.class);
                service.comDayCqDamScene7ImplScene7APIClientImpl(post, apply, delete, action, $location, propertylist, cqDamScene7ApiclientRecordsperpageNofilterName, cqDamScene7ApiclientRecordsperpageWithfilterName, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamScene7ImplScene7APIClientImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamScene7ImplScene7APIClientImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMSCENE7IMPLSCENE7ASSETMIMETYPESERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqDamScene7AssetmimetypeserviceMappingParam = message.body().getJsonArray("cq.dam.scene7.assetmimetypeservice.mapping");
                List<String> cqDamScene7AssetmimetypeserviceMapping = (cqDamScene7AssetmimetypeserviceMappingParam == null) ? null : Json.mapper.readValue(cqDamScene7AssetmimetypeserviceMappingParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(post, apply, delete, action, $location, propertylist, cqDamScene7AssetmimetypeserviceMapping, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamScene7ImplScene7ConfigurationEventListener
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMSCENE7IMPLSCENE7CONFIGURATIONEVENTLISTENER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamScene7ImplScene7ConfigurationEventListener";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamScene7ConfigurationeventlistenerEnabledParam = message.body().getString("cq.dam.scene7.configurationeventlistener.enabled");
                Boolean cqDamScene7ConfigurationeventlistenerEnabled = (cqDamScene7ConfigurationeventlistenerEnabledParam == null) ? null : Json.mapper.readValue(cqDamScene7ConfigurationeventlistenerEnabledParam, Boolean.class);
                service.comDayCqDamScene7ImplScene7ConfigurationEventListener(post, apply, delete, action, $location, propertylist, cqDamScene7ConfigurationeventlistenerEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamScene7ImplScene7ConfigurationEventListener");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamScene7ImplScene7ConfigurationEventListener", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamScene7ImplScene7DamChangeEventListener
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMSCENE7IMPLSCENE7DAMCHANGEEVENTLISTENER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamScene7ImplScene7DamChangeEventListener";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamScene7DamchangeeventlistenerEnabledParam = message.body().getString("cq.dam.scene7.damchangeeventlistener.enabled");
                Boolean cqDamScene7DamchangeeventlistenerEnabled = (cqDamScene7DamchangeeventlistenerEnabledParam == null) ? null : Json.mapper.readValue(cqDamScene7DamchangeeventlistenerEnabledParam, Boolean.class);
                JsonArray cqDamScene7DamchangeeventlistenerObservedPathsParam = message.body().getJsonArray("cq.dam.scene7.damchangeeventlistener.observed.paths");
                List<String> cqDamScene7DamchangeeventlistenerObservedPaths = (cqDamScene7DamchangeeventlistenerObservedPathsParam == null) ? null : Json.mapper.readValue(cqDamScene7DamchangeeventlistenerObservedPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqDamScene7ImplScene7DamChangeEventListener(post, apply, delete, action, $location, propertylist, cqDamScene7DamchangeeventlistenerEnabled, cqDamScene7DamchangeeventlistenerObservedPaths, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamScene7ImplScene7DamChangeEventListener");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamScene7ImplScene7DamChangeEventListener", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMSCENE7IMPLSCENE7FLASHTEMPLATESSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String scene7FlashTemplatesRtiParam = message.body().getString("scene7FlashTemplates.rti");
                String scene7FlashTemplatesRti = (scene7FlashTemplatesRtiParam == null) ? null : scene7FlashTemplatesRtiParam;
                String scene7FlashTemplatesRsiParam = message.body().getString("scene7FlashTemplates.rsi");
                String scene7FlashTemplatesRsi = (scene7FlashTemplatesRsiParam == null) ? null : scene7FlashTemplatesRsiParam;
                String scene7FlashTemplatesRbParam = message.body().getString("scene7FlashTemplates.rb");
                String scene7FlashTemplatesRb = (scene7FlashTemplatesRbParam == null) ? null : scene7FlashTemplatesRbParam;
                String scene7FlashTemplatesRurlParam = message.body().getString("scene7FlashTemplates.rurl");
                String scene7FlashTemplatesRurl = (scene7FlashTemplatesRurlParam == null) ? null : scene7FlashTemplatesRurlParam;
                String scene7FlashTemplateUrlFormatParameterParam = message.body().getString("scene7FlashTemplate.urlFormatParameter");
                String scene7FlashTemplateUrlFormatParameter = (scene7FlashTemplateUrlFormatParameterParam == null) ? null : scene7FlashTemplateUrlFormatParameterParam;
                service.comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(post, apply, delete, action, $location, propertylist, scene7FlashTemplatesRti, scene7FlashTemplatesRsi, scene7FlashTemplatesRb, scene7FlashTemplatesRurl, scene7FlashTemplateUrlFormatParameter, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamScene7ImplScene7UploadServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMSCENE7IMPLSCENE7UPLOADSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamScene7ImplScene7UploadServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqDamScene7UploadserviceActivejobtimeoutLabelParam = message.body().getString("cq.dam.scene7.uploadservice.activejobtimeout.label");
                Integer cqDamScene7UploadserviceActivejobtimeoutLabel = (cqDamScene7UploadserviceActivejobtimeoutLabelParam == null) ? null : Json.mapper.readValue(cqDamScene7UploadserviceActivejobtimeoutLabelParam, Integer.class);
                String cqDamScene7UploadserviceConnectionmaxperrouteLabelParam = message.body().getString("cq.dam.scene7.uploadservice.connectionmaxperroute.label");
                Integer cqDamScene7UploadserviceConnectionmaxperrouteLabel = (cqDamScene7UploadserviceConnectionmaxperrouteLabelParam == null) ? null : Json.mapper.readValue(cqDamScene7UploadserviceConnectionmaxperrouteLabelParam, Integer.class);
                service.comDayCqDamScene7ImplScene7UploadServiceImpl(post, apply, delete, action, $location, propertylist, cqDamScene7UploadserviceActivejobtimeoutLabel, cqDamScene7UploadserviceConnectionmaxperrouteLabel, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamScene7ImplScene7UploadServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamScene7ImplScene7UploadServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMSTOCKINTEGRATIONIMPLCACHESTOCKCACHECONFIGURATIONSER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String getCacheExpirationUnitParam = message.body().getString("getCacheExpirationUnit");
                String getCacheExpirationUnit = (getCacheExpirationUnitParam == null) ? null : getCacheExpirationUnitParam;
                String getCacheExpirationValueParam = message.body().getString("getCacheExpirationValue");
                Integer getCacheExpirationValue = (getCacheExpirationValueParam == null) ? null : Json.mapper.readValue(getCacheExpirationValueParam, Integer.class);
                service.comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(post, apply, delete, action, $location, propertylist, getCacheExpirationUnit, getCacheExpirationValue, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamStockIntegrationImplConfigurationStockConfiguration
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMSTOCKINTEGRATIONIMPLCONFIGURATIONSTOCKCONFIGURATION_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamStockIntegrationImplConfigurationStockConfiguration";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String localeParam = message.body().getString("locale");
                String locale = (localeParam == null) ? null : localeParam;
                String imsConfigParam = message.body().getString("imsConfig");
                String imsConfig = (imsConfigParam == null) ? null : imsConfigParam;
                service.comDayCqDamStockIntegrationImplConfigurationStockConfiguration(post, apply, delete, action, $location, propertylist, name, locale, imsConfig, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamStockIntegrationImplConfigurationStockConfiguration");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamStockIntegrationImplConfigurationStockConfiguration", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqDamVideoImplServletVideoTestServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQDAMVIDEOIMPLSERVLETVIDEOTESTSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqDamVideoImplServletVideoTestServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                service.comDayCqDamVideoImplServletVideoTestServlet(post, apply, delete, action, $location, propertylist, enabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqDamVideoImplServletVideoTestServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqDamVideoImplServletVideoTestServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqExtwidgetServletsImageSpriteServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQEXTWIDGETSERVLETSIMAGESPRITESERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqExtwidgetServletsImageSpriteServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String maxWidthParam = message.body().getString("maxWidth");
                Integer maxWidth = (maxWidthParam == null) ? null : Json.mapper.readValue(maxWidthParam, Integer.class);
                String maxHeightParam = message.body().getString("maxHeight");
                Integer maxHeight = (maxHeightParam == null) ? null : Json.mapper.readValue(maxHeightParam, Integer.class);
                service.comDayCqExtwidgetServletsImageSpriteServlet(post, apply, delete, action, $location, propertylist, maxWidth, maxHeight, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqExtwidgetServletsImageSpriteServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqExtwidgetServletsImageSpriteServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqImageInternalFontFontHelper
        vertx.eventBus().<JsonObject> consumer(COMDAYCQIMAGEINTERNALFONTFONTHELPER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqImageInternalFontFontHelper";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray fontpathParam = message.body().getJsonArray("fontpath");
                List<String> fontpath = (fontpathParam == null) ? null : Json.mapper.readValue(fontpathParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String oversamplingFactorParam = message.body().getString("oversamplingFactor");
                Integer oversamplingFactor = (oversamplingFactorParam == null) ? null : Json.mapper.readValue(oversamplingFactorParam, Integer.class);
                service.comDayCqImageInternalFontFontHelper(post, apply, delete, action, $location, propertylist, fontpath, oversamplingFactor, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqImageInternalFontFontHelper");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqImageInternalFontFontHelper", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqJcrclustersupportClusterStartLevelController
        vertx.eventBus().<JsonObject> consumer(COMDAYCQJCRCLUSTERSUPPORTCLUSTERSTARTLEVELCONTROLLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqJcrclustersupportClusterStartLevelController";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String clusterLevelEnableParam = message.body().getString("cluster.level.enable");
                Boolean clusterLevelEnable = (clusterLevelEnableParam == null) ? null : Json.mapper.readValue(clusterLevelEnableParam, Boolean.class);
                String clusterMasterLevelParam = message.body().getString("cluster.master.level");
                Integer clusterMasterLevel = (clusterMasterLevelParam == null) ? null : Json.mapper.readValue(clusterMasterLevelParam, Integer.class);
                String clusterSlaveLevelParam = message.body().getString("cluster.slave.level");
                Integer clusterSlaveLevel = (clusterSlaveLevelParam == null) ? null : Json.mapper.readValue(clusterSlaveLevelParam, Integer.class);
                service.comDayCqJcrclustersupportClusterStartLevelController(post, apply, delete, action, $location, propertylist, clusterLevelEnable, clusterMasterLevel, clusterSlaveLevel, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqJcrclustersupportClusterStartLevelController");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqJcrclustersupportClusterStartLevelController", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqMailerDefaultMailService
        vertx.eventBus().<JsonObject> consumer(COMDAYCQMAILERDEFAULTMAILSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqMailerDefaultMailService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String smtpHostParam = message.body().getString("smtp.host");
                String smtpHost = (smtpHostParam == null) ? null : smtpHostParam;
                String smtpPortParam = message.body().getString("smtp.port");
                Integer smtpPort = (smtpPortParam == null) ? null : Json.mapper.readValue(smtpPortParam, Integer.class);
                String smtpUserParam = message.body().getString("smtp.user");
                String smtpUser = (smtpUserParam == null) ? null : smtpUserParam;
                String smtpPasswordParam = message.body().getString("smtp.password");
                String smtpPassword = (smtpPasswordParam == null) ? null : smtpPasswordParam;
                String fromAddressParam = message.body().getString("from.address");
                String fromAddress = (fromAddressParam == null) ? null : fromAddressParam;
                String smtpSslParam = message.body().getString("smtp.ssl");
                Boolean smtpSsl = (smtpSslParam == null) ? null : Json.mapper.readValue(smtpSslParam, Boolean.class);
                String smtpStarttlsParam = message.body().getString("smtp.starttls");
                Boolean smtpStarttls = (smtpStarttlsParam == null) ? null : Json.mapper.readValue(smtpStarttlsParam, Boolean.class);
                String debugEmailParam = message.body().getString("debug.email");
                Boolean debugEmail = (debugEmailParam == null) ? null : Json.mapper.readValue(debugEmailParam, Boolean.class);
                service.comDayCqMailerDefaultMailService(post, apply, delete, action, $location, propertylist, smtpHost, smtpPort, smtpUser, smtpPassword, fromAddress, smtpSsl, smtpStarttls, debugEmail, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqMailerDefaultMailService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqMailerDefaultMailService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqMailerImplCqMailingService
        vertx.eventBus().<JsonObject> consumer(COMDAYCQMAILERIMPLCQMAILINGSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqMailerImplCqMailingService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String maxRecipientCountParam = message.body().getString("max.recipient.count");
                String maxRecipientCount = (maxRecipientCountParam == null) ? null : maxRecipientCountParam;
                service.comDayCqMailerImplCqMailingService(post, apply, delete, action, $location, propertylist, maxRecipientCount, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqMailerImplCqMailingService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqMailerImplCqMailingService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqMailerImplEmailCqEmailTemplateFactory
        vertx.eventBus().<JsonObject> consumer(COMDAYCQMAILERIMPLEMAILCQEMAILTEMPLATEFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqMailerImplEmailCqEmailTemplateFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String mailerEmailCharsetParam = message.body().getString("mailer.email.charset");
                String mailerEmailCharset = (mailerEmailCharsetParam == null) ? null : mailerEmailCharsetParam;
                service.comDayCqMailerImplEmailCqEmailTemplateFactory(post, apply, delete, action, $location, propertylist, mailerEmailCharset, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqMailerImplEmailCqEmailTemplateFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqMailerImplEmailCqEmailTemplateFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqMailerImplEmailCqRetrieverTemplateFactory
        vertx.eventBus().<JsonObject> consumer(COMDAYCQMAILERIMPLEMAILCQRETRIEVERTEMPLATEFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqMailerImplEmailCqRetrieverTemplateFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String mailerEmailEmbedParam = message.body().getString("mailer.email.embed");
                Boolean mailerEmailEmbed = (mailerEmailEmbedParam == null) ? null : Json.mapper.readValue(mailerEmailEmbedParam, Boolean.class);
                String mailerEmailCharsetParam = message.body().getString("mailer.email.charset");
                String mailerEmailCharset = (mailerEmailCharsetParam == null) ? null : mailerEmailCharsetParam;
                String mailerEmailRetrieverUserIDParam = message.body().getString("mailer.email.retrieverUserID");
                String mailerEmailRetrieverUserID = (mailerEmailRetrieverUserIDParam == null) ? null : mailerEmailRetrieverUserIDParam;
                String mailerEmailRetrieverUserPWDParam = message.body().getString("mailer.email.retrieverUserPWD");
                String mailerEmailRetrieverUserPWD = (mailerEmailRetrieverUserPWDParam == null) ? null : mailerEmailRetrieverUserPWDParam;
                service.comDayCqMailerImplEmailCqRetrieverTemplateFactory(post, apply, delete, action, $location, propertylist, mailerEmailEmbed, mailerEmailCharset, mailerEmailRetrieverUserID, mailerEmailRetrieverUserPWD, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqMailerImplEmailCqRetrieverTemplateFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqMailerImplEmailCqRetrieverTemplateFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqMcmCampaignImplIntegrationConfigImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQMCMCAMPAIGNIMPLINTEGRATIONCONFIGIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqMcmCampaignImplIntegrationConfigImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray aemMcmCampaignFormConstraintsParam = message.body().getJsonArray("aem.mcm.campaign.formConstraints");
                List<String> aemMcmCampaignFormConstraints = (aemMcmCampaignFormConstraintsParam == null) ? null : Json.mapper.readValue(aemMcmCampaignFormConstraintsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String aemMcmCampaignPublicUrlParam = message.body().getString("aem.mcm.campaign.publicUrl");
                String aemMcmCampaignPublicUrl = (aemMcmCampaignPublicUrlParam == null) ? null : aemMcmCampaignPublicUrlParam;
                String aemMcmCampaignRelaxedSSLParam = message.body().getString("aem.mcm.campaign.relaxedSSL");
                Boolean aemMcmCampaignRelaxedSSL = (aemMcmCampaignRelaxedSSLParam == null) ? null : Json.mapper.readValue(aemMcmCampaignRelaxedSSLParam, Boolean.class);
                service.comDayCqMcmCampaignImplIntegrationConfigImpl(post, apply, delete, action, $location, propertylist, aemMcmCampaignFormConstraints, aemMcmCampaignPublicUrl, aemMcmCampaignRelaxedSSL, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqMcmCampaignImplIntegrationConfigImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqMcmCampaignImplIntegrationConfigImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory
        vertx.eventBus().<JsonObject> consumer(COMDAYCQMCMCAMPAIGNIMPORTERPERSONALIZEDTEXTHANDLERFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                service.comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQMCMCORENEWSLETTERNEWSLETTEREMAILSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String fromAddressParam = message.body().getString("from.address");
                String fromAddress = (fromAddressParam == null) ? null : fromAddressParam;
                String senderHostParam = message.body().getString("sender.host");
                String senderHost = (senderHostParam == null) ? null : senderHostParam;
                String maxBounceCountParam = message.body().getString("max.bounce.count");
                String maxBounceCount = (maxBounceCountParam == null) ? null : maxBounceCountParam;
                service.comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(post, apply, delete, action, $location, propertylist, fromAddress, senderHost, maxBounceCount, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqMcmImplMCMConfiguration
        vertx.eventBus().<JsonObject> consumer(COMDAYCQMCMIMPLMCMCONFIGURATION_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqMcmImplMCMConfiguration";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray experienceIndirectionParam = message.body().getJsonArray("experience.indirection");
                List<String> experienceIndirection = (experienceIndirectionParam == null) ? null : Json.mapper.readValue(experienceIndirectionParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray touchpointIndirectionParam = message.body().getJsonArray("touchpoint.indirection");
                List<String> touchpointIndirection = (touchpointIndirectionParam == null) ? null : Json.mapper.readValue(touchpointIndirectionParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqMcmImplMCMConfiguration(post, apply, delete, action, $location, propertylist, experienceIndirection, touchpointIndirection, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqMcmImplMCMConfiguration");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqMcmImplMCMConfiguration", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen
        vertx.eventBus().<JsonObject> consumer(COMDAYCQMCMLANDINGPAGEPARSERTAGHANDLERSCTACLICKTHROUGHCOMPONEN_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                String componentResourceTypeParam = message.body().getString("component.resourceType");
                String componentResourceType = (componentResourceTypeParam == null) ? null : componentResourceTypeParam;
                service.comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug
        vertx.eventBus().<JsonObject> consumer(COMDAYCQMCMLANDINGPAGEPARSERTAGHANDLERSCTAGRAPHICALCLICKTHROUG_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                String componentResourceTypeParam = message.body().getString("component.resourceType");
                String componentResourceType = (componentResourceTypeParam == null) ? null : componentResourceTypeParam;
                service.comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent
        vertx.eventBus().<JsonObject> consumer(COMDAYCQMCMLANDINGPAGEPARSERTAGHANDLERSCTALEADFORMCTACOMPONENT_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                service.comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa
        vertx.eventBus().<JsonObject> consumer(COMDAYCQMCMLANDINGPAGEPARSERTAGHANDLERSMBOXMBOXEXPERIENCETAGHA_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                service.comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH
        vertx.eventBus().<JsonObject> consumer(COMDAYCQMCMLANDINGPAGEPARSERTAGHANDLERSMBOXTARGETCOMPONENTTAGH_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                String componentResourceTypeParam = message.body().getString("component.resourceType");
                String componentResourceType = (componentResourceTypeParam == null) ? null : componentResourceTypeParam;
                service.comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqNotificationImplNotificationServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQNOTIFICATIONIMPLNOTIFICATIONSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqNotificationImplNotificationServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String eventFilterParam = message.body().getString("event.filter");
                String eventFilter = (eventFilterParam == null) ? null : eventFilterParam;
                service.comDayCqNotificationImplNotificationServiceImpl(post, apply, delete, action, $location, propertylist, eventFilter, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqNotificationImplNotificationServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqNotificationImplNotificationServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqPersonalizationImplServletsTargetingConfigurationServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQPERSONALIZATIONIMPLSERVLETSTARGETINGCONFIGURATIONSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqPersonalizationImplServletsTargetingConfigurationServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String forcelocationParam = message.body().getString("forcelocation");
                Boolean forcelocation = (forcelocationParam == null) ? null : Json.mapper.readValue(forcelocationParam, Boolean.class);
                service.comDayCqPersonalizationImplServletsTargetingConfigurationServlet(post, apply, delete, action, $location, propertylist, forcelocation, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqPersonalizationImplServletsTargetingConfigurationServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqPersonalizationImplServletsTargetingConfigurationServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqPollingImporterImplManagedPollConfigImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQPOLLINGIMPORTERIMPLMANAGEDPOLLCONFIGIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqPollingImporterImplManagedPollConfigImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String idParam = message.body().getString("id");
                String id = (idParam == null) ? null : idParam;
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                String referenceParam = message.body().getString("reference");
                Boolean reference = (referenceParam == null) ? null : Json.mapper.readValue(referenceParam, Boolean.class);
                String intervalParam = message.body().getString("interval");
                Integer interval = (intervalParam == null) ? null : Json.mapper.readValue(intervalParam, Integer.class);
                String expressionParam = message.body().getString("expression");
                String expression = (expressionParam == null) ? null : expressionParam;
                String sourceParam = message.body().getString("source");
                String source = (sourceParam == null) ? null : sourceParam;
                String targetParam = message.body().getString("target");
                String target = (targetParam == null) ? null : targetParam;
                String loginParam = message.body().getString("login");
                String login = (loginParam == null) ? null : loginParam;
                String passwordParam = message.body().getString("password");
                String password = (passwordParam == null) ? null : passwordParam;
                service.comDayCqPollingImporterImplManagedPollConfigImpl(post, apply, delete, action, $location, propertylist, id, enabled, reference, interval, expression, source, target, login, password, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqPollingImporterImplManagedPollConfigImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqPollingImporterImplManagedPollConfigImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqPollingImporterImplManagedPollingImporterImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQPOLLINGIMPORTERIMPLMANAGEDPOLLINGIMPORTERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqPollingImporterImplManagedPollingImporterImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String importerUserParam = message.body().getString("importer.user");
                String importerUser = (importerUserParam == null) ? null : importerUserParam;
                service.comDayCqPollingImporterImplManagedPollingImporterImpl(post, apply, delete, action, $location, propertylist, importerUser, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqPollingImporterImplManagedPollingImporterImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqPollingImporterImplManagedPollingImporterImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqPollingImporterImplPollingImporterImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQPOLLINGIMPORTERIMPLPOLLINGIMPORTERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqPollingImporterImplPollingImporterImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String importerMinIntervalParam = message.body().getString("importer.min.interval");
                Integer importerMinInterval = (importerMinIntervalParam == null) ? null : Json.mapper.readValue(importerMinIntervalParam, Integer.class);
                String importerUserParam = message.body().getString("importer.user");
                String importerUser = (importerUserParam == null) ? null : importerUserParam;
                JsonArray excludePathsParam = message.body().getJsonArray("exclude.paths");
                List<String> excludePaths = (excludePathsParam == null) ? null : Json.mapper.readValue(excludePathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray includePathsParam = message.body().getJsonArray("include.paths");
                List<String> includePaths = (includePathsParam == null) ? null : Json.mapper.readValue(includePathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqPollingImporterImplPollingImporterImpl(post, apply, delete, action, $location, propertylist, importerMinInterval, importerUser, excludePaths, includePaths, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqPollingImporterImplPollingImporterImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqPollingImporterImplPollingImporterImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqReplicationAuditReplicationEventListener
        vertx.eventBus().<JsonObject> consumer(COMDAYCQREPLICATIONAUDITREPLICATIONEVENTLISTENER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqReplicationAuditReplicationEventListener";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                service.comDayCqReplicationAuditReplicationEventListener(post, apply, delete, action, $location, propertylist, serviceRanking, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqReplicationAuditReplicationEventListener");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqReplicationAuditReplicationEventListener", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqReplicationContentStaticContentBuilder
        vertx.eventBus().<JsonObject> consumer(COMDAYCQREPLICATIONCONTENTSTATICCONTENTBUILDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqReplicationContentStaticContentBuilder";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String hostParam = message.body().getString("host");
                String host = (hostParam == null) ? null : hostParam;
                String portParam = message.body().getString("port");
                Integer port = (portParam == null) ? null : Json.mapper.readValue(portParam, Integer.class);
                service.comDayCqReplicationContentStaticContentBuilder(post, apply, delete, action, $location, propertylist, host, port, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqReplicationContentStaticContentBuilder");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqReplicationContentStaticContentBuilder", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqReplicationImplAgentManagerImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQREPLICATIONIMPLAGENTMANAGERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqReplicationImplAgentManagerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String jobTopicsParam = message.body().getString("job.topics");
                String jobTopics = (jobTopicsParam == null) ? null : jobTopicsParam;
                String serviceUserTargetParam = message.body().getString("serviceUser.target");
                String serviceUserTarget = (serviceUserTargetParam == null) ? null : serviceUserTargetParam;
                String agentProviderTargetParam = message.body().getString("agentProvider.target");
                String agentProviderTarget = (agentProviderTargetParam == null) ? null : agentProviderTargetParam;
                service.comDayCqReplicationImplAgentManagerImpl(post, apply, delete, action, $location, propertylist, jobTopics, serviceUserTarget, agentProviderTarget, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqReplicationImplAgentManagerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqReplicationImplAgentManagerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqReplicationImplContentDurboBinaryLessContentBuilder
        vertx.eventBus().<JsonObject> consumer(COMDAYCQREPLICATIONIMPLCONTENTDURBOBINARYLESSCONTENTBUILDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqReplicationImplContentDurboBinaryLessContentBuilder";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String binaryThresholdParam = message.body().getString("binary.threshold");
                Integer binaryThreshold = (binaryThresholdParam == null) ? null : Json.mapper.readValue(binaryThresholdParam, Integer.class);
                service.comDayCqReplicationImplContentDurboBinaryLessContentBuilder(post, apply, delete, action, $location, propertylist, binaryThreshold, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqReplicationImplContentDurboBinaryLessContentBuilder");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqReplicationImplContentDurboBinaryLessContentBuilder", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqReplicationImplContentDurboDurboImportConfigurationProv
        vertx.eventBus().<JsonObject> consumer(COMDAYCQREPLICATIONIMPLCONTENTDURBODURBOIMPORTCONFIGURATIONPROV_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqReplicationImplContentDurboDurboImportConfigurationProv";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String preserveHierarchyNodesParam = message.body().getString("preserve.hierarchy.nodes");
                Boolean preserveHierarchyNodes = (preserveHierarchyNodesParam == null) ? null : Json.mapper.readValue(preserveHierarchyNodesParam, Boolean.class);
                String ignoreVersioningParam = message.body().getString("ignore.versioning");
                Boolean ignoreVersioning = (ignoreVersioningParam == null) ? null : Json.mapper.readValue(ignoreVersioningParam, Boolean.class);
                String importAclParam = message.body().getString("import.acl");
                Boolean importAcl = (importAclParam == null) ? null : Json.mapper.readValue(importAclParam, Boolean.class);
                String saveThresholdParam = message.body().getString("save.threshold");
                Integer saveThreshold = (saveThresholdParam == null) ? null : Json.mapper.readValue(saveThresholdParam, Integer.class);
                String preserveUserPathsParam = message.body().getString("preserve.user.paths");
                Boolean preserveUserPaths = (preserveUserPathsParam == null) ? null : Json.mapper.readValue(preserveUserPathsParam, Boolean.class);
                String preserveUuidParam = message.body().getString("preserve.uuid");
                Boolean preserveUuid = (preserveUuidParam == null) ? null : Json.mapper.readValue(preserveUuidParam, Boolean.class);
                JsonArray preserveUuidNodetypesParam = message.body().getJsonArray("preserve.uuid.nodetypes");
                List<String> preserveUuidNodetypes = (preserveUuidNodetypesParam == null) ? null : Json.mapper.readValue(preserveUuidNodetypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray preserveUuidSubtreesParam = message.body().getJsonArray("preserve.uuid.subtrees");
                List<String> preserveUuidSubtrees = (preserveUuidSubtreesParam == null) ? null : Json.mapper.readValue(preserveUuidSubtreesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String autoCommitParam = message.body().getString("auto.commit");
                Boolean autoCommit = (autoCommitParam == null) ? null : Json.mapper.readValue(autoCommitParam, Boolean.class);
                service.comDayCqReplicationImplContentDurboDurboImportConfigurationProv(post, apply, delete, action, $location, propertylist, preserveHierarchyNodes, ignoreVersioning, importAcl, saveThreshold, preserveUserPaths, preserveUuid, preserveUuidNodetypes, preserveUuidSubtrees, autoCommit, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqReplicationImplContentDurboDurboImportConfigurationProv");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqReplicationImplContentDurboDurboImportConfigurationProv", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqReplicationImplReplicationContentFactoryProviderImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQREPLICATIONIMPLREPLICATIONCONTENTFACTORYPROVIDERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqReplicationImplReplicationContentFactoryProviderImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String replicationContentUseFileStorageParam = message.body().getString("replication.content.useFileStorage");
                Boolean replicationContentUseFileStorage = (replicationContentUseFileStorageParam == null) ? null : Json.mapper.readValue(replicationContentUseFileStorageParam, Boolean.class);
                String replicationContentMaxCommitAttemptsParam = message.body().getString("replication.content.maxCommitAttempts");
                Integer replicationContentMaxCommitAttempts = (replicationContentMaxCommitAttemptsParam == null) ? null : Json.mapper.readValue(replicationContentMaxCommitAttemptsParam, Integer.class);
                service.comDayCqReplicationImplReplicationContentFactoryProviderImpl(post, apply, delete, action, $location, propertylist, replicationContentUseFileStorage, replicationContentMaxCommitAttempts, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqReplicationImplReplicationContentFactoryProviderImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqReplicationImplReplicationContentFactoryProviderImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqReplicationImplReplicationReceiverImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQREPLICATIONIMPLREPLICATIONRECEIVERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqReplicationImplReplicationReceiverImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String receiverTmpfileThresholdParam = message.body().getString("receiver.tmpfile.threshold");
                Integer receiverTmpfileThreshold = (receiverTmpfileThresholdParam == null) ? null : Json.mapper.readValue(receiverTmpfileThresholdParam, Integer.class);
                String receiverPackagesUseInstallParam = message.body().getString("receiver.packages.use.install");
                Boolean receiverPackagesUseInstall = (receiverPackagesUseInstallParam == null) ? null : Json.mapper.readValue(receiverPackagesUseInstallParam, Boolean.class);
                service.comDayCqReplicationImplReplicationReceiverImpl(post, apply, delete, action, $location, propertylist, receiverTmpfileThreshold, receiverPackagesUseInstall, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqReplicationImplReplicationReceiverImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqReplicationImplReplicationReceiverImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqReplicationImplReplicatorImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQREPLICATIONIMPLREPLICATORIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqReplicationImplReplicatorImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String distributeEventsParam = message.body().getString("distribute_events");
                Boolean distributeEvents = (distributeEventsParam == null) ? null : Json.mapper.readValue(distributeEventsParam, Boolean.class);
                service.comDayCqReplicationImplReplicatorImpl(post, apply, delete, action, $location, propertylist, distributeEvents, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqReplicationImplReplicatorImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqReplicationImplReplicatorImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqReplicationImplReverseReplicator
        vertx.eventBus().<JsonObject> consumer(COMDAYCQREPLICATIONIMPLREVERSEREPLICATOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqReplicationImplReverseReplicator";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String schedulerPeriodParam = message.body().getString("scheduler.period");
                Integer schedulerPeriod = (schedulerPeriodParam == null) ? null : Json.mapper.readValue(schedulerPeriodParam, Integer.class);
                service.comDayCqReplicationImplReverseReplicator(post, apply, delete, action, $location, propertylist, schedulerPeriod, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqReplicationImplReverseReplicator");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqReplicationImplReverseReplicator", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqReplicationImplTransportBinaryLessTransportHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQREPLICATIONIMPLTRANSPORTBINARYLESSTRANSPORTHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqReplicationImplTransportBinaryLessTransportHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray disabledCipherSuitesParam = message.body().getJsonArray("disabled.cipher.suites");
                List<String> disabledCipherSuites = (disabledCipherSuitesParam == null) ? null : Json.mapper.readValue(disabledCipherSuitesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray enabledCipherSuitesParam = message.body().getJsonArray("enabled.cipher.suites");
                List<String> enabledCipherSuites = (enabledCipherSuitesParam == null) ? null : Json.mapper.readValue(enabledCipherSuitesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqReplicationImplTransportBinaryLessTransportHandler(post, apply, delete, action, $location, propertylist, disabledCipherSuites, enabledCipherSuites, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqReplicationImplTransportBinaryLessTransportHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqReplicationImplTransportBinaryLessTransportHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqReplicationImplTransportHttp
        vertx.eventBus().<JsonObject> consumer(COMDAYCQREPLICATIONIMPLTRANSPORTHTTP_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqReplicationImplTransportHttp";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray disabledCipherSuitesParam = message.body().getJsonArray("disabled.cipher.suites");
                List<String> disabledCipherSuites = (disabledCipherSuitesParam == null) ? null : Json.mapper.readValue(disabledCipherSuitesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray enabledCipherSuitesParam = message.body().getJsonArray("enabled.cipher.suites");
                List<String> enabledCipherSuites = (enabledCipherSuitesParam == null) ? null : Json.mapper.readValue(enabledCipherSuitesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqReplicationImplTransportHttp(post, apply, delete, action, $location, propertylist, disabledCipherSuites, enabledCipherSuites, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqReplicationImplTransportHttp");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqReplicationImplTransportHttp", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqReportingImplCacheCacheImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQREPORTINGIMPLCACHECACHEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqReportingImplCacheCacheImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String repcacheEnableParam = message.body().getString("repcache.enable");
                Boolean repcacheEnable = (repcacheEnableParam == null) ? null : Json.mapper.readValue(repcacheEnableParam, Boolean.class);
                String repcacheTtlParam = message.body().getString("repcache.ttl");
                Integer repcacheTtl = (repcacheTtlParam == null) ? null : Json.mapper.readValue(repcacheTtlParam, Integer.class);
                String repcacheMaxParam = message.body().getString("repcache.max");
                Integer repcacheMax = (repcacheMaxParam == null) ? null : Json.mapper.readValue(repcacheMaxParam, Integer.class);
                service.comDayCqReportingImplCacheCacheImpl(post, apply, delete, action, $location, propertylist, repcacheEnable, repcacheTtl, repcacheMax, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqReportingImplCacheCacheImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqReportingImplCacheCacheImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqReportingImplConfigServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQREPORTINGIMPLCONFIGSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqReportingImplConfigServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String repconfTimezoneParam = message.body().getString("repconf.timezone");
                String repconfTimezone = (repconfTimezoneParam == null) ? null : repconfTimezoneParam;
                String repconfLocaleParam = message.body().getString("repconf.locale");
                String repconfLocale = (repconfLocaleParam == null) ? null : repconfLocaleParam;
                String repconfSnapshotsParam = message.body().getString("repconf.snapshots");
                String repconfSnapshots = (repconfSnapshotsParam == null) ? null : repconfSnapshotsParam;
                String repconfRepdirParam = message.body().getString("repconf.repdir");
                String repconfRepdir = (repconfRepdirParam == null) ? null : repconfRepdirParam;
                String repconfHourofdayParam = message.body().getString("repconf.hourofday");
                Integer repconfHourofday = (repconfHourofdayParam == null) ? null : Json.mapper.readValue(repconfHourofdayParam, Integer.class);
                String repconfMinofhourParam = message.body().getString("repconf.minofhour");
                Integer repconfMinofhour = (repconfMinofhourParam == null) ? null : Json.mapper.readValue(repconfMinofhourParam, Integer.class);
                String repconfMaxrowsParam = message.body().getString("repconf.maxrows");
                Integer repconfMaxrows = (repconfMaxrowsParam == null) ? null : Json.mapper.readValue(repconfMaxrowsParam, Integer.class);
                String repconfFakedataParam = message.body().getString("repconf.fakedata");
                Boolean repconfFakedata = (repconfFakedataParam == null) ? null : Json.mapper.readValue(repconfFakedataParam, Boolean.class);
                String repconfSnapshotuserParam = message.body().getString("repconf.snapshotuser");
                String repconfSnapshotuser = (repconfSnapshotuserParam == null) ? null : repconfSnapshotuserParam;
                String repconfEnforcesnapshotuserParam = message.body().getString("repconf.enforcesnapshotuser");
                Boolean repconfEnforcesnapshotuser = (repconfEnforcesnapshotuserParam == null) ? null : Json.mapper.readValue(repconfEnforcesnapshotuserParam, Boolean.class);
                service.comDayCqReportingImplConfigServiceImpl(post, apply, delete, action, $location, propertylist, repconfTimezone, repconfLocale, repconfSnapshots, repconfRepdir, repconfHourofday, repconfMinofhour, repconfMaxrows, repconfFakedata, repconfSnapshotuser, repconfEnforcesnapshotuser, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqReportingImplConfigServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqReportingImplConfigServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqReportingImplRLogAnalyzer
        vertx.eventBus().<JsonObject> consumer(COMDAYCQREPORTINGIMPLRLOGANALYZER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqReportingImplRLogAnalyzer";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String requestLogOutputParam = message.body().getString("request.log.output");
                String requestLogOutput = (requestLogOutputParam == null) ? null : requestLogOutputParam;
                service.comDayCqReportingImplRLogAnalyzer(post, apply, delete, action, $location, propertylist, requestLogOutput, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqReportingImplRLogAnalyzer");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqReportingImplRLogAnalyzer", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqRewriterLinkcheckerImplLinkCheckerImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQREWRITERLINKCHECKERIMPLLINKCHECKERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqRewriterLinkcheckerImplLinkCheckerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String schedulerPeriodParam = message.body().getString("scheduler.period");
                Integer schedulerPeriod = (schedulerPeriodParam == null) ? null : Json.mapper.readValue(schedulerPeriodParam, Integer.class);
                String schedulerConcurrentParam = message.body().getString("scheduler.concurrent");
                Boolean schedulerConcurrent = (schedulerConcurrentParam == null) ? null : Json.mapper.readValue(schedulerConcurrentParam, Boolean.class);
                String serviceBadLinkToleranceIntervalParam = message.body().getString("service.bad_link_tolerance_interval");
                Integer serviceBadLinkToleranceInterval = (serviceBadLinkToleranceIntervalParam == null) ? null : Json.mapper.readValue(serviceBadLinkToleranceIntervalParam, Integer.class);
                JsonArray serviceCheckOverridePatternsParam = message.body().getJsonArray("service.check_override_patterns");
                List<String> serviceCheckOverridePatterns = (serviceCheckOverridePatternsParam == null) ? null : Json.mapper.readValue(serviceCheckOverridePatternsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceCacheBrokenInternalLinksParam = message.body().getString("service.cache_broken_internal_links");
                Boolean serviceCacheBrokenInternalLinks = (serviceCacheBrokenInternalLinksParam == null) ? null : Json.mapper.readValue(serviceCacheBrokenInternalLinksParam, Boolean.class);
                JsonArray serviceSpecialLinkPrefixParam = message.body().getJsonArray("service.special_link_prefix");
                List<String> serviceSpecialLinkPrefix = (serviceSpecialLinkPrefixParam == null) ? null : Json.mapper.readValue(serviceSpecialLinkPrefixParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray serviceSpecialLinkPatternsParam = message.body().getJsonArray("service.special_link_patterns");
                List<String> serviceSpecialLinkPatterns = (serviceSpecialLinkPatternsParam == null) ? null : Json.mapper.readValue(serviceSpecialLinkPatternsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqRewriterLinkcheckerImplLinkCheckerImpl(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerConcurrent, serviceBadLinkToleranceInterval, serviceCheckOverridePatterns, serviceCacheBrokenInternalLinks, serviceSpecialLinkPrefix, serviceSpecialLinkPatterns, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqRewriterLinkcheckerImplLinkCheckerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqRewriterLinkcheckerImplLinkCheckerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqRewriterLinkcheckerImplLinkCheckerTask
        vertx.eventBus().<JsonObject> consumer(COMDAYCQREWRITERLINKCHECKERIMPLLINKCHECKERTASK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqRewriterLinkcheckerImplLinkCheckerTask";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String schedulerPeriodParam = message.body().getString("scheduler.period");
                Integer schedulerPeriod = (schedulerPeriodParam == null) ? null : Json.mapper.readValue(schedulerPeriodParam, Integer.class);
                String schedulerConcurrentParam = message.body().getString("scheduler.concurrent");
                Boolean schedulerConcurrent = (schedulerConcurrentParam == null) ? null : Json.mapper.readValue(schedulerConcurrentParam, Boolean.class);
                String goodLinkTestIntervalParam = message.body().getString("good_link_test_interval");
                Integer goodLinkTestInterval = (goodLinkTestIntervalParam == null) ? null : Json.mapper.readValue(goodLinkTestIntervalParam, Integer.class);
                String badLinkTestIntervalParam = message.body().getString("bad_link_test_interval");
                Integer badLinkTestInterval = (badLinkTestIntervalParam == null) ? null : Json.mapper.readValue(badLinkTestIntervalParam, Integer.class);
                String linkUnusedIntervalParam = message.body().getString("link_unused_interval");
                Integer linkUnusedInterval = (linkUnusedIntervalParam == null) ? null : Json.mapper.readValue(linkUnusedIntervalParam, Integer.class);
                String connectionTimeoutParam = message.body().getString("connection.timeout");
                Integer connectionTimeout = (connectionTimeoutParam == null) ? null : Json.mapper.readValue(connectionTimeoutParam, Integer.class);
                service.comDayCqRewriterLinkcheckerImplLinkCheckerTask(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerConcurrent, goodLinkTestInterval, badLinkTestInterval, linkUnusedInterval, connectionTimeout, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqRewriterLinkcheckerImplLinkCheckerTask");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqRewriterLinkcheckerImplLinkCheckerTask", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory
        vertx.eventBus().<JsonObject> consumer(COMDAYCQREWRITERLINKCHECKERIMPLLINKCHECKERTRANSFORMERFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String linkcheckertransformerDisableRewritingParam = message.body().getString("linkcheckertransformer.disableRewriting");
                Boolean linkcheckertransformerDisableRewriting = (linkcheckertransformerDisableRewritingParam == null) ? null : Json.mapper.readValue(linkcheckertransformerDisableRewritingParam, Boolean.class);
                String linkcheckertransformerDisableCheckingParam = message.body().getString("linkcheckertransformer.disableChecking");
                Boolean linkcheckertransformerDisableChecking = (linkcheckertransformerDisableCheckingParam == null) ? null : Json.mapper.readValue(linkcheckertransformerDisableCheckingParam, Boolean.class);
                String linkcheckertransformerMapCacheSizeParam = message.body().getString("linkcheckertransformer.mapCacheSize");
                Integer linkcheckertransformerMapCacheSize = (linkcheckertransformerMapCacheSizeParam == null) ? null : Json.mapper.readValue(linkcheckertransformerMapCacheSizeParam, Integer.class);
                String linkcheckertransformerStrictExtensionCheckParam = message.body().getString("linkcheckertransformer.strictExtensionCheck");
                Boolean linkcheckertransformerStrictExtensionCheck = (linkcheckertransformerStrictExtensionCheckParam == null) ? null : Json.mapper.readValue(linkcheckertransformerStrictExtensionCheckParam, Boolean.class);
                String linkcheckertransformerStripHtmltExtensionParam = message.body().getString("linkcheckertransformer.stripHtmltExtension");
                Boolean linkcheckertransformerStripHtmltExtension = (linkcheckertransformerStripHtmltExtensionParam == null) ? null : Json.mapper.readValue(linkcheckertransformerStripHtmltExtensionParam, Boolean.class);
                JsonArray linkcheckertransformerRewriteElementsParam = message.body().getJsonArray("linkcheckertransformer.rewriteElements");
                List<String> linkcheckertransformerRewriteElements = (linkcheckertransformerRewriteElementsParam == null) ? null : Json.mapper.readValue(linkcheckertransformerRewriteElementsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray linkcheckertransformerStripExtensionPathBlacklistParam = message.body().getJsonArray("linkcheckertransformer.stripExtensionPathBlacklist");
                List<String> linkcheckertransformerStripExtensionPathBlacklist = (linkcheckertransformerStripExtensionPathBlacklistParam == null) ? null : Json.mapper.readValue(linkcheckertransformerStripExtensionPathBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(post, apply, delete, action, $location, propertylist, linkcheckertransformerDisableRewriting, linkcheckertransformerDisableChecking, linkcheckertransformerMapCacheSize, linkcheckertransformerStrictExtensionCheck, linkcheckertransformerStripHtmltExtension, linkcheckertransformerRewriteElements, linkcheckertransformerStripExtensionPathBlacklist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQREWRITERLINKCHECKERIMPLLINKINFOSTORAGEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceMaxLinksPerHostParam = message.body().getString("service.max_links_per_host");
                Integer serviceMaxLinksPerHost = (serviceMaxLinksPerHostParam == null) ? null : Json.mapper.readValue(serviceMaxLinksPerHostParam, Integer.class);
                String serviceSaveExternalLinkReferencesParam = message.body().getString("service.save_external_link_references");
                Boolean serviceSaveExternalLinkReferences = (serviceSaveExternalLinkReferencesParam == null) ? null : Json.mapper.readValue(serviceSaveExternalLinkReferencesParam, Boolean.class);
                service.comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(post, apply, delete, action, $location, propertylist, serviceMaxLinksPerHost, serviceSaveExternalLinkReferences, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqRewriterProcessorImplHtmlParserFactory
        vertx.eventBus().<JsonObject> consumer(COMDAYCQREWRITERPROCESSORIMPLHTMLPARSERFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqRewriterProcessorImplHtmlParserFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray htmlparserProcessTagsParam = message.body().getJsonArray("htmlparser.processTags");
                List<String> htmlparserProcessTags = (htmlparserProcessTagsParam == null) ? null : Json.mapper.readValue(htmlparserProcessTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String htmlparserPreserveCamelCaseParam = message.body().getString("htmlparser.preserveCamelCase");
                Boolean htmlparserPreserveCamelCase = (htmlparserPreserveCamelCaseParam == null) ? null : Json.mapper.readValue(htmlparserPreserveCamelCaseParam, Boolean.class);
                service.comDayCqRewriterProcessorImplHtmlParserFactory(post, apply, delete, action, $location, propertylist, htmlparserProcessTags, htmlparserPreserveCamelCase, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqRewriterProcessorImplHtmlParserFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqRewriterProcessorImplHtmlParserFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqSearchImplBuilderQueryBuilderImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQSEARCHIMPLBUILDERQUERYBUILDERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqSearchImplBuilderQueryBuilderImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray excerptPropertiesParam = message.body().getJsonArray("excerpt.properties");
                List<String> excerptProperties = (excerptPropertiesParam == null) ? null : Json.mapper.readValue(excerptPropertiesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cacheMaxEntriesParam = message.body().getString("cache.max.entries");
                Integer cacheMaxEntries = (cacheMaxEntriesParam == null) ? null : Json.mapper.readValue(cacheMaxEntriesParam, Integer.class);
                String cacheEntryLifetimeParam = message.body().getString("cache.entry.lifetime");
                Integer cacheEntryLifetime = (cacheEntryLifetimeParam == null) ? null : Json.mapper.readValue(cacheEntryLifetimeParam, Integer.class);
                String xpathUnionParam = message.body().getString("xpath.union");
                Boolean xpathUnion = (xpathUnionParam == null) ? null : Json.mapper.readValue(xpathUnionParam, Boolean.class);
                service.comDayCqSearchImplBuilderQueryBuilderImpl(post, apply, delete, action, $location, propertylist, excerptProperties, cacheMaxEntries, cacheEntryLifetime, xpathUnion, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqSearchImplBuilderQueryBuilderImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqSearchImplBuilderQueryBuilderImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqSearchSuggestImplSuggestionIndexManagerImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQSEARCHSUGGESTIMPLSUGGESTIONINDEXMANAGERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqSearchSuggestImplSuggestionIndexManagerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pathBuilderTargetParam = message.body().getString("pathBuilder.target");
                String pathBuilderTarget = (pathBuilderTargetParam == null) ? null : pathBuilderTargetParam;
                String suggestBasepathParam = message.body().getString("suggest.basepath");
                String suggestBasepath = (suggestBasepathParam == null) ? null : suggestBasepathParam;
                service.comDayCqSearchSuggestImplSuggestionIndexManagerImpl(post, apply, delete, action, $location, propertylist, pathBuilderTarget, suggestBasepath, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqSearchSuggestImplSuggestionIndexManagerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqSearchSuggestImplSuggestionIndexManagerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQSEARCHPROMOTEIMPLPUBLISHSEARCHPROMOTECONFIGHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqSearchpromoteConfighandlerEnabledParam = message.body().getString("cq.searchpromote.confighandler.enabled");
                Boolean cqSearchpromoteConfighandlerEnabled = (cqSearchpromoteConfighandlerEnabledParam == null) ? null : Json.mapper.readValue(cqSearchpromoteConfighandlerEnabledParam, Boolean.class);
                service.comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(post, apply, delete, action, $location, propertylist, cqSearchpromoteConfighandlerEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqSearchpromoteImplSearchPromoteServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQSEARCHPROMOTEIMPLSEARCHPROMOTESERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqSearchpromoteImplSearchPromoteServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqSearchpromoteConfigurationServerUriParam = message.body().getString("cq.searchpromote.configuration.server.uri");
                String cqSearchpromoteConfigurationServerUri = (cqSearchpromoteConfigurationServerUriParam == null) ? null : cqSearchpromoteConfigurationServerUriParam;
                String cqSearchpromoteConfigurationEnvironmentParam = message.body().getString("cq.searchpromote.configuration.environment");
                String cqSearchpromoteConfigurationEnvironment = (cqSearchpromoteConfigurationEnvironmentParam == null) ? null : cqSearchpromoteConfigurationEnvironmentParam;
                String connectionTimeoutParam = message.body().getString("connection.timeout");
                Integer connectionTimeout = (connectionTimeoutParam == null) ? null : Json.mapper.readValue(connectionTimeoutParam, Integer.class);
                String socketTimeoutParam = message.body().getString("socket.timeout");
                Integer socketTimeout = (socketTimeoutParam == null) ? null : Json.mapper.readValue(socketTimeoutParam, Integer.class);
                service.comDayCqSearchpromoteImplSearchPromoteServiceImpl(post, apply, delete, action, $location, propertylist, cqSearchpromoteConfigurationServerUri, cqSearchpromoteConfigurationEnvironment, connectionTimeout, socketTimeout, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqSearchpromoteImplSearchPromoteServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqSearchpromoteImplSearchPromoteServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqSecurityACLSetup
        vertx.eventBus().<JsonObject> consumer(COMDAYCQSECURITYACLSETUP_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqSecurityACLSetup";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqAclsetupRulesParam = message.body().getJsonArray("cq.aclsetup.rules");
                List<String> cqAclsetupRules = (cqAclsetupRulesParam == null) ? null : Json.mapper.readValue(cqAclsetupRulesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqSecurityACLSetup(post, apply, delete, action, $location, propertylist, cqAclsetupRules, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqSecurityACLSetup");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqSecurityACLSetup", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqStatisticsImplStatisticsServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQSTATISTICSIMPLSTATISTICSSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqStatisticsImplStatisticsServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String schedulerPeriodParam = message.body().getString("scheduler.period");
                Integer schedulerPeriod = (schedulerPeriodParam == null) ? null : Json.mapper.readValue(schedulerPeriodParam, Integer.class);
                String schedulerConcurrentParam = message.body().getString("scheduler.concurrent");
                Boolean schedulerConcurrent = (schedulerConcurrentParam == null) ? null : Json.mapper.readValue(schedulerConcurrentParam, Boolean.class);
                String pathParam = message.body().getString("path");
                String path = (pathParam == null) ? null : pathParam;
                String workspaceParam = message.body().getString("workspace");
                String workspace = (workspaceParam == null) ? null : workspaceParam;
                String keywordsPathParam = message.body().getString("keywordsPath");
                String keywordsPath = (keywordsPathParam == null) ? null : keywordsPathParam;
                String asyncEntriesParam = message.body().getString("asyncEntries");
                Boolean asyncEntries = (asyncEntriesParam == null) ? null : Json.mapper.readValue(asyncEntriesParam, Boolean.class);
                service.comDayCqStatisticsImplStatisticsServiceImpl(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerConcurrent, path, workspace, keywordsPath, asyncEntries, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqStatisticsImplStatisticsServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqStatisticsImplStatisticsServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqTaggingImplJcrTagManagerFactoryImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQTAGGINGIMPLJCRTAGMANAGERFACTORYIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqTaggingImplJcrTagManagerFactoryImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String validationEnabledParam = message.body().getString("validation.enabled");
                Boolean validationEnabled = (validationEnabledParam == null) ? null : Json.mapper.readValue(validationEnabledParam, Boolean.class);
                service.comDayCqTaggingImplJcrTagManagerFactoryImpl(post, apply, delete, action, $location, propertylist, validationEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqTaggingImplJcrTagManagerFactoryImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqTaggingImplJcrTagManagerFactoryImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqTaggingImplSearchTagPredicateEvaluator
        vertx.eventBus().<JsonObject> consumer(COMDAYCQTAGGINGIMPLSEARCHTAGPREDICATEEVALUATOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqTaggingImplSearchTagPredicateEvaluator";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String ignorePathParam = message.body().getString("ignore_path");
                Boolean ignorePath = (ignorePathParam == null) ? null : Json.mapper.readValue(ignorePathParam, Boolean.class);
                service.comDayCqTaggingImplSearchTagPredicateEvaluator(post, apply, delete, action, $location, propertylist, ignorePath, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqTaggingImplSearchTagPredicateEvaluator");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqTaggingImplSearchTagPredicateEvaluator", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqTaggingImplTagGarbageCollector
        vertx.eventBus().<JsonObject> consumer(COMDAYCQTAGGINGIMPLTAGGARBAGECOLLECTOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqTaggingImplTagGarbageCollector";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String schedulerExpressionParam = message.body().getString("scheduler.expression");
                String schedulerExpression = (schedulerExpressionParam == null) ? null : schedulerExpressionParam;
                service.comDayCqTaggingImplTagGarbageCollector(post, apply, delete, action, $location, propertylist, schedulerExpression, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqTaggingImplTagGarbageCollector");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqTaggingImplTagGarbageCollector", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmContentsyncImplHandlerPagesUpdateHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCONTENTSYNCIMPLHANDLERPAGESUPDATEHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmContentsyncImplHandlerPagesUpdateHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqPagesupdatehandlerImageresourcetypesParam = message.body().getJsonArray("cq.pagesupdatehandler.imageresourcetypes");
                List<String> cqPagesupdatehandlerImageresourcetypes = (cqPagesupdatehandlerImageresourcetypesParam == null) ? null : Json.mapper.readValue(cqPagesupdatehandlerImageresourcetypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(post, apply, delete, action, $location, propertylist, cqPagesupdatehandlerImageresourcetypes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmContentsyncImplHandlerPagesUpdateHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmContentsyncImplHandlerPagesUpdateHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCONTENTSYNCIMPLREWRITERPATHREWRITERTRANSFORMERFACTOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqContentsyncPathrewritertransformerMappingLinksParam = message.body().getJsonArray("cq.contentsync.pathrewritertransformer.mapping.links");
                List<String> cqContentsyncPathrewritertransformerMappingLinks = (cqContentsyncPathrewritertransformerMappingLinksParam == null) ? null : Json.mapper.readValue(cqContentsyncPathrewritertransformerMappingLinksParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqContentsyncPathrewritertransformerMappingClientlibsParam = message.body().getJsonArray("cq.contentsync.pathrewritertransformer.mapping.clientlibs");
                List<String> cqContentsyncPathrewritertransformerMappingClientlibs = (cqContentsyncPathrewritertransformerMappingClientlibsParam == null) ? null : Json.mapper.readValue(cqContentsyncPathrewritertransformerMappingClientlibsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqContentsyncPathrewritertransformerMappingImagesParam = message.body().getJsonArray("cq.contentsync.pathrewritertransformer.mapping.images");
                List<String> cqContentsyncPathrewritertransformerMappingImages = (cqContentsyncPathrewritertransformerMappingImagesParam == null) ? null : Json.mapper.readValue(cqContentsyncPathrewritertransformerMappingImagesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqContentsyncPathrewritertransformerAttributePatternParam = message.body().getString("cq.contentsync.pathrewritertransformer.attribute.pattern");
                String cqContentsyncPathrewritertransformerAttributePattern = (cqContentsyncPathrewritertransformerAttributePatternParam == null) ? null : cqContentsyncPathrewritertransformerAttributePatternParam;
                String cqContentsyncPathrewritertransformerClientlibraryPatternParam = message.body().getString("cq.contentsync.pathrewritertransformer.clientlibrary.pattern");
                String cqContentsyncPathrewritertransformerClientlibraryPattern = (cqContentsyncPathrewritertransformerClientlibraryPatternParam == null) ? null : cqContentsyncPathrewritertransformerClientlibraryPatternParam;
                String cqContentsyncPathrewritertransformerClientlibraryReplaceParam = message.body().getString("cq.contentsync.pathrewritertransformer.clientlibrary.replace");
                String cqContentsyncPathrewritertransformerClientlibraryReplace = (cqContentsyncPathrewritertransformerClientlibraryReplaceParam == null) ? null : cqContentsyncPathrewritertransformerClientlibraryReplaceParam;
                service.comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(post, apply, delete, action, $location, propertylist, cqContentsyncPathrewritertransformerMappingLinks, cqContentsyncPathrewritertransformerMappingClientlibs, cqContentsyncPathrewritertransformerMappingImages, cqContentsyncPathrewritertransformerAttributePattern, cqContentsyncPathrewritertransformerClientlibraryPattern, cqContentsyncPathrewritertransformerClientlibraryReplace, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplAuthoringUIModeServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLAUTHORINGUIMODESERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplAuthoringUIModeServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String authoringUIModeServiceDefaultParam = message.body().getString("authoringUIModeService.default");
                String authoringUIModeServiceDefault = (authoringUIModeServiceDefaultParam == null) ? null : authoringUIModeServiceDefaultParam;
                service.comDayCqWcmCoreImplAuthoringUIModeServiceImpl(post, apply, delete, action, $location, propertylist, authoringUIModeServiceDefault, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplAuthoringUIModeServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplAuthoringUIModeServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplCommandsWCMCommandServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLCOMMANDSWCMCOMMANDSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplCommandsWCMCommandServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray wcmcommandservletDeleteWhitelistParam = message.body().getJsonArray("wcmcommandservlet.delete_whitelist");
                List<String> wcmcommandservletDeleteWhitelist = (wcmcommandservletDeleteWhitelistParam == null) ? null : Json.mapper.readValue(wcmcommandservletDeleteWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmCoreImplCommandsWCMCommandServlet(post, apply, delete, action, $location, propertylist, wcmcommandservletDeleteWhitelist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplCommandsWCMCommandServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplCommandsWCMCommandServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLDEVICEDETECTIONDEVICEIDENTIFICATIONMODEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String dimDefaultModeParam = message.body().getString("dim.default.mode");
                String dimDefaultMode = (dimDefaultModeParam == null) ? null : dimDefaultModeParam;
                String dimAppcacheEnabledParam = message.body().getString("dim.appcache.enabled");
                Boolean dimAppcacheEnabled = (dimAppcacheEnabledParam == null) ? null : Json.mapper.readValue(dimAppcacheEnabledParam, Boolean.class);
                service.comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(post, apply, delete, action, $location, propertylist, dimDefaultMode, dimAppcacheEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplEventPageEventAuditListener
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLEVENTPAGEEVENTAUDITLISTENER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplEventPageEventAuditListener";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String configuredParam = message.body().getString("configured");
                String configured = (configuredParam == null) ? null : configuredParam;
                service.comDayCqWcmCoreImplEventPageEventAuditListener(post, apply, delete, action, $location, propertylist, configured, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplEventPageEventAuditListener");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplEventPageEventAuditListener", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplEventPagePostProcessor
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLEVENTPAGEPOSTPROCESSOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplEventPagePostProcessor";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray pathsParam = message.body().getJsonArray("paths");
                List<String> paths = (pathsParam == null) ? null : Json.mapper.readValue(pathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmCoreImplEventPagePostProcessor(post, apply, delete, action, $location, propertylist, paths, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplEventPagePostProcessor");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplEventPagePostProcessor", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplEventRepositoryChangeEventListener
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLEVENTREPOSITORYCHANGEEVENTLISTENER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplEventRepositoryChangeEventListener";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray pathsParam = message.body().getJsonArray("paths");
                List<String> paths = (pathsParam == null) ? null : Json.mapper.readValue(pathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray excludedPathsParam = message.body().getJsonArray("excludedPaths");
                List<String> excludedPaths = (excludedPathsParam == null) ? null : Json.mapper.readValue(excludedPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmCoreImplEventRepositoryChangeEventListener(post, apply, delete, action, $location, propertylist, paths, excludedPaths, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplEventRepositoryChangeEventListener");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplEventRepositoryChangeEventListener", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplEventTemplatePostProcessor
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLEVENTTEMPLATEPOSTPROCESSOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplEventTemplatePostProcessor";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pathsParam = message.body().getString("paths");
                String paths = (pathsParam == null) ? null : pathsParam;
                service.comDayCqWcmCoreImplEventTemplatePostProcessor(post, apply, delete, action, $location, propertylist, paths, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplEventTemplatePostProcessor");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplEventTemplatePostProcessor", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplLanguageManagerImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLLANGUAGEMANAGERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplLanguageManagerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String langmgrListPathParam = message.body().getString("langmgr.list.path");
                String langmgrListPath = (langmgrListPathParam == null) ? null : langmgrListPathParam;
                JsonArray langmgrCountryDefaultParam = message.body().getJsonArray("langmgr.country.default");
                List<String> langmgrCountryDefault = (langmgrCountryDefaultParam == null) ? null : Json.mapper.readValue(langmgrCountryDefaultParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmCoreImplLanguageManagerImpl(post, apply, delete, action, $location, propertylist, langmgrListPath, langmgrCountryDefault, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplLanguageManagerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplLanguageManagerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLLINKCHECKERCONFIGURATIONFACTORYIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String linkExpiredPrefixParam = message.body().getString("link.expired.prefix");
                String linkExpiredPrefix = (linkExpiredPrefixParam == null) ? null : linkExpiredPrefixParam;
                String linkExpiredRemoveParam = message.body().getString("link.expired.remove");
                Boolean linkExpiredRemove = (linkExpiredRemoveParam == null) ? null : Json.mapper.readValue(linkExpiredRemoveParam, Boolean.class);
                String linkExpiredSuffixParam = message.body().getString("link.expired.suffix");
                String linkExpiredSuffix = (linkExpiredSuffixParam == null) ? null : linkExpiredSuffixParam;
                String linkInvalidPrefixParam = message.body().getString("link.invalid.prefix");
                String linkInvalidPrefix = (linkInvalidPrefixParam == null) ? null : linkInvalidPrefixParam;
                String linkInvalidRemoveParam = message.body().getString("link.invalid.remove");
                Boolean linkInvalidRemove = (linkInvalidRemoveParam == null) ? null : Json.mapper.readValue(linkInvalidRemoveParam, Boolean.class);
                String linkInvalidSuffixParam = message.body().getString("link.invalid.suffix");
                String linkInvalidSuffix = (linkInvalidSuffixParam == null) ? null : linkInvalidSuffixParam;
                String linkPredatedPrefixParam = message.body().getString("link.predated.prefix");
                String linkPredatedPrefix = (linkPredatedPrefixParam == null) ? null : linkPredatedPrefixParam;
                String linkPredatedRemoveParam = message.body().getString("link.predated.remove");
                Boolean linkPredatedRemove = (linkPredatedRemoveParam == null) ? null : Json.mapper.readValue(linkPredatedRemoveParam, Boolean.class);
                String linkPredatedSuffixParam = message.body().getString("link.predated.suffix");
                String linkPredatedSuffix = (linkPredatedSuffixParam == null) ? null : linkPredatedSuffixParam;
                JsonArray linkWcmmodesParam = message.body().getJsonArray("link.wcmmodes");
                List<String> linkWcmmodes = (linkWcmmodesParam == null) ? null : Json.mapper.readValue(linkWcmmodesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(post, apply, delete, action, $location, propertylist, linkExpiredPrefix, linkExpiredRemove, linkExpiredSuffix, linkInvalidPrefix, linkInvalidRemove, linkInvalidSuffix, linkPredatedPrefix, linkPredatedRemove, linkPredatedSuffix, linkWcmmodes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplPagePageInfoAggregatorImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLPAGEPAGEINFOAGGREGATORIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplPagePageInfoAggregatorImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pageInfoProviderPropertyRegexDefaultParam = message.body().getString("page.info.provider.property.regex.default");
                String pageInfoProviderPropertyRegexDefault = (pageInfoProviderPropertyRegexDefaultParam == null) ? null : pageInfoProviderPropertyRegexDefaultParam;
                String pageInfoProviderPropertyNameParam = message.body().getString("page.info.provider.property.name");
                String pageInfoProviderPropertyName = (pageInfoProviderPropertyNameParam == null) ? null : pageInfoProviderPropertyNameParam;
                service.comDayCqWcmCoreImplPagePageInfoAggregatorImpl(post, apply, delete, action, $location, propertylist, pageInfoProviderPropertyRegexDefault, pageInfoProviderPropertyName, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplPagePageInfoAggregatorImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplPagePageInfoAggregatorImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplPagePageManagerFactoryImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLPAGEPAGEMANAGERFACTORYIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplPagePageManagerFactoryImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String illegalCharMappingParam = message.body().getString("illegalCharMapping");
                String illegalCharMapping = (illegalCharMappingParam == null) ? null : illegalCharMappingParam;
                String pageSubTreeActivationCheckParam = message.body().getString("pageSubTreeActivationCheck");
                Boolean pageSubTreeActivationCheck = (pageSubTreeActivationCheckParam == null) ? null : Json.mapper.readValue(pageSubTreeActivationCheckParam, Boolean.class);
                service.comDayCqWcmCoreImplPagePageManagerFactoryImpl(post, apply, delete, action, $location, propertylist, illegalCharMapping, pageSubTreeActivationCheck, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplPagePageManagerFactoryImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplPagePageManagerFactoryImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplReferencesContentContentReferenceConfig
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLREFERENCESCONTENTCONTENTREFERENCECONFIG_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplReferencesContentContentReferenceConfig";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray contentReferenceConfigResourceTypesParam = message.body().getJsonArray("contentReferenceConfig.resourceTypes");
                List<String> contentReferenceConfigResourceTypes = (contentReferenceConfigResourceTypesParam == null) ? null : Json.mapper.readValue(contentReferenceConfigResourceTypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmCoreImplReferencesContentContentReferenceConfig(post, apply, delete, action, $location, propertylist, contentReferenceConfigResourceTypes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplReferencesContentContentReferenceConfig");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplReferencesContentContentReferenceConfig", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplServletsContentfinderAssetViewHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLSERVLETSCONTENTFINDERASSETVIEWHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplServletsContentfinderAssetViewHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String damShowexpiredParam = message.body().getString("dam.showexpired");
                Boolean damShowexpired = (damShowexpiredParam == null) ? null : Json.mapper.readValue(damShowexpiredParam, Boolean.class);
                String damShowhiddenParam = message.body().getString("dam.showhidden");
                Boolean damShowhidden = (damShowhiddenParam == null) ? null : Json.mapper.readValue(damShowhiddenParam, Boolean.class);
                String tagTitleSearchParam = message.body().getString("tagTitleSearch");
                Boolean tagTitleSearch = (tagTitleSearchParam == null) ? null : Json.mapper.readValue(tagTitleSearchParam, Boolean.class);
                String guessTotalParam = message.body().getString("guessTotal");
                String guessTotal = (guessTotalParam == null) ? null : guessTotalParam;
                String damExpiryPropertyParam = message.body().getString("dam.expiryProperty");
                String damExpiryProperty = (damExpiryPropertyParam == null) ? null : damExpiryPropertyParam;
                service.comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(post, apply, delete, action, $location, propertylist, damShowexpired, damShowhidden, tagTitleSearch, guessTotal, damExpiryProperty, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplServletsContentfinderAssetViewHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplServletsContentfinderAssetViewHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLSERVLETSCONTENTFINDERCONNECTORCONNECTORVIE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray itemResourceTypesParam = message.body().getJsonArray("item.resource.types");
                List<String> itemResourceTypes = (itemResourceTypesParam == null) ? null : Json.mapper.readValue(itemResourceTypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(post, apply, delete, action, $location, propertylist, itemResourceTypes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplServletsContentfinderPageViewHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLSERVLETSCONTENTFINDERPAGEVIEWHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplServletsContentfinderPageViewHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String guessTotalParam = message.body().getString("guessTotal");
                String guessTotal = (guessTotalParam == null) ? null : guessTotalParam;
                String tagTitleSearchParam = message.body().getString("tagTitleSearch");
                Boolean tagTitleSearch = (tagTitleSearchParam == null) ? null : Json.mapper.readValue(tagTitleSearchParam, Boolean.class);
                service.comDayCqWcmCoreImplServletsContentfinderPageViewHandler(post, apply, delete, action, $location, propertylist, guessTotal, tagTitleSearch, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplServletsContentfinderPageViewHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplServletsContentfinderPageViewHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplServletsFindReplaceServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLSERVLETSFINDREPLACESERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplServletsFindReplaceServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray scopeParam = message.body().getJsonArray("scope");
                List<String> scope = (scopeParam == null) ? null : Json.mapper.readValue(scopeParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmCoreImplServletsFindReplaceServlet(post, apply, delete, action, $location, propertylist, scope, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplServletsFindReplaceServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplServletsFindReplaceServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplServletsReferenceSearchServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLSERVLETSREFERENCESEARCHSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplServletsReferenceSearchServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String referencesearchservletMaxReferencesPerPageParam = message.body().getString("referencesearchservlet.maxReferencesPerPage");
                Integer referencesearchservletMaxReferencesPerPage = (referencesearchservletMaxReferencesPerPageParam == null) ? null : Json.mapper.readValue(referencesearchservletMaxReferencesPerPageParam, Integer.class);
                String referencesearchservletMaxPagesParam = message.body().getString("referencesearchservlet.maxPages");
                Integer referencesearchservletMaxPages = (referencesearchservletMaxPagesParam == null) ? null : Json.mapper.readValue(referencesearchservletMaxPagesParam, Integer.class);
                service.comDayCqWcmCoreImplServletsReferenceSearchServlet(post, apply, delete, action, $location, propertylist, referencesearchservletMaxReferencesPerPage, referencesearchservletMaxPages, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplServletsReferenceSearchServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplServletsReferenceSearchServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplServletsThumbnailServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLSERVLETSTHUMBNAILSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplServletsThumbnailServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String workspaceParam = message.body().getString("workspace");
                String workspace = (workspaceParam == null) ? null : workspaceParam;
                JsonArray dimensionsParam = message.body().getJsonArray("dimensions");
                List<String> dimensions = (dimensionsParam == null) ? null : Json.mapper.readValue(dimensionsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmCoreImplServletsThumbnailServlet(post, apply, delete, action, $location, propertylist, workspace, dimensions, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplServletsThumbnailServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplServletsThumbnailServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplUtilsDefaultPageNameValidator
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLUTILSDEFAULTPAGENAMEVALIDATOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplUtilsDefaultPageNameValidator";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nonValidCharsParam = message.body().getString("nonValidChars");
                String nonValidChars = (nonValidCharsParam == null) ? null : nonValidCharsParam;
                service.comDayCqWcmCoreImplUtilsDefaultPageNameValidator(post, apply, delete, action, $location, propertylist, nonValidChars, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplUtilsDefaultPageNameValidator");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplUtilsDefaultPageNameValidator", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplVariantsPageVariantsProviderImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLVARIANTSPAGEVARIANTSPROVIDERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplVariantsPageVariantsProviderImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String defaultExternalizerDomainParam = message.body().getString("default.externalizer.domain");
                String defaultExternalizerDomain = (defaultExternalizerDomainParam == null) ? null : defaultExternalizerDomainParam;
                service.comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(post, apply, delete, action, $location, propertylist, defaultExternalizerDomain, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplVariantsPageVariantsProviderImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplVariantsPageVariantsProviderImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplVersionManagerImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLVERSIONMANAGERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplVersionManagerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String versionmanagerCreateVersionOnActivationParam = message.body().getString("versionmanager.createVersionOnActivation");
                Boolean versionmanagerCreateVersionOnActivation = (versionmanagerCreateVersionOnActivationParam == null) ? null : Json.mapper.readValue(versionmanagerCreateVersionOnActivationParam, Boolean.class);
                String versionmanagerPurgingEnabledParam = message.body().getString("versionmanager.purgingEnabled");
                Boolean versionmanagerPurgingEnabled = (versionmanagerPurgingEnabledParam == null) ? null : Json.mapper.readValue(versionmanagerPurgingEnabledParam, Boolean.class);
                JsonArray versionmanagerPurgePathsParam = message.body().getJsonArray("versionmanager.purgePaths");
                List<String> versionmanagerPurgePaths = (versionmanagerPurgePathsParam == null) ? null : Json.mapper.readValue(versionmanagerPurgePathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray versionmanagerIvPathsParam = message.body().getJsonArray("versionmanager.ivPaths");
                List<String> versionmanagerIvPaths = (versionmanagerIvPathsParam == null) ? null : Json.mapper.readValue(versionmanagerIvPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String versionmanagerMaxAgeDaysParam = message.body().getString("versionmanager.maxAgeDays");
                Integer versionmanagerMaxAgeDays = (versionmanagerMaxAgeDaysParam == null) ? null : Json.mapper.readValue(versionmanagerMaxAgeDaysParam, Integer.class);
                String versionmanagerMaxNumberVersionsParam = message.body().getString("versionmanager.maxNumberVersions");
                Integer versionmanagerMaxNumberVersions = (versionmanagerMaxNumberVersionsParam == null) ? null : Json.mapper.readValue(versionmanagerMaxNumberVersionsParam, Integer.class);
                String versionmanagerMinNumberVersionsParam = message.body().getString("versionmanager.minNumberVersions");
                Integer versionmanagerMinNumberVersions = (versionmanagerMinNumberVersionsParam == null) ? null : Json.mapper.readValue(versionmanagerMinNumberVersionsParam, Integer.class);
                service.comDayCqWcmCoreImplVersionManagerImpl(post, apply, delete, action, $location, propertylist, versionmanagerCreateVersionOnActivation, versionmanagerPurgingEnabled, versionmanagerPurgePaths, versionmanagerIvPaths, versionmanagerMaxAgeDays, versionmanagerMaxNumberVersions, versionmanagerMinNumberVersions, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplVersionManagerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplVersionManagerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplVersionPurgeTask
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLVERSIONPURGETASK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplVersionPurgeTask";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray versionpurgePathsParam = message.body().getJsonArray("versionpurge.paths");
                List<String> versionpurgePaths = (versionpurgePathsParam == null) ? null : Json.mapper.readValue(versionpurgePathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String versionpurgeRecursiveParam = message.body().getString("versionpurge.recursive");
                Boolean versionpurgeRecursive = (versionpurgeRecursiveParam == null) ? null : Json.mapper.readValue(versionpurgeRecursiveParam, Boolean.class);
                String versionpurgeMaxVersionsParam = message.body().getString("versionpurge.maxVersions");
                Integer versionpurgeMaxVersions = (versionpurgeMaxVersionsParam == null) ? null : Json.mapper.readValue(versionpurgeMaxVersionsParam, Integer.class);
                String versionpurgeMinVersionsParam = message.body().getString("versionpurge.minVersions");
                Integer versionpurgeMinVersions = (versionpurgeMinVersionsParam == null) ? null : Json.mapper.readValue(versionpurgeMinVersionsParam, Integer.class);
                String versionpurgeMaxAgeDaysParam = message.body().getString("versionpurge.maxAgeDays");
                Integer versionpurgeMaxAgeDays = (versionpurgeMaxAgeDaysParam == null) ? null : Json.mapper.readValue(versionpurgeMaxAgeDaysParam, Integer.class);
                service.comDayCqWcmCoreImplVersionPurgeTask(post, apply, delete, action, $location, propertylist, versionpurgePaths, versionpurgeRecursive, versionpurgeMaxVersions, versionpurgeMinVersions, versionpurgeMaxAgeDays, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplVersionPurgeTask");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplVersionPurgeTask", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplWCMDebugFilter
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLWCMDEBUGFILTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplWCMDebugFilter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String wcmdbgfilterEnabledParam = message.body().getString("wcmdbgfilter.enabled");
                Boolean wcmdbgfilterEnabled = (wcmdbgfilterEnabledParam == null) ? null : Json.mapper.readValue(wcmdbgfilterEnabledParam, Boolean.class);
                String wcmdbgfilterJspDebugParam = message.body().getString("wcmdbgfilter.jspDebug");
                Boolean wcmdbgfilterJspDebug = (wcmdbgfilterJspDebugParam == null) ? null : Json.mapper.readValue(wcmdbgfilterJspDebugParam, Boolean.class);
                service.comDayCqWcmCoreImplWCMDebugFilter(post, apply, delete, action, $location, propertylist, wcmdbgfilterEnabled, wcmdbgfilterJspDebug, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplWCMDebugFilter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplWCMDebugFilter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplWCMDeveloperModeFilter
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLWCMDEVELOPERMODEFILTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplWCMDeveloperModeFilter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String wcmdevmodefilterEnabledParam = message.body().getString("wcmdevmodefilter.enabled");
                Boolean wcmdevmodefilterEnabled = (wcmdevmodefilterEnabledParam == null) ? null : Json.mapper.readValue(wcmdevmodefilterEnabledParam, Boolean.class);
                service.comDayCqWcmCoreImplWCMDeveloperModeFilter(post, apply, delete, action, $location, propertylist, wcmdevmodefilterEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplWCMDeveloperModeFilter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplWCMDeveloperModeFilter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreImplWarpTimeWarpFilter
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREIMPLWARPTIMEWARPFILTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreImplWarpTimeWarpFilter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String filterOrderParam = message.body().getString("filter.order");
                String filterOrder = (filterOrderParam == null) ? null : filterOrderParam;
                String filterScopeParam = message.body().getString("filter.scope");
                String filterScope = (filterScopeParam == null) ? null : filterScopeParam;
                service.comDayCqWcmCoreImplWarpTimeWarpFilter(post, apply, delete, action, $location, propertylist, filterOrder, filterScope, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreImplWarpTimeWarpFilter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreImplWarpTimeWarpFilter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreMvtMVTStatisticsImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREMVTMVTSTATISTICSIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreMvtMVTStatisticsImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String mvtstatisticsTrackingurlParam = message.body().getString("mvtstatistics.trackingurl");
                String mvtstatisticsTrackingurl = (mvtstatisticsTrackingurlParam == null) ? null : mvtstatisticsTrackingurlParam;
                service.comDayCqWcmCoreMvtMVTStatisticsImpl(post, apply, delete, action, $location, propertylist, mvtstatisticsTrackingurl, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreMvtMVTStatisticsImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreMvtMVTStatisticsImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreStatsPageViewStatisticsImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCORESTATSPAGEVIEWSTATISTICSIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreStatsPageViewStatisticsImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pageviewstatisticsTrackingurlParam = message.body().getString("pageviewstatistics.trackingurl");
                String pageviewstatisticsTrackingurl = (pageviewstatisticsTrackingurlParam == null) ? null : pageviewstatisticsTrackingurlParam;
                String pageviewstatisticsTrackingscriptEnabledParam = message.body().getString("pageviewstatistics.trackingscript.enabled");
                String pageviewstatisticsTrackingscriptEnabled = (pageviewstatisticsTrackingscriptEnabledParam == null) ? null : pageviewstatisticsTrackingscriptEnabledParam;
                service.comDayCqWcmCoreStatsPageViewStatisticsImpl(post, apply, delete, action, $location, propertylist, pageviewstatisticsTrackingurl, pageviewstatisticsTrackingscriptEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreStatsPageViewStatisticsImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreStatsPageViewStatisticsImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmCoreWCMRequestFilter
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMCOREWCMREQUESTFILTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmCoreWCMRequestFilter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String wcmfilterModeParam = message.body().getString("wcmfilter.mode");
                String wcmfilterMode = (wcmfilterModeParam == null) ? null : wcmfilterModeParam;
                service.comDayCqWcmCoreWCMRequestFilter(post, apply, delete, action, $location, propertylist, wcmfilterMode, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmCoreWCMRequestFilter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmCoreWCMRequestFilter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterDesignPackageImporter
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERDESIGNPACKAGEIMPORTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterDesignPackageImporter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray extractFilterParam = message.body().getJsonArray("extract.filter");
                List<String> extractFilter = (extractFilterParam == null) ? null : Json.mapper.readValue(extractFilterParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmDesignimporterDesignPackageImporter(post, apply, delete, action, $location, propertylist, extractFilter, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterDesignPackageImporter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterDesignPackageImporter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterImplCanvasBuilderImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERIMPLCANVASBUILDERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterImplCanvasBuilderImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String filepatternParam = message.body().getString("filepattern");
                String filepattern = (filepatternParam == null) ? null : filepatternParam;
                String buildPageNodesParam = message.body().getString("build.page.nodes");
                Boolean buildPageNodes = (buildPageNodesParam == null) ? null : Json.mapper.readValue(buildPageNodesParam, Boolean.class);
                String buildClientLibsParam = message.body().getString("build.client.libs");
                Boolean buildClientLibs = (buildClientLibsParam == null) ? null : Json.mapper.readValue(buildClientLibsParam, Boolean.class);
                String buildCanvasComponentParam = message.body().getString("build.canvas.component");
                Boolean buildCanvasComponent = (buildCanvasComponentParam == null) ? null : Json.mapper.readValue(buildCanvasComponentParam, Boolean.class);
                service.comDayCqWcmDesignimporterImplCanvasBuilderImpl(post, apply, delete, action, $location, propertylist, filepattern, buildPageNodes, buildClientLibs, buildCanvasComponent, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterImplCanvasBuilderImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterImplCanvasBuilderImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterImplCanvasPageDeleteHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERIMPLCANVASPAGEDELETEHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterImplCanvasPageDeleteHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String minThreadPoolSizeParam = message.body().getString("minThreadPoolSize");
                Integer minThreadPoolSize = (minThreadPoolSizeParam == null) ? null : Json.mapper.readValue(minThreadPoolSizeParam, Integer.class);
                String maxThreadPoolSizeParam = message.body().getString("maxThreadPoolSize");
                Integer maxThreadPoolSize = (maxThreadPoolSizeParam == null) ? null : Json.mapper.readValue(maxThreadPoolSizeParam, Integer.class);
                service.comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(post, apply, delete, action, $location, propertylist, minThreadPoolSize, maxThreadPoolSize, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterImplCanvasPageDeleteHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterImplCanvasPageDeleteHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterImplEntryPreprocessorImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERIMPLENTRYPREPROCESSORIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterImplEntryPreprocessorImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String searchPatternParam = message.body().getString("search.pattern");
                String searchPattern = (searchPatternParam == null) ? null : searchPatternParam;
                String replacePatternParam = message.body().getString("replace.pattern");
                String replacePattern = (replacePatternParam == null) ? null : replacePatternParam;
                service.comDayCqWcmDesignimporterImplEntryPreprocessorImpl(post, apply, delete, action, $location, propertylist, searchPattern, replacePattern, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterImplEntryPreprocessorImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterImplEntryPreprocessorImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERIMPLMOBILECANVASBUILDERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String filepatternParam = message.body().getString("filepattern");
                String filepattern = (filepatternParam == null) ? null : filepatternParam;
                JsonArray deviceGroupsParam = message.body().getJsonArray("device.groups");
                List<String> deviceGroups = (deviceGroupsParam == null) ? null : Json.mapper.readValue(deviceGroupsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String buildPageNodesParam = message.body().getString("build.page.nodes");
                Boolean buildPageNodes = (buildPageNodesParam == null) ? null : Json.mapper.readValue(buildPageNodesParam, Boolean.class);
                String buildClientLibsParam = message.body().getString("build.client.libs");
                Boolean buildClientLibs = (buildClientLibsParam == null) ? null : Json.mapper.readValue(buildClientLibsParam, Boolean.class);
                String buildCanvasComponentParam = message.body().getString("build.canvas.component");
                Boolean buildCanvasComponent = (buildCanvasComponentParam == null) ? null : Json.mapper.readValue(buildCanvasComponentParam, Boolean.class);
                service.comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(post, apply, delete, action, $location, propertylist, filepattern, deviceGroups, buildPageNodes, buildClientLibs, buildCanvasComponent, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYCANVASCOMPONE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                service.comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYDEFAULTCOMPON_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                service.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYDEFAULTTAGHAN_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                service.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYHEADTAGHANDLE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                service.comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYIFRAMETAGHAND_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                service.comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYIMAGECOMPONEN_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                String componentResourceTypeParam = message.body().getString("component.resourceType");
                String componentResourceType = (componentResourceTypeParam == null) ? null : componentResourceTypeParam;
                service.comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYIMGTAGHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                service.comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYINLINESCRIPTT_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                service.comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYLINKTAGHANDLE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                service.comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYMETATAGHANDLE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                service.comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYNONSCRIPTTAGH_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                service.comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYPARSYSCOMPONE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                String componentResourceTypeParam = message.body().getString("component.resourceType");
                String componentResourceType = (componentResourceTypeParam == null) ? null : componentResourceTypeParam;
                service.comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYSCRIPTTAGHAND_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                service.comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYSTYLETAGHANDL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                service.comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYTEXTCOMPONENT_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                String componentResourceTypeParam = message.body().getString("component.resourceType");
                String componentResourceType = (componentResourceTypeParam == null) ? null : componentResourceTypeParam;
                service.comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYTITLECOMPONEN_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                String componentResourceTypeParam = message.body().getString("component.resourceType");
                String componentResourceType = (componentResourceTypeParam == null) ? null : componentResourceTypeParam;
                service.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMDESIGNIMPORTERPARSERTAGHANDLERSFACTORYTITLETAGHANDL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String tagpatternParam = message.body().getString("tagpattern");
                String tagpattern = (tagpatternParam == null) ? null : tagpatternParam;
                service.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmFoundationFormsImplFormChooserServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMFOUNDATIONFORMSIMPLFORMCHOOSERSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmFoundationFormsImplFormChooserServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceNameParam = message.body().getString("service.name");
                String serviceName = (serviceNameParam == null) ? null : serviceNameParam;
                String slingServletResourceTypesParam = message.body().getString("sling.servlet.resourceTypes");
                String slingServletResourceTypes = (slingServletResourceTypesParam == null) ? null : slingServletResourceTypesParam;
                String slingServletSelectorsParam = message.body().getString("sling.servlet.selectors");
                String slingServletSelectors = (slingServletSelectorsParam == null) ? null : slingServletSelectorsParam;
                JsonArray slingServletMethodsParam = message.body().getJsonArray("sling.servlet.methods");
                List<String> slingServletMethods = (slingServletMethodsParam == null) ? null : Json.mapper.readValue(slingServletMethodsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String formsFormchooserservletAdvansesearchRequireParam = message.body().getString("forms.formchooserservlet.advansesearch.require");
                Boolean formsFormchooserservletAdvansesearchRequire = (formsFormchooserservletAdvansesearchRequireParam == null) ? null : Json.mapper.readValue(formsFormchooserservletAdvansesearchRequireParam, Boolean.class);
                service.comDayCqWcmFoundationFormsImplFormChooserServlet(post, apply, delete, action, $location, propertylist, serviceName, slingServletResourceTypes, slingServletSelectors, slingServletMethods, formsFormchooserservletAdvansesearchRequire, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmFoundationFormsImplFormChooserServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmFoundationFormsImplFormChooserServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmFoundationFormsImplFormParagraphPostProcessor
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMFOUNDATIONFORMSIMPLFORMPARAGRAPHPOSTPROCESSOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmFoundationFormsImplFormParagraphPostProcessor";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String formsFormparagraphpostprocessorEnabledParam = message.body().getString("forms.formparagraphpostprocessor.enabled");
                Boolean formsFormparagraphpostprocessorEnabled = (formsFormparagraphpostprocessorEnabledParam == null) ? null : Json.mapper.readValue(formsFormparagraphpostprocessorEnabledParam, Boolean.class);
                JsonArray formsFormparagraphpostprocessorFormresourcetypesParam = message.body().getJsonArray("forms.formparagraphpostprocessor.formresourcetypes");
                List<String> formsFormparagraphpostprocessorFormresourcetypes = (formsFormparagraphpostprocessorFormresourcetypesParam == null) ? null : Json.mapper.readValue(formsFormparagraphpostprocessorFormresourcetypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(post, apply, delete, action, $location, propertylist, formsFormparagraphpostprocessorEnabled, formsFormparagraphpostprocessorFormresourcetypes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmFoundationFormsImplFormParagraphPostProcessor");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmFoundationFormsImplFormParagraphPostProcessor", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmFoundationFormsImplFormsHandlingServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMFOUNDATIONFORMSIMPLFORMSHANDLINGSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmFoundationFormsImplFormsHandlingServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameWhitelistParam = message.body().getString("name.whitelist");
                String nameWhitelist = (nameWhitelistParam == null) ? null : nameWhitelistParam;
                String allowExpressionsParam = message.body().getString("allow.expressions");
                Boolean allowExpressions = (allowExpressionsParam == null) ? null : Json.mapper.readValue(allowExpressionsParam, Boolean.class);
                service.comDayCqWcmFoundationFormsImplFormsHandlingServlet(post, apply, delete, action, $location, propertylist, nameWhitelist, allowExpressions, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmFoundationFormsImplFormsHandlingServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmFoundationFormsImplFormsHandlingServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmFoundationFormsImplMailServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMFOUNDATIONFORMSIMPLMAILSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmFoundationFormsImplMailServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingServletResourceTypesParam = message.body().getString("sling.servlet.resourceTypes");
                String slingServletResourceTypes = (slingServletResourceTypesParam == null) ? null : slingServletResourceTypesParam;
                String slingServletSelectorsParam = message.body().getString("sling.servlet.selectors");
                String slingServletSelectors = (slingServletSelectorsParam == null) ? null : slingServletSelectorsParam;
                JsonArray resourceWhitelistParam = message.body().getJsonArray("resource.whitelist");
                List<String> resourceWhitelist = (resourceWhitelistParam == null) ? null : Json.mapper.readValue(resourceWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String resourceBlacklistParam = message.body().getString("resource.blacklist");
                String resourceBlacklist = (resourceBlacklistParam == null) ? null : resourceBlacklistParam;
                service.comDayCqWcmFoundationFormsImplMailServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletSelectors, resourceWhitelist, resourceBlacklist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmFoundationFormsImplMailServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmFoundationFormsImplMailServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmFoundationImplAdaptiveImageComponentServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMFOUNDATIONIMPLADAPTIVEIMAGECOMPONENTSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmFoundationImplAdaptiveImageComponentServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray adaptSupportedWidthsParam = message.body().getJsonArray("adapt.supported.widths");
                List<String> adaptSupportedWidths = (adaptSupportedWidthsParam == null) ? null : Json.mapper.readValue(adaptSupportedWidthsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmFoundationImplAdaptiveImageComponentServlet(post, apply, delete, action, $location, propertylist, adaptSupportedWidths, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmFoundationImplAdaptiveImageComponentServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmFoundationImplAdaptiveImageComponentServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmFoundationImplHTTPAuthHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMFOUNDATIONIMPLHTTPAUTHHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmFoundationImplHTTPAuthHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pathParam = message.body().getString("path");
                String path = (pathParam == null) ? null : pathParam;
                String authHttpNologinParam = message.body().getString("auth.http.nologin");
                Boolean authHttpNologin = (authHttpNologinParam == null) ? null : Json.mapper.readValue(authHttpNologinParam, Boolean.class);
                String authHttpRealmParam = message.body().getString("auth.http.realm");
                String authHttpRealm = (authHttpRealmParam == null) ? null : authHttpRealmParam;
                String authDefaultLoginpageParam = message.body().getString("auth.default.loginpage");
                String authDefaultLoginpage = (authDefaultLoginpageParam == null) ? null : authDefaultLoginpageParam;
                JsonArray authCredFormParam = message.body().getJsonArray("auth.cred.form");
                List<String> authCredForm = (authCredFormParam == null) ? null : Json.mapper.readValue(authCredFormParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray authCredUtf8Param = message.body().getJsonArray("auth.cred.utf8");
                List<String> authCredUtf8 = (authCredUtf8Param == null) ? null : Json.mapper.readValue(authCredUtf8Param.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmFoundationImplHTTPAuthHandler(post, apply, delete, action, $location, propertylist, path, authHttpNologin, authHttpRealm, authDefaultLoginpage, authCredForm, authCredUtf8, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmFoundationImplHTTPAuthHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmFoundationImplHTTPAuthHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmFoundationImplPageImpressionsTracker
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMFOUNDATIONIMPLPAGEIMPRESSIONSTRACKER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmFoundationImplPageImpressionsTracker";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingAuthRequirementsParam = message.body().getString("sling.auth.requirements");
                String slingAuthRequirements = (slingAuthRequirementsParam == null) ? null : slingAuthRequirementsParam;
                service.comDayCqWcmFoundationImplPageImpressionsTracker(post, apply, delete, action, $location, propertylist, slingAuthRequirements, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmFoundationImplPageImpressionsTracker");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmFoundationImplPageImpressionsTracker", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmFoundationImplPageRedirectServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMFOUNDATIONIMPLPAGEREDIRECTSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmFoundationImplPageRedirectServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray excludedResourceTypesParam = message.body().getJsonArray("excluded.resource.types");
                List<String> excludedResourceTypes = (excludedResourceTypesParam == null) ? null : Json.mapper.readValue(excludedResourceTypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmFoundationImplPageRedirectServlet(post, apply, delete, action, $location, propertylist, excludedResourceTypes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmFoundationImplPageRedirectServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmFoundationImplPageRedirectServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMFOUNDATIONSECURITYIMPLDEFAULTATTACHMENTTYPEBLACKLIST_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray defaultAttachmentTypeBlacklistParam = message.body().getJsonArray("default.attachment.type.blacklist");
                List<String> defaultAttachmentTypeBlacklist = (defaultAttachmentTypeBlacklistParam == null) ? null : Json.mapper.readValue(defaultAttachmentTypeBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray baselineAttachmentTypeBlacklistParam = message.body().getJsonArray("baseline.attachment.type.blacklist");
                List<String> baselineAttachmentTypeBlacklist = (baselineAttachmentTypeBlacklistParam == null) ? null : Json.mapper.readValue(baselineAttachmentTypeBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(post, apply, delete, action, $location, propertylist, defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMFOUNDATIONSECURITYIMPLSAFERSLINGPOSTVALIDATORIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray parameterWhitelistParam = message.body().getJsonArray("parameter.whitelist");
                List<String> parameterWhitelist = (parameterWhitelistParam == null) ? null : Json.mapper.readValue(parameterWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray parameterWhitelistPrefixesParam = message.body().getJsonArray("parameter.whitelist.prefixes");
                List<String> parameterWhitelistPrefixes = (parameterWhitelistPrefixesParam == null) ? null : Json.mapper.readValue(parameterWhitelistPrefixesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray binaryParameterWhitelistParam = message.body().getJsonArray("binary.parameter.whitelist");
                List<String> binaryParameterWhitelist = (binaryParameterWhitelistParam == null) ? null : Json.mapper.readValue(binaryParameterWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray modifierWhitelistParam = message.body().getJsonArray("modifier.whitelist");
                List<String> modifierWhitelist = (modifierWhitelistParam == null) ? null : Json.mapper.readValue(modifierWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray operationWhitelistParam = message.body().getJsonArray("operation.whitelist");
                List<String> operationWhitelist = (operationWhitelistParam == null) ? null : Json.mapper.readValue(operationWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray operationWhitelistPrefixesParam = message.body().getJsonArray("operation.whitelist.prefixes");
                List<String> operationWhitelistPrefixes = (operationWhitelistPrefixesParam == null) ? null : Json.mapper.readValue(operationWhitelistPrefixesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray typehintWhitelistParam = message.body().getJsonArray("typehint.whitelist");
                List<String> typehintWhitelist = (typehintWhitelistParam == null) ? null : Json.mapper.readValue(typehintWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray resourcetypeWhitelistParam = message.body().getJsonArray("resourcetype.whitelist");
                List<String> resourcetypeWhitelist = (resourcetypeWhitelistParam == null) ? null : Json.mapper.readValue(resourcetypeWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(post, apply, delete, action, $location, propertylist, parameterWhitelist, parameterWhitelistPrefixes, binaryParameterWhitelist, modifierWhitelist, operationWhitelist, operationWhitelistPrefixes, typehintWhitelist, resourcetypeWhitelist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMMOBILECOREIMPLDEVICEDEVICEINFOTRANSFORMERFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String deviceInfoTransformerEnabledParam = message.body().getString("device.info.transformer.enabled");
                Boolean deviceInfoTransformerEnabled = (deviceInfoTransformerEnabledParam == null) ? null : Json.mapper.readValue(deviceInfoTransformerEnabledParam, Boolean.class);
                String deviceInfoTransformerCssStyleParam = message.body().getString("device.info.transformer.css.style");
                String deviceInfoTransformerCssStyle = (deviceInfoTransformerCssStyleParam == null) ? null : deviceInfoTransformerCssStyleParam;
                service.comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(post, apply, delete, action, $location, propertylist, deviceInfoTransformerEnabled, deviceInfoTransformerCssStyle, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmMobileCoreImplRedirectRedirectFilter
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMMOBILECOREIMPLREDIRECTREDIRECTFILTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmMobileCoreImplRedirectRedirectFilter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String redirectEnabledParam = message.body().getString("redirect.enabled");
                Boolean redirectEnabled = (redirectEnabledParam == null) ? null : Json.mapper.readValue(redirectEnabledParam, Boolean.class);
                String redirectStatsEnabledParam = message.body().getString("redirect.stats.enabled");
                Boolean redirectStatsEnabled = (redirectStatsEnabledParam == null) ? null : Json.mapper.readValue(redirectStatsEnabledParam, Boolean.class);
                JsonArray redirectExtensionsParam = message.body().getJsonArray("redirect.extensions");
                List<String> redirectExtensions = (redirectExtensionsParam == null) ? null : Json.mapper.readValue(redirectExtensionsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray redirectPathsParam = message.body().getJsonArray("redirect.paths");
                List<String> redirectPaths = (redirectPathsParam == null) ? null : Json.mapper.readValue(redirectPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmMobileCoreImplRedirectRedirectFilter(post, apply, delete, action, $location, propertylist, redirectEnabled, redirectStatsEnabled, redirectExtensions, redirectPaths, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmMobileCoreImplRedirectRedirectFilter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmMobileCoreImplRedirectRedirectFilter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmMsmImplActionsContentCopyActionFactory
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMMSMIMPLACTIONSCONTENTCOPYACTIONFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmMsmImplActionsContentCopyActionFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludednodetypesParam = message.body().getJsonArray("cq.wcm.msm.action.excludednodetypes");
                List<String> cqWcmMsmActionExcludednodetypes = (cqWcmMsmActionExcludednodetypesParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludednodetypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludedparagraphitemsParam = message.body().getJsonArray("cq.wcm.msm.action.excludedparagraphitems");
                List<String> cqWcmMsmActionExcludedparagraphitems = (cqWcmMsmActionExcludedparagraphitemsParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludedparagraphitemsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludedpropsParam = message.body().getJsonArray("cq.wcm.msm.action.excludedprops");
                List<String> cqWcmMsmActionExcludedprops = (cqWcmMsmActionExcludedpropsParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludedpropsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String contentcopyactionOrderStyleParam = message.body().getString("contentcopyaction.order.style");
                String contentcopyactionOrderStyle = (contentcopyactionOrderStyleParam == null) ? null : contentcopyactionOrderStyleParam;
                service.comDayCqWcmMsmImplActionsContentCopyActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, contentcopyactionOrderStyle, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmMsmImplActionsContentCopyActionFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmMsmImplActionsContentCopyActionFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmMsmImplActionsContentDeleteActionFactory
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMMSMIMPLACTIONSCONTENTDELETEACTIONFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmMsmImplActionsContentDeleteActionFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludednodetypesParam = message.body().getJsonArray("cq.wcm.msm.action.excludednodetypes");
                List<String> cqWcmMsmActionExcludednodetypes = (cqWcmMsmActionExcludednodetypesParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludednodetypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludedparagraphitemsParam = message.body().getJsonArray("cq.wcm.msm.action.excludedparagraphitems");
                List<String> cqWcmMsmActionExcludedparagraphitems = (cqWcmMsmActionExcludedparagraphitemsParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludedparagraphitemsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludedpropsParam = message.body().getJsonArray("cq.wcm.msm.action.excludedprops");
                List<String> cqWcmMsmActionExcludedprops = (cqWcmMsmActionExcludedpropsParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludedpropsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmMsmImplActionsContentDeleteActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmMsmImplActionsContentDeleteActionFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmMsmImplActionsContentDeleteActionFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmMsmImplActionsContentUpdateActionFactory
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMMSMIMPLACTIONSCONTENTUPDATEACTIONFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmMsmImplActionsContentUpdateActionFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludednodetypesParam = message.body().getJsonArray("cq.wcm.msm.action.excludednodetypes");
                List<String> cqWcmMsmActionExcludednodetypes = (cqWcmMsmActionExcludednodetypesParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludednodetypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludedparagraphitemsParam = message.body().getJsonArray("cq.wcm.msm.action.excludedparagraphitems");
                List<String> cqWcmMsmActionExcludedparagraphitems = (cqWcmMsmActionExcludedparagraphitemsParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludedparagraphitemsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludedpropsParam = message.body().getJsonArray("cq.wcm.msm.action.excludedprops");
                List<String> cqWcmMsmActionExcludedprops = (cqWcmMsmActionExcludedpropsParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludedpropsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionIgnoredMixinParam = message.body().getJsonArray("cq.wcm.msm.action.ignoredMixin");
                List<String> cqWcmMsmActionIgnoredMixin = (cqWcmMsmActionIgnoredMixinParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionIgnoredMixinParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmMsmImplActionsContentUpdateActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmActionIgnoredMixin, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmMsmImplActionsContentUpdateActionFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmMsmImplActionsContentUpdateActionFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmMsmImplActionsOrderChildrenActionFactory
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMMSMIMPLACTIONSORDERCHILDRENACTIONFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmMsmImplActionsOrderChildrenActionFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludednodetypesParam = message.body().getJsonArray("cq.wcm.msm.action.excludednodetypes");
                List<String> cqWcmMsmActionExcludednodetypes = (cqWcmMsmActionExcludednodetypesParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludednodetypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludedparagraphitemsParam = message.body().getJsonArray("cq.wcm.msm.action.excludedparagraphitems");
                List<String> cqWcmMsmActionExcludedparagraphitems = (cqWcmMsmActionExcludedparagraphitemsParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludedparagraphitemsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludedpropsParam = message.body().getJsonArray("cq.wcm.msm.action.excludedprops");
                List<String> cqWcmMsmActionExcludedprops = (cqWcmMsmActionExcludedpropsParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludedpropsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmMsmImplActionsOrderChildrenActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmMsmImplActionsOrderChildrenActionFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmMsmImplActionsOrderChildrenActionFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmMsmImplActionsPageMoveActionFactory
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMMSMIMPLACTIONSPAGEMOVEACTIONFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmMsmImplActionsPageMoveActionFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludednodetypesParam = message.body().getJsonArray("cq.wcm.msm.action.excludednodetypes");
                List<String> cqWcmMsmActionExcludednodetypes = (cqWcmMsmActionExcludednodetypesParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludednodetypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludedparagraphitemsParam = message.body().getJsonArray("cq.wcm.msm.action.excludedparagraphitems");
                List<String> cqWcmMsmActionExcludedparagraphitems = (cqWcmMsmActionExcludedparagraphitemsParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludedparagraphitemsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludedpropsParam = message.body().getJsonArray("cq.wcm.msm.action.excludedprops");
                List<String> cqWcmMsmActionExcludedprops = (cqWcmMsmActionExcludedpropsParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludedpropsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqWcmMsmImplActionsPagemovePropReferenceUpdateParam = message.body().getString("cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate");
                Boolean cqWcmMsmImplActionsPagemovePropReferenceUpdate = (cqWcmMsmImplActionsPagemovePropReferenceUpdateParam == null) ? null : Json.mapper.readValue(cqWcmMsmImplActionsPagemovePropReferenceUpdateParam, Boolean.class);
                service.comDayCqWcmMsmImplActionsPageMoveActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmImplActionsPagemovePropReferenceUpdate, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmMsmImplActionsPageMoveActionFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmMsmImplActionsPageMoveActionFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmMsmImplActionsReferencesUpdateActionFactory
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMMSMIMPLACTIONSREFERENCESUPDATEACTIONFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmMsmImplActionsReferencesUpdateActionFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludednodetypesParam = message.body().getJsonArray("cq.wcm.msm.action.excludednodetypes");
                List<String> cqWcmMsmActionExcludednodetypes = (cqWcmMsmActionExcludednodetypesParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludednodetypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludedparagraphitemsParam = message.body().getJsonArray("cq.wcm.msm.action.excludedparagraphitems");
                List<String> cqWcmMsmActionExcludedparagraphitems = (cqWcmMsmActionExcludedparagraphitemsParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludedparagraphitemsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludedpropsParam = message.body().getJsonArray("cq.wcm.msm.action.excludedprops");
                List<String> cqWcmMsmActionExcludedprops = (cqWcmMsmActionExcludedpropsParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludedpropsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqWcmMsmImplActionReferencesupdatePropUpdateNestedParam = message.body().getString("cq.wcm.msm.impl.action.referencesupdate.prop_updateNested");
                Boolean cqWcmMsmImplActionReferencesupdatePropUpdateNested = (cqWcmMsmImplActionReferencesupdatePropUpdateNestedParam == null) ? null : Json.mapper.readValue(cqWcmMsmImplActionReferencesupdatePropUpdateNestedParam, Boolean.class);
                service.comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmImplActionReferencesupdatePropUpdateNested, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmMsmImplActionsReferencesUpdateActionFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmMsmImplActionsReferencesUpdateActionFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmMsmImplActionsVersionCopyActionFactory
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMMSMIMPLACTIONSVERSIONCOPYACTIONFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmMsmImplActionsVersionCopyActionFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludednodetypesParam = message.body().getJsonArray("cq.wcm.msm.action.excludednodetypes");
                List<String> cqWcmMsmActionExcludednodetypes = (cqWcmMsmActionExcludednodetypesParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludednodetypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludedparagraphitemsParam = message.body().getJsonArray("cq.wcm.msm.action.excludedparagraphitems");
                List<String> cqWcmMsmActionExcludedparagraphitems = (cqWcmMsmActionExcludedparagraphitemsParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludedparagraphitemsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmMsmActionExcludedpropsParam = message.body().getJsonArray("cq.wcm.msm.action.excludedprops");
                List<String> cqWcmMsmActionExcludedprops = (cqWcmMsmActionExcludedpropsParam == null) ? null : Json.mapper.readValue(cqWcmMsmActionExcludedpropsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmMsmImplActionsVersionCopyActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmMsmImplActionsVersionCopyActionFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmMsmImplActionsVersionCopyActionFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmMsmImplLiveRelationshipManagerImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMMSMIMPLLIVERELATIONSHIPMANAGERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmMsmImplLiveRelationshipManagerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String liverelationshipmgrRelationsconfigDefaultParam = message.body().getString("liverelationshipmgr.relationsconfig.default");
                String liverelationshipmgrRelationsconfigDefault = (liverelationshipmgrRelationsconfigDefaultParam == null) ? null : liverelationshipmgrRelationsconfigDefaultParam;
                service.comDayCqWcmMsmImplLiveRelationshipManagerImpl(post, apply, delete, action, $location, propertylist, liverelationshipmgrRelationsconfigDefault, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmMsmImplLiveRelationshipManagerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmMsmImplLiveRelationshipManagerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmMsmImplRolloutManagerImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMMSMIMPLROLLOUTMANAGERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmMsmImplRolloutManagerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String eventFilterParam = message.body().getString("event.filter");
                String eventFilter = (eventFilterParam == null) ? null : eventFilterParam;
                JsonArray rolloutmgrExcludedpropsDefaultParam = message.body().getJsonArray("rolloutmgr.excludedprops.default");
                List<String> rolloutmgrExcludedpropsDefault = (rolloutmgrExcludedpropsDefaultParam == null) ? null : Json.mapper.readValue(rolloutmgrExcludedpropsDefaultParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray rolloutmgrExcludedparagraphpropsDefaultParam = message.body().getJsonArray("rolloutmgr.excludedparagraphprops.default");
                List<String> rolloutmgrExcludedparagraphpropsDefault = (rolloutmgrExcludedparagraphpropsDefaultParam == null) ? null : Json.mapper.readValue(rolloutmgrExcludedparagraphpropsDefaultParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray rolloutmgrExcludednodetypesDefaultParam = message.body().getJsonArray("rolloutmgr.excludednodetypes.default");
                List<String> rolloutmgrExcludednodetypesDefault = (rolloutmgrExcludednodetypesDefaultParam == null) ? null : Json.mapper.readValue(rolloutmgrExcludednodetypesDefaultParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String rolloutmgrThreadpoolMaxsizeParam = message.body().getString("rolloutmgr.threadpool.maxsize");
                Integer rolloutmgrThreadpoolMaxsize = (rolloutmgrThreadpoolMaxsizeParam == null) ? null : Json.mapper.readValue(rolloutmgrThreadpoolMaxsizeParam, Integer.class);
                String rolloutmgrThreadpoolMaxshutdowntimeParam = message.body().getString("rolloutmgr.threadpool.maxshutdowntime");
                Integer rolloutmgrThreadpoolMaxshutdowntime = (rolloutmgrThreadpoolMaxshutdowntimeParam == null) ? null : Json.mapper.readValue(rolloutmgrThreadpoolMaxshutdowntimeParam, Integer.class);
                String rolloutmgrThreadpoolPriorityParam = message.body().getString("rolloutmgr.threadpool.priority");
                String rolloutmgrThreadpoolPriority = (rolloutmgrThreadpoolPriorityParam == null) ? null : rolloutmgrThreadpoolPriorityParam;
                String rolloutmgrCommitSizeParam = message.body().getString("rolloutmgr.commit.size");
                Integer rolloutmgrCommitSize = (rolloutmgrCommitSizeParam == null) ? null : Json.mapper.readValue(rolloutmgrCommitSizeParam, Integer.class);
                String rolloutmgrConflicthandlingEnabledParam = message.body().getString("rolloutmgr.conflicthandling.enabled");
                Boolean rolloutmgrConflicthandlingEnabled = (rolloutmgrConflicthandlingEnabledParam == null) ? null : Json.mapper.readValue(rolloutmgrConflicthandlingEnabledParam, Boolean.class);
                service.comDayCqWcmMsmImplRolloutManagerImpl(post, apply, delete, action, $location, propertylist, eventFilter, rolloutmgrExcludedpropsDefault, rolloutmgrExcludedparagraphpropsDefault, rolloutmgrExcludednodetypesDefault, rolloutmgrThreadpoolMaxsize, rolloutmgrThreadpoolMaxshutdowntime, rolloutmgrThreadpoolPriority, rolloutmgrCommitSize, rolloutmgrConflicthandlingEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmMsmImplRolloutManagerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmMsmImplRolloutManagerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmMsmImplServletsAuditLogServlet
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMMSMIMPLSERVLETSAUDITLOGSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmMsmImplServletsAuditLogServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String auditlogservletDefaultEventsCountParam = message.body().getString("auditlogservlet.default.events.count");
                Integer auditlogservletDefaultEventsCount = (auditlogservletDefaultEventsCountParam == null) ? null : Json.mapper.readValue(auditlogservletDefaultEventsCountParam, Integer.class);
                String auditlogservletDefaultPathParam = message.body().getString("auditlogservlet.default.path");
                String auditlogservletDefaultPath = (auditlogservletDefaultPathParam == null) ? null : auditlogservletDefaultPathParam;
                service.comDayCqWcmMsmImplServletsAuditLogServlet(post, apply, delete, action, $location, propertylist, auditlogservletDefaultEventsCount, auditlogservletDefaultPath, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmMsmImplServletsAuditLogServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmMsmImplServletsAuditLogServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmNotificationEmailImplEmailChannel
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMNOTIFICATIONEMAILIMPLEMAILCHANNEL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmNotificationEmailImplEmailChannel";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String emailFromParam = message.body().getString("email.from");
                String emailFrom = (emailFromParam == null) ? null : emailFromParam;
                service.comDayCqWcmNotificationEmailImplEmailChannel(post, apply, delete, action, $location, propertylist, emailFrom, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmNotificationEmailImplEmailChannel");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmNotificationEmailImplEmailChannel", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmNotificationImplNotificationManagerImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMNOTIFICATIONIMPLNOTIFICATIONMANAGERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmNotificationImplNotificationManagerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray eventTopicsParam = message.body().getJsonArray("event.topics");
                List<String> eventTopics = (eventTopicsParam == null) ? null : Json.mapper.readValue(eventTopicsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmNotificationImplNotificationManagerImpl(post, apply, delete, action, $location, propertylist, eventTopics, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmNotificationImplNotificationManagerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmNotificationImplNotificationManagerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmScriptingImplBVPManager
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMSCRIPTINGIMPLBVPMANAGER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmScriptingImplBVPManager";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray comDayCqWcmScriptingBvpScriptEnginesParam = message.body().getJsonArray("com.day.cq.wcm.scripting.bvp.script.engines");
                List<String> comDayCqWcmScriptingBvpScriptEngines = (comDayCqWcmScriptingBvpScriptEnginesParam == null) ? null : Json.mapper.readValue(comDayCqWcmScriptingBvpScriptEnginesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmScriptingImplBVPManager(post, apply, delete, action, $location, propertylist, comDayCqWcmScriptingBvpScriptEngines, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmScriptingImplBVPManager");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmScriptingImplBVPManager", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmUndoUndoConfig
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMUNDOUNDOCONFIG_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmUndoUndoConfig";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cqWcmUndoEnabledParam = message.body().getString("cq.wcm.undo.enabled");
                Boolean cqWcmUndoEnabled = (cqWcmUndoEnabledParam == null) ? null : Json.mapper.readValue(cqWcmUndoEnabledParam, Boolean.class);
                String cqWcmUndoPathParam = message.body().getString("cq.wcm.undo.path");
                String cqWcmUndoPath = (cqWcmUndoPathParam == null) ? null : cqWcmUndoPathParam;
                String cqWcmUndoValidityParam = message.body().getString("cq.wcm.undo.validity");
                Integer cqWcmUndoValidity = (cqWcmUndoValidityParam == null) ? null : Json.mapper.readValue(cqWcmUndoValidityParam, Integer.class);
                String cqWcmUndoStepsParam = message.body().getString("cq.wcm.undo.steps");
                Integer cqWcmUndoSteps = (cqWcmUndoStepsParam == null) ? null : Json.mapper.readValue(cqWcmUndoStepsParam, Integer.class);
                String cqWcmUndoPersistenceParam = message.body().getString("cq.wcm.undo.persistence");
                String cqWcmUndoPersistence = (cqWcmUndoPersistenceParam == null) ? null : cqWcmUndoPersistenceParam;
                String cqWcmUndoPersistenceModeParam = message.body().getString("cq.wcm.undo.persistence.mode");
                Boolean cqWcmUndoPersistenceMode = (cqWcmUndoPersistenceModeParam == null) ? null : Json.mapper.readValue(cqWcmUndoPersistenceModeParam, Boolean.class);
                String cqWcmUndoMarkermodeParam = message.body().getString("cq.wcm.undo.markermode");
                String cqWcmUndoMarkermode = (cqWcmUndoMarkermodeParam == null) ? null : cqWcmUndoMarkermodeParam;
                JsonArray cqWcmUndoWhitelistParam = message.body().getJsonArray("cq.wcm.undo.whitelist");
                List<String> cqWcmUndoWhitelist = (cqWcmUndoWhitelistParam == null) ? null : Json.mapper.readValue(cqWcmUndoWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cqWcmUndoBlacklistParam = message.body().getJsonArray("cq.wcm.undo.blacklist");
                List<String> cqWcmUndoBlacklist = (cqWcmUndoBlacklistParam == null) ? null : Json.mapper.readValue(cqWcmUndoBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmUndoUndoConfig(post, apply, delete, action, $location, propertylist, cqWcmUndoEnabled, cqWcmUndoPath, cqWcmUndoValidity, cqWcmUndoSteps, cqWcmUndoPersistence, cqWcmUndoPersistenceMode, cqWcmUndoMarkermode, cqWcmUndoWhitelist, cqWcmUndoBlacklist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmUndoUndoConfig");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmUndoUndoConfig", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmWebservicesupportImplReplicationEventListener
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMWEBSERVICESUPPORTIMPLREPLICATIONEVENTLISTENER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmWebservicesupportImplReplicationEventListener";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray flushAgentsParam = message.body().getJsonArray("Flush agents");
                List<String> flushAgents = (flushAgentsParam == null) ? null : Json.mapper.readValue(flushAgentsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmWebservicesupportImplReplicationEventListener(post, apply, delete, action, $location, propertylist, flushAgents, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmWebservicesupportImplReplicationEventListener");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmWebservicesupportImplReplicationEventListener", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmWorkflowImplWcmWorkflowServiceImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMWORKFLOWIMPLWCMWORKFLOWSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmWorkflowImplWcmWorkflowServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String eventFilterParam = message.body().getString("event.filter");
                String eventFilter = (eventFilterParam == null) ? null : eventFilterParam;
                String minThreadPoolSizeParam = message.body().getString("minThreadPoolSize");
                Integer minThreadPoolSize = (minThreadPoolSizeParam == null) ? null : Json.mapper.readValue(minThreadPoolSizeParam, Integer.class);
                String maxThreadPoolSizeParam = message.body().getString("maxThreadPoolSize");
                Integer maxThreadPoolSize = (maxThreadPoolSizeParam == null) ? null : Json.mapper.readValue(maxThreadPoolSizeParam, Integer.class);
                String cqWcmWorkflowTerminateOnActivateParam = message.body().getString("cq.wcm.workflow.terminate.on.activate");
                Boolean cqWcmWorkflowTerminateOnActivate = (cqWcmWorkflowTerminateOnActivateParam == null) ? null : Json.mapper.readValue(cqWcmWorkflowTerminateOnActivateParam, Boolean.class);
                JsonArray cqWcmWorklfowTerminateExclusionListParam = message.body().getJsonArray("cq.wcm.worklfow.terminate.exclusion.list");
                List<String> cqWcmWorklfowTerminateExclusionList = (cqWcmWorklfowTerminateExclusionListParam == null) ? null : Json.mapper.readValue(cqWcmWorklfowTerminateExclusionListParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(post, apply, delete, action, $location, propertylist, eventFilter, minThreadPoolSize, maxThreadPoolSize, cqWcmWorkflowTerminateOnActivate, cqWcmWorklfowTerminateExclusionList, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmWorkflowImplWcmWorkflowServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmWorkflowImplWcmWorkflowServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWcmWorkflowImplWorkflowPackageInfoProvider
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWCMWORKFLOWIMPLWORKFLOWPACKAGEINFOPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWcmWorkflowImplWorkflowPackageInfoProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray workflowpackageinfoproviderFilterParam = message.body().getJsonArray("workflowpackageinfoprovider.filter");
                List<String> workflowpackageinfoproviderFilter = (workflowpackageinfoproviderFilterParam == null) ? null : Json.mapper.readValue(workflowpackageinfoproviderFilterParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String workflowpackageinfoproviderFilterRootpathParam = message.body().getString("workflowpackageinfoprovider.filter.rootpath");
                String workflowpackageinfoproviderFilterRootpath = (workflowpackageinfoproviderFilterRootpathParam == null) ? null : workflowpackageinfoproviderFilterRootpathParam;
                service.comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(post, apply, delete, action, $location, propertylist, workflowpackageinfoproviderFilter, workflowpackageinfoproviderFilterRootpath, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWcmWorkflowImplWorkflowPackageInfoProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWcmWorkflowImplWorkflowPackageInfoProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWidgetImplHtmlLibraryManagerImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWIDGETIMPLHTMLLIBRARYMANAGERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWidgetImplHtmlLibraryManagerImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String htmllibmanagerClientmanagerParam = message.body().getString("htmllibmanager.clientmanager");
                String htmllibmanagerClientmanager = (htmllibmanagerClientmanagerParam == null) ? null : htmllibmanagerClientmanagerParam;
                String htmllibmanagerDebugParam = message.body().getString("htmllibmanager.debug");
                Boolean htmllibmanagerDebug = (htmllibmanagerDebugParam == null) ? null : Json.mapper.readValue(htmllibmanagerDebugParam, Boolean.class);
                String htmllibmanagerDebugConsoleParam = message.body().getString("htmllibmanager.debug.console");
                Boolean htmllibmanagerDebugConsole = (htmllibmanagerDebugConsoleParam == null) ? null : Json.mapper.readValue(htmllibmanagerDebugConsoleParam, Boolean.class);
                String htmllibmanagerDebugInitJsParam = message.body().getString("htmllibmanager.debug.init.js");
                String htmllibmanagerDebugInitJs = (htmllibmanagerDebugInitJsParam == null) ? null : htmllibmanagerDebugInitJsParam;
                String htmllibmanagerDefaultthemenameParam = message.body().getString("htmllibmanager.defaultthemename");
                String htmllibmanagerDefaultthemename = (htmllibmanagerDefaultthemenameParam == null) ? null : htmllibmanagerDefaultthemenameParam;
                String htmllibmanagerDefaultuserthemenameParam = message.body().getString("htmllibmanager.defaultuserthemename");
                String htmllibmanagerDefaultuserthemename = (htmllibmanagerDefaultuserthemenameParam == null) ? null : htmllibmanagerDefaultuserthemenameParam;
                String htmllibmanagerFirebuglitePathParam = message.body().getString("htmllibmanager.firebuglite.path");
                String htmllibmanagerFirebuglitePath = (htmllibmanagerFirebuglitePathParam == null) ? null : htmllibmanagerFirebuglitePathParam;
                String htmllibmanagerForceCQUrlInfoParam = message.body().getString("htmllibmanager.forceCQUrlInfo");
                Boolean htmllibmanagerForceCQUrlInfo = (htmllibmanagerForceCQUrlInfoParam == null) ? null : Json.mapper.readValue(htmllibmanagerForceCQUrlInfoParam, Boolean.class);
                String htmllibmanagerGzipParam = message.body().getString("htmllibmanager.gzip");
                Boolean htmllibmanagerGzip = (htmllibmanagerGzipParam == null) ? null : Json.mapper.readValue(htmllibmanagerGzipParam, Boolean.class);
                String htmllibmanagerMaxageParam = message.body().getString("htmllibmanager.maxage");
                Integer htmllibmanagerMaxage = (htmllibmanagerMaxageParam == null) ? null : Json.mapper.readValue(htmllibmanagerMaxageParam, Integer.class);
                String htmllibmanagerMaxDataUriSizeParam = message.body().getString("htmllibmanager.maxDataUriSize");
                Integer htmllibmanagerMaxDataUriSize = (htmllibmanagerMaxDataUriSizeParam == null) ? null : Json.mapper.readValue(htmllibmanagerMaxDataUriSizeParam, Integer.class);
                String htmllibmanagerMinifyParam = message.body().getString("htmllibmanager.minify");
                Boolean htmllibmanagerMinify = (htmllibmanagerMinifyParam == null) ? null : Json.mapper.readValue(htmllibmanagerMinifyParam, Boolean.class);
                JsonArray htmllibmanagerPathListParam = message.body().getJsonArray("htmllibmanager.path.list");
                List<String> htmllibmanagerPathList = (htmllibmanagerPathListParam == null) ? null : Json.mapper.readValue(htmllibmanagerPathListParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String htmllibmanagerTimingParam = message.body().getString("htmllibmanager.timing");
                Boolean htmllibmanagerTiming = (htmllibmanagerTimingParam == null) ? null : Json.mapper.readValue(htmllibmanagerTimingParam, Boolean.class);
                service.comDayCqWidgetImplHtmlLibraryManagerImpl(post, apply, delete, action, $location, propertylist, htmllibmanagerClientmanager, htmllibmanagerDebug, htmllibmanagerDebugConsole, htmllibmanagerDebugInitJs, htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename, htmllibmanagerFirebuglitePath, htmllibmanagerForceCQUrlInfo, htmllibmanagerGzip, htmllibmanagerMaxage, htmllibmanagerMaxDataUriSize, htmllibmanagerMinify, htmllibmanagerPathList, htmllibmanagerTiming, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWidgetImplHtmlLibraryManagerImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWidgetImplHtmlLibraryManagerImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWidgetImplWidgetExtensionProviderImpl
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWIDGETIMPLWIDGETEXTENSIONPROVIDERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWidgetImplWidgetExtensionProviderImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray extendableWidgetsParam = message.body().getJsonArray("extendable.widgets");
                List<String> extendableWidgets = (extendableWidgetsParam == null) ? null : Json.mapper.readValue(extendableWidgetsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String widgetextensionproviderDebugParam = message.body().getString("widgetextensionprovider.debug");
                Boolean widgetextensionproviderDebug = (widgetextensionproviderDebugParam == null) ? null : Json.mapper.readValue(widgetextensionproviderDebugParam, Boolean.class);
                service.comDayCqWidgetImplWidgetExtensionProviderImpl(post, apply, delete, action, $location, propertylist, extendableWidgets, widgetextensionproviderDebug, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWidgetImplWidgetExtensionProviderImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWidgetImplWidgetExtensionProviderImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWorkflowImplEmailEMailNotificationService
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWORKFLOWIMPLEMAILEMAILNOTIFICATIONSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWorkflowImplEmailEMailNotificationService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String fromAddressParam = message.body().getString("from.address");
                String fromAddress = (fromAddressParam == null) ? null : fromAddressParam;
                String hostPrefixParam = message.body().getString("host.prefix");
                String hostPrefix = (hostPrefixParam == null) ? null : hostPrefixParam;
                String notifyOnabortParam = message.body().getString("notify.onabort");
                Boolean notifyOnabort = (notifyOnabortParam == null) ? null : Json.mapper.readValue(notifyOnabortParam, Boolean.class);
                String notifyOncompleteParam = message.body().getString("notify.oncomplete");
                Boolean notifyOncomplete = (notifyOncompleteParam == null) ? null : Json.mapper.readValue(notifyOncompleteParam, Boolean.class);
                String notifyOncontainercompleteParam = message.body().getString("notify.oncontainercomplete");
                Boolean notifyOncontainercomplete = (notifyOncontainercompleteParam == null) ? null : Json.mapper.readValue(notifyOncontainercompleteParam, Boolean.class);
                String notifyUseronlyParam = message.body().getString("notify.useronly");
                Boolean notifyUseronly = (notifyUseronlyParam == null) ? null : Json.mapper.readValue(notifyUseronlyParam, Boolean.class);
                service.comDayCqWorkflowImplEmailEMailNotificationService(post, apply, delete, action, $location, propertylist, fromAddress, hostPrefix, notifyOnabort, notifyOncomplete, notifyOncontainercomplete, notifyUseronly, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWorkflowImplEmailEMailNotificationService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWorkflowImplEmailEMailNotificationService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCqWorkflowImplEmailTaskEMailNotificationService
        vertx.eventBus().<JsonObject> consumer(COMDAYCQWORKFLOWIMPLEMAILTASKEMAILNOTIFICATIONSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCqWorkflowImplEmailTaskEMailNotificationService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String notifyOnupdateParam = message.body().getString("notify.onupdate");
                Boolean notifyOnupdate = (notifyOnupdateParam == null) ? null : Json.mapper.readValue(notifyOnupdateParam, Boolean.class);
                String notifyOncompleteParam = message.body().getString("notify.oncomplete");
                Boolean notifyOncomplete = (notifyOncompleteParam == null) ? null : Json.mapper.readValue(notifyOncompleteParam, Boolean.class);
                service.comDayCqWorkflowImplEmailTaskEMailNotificationService(post, apply, delete, action, $location, propertylist, notifyOnupdate, notifyOncomplete, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCqWorkflowImplEmailTaskEMailNotificationService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCqWorkflowImplEmailTaskEMailNotificationService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCrxSecurityTokenImplImplTokenAuthenticationHandler
        vertx.eventBus().<JsonObject> consumer(COMDAYCRXSECURITYTOKENIMPLIMPLTOKENAUTHENTICATIONHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCrxSecurityTokenImplImplTokenAuthenticationHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pathParam = message.body().getString("path");
                String path = (pathParam == null) ? null : pathParam;
                String tokenRequiredAttrParam = message.body().getString("token.required.attr");
                String tokenRequiredAttr = (tokenRequiredAttrParam == null) ? null : tokenRequiredAttrParam;
                String tokenAlternateUrlParam = message.body().getString("token.alternate.url");
                String tokenAlternateUrl = (tokenAlternateUrlParam == null) ? null : tokenAlternateUrlParam;
                String tokenEncapsulatedParam = message.body().getString("token.encapsulated");
                Boolean tokenEncapsulated = (tokenEncapsulatedParam == null) ? null : Json.mapper.readValue(tokenEncapsulatedParam, Boolean.class);
                JsonArray skipTokenRefreshParam = message.body().getJsonArray("skip.token.refresh");
                List<String> skipTokenRefresh = (skipTokenRefreshParam == null) ? null : Json.mapper.readValue(skipTokenRefreshParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, tokenRequiredAttr, tokenAlternateUrl, tokenEncapsulated, skipTokenRefresh, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCrxSecurityTokenImplImplTokenAuthenticationHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCrxSecurityTokenImplImplTokenAuthenticationHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for comDayCrxSecurityTokenImplTokenCleanupTask
        vertx.eventBus().<JsonObject> consumer(COMDAYCRXSECURITYTOKENIMPLTOKENCLEANUPTASK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "comDayCrxSecurityTokenImplTokenCleanupTask";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enableTokenCleanupTaskParam = message.body().getString("enable.token.cleanup.task");
                Boolean enableTokenCleanupTask = (enableTokenCleanupTaskParam == null) ? null : Json.mapper.readValue(enableTokenCleanupTaskParam, Boolean.class);
                String schedulerExpressionParam = message.body().getString("scheduler.expression");
                String schedulerExpression = (schedulerExpressionParam == null) ? null : schedulerExpressionParam;
                String batchSizeParam = message.body().getString("batch.size");
                Integer batchSize = (batchSizeParam == null) ? null : Json.mapper.readValue(batchSizeParam, Integer.class);
                service.comDayCrxSecurityTokenImplTokenCleanupTask(post, apply, delete, action, $location, propertylist, enableTokenCleanupTask, schedulerExpression, batchSize, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "comDayCrxSecurityTokenImplTokenCleanupTask");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("comDayCrxSecurityTokenImplTokenCleanupTask", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for guideLocalizationService
        vertx.eventBus().<JsonObject> consumer(GUIDELOCALIZATIONSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "guideLocalizationService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray supportedLocalesParam = message.body().getJsonArray("supportedLocales");
                List<String> supportedLocales = (supportedLocalesParam == null) ? null : Json.mapper.readValue(supportedLocalesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray localizablePropertiesParam = message.body().getJsonArray("Localizable Properties");
                List<String> localizableProperties = (localizablePropertiesParam == null) ? null : Json.mapper.readValue(localizablePropertiesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.guideLocalizationService(post, apply, delete, action, $location, propertylist, supportedLocales, localizableProperties, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "guideLocalizationService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("guideLocalizationService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for MessagingUserComponentFactory
        vertx.eventBus().<JsonObject> consumer(MESSAGINGUSERCOMPONENTFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "MessagingUserComponentFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String priorityParam = message.body().getString("priority");
                Integer priority = (priorityParam == null) ? null : Json.mapper.readValue(priorityParam, Integer.class);
                service.messagingUserComponentFactory(post, apply, delete, action, $location, propertylist, priority, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "MessagingUserComponentFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("MessagingUserComponentFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheAriesJmxFrameworkStateConfig
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEARIESJMXFRAMEWORKSTATECONFIG_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheAriesJmxFrameworkStateConfig";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String attributeChangeNotificationEnabledParam = message.body().getString("attributeChangeNotificationEnabled");
                Boolean attributeChangeNotificationEnabled = (attributeChangeNotificationEnabledParam == null) ? null : Json.mapper.readValue(attributeChangeNotificationEnabledParam, Boolean.class);
                service.orgApacheAriesJmxFrameworkStateConfig(post, apply, delete, action, $location, propertylist, attributeChangeNotificationEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheAriesJmxFrameworkStateConfig");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheAriesJmxFrameworkStateConfig", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheFelixEventadminImplEventAdmin
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEFELIXEVENTADMINIMPLEVENTADMIN_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheFelixEventadminImplEventAdmin";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String orgApacheFelixEventadminThreadPoolSizeParam = message.body().getString("org.apache.felix.eventadmin.ThreadPoolSize");
                Integer orgApacheFelixEventadminThreadPoolSize = (orgApacheFelixEventadminThreadPoolSizeParam == null) ? null : Json.mapper.readValue(orgApacheFelixEventadminThreadPoolSizeParam, Integer.class);
                String orgApacheFelixEventadminAsyncToSyncThreadRatioParam = message.body().getString("org.apache.felix.eventadmin.AsyncToSyncThreadRatio");
                BigDecimal orgApacheFelixEventadminAsyncToSyncThreadRatio = (orgApacheFelixEventadminAsyncToSyncThreadRatioParam == null) ? null : Json.mapper.readValue(orgApacheFelixEventadminAsyncToSyncThreadRatioParam, BigDecimal.class);
                String orgApacheFelixEventadminTimeoutParam = message.body().getString("org.apache.felix.eventadmin.Timeout");
                Integer orgApacheFelixEventadminTimeout = (orgApacheFelixEventadminTimeoutParam == null) ? null : Json.mapper.readValue(orgApacheFelixEventadminTimeoutParam, Integer.class);
                String orgApacheFelixEventadminRequireTopicParam = message.body().getString("org.apache.felix.eventadmin.RequireTopic");
                Boolean orgApacheFelixEventadminRequireTopic = (orgApacheFelixEventadminRequireTopicParam == null) ? null : Json.mapper.readValue(orgApacheFelixEventadminRequireTopicParam, Boolean.class);
                JsonArray orgApacheFelixEventadminIgnoreTimeoutParam = message.body().getJsonArray("org.apache.felix.eventadmin.IgnoreTimeout");
                List<String> orgApacheFelixEventadminIgnoreTimeout = (orgApacheFelixEventadminIgnoreTimeoutParam == null) ? null : Json.mapper.readValue(orgApacheFelixEventadminIgnoreTimeoutParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray orgApacheFelixEventadminIgnoreTopicParam = message.body().getJsonArray("org.apache.felix.eventadmin.IgnoreTopic");
                List<String> orgApacheFelixEventadminIgnoreTopic = (orgApacheFelixEventadminIgnoreTopicParam == null) ? null : Json.mapper.readValue(orgApacheFelixEventadminIgnoreTopicParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheFelixEventadminImplEventAdmin(post, apply, delete, action, $location, propertylist, orgApacheFelixEventadminThreadPoolSize, orgApacheFelixEventadminAsyncToSyncThreadRatio, orgApacheFelixEventadminTimeout, orgApacheFelixEventadminRequireTopic, orgApacheFelixEventadminIgnoreTimeout, orgApacheFelixEventadminIgnoreTopic, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheFelixEventadminImplEventAdmin");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheFelixEventadminImplEventAdmin", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheFelixHttp
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEFELIXHTTP_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheFelixHttp";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String orgApacheFelixHttpHostParam = message.body().getString("org.apache.felix.http.host");
                String orgApacheFelixHttpHost = (orgApacheFelixHttpHostParam == null) ? null : orgApacheFelixHttpHostParam;
                String orgApacheFelixHttpEnableParam = message.body().getString("org.apache.felix.http.enable");
                Boolean orgApacheFelixHttpEnable = (orgApacheFelixHttpEnableParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpEnableParam, Boolean.class);
                String orgOsgiServiceHttpPortParam = message.body().getString("org.osgi.service.http.port");
                Integer orgOsgiServiceHttpPort = (orgOsgiServiceHttpPortParam == null) ? null : Json.mapper.readValue(orgOsgiServiceHttpPortParam, Integer.class);
                String orgApacheFelixHttpTimeoutParam = message.body().getString("org.apache.felix.http.timeout");
                Integer orgApacheFelixHttpTimeout = (orgApacheFelixHttpTimeoutParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpTimeoutParam, Integer.class);
                String orgApacheFelixHttpsEnableParam = message.body().getString("org.apache.felix.https.enable");
                Boolean orgApacheFelixHttpsEnable = (orgApacheFelixHttpsEnableParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpsEnableParam, Boolean.class);
                String orgOsgiServiceHttpPortSecureParam = message.body().getString("org.osgi.service.http.port.secure");
                Integer orgOsgiServiceHttpPortSecure = (orgOsgiServiceHttpPortSecureParam == null) ? null : Json.mapper.readValue(orgOsgiServiceHttpPortSecureParam, Integer.class);
                String orgApacheFelixHttpsKeystoreParam = message.body().getString("org.apache.felix.https.keystore");
                String orgApacheFelixHttpsKeystore = (orgApacheFelixHttpsKeystoreParam == null) ? null : orgApacheFelixHttpsKeystoreParam;
                String orgApacheFelixHttpsKeystorePasswordParam = message.body().getString("org.apache.felix.https.keystore.password");
                String orgApacheFelixHttpsKeystorePassword = (orgApacheFelixHttpsKeystorePasswordParam == null) ? null : orgApacheFelixHttpsKeystorePasswordParam;
                String orgApacheFelixHttpsKeystoreKeyPasswordParam = message.body().getString("org.apache.felix.https.keystore.key.password");
                String orgApacheFelixHttpsKeystoreKeyPassword = (orgApacheFelixHttpsKeystoreKeyPasswordParam == null) ? null : orgApacheFelixHttpsKeystoreKeyPasswordParam;
                String orgApacheFelixHttpsTruststoreParam = message.body().getString("org.apache.felix.https.truststore");
                String orgApacheFelixHttpsTruststore = (orgApacheFelixHttpsTruststoreParam == null) ? null : orgApacheFelixHttpsTruststoreParam;
                String orgApacheFelixHttpsTruststorePasswordParam = message.body().getString("org.apache.felix.https.truststore.password");
                String orgApacheFelixHttpsTruststorePassword = (orgApacheFelixHttpsTruststorePasswordParam == null) ? null : orgApacheFelixHttpsTruststorePasswordParam;
                String orgApacheFelixHttpsClientcertificateParam = message.body().getString("org.apache.felix.https.clientcertificate");
                String orgApacheFelixHttpsClientcertificate = (orgApacheFelixHttpsClientcertificateParam == null) ? null : orgApacheFelixHttpsClientcertificateParam;
                String orgApacheFelixHttpContextPathParam = message.body().getString("org.apache.felix.http.context_path");
                String orgApacheFelixHttpContextPath = (orgApacheFelixHttpContextPathParam == null) ? null : orgApacheFelixHttpContextPathParam;
                String orgApacheFelixHttpMbeansParam = message.body().getString("org.apache.felix.http.mbeans");
                Boolean orgApacheFelixHttpMbeans = (orgApacheFelixHttpMbeansParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpMbeansParam, Boolean.class);
                String orgApacheFelixHttpSessionTimeoutParam = message.body().getString("org.apache.felix.http.session.timeout");
                Integer orgApacheFelixHttpSessionTimeout = (orgApacheFelixHttpSessionTimeoutParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpSessionTimeoutParam, Integer.class);
                String orgApacheFelixHttpJettyThreadpoolMaxParam = message.body().getString("org.apache.felix.http.jetty.threadpool.max");
                Integer orgApacheFelixHttpJettyThreadpoolMax = (orgApacheFelixHttpJettyThreadpoolMaxParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpJettyThreadpoolMaxParam, Integer.class);
                String orgApacheFelixHttpJettyAcceptorsParam = message.body().getString("org.apache.felix.http.jetty.acceptors");
                Integer orgApacheFelixHttpJettyAcceptors = (orgApacheFelixHttpJettyAcceptorsParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpJettyAcceptorsParam, Integer.class);
                String orgApacheFelixHttpJettySelectorsParam = message.body().getString("org.apache.felix.http.jetty.selectors");
                Integer orgApacheFelixHttpJettySelectors = (orgApacheFelixHttpJettySelectorsParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpJettySelectorsParam, Integer.class);
                String orgApacheFelixHttpJettyHeaderBufferSizeParam = message.body().getString("org.apache.felix.http.jetty.headerBufferSize");
                Integer orgApacheFelixHttpJettyHeaderBufferSize = (orgApacheFelixHttpJettyHeaderBufferSizeParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpJettyHeaderBufferSizeParam, Integer.class);
                String orgApacheFelixHttpJettyRequestBufferSizeParam = message.body().getString("org.apache.felix.http.jetty.requestBufferSize");
                Integer orgApacheFelixHttpJettyRequestBufferSize = (orgApacheFelixHttpJettyRequestBufferSizeParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpJettyRequestBufferSizeParam, Integer.class);
                String orgApacheFelixHttpJettyResponseBufferSizeParam = message.body().getString("org.apache.felix.http.jetty.responseBufferSize");
                Integer orgApacheFelixHttpJettyResponseBufferSize = (orgApacheFelixHttpJettyResponseBufferSizeParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpJettyResponseBufferSizeParam, Integer.class);
                String orgApacheFelixHttpJettyMaxFormSizeParam = message.body().getString("org.apache.felix.http.jetty.maxFormSize");
                Integer orgApacheFelixHttpJettyMaxFormSize = (orgApacheFelixHttpJettyMaxFormSizeParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpJettyMaxFormSizeParam, Integer.class);
                JsonArray orgApacheFelixHttpPathExclusionsParam = message.body().getJsonArray("org.apache.felix.http.path_exclusions");
                List<String> orgApacheFelixHttpPathExclusions = (orgApacheFelixHttpPathExclusionsParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpPathExclusionsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray orgApacheFelixHttpsJettyCiphersuitesExcludedParam = message.body().getJsonArray("org.apache.felix.https.jetty.ciphersuites.excluded");
                List<String> orgApacheFelixHttpsJettyCiphersuitesExcluded = (orgApacheFelixHttpsJettyCiphersuitesExcludedParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpsJettyCiphersuitesExcludedParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray orgApacheFelixHttpsJettyCiphersuitesIncludedParam = message.body().getJsonArray("org.apache.felix.https.jetty.ciphersuites.included");
                List<String> orgApacheFelixHttpsJettyCiphersuitesIncluded = (orgApacheFelixHttpsJettyCiphersuitesIncludedParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpsJettyCiphersuitesIncludedParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String orgApacheFelixHttpJettySendServerHeaderParam = message.body().getString("org.apache.felix.http.jetty.sendServerHeader");
                Boolean orgApacheFelixHttpJettySendServerHeader = (orgApacheFelixHttpJettySendServerHeaderParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpJettySendServerHeaderParam, Boolean.class);
                JsonArray orgApacheFelixHttpsJettyProtocolsIncludedParam = message.body().getJsonArray("org.apache.felix.https.jetty.protocols.included");
                List<String> orgApacheFelixHttpsJettyProtocolsIncluded = (orgApacheFelixHttpsJettyProtocolsIncludedParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpsJettyProtocolsIncludedParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray orgApacheFelixHttpsJettyProtocolsExcludedParam = message.body().getJsonArray("org.apache.felix.https.jetty.protocols.excluded");
                List<String> orgApacheFelixHttpsJettyProtocolsExcluded = (orgApacheFelixHttpsJettyProtocolsExcludedParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpsJettyProtocolsExcludedParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String orgApacheFelixProxyLoadBalancerConnectionEnableParam = message.body().getString("org.apache.felix.proxy.load.balancer.connection.enable");
                Boolean orgApacheFelixProxyLoadBalancerConnectionEnable = (orgApacheFelixProxyLoadBalancerConnectionEnableParam == null) ? null : Json.mapper.readValue(orgApacheFelixProxyLoadBalancerConnectionEnableParam, Boolean.class);
                String orgApacheFelixHttpsJettyRenegotiateAllowedParam = message.body().getString("org.apache.felix.https.jetty.renegotiateAllowed");
                Boolean orgApacheFelixHttpsJettyRenegotiateAllowed = (orgApacheFelixHttpsJettyRenegotiateAllowedParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpsJettyRenegotiateAllowedParam, Boolean.class);
                String orgApacheFelixHttpsJettySessionCookieHttpOnlyParam = message.body().getString("org.apache.felix.https.jetty.session.cookie.httpOnly");
                Boolean orgApacheFelixHttpsJettySessionCookieHttpOnly = (orgApacheFelixHttpsJettySessionCookieHttpOnlyParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpsJettySessionCookieHttpOnlyParam, Boolean.class);
                String orgApacheFelixHttpsJettySessionCookieSecureParam = message.body().getString("org.apache.felix.https.jetty.session.cookie.secure");
                Boolean orgApacheFelixHttpsJettySessionCookieSecure = (orgApacheFelixHttpsJettySessionCookieSecureParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpsJettySessionCookieSecureParam, Boolean.class);
                String orgEclipseJettyServletSessionIdPathParameterNameParam = message.body().getString("org.eclipse.jetty.servlet.SessionIdPathParameterName");
                String orgEclipseJettyServletSessionIdPathParameterName = (orgEclipseJettyServletSessionIdPathParameterNameParam == null) ? null : orgEclipseJettyServletSessionIdPathParameterNameParam;
                String orgEclipseJettyServletCheckingRemoteSessionIdEncodingParam = message.body().getString("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding");
                Boolean orgEclipseJettyServletCheckingRemoteSessionIdEncoding = (orgEclipseJettyServletCheckingRemoteSessionIdEncodingParam == null) ? null : Json.mapper.readValue(orgEclipseJettyServletCheckingRemoteSessionIdEncodingParam, Boolean.class);
                String orgEclipseJettyServletSessionCookieParam = message.body().getString("org.eclipse.jetty.servlet.SessionCookie");
                String orgEclipseJettyServletSessionCookie = (orgEclipseJettyServletSessionCookieParam == null) ? null : orgEclipseJettyServletSessionCookieParam;
                String orgEclipseJettyServletSessionDomainParam = message.body().getString("org.eclipse.jetty.servlet.SessionDomain");
                String orgEclipseJettyServletSessionDomain = (orgEclipseJettyServletSessionDomainParam == null) ? null : orgEclipseJettyServletSessionDomainParam;
                String orgEclipseJettyServletSessionPathParam = message.body().getString("org.eclipse.jetty.servlet.SessionPath");
                String orgEclipseJettyServletSessionPath = (orgEclipseJettyServletSessionPathParam == null) ? null : orgEclipseJettyServletSessionPathParam;
                String orgEclipseJettyServletMaxAgeParam = message.body().getString("org.eclipse.jetty.servlet.MaxAge");
                Integer orgEclipseJettyServletMaxAge = (orgEclipseJettyServletMaxAgeParam == null) ? null : Json.mapper.readValue(orgEclipseJettyServletMaxAgeParam, Integer.class);
                String orgApacheFelixHttpNameParam = message.body().getString("org.apache.felix.http.name");
                String orgApacheFelixHttpName = (orgApacheFelixHttpNameParam == null) ? null : orgApacheFelixHttpNameParam;
                String orgApacheFelixJettyGziphandlerEnableParam = message.body().getString("org.apache.felix.jetty.gziphandler.enable");
                Boolean orgApacheFelixJettyGziphandlerEnable = (orgApacheFelixJettyGziphandlerEnableParam == null) ? null : Json.mapper.readValue(orgApacheFelixJettyGziphandlerEnableParam, Boolean.class);
                String orgApacheFelixJettyGzipMinGzipSizeParam = message.body().getString("org.apache.felix.jetty.gzip.minGzipSize");
                Integer orgApacheFelixJettyGzipMinGzipSize = (orgApacheFelixJettyGzipMinGzipSizeParam == null) ? null : Json.mapper.readValue(orgApacheFelixJettyGzipMinGzipSizeParam, Integer.class);
                String orgApacheFelixJettyGzipCompressionLevelParam = message.body().getString("org.apache.felix.jetty.gzip.compressionLevel");
                Integer orgApacheFelixJettyGzipCompressionLevel = (orgApacheFelixJettyGzipCompressionLevelParam == null) ? null : Json.mapper.readValue(orgApacheFelixJettyGzipCompressionLevelParam, Integer.class);
                String orgApacheFelixJettyGzipInflateBufferSizeParam = message.body().getString("org.apache.felix.jetty.gzip.inflateBufferSize");
                Integer orgApacheFelixJettyGzipInflateBufferSize = (orgApacheFelixJettyGzipInflateBufferSizeParam == null) ? null : Json.mapper.readValue(orgApacheFelixJettyGzipInflateBufferSizeParam, Integer.class);
                String orgApacheFelixJettyGzipSyncFlushParam = message.body().getString("org.apache.felix.jetty.gzip.syncFlush");
                Boolean orgApacheFelixJettyGzipSyncFlush = (orgApacheFelixJettyGzipSyncFlushParam == null) ? null : Json.mapper.readValue(orgApacheFelixJettyGzipSyncFlushParam, Boolean.class);
                JsonArray orgApacheFelixJettyGzipExcludedUserAgentsParam = message.body().getJsonArray("org.apache.felix.jetty.gzip.excludedUserAgents");
                List<String> orgApacheFelixJettyGzipExcludedUserAgents = (orgApacheFelixJettyGzipExcludedUserAgentsParam == null) ? null : Json.mapper.readValue(orgApacheFelixJettyGzipExcludedUserAgentsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray orgApacheFelixJettyGzipIncludedMethodsParam = message.body().getJsonArray("org.apache.felix.jetty.gzip.includedMethods");
                List<String> orgApacheFelixJettyGzipIncludedMethods = (orgApacheFelixJettyGzipIncludedMethodsParam == null) ? null : Json.mapper.readValue(orgApacheFelixJettyGzipIncludedMethodsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray orgApacheFelixJettyGzipExcludedMethodsParam = message.body().getJsonArray("org.apache.felix.jetty.gzip.excludedMethods");
                List<String> orgApacheFelixJettyGzipExcludedMethods = (orgApacheFelixJettyGzipExcludedMethodsParam == null) ? null : Json.mapper.readValue(orgApacheFelixJettyGzipExcludedMethodsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray orgApacheFelixJettyGzipIncludedPathsParam = message.body().getJsonArray("org.apache.felix.jetty.gzip.includedPaths");
                List<String> orgApacheFelixJettyGzipIncludedPaths = (orgApacheFelixJettyGzipIncludedPathsParam == null) ? null : Json.mapper.readValue(orgApacheFelixJettyGzipIncludedPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray orgApacheFelixJettyGzipExcludedPathsParam = message.body().getJsonArray("org.apache.felix.jetty.gzip.excludedPaths");
                List<String> orgApacheFelixJettyGzipExcludedPaths = (orgApacheFelixJettyGzipExcludedPathsParam == null) ? null : Json.mapper.readValue(orgApacheFelixJettyGzipExcludedPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray orgApacheFelixJettyGzipIncludedMimeTypesParam = message.body().getJsonArray("org.apache.felix.jetty.gzip.includedMimeTypes");
                List<String> orgApacheFelixJettyGzipIncludedMimeTypes = (orgApacheFelixJettyGzipIncludedMimeTypesParam == null) ? null : Json.mapper.readValue(orgApacheFelixJettyGzipIncludedMimeTypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray orgApacheFelixJettyGzipExcludedMimeTypesParam = message.body().getJsonArray("org.apache.felix.jetty.gzip.excludedMimeTypes");
                List<String> orgApacheFelixJettyGzipExcludedMimeTypes = (orgApacheFelixJettyGzipExcludedMimeTypesParam == null) ? null : Json.mapper.readValue(orgApacheFelixJettyGzipExcludedMimeTypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String orgApacheFelixHttpSessionInvalidateParam = message.body().getString("org.apache.felix.http.session.invalidate");
                Boolean orgApacheFelixHttpSessionInvalidate = (orgApacheFelixHttpSessionInvalidateParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpSessionInvalidateParam, Boolean.class);
                String orgApacheFelixHttpSessionUniqueidParam = message.body().getString("org.apache.felix.http.session.uniqueid");
                Boolean orgApacheFelixHttpSessionUniqueid = (orgApacheFelixHttpSessionUniqueidParam == null) ? null : Json.mapper.readValue(orgApacheFelixHttpSessionUniqueidParam, Boolean.class);
                service.orgApacheFelixHttp(post, apply, delete, action, $location, propertylist, orgApacheFelixHttpHost, orgApacheFelixHttpEnable, orgOsgiServiceHttpPort, orgApacheFelixHttpTimeout, orgApacheFelixHttpsEnable, orgOsgiServiceHttpPortSecure, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpContextPath, orgApacheFelixHttpMbeans, orgApacheFelixHttpSessionTimeout, orgApacheFelixHttpJettyThreadpoolMax, orgApacheFelixHttpJettyAcceptors, orgApacheFelixHttpJettySelectors, orgApacheFelixHttpJettyHeaderBufferSize, orgApacheFelixHttpJettyRequestBufferSize, orgApacheFelixHttpJettyResponseBufferSize, orgApacheFelixHttpJettyMaxFormSize, orgApacheFelixHttpPathExclusions, orgApacheFelixHttpsJettyCiphersuitesExcluded, orgApacheFelixHttpsJettyCiphersuitesIncluded, orgApacheFelixHttpJettySendServerHeader, orgApacheFelixHttpsJettyProtocolsIncluded, orgApacheFelixHttpsJettyProtocolsExcluded, orgApacheFelixProxyLoadBalancerConnectionEnable, orgApacheFelixHttpsJettyRenegotiateAllowed, orgApacheFelixHttpsJettySessionCookieHttpOnly, orgApacheFelixHttpsJettySessionCookieSecure, orgEclipseJettyServletSessionIdPathParameterName, orgEclipseJettyServletCheckingRemoteSessionIdEncoding, orgEclipseJettyServletSessionCookie, orgEclipseJettyServletSessionDomain, orgEclipseJettyServletSessionPath, orgEclipseJettyServletMaxAge, orgApacheFelixHttpName, orgApacheFelixJettyGziphandlerEnable, orgApacheFelixJettyGzipMinGzipSize, orgApacheFelixJettyGzipCompressionLevel, orgApacheFelixJettyGzipInflateBufferSize, orgApacheFelixJettyGzipSyncFlush, orgApacheFelixJettyGzipExcludedUserAgents, orgApacheFelixJettyGzipIncludedMethods, orgApacheFelixJettyGzipExcludedMethods, orgApacheFelixJettyGzipIncludedPaths, orgApacheFelixJettyGzipExcludedPaths, orgApacheFelixJettyGzipIncludedMimeTypes, orgApacheFelixJettyGzipExcludedMimeTypes, orgApacheFelixHttpSessionInvalidate, orgApacheFelixHttpSessionUniqueid, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheFelixHttp");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheFelixHttp", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheFelixHttpSslfilterSslFilter
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEFELIXHTTPSSLFILTERSSLFILTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheFelixHttpSslfilterSslFilter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String sslForwardHeaderParam = message.body().getString("ssl-forward.header");
                String sslForwardHeader = (sslForwardHeaderParam == null) ? null : sslForwardHeaderParam;
                String sslForwardValueParam = message.body().getString("ssl-forward.value");
                String sslForwardValue = (sslForwardValueParam == null) ? null : sslForwardValueParam;
                String sslForwardCertHeaderParam = message.body().getString("ssl-forward-cert.header");
                String sslForwardCertHeader = (sslForwardCertHeaderParam == null) ? null : sslForwardCertHeaderParam;
                String rewriteAbsoluteUrlsParam = message.body().getString("rewrite.absolute.urls");
                Boolean rewriteAbsoluteUrls = (rewriteAbsoluteUrlsParam == null) ? null : Json.mapper.readValue(rewriteAbsoluteUrlsParam, Boolean.class);
                service.orgApacheFelixHttpSslfilterSslFilter(post, apply, delete, action, $location, propertylist, sslForwardHeader, sslForwardValue, sslForwardCertHeader, rewriteAbsoluteUrls, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheFelixHttpSslfilterSslFilter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheFelixHttpSslfilterSslFilter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheFelixJaasConfigurationFactory
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEFELIXJAASCONFIGURATIONFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheFelixJaasConfigurationFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String jaasControlFlagParam = message.body().getString("jaas.controlFlag");
                String jaasControlFlag = (jaasControlFlagParam == null) ? null : jaasControlFlagParam;
                String jaasRankingParam = message.body().getString("jaas.ranking");
                Integer jaasRanking = (jaasRankingParam == null) ? null : Json.mapper.readValue(jaasRankingParam, Integer.class);
                String jaasRealmNameParam = message.body().getString("jaas.realmName");
                String jaasRealmName = (jaasRealmNameParam == null) ? null : jaasRealmNameParam;
                String jaasClassnameParam = message.body().getString("jaas.classname");
                String jaasClassname = (jaasClassnameParam == null) ? null : jaasClassnameParam;
                JsonArray jaasOptionsParam = message.body().getJsonArray("jaas.options");
                List<String> jaasOptions = (jaasOptionsParam == null) ? null : Json.mapper.readValue(jaasOptionsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheFelixJaasConfigurationFactory(post, apply, delete, action, $location, propertylist, jaasControlFlag, jaasRanking, jaasRealmName, jaasClassname, jaasOptions, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheFelixJaasConfigurationFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheFelixJaasConfigurationFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheFelixJaasConfigurationSpi
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEFELIXJAASCONFIGURATIONSPI_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheFelixJaasConfigurationSpi";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String jaasDefaultRealmNameParam = message.body().getString("jaas.defaultRealmName");
                String jaasDefaultRealmName = (jaasDefaultRealmNameParam == null) ? null : jaasDefaultRealmNameParam;
                String jaasConfigProviderNameParam = message.body().getString("jaas.configProviderName");
                String jaasConfigProviderName = (jaasConfigProviderNameParam == null) ? null : jaasConfigProviderNameParam;
                String jaasGlobalConfigPolicyParam = message.body().getString("jaas.globalConfigPolicy");
                String jaasGlobalConfigPolicy = (jaasGlobalConfigPolicyParam == null) ? null : jaasGlobalConfigPolicyParam;
                service.orgApacheFelixJaasConfigurationSpi(post, apply, delete, action, $location, propertylist, jaasDefaultRealmName, jaasConfigProviderName, jaasGlobalConfigPolicy, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheFelixJaasConfigurationSpi");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheFelixJaasConfigurationSpi", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheFelixScrScrService
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEFELIXSCRSCRSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheFelixScrScrService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String dsLoglevelParam = message.body().getString("ds.loglevel");
                Integer dsLoglevel = (dsLoglevelParam == null) ? null : Json.mapper.readValue(dsLoglevelParam, Integer.class);
                String dsFactoryEnabledParam = message.body().getString("ds.factory.enabled");
                Boolean dsFactoryEnabled = (dsFactoryEnabledParam == null) ? null : Json.mapper.readValue(dsFactoryEnabledParam, Boolean.class);
                String dsDelayedKeepInstancesParam = message.body().getString("ds.delayed.keepInstances");
                Boolean dsDelayedKeepInstances = (dsDelayedKeepInstancesParam == null) ? null : Json.mapper.readValue(dsDelayedKeepInstancesParam, Boolean.class);
                String dsLockTimeoutMillisecondsParam = message.body().getString("ds.lock.timeout.milliseconds");
                Integer dsLockTimeoutMilliseconds = (dsLockTimeoutMillisecondsParam == null) ? null : Json.mapper.readValue(dsLockTimeoutMillisecondsParam, Integer.class);
                String dsStopTimeoutMillisecondsParam = message.body().getString("ds.stop.timeout.milliseconds");
                Integer dsStopTimeoutMilliseconds = (dsStopTimeoutMillisecondsParam == null) ? null : Json.mapper.readValue(dsStopTimeoutMillisecondsParam, Integer.class);
                String dsGlobalExtenderParam = message.body().getString("ds.global.extender");
                Boolean dsGlobalExtender = (dsGlobalExtenderParam == null) ? null : Json.mapper.readValue(dsGlobalExtenderParam, Boolean.class);
                service.orgApacheFelixScrScrService(post, apply, delete, action, $location, propertylist, dsLoglevel, dsFactoryEnabled, dsDelayedKeepInstances, dsLockTimeoutMilliseconds, dsStopTimeoutMilliseconds, dsGlobalExtender, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheFelixScrScrService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheFelixScrScrService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheFelixSystemreadyImplComponentsCheck
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEFELIXSYSTEMREADYIMPLCOMPONENTSCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheFelixSystemreadyImplComponentsCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray componentsListParam = message.body().getJsonArray("components.list");
                List<String> componentsList = (componentsListParam == null) ? null : Json.mapper.readValue(componentsListParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String typeParam = message.body().getString("type");
                String type = (typeParam == null) ? null : typeParam;
                service.orgApacheFelixSystemreadyImplComponentsCheck(post, apply, delete, action, $location, propertylist, componentsList, type, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheFelixSystemreadyImplComponentsCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheFelixSystemreadyImplComponentsCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheFelixSystemreadyImplFrameworkStartCheck
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEFELIXSYSTEMREADYIMPLFRAMEWORKSTARTCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheFelixSystemreadyImplFrameworkStartCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String timeoutParam = message.body().getString("timeout");
                Integer timeout = (timeoutParam == null) ? null : Json.mapper.readValue(timeoutParam, Integer.class);
                String targetStartLevelParam = message.body().getString("target.start.level");
                Integer targetStartLevel = (targetStartLevelParam == null) ? null : Json.mapper.readValue(targetStartLevelParam, Integer.class);
                String targetStartLevelPropNameParam = message.body().getString("target.start.level.prop.name");
                String targetStartLevelPropName = (targetStartLevelPropNameParam == null) ? null : targetStartLevelPropNameParam;
                String typeParam = message.body().getString("type");
                String type = (typeParam == null) ? null : typeParam;
                service.orgApacheFelixSystemreadyImplFrameworkStartCheck(post, apply, delete, action, $location, propertylist, timeout, targetStartLevel, targetStartLevelPropName, type, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheFelixSystemreadyImplFrameworkStartCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheFelixSystemreadyImplFrameworkStartCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheFelixSystemreadyImplServicesCheck
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEFELIXSYSTEMREADYIMPLSERVICESCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheFelixSystemreadyImplServicesCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray servicesListParam = message.body().getJsonArray("services.list");
                List<String> servicesList = (servicesListParam == null) ? null : Json.mapper.readValue(servicesListParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String typeParam = message.body().getString("type");
                String type = (typeParam == null) ? null : typeParam;
                service.orgApacheFelixSystemreadyImplServicesCheck(post, apply, delete, action, $location, propertylist, servicesList, type, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheFelixSystemreadyImplServicesCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheFelixSystemreadyImplServicesCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheFelixSystemreadyImplServletSystemAliveServlet
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEFELIXSYSTEMREADYIMPLSERVLETSYSTEMALIVESERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheFelixSystemreadyImplServletSystemAliveServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String osgiHttpWhiteboardServletPatternParam = message.body().getString("osgi.http.whiteboard.servlet.pattern");
                String osgiHttpWhiteboardServletPattern = (osgiHttpWhiteboardServletPatternParam == null) ? null : osgiHttpWhiteboardServletPatternParam;
                String osgiHttpWhiteboardContextSelectParam = message.body().getString("osgi.http.whiteboard.context.select");
                String osgiHttpWhiteboardContextSelect = (osgiHttpWhiteboardContextSelectParam == null) ? null : osgiHttpWhiteboardContextSelectParam;
                service.orgApacheFelixSystemreadyImplServletSystemAliveServlet(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheFelixSystemreadyImplServletSystemAliveServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheFelixSystemreadyImplServletSystemAliveServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheFelixSystemreadyImplServletSystemReadyServlet
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEFELIXSYSTEMREADYIMPLSERVLETSYSTEMREADYSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheFelixSystemreadyImplServletSystemReadyServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String osgiHttpWhiteboardServletPatternParam = message.body().getString("osgi.http.whiteboard.servlet.pattern");
                String osgiHttpWhiteboardServletPattern = (osgiHttpWhiteboardServletPatternParam == null) ? null : osgiHttpWhiteboardServletPatternParam;
                String osgiHttpWhiteboardContextSelectParam = message.body().getString("osgi.http.whiteboard.context.select");
                String osgiHttpWhiteboardContextSelect = (osgiHttpWhiteboardContextSelectParam == null) ? null : osgiHttpWhiteboardContextSelectParam;
                service.orgApacheFelixSystemreadyImplServletSystemReadyServlet(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheFelixSystemreadyImplServletSystemReadyServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheFelixSystemreadyImplServletSystemReadyServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheFelixSystemreadySystemReadyMonitor
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEFELIXSYSTEMREADYSYSTEMREADYMONITOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheFelixSystemreadySystemReadyMonitor";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pollIntervalParam = message.body().getString("poll.interval");
                Integer pollInterval = (pollIntervalParam == null) ? null : Json.mapper.readValue(pollIntervalParam, Integer.class);
                service.orgApacheFelixSystemreadySystemReadyMonitor(post, apply, delete, action, $location, propertylist, pollInterval, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheFelixSystemreadySystemReadyMonitor");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheFelixSystemreadySystemReadyMonitor", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheFelixWebconsoleInternalServletOsgiManager
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEFELIXWEBCONSOLEINTERNALSERVLETOSGIMANAGER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheFelixWebconsoleInternalServletOsgiManager";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String managerRootParam = message.body().getString("manager.root");
                String managerRoot = (managerRootParam == null) ? null : managerRootParam;
                String httpServiceFilterParam = message.body().getString("http.service.filter");
                String httpServiceFilter = (httpServiceFilterParam == null) ? null : httpServiceFilterParam;
                String defaultRenderParam = message.body().getString("default.render");
                String defaultRender = (defaultRenderParam == null) ? null : defaultRenderParam;
                String realmParam = message.body().getString("realm");
                String realm = (realmParam == null) ? null : realmParam;
                String usernameParam = message.body().getString("username");
                String username = (usernameParam == null) ? null : usernameParam;
                String passwordParam = message.body().getString("password");
                String password = (passwordParam == null) ? null : passwordParam;
                String categoryParam = message.body().getString("category");
                String category = (categoryParam == null) ? null : categoryParam;
                String localeParam = message.body().getString("locale");
                String locale = (localeParam == null) ? null : localeParam;
                String loglevelParam = message.body().getString("loglevel");
                Integer loglevel = (loglevelParam == null) ? null : Json.mapper.readValue(loglevelParam, Integer.class);
                String pluginsParam = message.body().getString("plugins");
                String plugins = (pluginsParam == null) ? null : pluginsParam;
                service.orgApacheFelixWebconsoleInternalServletOsgiManager(post, apply, delete, action, $location, propertylist, managerRoot, httpServiceFilter, defaultRender, realm, username, password, category, locale, loglevel, plugins, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheFelixWebconsoleInternalServletOsgiManager");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheFelixWebconsoleInternalServletOsgiManager", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheFelixWebconsolePluginsEventInternalPluginServlet
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEFELIXWEBCONSOLEPLUGINSEVENTINTERNALPLUGINSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheFelixWebconsolePluginsEventInternalPluginServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String maxSizeParam = message.body().getString("max.size");
                Integer maxSize = (maxSizeParam == null) ? null : Json.mapper.readValue(maxSizeParam, Integer.class);
                service.orgApacheFelixWebconsolePluginsEventInternalPluginServlet(post, apply, delete, action, $location, propertylist, maxSize, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheFelixWebconsolePluginsEventInternalPluginServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheFelixWebconsolePluginsEventInternalPluginServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEFELIXWEBCONSOLEPLUGINSMEMORYUSAGEINTERNALMEMORYUSAGECO_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String felixMemoryusageDumpThresholdParam = message.body().getString("felix.memoryusage.dump.threshold");
                Integer felixMemoryusageDumpThreshold = (felixMemoryusageDumpThresholdParam == null) ? null : Json.mapper.readValue(felixMemoryusageDumpThresholdParam, Integer.class);
                String felixMemoryusageDumpIntervalParam = message.body().getString("felix.memoryusage.dump.interval");
                Integer felixMemoryusageDumpInterval = (felixMemoryusageDumpIntervalParam == null) ? null : Json.mapper.readValue(felixMemoryusageDumpIntervalParam, Integer.class);
                String felixMemoryusageDumpLocationParam = message.body().getString("felix.memoryusage.dump.location");
                String felixMemoryusageDumpLocation = (felixMemoryusageDumpLocationParam == null) ? null : felixMemoryusageDumpLocationParam;
                service.orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(post, apply, delete, action, $location, propertylist, felixMemoryusageDumpThreshold, felixMemoryusageDumpInterval, felixMemoryusageDumpLocation, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheHttpProxyconfigurator
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEHTTPPROXYCONFIGURATOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheHttpProxyconfigurator";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String proxyEnabledParam = message.body().getString("proxy.enabled");
                Boolean proxyEnabled = (proxyEnabledParam == null) ? null : Json.mapper.readValue(proxyEnabledParam, Boolean.class);
                String proxyHostParam = message.body().getString("proxy.host");
                String proxyHost = (proxyHostParam == null) ? null : proxyHostParam;
                String proxyPortParam = message.body().getString("proxy.port");
                Integer proxyPort = (proxyPortParam == null) ? null : Json.mapper.readValue(proxyPortParam, Integer.class);
                String proxyUserParam = message.body().getString("proxy.user");
                String proxyUser = (proxyUserParam == null) ? null : proxyUserParam;
                String proxyPasswordParam = message.body().getString("proxy.password");
                String proxyPassword = (proxyPasswordParam == null) ? null : proxyPasswordParam;
                JsonArray proxyExceptionsParam = message.body().getJsonArray("proxy.exceptions");
                List<String> proxyExceptions = (proxyExceptionsParam == null) ? null : Json.mapper.readValue(proxyExceptionsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheHttpProxyconfigurator(post, apply, delete, action, $location, propertylist, proxyEnabled, proxyHost, proxyPort, proxyUser, proxyPassword, proxyExceptions, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheHttpProxyconfigurator");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheHttpProxyconfigurator", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKPLUGINSBLOBDATASTOREDATASTORETEXTPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String dirParam = message.body().getString("dir");
                String dir = (dirParam == null) ? null : dirParam;
                service.orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(post, apply, delete, action, $location, propertylist, dir, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKPLUGINSBLOBDATASTOREFILEDATASTORE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pathParam = message.body().getString("path");
                String path = (pathParam == null) ? null : pathParam;
                service.orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(post, apply, delete, action, $location, propertylist, path, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKPLUGINSDOCUMENTDOCUMENTNODESTORESERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String mongouriParam = message.body().getString("mongouri");
                String mongouri = (mongouriParam == null) ? null : mongouriParam;
                String dbParam = message.body().getString("db");
                String db = (dbParam == null) ? null : dbParam;
                String socketKeepAliveParam = message.body().getString("socketKeepAlive");
                Boolean socketKeepAlive = (socketKeepAliveParam == null) ? null : Json.mapper.readValue(socketKeepAliveParam, Boolean.class);
                String cacheParam = message.body().getString("cache");
                Integer cache = (cacheParam == null) ? null : Json.mapper.readValue(cacheParam, Integer.class);
                String nodeCachePercentageParam = message.body().getString("nodeCachePercentage");
                Integer nodeCachePercentage = (nodeCachePercentageParam == null) ? null : Json.mapper.readValue(nodeCachePercentageParam, Integer.class);
                String prevDocCachePercentageParam = message.body().getString("prevDocCachePercentage");
                Integer prevDocCachePercentage = (prevDocCachePercentageParam == null) ? null : Json.mapper.readValue(prevDocCachePercentageParam, Integer.class);
                String childrenCachePercentageParam = message.body().getString("childrenCachePercentage");
                Integer childrenCachePercentage = (childrenCachePercentageParam == null) ? null : Json.mapper.readValue(childrenCachePercentageParam, Integer.class);
                String diffCachePercentageParam = message.body().getString("diffCachePercentage");
                Integer diffCachePercentage = (diffCachePercentageParam == null) ? null : Json.mapper.readValue(diffCachePercentageParam, Integer.class);
                String cacheSegmentCountParam = message.body().getString("cacheSegmentCount");
                Integer cacheSegmentCount = (cacheSegmentCountParam == null) ? null : Json.mapper.readValue(cacheSegmentCountParam, Integer.class);
                String cacheStackMoveDistanceParam = message.body().getString("cacheStackMoveDistance");
                Integer cacheStackMoveDistance = (cacheStackMoveDistanceParam == null) ? null : Json.mapper.readValue(cacheStackMoveDistanceParam, Integer.class);
                String blobCacheSizeParam = message.body().getString("blobCacheSize");
                Integer blobCacheSize = (blobCacheSizeParam == null) ? null : Json.mapper.readValue(blobCacheSizeParam, Integer.class);
                String persistentCacheParam = message.body().getString("persistentCache");
                String persistentCache = (persistentCacheParam == null) ? null : persistentCacheParam;
                String journalCacheParam = message.body().getString("journalCache");
                String journalCache = (journalCacheParam == null) ? null : journalCacheParam;
                String customBlobStoreParam = message.body().getString("customBlobStore");
                Boolean customBlobStore = (customBlobStoreParam == null) ? null : Json.mapper.readValue(customBlobStoreParam, Boolean.class);
                String journalGCIntervalParam = message.body().getString("journalGCInterval");
                Integer journalGCInterval = (journalGCIntervalParam == null) ? null : Json.mapper.readValue(journalGCIntervalParam, Integer.class);
                String journalGCMaxAgeParam = message.body().getString("journalGCMaxAge");
                Integer journalGCMaxAge = (journalGCMaxAgeParam == null) ? null : Json.mapper.readValue(journalGCMaxAgeParam, Integer.class);
                String prefetchExternalChangesParam = message.body().getString("prefetchExternalChanges");
                Boolean prefetchExternalChanges = (prefetchExternalChangesParam == null) ? null : Json.mapper.readValue(prefetchExternalChangesParam, Boolean.class);
                String roleParam = message.body().getString("role");
                String role = (roleParam == null) ? null : roleParam;
                String versionGcMaxAgeInSecsParam = message.body().getString("versionGcMaxAgeInSecs");
                Integer versionGcMaxAgeInSecs = (versionGcMaxAgeInSecsParam == null) ? null : Json.mapper.readValue(versionGcMaxAgeInSecsParam, Integer.class);
                String versionGCExpressionParam = message.body().getString("versionGCExpression");
                String versionGCExpression = (versionGCExpressionParam == null) ? null : versionGCExpressionParam;
                String versionGCTimeLimitInSecsParam = message.body().getString("versionGCTimeLimitInSecs");
                Integer versionGCTimeLimitInSecs = (versionGCTimeLimitInSecsParam == null) ? null : Json.mapper.readValue(versionGCTimeLimitInSecsParam, Integer.class);
                String blobGcMaxAgeInSecsParam = message.body().getString("blobGcMaxAgeInSecs");
                Integer blobGcMaxAgeInSecs = (blobGcMaxAgeInSecsParam == null) ? null : Json.mapper.readValue(blobGcMaxAgeInSecsParam, Integer.class);
                String blobTrackSnapshotIntervalInSecsParam = message.body().getString("blobTrackSnapshotIntervalInSecs");
                Integer blobTrackSnapshotIntervalInSecs = (blobTrackSnapshotIntervalInSecsParam == null) ? null : Json.mapper.readValue(blobTrackSnapshotIntervalInSecsParam, Integer.class);
                String repositoryHomeParam = message.body().getString("repository.home");
                String repositoryHome = (repositoryHomeParam == null) ? null : repositoryHomeParam;
                String maxReplicationLagInSecsParam = message.body().getString("maxReplicationLagInSecs");
                Integer maxReplicationLagInSecs = (maxReplicationLagInSecsParam == null) ? null : Json.mapper.readValue(maxReplicationLagInSecsParam, Integer.class);
                String documentStoreTypeParam = message.body().getString("documentStoreType");
                String documentStoreType = (documentStoreTypeParam == null) ? null : documentStoreTypeParam;
                String bundlingDisabledParam = message.body().getString("bundlingDisabled");
                Boolean bundlingDisabled = (bundlingDisabledParam == null) ? null : Json.mapper.readValue(bundlingDisabledParam, Boolean.class);
                String updateLimitParam = message.body().getString("updateLimit");
                Integer updateLimit = (updateLimitParam == null) ? null : Json.mapper.readValue(updateLimitParam, Integer.class);
                JsonArray persistentCacheIncludesParam = message.body().getJsonArray("persistentCacheIncludes");
                List<String> persistentCacheIncludes = (persistentCacheIncludesParam == null) ? null : Json.mapper.readValue(persistentCacheIncludesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String leaseCheckModeParam = message.body().getString("leaseCheckMode");
                String leaseCheckMode = (leaseCheckModeParam == null) ? null : leaseCheckModeParam;
                service.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(post, apply, delete, action, $location, propertylist, mongouri, db, socketKeepAlive, cache, nodeCachePercentage, prevDocCachePercentage, childrenCachePercentage, diffCachePercentage, cacheSegmentCount, cacheStackMoveDistance, blobCacheSize, persistentCache, journalCache, customBlobStore, journalGCInterval, journalGCMaxAge, prefetchExternalChanges, role, versionGcMaxAgeInSecs, versionGCExpression, versionGCTimeLimitInSecs, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, repositoryHome, maxReplicationLagInSecs, documentStoreType, bundlingDisabled, updateLimit, persistentCacheIncludes, leaseCheckMode, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKPLUGINSDOCUMENTDOCUMENTNODESTORESERVICEPRE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray persistentCacheIncludesParam = message.body().getJsonArray("persistentCacheIncludes");
                List<String> persistentCacheIncludes = (persistentCacheIncludesParam == null) ? null : Json.mapper.readValue(persistentCacheIncludesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(post, apply, delete, action, $location, propertylist, persistentCacheIncludes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKPLUGINSDOCUMENTSECONDARYSECONDARYSTORECAC_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray includedPathsParam = message.body().getJsonArray("includedPaths");
                List<String> includedPaths = (includedPathsParam == null) ? null : Json.mapper.readValue(includedPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enableAsyncObserverParam = message.body().getString("enableAsyncObserver");
                Boolean enableAsyncObserver = (enableAsyncObserverParam == null) ? null : Json.mapper.readValue(enableAsyncObserverParam, Boolean.class);
                String observerQueueSizeParam = message.body().getString("observerQueueSize");
                Integer observerQueueSize = (observerQueueSizeParam == null) ? null : Json.mapper.readValue(observerQueueSizeParam, Integer.class);
                service.orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(post, apply, delete, action, $location, propertylist, includedPaths, enableAsyncObserver, observerQueueSize, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakPluginsIndexAsyncIndexerService
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKPLUGINSINDEXASYNCINDEXERSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakPluginsIndexAsyncIndexerService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray asyncConfigsParam = message.body().getJsonArray("asyncConfigs");
                List<String> asyncConfigs = (asyncConfigsParam == null) ? null : Json.mapper.readValue(asyncConfigsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String leaseTimeOutMinutesParam = message.body().getString("leaseTimeOutMinutes");
                Integer leaseTimeOutMinutes = (leaseTimeOutMinutesParam == null) ? null : Json.mapper.readValue(leaseTimeOutMinutesParam, Integer.class);
                String failingIndexTimeoutSecondsParam = message.body().getString("failingIndexTimeoutSeconds");
                Integer failingIndexTimeoutSeconds = (failingIndexTimeoutSecondsParam == null) ? null : Json.mapper.readValue(failingIndexTimeoutSecondsParam, Integer.class);
                String errorWarnIntervalSecondsParam = message.body().getString("errorWarnIntervalSeconds");
                Integer errorWarnIntervalSeconds = (errorWarnIntervalSecondsParam == null) ? null : Json.mapper.readValue(errorWarnIntervalSecondsParam, Integer.class);
                service.orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(post, apply, delete, action, $location, propertylist, asyncConfigs, leaseTimeOutMinutes, failingIndexTimeoutSeconds, errorWarnIntervalSeconds, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakPluginsIndexAsyncIndexerService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakPluginsIndexAsyncIndexerService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKPLUGINSINDEXLUCENELUCENEINDEXPROVIDERSERV_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String disabledParam = message.body().getString("disabled");
                Boolean disabled = (disabledParam == null) ? null : Json.mapper.readValue(disabledParam, Boolean.class);
                String debugParam = message.body().getString("debug");
                Boolean debug = (debugParam == null) ? null : Json.mapper.readValue(debugParam, Boolean.class);
                String localIndexDirParam = message.body().getString("localIndexDir");
                String localIndexDir = (localIndexDirParam == null) ? null : localIndexDirParam;
                String enableOpenIndexAsyncParam = message.body().getString("enableOpenIndexAsync");
                Boolean enableOpenIndexAsync = (enableOpenIndexAsyncParam == null) ? null : Json.mapper.readValue(enableOpenIndexAsyncParam, Boolean.class);
                String threadPoolSizeParam = message.body().getString("threadPoolSize");
                Integer threadPoolSize = (threadPoolSizeParam == null) ? null : Json.mapper.readValue(threadPoolSizeParam, Integer.class);
                String prefetchIndexFilesParam = message.body().getString("prefetchIndexFiles");
                Boolean prefetchIndexFiles = (prefetchIndexFilesParam == null) ? null : Json.mapper.readValue(prefetchIndexFilesParam, Boolean.class);
                String extractedTextCacheSizeInMBParam = message.body().getString("extractedTextCacheSizeInMB");
                Integer extractedTextCacheSizeInMB = (extractedTextCacheSizeInMBParam == null) ? null : Json.mapper.readValue(extractedTextCacheSizeInMBParam, Integer.class);
                String extractedTextCacheExpiryInSecsParam = message.body().getString("extractedTextCacheExpiryInSecs");
                Integer extractedTextCacheExpiryInSecs = (extractedTextCacheExpiryInSecsParam == null) ? null : Json.mapper.readValue(extractedTextCacheExpiryInSecsParam, Integer.class);
                String alwaysUsePreExtractedCacheParam = message.body().getString("alwaysUsePreExtractedCache");
                Boolean alwaysUsePreExtractedCache = (alwaysUsePreExtractedCacheParam == null) ? null : Json.mapper.readValue(alwaysUsePreExtractedCacheParam, Boolean.class);
                String booleanClauseLimitParam = message.body().getString("booleanClauseLimit");
                Integer booleanClauseLimit = (booleanClauseLimitParam == null) ? null : Json.mapper.readValue(booleanClauseLimitParam, Integer.class);
                String enableHybridIndexingParam = message.body().getString("enableHybridIndexing");
                Boolean enableHybridIndexing = (enableHybridIndexingParam == null) ? null : Json.mapper.readValue(enableHybridIndexingParam, Boolean.class);
                String hybridQueueSizeParam = message.body().getString("hybridQueueSize");
                Integer hybridQueueSize = (hybridQueueSizeParam == null) ? null : Json.mapper.readValue(hybridQueueSizeParam, Integer.class);
                String disableStoredIndexDefinitionParam = message.body().getString("disableStoredIndexDefinition");
                Boolean disableStoredIndexDefinition = (disableStoredIndexDefinitionParam == null) ? null : Json.mapper.readValue(disableStoredIndexDefinitionParam, Boolean.class);
                String deletedBlobsCollectionEnabledParam = message.body().getString("deletedBlobsCollectionEnabled");
                Boolean deletedBlobsCollectionEnabled = (deletedBlobsCollectionEnabledParam == null) ? null : Json.mapper.readValue(deletedBlobsCollectionEnabledParam, Boolean.class);
                String propIndexCleanerIntervalInSecsParam = message.body().getString("propIndexCleanerIntervalInSecs");
                Integer propIndexCleanerIntervalInSecs = (propIndexCleanerIntervalInSecsParam == null) ? null : Json.mapper.readValue(propIndexCleanerIntervalInSecsParam, Integer.class);
                String enableSingleBlobIndexFilesParam = message.body().getString("enableSingleBlobIndexFiles");
                Boolean enableSingleBlobIndexFiles = (enableSingleBlobIndexFilesParam == null) ? null : Json.mapper.readValue(enableSingleBlobIndexFilesParam, Boolean.class);
                service.orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(post, apply, delete, action, $location, propertylist, disabled, debug, localIndexDir, enableOpenIndexAsync, threadPoolSize, prefetchIndexFiles, extractedTextCacheSizeInMB, extractedTextCacheExpiryInSecs, alwaysUsePreExtractedCache, booleanClauseLimit, enableHybridIndexing, hybridQueueSize, disableStoredIndexDefinition, deletedBlobsCollectionEnabled, propIndexCleanerIntervalInSecs, enableSingleBlobIndexFiles, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKPLUGINSINDEXSOLROSGIEMBEDDEDSOLRSERVERCO_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String solrHomePathParam = message.body().getString("solr.home.path");
                String solrHomePath = (solrHomePathParam == null) ? null : solrHomePathParam;
                String solrCoreNameParam = message.body().getString("solr.core.name");
                String solrCoreName = (solrCoreNameParam == null) ? null : solrCoreNameParam;
                service.orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(post, apply, delete, action, $location, propertylist, solrHomePath, solrCoreName, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKPLUGINSINDEXSOLROSGINODESTATESOLRSERVERS_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                service.orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(post, apply, delete, action, $location, propertylist, enabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKPLUGINSINDEXSOLROSGIOAKSOLRCONFIGURATION_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pathDescFieldParam = message.body().getString("path.desc.field");
                String pathDescField = (pathDescFieldParam == null) ? null : pathDescFieldParam;
                String pathChildFieldParam = message.body().getString("path.child.field");
                String pathChildField = (pathChildFieldParam == null) ? null : pathChildFieldParam;
                String pathParentFieldParam = message.body().getString("path.parent.field");
                String pathParentField = (pathParentFieldParam == null) ? null : pathParentFieldParam;
                String pathExactFieldParam = message.body().getString("path.exact.field");
                String pathExactField = (pathExactFieldParam == null) ? null : pathExactFieldParam;
                String catchAllFieldParam = message.body().getString("catch.all.field");
                String catchAllField = (catchAllFieldParam == null) ? null : catchAllFieldParam;
                String collapsedPathFieldParam = message.body().getString("collapsed.path.field");
                String collapsedPathField = (collapsedPathFieldParam == null) ? null : collapsedPathFieldParam;
                String pathDepthFieldParam = message.body().getString("path.depth.field");
                String pathDepthField = (pathDepthFieldParam == null) ? null : pathDepthFieldParam;
                String commitPolicyParam = message.body().getString("commit.policy");
                String commitPolicy = (commitPolicyParam == null) ? null : commitPolicyParam;
                String rowsParam = message.body().getString("rows");
                Integer rows = (rowsParam == null) ? null : Json.mapper.readValue(rowsParam, Integer.class);
                String pathRestrictionsParam = message.body().getString("path.restrictions");
                Boolean pathRestrictions = (pathRestrictionsParam == null) ? null : Json.mapper.readValue(pathRestrictionsParam, Boolean.class);
                String propertyRestrictionsParam = message.body().getString("property.restrictions");
                Boolean propertyRestrictions = (propertyRestrictionsParam == null) ? null : Json.mapper.readValue(propertyRestrictionsParam, Boolean.class);
                String primarytypesRestrictionsParam = message.body().getString("primarytypes.restrictions");
                Boolean primarytypesRestrictions = (primarytypesRestrictionsParam == null) ? null : Json.mapper.readValue(primarytypesRestrictionsParam, Boolean.class);
                JsonArray ignoredPropertiesParam = message.body().getJsonArray("ignored.properties");
                List<String> ignoredProperties = (ignoredPropertiesParam == null) ? null : Json.mapper.readValue(ignoredPropertiesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray usedPropertiesParam = message.body().getJsonArray("used.properties");
                List<String> usedProperties = (usedPropertiesParam == null) ? null : Json.mapper.readValue(usedPropertiesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray typeMappingsParam = message.body().getJsonArray("type.mappings");
                List<String> typeMappings = (typeMappingsParam == null) ? null : Json.mapper.readValue(typeMappingsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray propertyMappingsParam = message.body().getJsonArray("property.mappings");
                List<String> propertyMappings = (propertyMappingsParam == null) ? null : Json.mapper.readValue(propertyMappingsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String collapseJcrcontentNodesParam = message.body().getString("collapse.jcrcontent.nodes");
                Boolean collapseJcrcontentNodes = (collapseJcrcontentNodesParam == null) ? null : Json.mapper.readValue(collapseJcrcontentNodesParam, Boolean.class);
                service.orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(post, apply, delete, action, $location, propertylist, pathDescField, pathChildField, pathParentField, pathExactField, catchAllField, collapsedPathField, pathDepthField, commitPolicy, rows, pathRestrictions, propertyRestrictions, primarytypesRestrictions, ignoredProperties, usedProperties, typeMappings, propertyMappings, collapseJcrcontentNodes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKPLUGINSINDEXSOLROSGIREMOTESOLRSERVERCONF_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String solrHttpUrlParam = message.body().getString("solr.http.url");
                String solrHttpUrl = (solrHttpUrlParam == null) ? null : solrHttpUrlParam;
                String solrZkHostParam = message.body().getString("solr.zk.host");
                String solrZkHost = (solrZkHostParam == null) ? null : solrZkHostParam;
                String solrCollectionParam = message.body().getString("solr.collection");
                String solrCollection = (solrCollectionParam == null) ? null : solrCollectionParam;
                String solrSocketTimeoutParam = message.body().getString("solr.socket.timeout");
                Integer solrSocketTimeout = (solrSocketTimeoutParam == null) ? null : Json.mapper.readValue(solrSocketTimeoutParam, Integer.class);
                String solrConnectionTimeoutParam = message.body().getString("solr.connection.timeout");
                Integer solrConnectionTimeout = (solrConnectionTimeoutParam == null) ? null : Json.mapper.readValue(solrConnectionTimeoutParam, Integer.class);
                String solrShardsNoParam = message.body().getString("solr.shards.no");
                Integer solrShardsNo = (solrShardsNoParam == null) ? null : Json.mapper.readValue(solrShardsNoParam, Integer.class);
                String solrReplicationFactorParam = message.body().getString("solr.replication.factor");
                Integer solrReplicationFactor = (solrReplicationFactorParam == null) ? null : Json.mapper.readValue(solrReplicationFactorParam, Integer.class);
                String solrConfDirParam = message.body().getString("solr.conf.dir");
                String solrConfDir = (solrConfDirParam == null) ? null : solrConfDirParam;
                service.orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(post, apply, delete, action, $location, propertylist, solrHttpUrl, solrZkHost, solrCollection, solrSocketTimeout, solrConnectionTimeout, solrShardsNo, solrReplicationFactor, solrConfDir, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKPLUGINSINDEXSOLROSGISOLRQUERYINDEXPROVID_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String queryAggregationParam = message.body().getString("query.aggregation");
                Boolean queryAggregation = (queryAggregationParam == null) ? null : Json.mapper.readValue(queryAggregationParam, Boolean.class);
                service.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(post, apply, delete, action, $location, propertylist, queryAggregation, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKPLUGINSINDEXSOLROSGISOLRSERVERPROVIDERSE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serverTypeParam = message.body().getString("server.type");
                String serverType = (serverTypeParam == null) ? null : serverTypeParam;
                service.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(post, apply, delete, action, $location, propertylist, serverType, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKPLUGINSMETRICSTATISTICSPROVIDERFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String providerTypeParam = message.body().getString("providerType");
                String providerType = (providerTypeParam == null) ? null : providerTypeParam;
                service.orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(post, apply, delete, action, $location, propertylist, providerType, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKPLUGINSOBSERVATIONCHANGECOLLECTORPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String maxItemsParam = message.body().getString("maxItems");
                Integer maxItems = (maxItemsParam == null) ? null : Json.mapper.readValue(maxItemsParam, Integer.class);
                String maxPathDepthParam = message.body().getString("maxPathDepth");
                Integer maxPathDepth = (maxPathDepthParam == null) ? null : Json.mapper.readValue(maxPathDepthParam, Integer.class);
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                service.orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(post, apply, delete, action, $location, propertylist, maxItems, maxPathDepth, enabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakQueryQueryEngineSettingsService
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKQUERYQUERYENGINESETTINGSSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakQueryQueryEngineSettingsService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String queryLimitInMemoryParam = message.body().getString("queryLimitInMemory");
                Integer queryLimitInMemory = (queryLimitInMemoryParam == null) ? null : Json.mapper.readValue(queryLimitInMemoryParam, Integer.class);
                String queryLimitReadsParam = message.body().getString("queryLimitReads");
                Integer queryLimitReads = (queryLimitReadsParam == null) ? null : Json.mapper.readValue(queryLimitReadsParam, Integer.class);
                String queryFailTraversalParam = message.body().getString("queryFailTraversal");
                Boolean queryFailTraversal = (queryFailTraversalParam == null) ? null : Json.mapper.readValue(queryFailTraversalParam, Boolean.class);
                String fastQuerySizeParam = message.body().getString("fastQuerySize");
                Boolean fastQuerySize = (fastQuerySizeParam == null) ? null : Json.mapper.readValue(fastQuerySizeParam, Boolean.class);
                service.orgApacheJackrabbitOakQueryQueryEngineSettingsService(post, apply, delete, action, $location, propertylist, queryLimitInMemory, queryLimitReads, queryFailTraversal, fastQuerySize, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakQueryQueryEngineSettingsService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakQueryQueryEngineSettingsService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKSECURITYAUTHENTICATIONAUTHENTICATIONCONFIG_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String orgApacheJackrabbitOakAuthenticationAppNameParam = message.body().getString("org.apache.jackrabbit.oak.authentication.appName");
                String orgApacheJackrabbitOakAuthenticationAppName = (orgApacheJackrabbitOakAuthenticationAppNameParam == null) ? null : orgApacheJackrabbitOakAuthenticationAppNameParam;
                String orgApacheJackrabbitOakAuthenticationConfigSpiNameParam = message.body().getString("org.apache.jackrabbit.oak.authentication.configSpiName");
                String orgApacheJackrabbitOakAuthenticationConfigSpiName = (orgApacheJackrabbitOakAuthenticationConfigSpiNameParam == null) ? null : orgApacheJackrabbitOakAuthenticationConfigSpiNameParam;
                service.orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(post, apply, delete, action, $location, propertylist, orgApacheJackrabbitOakAuthenticationAppName, orgApacheJackrabbitOakAuthenticationConfigSpiName, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKSECURITYAUTHENTICATIONLDAPIMPLLDAPIDENTI_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String providerNameParam = message.body().getString("provider.name");
                String providerName = (providerNameParam == null) ? null : providerNameParam;
                String hostNameParam = message.body().getString("host.name");
                String hostName = (hostNameParam == null) ? null : hostNameParam;
                String hostPortParam = message.body().getString("host.port");
                Integer hostPort = (hostPortParam == null) ? null : Json.mapper.readValue(hostPortParam, Integer.class);
                String hostSslParam = message.body().getString("host.ssl");
                Boolean hostSsl = (hostSslParam == null) ? null : Json.mapper.readValue(hostSslParam, Boolean.class);
                String hostTlsParam = message.body().getString("host.tls");
                Boolean hostTls = (hostTlsParam == null) ? null : Json.mapper.readValue(hostTlsParam, Boolean.class);
                String hostNoCertCheckParam = message.body().getString("host.noCertCheck");
                Boolean hostNoCertCheck = (hostNoCertCheckParam == null) ? null : Json.mapper.readValue(hostNoCertCheckParam, Boolean.class);
                String bindDnParam = message.body().getString("bind.dn");
                String bindDn = (bindDnParam == null) ? null : bindDnParam;
                String bindPasswordParam = message.body().getString("bind.password");
                String bindPassword = (bindPasswordParam == null) ? null : bindPasswordParam;
                String searchTimeoutParam = message.body().getString("searchTimeout");
                String searchTimeout = (searchTimeoutParam == null) ? null : searchTimeoutParam;
                String adminPoolMaxActiveParam = message.body().getString("adminPool.maxActive");
                Integer adminPoolMaxActive = (adminPoolMaxActiveParam == null) ? null : Json.mapper.readValue(adminPoolMaxActiveParam, Integer.class);
                String adminPoolLookupOnValidateParam = message.body().getString("adminPool.lookupOnValidate");
                Boolean adminPoolLookupOnValidate = (adminPoolLookupOnValidateParam == null) ? null : Json.mapper.readValue(adminPoolLookupOnValidateParam, Boolean.class);
                String userPoolMaxActiveParam = message.body().getString("userPool.maxActive");
                Integer userPoolMaxActive = (userPoolMaxActiveParam == null) ? null : Json.mapper.readValue(userPoolMaxActiveParam, Integer.class);
                String userPoolLookupOnValidateParam = message.body().getString("userPool.lookupOnValidate");
                Boolean userPoolLookupOnValidate = (userPoolLookupOnValidateParam == null) ? null : Json.mapper.readValue(userPoolLookupOnValidateParam, Boolean.class);
                String userBaseDNParam = message.body().getString("user.baseDN");
                String userBaseDN = (userBaseDNParam == null) ? null : userBaseDNParam;
                JsonArray userObjectclassParam = message.body().getJsonArray("user.objectclass");
                List<String> userObjectclass = (userObjectclassParam == null) ? null : Json.mapper.readValue(userObjectclassParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String userIdAttributeParam = message.body().getString("user.idAttribute");
                String userIdAttribute = (userIdAttributeParam == null) ? null : userIdAttributeParam;
                String userExtraFilterParam = message.body().getString("user.extraFilter");
                String userExtraFilter = (userExtraFilterParam == null) ? null : userExtraFilterParam;
                String userMakeDnPathParam = message.body().getString("user.makeDnPath");
                Boolean userMakeDnPath = (userMakeDnPathParam == null) ? null : Json.mapper.readValue(userMakeDnPathParam, Boolean.class);
                String groupBaseDNParam = message.body().getString("group.baseDN");
                String groupBaseDN = (groupBaseDNParam == null) ? null : groupBaseDNParam;
                JsonArray groupObjectclassParam = message.body().getJsonArray("group.objectclass");
                List<String> groupObjectclass = (groupObjectclassParam == null) ? null : Json.mapper.readValue(groupObjectclassParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String groupNameAttributeParam = message.body().getString("group.nameAttribute");
                String groupNameAttribute = (groupNameAttributeParam == null) ? null : groupNameAttributeParam;
                String groupExtraFilterParam = message.body().getString("group.extraFilter");
                String groupExtraFilter = (groupExtraFilterParam == null) ? null : groupExtraFilterParam;
                String groupMakeDnPathParam = message.body().getString("group.makeDnPath");
                Boolean groupMakeDnPath = (groupMakeDnPathParam == null) ? null : Json.mapper.readValue(groupMakeDnPathParam, Boolean.class);
                String groupMemberAttributeParam = message.body().getString("group.memberAttribute");
                String groupMemberAttribute = (groupMemberAttributeParam == null) ? null : groupMemberAttributeParam;
                String useUidForExtIdParam = message.body().getString("useUidForExtId");
                Boolean useUidForExtId = (useUidForExtIdParam == null) ? null : Json.mapper.readValue(useUidForExtIdParam, Boolean.class);
                JsonArray customattributesParam = message.body().getJsonArray("customattributes");
                List<String> customattributes = (customattributesParam == null) ? null : Json.mapper.readValue(customattributesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(post, apply, delete, action, $location, propertylist, providerName, hostName, hostPort, hostSsl, hostTls, hostNoCertCheck, bindDn, bindPassword, searchTimeout, adminPoolMaxActive, adminPoolLookupOnValidate, userPoolMaxActive, userPoolLookupOnValidate, userBaseDN, userObjectclass, userIdAttribute, userExtraFilter, userMakeDnPath, groupBaseDN, groupObjectclass, groupNameAttribute, groupExtraFilter, groupMakeDnPath, groupMemberAttribute, useUidForExtId, customattributes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKSECURITYAUTHENTICATIONTOKENTOKENCONFIGURA_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String tokenExpirationParam = message.body().getString("tokenExpiration");
                String tokenExpiration = (tokenExpirationParam == null) ? null : tokenExpirationParam;
                String tokenLengthParam = message.body().getString("tokenLength");
                String tokenLength = (tokenLengthParam == null) ? null : tokenLengthParam;
                String tokenRefreshParam = message.body().getString("tokenRefresh");
                Boolean tokenRefresh = (tokenRefreshParam == null) ? null : Json.mapper.readValue(tokenRefreshParam, Boolean.class);
                String tokenCleanupThresholdParam = message.body().getString("tokenCleanupThreshold");
                Integer tokenCleanupThreshold = (tokenCleanupThresholdParam == null) ? null : Json.mapper.readValue(tokenCleanupThresholdParam, Integer.class);
                String passwordHashAlgorithmParam = message.body().getString("passwordHashAlgorithm");
                String passwordHashAlgorithm = (passwordHashAlgorithmParam == null) ? null : passwordHashAlgorithmParam;
                String passwordHashIterationsParam = message.body().getString("passwordHashIterations");
                Integer passwordHashIterations = (passwordHashIterationsParam == null) ? null : Json.mapper.readValue(passwordHashIterationsParam, Integer.class);
                String passwordSaltSizeParam = message.body().getString("passwordSaltSize");
                Integer passwordSaltSize = (passwordSaltSizeParam == null) ? null : Json.mapper.readValue(passwordSaltSizeParam, Integer.class);
                service.orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(post, apply, delete, action, $location, propertylist, tokenExpiration, tokenLength, tokenRefresh, tokenCleanupThreshold, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKSECURITYAUTHORIZATIONAUTHORIZATIONCONFIGUR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String permissionsJr2Param = message.body().getString("permissionsJr2");
                String permissionsJr2 = (permissionsJr2Param == null) ? null : permissionsJr2Param;
                String importBehaviorParam = message.body().getString("importBehavior");
                String importBehavior = (importBehaviorParam == null) ? null : importBehaviorParam;
                JsonArray readPathsParam = message.body().getJsonArray("readPaths");
                List<String> readPaths = (readPathsParam == null) ? null : Json.mapper.readValue(readPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray administrativePrincipalsParam = message.body().getJsonArray("administrativePrincipals");
                List<String> administrativePrincipals = (administrativePrincipalsParam == null) ? null : Json.mapper.readValue(administrativePrincipalsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String configurationRankingParam = message.body().getString("configurationRanking");
                Integer configurationRanking = (configurationRankingParam == null) ? null : Json.mapper.readValue(configurationRankingParam, Integer.class);
                service.orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(post, apply, delete, action, $location, propertylist, permissionsJr2, importBehavior, readPaths, administrativePrincipals, configurationRanking, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKSECURITYINTERNALSECURITYPROVIDERREGISTRATI_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray requiredServicePidsParam = message.body().getJsonArray("requiredServicePids");
                List<String> requiredServicePids = (requiredServicePidsParam == null) ? null : Json.mapper.readValue(requiredServicePidsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String authorizationCompositionTypeParam = message.body().getString("authorizationCompositionType");
                String authorizationCompositionType = (authorizationCompositionTypeParam == null) ? null : authorizationCompositionTypeParam;
                service.orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(post, apply, delete, action, $location, propertylist, requiredServicePids, authorizationCompositionType, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKSECURITYUSERRANDOMAUTHORIZABLENODENAME_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String lengthParam = message.body().getString("length");
                Integer length = (lengthParam == null) ? null : Json.mapper.readValue(lengthParam, Integer.class);
                service.orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(post, apply, delete, action, $location, propertylist, length, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakSecurityUserUserConfigurationImpl
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKSECURITYUSERUSERCONFIGURATIONIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakSecurityUserUserConfigurationImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String usersPathParam = message.body().getString("usersPath");
                String usersPath = (usersPathParam == null) ? null : usersPathParam;
                String groupsPathParam = message.body().getString("groupsPath");
                String groupsPath = (groupsPathParam == null) ? null : groupsPathParam;
                String systemRelativePathParam = message.body().getString("systemRelativePath");
                String systemRelativePath = (systemRelativePathParam == null) ? null : systemRelativePathParam;
                String defaultDepthParam = message.body().getString("defaultDepth");
                Integer defaultDepth = (defaultDepthParam == null) ? null : Json.mapper.readValue(defaultDepthParam, Integer.class);
                String importBehaviorParam = message.body().getString("importBehavior");
                String importBehavior = (importBehaviorParam == null) ? null : importBehaviorParam;
                String passwordHashAlgorithmParam = message.body().getString("passwordHashAlgorithm");
                String passwordHashAlgorithm = (passwordHashAlgorithmParam == null) ? null : passwordHashAlgorithmParam;
                String passwordHashIterationsParam = message.body().getString("passwordHashIterations");
                Integer passwordHashIterations = (passwordHashIterationsParam == null) ? null : Json.mapper.readValue(passwordHashIterationsParam, Integer.class);
                String passwordSaltSizeParam = message.body().getString("passwordSaltSize");
                Integer passwordSaltSize = (passwordSaltSizeParam == null) ? null : Json.mapper.readValue(passwordSaltSizeParam, Integer.class);
                String omitAdminPwParam = message.body().getString("omitAdminPw");
                Boolean omitAdminPw = (omitAdminPwParam == null) ? null : Json.mapper.readValue(omitAdminPwParam, Boolean.class);
                String supportAutoSaveParam = message.body().getString("supportAutoSave");
                Boolean supportAutoSave = (supportAutoSaveParam == null) ? null : Json.mapper.readValue(supportAutoSaveParam, Boolean.class);
                String passwordMaxAgeParam = message.body().getString("passwordMaxAge");
                Integer passwordMaxAge = (passwordMaxAgeParam == null) ? null : Json.mapper.readValue(passwordMaxAgeParam, Integer.class);
                String initialPasswordChangeParam = message.body().getString("initialPasswordChange");
                Boolean initialPasswordChange = (initialPasswordChangeParam == null) ? null : Json.mapper.readValue(initialPasswordChangeParam, Boolean.class);
                String passwordHistorySizeParam = message.body().getString("passwordHistorySize");
                Integer passwordHistorySize = (passwordHistorySizeParam == null) ? null : Json.mapper.readValue(passwordHistorySizeParam, Integer.class);
                String passwordExpiryForAdminParam = message.body().getString("passwordExpiryForAdmin");
                Boolean passwordExpiryForAdmin = (passwordExpiryForAdminParam == null) ? null : Json.mapper.readValue(passwordExpiryForAdminParam, Boolean.class);
                String cacheExpirationParam = message.body().getString("cacheExpiration");
                Integer cacheExpiration = (cacheExpirationParam == null) ? null : Json.mapper.readValue(cacheExpirationParam, Integer.class);
                String enableRFC7613UsercaseMappedProfileParam = message.body().getString("enableRFC7613UsercaseMappedProfile");
                Boolean enableRFC7613UsercaseMappedProfile = (enableRFC7613UsercaseMappedProfileParam == null) ? null : Json.mapper.readValue(enableRFC7613UsercaseMappedProfileParam, Boolean.class);
                service.orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(post, apply, delete, action, $location, propertylist, usersPath, groupsPath, systemRelativePath, defaultDepth, importBehavior, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize, omitAdminPw, supportAutoSave, passwordMaxAge, initialPasswordChange, passwordHistorySize, passwordExpiryForAdmin, cacheExpiration, enableRFC7613UsercaseMappedProfile, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakSecurityUserUserConfigurationImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakSecurityUserUserConfigurationImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKSEGMENTAZUREAZURESEGMENTSTORESERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String accountNameParam = message.body().getString("accountName");
                String accountName = (accountNameParam == null) ? null : accountNameParam;
                String containerNameParam = message.body().getString("containerName");
                String containerName = (containerNameParam == null) ? null : containerNameParam;
                String accessKeyParam = message.body().getString("accessKey");
                String accessKey = (accessKeyParam == null) ? null : accessKeyParam;
                String rootPathParam = message.body().getString("rootPath");
                String rootPath = (rootPathParam == null) ? null : rootPathParam;
                String connectionURLParam = message.body().getString("connectionURL");
                String connectionURL = (connectionURLParam == null) ? null : connectionURLParam;
                service.orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(post, apply, delete, action, $location, propertylist, accountName, containerName, accessKey, rootPath, connectionURL, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKSEGMENTSEGMENTNODESTOREFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String repositoryHomeParam = message.body().getString("repository.home");
                String repositoryHome = (repositoryHomeParam == null) ? null : repositoryHomeParam;
                String tarmkModeParam = message.body().getString("tarmk.mode");
                String tarmkMode = (tarmkModeParam == null) ? null : tarmkModeParam;
                String tarmkSizeParam = message.body().getString("tarmk.size");
                Integer tarmkSize = (tarmkSizeParam == null) ? null : Json.mapper.readValue(tarmkSizeParam, Integer.class);
                String segmentCacheSizeParam = message.body().getString("segmentCache.size");
                Integer segmentCacheSize = (segmentCacheSizeParam == null) ? null : Json.mapper.readValue(segmentCacheSizeParam, Integer.class);
                String stringCacheSizeParam = message.body().getString("stringCache.size");
                Integer stringCacheSize = (stringCacheSizeParam == null) ? null : Json.mapper.readValue(stringCacheSizeParam, Integer.class);
                String templateCacheSizeParam = message.body().getString("templateCache.size");
                Integer templateCacheSize = (templateCacheSizeParam == null) ? null : Json.mapper.readValue(templateCacheSizeParam, Integer.class);
                String stringDeduplicationCacheSizeParam = message.body().getString("stringDeduplicationCache.size");
                Integer stringDeduplicationCacheSize = (stringDeduplicationCacheSizeParam == null) ? null : Json.mapper.readValue(stringDeduplicationCacheSizeParam, Integer.class);
                String templateDeduplicationCacheSizeParam = message.body().getString("templateDeduplicationCache.size");
                Integer templateDeduplicationCacheSize = (templateDeduplicationCacheSizeParam == null) ? null : Json.mapper.readValue(templateDeduplicationCacheSizeParam, Integer.class);
                String nodeDeduplicationCacheSizeParam = message.body().getString("nodeDeduplicationCache.size");
                Integer nodeDeduplicationCacheSize = (nodeDeduplicationCacheSizeParam == null) ? null : Json.mapper.readValue(nodeDeduplicationCacheSizeParam, Integer.class);
                String pauseCompactionParam = message.body().getString("pauseCompaction");
                Boolean pauseCompaction = (pauseCompactionParam == null) ? null : Json.mapper.readValue(pauseCompactionParam, Boolean.class);
                String compactionRetryCountParam = message.body().getString("compaction.retryCount");
                Integer compactionRetryCount = (compactionRetryCountParam == null) ? null : Json.mapper.readValue(compactionRetryCountParam, Integer.class);
                String compactionForceTimeoutParam = message.body().getString("compaction.force.timeout");
                Integer compactionForceTimeout = (compactionForceTimeoutParam == null) ? null : Json.mapper.readValue(compactionForceTimeoutParam, Integer.class);
                String compactionSizeDeltaEstimationParam = message.body().getString("compaction.sizeDeltaEstimation");
                Integer compactionSizeDeltaEstimation = (compactionSizeDeltaEstimationParam == null) ? null : Json.mapper.readValue(compactionSizeDeltaEstimationParam, Integer.class);
                String compactionDisableEstimationParam = message.body().getString("compaction.disableEstimation");
                Boolean compactionDisableEstimation = (compactionDisableEstimationParam == null) ? null : Json.mapper.readValue(compactionDisableEstimationParam, Boolean.class);
                String compactionRetainedGenerationsParam = message.body().getString("compaction.retainedGenerations");
                Integer compactionRetainedGenerations = (compactionRetainedGenerationsParam == null) ? null : Json.mapper.readValue(compactionRetainedGenerationsParam, Integer.class);
                String compactionMemoryThresholdParam = message.body().getString("compaction.memoryThreshold");
                Integer compactionMemoryThreshold = (compactionMemoryThresholdParam == null) ? null : Json.mapper.readValue(compactionMemoryThresholdParam, Integer.class);
                String compactionProgressLogParam = message.body().getString("compaction.progressLog");
                Integer compactionProgressLog = (compactionProgressLogParam == null) ? null : Json.mapper.readValue(compactionProgressLogParam, Integer.class);
                String standbyParam = message.body().getString("standby");
                Boolean standby = (standbyParam == null) ? null : Json.mapper.readValue(standbyParam, Boolean.class);
                String customBlobStoreParam = message.body().getString("customBlobStore");
                Boolean customBlobStore = (customBlobStoreParam == null) ? null : Json.mapper.readValue(customBlobStoreParam, Boolean.class);
                String customSegmentStoreParam = message.body().getString("customSegmentStore");
                Boolean customSegmentStore = (customSegmentStoreParam == null) ? null : Json.mapper.readValue(customSegmentStoreParam, Boolean.class);
                String splitPersistenceParam = message.body().getString("splitPersistence");
                Boolean splitPersistence = (splitPersistenceParam == null) ? null : Json.mapper.readValue(splitPersistenceParam, Boolean.class);
                String repositoryBackupDirParam = message.body().getString("repository.backup.dir");
                String repositoryBackupDir = (repositoryBackupDirParam == null) ? null : repositoryBackupDirParam;
                String blobGcMaxAgeInSecsParam = message.body().getString("blobGcMaxAgeInSecs");
                Integer blobGcMaxAgeInSecs = (blobGcMaxAgeInSecsParam == null) ? null : Json.mapper.readValue(blobGcMaxAgeInSecsParam, Integer.class);
                String blobTrackSnapshotIntervalInSecsParam = message.body().getString("blobTrackSnapshotIntervalInSecs");
                Integer blobTrackSnapshotIntervalInSecs = (blobTrackSnapshotIntervalInSecsParam == null) ? null : Json.mapper.readValue(blobTrackSnapshotIntervalInSecsParam, Integer.class);
                String roleParam = message.body().getString("role");
                String role = (roleParam == null) ? null : roleParam;
                String registerDescriptorsParam = message.body().getString("registerDescriptors");
                Boolean registerDescriptors = (registerDescriptorsParam == null) ? null : Json.mapper.readValue(registerDescriptorsParam, Boolean.class);
                String dispatchChangesParam = message.body().getString("dispatchChanges");
                Boolean dispatchChanges = (dispatchChangesParam == null) ? null : Json.mapper.readValue(dispatchChangesParam, Boolean.class);
                service.orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(post, apply, delete, action, $location, propertylist, repositoryHome, tarmkMode, tarmkSize, segmentCacheSize, stringCacheSize, templateCacheSize, stringDeduplicationCacheSize, templateDeduplicationCacheSize, nodeDeduplicationCacheSize, pauseCompaction, compactionRetryCount, compactionForceTimeout, compactionSizeDeltaEstimation, compactionDisableEstimation, compactionRetainedGenerations, compactionMemoryThreshold, compactionProgressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryBackupDir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, role, registerDescriptors, dispatchChanges, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKSEGMENTSEGMENTNODESTOREMONITORSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray commitsTrackerWriterGroupsParam = message.body().getJsonArray("commitsTrackerWriterGroups");
                List<String> commitsTrackerWriterGroups = (commitsTrackerWriterGroupsParam == null) ? null : Json.mapper.readValue(commitsTrackerWriterGroupsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(post, apply, delete, action, $location, propertylist, commitsTrackerWriterGroups, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakSegmentSegmentNodeStoreService
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKSEGMENTSEGMENTNODESTORESERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakSegmentSegmentNodeStoreService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String repositoryHomeParam = message.body().getString("repository.home");
                String repositoryHome = (repositoryHomeParam == null) ? null : repositoryHomeParam;
                String tarmkModeParam = message.body().getString("tarmk.mode");
                String tarmkMode = (tarmkModeParam == null) ? null : tarmkModeParam;
                String tarmkSizeParam = message.body().getString("tarmk.size");
                Integer tarmkSize = (tarmkSizeParam == null) ? null : Json.mapper.readValue(tarmkSizeParam, Integer.class);
                String segmentCacheSizeParam = message.body().getString("segmentCache.size");
                Integer segmentCacheSize = (segmentCacheSizeParam == null) ? null : Json.mapper.readValue(segmentCacheSizeParam, Integer.class);
                String stringCacheSizeParam = message.body().getString("stringCache.size");
                Integer stringCacheSize = (stringCacheSizeParam == null) ? null : Json.mapper.readValue(stringCacheSizeParam, Integer.class);
                String templateCacheSizeParam = message.body().getString("templateCache.size");
                Integer templateCacheSize = (templateCacheSizeParam == null) ? null : Json.mapper.readValue(templateCacheSizeParam, Integer.class);
                String stringDeduplicationCacheSizeParam = message.body().getString("stringDeduplicationCache.size");
                Integer stringDeduplicationCacheSize = (stringDeduplicationCacheSizeParam == null) ? null : Json.mapper.readValue(stringDeduplicationCacheSizeParam, Integer.class);
                String templateDeduplicationCacheSizeParam = message.body().getString("templateDeduplicationCache.size");
                Integer templateDeduplicationCacheSize = (templateDeduplicationCacheSizeParam == null) ? null : Json.mapper.readValue(templateDeduplicationCacheSizeParam, Integer.class);
                String nodeDeduplicationCacheSizeParam = message.body().getString("nodeDeduplicationCache.size");
                Integer nodeDeduplicationCacheSize = (nodeDeduplicationCacheSizeParam == null) ? null : Json.mapper.readValue(nodeDeduplicationCacheSizeParam, Integer.class);
                String pauseCompactionParam = message.body().getString("pauseCompaction");
                Boolean pauseCompaction = (pauseCompactionParam == null) ? null : Json.mapper.readValue(pauseCompactionParam, Boolean.class);
                String compactionRetryCountParam = message.body().getString("compaction.retryCount");
                Integer compactionRetryCount = (compactionRetryCountParam == null) ? null : Json.mapper.readValue(compactionRetryCountParam, Integer.class);
                String compactionForceTimeoutParam = message.body().getString("compaction.force.timeout");
                Integer compactionForceTimeout = (compactionForceTimeoutParam == null) ? null : Json.mapper.readValue(compactionForceTimeoutParam, Integer.class);
                String compactionSizeDeltaEstimationParam = message.body().getString("compaction.sizeDeltaEstimation");
                Integer compactionSizeDeltaEstimation = (compactionSizeDeltaEstimationParam == null) ? null : Json.mapper.readValue(compactionSizeDeltaEstimationParam, Integer.class);
                String compactionDisableEstimationParam = message.body().getString("compaction.disableEstimation");
                Boolean compactionDisableEstimation = (compactionDisableEstimationParam == null) ? null : Json.mapper.readValue(compactionDisableEstimationParam, Boolean.class);
                String compactionRetainedGenerationsParam = message.body().getString("compaction.retainedGenerations");
                Integer compactionRetainedGenerations = (compactionRetainedGenerationsParam == null) ? null : Json.mapper.readValue(compactionRetainedGenerationsParam, Integer.class);
                String compactionMemoryThresholdParam = message.body().getString("compaction.memoryThreshold");
                Integer compactionMemoryThreshold = (compactionMemoryThresholdParam == null) ? null : Json.mapper.readValue(compactionMemoryThresholdParam, Integer.class);
                String compactionProgressLogParam = message.body().getString("compaction.progressLog");
                Integer compactionProgressLog = (compactionProgressLogParam == null) ? null : Json.mapper.readValue(compactionProgressLogParam, Integer.class);
                String standbyParam = message.body().getString("standby");
                Boolean standby = (standbyParam == null) ? null : Json.mapper.readValue(standbyParam, Boolean.class);
                String customBlobStoreParam = message.body().getString("customBlobStore");
                Boolean customBlobStore = (customBlobStoreParam == null) ? null : Json.mapper.readValue(customBlobStoreParam, Boolean.class);
                String customSegmentStoreParam = message.body().getString("customSegmentStore");
                Boolean customSegmentStore = (customSegmentStoreParam == null) ? null : Json.mapper.readValue(customSegmentStoreParam, Boolean.class);
                String splitPersistenceParam = message.body().getString("splitPersistence");
                Boolean splitPersistence = (splitPersistenceParam == null) ? null : Json.mapper.readValue(splitPersistenceParam, Boolean.class);
                String repositoryBackupDirParam = message.body().getString("repository.backup.dir");
                String repositoryBackupDir = (repositoryBackupDirParam == null) ? null : repositoryBackupDirParam;
                String blobGcMaxAgeInSecsParam = message.body().getString("blobGcMaxAgeInSecs");
                Integer blobGcMaxAgeInSecs = (blobGcMaxAgeInSecsParam == null) ? null : Json.mapper.readValue(blobGcMaxAgeInSecsParam, Integer.class);
                String blobTrackSnapshotIntervalInSecsParam = message.body().getString("blobTrackSnapshotIntervalInSecs");
                Integer blobTrackSnapshotIntervalInSecs = (blobTrackSnapshotIntervalInSecsParam == null) ? null : Json.mapper.readValue(blobTrackSnapshotIntervalInSecsParam, Integer.class);
                service.orgApacheJackrabbitOakSegmentSegmentNodeStoreService(post, apply, delete, action, $location, propertylist, repositoryHome, tarmkMode, tarmkSize, segmentCacheSize, stringCacheSize, templateCacheSize, stringDeduplicationCacheSize, templateDeduplicationCacheSize, nodeDeduplicationCacheSize, pauseCompaction, compactionRetryCount, compactionForceTimeout, compactionSizeDeltaEstimation, compactionDisableEstimation, compactionRetainedGenerations, compactionMemoryThreshold, compactionProgressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryBackupDir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakSegmentSegmentNodeStoreService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakSegmentSegmentNodeStoreService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKSEGMENTSTANDBYSTORESTANDBYSTORESERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String orgApacheSlingInstallerConfigurationPersistParam = message.body().getString("org.apache.sling.installer.configuration.persist");
                Boolean orgApacheSlingInstallerConfigurationPersist = (orgApacheSlingInstallerConfigurationPersistParam == null) ? null : Json.mapper.readValue(orgApacheSlingInstallerConfigurationPersistParam, Boolean.class);
                String modeParam = message.body().getString("mode");
                String mode = (modeParam == null) ? null : modeParam;
                String portParam = message.body().getString("port");
                Integer port = (portParam == null) ? null : Json.mapper.readValue(portParam, Integer.class);
                String primaryHostParam = message.body().getString("primary.host");
                String primaryHost = (primaryHostParam == null) ? null : primaryHostParam;
                String intervalParam = message.body().getString("interval");
                Integer interval = (intervalParam == null) ? null : Json.mapper.readValue(intervalParam, Integer.class);
                JsonArray primaryAllowedClientIpRangesParam = message.body().getJsonArray("primary.allowed-client-ip-ranges");
                List<String> primaryAllowedClientIpRanges = (primaryAllowedClientIpRangesParam == null) ? null : Json.mapper.readValue(primaryAllowedClientIpRangesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String secureParam = message.body().getString("secure");
                Boolean secure = (secureParam == null) ? null : Json.mapper.readValue(secureParam, Boolean.class);
                String standbyReadtimeoutParam = message.body().getString("standby.readtimeout");
                Integer standbyReadtimeout = (standbyReadtimeoutParam == null) ? null : Json.mapper.readValue(standbyReadtimeoutParam, Integer.class);
                String standbyAutocleanParam = message.body().getString("standby.autoclean");
                Boolean standbyAutoclean = (standbyAutocleanParam == null) ? null : Json.mapper.readValue(standbyAutocleanParam, Boolean.class);
                service.orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(post, apply, delete, action, $location, propertylist, orgApacheSlingInstallerConfigurationPersist, mode, port, primaryHost, interval, primaryAllowedClientIpRanges, secure, standbyReadtimeout, standbyAutoclean, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKSPISECURITYAUTHENTICATIONEXTERNALIMPLDE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String handlerNameParam = message.body().getString("handler.name");
                String handlerName = (handlerNameParam == null) ? null : handlerNameParam;
                String userExpirationTimeParam = message.body().getString("user.expirationTime");
                String userExpirationTime = (userExpirationTimeParam == null) ? null : userExpirationTimeParam;
                JsonArray userAutoMembershipParam = message.body().getJsonArray("user.autoMembership");
                List<String> userAutoMembership = (userAutoMembershipParam == null) ? null : Json.mapper.readValue(userAutoMembershipParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray userPropertyMappingParam = message.body().getJsonArray("user.propertyMapping");
                List<String> userPropertyMapping = (userPropertyMappingParam == null) ? null : Json.mapper.readValue(userPropertyMappingParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String userPathPrefixParam = message.body().getString("user.pathPrefix");
                String userPathPrefix = (userPathPrefixParam == null) ? null : userPathPrefixParam;
                String userMembershipExpTimeParam = message.body().getString("user.membershipExpTime");
                String userMembershipExpTime = (userMembershipExpTimeParam == null) ? null : userMembershipExpTimeParam;
                String userMembershipNestingDepthParam = message.body().getString("user.membershipNestingDepth");
                Integer userMembershipNestingDepth = (userMembershipNestingDepthParam == null) ? null : Json.mapper.readValue(userMembershipNestingDepthParam, Integer.class);
                String userDynamicMembershipParam = message.body().getString("user.dynamicMembership");
                Boolean userDynamicMembership = (userDynamicMembershipParam == null) ? null : Json.mapper.readValue(userDynamicMembershipParam, Boolean.class);
                String userDisableMissingParam = message.body().getString("user.disableMissing");
                Boolean userDisableMissing = (userDisableMissingParam == null) ? null : Json.mapper.readValue(userDisableMissingParam, Boolean.class);
                String groupExpirationTimeParam = message.body().getString("group.expirationTime");
                String groupExpirationTime = (groupExpirationTimeParam == null) ? null : groupExpirationTimeParam;
                JsonArray groupAutoMembershipParam = message.body().getJsonArray("group.autoMembership");
                List<String> groupAutoMembership = (groupAutoMembershipParam == null) ? null : Json.mapper.readValue(groupAutoMembershipParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray groupPropertyMappingParam = message.body().getJsonArray("group.propertyMapping");
                List<String> groupPropertyMapping = (groupPropertyMappingParam == null) ? null : Json.mapper.readValue(groupPropertyMappingParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String groupPathPrefixParam = message.body().getString("group.pathPrefix");
                String groupPathPrefix = (groupPathPrefixParam == null) ? null : groupPathPrefixParam;
                String enableRFC7613UsercaseMappedProfileParam = message.body().getString("enableRFC7613UsercaseMappedProfile");
                Boolean enableRFC7613UsercaseMappedProfile = (enableRFC7613UsercaseMappedProfileParam == null) ? null : Json.mapper.readValue(enableRFC7613UsercaseMappedProfileParam, Boolean.class);
                service.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(post, apply, delete, action, $location, propertylist, handlerName, userExpirationTime, userAutoMembership, userPropertyMapping, userPathPrefix, userMembershipExpTime, userMembershipNestingDepth, userDynamicMembership, userDisableMissing, groupExpirationTime, groupAutoMembership, groupPropertyMapping, groupPathPrefix, enableRFC7613UsercaseMappedProfile, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKSPISECURITYAUTHENTICATIONEXTERNALIMPLEX_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String jaasRankingParam = message.body().getString("jaas.ranking");
                Integer jaasRanking = (jaasRankingParam == null) ? null : Json.mapper.readValue(jaasRankingParam, Integer.class);
                String jaasControlFlagParam = message.body().getString("jaas.controlFlag");
                String jaasControlFlag = (jaasControlFlagParam == null) ? null : jaasControlFlagParam;
                String jaasRealmNameParam = message.body().getString("jaas.realmName");
                String jaasRealmName = (jaasRealmNameParam == null) ? null : jaasRealmNameParam;
                String idpNameParam = message.body().getString("idp.name");
                String idpName = (idpNameParam == null) ? null : idpNameParam;
                String syncHandlerNameParam = message.body().getString("sync.handlerName");
                String syncHandlerName = (syncHandlerNameParam == null) ? null : syncHandlerNameParam;
                service.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(post, apply, delete, action, $location, propertylist, jaasRanking, jaasControlFlag, jaasRealmName, idpName, syncHandlerName, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKSPISECURITYAUTHENTICATIONEXTERNALIMPLPR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String protectExternalIdParam = message.body().getString("protectExternalId");
                Boolean protectExternalId = (protectExternalIdParam == null) ? null : Json.mapper.readValue(protectExternalIdParam, Boolean.class);
                service.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(post, apply, delete, action, $location, propertylist, protectExternalId, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKSPISECURITYAUTHORIZATIONCUGIMPLCUGCONFI_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray cugSupportedPathsParam = message.body().getJsonArray("cugSupportedPaths");
                List<String> cugSupportedPaths = (cugSupportedPathsParam == null) ? null : Json.mapper.readValue(cugSupportedPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String cugEnabledParam = message.body().getString("cugEnabled");
                Boolean cugEnabled = (cugEnabledParam == null) ? null : Json.mapper.readValue(cugEnabledParam, Boolean.class);
                String configurationRankingParam = message.body().getString("configurationRanking");
                Integer configurationRanking = (configurationRankingParam == null) ? null : Json.mapper.readValue(configurationRankingParam, Integer.class);
                service.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(post, apply, delete, action, $location, propertylist, cugSupportedPaths, cugEnabled, configurationRanking, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKSPISECURITYAUTHORIZATIONCUGIMPLCUGEXCLU_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray principalNamesParam = message.body().getJsonArray("principalNames");
                List<String> principalNames = (principalNamesParam == null) ? null : Json.mapper.readValue(principalNamesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(post, apply, delete, action, $location, propertylist, principalNames, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITOAKSPISECURITYUSERACTIONDEFAULTAUTHORIZABLE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledActionsParam = message.body().getString("enabledActions");
                String enabledActions = (enabledActionsParam == null) ? null : enabledActionsParam;
                JsonArray userPrivilegeNamesParam = message.body().getJsonArray("userPrivilegeNames");
                List<String> userPrivilegeNames = (userPrivilegeNamesParam == null) ? null : Json.mapper.readValue(userPrivilegeNamesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray groupPrivilegeNamesParam = message.body().getJsonArray("groupPrivilegeNames");
                List<String> groupPrivilegeNames = (groupPrivilegeNamesParam == null) ? null : Json.mapper.readValue(groupPrivilegeNamesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String constraintParam = message.body().getString("constraint");
                String constraint = (constraintParam == null) ? null : constraintParam;
                service.orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(post, apply, delete, action, $location, propertylist, enabledActions, userPrivilegeNames, groupPrivilegeNames, constraint, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitVaultPackagingImplPackagingImpl
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITVAULTPACKAGINGIMPLPACKAGINGIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitVaultPackagingImplPackagingImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray packageRootsParam = message.body().getJsonArray("packageRoots");
                List<String> packageRoots = (packageRootsParam == null) ? null : Json.mapper.readValue(packageRootsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheJackrabbitVaultPackagingImplPackagingImpl(post, apply, delete, action, $location, propertylist, packageRoots, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitVaultPackagingImplPackagingImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitVaultPackagingImplPackagingImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry
        vertx.eventBus().<JsonObject> consumer(ORGAPACHEJACKRABBITVAULTPACKAGINGREGISTRYIMPLFSPACKAGEREGISTRY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String homePathParam = message.body().getString("homePath");
                String homePath = (homePathParam == null) ? null : homePathParam;
                service.orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(post, apply, delete, action, $location, propertylist, homePath, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingAuthCoreImplLogoutServlet
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGAUTHCOREIMPLLOGOUTSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingAuthCoreImplLogoutServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray slingServletMethodsParam = message.body().getJsonArray("sling.servlet.methods");
                List<String> slingServletMethods = (slingServletMethodsParam == null) ? null : Json.mapper.readValue(slingServletMethodsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingServletPathsParam = message.body().getString("sling.servlet.paths");
                String slingServletPaths = (slingServletPathsParam == null) ? null : slingServletPathsParam;
                service.orgApacheSlingAuthCoreImplLogoutServlet(post, apply, delete, action, $location, propertylist, slingServletMethods, slingServletPaths, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingAuthCoreImplLogoutServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingAuthCoreImplLogoutServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingCaconfigImplConfigurationBindingsValueProvider
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGCACONFIGIMPLCONFIGURATIONBINDINGSVALUEPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingCaconfigImplConfigurationBindingsValueProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                service.orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(post, apply, delete, action, $location, propertylist, enabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingCaconfigImplConfigurationBindingsValueProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingCaconfigImplConfigurationBindingsValueProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingCaconfigImplConfigurationResolverImpl
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGCACONFIGIMPLCONFIGURATIONRESOLVERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingCaconfigImplConfigurationResolverImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray configBucketNamesParam = message.body().getJsonArray("configBucketNames");
                List<String> configBucketNames = (configBucketNamesParam == null) ? null : Json.mapper.readValue(configBucketNamesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingCaconfigImplConfigurationResolverImpl(post, apply, delete, action, $location, propertylist, configBucketNames, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingCaconfigImplConfigurationResolverImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingCaconfigImplConfigurationResolverImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGCACONFIGIMPLDEFDEFAULTCONFIGURATIONINHERITANCESTRA_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                JsonArray configPropertyInheritancePropertyNamesParam = message.body().getJsonArray("configPropertyInheritancePropertyNames");
                List<String> configPropertyInheritancePropertyNames = (configPropertyInheritancePropertyNamesParam == null) ? null : Json.mapper.readValue(configPropertyInheritancePropertyNamesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(post, apply, delete, action, $location, propertylist, enabled, configPropertyInheritancePropertyNames, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGCACONFIGIMPLDEFDEFAULTCONFIGURATIONPERSISTENCESTRA_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                service.orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(post, apply, delete, action, $location, propertylist, enabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGCACONFIGIMPLOVERRIDEOSGICONFIGURATIONOVERRIDEPROVI_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String descriptionParam = message.body().getString("description");
                String description = (descriptionParam == null) ? null : descriptionParam;
                JsonArray overridesParam = message.body().getJsonArray("overrides");
                List<String> overrides = (overridesParam == null) ? null : Json.mapper.readValue(overridesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                service.orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(post, apply, delete, action, $location, propertylist, description, overrides, enabled, serviceRanking, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGCACONFIGIMPLOVERRIDESYSTEMPROPERTYCONFIGURATIONOVE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                service.orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(post, apply, delete, action, $location, propertylist, enabled, serviceRanking, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingCaconfigManagementImplConfigurationManagementSetti
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGCACONFIGMANAGEMENTIMPLCONFIGURATIONMANAGEMENTSETTI_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingCaconfigManagementImplConfigurationManagementSetti";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray ignorePropertyNameRegexParam = message.body().getJsonArray("ignorePropertyNameRegex");
                List<String> ignorePropertyNameRegex = (ignorePropertyNameRegexParam == null) ? null : Json.mapper.readValue(ignorePropertyNameRegexParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray configCollectionPropertiesResourceNamesParam = message.body().getJsonArray("configCollectionPropertiesResourceNames");
                List<String> configCollectionPropertiesResourceNames = (configCollectionPropertiesResourceNamesParam == null) ? null : Json.mapper.readValue(configCollectionPropertiesResourceNamesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingCaconfigManagementImplConfigurationManagementSetti(post, apply, delete, action, $location, propertylist, ignorePropertyNameRegex, configCollectionPropertiesResourceNames, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingCaconfigManagementImplConfigurationManagementSetti");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingCaconfigManagementImplConfigurationManagementSetti", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGCACONFIGRESOURCEIMPLDEFDEFAULTCONFIGURATIONRESOUR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                String configPathParam = message.body().getString("configPath");
                String configPath = (configPathParam == null) ? null : configPathParam;
                JsonArray fallbackPathsParam = message.body().getJsonArray("fallbackPaths");
                List<String> fallbackPaths = (fallbackPathsParam == null) ? null : Json.mapper.readValue(fallbackPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray configCollectionInheritancePropertyNamesParam = message.body().getJsonArray("configCollectionInheritancePropertyNames");
                List<String> configCollectionInheritancePropertyNames = (configCollectionInheritancePropertyNamesParam == null) ? null : Json.mapper.readValue(configCollectionInheritancePropertyNamesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(post, apply, delete, action, $location, propertylist, enabled, configPath, fallbackPaths, configCollectionInheritancePropertyNames, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGCACONFIGRESOURCEIMPLDEFDEFAULTCONTEXTPATHSTRATEGY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                JsonArray configRefResourceNamesParam = message.body().getJsonArray("configRefResourceNames");
                List<String> configRefResourceNames = (configRefResourceNamesParam == null) ? null : Json.mapper.readValue(configRefResourceNamesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray configRefPropertyNamesParam = message.body().getJsonArray("configRefPropertyNames");
                List<String> configRefPropertyNames = (configRefPropertyNamesParam == null) ? null : Json.mapper.readValue(configRefPropertyNamesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                service.orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(post, apply, delete, action, $location, propertylist, enabled, configRefResourceNames, configRefPropertyNames, serviceRanking, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGCOMMONSHTMLINTERNALTAGSOUPHTMLPARSER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray parserFeaturesParam = message.body().getJsonArray("parser.features");
                List<String> parserFeatures = (parserFeaturesParam == null) ? null : Json.mapper.readValue(parserFeaturesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(post, apply, delete, action, $location, propertylist, parserFeatures, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingCommonsLogLogManager
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGCOMMONSLOGLOGMANAGER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingCommonsLogLogManager";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String orgApacheSlingCommonsLogLevelParam = message.body().getString("org.apache.sling.commons.log.level");
                String orgApacheSlingCommonsLogLevel = (orgApacheSlingCommonsLogLevelParam == null) ? null : orgApacheSlingCommonsLogLevelParam;
                String orgApacheSlingCommonsLogFileParam = message.body().getString("org.apache.sling.commons.log.file");
                String orgApacheSlingCommonsLogFile = (orgApacheSlingCommonsLogFileParam == null) ? null : orgApacheSlingCommonsLogFileParam;
                String orgApacheSlingCommonsLogFileNumberParam = message.body().getString("org.apache.sling.commons.log.file.number");
                Integer orgApacheSlingCommonsLogFileNumber = (orgApacheSlingCommonsLogFileNumberParam == null) ? null : Json.mapper.readValue(orgApacheSlingCommonsLogFileNumberParam, Integer.class);
                String orgApacheSlingCommonsLogFileSizeParam = message.body().getString("org.apache.sling.commons.log.file.size");
                String orgApacheSlingCommonsLogFileSize = (orgApacheSlingCommonsLogFileSizeParam == null) ? null : orgApacheSlingCommonsLogFileSizeParam;
                String orgApacheSlingCommonsLogPatternParam = message.body().getString("org.apache.sling.commons.log.pattern");
                String orgApacheSlingCommonsLogPattern = (orgApacheSlingCommonsLogPatternParam == null) ? null : orgApacheSlingCommonsLogPatternParam;
                String orgApacheSlingCommonsLogConfigurationFileParam = message.body().getString("org.apache.sling.commons.log.configurationFile");
                String orgApacheSlingCommonsLogConfigurationFile = (orgApacheSlingCommonsLogConfigurationFileParam == null) ? null : orgApacheSlingCommonsLogConfigurationFileParam;
                String orgApacheSlingCommonsLogPackagingDataEnabledParam = message.body().getString("org.apache.sling.commons.log.packagingDataEnabled");
                Boolean orgApacheSlingCommonsLogPackagingDataEnabled = (orgApacheSlingCommonsLogPackagingDataEnabledParam == null) ? null : Json.mapper.readValue(orgApacheSlingCommonsLogPackagingDataEnabledParam, Boolean.class);
                String orgApacheSlingCommonsLogMaxCallerDataDepthParam = message.body().getString("org.apache.sling.commons.log.maxCallerDataDepth");
                Integer orgApacheSlingCommonsLogMaxCallerDataDepth = (orgApacheSlingCommonsLogMaxCallerDataDepthParam == null) ? null : Json.mapper.readValue(orgApacheSlingCommonsLogMaxCallerDataDepthParam, Integer.class);
                String orgApacheSlingCommonsLogMaxOldFileCountInDumpParam = message.body().getString("org.apache.sling.commons.log.maxOldFileCountInDump");
                Integer orgApacheSlingCommonsLogMaxOldFileCountInDump = (orgApacheSlingCommonsLogMaxOldFileCountInDumpParam == null) ? null : Json.mapper.readValue(orgApacheSlingCommonsLogMaxOldFileCountInDumpParam, Integer.class);
                String orgApacheSlingCommonsLogNumOfLinesParam = message.body().getString("org.apache.sling.commons.log.numOfLines");
                Integer orgApacheSlingCommonsLogNumOfLines = (orgApacheSlingCommonsLogNumOfLinesParam == null) ? null : Json.mapper.readValue(orgApacheSlingCommonsLogNumOfLinesParam, Integer.class);
                service.orgApacheSlingCommonsLogLogManager(post, apply, delete, action, $location, propertylist, orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogConfigurationFile, orgApacheSlingCommonsLogPackagingDataEnabled, orgApacheSlingCommonsLogMaxCallerDataDepth, orgApacheSlingCommonsLogMaxOldFileCountInDump, orgApacheSlingCommonsLogNumOfLines, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingCommonsLogLogManager");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingCommonsLogLogManager", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingCommonsLogLogManagerFactoryConfig
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGCOMMONSLOGLOGMANAGERFACTORYCONFIG_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingCommonsLogLogManagerFactoryConfig";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String orgApacheSlingCommonsLogLevelParam = message.body().getString("org.apache.sling.commons.log.level");
                String orgApacheSlingCommonsLogLevel = (orgApacheSlingCommonsLogLevelParam == null) ? null : orgApacheSlingCommonsLogLevelParam;
                String orgApacheSlingCommonsLogFileParam = message.body().getString("org.apache.sling.commons.log.file");
                String orgApacheSlingCommonsLogFile = (orgApacheSlingCommonsLogFileParam == null) ? null : orgApacheSlingCommonsLogFileParam;
                String orgApacheSlingCommonsLogPatternParam = message.body().getString("org.apache.sling.commons.log.pattern");
                String orgApacheSlingCommonsLogPattern = (orgApacheSlingCommonsLogPatternParam == null) ? null : orgApacheSlingCommonsLogPatternParam;
                JsonArray orgApacheSlingCommonsLogNamesParam = message.body().getJsonArray("org.apache.sling.commons.log.names");
                List<String> orgApacheSlingCommonsLogNames = (orgApacheSlingCommonsLogNamesParam == null) ? null : Json.mapper.readValue(orgApacheSlingCommonsLogNamesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String orgApacheSlingCommonsLogAdditivParam = message.body().getString("org.apache.sling.commons.log.additiv");
                Boolean orgApacheSlingCommonsLogAdditiv = (orgApacheSlingCommonsLogAdditivParam == null) ? null : Json.mapper.readValue(orgApacheSlingCommonsLogAdditivParam, Boolean.class);
                service.orgApacheSlingCommonsLogLogManagerFactoryConfig(post, apply, delete, action, $location, propertylist, orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogNames, orgApacheSlingCommonsLogAdditiv, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingCommonsLogLogManagerFactoryConfig");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingCommonsLogLogManagerFactoryConfig", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingCommonsLogLogManagerFactoryWriter
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGCOMMONSLOGLOGMANAGERFACTORYWRITER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingCommonsLogLogManagerFactoryWriter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String orgApacheSlingCommonsLogFileParam = message.body().getString("org.apache.sling.commons.log.file");
                String orgApacheSlingCommonsLogFile = (orgApacheSlingCommonsLogFileParam == null) ? null : orgApacheSlingCommonsLogFileParam;
                String orgApacheSlingCommonsLogFileNumberParam = message.body().getString("org.apache.sling.commons.log.file.number");
                Integer orgApacheSlingCommonsLogFileNumber = (orgApacheSlingCommonsLogFileNumberParam == null) ? null : Json.mapper.readValue(orgApacheSlingCommonsLogFileNumberParam, Integer.class);
                String orgApacheSlingCommonsLogFileSizeParam = message.body().getString("org.apache.sling.commons.log.file.size");
                String orgApacheSlingCommonsLogFileSize = (orgApacheSlingCommonsLogFileSizeParam == null) ? null : orgApacheSlingCommonsLogFileSizeParam;
                String orgApacheSlingCommonsLogFileBufferedParam = message.body().getString("org.apache.sling.commons.log.file.buffered");
                Boolean orgApacheSlingCommonsLogFileBuffered = (orgApacheSlingCommonsLogFileBufferedParam == null) ? null : Json.mapper.readValue(orgApacheSlingCommonsLogFileBufferedParam, Boolean.class);
                service.orgApacheSlingCommonsLogLogManagerFactoryWriter(post, apply, delete, action, $location, propertylist, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogFileBuffered, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingCommonsLogLogManagerFactoryWriter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingCommonsLogLogManagerFactoryWriter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingCommonsMetricsInternalLogReporter
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGCOMMONSMETRICSINTERNALLOGREPORTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingCommonsMetricsInternalLogReporter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String periodParam = message.body().getString("period");
                Integer period = (periodParam == null) ? null : Json.mapper.readValue(periodParam, Integer.class);
                String timeUnitParam = message.body().getString("timeUnit");
                String timeUnit = (timeUnitParam == null) ? null : timeUnitParam;
                String levelParam = message.body().getString("level");
                String level = (levelParam == null) ? null : levelParam;
                String loggerNameParam = message.body().getString("loggerName");
                String loggerName = (loggerNameParam == null) ? null : loggerNameParam;
                String prefixParam = message.body().getString("prefix");
                String prefix = (prefixParam == null) ? null : prefixParam;
                String patternParam = message.body().getString("pattern");
                String pattern = (patternParam == null) ? null : patternParam;
                String registryNameParam = message.body().getString("registryName");
                String registryName = (registryNameParam == null) ? null : registryNameParam;
                service.orgApacheSlingCommonsMetricsInternalLogReporter(post, apply, delete, action, $location, propertylist, period, timeUnit, level, loggerName, prefix, pattern, registryName, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingCommonsMetricsInternalLogReporter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingCommonsMetricsInternalLogReporter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGCOMMONSMETRICSRRD4JIMPLCODAHALEMETRICSREPORTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray datasourcesParam = message.body().getJsonArray("datasources");
                List<String> datasources = (datasourcesParam == null) ? null : Json.mapper.readValue(datasourcesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String stepParam = message.body().getString("step");
                Integer step = (stepParam == null) ? null : Json.mapper.readValue(stepParam, Integer.class);
                JsonArray archivesParam = message.body().getJsonArray("archives");
                List<String> archives = (archivesParam == null) ? null : Json.mapper.readValue(archivesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pathParam = message.body().getString("path");
                String path = (pathParam == null) ? null : pathParam;
                service.orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(post, apply, delete, action, $location, propertylist, datasources, step, archives, path, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGCOMMONSMIMEINTERNALMIMETYPESERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray mimeTypesParam = message.body().getJsonArray("mime.types");
                List<String> mimeTypes = (mimeTypesParam == null) ? null : Json.mapper.readValue(mimeTypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(post, apply, delete, action, $location, propertylist, mimeTypes, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingCommonsSchedulerImplQuartzScheduler
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGCOMMONSSCHEDULERIMPLQUARTZSCHEDULER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingCommonsSchedulerImplQuartzScheduler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String poolNameParam = message.body().getString("poolName");
                String poolName = (poolNameParam == null) ? null : poolNameParam;
                JsonArray allowedPoolNamesParam = message.body().getJsonArray("allowedPoolNames");
                List<String> allowedPoolNames = (allowedPoolNamesParam == null) ? null : Json.mapper.readValue(allowedPoolNamesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String schedulerUseleaderforsingleParam = message.body().getString("scheduler.useleaderforsingle");
                Boolean schedulerUseleaderforsingle = (schedulerUseleaderforsingleParam == null) ? null : Json.mapper.readValue(schedulerUseleaderforsingleParam, Boolean.class);
                JsonArray metricsFiltersParam = message.body().getJsonArray("metrics.filters");
                List<String> metricsFilters = (metricsFiltersParam == null) ? null : Json.mapper.readValue(metricsFiltersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slowThresholdMillisParam = message.body().getString("slowThresholdMillis");
                Integer slowThresholdMillis = (slowThresholdMillisParam == null) ? null : Json.mapper.readValue(slowThresholdMillisParam, Integer.class);
                service.orgApacheSlingCommonsSchedulerImplQuartzScheduler(post, apply, delete, action, $location, propertylist, poolName, allowedPoolNames, schedulerUseleaderforsingle, metricsFilters, slowThresholdMillis, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingCommonsSchedulerImplQuartzScheduler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingCommonsSchedulerImplQuartzScheduler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGCOMMONSSCHEDULERIMPLSCHEDULERHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String maxQuartzJobDurationAcceptableParam = message.body().getString("max.quartzJob.duration.acceptable");
                Integer maxQuartzJobDurationAcceptable = (maxQuartzJobDurationAcceptableParam == null) ? null : Json.mapper.readValue(maxQuartzJobDurationAcceptableParam, Integer.class);
                service.orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(post, apply, delete, action, $location, propertylist, maxQuartzJobDurationAcceptable, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGCOMMONSTHREADSIMPLDEFAULTTHREADPOOLFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String minPoolSizeParam = message.body().getString("minPoolSize");
                Integer minPoolSize = (minPoolSizeParam == null) ? null : Json.mapper.readValue(minPoolSizeParam, Integer.class);
                String maxPoolSizeParam = message.body().getString("maxPoolSize");
                Integer maxPoolSize = (maxPoolSizeParam == null) ? null : Json.mapper.readValue(maxPoolSizeParam, Integer.class);
                String queueSizeParam = message.body().getString("queueSize");
                Integer queueSize = (queueSizeParam == null) ? null : Json.mapper.readValue(queueSizeParam, Integer.class);
                String maxThreadAgeParam = message.body().getString("maxThreadAge");
                Integer maxThreadAge = (maxThreadAgeParam == null) ? null : Json.mapper.readValue(maxThreadAgeParam, Integer.class);
                String keepAliveTimeParam = message.body().getString("keepAliveTime");
                Integer keepAliveTime = (keepAliveTimeParam == null) ? null : Json.mapper.readValue(keepAliveTimeParam, Integer.class);
                String blockPolicyParam = message.body().getString("blockPolicy");
                String blockPolicy = (blockPolicyParam == null) ? null : blockPolicyParam;
                String shutdownGracefulParam = message.body().getString("shutdownGraceful");
                Boolean shutdownGraceful = (shutdownGracefulParam == null) ? null : Json.mapper.readValue(shutdownGracefulParam, Boolean.class);
                String daemonParam = message.body().getString("daemon");
                Boolean daemon = (daemonParam == null) ? null : Json.mapper.readValue(daemonParam, Boolean.class);
                String shutdownWaitTimeParam = message.body().getString("shutdownWaitTime");
                Integer shutdownWaitTime = (shutdownWaitTimeParam == null) ? null : Json.mapper.readValue(shutdownWaitTimeParam, Integer.class);
                String priorityParam = message.body().getString("priority");
                String priority = (priorityParam == null) ? null : priorityParam;
                service.orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(post, apply, delete, action, $location, propertylist, name, minPoolSize, maxPoolSize, queueSize, maxThreadAge, keepAliveTime, blockPolicy, shutdownGraceful, daemon, shutdownWaitTime, priority, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDatasourceDataSourceFactory
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDATASOURCEDATASOURCEFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDatasourceDataSourceFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String datasourceNameParam = message.body().getString("datasource.name");
                String datasourceName = (datasourceNameParam == null) ? null : datasourceNameParam;
                String datasourceSvcPropNameParam = message.body().getString("datasource.svc.prop.name");
                String datasourceSvcPropName = (datasourceSvcPropNameParam == null) ? null : datasourceSvcPropNameParam;
                String driverClassNameParam = message.body().getString("driverClassName");
                String driverClassName = (driverClassNameParam == null) ? null : driverClassNameParam;
                String urlParam = message.body().getString("url");
                String url = (urlParam == null) ? null : urlParam;
                String usernameParam = message.body().getString("username");
                String username = (usernameParam == null) ? null : usernameParam;
                String passwordParam = message.body().getString("password");
                String password = (passwordParam == null) ? null : passwordParam;
                String defaultAutoCommitParam = message.body().getString("defaultAutoCommit");
                String defaultAutoCommit = (defaultAutoCommitParam == null) ? null : defaultAutoCommitParam;
                String defaultReadOnlyParam = message.body().getString("defaultReadOnly");
                String defaultReadOnly = (defaultReadOnlyParam == null) ? null : defaultReadOnlyParam;
                String defaultTransactionIsolationParam = message.body().getString("defaultTransactionIsolation");
                String defaultTransactionIsolation = (defaultTransactionIsolationParam == null) ? null : defaultTransactionIsolationParam;
                String defaultCatalogParam = message.body().getString("defaultCatalog");
                String defaultCatalog = (defaultCatalogParam == null) ? null : defaultCatalogParam;
                String maxActiveParam = message.body().getString("maxActive");
                Integer maxActive = (maxActiveParam == null) ? null : Json.mapper.readValue(maxActiveParam, Integer.class);
                String maxIdleParam = message.body().getString("maxIdle");
                Integer maxIdle = (maxIdleParam == null) ? null : Json.mapper.readValue(maxIdleParam, Integer.class);
                String minIdleParam = message.body().getString("minIdle");
                Integer minIdle = (minIdleParam == null) ? null : Json.mapper.readValue(minIdleParam, Integer.class);
                String initialSizeParam = message.body().getString("initialSize");
                Integer initialSize = (initialSizeParam == null) ? null : Json.mapper.readValue(initialSizeParam, Integer.class);
                String maxWaitParam = message.body().getString("maxWait");
                Integer maxWait = (maxWaitParam == null) ? null : Json.mapper.readValue(maxWaitParam, Integer.class);
                String maxAgeParam = message.body().getString("maxAge");
                Integer maxAge = (maxAgeParam == null) ? null : Json.mapper.readValue(maxAgeParam, Integer.class);
                String testOnBorrowParam = message.body().getString("testOnBorrow");
                Boolean testOnBorrow = (testOnBorrowParam == null) ? null : Json.mapper.readValue(testOnBorrowParam, Boolean.class);
                String testOnReturnParam = message.body().getString("testOnReturn");
                Boolean testOnReturn = (testOnReturnParam == null) ? null : Json.mapper.readValue(testOnReturnParam, Boolean.class);
                String testWhileIdleParam = message.body().getString("testWhileIdle");
                Boolean testWhileIdle = (testWhileIdleParam == null) ? null : Json.mapper.readValue(testWhileIdleParam, Boolean.class);
                String validationQueryParam = message.body().getString("validationQuery");
                String validationQuery = (validationQueryParam == null) ? null : validationQueryParam;
                String validationQueryTimeoutParam = message.body().getString("validationQueryTimeout");
                Integer validationQueryTimeout = (validationQueryTimeoutParam == null) ? null : Json.mapper.readValue(validationQueryTimeoutParam, Integer.class);
                String timeBetweenEvictionRunsMillisParam = message.body().getString("timeBetweenEvictionRunsMillis");
                Integer timeBetweenEvictionRunsMillis = (timeBetweenEvictionRunsMillisParam == null) ? null : Json.mapper.readValue(timeBetweenEvictionRunsMillisParam, Integer.class);
                String minEvictableIdleTimeMillisParam = message.body().getString("minEvictableIdleTimeMillis");
                Integer minEvictableIdleTimeMillis = (minEvictableIdleTimeMillisParam == null) ? null : Json.mapper.readValue(minEvictableIdleTimeMillisParam, Integer.class);
                String connectionPropertiesParam = message.body().getString("connectionProperties");
                String connectionProperties = (connectionPropertiesParam == null) ? null : connectionPropertiesParam;
                String initSQLParam = message.body().getString("initSQL");
                String initSQL = (initSQLParam == null) ? null : initSQLParam;
                String jdbcInterceptorsParam = message.body().getString("jdbcInterceptors");
                String jdbcInterceptors = (jdbcInterceptorsParam == null) ? null : jdbcInterceptorsParam;
                String validationIntervalParam = message.body().getString("validationInterval");
                Integer validationInterval = (validationIntervalParam == null) ? null : Json.mapper.readValue(validationIntervalParam, Integer.class);
                String logValidationErrorsParam = message.body().getString("logValidationErrors");
                Boolean logValidationErrors = (logValidationErrorsParam == null) ? null : Json.mapper.readValue(logValidationErrorsParam, Boolean.class);
                JsonArray datasourceSvcPropertiesParam = message.body().getJsonArray("datasource.svc.properties");
                List<String> datasourceSvcProperties = (datasourceSvcPropertiesParam == null) ? null : Json.mapper.readValue(datasourceSvcPropertiesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingDatasourceDataSourceFactory(post, apply, delete, action, $location, propertylist, datasourceName, datasourceSvcPropName, driverClassName, url, username, password, defaultAutoCommit, defaultReadOnly, defaultTransactionIsolation, defaultCatalog, maxActive, maxIdle, minIdle, initialSize, maxWait, maxAge, testOnBorrow, testOnReturn, testWhileIdle, validationQuery, validationQueryTimeout, timeBetweenEvictionRunsMillis, minEvictableIdleTimeMillis, connectionProperties, initSQL, jdbcInterceptors, validationInterval, logValidationErrors, datasourceSvcProperties, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDatasourceDataSourceFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDatasourceDataSourceFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDatasourceJNDIDataSourceFactory
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDATASOURCEJNDIDATASOURCEFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDatasourceJNDIDataSourceFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String datasourceNameParam = message.body().getString("datasource.name");
                String datasourceName = (datasourceNameParam == null) ? null : datasourceNameParam;
                String datasourceSvcPropNameParam = message.body().getString("datasource.svc.prop.name");
                String datasourceSvcPropName = (datasourceSvcPropNameParam == null) ? null : datasourceSvcPropNameParam;
                String datasourceJndiNameParam = message.body().getString("datasource.jndi.name");
                String datasourceJndiName = (datasourceJndiNameParam == null) ? null : datasourceJndiNameParam;
                JsonArray jndiPropertiesParam = message.body().getJsonArray("jndi.properties");
                List<String> jndiProperties = (jndiPropertiesParam == null) ? null : Json.mapper.readValue(jndiPropertiesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingDatasourceJNDIDataSourceFactory(post, apply, delete, action, $location, propertylist, datasourceName, datasourceSvcPropName, datasourceJndiName, jndiProperties, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDatasourceJNDIDataSourceFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDatasourceJNDIDataSourceFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDiscoveryOakConfig
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISCOVERYOAKCONFIG_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDiscoveryOakConfig";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String connectorPingTimeoutParam = message.body().getString("connectorPingTimeout");
                Integer connectorPingTimeout = (connectorPingTimeoutParam == null) ? null : Json.mapper.readValue(connectorPingTimeoutParam, Integer.class);
                String connectorPingIntervalParam = message.body().getString("connectorPingInterval");
                Integer connectorPingInterval = (connectorPingIntervalParam == null) ? null : Json.mapper.readValue(connectorPingIntervalParam, Integer.class);
                String discoveryLiteCheckIntervalParam = message.body().getString("discoveryLiteCheckInterval");
                Integer discoveryLiteCheckInterval = (discoveryLiteCheckIntervalParam == null) ? null : Json.mapper.readValue(discoveryLiteCheckIntervalParam, Integer.class);
                String clusterSyncServiceTimeoutParam = message.body().getString("clusterSyncServiceTimeout");
                Integer clusterSyncServiceTimeout = (clusterSyncServiceTimeoutParam == null) ? null : Json.mapper.readValue(clusterSyncServiceTimeoutParam, Integer.class);
                String clusterSyncServiceIntervalParam = message.body().getString("clusterSyncServiceInterval");
                Integer clusterSyncServiceInterval = (clusterSyncServiceIntervalParam == null) ? null : Json.mapper.readValue(clusterSyncServiceIntervalParam, Integer.class);
                String enableSyncTokenParam = message.body().getString("enableSyncToken");
                Boolean enableSyncToken = (enableSyncTokenParam == null) ? null : Json.mapper.readValue(enableSyncTokenParam, Boolean.class);
                String minEventDelayParam = message.body().getString("minEventDelay");
                Integer minEventDelay = (minEventDelayParam == null) ? null : Json.mapper.readValue(minEventDelayParam, Integer.class);
                String socketConnectTimeoutParam = message.body().getString("socketConnectTimeout");
                Integer socketConnectTimeout = (socketConnectTimeoutParam == null) ? null : Json.mapper.readValue(socketConnectTimeoutParam, Integer.class);
                String soTimeoutParam = message.body().getString("soTimeout");
                Integer soTimeout = (soTimeoutParam == null) ? null : Json.mapper.readValue(soTimeoutParam, Integer.class);
                JsonArray topologyConnectorUrlsParam = message.body().getJsonArray("topologyConnectorUrls");
                List<String> topologyConnectorUrls = (topologyConnectorUrlsParam == null) ? null : Json.mapper.readValue(topologyConnectorUrlsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray topologyConnectorWhitelistParam = message.body().getJsonArray("topologyConnectorWhitelist");
                List<String> topologyConnectorWhitelist = (topologyConnectorWhitelistParam == null) ? null : Json.mapper.readValue(topologyConnectorWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String autoStopLocalLoopEnabledParam = message.body().getString("autoStopLocalLoopEnabled");
                Boolean autoStopLocalLoopEnabled = (autoStopLocalLoopEnabledParam == null) ? null : Json.mapper.readValue(autoStopLocalLoopEnabledParam, Boolean.class);
                String gzipConnectorRequestsEnabledParam = message.body().getString("gzipConnectorRequestsEnabled");
                Boolean gzipConnectorRequestsEnabled = (gzipConnectorRequestsEnabledParam == null) ? null : Json.mapper.readValue(gzipConnectorRequestsEnabledParam, Boolean.class);
                String hmacEnabledParam = message.body().getString("hmacEnabled");
                Boolean hmacEnabled = (hmacEnabledParam == null) ? null : Json.mapper.readValue(hmacEnabledParam, Boolean.class);
                String enableEncryptionParam = message.body().getString("enableEncryption");
                Boolean enableEncryption = (enableEncryptionParam == null) ? null : Json.mapper.readValue(enableEncryptionParam, Boolean.class);
                String sharedKeyParam = message.body().getString("sharedKey");
                String sharedKey = (sharedKeyParam == null) ? null : sharedKeyParam;
                String hmacSharedKeyTTLParam = message.body().getString("hmacSharedKeyTTL");
                Integer hmacSharedKeyTTL = (hmacSharedKeyTTLParam == null) ? null : Json.mapper.readValue(hmacSharedKeyTTLParam, Integer.class);
                String backoffStandbyFactorParam = message.body().getString("backoffStandbyFactor");
                String backoffStandbyFactor = (backoffStandbyFactorParam == null) ? null : backoffStandbyFactorParam;
                String backoffStableFactorParam = message.body().getString("backoffStableFactor");
                String backoffStableFactor = (backoffStableFactorParam == null) ? null : backoffStableFactorParam;
                service.orgApacheSlingDiscoveryOakConfig(post, apply, delete, action, $location, propertylist, connectorPingTimeout, connectorPingInterval, discoveryLiteCheckInterval, clusterSyncServiceTimeout, clusterSyncServiceInterval, enableSyncToken, minEventDelay, socketConnectTimeout, soTimeout, topologyConnectorUrls, topologyConnectorWhitelist, autoStopLocalLoopEnabled, gzipConnectorRequestsEnabled, hmacEnabled, enableEncryption, sharedKey, hmacSharedKeyTTL, backoffStandbyFactor, backoffStableFactor, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDiscoveryOakConfig");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDiscoveryOakConfig", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISCOVERYOAKSYNCHRONIZEDCLOCKSHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String hcNameParam = message.body().getString("hc.name");
                String hcName = (hcNameParam == null) ? null : hcNameParam;
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String hcMbeanNameParam = message.body().getString("hc.mbean.name");
                String hcMbeanName = (hcMbeanNameParam == null) ? null : hcMbeanNameParam;
                service.orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONAGENTIMPLFORWARDDISTRIBUTIONAGENTFACTO_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String titleParam = message.body().getString("title");
                String title = (titleParam == null) ? null : titleParam;
                String detailsParam = message.body().getString("details");
                String details = (detailsParam == null) ? null : detailsParam;
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                String serviceNameParam = message.body().getString("serviceName");
                String serviceName = (serviceNameParam == null) ? null : serviceNameParam;
                String logLevelParam = message.body().getString("log.level");
                String logLevel = (logLevelParam == null) ? null : logLevelParam;
                JsonArray allowedRootsParam = message.body().getJsonArray("allowed.roots");
                List<String> allowedRoots = (allowedRootsParam == null) ? null : Json.mapper.readValue(allowedRootsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String queueProcessingEnabledParam = message.body().getString("queue.processing.enabled");
                Boolean queueProcessingEnabled = (queueProcessingEnabledParam == null) ? null : Json.mapper.readValue(queueProcessingEnabledParam, Boolean.class);
                JsonArray packageImporterEndpointsParam = message.body().getJsonArray("packageImporter.endpoints");
                List<String> packageImporterEndpoints = (packageImporterEndpointsParam == null) ? null : Json.mapper.readValue(packageImporterEndpointsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray passiveQueuesParam = message.body().getJsonArray("passiveQueues");
                List<String> passiveQueues = (passiveQueuesParam == null) ? null : Json.mapper.readValue(passiveQueuesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray priorityQueuesParam = message.body().getJsonArray("priorityQueues");
                List<String> priorityQueues = (priorityQueuesParam == null) ? null : Json.mapper.readValue(priorityQueuesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String retryStrategyParam = message.body().getString("retry.strategy");
                String retryStrategy = (retryStrategyParam == null) ? null : retryStrategyParam;
                String retryAttemptsParam = message.body().getString("retry.attempts");
                Integer retryAttempts = (retryAttemptsParam == null) ? null : Json.mapper.readValue(retryAttemptsParam, Integer.class);
                String requestAuthorizationStrategyTargetParam = message.body().getString("requestAuthorizationStrategy.target");
                String requestAuthorizationStrategyTarget = (requestAuthorizationStrategyTargetParam == null) ? null : requestAuthorizationStrategyTargetParam;
                String transportSecretProviderTargetParam = message.body().getString("transportSecretProvider.target");
                String transportSecretProviderTarget = (transportSecretProviderTargetParam == null) ? null : transportSecretProviderTargetParam;
                String packageBuilderTargetParam = message.body().getString("packageBuilder.target");
                String packageBuilderTarget = (packageBuilderTargetParam == null) ? null : packageBuilderTargetParam;
                String triggersTargetParam = message.body().getString("triggers.target");
                String triggersTarget = (triggersTargetParam == null) ? null : triggersTargetParam;
                String queueProviderParam = message.body().getString("queue.provider");
                String queueProvider = (queueProviderParam == null) ? null : queueProviderParam;
                String asyncDeliveryParam = message.body().getString("async.delivery");
                Boolean asyncDelivery = (asyncDeliveryParam == null) ? null : Json.mapper.readValue(asyncDeliveryParam, Boolean.class);
                String httpConnTimeoutParam = message.body().getString("http.conn.timeout");
                Integer httpConnTimeout = (httpConnTimeoutParam == null) ? null : Json.mapper.readValue(httpConnTimeoutParam, Integer.class);
                service.orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, allowedRoots, queueProcessingEnabled, packageImporterEndpoints, passiveQueues, priorityQueues, retryStrategy, retryAttempts, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget, queueProvider, asyncDelivery, httpConnTimeout, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONAGENTIMPLPRIVILEGEDISTRIBUTIONREQUESTA_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String jcrPrivilegeParam = message.body().getString("jcrPrivilege");
                String jcrPrivilege = (jcrPrivilegeParam == null) ? null : jcrPrivilegeParam;
                service.orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(post, apply, delete, action, $location, propertylist, name, jcrPrivilege, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONAGENTIMPLQUEUEDISTRIBUTIONAGENTFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String titleParam = message.body().getString("title");
                String title = (titleParam == null) ? null : titleParam;
                String detailsParam = message.body().getString("details");
                String details = (detailsParam == null) ? null : detailsParam;
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                String serviceNameParam = message.body().getString("serviceName");
                String serviceName = (serviceNameParam == null) ? null : serviceNameParam;
                String logLevelParam = message.body().getString("log.level");
                String logLevel = (logLevelParam == null) ? null : logLevelParam;
                JsonArray allowedRootsParam = message.body().getJsonArray("allowed.roots");
                List<String> allowedRoots = (allowedRootsParam == null) ? null : Json.mapper.readValue(allowedRootsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String requestAuthorizationStrategyTargetParam = message.body().getString("requestAuthorizationStrategy.target");
                String requestAuthorizationStrategyTarget = (requestAuthorizationStrategyTargetParam == null) ? null : requestAuthorizationStrategyTargetParam;
                String queueProviderFactoryTargetParam = message.body().getString("queueProviderFactory.target");
                String queueProviderFactoryTarget = (queueProviderFactoryTargetParam == null) ? null : queueProviderFactoryTargetParam;
                String packageBuilderTargetParam = message.body().getString("packageBuilder.target");
                String packageBuilderTarget = (packageBuilderTargetParam == null) ? null : packageBuilderTargetParam;
                String triggersTargetParam = message.body().getString("triggers.target");
                String triggersTarget = (triggersTargetParam == null) ? null : triggersTargetParam;
                JsonArray priorityQueuesParam = message.body().getJsonArray("priorityQueues");
                List<String> priorityQueues = (priorityQueuesParam == null) ? null : Json.mapper.readValue(priorityQueuesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, allowedRoots, requestAuthorizationStrategyTarget, queueProviderFactoryTarget, packageBuilderTarget, triggersTarget, priorityQueues, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONAGENTIMPLREVERSEDISTRIBUTIONAGENTFACTO_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String titleParam = message.body().getString("title");
                String title = (titleParam == null) ? null : titleParam;
                String detailsParam = message.body().getString("details");
                String details = (detailsParam == null) ? null : detailsParam;
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                String serviceNameParam = message.body().getString("serviceName");
                String serviceName = (serviceNameParam == null) ? null : serviceNameParam;
                String logLevelParam = message.body().getString("log.level");
                String logLevel = (logLevelParam == null) ? null : logLevelParam;
                String queueProcessingEnabledParam = message.body().getString("queue.processing.enabled");
                Boolean queueProcessingEnabled = (queueProcessingEnabledParam == null) ? null : Json.mapper.readValue(queueProcessingEnabledParam, Boolean.class);
                JsonArray packageExporterEndpointsParam = message.body().getJsonArray("packageExporter.endpoints");
                List<String> packageExporterEndpoints = (packageExporterEndpointsParam == null) ? null : Json.mapper.readValue(packageExporterEndpointsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pullItemsParam = message.body().getString("pull.items");
                Integer pullItems = (pullItemsParam == null) ? null : Json.mapper.readValue(pullItemsParam, Integer.class);
                String httpConnTimeoutParam = message.body().getString("http.conn.timeout");
                Integer httpConnTimeout = (httpConnTimeoutParam == null) ? null : Json.mapper.readValue(httpConnTimeoutParam, Integer.class);
                String requestAuthorizationStrategyTargetParam = message.body().getString("requestAuthorizationStrategy.target");
                String requestAuthorizationStrategyTarget = (requestAuthorizationStrategyTargetParam == null) ? null : requestAuthorizationStrategyTargetParam;
                String transportSecretProviderTargetParam = message.body().getString("transportSecretProvider.target");
                String transportSecretProviderTarget = (transportSecretProviderTargetParam == null) ? null : transportSecretProviderTargetParam;
                String packageBuilderTargetParam = message.body().getString("packageBuilder.target");
                String packageBuilderTarget = (packageBuilderTargetParam == null) ? null : packageBuilderTargetParam;
                String triggersTargetParam = message.body().getString("triggers.target");
                String triggersTarget = (triggersTargetParam == null) ? null : triggersTargetParam;
                service.orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, packageExporterEndpoints, pullItems, httpConnTimeout, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONAGENTIMPLSIMPLEDISTRIBUTIONAGENTFACTOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String titleParam = message.body().getString("title");
                String title = (titleParam == null) ? null : titleParam;
                String detailsParam = message.body().getString("details");
                String details = (detailsParam == null) ? null : detailsParam;
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                String serviceNameParam = message.body().getString("serviceName");
                String serviceName = (serviceNameParam == null) ? null : serviceNameParam;
                String logLevelParam = message.body().getString("log.level");
                String logLevel = (logLevelParam == null) ? null : logLevelParam;
                String queueProcessingEnabledParam = message.body().getString("queue.processing.enabled");
                Boolean queueProcessingEnabled = (queueProcessingEnabledParam == null) ? null : Json.mapper.readValue(queueProcessingEnabledParam, Boolean.class);
                String packageExporterTargetParam = message.body().getString("packageExporter.target");
                String packageExporterTarget = (packageExporterTargetParam == null) ? null : packageExporterTargetParam;
                String packageImporterTargetParam = message.body().getString("packageImporter.target");
                String packageImporterTarget = (packageImporterTargetParam == null) ? null : packageImporterTargetParam;
                String requestAuthorizationStrategyTargetParam = message.body().getString("requestAuthorizationStrategy.target");
                String requestAuthorizationStrategyTarget = (requestAuthorizationStrategyTargetParam == null) ? null : requestAuthorizationStrategyTargetParam;
                String triggersTargetParam = message.body().getString("triggers.target");
                String triggersTarget = (triggersTargetParam == null) ? null : triggersTargetParam;
                service.orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, packageExporterTarget, packageImporterTarget, requestAuthorizationStrategyTarget, triggersTarget, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONAGENTIMPLSYNCDISTRIBUTIONAGENTFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String titleParam = message.body().getString("title");
                String title = (titleParam == null) ? null : titleParam;
                String detailsParam = message.body().getString("details");
                String details = (detailsParam == null) ? null : detailsParam;
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                String serviceNameParam = message.body().getString("serviceName");
                String serviceName = (serviceNameParam == null) ? null : serviceNameParam;
                String logLevelParam = message.body().getString("log.level");
                String logLevel = (logLevelParam == null) ? null : logLevelParam;
                String queueProcessingEnabledParam = message.body().getString("queue.processing.enabled");
                Boolean queueProcessingEnabled = (queueProcessingEnabledParam == null) ? null : Json.mapper.readValue(queueProcessingEnabledParam, Boolean.class);
                JsonArray passiveQueuesParam = message.body().getJsonArray("passiveQueues");
                List<String> passiveQueues = (passiveQueuesParam == null) ? null : Json.mapper.readValue(passiveQueuesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray packageExporterEndpointsParam = message.body().getJsonArray("packageExporter.endpoints");
                List<String> packageExporterEndpoints = (packageExporterEndpointsParam == null) ? null : Json.mapper.readValue(packageExporterEndpointsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray packageImporterEndpointsParam = message.body().getJsonArray("packageImporter.endpoints");
                List<String> packageImporterEndpoints = (packageImporterEndpointsParam == null) ? null : Json.mapper.readValue(packageImporterEndpointsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String retryStrategyParam = message.body().getString("retry.strategy");
                String retryStrategy = (retryStrategyParam == null) ? null : retryStrategyParam;
                String retryAttemptsParam = message.body().getString("retry.attempts");
                Integer retryAttempts = (retryAttemptsParam == null) ? null : Json.mapper.readValue(retryAttemptsParam, Integer.class);
                String pullItemsParam = message.body().getString("pull.items");
                Integer pullItems = (pullItemsParam == null) ? null : Json.mapper.readValue(pullItemsParam, Integer.class);
                String httpConnTimeoutParam = message.body().getString("http.conn.timeout");
                Integer httpConnTimeout = (httpConnTimeoutParam == null) ? null : Json.mapper.readValue(httpConnTimeoutParam, Integer.class);
                String requestAuthorizationStrategyTargetParam = message.body().getString("requestAuthorizationStrategy.target");
                String requestAuthorizationStrategyTarget = (requestAuthorizationStrategyTargetParam == null) ? null : requestAuthorizationStrategyTargetParam;
                String transportSecretProviderTargetParam = message.body().getString("transportSecretProvider.target");
                String transportSecretProviderTarget = (transportSecretProviderTargetParam == null) ? null : transportSecretProviderTargetParam;
                String packageBuilderTargetParam = message.body().getString("packageBuilder.target");
                String packageBuilderTarget = (packageBuilderTargetParam == null) ? null : packageBuilderTargetParam;
                String triggersTargetParam = message.body().getString("triggers.target");
                String triggersTarget = (triggersTargetParam == null) ? null : triggersTargetParam;
                service.orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, passiveQueues, packageExporterEndpoints, packageImporterEndpoints, retryStrategy, retryAttempts, pullItems, httpConnTimeout, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionMonitorDistributionQueueHealthCheck
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONMONITORDISTRIBUTIONQUEUEHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionMonitorDistributionQueueHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String hcNameParam = message.body().getString("hc.name");
                String hcName = (hcNameParam == null) ? null : hcNameParam;
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String hcMbeanNameParam = message.body().getString("hc.mbean.name");
                String hcMbeanName = (hcMbeanNameParam == null) ? null : hcMbeanNameParam;
                String numberOfRetriesAllowedParam = message.body().getString("numberOfRetriesAllowed");
                Integer numberOfRetriesAllowed = (numberOfRetriesAllowedParam == null) ? null : Json.mapper.readValue(numberOfRetriesAllowedParam, Integer.class);
                service.orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, numberOfRetriesAllowed, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionMonitorDistributionQueueHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionMonitorDistributionQueueHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionPackagingImplExporterAgentDistributio
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONPACKAGINGIMPLEXPORTERAGENTDISTRIBUTIO_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionPackagingImplExporterAgentDistributio";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String queueParam = message.body().getString("queue");
                String queue = (queueParam == null) ? null : queueParam;
                String dropInvalidItemsParam = message.body().getString("drop.invalid.items");
                Boolean dropInvalidItems = (dropInvalidItemsParam == null) ? null : Json.mapper.readValue(dropInvalidItemsParam, Boolean.class);
                String agentTargetParam = message.body().getString("agent.target");
                String agentTarget = (agentTargetParam == null) ? null : agentTargetParam;
                service.orgApacheSlingDistributionPackagingImplExporterAgentDistributio(post, apply, delete, action, $location, propertylist, name, queue, dropInvalidItems, agentTarget, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionPackagingImplExporterAgentDistributio");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionPackagingImplExporterAgentDistributio", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionPackagingImplExporterLocalDistributio
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONPACKAGINGIMPLEXPORTERLOCALDISTRIBUTIO_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionPackagingImplExporterLocalDistributio";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String packageBuilderTargetParam = message.body().getString("packageBuilder.target");
                String packageBuilderTarget = (packageBuilderTargetParam == null) ? null : packageBuilderTargetParam;
                service.orgApacheSlingDistributionPackagingImplExporterLocalDistributio(post, apply, delete, action, $location, propertylist, name, packageBuilderTarget, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionPackagingImplExporterLocalDistributio");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionPackagingImplExporterLocalDistributio", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionPackagingImplExporterRemoteDistributi
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONPACKAGINGIMPLEXPORTERREMOTEDISTRIBUTI_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionPackagingImplExporterRemoteDistributi";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                JsonArray endpointsParam = message.body().getJsonArray("endpoints");
                List<String> endpoints = (endpointsParam == null) ? null : Json.mapper.readValue(endpointsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pullItemsParam = message.body().getString("pull.items");
                Integer pullItems = (pullItemsParam == null) ? null : Json.mapper.readValue(pullItemsParam, Integer.class);
                String packageBuilderTargetParam = message.body().getString("packageBuilder.target");
                String packageBuilderTarget = (packageBuilderTargetParam == null) ? null : packageBuilderTargetParam;
                String transportSecretProviderTargetParam = message.body().getString("transportSecretProvider.target");
                String transportSecretProviderTarget = (transportSecretProviderTargetParam == null) ? null : transportSecretProviderTargetParam;
                service.orgApacheSlingDistributionPackagingImplExporterRemoteDistributi(post, apply, delete, action, $location, propertylist, name, endpoints, pullItems, packageBuilderTarget, transportSecretProviderTarget, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionPackagingImplExporterRemoteDistributi");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionPackagingImplExporterRemoteDistributi", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionPackagingImplImporterLocalDistributio
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONPACKAGINGIMPLIMPORTERLOCALDISTRIBUTIO_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionPackagingImplImporterLocalDistributio";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String packageBuilderTargetParam = message.body().getString("packageBuilder.target");
                String packageBuilderTarget = (packageBuilderTargetParam == null) ? null : packageBuilderTargetParam;
                service.orgApacheSlingDistributionPackagingImplImporterLocalDistributio(post, apply, delete, action, $location, propertylist, name, packageBuilderTarget, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionPackagingImplImporterLocalDistributio");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionPackagingImplImporterLocalDistributio", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionPackagingImplImporterRemoteDistributi
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONPACKAGINGIMPLIMPORTERREMOTEDISTRIBUTI_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionPackagingImplImporterRemoteDistributi";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                JsonArray endpointsParam = message.body().getJsonArray("endpoints");
                List<String> endpoints = (endpointsParam == null) ? null : Json.mapper.readValue(endpointsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String transportSecretProviderTargetParam = message.body().getString("transportSecretProvider.target");
                String transportSecretProviderTarget = (transportSecretProviderTargetParam == null) ? null : transportSecretProviderTargetParam;
                service.orgApacheSlingDistributionPackagingImplImporterRemoteDistributi(post, apply, delete, action, $location, propertylist, name, endpoints, transportSecretProviderTarget, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionPackagingImplImporterRemoteDistributi");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionPackagingImplImporterRemoteDistributi", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionPackagingImplImporterRepositoryDistri
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONPACKAGINGIMPLIMPORTERREPOSITORYDISTRI_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionPackagingImplImporterRepositoryDistri";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String serviceNameParam = message.body().getString("service.name");
                String serviceName = (serviceNameParam == null) ? null : serviceNameParam;
                String pathParam = message.body().getString("path");
                String path = (pathParam == null) ? null : pathParam;
                String privilegeNameParam = message.body().getString("privilege.name");
                String privilegeName = (privilegeNameParam == null) ? null : privilegeNameParam;
                service.orgApacheSlingDistributionPackagingImplImporterRepositoryDistri(post, apply, delete, action, $location, propertylist, name, serviceName, path, privilegeName, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionPackagingImplImporterRepositoryDistri");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionPackagingImplImporterRepositoryDistri", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionResourcesImplDistributionConfiguration
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONRESOURCESIMPLDISTRIBUTIONCONFIGURATION_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionResourcesImplDistributionConfiguration";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String providerRootsParam = message.body().getString("provider.roots");
                String providerRoots = (providerRootsParam == null) ? null : providerRootsParam;
                String kindParam = message.body().getString("kind");
                String kind = (kindParam == null) ? null : kindParam;
                service.orgApacheSlingDistributionResourcesImplDistributionConfiguration(post, apply, delete, action, $location, propertylist, providerRoots, kind, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionResourcesImplDistributionConfiguration");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionResourcesImplDistributionConfiguration", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionResourcesImplDistributionServiceResour
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONRESOURCESIMPLDISTRIBUTIONSERVICERESOUR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionResourcesImplDistributionServiceResour";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String providerRootsParam = message.body().getString("provider.roots");
                String providerRoots = (providerRootsParam == null) ? null : providerRootsParam;
                String kindParam = message.body().getString("kind");
                String kind = (kindParam == null) ? null : kindParam;
                service.orgApacheSlingDistributionResourcesImplDistributionServiceResour(post, apply, delete, action, $location, propertylist, providerRoots, kind, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionResourcesImplDistributionServiceResour");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionResourcesImplDistributionServiceResour", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionSerializationImplDistributionPackageBu
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONSERIALIZATIONIMPLDISTRIBUTIONPACKAGEBU_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionSerializationImplDistributionPackageBu";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String typeParam = message.body().getString("type");
                String type = (typeParam == null) ? null : typeParam;
                String formatTargetParam = message.body().getString("format.target");
                String formatTarget = (formatTargetParam == null) ? null : formatTargetParam;
                String tempFsFolderParam = message.body().getString("tempFsFolder");
                String tempFsFolder = (tempFsFolderParam == null) ? null : tempFsFolderParam;
                String fileThresholdParam = message.body().getString("fileThreshold");
                Integer fileThreshold = (fileThresholdParam == null) ? null : Json.mapper.readValue(fileThresholdParam, Integer.class);
                String memoryUnitParam = message.body().getString("memoryUnit");
                String memoryUnit = (memoryUnitParam == null) ? null : memoryUnitParam;
                String useOffHeapMemoryParam = message.body().getString("useOffHeapMemory");
                Boolean useOffHeapMemory = (useOffHeapMemoryParam == null) ? null : Json.mapper.readValue(useOffHeapMemoryParam, Boolean.class);
                String digestAlgorithmParam = message.body().getString("digestAlgorithm");
                String digestAlgorithm = (digestAlgorithmParam == null) ? null : digestAlgorithmParam;
                String monitoringQueueSizeParam = message.body().getString("monitoringQueueSize");
                Integer monitoringQueueSize = (monitoringQueueSizeParam == null) ? null : Json.mapper.readValue(monitoringQueueSizeParam, Integer.class);
                String cleanupDelayParam = message.body().getString("cleanupDelay");
                Integer cleanupDelay = (cleanupDelayParam == null) ? null : Json.mapper.readValue(cleanupDelayParam, Integer.class);
                JsonArray packageFiltersParam = message.body().getJsonArray("package.filters");
                List<String> packageFilters = (packageFiltersParam == null) ? null : Json.mapper.readValue(packageFiltersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray propertyFiltersParam = message.body().getJsonArray("property.filters");
                List<String> propertyFilters = (propertyFiltersParam == null) ? null : Json.mapper.readValue(propertyFiltersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingDistributionSerializationImplDistributionPackageBu(post, apply, delete, action, $location, propertylist, name, type, formatTarget, tempFsFolder, fileThreshold, memoryUnit, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, cleanupDelay, packageFilters, propertyFilters, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionSerializationImplDistributionPackageBu");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionSerializationImplDistributionPackageBu", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionSerializationImplVltVaultDistribution
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONSERIALIZATIONIMPLVLTVAULTDISTRIBUTION_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionSerializationImplVltVaultDistribution";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String typeParam = message.body().getString("type");
                String type = (typeParam == null) ? null : typeParam;
                String importModeParam = message.body().getString("importMode");
                String importMode = (importModeParam == null) ? null : importModeParam;
                String aclHandlingParam = message.body().getString("aclHandling");
                String aclHandling = (aclHandlingParam == null) ? null : aclHandlingParam;
                String packageRootsParam = message.body().getString("package.roots");
                String packageRoots = (packageRootsParam == null) ? null : packageRootsParam;
                JsonArray packageFiltersParam = message.body().getJsonArray("package.filters");
                List<String> packageFilters = (packageFiltersParam == null) ? null : Json.mapper.readValue(packageFiltersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray propertyFiltersParam = message.body().getJsonArray("property.filters");
                List<String> propertyFilters = (propertyFiltersParam == null) ? null : Json.mapper.readValue(propertyFiltersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String tempFsFolderParam = message.body().getString("tempFsFolder");
                String tempFsFolder = (tempFsFolderParam == null) ? null : tempFsFolderParam;
                String useBinaryReferencesParam = message.body().getString("useBinaryReferences");
                Boolean useBinaryReferences = (useBinaryReferencesParam == null) ? null : Json.mapper.readValue(useBinaryReferencesParam, Boolean.class);
                String autoSaveThresholdParam = message.body().getString("autoSaveThreshold");
                Integer autoSaveThreshold = (autoSaveThresholdParam == null) ? null : Json.mapper.readValue(autoSaveThresholdParam, Integer.class);
                String cleanupDelayParam = message.body().getString("cleanupDelay");
                Integer cleanupDelay = (cleanupDelayParam == null) ? null : Json.mapper.readValue(cleanupDelayParam, Integer.class);
                String fileThresholdParam = message.body().getString("fileThreshold");
                Integer fileThreshold = (fileThresholdParam == null) ? null : Json.mapper.readValue(fileThresholdParam, Integer.class);
                String MEGA_BYTESParam = message.body().getString("MEGA_BYTES");
                String MEGA_BYTES = (MEGA_BYTESParam == null) ? null : MEGA_BYTESParam;
                String useOffHeapMemoryParam = message.body().getString("useOffHeapMemory");
                Boolean useOffHeapMemory = (useOffHeapMemoryParam == null) ? null : Json.mapper.readValue(useOffHeapMemoryParam, Boolean.class);
                String digestAlgorithmParam = message.body().getString("digestAlgorithm");
                String digestAlgorithm = (digestAlgorithmParam == null) ? null : digestAlgorithmParam;
                String monitoringQueueSizeParam = message.body().getString("monitoringQueueSize");
                Integer monitoringQueueSize = (monitoringQueueSizeParam == null) ? null : Json.mapper.readValue(monitoringQueueSizeParam, Integer.class);
                JsonArray pathsMappingParam = message.body().getJsonArray("pathsMapping");
                List<String> pathsMapping = (pathsMappingParam == null) ? null : Json.mapper.readValue(pathsMappingParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String strictImportParam = message.body().getString("strictImport");
                Boolean strictImport = (strictImportParam == null) ? null : Json.mapper.readValue(strictImportParam, Boolean.class);
                service.orgApacheSlingDistributionSerializationImplVltVaultDistribution(post, apply, delete, action, $location, propertylist, name, type, importMode, aclHandling, packageRoots, packageFilters, propertyFilters, tempFsFolder, useBinaryReferences, autoSaveThreshold, cleanupDelay, fileThreshold, MEGA_BYTES, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, pathsMapping, strictImport, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionSerializationImplVltVaultDistribution");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionSerializationImplVltVaultDistribution", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionTransportImplUserCredentialsDistributi
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONTRANSPORTIMPLUSERCREDENTIALSDISTRIBUTI_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionTransportImplUserCredentialsDistributi";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String usernameParam = message.body().getString("username");
                String username = (usernameParam == null) ? null : usernameParam;
                String passwordParam = message.body().getString("password");
                String password = (passwordParam == null) ? null : passwordParam;
                service.orgApacheSlingDistributionTransportImplUserCredentialsDistributi(post, apply, delete, action, $location, propertylist, name, username, password, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionTransportImplUserCredentialsDistributi");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionTransportImplUserCredentialsDistributi", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionTriggerImplDistributionEventDistribute
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONTRIGGERIMPLDISTRIBUTIONEVENTDISTRIBUTE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionTriggerImplDistributionEventDistribute";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String pathParam = message.body().getString("path");
                String path = (pathParam == null) ? null : pathParam;
                service.orgApacheSlingDistributionTriggerImplDistributionEventDistribute(post, apply, delete, action, $location, propertylist, name, path, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionTriggerImplDistributionEventDistribute");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionTriggerImplDistributionEventDistribute", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONTRIGGERIMPLJCREVENTDISTRIBUTIONTRIGGER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String pathParam = message.body().getString("path");
                String path = (pathParam == null) ? null : pathParam;
                JsonArray ignoredPathsPatternsParam = message.body().getJsonArray("ignoredPathsPatterns");
                List<String> ignoredPathsPatterns = (ignoredPathsPatternsParam == null) ? null : Json.mapper.readValue(ignoredPathsPatternsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceNameParam = message.body().getString("serviceName");
                String serviceName = (serviceNameParam == null) ? null : serviceNameParam;
                String deepParam = message.body().getString("deep");
                Boolean deep = (deepParam == null) ? null : Json.mapper.readValue(deepParam, Boolean.class);
                service.orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(post, apply, delete, action, $location, propertylist, name, path, ignoredPathsPatterns, serviceName, deep, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONTRIGGERIMPLPERSISTEDJCREVENTDISTRIBUTI_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String pathParam = message.body().getString("path");
                String path = (pathParam == null) ? null : pathParam;
                String serviceNameParam = message.body().getString("serviceName");
                String serviceName = (serviceNameParam == null) ? null : serviceNameParam;
                String nuggetsPathParam = message.body().getString("nuggetsPath");
                String nuggetsPath = (nuggetsPathParam == null) ? null : nuggetsPathParam;
                service.orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(post, apply, delete, action, $location, propertylist, name, path, serviceName, nuggetsPath, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONTRIGGERIMPLREMOTEEVENTDISTRIBUTIONTRIG_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String endpointParam = message.body().getString("endpoint");
                String endpoint = (endpointParam == null) ? null : endpointParam;
                String transportSecretProviderTargetParam = message.body().getString("transportSecretProvider.target");
                String transportSecretProviderTarget = (transportSecretProviderTargetParam == null) ? null : transportSecretProviderTargetParam;
                service.orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(post, apply, delete, action, $location, propertylist, name, endpoint, transportSecretProviderTarget, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionTriggerImplResourceEventDistributionTr
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONTRIGGERIMPLRESOURCEEVENTDISTRIBUTIONTR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionTriggerImplResourceEventDistributionTr";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String pathParam = message.body().getString("path");
                String path = (pathParam == null) ? null : pathParam;
                service.orgApacheSlingDistributionTriggerImplResourceEventDistributionTr(post, apply, delete, action, $location, propertylist, name, path, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionTriggerImplResourceEventDistributionTr");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionTriggerImplResourceEventDistributionTr", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGDISTRIBUTIONTRIGGERIMPLSCHEDULEDDISTRIBUTIONTRIGGE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String pathParam = message.body().getString("path");
                String path = (pathParam == null) ? null : pathParam;
                String secondsParam = message.body().getString("seconds");
                String seconds = (secondsParam == null) ? null : secondsParam;
                String serviceNameParam = message.body().getString("serviceName");
                String serviceName = (serviceNameParam == null) ? null : serviceNameParam;
                service.orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(post, apply, delete, action, $location, propertylist, name, path, seconds, serviceName, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingEngineImplAuthSlingAuthenticator
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGENGINEIMPLAUTHSLINGAUTHENTICATOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingEngineImplAuthSlingAuthenticator";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String osgiHttpWhiteboardContextSelectParam = message.body().getString("osgi.http.whiteboard.context.select");
                String osgiHttpWhiteboardContextSelect = (osgiHttpWhiteboardContextSelectParam == null) ? null : osgiHttpWhiteboardContextSelectParam;
                String osgiHttpWhiteboardListenerParam = message.body().getString("osgi.http.whiteboard.listener");
                String osgiHttpWhiteboardListener = (osgiHttpWhiteboardListenerParam == null) ? null : osgiHttpWhiteboardListenerParam;
                String authSudoCookieParam = message.body().getString("auth.sudo.cookie");
                String authSudoCookie = (authSudoCookieParam == null) ? null : authSudoCookieParam;
                String authSudoParameterParam = message.body().getString("auth.sudo.parameter");
                String authSudoParameter = (authSudoParameterParam == null) ? null : authSudoParameterParam;
                String authAnnonymousParam = message.body().getString("auth.annonymous");
                Boolean authAnnonymous = (authAnnonymousParam == null) ? null : Json.mapper.readValue(authAnnonymousParam, Boolean.class);
                JsonArray slingAuthRequirementsParam = message.body().getJsonArray("sling.auth.requirements");
                List<String> slingAuthRequirements = (slingAuthRequirementsParam == null) ? null : Json.mapper.readValue(slingAuthRequirementsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingAuthAnonymousUserParam = message.body().getString("sling.auth.anonymous.user");
                String slingAuthAnonymousUser = (slingAuthAnonymousUserParam == null) ? null : slingAuthAnonymousUserParam;
                String slingAuthAnonymousPasswordParam = message.body().getString("sling.auth.anonymous.password");
                String slingAuthAnonymousPassword = (slingAuthAnonymousPasswordParam == null) ? null : slingAuthAnonymousPasswordParam;
                String authHttpParam = message.body().getString("auth.http");
                String authHttp = (authHttpParam == null) ? null : authHttpParam;
                String authHttpRealmParam = message.body().getString("auth.http.realm");
                String authHttpRealm = (authHttpRealmParam == null) ? null : authHttpRealmParam;
                JsonArray authUriSuffixParam = message.body().getJsonArray("auth.uri.suffix");
                List<String> authUriSuffix = (authUriSuffixParam == null) ? null : Json.mapper.readValue(authUriSuffixParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingEngineImplAuthSlingAuthenticator(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardContextSelect, osgiHttpWhiteboardListener, authSudoCookie, authSudoParameter, authAnnonymous, slingAuthRequirements, slingAuthAnonymousUser, slingAuthAnonymousPassword, authHttp, authHttpRealm, authUriSuffix, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingEngineImplAuthSlingAuthenticator");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingEngineImplAuthSlingAuthenticator", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGENGINEIMPLDEBUGREQUESTPROGRESSTRACKERLOGFILTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray extensionsParam = message.body().getJsonArray("extensions");
                List<String> extensions = (extensionsParam == null) ? null : Json.mapper.readValue(extensionsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String minDurationMsParam = message.body().getString("minDurationMs");
                Integer minDurationMs = (minDurationMsParam == null) ? null : Json.mapper.readValue(minDurationMsParam, Integer.class);
                String maxDurationMsParam = message.body().getString("maxDurationMs");
                Integer maxDurationMs = (maxDurationMsParam == null) ? null : Json.mapper.readValue(maxDurationMsParam, Integer.class);
                String compactLogFormatParam = message.body().getString("compactLogFormat");
                Boolean compactLogFormat = (compactLogFormatParam == null) ? null : Json.mapper.readValue(compactLogFormatParam, Boolean.class);
                service.orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(post, apply, delete, action, $location, propertylist, extensions, minDurationMs, maxDurationMs, compactLogFormat, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingEngineImplLogRequestLogger
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGENGINEIMPLLOGREQUESTLOGGER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingEngineImplLogRequestLogger";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String requestLogOutputParam = message.body().getString("request.log.output");
                String requestLogOutput = (requestLogOutputParam == null) ? null : requestLogOutputParam;
                String requestLogOutputtypeParam = message.body().getString("request.log.outputtype");
                Integer requestLogOutputtype = (requestLogOutputtypeParam == null) ? null : Json.mapper.readValue(requestLogOutputtypeParam, Integer.class);
                String requestLogEnabledParam = message.body().getString("request.log.enabled");
                Boolean requestLogEnabled = (requestLogEnabledParam == null) ? null : Json.mapper.readValue(requestLogEnabledParam, Boolean.class);
                String accessLogOutputParam = message.body().getString("access.log.output");
                String accessLogOutput = (accessLogOutputParam == null) ? null : accessLogOutputParam;
                String accessLogOutputtypeParam = message.body().getString("access.log.outputtype");
                Integer accessLogOutputtype = (accessLogOutputtypeParam == null) ? null : Json.mapper.readValue(accessLogOutputtypeParam, Integer.class);
                String accessLogEnabledParam = message.body().getString("access.log.enabled");
                Boolean accessLogEnabled = (accessLogEnabledParam == null) ? null : Json.mapper.readValue(accessLogEnabledParam, Boolean.class);
                service.orgApacheSlingEngineImplLogRequestLogger(post, apply, delete, action, $location, propertylist, requestLogOutput, requestLogOutputtype, requestLogEnabled, accessLogOutput, accessLogOutputtype, accessLogEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingEngineImplLogRequestLogger");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingEngineImplLogRequestLogger", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingEngineImplLogRequestLoggerService
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGENGINEIMPLLOGREQUESTLOGGERSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingEngineImplLogRequestLoggerService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String requestLogServiceFormatParam = message.body().getString("request.log.service.format");
                String requestLogServiceFormat = (requestLogServiceFormatParam == null) ? null : requestLogServiceFormatParam;
                String requestLogServiceOutputParam = message.body().getString("request.log.service.output");
                String requestLogServiceOutput = (requestLogServiceOutputParam == null) ? null : requestLogServiceOutputParam;
                String requestLogServiceOutputtypeParam = message.body().getString("request.log.service.outputtype");
                Integer requestLogServiceOutputtype = (requestLogServiceOutputtypeParam == null) ? null : Json.mapper.readValue(requestLogServiceOutputtypeParam, Integer.class);
                String requestLogServiceOnentryParam = message.body().getString("request.log.service.onentry");
                Boolean requestLogServiceOnentry = (requestLogServiceOnentryParam == null) ? null : Json.mapper.readValue(requestLogServiceOnentryParam, Boolean.class);
                service.orgApacheSlingEngineImplLogRequestLoggerService(post, apply, delete, action, $location, propertylist, requestLogServiceFormat, requestLogServiceOutput, requestLogServiceOutputtype, requestLogServiceOnentry, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingEngineImplLogRequestLoggerService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingEngineImplLogRequestLoggerService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingEngineImplSlingMainServlet
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGENGINEIMPLSLINGMAINSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingEngineImplSlingMainServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingMaxCallsParam = message.body().getString("sling.max.calls");
                Integer slingMaxCalls = (slingMaxCallsParam == null) ? null : Json.mapper.readValue(slingMaxCallsParam, Integer.class);
                String slingMaxInclusionsParam = message.body().getString("sling.max.inclusions");
                Integer slingMaxInclusions = (slingMaxInclusionsParam == null) ? null : Json.mapper.readValue(slingMaxInclusionsParam, Integer.class);
                String slingTraceAllowParam = message.body().getString("sling.trace.allow");
                Boolean slingTraceAllow = (slingTraceAllowParam == null) ? null : Json.mapper.readValue(slingTraceAllowParam, Boolean.class);
                String slingMaxRecordRequestsParam = message.body().getString("sling.max.record.requests");
                Integer slingMaxRecordRequests = (slingMaxRecordRequestsParam == null) ? null : Json.mapper.readValue(slingMaxRecordRequestsParam, Integer.class);
                JsonArray slingStorePatternRequestsParam = message.body().getJsonArray("sling.store.pattern.requests");
                List<String> slingStorePatternRequests = (slingStorePatternRequestsParam == null) ? null : Json.mapper.readValue(slingStorePatternRequestsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingServerinfoParam = message.body().getString("sling.serverinfo");
                String slingServerinfo = (slingServerinfoParam == null) ? null : slingServerinfoParam;
                JsonArray slingAdditionalResponseHeadersParam = message.body().getJsonArray("sling.additional.response.headers");
                List<String> slingAdditionalResponseHeaders = (slingAdditionalResponseHeadersParam == null) ? null : Json.mapper.readValue(slingAdditionalResponseHeadersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingEngineImplSlingMainServlet(post, apply, delete, action, $location, propertylist, slingMaxCalls, slingMaxInclusions, slingTraceAllow, slingMaxRecordRequests, slingStorePatternRequests, slingServerinfo, slingAdditionalResponseHeaders, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingEngineImplSlingMainServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingEngineImplSlingMainServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingEngineParameters
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGENGINEPARAMETERS_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingEngineParameters";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingDefaultParameterEncodingParam = message.body().getString("sling.default.parameter.encoding");
                String slingDefaultParameterEncoding = (slingDefaultParameterEncodingParam == null) ? null : slingDefaultParameterEncodingParam;
                String slingDefaultMaxParametersParam = message.body().getString("sling.default.max.parameters");
                Integer slingDefaultMaxParameters = (slingDefaultMaxParametersParam == null) ? null : Json.mapper.readValue(slingDefaultMaxParametersParam, Integer.class);
                String fileLocationParam = message.body().getString("file.location");
                String fileLocation = (fileLocationParam == null) ? null : fileLocationParam;
                String fileThresholdParam = message.body().getString("file.threshold");
                Integer fileThreshold = (fileThresholdParam == null) ? null : Json.mapper.readValue(fileThresholdParam, Integer.class);
                String fileMaxParam = message.body().getString("file.max");
                Integer fileMax = (fileMaxParam == null) ? null : Json.mapper.readValue(fileMaxParam, Integer.class);
                String requestMaxParam = message.body().getString("request.max");
                Integer requestMax = (requestMaxParam == null) ? null : Json.mapper.readValue(requestMaxParam, Integer.class);
                String slingDefaultParameterCheckForAdditionalContainerParametersParam = message.body().getString("sling.default.parameter.checkForAdditionalContainerParameters");
                Boolean slingDefaultParameterCheckForAdditionalContainerParameters = (slingDefaultParameterCheckForAdditionalContainerParametersParam == null) ? null : Json.mapper.readValue(slingDefaultParameterCheckForAdditionalContainerParametersParam, Boolean.class);
                service.orgApacheSlingEngineParameters(post, apply, delete, action, $location, propertylist, slingDefaultParameterEncoding, slingDefaultMaxParameters, fileLocation, fileThreshold, fileMax, requestMax, slingDefaultParameterCheckForAdditionalContainerParameters, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingEngineParameters");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingEngineParameters", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingEventImplEventingThreadPool
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGEVENTIMPLEVENTINGTHREADPOOL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingEventImplEventingThreadPool";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String minPoolSizeParam = message.body().getString("minPoolSize");
                Integer minPoolSize = (minPoolSizeParam == null) ? null : Json.mapper.readValue(minPoolSizeParam, Integer.class);
                service.orgApacheSlingEventImplEventingThreadPool(post, apply, delete, action, $location, propertylist, minPoolSize, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingEventImplEventingThreadPool");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingEventImplEventingThreadPool", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingEventImplJobsDefaultJobManager
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGEVENTIMPLJOBSDEFAULTJOBMANAGER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingEventImplJobsDefaultJobManager";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String queuePriorityParam = message.body().getString("queue.priority");
                String queuePriority = (queuePriorityParam == null) ? null : queuePriorityParam;
                String queueRetriesParam = message.body().getString("queue.retries");
                Integer queueRetries = (queueRetriesParam == null) ? null : Json.mapper.readValue(queueRetriesParam, Integer.class);
                String queueRetrydelayParam = message.body().getString("queue.retrydelay");
                Integer queueRetrydelay = (queueRetrydelayParam == null) ? null : Json.mapper.readValue(queueRetrydelayParam, Integer.class);
                String queueMaxparallelParam = message.body().getString("queue.maxparallel");
                Integer queueMaxparallel = (queueMaxparallelParam == null) ? null : Json.mapper.readValue(queueMaxparallelParam, Integer.class);
                service.orgApacheSlingEventImplJobsDefaultJobManager(post, apply, delete, action, $location, propertylist, queuePriority, queueRetries, queueRetrydelay, queueMaxparallel, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingEventImplJobsDefaultJobManager");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingEventImplJobsDefaultJobManager", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingEventImplJobsJcrPersistenceHandler
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGEVENTIMPLJOBSJCRPERSISTENCEHANDLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingEventImplJobsJcrPersistenceHandler";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String jobConsumermanagerDisableDistributionParam = message.body().getString("job.consumermanager.disableDistribution");
                Boolean jobConsumermanagerDisableDistribution = (jobConsumermanagerDisableDistributionParam == null) ? null : Json.mapper.readValue(jobConsumermanagerDisableDistributionParam, Boolean.class);
                String startupDelayParam = message.body().getString("startup.delay");
                Integer startupDelay = (startupDelayParam == null) ? null : Json.mapper.readValue(startupDelayParam, Integer.class);
                String cleanupPeriodParam = message.body().getString("cleanup.period");
                Integer cleanupPeriod = (cleanupPeriodParam == null) ? null : Json.mapper.readValue(cleanupPeriodParam, Integer.class);
                service.orgApacheSlingEventImplJobsJcrPersistenceHandler(post, apply, delete, action, $location, propertylist, jobConsumermanagerDisableDistribution, startupDelay, cleanupPeriod, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingEventImplJobsJcrPersistenceHandler");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingEventImplJobsJcrPersistenceHandler", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingEventImplJobsJobConsumerManager
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGEVENTIMPLJOBSJOBCONSUMERMANAGER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingEventImplJobsJobConsumerManager";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String orgApacheSlingInstallerConfigurationPersistParam = message.body().getString("org.apache.sling.installer.configuration.persist");
                Boolean orgApacheSlingInstallerConfigurationPersist = (orgApacheSlingInstallerConfigurationPersistParam == null) ? null : Json.mapper.readValue(orgApacheSlingInstallerConfigurationPersistParam, Boolean.class);
                JsonArray jobConsumermanagerWhitelistParam = message.body().getJsonArray("job.consumermanager.whitelist");
                List<String> jobConsumermanagerWhitelist = (jobConsumermanagerWhitelistParam == null) ? null : Json.mapper.readValue(jobConsumermanagerWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray jobConsumermanagerBlacklistParam = message.body().getJsonArray("job.consumermanager.blacklist");
                List<String> jobConsumermanagerBlacklist = (jobConsumermanagerBlacklistParam == null) ? null : Json.mapper.readValue(jobConsumermanagerBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingEventImplJobsJobConsumerManager(post, apply, delete, action, $location, propertylist, orgApacheSlingInstallerConfigurationPersist, jobConsumermanagerWhitelist, jobConsumermanagerBlacklist, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingEventImplJobsJobConsumerManager");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingEventImplJobsJobConsumerManager", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingEventJobsQueueConfiguration
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGEVENTJOBSQUEUECONFIGURATION_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingEventJobsQueueConfiguration";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String queueNameParam = message.body().getString("queue.name");
                String queueName = (queueNameParam == null) ? null : queueNameParam;
                JsonArray queueTopicsParam = message.body().getJsonArray("queue.topics");
                List<String> queueTopics = (queueTopicsParam == null) ? null : Json.mapper.readValue(queueTopicsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String queueTypeParam = message.body().getString("queue.type");
                String queueType = (queueTypeParam == null) ? null : queueTypeParam;
                String queuePriorityParam = message.body().getString("queue.priority");
                String queuePriority = (queuePriorityParam == null) ? null : queuePriorityParam;
                String queueRetriesParam = message.body().getString("queue.retries");
                Integer queueRetries = (queueRetriesParam == null) ? null : Json.mapper.readValue(queueRetriesParam, Integer.class);
                String queueRetrydelayParam = message.body().getString("queue.retrydelay");
                Integer queueRetrydelay = (queueRetrydelayParam == null) ? null : Json.mapper.readValue(queueRetrydelayParam, Integer.class);
                String queueMaxparallelParam = message.body().getString("queue.maxparallel");
                BigDecimal queueMaxparallel = (queueMaxparallelParam == null) ? null : Json.mapper.readValue(queueMaxparallelParam, BigDecimal.class);
                String queueKeepJobsParam = message.body().getString("queue.keepJobs");
                Boolean queueKeepJobs = (queueKeepJobsParam == null) ? null : Json.mapper.readValue(queueKeepJobsParam, Boolean.class);
                String queuePreferRunOnCreationInstanceParam = message.body().getString("queue.preferRunOnCreationInstance");
                Boolean queuePreferRunOnCreationInstance = (queuePreferRunOnCreationInstanceParam == null) ? null : Json.mapper.readValue(queuePreferRunOnCreationInstanceParam, Boolean.class);
                String queueThreadPoolSizeParam = message.body().getString("queue.threadPoolSize");
                Integer queueThreadPoolSize = (queueThreadPoolSizeParam == null) ? null : Json.mapper.readValue(queueThreadPoolSizeParam, Integer.class);
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                service.orgApacheSlingEventJobsQueueConfiguration(post, apply, delete, action, $location, propertylist, queueName, queueTopics, queueType, queuePriority, queueRetries, queueRetrydelay, queueMaxparallel, queueKeepJobs, queuePreferRunOnCreationInstance, queueThreadPoolSize, serviceRanking, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingEventJobsQueueConfiguration");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingEventJobsQueueConfiguration", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGEXTENSIONSWEBCONSOLESECURITYPROVIDERINTERNALSLINGW_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray usersParam = message.body().getJsonArray("users");
                List<String> users = (usersParam == null) ? null : Json.mapper.readValue(usersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray groupsParam = message.body().getJsonArray("groups");
                List<String> groups = (groupsParam == null) ? null : Json.mapper.readValue(groupsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(post, apply, delete, action, $location, propertylist, users, groups, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingFeatureflagsFeature
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGFEATUREFLAGSFEATURE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingFeatureflagsFeature";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String descriptionParam = message.body().getString("description");
                String description = (descriptionParam == null) ? null : descriptionParam;
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                service.orgApacheSlingFeatureflagsFeature(post, apply, delete, action, $location, propertylist, name, description, enabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingFeatureflagsFeature");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingFeatureflagsFeature", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingFeatureflagsImplConfiguredFeature
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGFEATUREFLAGSIMPLCONFIGUREDFEATURE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingFeatureflagsImplConfiguredFeature";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String nameParam = message.body().getString("name");
                String name = (nameParam == null) ? null : nameParam;
                String descriptionParam = message.body().getString("description");
                String description = (descriptionParam == null) ? null : descriptionParam;
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                service.orgApacheSlingFeatureflagsImplConfiguredFeature(post, apply, delete, action, $location, propertylist, name, description, enabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingFeatureflagsImplConfiguredFeature");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingFeatureflagsImplConfiguredFeature", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingHapiImplHApiUtilImpl
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGHAPIIMPLHAPIUTILIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingHapiImplHApiUtilImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String orgApacheSlingHapiToolsResourcetypeParam = message.body().getString("org.apache.sling.hapi.tools.resourcetype");
                String orgApacheSlingHapiToolsResourcetype = (orgApacheSlingHapiToolsResourcetypeParam == null) ? null : orgApacheSlingHapiToolsResourcetypeParam;
                String orgApacheSlingHapiToolsCollectionresourcetypeParam = message.body().getString("org.apache.sling.hapi.tools.collectionresourcetype");
                String orgApacheSlingHapiToolsCollectionresourcetype = (orgApacheSlingHapiToolsCollectionresourcetypeParam == null) ? null : orgApacheSlingHapiToolsCollectionresourcetypeParam;
                JsonArray orgApacheSlingHapiToolsSearchpathsParam = message.body().getJsonArray("org.apache.sling.hapi.tools.searchpaths");
                List<String> orgApacheSlingHapiToolsSearchpaths = (orgApacheSlingHapiToolsSearchpathsParam == null) ? null : Json.mapper.readValue(orgApacheSlingHapiToolsSearchpathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String orgApacheSlingHapiToolsExternalurlParam = message.body().getString("org.apache.sling.hapi.tools.externalurl");
                String orgApacheSlingHapiToolsExternalurl = (orgApacheSlingHapiToolsExternalurlParam == null) ? null : orgApacheSlingHapiToolsExternalurlParam;
                String orgApacheSlingHapiToolsEnabledParam = message.body().getString("org.apache.sling.hapi.tools.enabled");
                Boolean orgApacheSlingHapiToolsEnabled = (orgApacheSlingHapiToolsEnabledParam == null) ? null : Json.mapper.readValue(orgApacheSlingHapiToolsEnabledParam, Boolean.class);
                service.orgApacheSlingHapiImplHApiUtilImpl(post, apply, delete, action, $location, propertylist, orgApacheSlingHapiToolsResourcetype, orgApacheSlingHapiToolsCollectionresourcetype, orgApacheSlingHapiToolsSearchpaths, orgApacheSlingHapiToolsExternalurl, orgApacheSlingHapiToolsEnabled, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingHapiImplHApiUtilImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingHapiImplHApiUtilImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingHcCoreImplCompositeHealthCheck
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGHCCOREIMPLCOMPOSITEHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingHcCoreImplCompositeHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String hcNameParam = message.body().getString("hc.name");
                String hcName = (hcNameParam == null) ? null : hcNameParam;
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String hcMbeanNameParam = message.body().getString("hc.mbean.name");
                String hcMbeanName = (hcMbeanNameParam == null) ? null : hcMbeanNameParam;
                JsonArray filterTagsParam = message.body().getJsonArray("filter.tags");
                List<String> filterTags = (filterTagsParam == null) ? null : Json.mapper.readValue(filterTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String filterCombineTagsWithOrParam = message.body().getString("filter.combineTagsWithOr");
                Boolean filterCombineTagsWithOr = (filterCombineTagsWithOrParam == null) ? null : Json.mapper.readValue(filterCombineTagsWithOrParam, Boolean.class);
                service.orgApacheSlingHcCoreImplCompositeHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, filterTags, filterCombineTagsWithOr, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingHcCoreImplCompositeHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingHcCoreImplCompositeHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGHCCOREIMPLEXECUTORHEALTHCHECKEXECUTORIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String timeoutInMsParam = message.body().getString("timeoutInMs");
                Integer timeoutInMs = (timeoutInMsParam == null) ? null : Json.mapper.readValue(timeoutInMsParam, Integer.class);
                String longRunningFutureThresholdForCriticalMsParam = message.body().getString("longRunningFutureThresholdForCriticalMs");
                Integer longRunningFutureThresholdForCriticalMs = (longRunningFutureThresholdForCriticalMsParam == null) ? null : Json.mapper.readValue(longRunningFutureThresholdForCriticalMsParam, Integer.class);
                String resultCacheTtlInMsParam = message.body().getString("resultCacheTtlInMs");
                Integer resultCacheTtlInMs = (resultCacheTtlInMsParam == null) ? null : Json.mapper.readValue(resultCacheTtlInMsParam, Integer.class);
                service.orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(post, apply, delete, action, $location, propertylist, timeoutInMs, longRunningFutureThresholdForCriticalMs, resultCacheTtlInMs, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingHcCoreImplJmxAttributeHealthCheck
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGHCCOREIMPLJMXATTRIBUTEHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingHcCoreImplJmxAttributeHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String hcNameParam = message.body().getString("hc.name");
                String hcName = (hcNameParam == null) ? null : hcNameParam;
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String hcMbeanNameParam = message.body().getString("hc.mbean.name");
                String hcMbeanName = (hcMbeanNameParam == null) ? null : hcMbeanNameParam;
                String mbeanNameParam = message.body().getString("mbean.name");
                String mbeanName = (mbeanNameParam == null) ? null : mbeanNameParam;
                String attributeNameParam = message.body().getString("attribute.name");
                String attributeName = (attributeNameParam == null) ? null : attributeNameParam;
                String attributeValueConstraintParam = message.body().getString("attribute.value.constraint");
                String attributeValueConstraint = (attributeValueConstraintParam == null) ? null : attributeValueConstraintParam;
                service.orgApacheSlingHcCoreImplJmxAttributeHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, mbeanName, attributeName, attributeValueConstraint, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingHcCoreImplJmxAttributeHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingHcCoreImplJmxAttributeHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingHcCoreImplScriptableHealthCheck
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGHCCOREIMPLSCRIPTABLEHEALTHCHECK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingHcCoreImplScriptableHealthCheck";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String hcNameParam = message.body().getString("hc.name");
                String hcName = (hcNameParam == null) ? null : hcNameParam;
                JsonArray hcTagsParam = message.body().getJsonArray("hc.tags");
                List<String> hcTags = (hcTagsParam == null) ? null : Json.mapper.readValue(hcTagsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String hcMbeanNameParam = message.body().getString("hc.mbean.name");
                String hcMbeanName = (hcMbeanNameParam == null) ? null : hcMbeanNameParam;
                String expressionParam = message.body().getString("expression");
                String expression = (expressionParam == null) ? null : expressionParam;
                String languageExtensionParam = message.body().getString("language.extension");
                String languageExtension = (languageExtensionParam == null) ? null : languageExtensionParam;
                service.orgApacheSlingHcCoreImplScriptableHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, expression, languageExtension, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingHcCoreImplScriptableHealthCheck");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingHcCoreImplScriptableHealthCheck", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGHCCOREIMPLSERVLETHEALTHCHECKEXECUTORSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String servletPathParam = message.body().getString("servletPath");
                String servletPath = (servletPathParam == null) ? null : servletPathParam;
                String disabledParam = message.body().getString("disabled");
                Boolean disabled = (disabledParam == null) ? null : Json.mapper.readValue(disabledParam, Boolean.class);
                String corsAccessControlAllowOriginParam = message.body().getString("cors.accessControlAllowOrigin");
                String corsAccessControlAllowOrigin = (corsAccessControlAllowOriginParam == null) ? null : corsAccessControlAllowOriginParam;
                service.orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(post, apply, delete, action, $location, propertylist, servletPath, disabled, corsAccessControlAllowOrigin, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGHCCOREIMPLSERVLETRESULTTXTVERBOSESERIALIZER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String totalWidthParam = message.body().getString("totalWidth");
                Integer totalWidth = (totalWidthParam == null) ? null : Json.mapper.readValue(totalWidthParam, Integer.class);
                String colWidthNameParam = message.body().getString("colWidthName");
                Integer colWidthName = (colWidthNameParam == null) ? null : Json.mapper.readValue(colWidthNameParam, Integer.class);
                String colWidthResultParam = message.body().getString("colWidthResult");
                Integer colWidthResult = (colWidthResultParam == null) ? null : Json.mapper.readValue(colWidthResultParam, Integer.class);
                String colWidthTimingParam = message.body().getString("colWidthTiming");
                Integer colWidthTiming = (colWidthTimingParam == null) ? null : Json.mapper.readValue(colWidthTimingParam, Integer.class);
                service.orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(post, apply, delete, action, $location, propertylist, totalWidth, colWidthName, colWidthResult, colWidthTiming, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingI18nImplI18NFilter
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGI18NIMPLI18NFILTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingI18nImplI18NFilter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                JsonArray slingFilterScopeParam = message.body().getJsonArray("sling.filter.scope");
                List<String> slingFilterScope = (slingFilterScopeParam == null) ? null : Json.mapper.readValue(slingFilterScopeParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingI18nImplI18NFilter(post, apply, delete, action, $location, propertylist, serviceRanking, slingFilterScope, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingI18nImplI18NFilter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingI18nImplI18NFilter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingI18nImplJcrResourceBundleProvider
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGI18NIMPLJCRRESOURCEBUNDLEPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingI18nImplJcrResourceBundleProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String localeDefaultParam = message.body().getString("locale.default");
                String localeDefault = (localeDefaultParam == null) ? null : localeDefaultParam;
                String preloadBundlesParam = message.body().getString("preload.bundles");
                Boolean preloadBundles = (preloadBundlesParam == null) ? null : Json.mapper.readValue(preloadBundlesParam, Boolean.class);
                String invalidationDelayParam = message.body().getString("invalidation.delay");
                Integer invalidationDelay = (invalidationDelayParam == null) ? null : Json.mapper.readValue(invalidationDelayParam, Integer.class);
                service.orgApacheSlingI18nImplJcrResourceBundleProvider(post, apply, delete, action, $location, propertylist, localeDefault, preloadBundles, invalidationDelay, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingI18nImplJcrResourceBundleProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingI18nImplJcrResourceBundleProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingInstallerProviderJcrImplJcrInstaller
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGINSTALLERPROVIDERJCRIMPLJCRINSTALLER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingInstallerProviderJcrImplJcrInstaller";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray handlerSchemesParam = message.body().getJsonArray("handler.schemes");
                List<String> handlerSchemes = (handlerSchemesParam == null) ? null : Json.mapper.readValue(handlerSchemesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingJcrinstallFolderNameRegexpParam = message.body().getString("sling.jcrinstall.folder.name.regexp");
                String slingJcrinstallFolderNameRegexp = (slingJcrinstallFolderNameRegexpParam == null) ? null : slingJcrinstallFolderNameRegexpParam;
                String slingJcrinstallFolderMaxDepthParam = message.body().getString("sling.jcrinstall.folder.max.depth");
                Integer slingJcrinstallFolderMaxDepth = (slingJcrinstallFolderMaxDepthParam == null) ? null : Json.mapper.readValue(slingJcrinstallFolderMaxDepthParam, Integer.class);
                JsonArray slingJcrinstallSearchPathParam = message.body().getJsonArray("sling.jcrinstall.search.path");
                List<String> slingJcrinstallSearchPath = (slingJcrinstallSearchPathParam == null) ? null : Json.mapper.readValue(slingJcrinstallSearchPathParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingJcrinstallNewConfigPathParam = message.body().getString("sling.jcrinstall.new.config.path");
                String slingJcrinstallNewConfigPath = (slingJcrinstallNewConfigPathParam == null) ? null : slingJcrinstallNewConfigPathParam;
                String slingJcrinstallSignalPathParam = message.body().getString("sling.jcrinstall.signal.path");
                String slingJcrinstallSignalPath = (slingJcrinstallSignalPathParam == null) ? null : slingJcrinstallSignalPathParam;
                String slingJcrinstallEnableWritebackParam = message.body().getString("sling.jcrinstall.enable.writeback");
                Boolean slingJcrinstallEnableWriteback = (slingJcrinstallEnableWritebackParam == null) ? null : Json.mapper.readValue(slingJcrinstallEnableWritebackParam, Boolean.class);
                service.orgApacheSlingInstallerProviderJcrImplJcrInstaller(post, apply, delete, action, $location, propertylist, handlerSchemes, slingJcrinstallFolderNameRegexp, slingJcrinstallFolderMaxDepth, slingJcrinstallSearchPath, slingJcrinstallNewConfigPath, slingJcrinstallSignalPath, slingJcrinstallEnableWriteback, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingInstallerProviderJcrImplJcrInstaller");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingInstallerProviderJcrImplJcrInstaller", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingJcrBaseInternalLoginAdminWhitelist
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGJCRBASEINTERNALLOGINADMINWHITELIST_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingJcrBaseInternalLoginAdminWhitelist";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String whitelistBypassParam = message.body().getString("whitelist.bypass");
                Boolean whitelistBypass = (whitelistBypassParam == null) ? null : Json.mapper.readValue(whitelistBypassParam, Boolean.class);
                String whitelistBundlesRegexpParam = message.body().getString("whitelist.bundles.regexp");
                String whitelistBundlesRegexp = (whitelistBundlesRegexpParam == null) ? null : whitelistBundlesRegexpParam;
                service.orgApacheSlingJcrBaseInternalLoginAdminWhitelist(post, apply, delete, action, $location, propertylist, whitelistBypass, whitelistBundlesRegexp, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingJcrBaseInternalLoginAdminWhitelist");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingJcrBaseInternalLoginAdminWhitelist", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGJCRBASEINTERNALLOGINADMINWHITELISTFRAGMENT_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String whitelistNameParam = message.body().getString("whitelist.name");
                String whitelistName = (whitelistNameParam == null) ? null : whitelistNameParam;
                JsonArray whitelistBundlesParam = message.body().getJsonArray("whitelist.bundles");
                List<String> whitelistBundles = (whitelistBundlesParam == null) ? null : Json.mapper.readValue(whitelistBundlesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(post, apply, delete, action, $location, propertylist, whitelistName, whitelistBundles, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingJcrDavexImplServletsSlingDavExServlet
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGJCRDAVEXIMPLSERVLETSSLINGDAVEXSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingJcrDavexImplServletsSlingDavExServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String aliasParam = message.body().getString("alias");
                String alias = (aliasParam == null) ? null : aliasParam;
                String davCreateAbsoluteUriParam = message.body().getString("dav.create-absolute-uri");
                Boolean davCreateAbsoluteUri = (davCreateAbsoluteUriParam == null) ? null : Json.mapper.readValue(davCreateAbsoluteUriParam, Boolean.class);
                String davProtectedhandlersParam = message.body().getString("dav.protectedhandlers");
                String davProtectedhandlers = (davProtectedhandlersParam == null) ? null : davProtectedhandlersParam;
                service.orgApacheSlingJcrDavexImplServletsSlingDavExServlet(post, apply, delete, action, $location, propertylist, alias, davCreateAbsoluteUri, davProtectedhandlers, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingJcrDavexImplServletsSlingDavExServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingJcrDavexImplServletsSlingDavExServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGJCRJACKRABBITSERVERJNDIREGISTRATIONSUPPORT_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String javaNamingFactoryInitialParam = message.body().getString("java.naming.factory.initial");
                String javaNamingFactoryInitial = (javaNamingFactoryInitialParam == null) ? null : javaNamingFactoryInitialParam;
                String javaNamingProviderUrlParam = message.body().getString("java.naming.provider.url");
                String javaNamingProviderUrl = (javaNamingProviderUrlParam == null) ? null : javaNamingProviderUrlParam;
                service.orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(post, apply, delete, action, $location, propertylist, javaNamingFactoryInitial, javaNamingProviderUrl, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGJCRJACKRABBITSERVERRMIREGISTRATIONSUPPORT_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String portParam = message.body().getString("port");
                Integer port = (portParam == null) ? null : Json.mapper.readValue(portParam, Integer.class);
                service.orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(post, apply, delete, action, $location, propertylist, port, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingJcrRepoinitImplRepositoryInitializer
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGJCRREPOINITIMPLREPOSITORYINITIALIZER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingJcrRepoinitImplRepositoryInitializer";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray referencesParam = message.body().getJsonArray("references");
                List<String> references = (referencesParam == null) ? null : Json.mapper.readValue(referencesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingJcrRepoinitImplRepositoryInitializer(post, apply, delete, action, $location, propertylist, references, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingJcrRepoinitImplRepositoryInitializer");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingJcrRepoinitImplRepositoryInitializer", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingJcrRepoinitRepositoryInitializer
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGJCRREPOINITREPOSITORYINITIALIZER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingJcrRepoinitRepositoryInitializer";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray referencesParam = message.body().getJsonArray("references");
                List<String> references = (referencesParam == null) ? null : Json.mapper.readValue(referencesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray scriptsParam = message.body().getJsonArray("scripts");
                List<String> scripts = (scriptsParam == null) ? null : Json.mapper.readValue(scriptsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingJcrRepoinitRepositoryInitializer(post, apply, delete, action, $location, propertylist, references, scripts, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingJcrRepoinitRepositoryInitializer");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingJcrRepoinitRepositoryInitializer", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGJCRRESOURCEINTERNALJCRRESOURCERESOLVERFACTORYIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray resourceResolverSearchpathParam = message.body().getJsonArray("resource.resolver.searchpath");
                List<String> resourceResolverSearchpath = (resourceResolverSearchpathParam == null) ? null : Json.mapper.readValue(resourceResolverSearchpathParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String resourceResolverManglenamespacesParam = message.body().getString("resource.resolver.manglenamespaces");
                Boolean resourceResolverManglenamespaces = (resourceResolverManglenamespacesParam == null) ? null : Json.mapper.readValue(resourceResolverManglenamespacesParam, Boolean.class);
                String resourceResolverAllowDirectParam = message.body().getString("resource.resolver.allowDirect");
                Boolean resourceResolverAllowDirect = (resourceResolverAllowDirectParam == null) ? null : Json.mapper.readValue(resourceResolverAllowDirectParam, Boolean.class);
                JsonArray resourceResolverRequiredProvidersParam = message.body().getJsonArray("resource.resolver.required.providers");
                List<String> resourceResolverRequiredProviders = (resourceResolverRequiredProvidersParam == null) ? null : Json.mapper.readValue(resourceResolverRequiredProvidersParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray resourceResolverRequiredProvidernamesParam = message.body().getJsonArray("resource.resolver.required.providernames");
                List<String> resourceResolverRequiredProvidernames = (resourceResolverRequiredProvidernamesParam == null) ? null : Json.mapper.readValue(resourceResolverRequiredProvidernamesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray resourceResolverVirtualParam = message.body().getJsonArray("resource.resolver.virtual");
                List<String> resourceResolverVirtual = (resourceResolverVirtualParam == null) ? null : Json.mapper.readValue(resourceResolverVirtualParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray resourceResolverMappingParam = message.body().getJsonArray("resource.resolver.mapping");
                List<String> resourceResolverMapping = (resourceResolverMappingParam == null) ? null : Json.mapper.readValue(resourceResolverMappingParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String resourceResolverMapLocationParam = message.body().getString("resource.resolver.map.location");
                String resourceResolverMapLocation = (resourceResolverMapLocationParam == null) ? null : resourceResolverMapLocationParam;
                JsonArray resourceResolverMapObservationParam = message.body().getJsonArray("resource.resolver.map.observation");
                List<String> resourceResolverMapObservation = (resourceResolverMapObservationParam == null) ? null : Json.mapper.readValue(resourceResolverMapObservationParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String resourceResolverDefaultVanityRedirectStatusParam = message.body().getString("resource.resolver.default.vanity.redirect.status");
                Integer resourceResolverDefaultVanityRedirectStatus = (resourceResolverDefaultVanityRedirectStatusParam == null) ? null : Json.mapper.readValue(resourceResolverDefaultVanityRedirectStatusParam, Integer.class);
                String resourceResolverEnableVanitypathParam = message.body().getString("resource.resolver.enable.vanitypath");
                Boolean resourceResolverEnableVanitypath = (resourceResolverEnableVanitypathParam == null) ? null : Json.mapper.readValue(resourceResolverEnableVanitypathParam, Boolean.class);
                String resourceResolverVanitypathMaxEntriesParam = message.body().getString("resource.resolver.vanitypath.maxEntries");
                Integer resourceResolverVanitypathMaxEntries = (resourceResolverVanitypathMaxEntriesParam == null) ? null : Json.mapper.readValue(resourceResolverVanitypathMaxEntriesParam, Integer.class);
                String resourceResolverVanitypathMaxEntriesStartupParam = message.body().getString("resource.resolver.vanitypath.maxEntries.startup");
                Boolean resourceResolverVanitypathMaxEntriesStartup = (resourceResolverVanitypathMaxEntriesStartupParam == null) ? null : Json.mapper.readValue(resourceResolverVanitypathMaxEntriesStartupParam, Boolean.class);
                String resourceResolverVanitypathBloomfilterMaxBytesParam = message.body().getString("resource.resolver.vanitypath.bloomfilter.maxBytes");
                Integer resourceResolverVanitypathBloomfilterMaxBytes = (resourceResolverVanitypathBloomfilterMaxBytesParam == null) ? null : Json.mapper.readValue(resourceResolverVanitypathBloomfilterMaxBytesParam, Integer.class);
                String resourceResolverOptimizeAliasResolutionParam = message.body().getString("resource.resolver.optimize.alias.resolution");
                Boolean resourceResolverOptimizeAliasResolution = (resourceResolverOptimizeAliasResolutionParam == null) ? null : Json.mapper.readValue(resourceResolverOptimizeAliasResolutionParam, Boolean.class);
                JsonArray resourceResolverVanitypathWhitelistParam = message.body().getJsonArray("resource.resolver.vanitypath.whitelist");
                List<String> resourceResolverVanitypathWhitelist = (resourceResolverVanitypathWhitelistParam == null) ? null : Json.mapper.readValue(resourceResolverVanitypathWhitelistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray resourceResolverVanitypathBlacklistParam = message.body().getJsonArray("resource.resolver.vanitypath.blacklist");
                List<String> resourceResolverVanitypathBlacklist = (resourceResolverVanitypathBlacklistParam == null) ? null : Json.mapper.readValue(resourceResolverVanitypathBlacklistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String resourceResolverVanityPrecedenceParam = message.body().getString("resource.resolver.vanity.precedence");
                Boolean resourceResolverVanityPrecedence = (resourceResolverVanityPrecedenceParam == null) ? null : Json.mapper.readValue(resourceResolverVanityPrecedenceParam, Boolean.class);
                String resourceResolverProviderhandlingParanoidParam = message.body().getString("resource.resolver.providerhandling.paranoid");
                Boolean resourceResolverProviderhandlingParanoid = (resourceResolverProviderhandlingParanoidParam == null) ? null : Json.mapper.readValue(resourceResolverProviderhandlingParanoidParam, Boolean.class);
                String resourceResolverLogClosingParam = message.body().getString("resource.resolver.log.closing");
                Boolean resourceResolverLogClosing = (resourceResolverLogClosingParam == null) ? null : Json.mapper.readValue(resourceResolverLogClosingParam, Boolean.class);
                String resourceResolverLogUnclosedParam = message.body().getString("resource.resolver.log.unclosed");
                Boolean resourceResolverLogUnclosed = (resourceResolverLogUnclosedParam == null) ? null : Json.mapper.readValue(resourceResolverLogUnclosedParam, Boolean.class);
                service.orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(post, apply, delete, action, $location, propertylist, resourceResolverSearchpath, resourceResolverManglenamespaces, resourceResolverAllowDirect, resourceResolverRequiredProviders, resourceResolverRequiredProvidernames, resourceResolverVirtual, resourceResolverMapping, resourceResolverMapLocation, resourceResolverMapObservation, resourceResolverDefaultVanityRedirectStatus, resourceResolverEnableVanitypath, resourceResolverVanitypathMaxEntries, resourceResolverVanitypathMaxEntriesStartup, resourceResolverVanitypathBloomfilterMaxBytes, resourceResolverOptimizeAliasResolution, resourceResolverVanitypathWhitelist, resourceResolverVanitypathBlacklist, resourceResolverVanityPrecedence, resourceResolverProviderhandlingParanoid, resourceResolverLogClosing, resourceResolverLogUnclosed, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingJcrResourceInternalJcrSystemUserValidator
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGJCRRESOURCEINTERNALJCRSYSTEMUSERVALIDATOR_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingJcrResourceInternalJcrSystemUserValidator";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String allowOnlySystemUserParam = message.body().getString("allow.only.system.user");
                Boolean allowOnlySystemUser = (allowOnlySystemUserParam == null) ? null : Json.mapper.readValue(allowOnlySystemUserParam, Boolean.class);
                service.orgApacheSlingJcrResourceInternalJcrSystemUserValidator(post, apply, delete, action, $location, propertylist, allowOnlySystemUser, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingJcrResourceInternalJcrSystemUserValidator");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingJcrResourceInternalJcrSystemUserValidator", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGJCRRESOURCESECURITYIMPLRESOURCEACCESSGATEFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String pathParam = message.body().getString("path");
                String path = (pathParam == null) ? null : pathParam;
                String checkpathPrefixParam = message.body().getString("checkpath.prefix");
                String checkpathPrefix = (checkpathPrefixParam == null) ? null : checkpathPrefixParam;
                String jcrPathParam = message.body().getString("jcrPath");
                String jcrPath = (jcrPathParam == null) ? null : jcrPathParam;
                service.orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(post, apply, delete, action, $location, propertylist, path, checkpathPrefix, jcrPath, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGJCRWEBDAVIMPLHANDLERDEFAULTHANDLERSERVICE_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                String typeCollectionsParam = message.body().getString("type.collections");
                String typeCollections = (typeCollectionsParam == null) ? null : typeCollectionsParam;
                String typeNoncollectionsParam = message.body().getString("type.noncollections");
                String typeNoncollections = (typeNoncollectionsParam == null) ? null : typeNoncollectionsParam;
                String typeContentParam = message.body().getString("type.content");
                String typeContent = (typeContentParam == null) ? null : typeContentParam;
                service.orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(post, apply, delete, action, $location, propertylist, serviceRanking, typeCollections, typeNoncollections, typeContent, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGJCRWEBDAVIMPLHANDLERDIRLISTINGEXPORTHANDLERSERVIC_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                service.orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(post, apply, delete, action, $location, propertylist, serviceRanking, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGJCRWEBDAVIMPLSERVLETSSIMPLEWEBDAVSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String davRootParam = message.body().getString("dav.root");
                String davRoot = (davRootParam == null) ? null : davRootParam;
                String davCreateAbsoluteUriParam = message.body().getString("dav.create-absolute-uri");
                Boolean davCreateAbsoluteUri = (davCreateAbsoluteUriParam == null) ? null : Json.mapper.readValue(davCreateAbsoluteUriParam, Boolean.class);
                String davRealmParam = message.body().getString("dav.realm");
                String davRealm = (davRealmParam == null) ? null : davRealmParam;
                JsonArray collectionTypesParam = message.body().getJsonArray("collection.types");
                List<String> collectionTypes = (collectionTypesParam == null) ? null : Json.mapper.readValue(collectionTypesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray filterPrefixesParam = message.body().getJsonArray("filter.prefixes");
                List<String> filterPrefixes = (filterPrefixesParam == null) ? null : Json.mapper.readValue(filterPrefixesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String filterTypesParam = message.body().getString("filter.types");
                String filterTypes = (filterTypesParam == null) ? null : filterTypesParam;
                String filterUrisParam = message.body().getString("filter.uris");
                String filterUris = (filterUrisParam == null) ? null : filterUrisParam;
                String typeCollectionsParam = message.body().getString("type.collections");
                String typeCollections = (typeCollectionsParam == null) ? null : typeCollectionsParam;
                String typeNoncollectionsParam = message.body().getString("type.noncollections");
                String typeNoncollections = (typeNoncollectionsParam == null) ? null : typeNoncollectionsParam;
                String typeContentParam = message.body().getString("type.content");
                String typeContent = (typeContentParam == null) ? null : typeContentParam;
                service.orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(post, apply, delete, action, $location, propertylist, davRoot, davCreateAbsoluteUri, davRealm, collectionTypes, filterPrefixes, filterTypes, filterUris, typeCollections, typeNoncollections, typeContent, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingJmxProviderImplJMXResourceProvider
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGJMXPROVIDERIMPLJMXRESOURCEPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingJmxProviderImplJMXResourceProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String providerRootsParam = message.body().getString("provider.roots");
                String providerRoots = (providerRootsParam == null) ? null : providerRootsParam;
                service.orgApacheSlingJmxProviderImplJMXResourceProvider(post, apply, delete, action, $location, propertylist, providerRoots, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingJmxProviderImplJMXResourceProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingJmxProviderImplJMXResourceProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingModelsImplModelAdapterFactory
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGMODELSIMPLMODELADAPTERFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingModelsImplModelAdapterFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String osgiHttpWhiteboardListenerParam = message.body().getString("osgi.http.whiteboard.listener");
                String osgiHttpWhiteboardListener = (osgiHttpWhiteboardListenerParam == null) ? null : osgiHttpWhiteboardListenerParam;
                String osgiHttpWhiteboardContextSelectParam = message.body().getString("osgi.http.whiteboard.context.select");
                String osgiHttpWhiteboardContextSelect = (osgiHttpWhiteboardContextSelectParam == null) ? null : osgiHttpWhiteboardContextSelectParam;
                String maxRecursionDepthParam = message.body().getString("max.recursion.depth");
                Integer maxRecursionDepth = (maxRecursionDepthParam == null) ? null : Json.mapper.readValue(maxRecursionDepthParam, Integer.class);
                String cleanupJobPeriodParam = message.body().getString("cleanup.job.period");
                Integer cleanupJobPeriod = (cleanupJobPeriodParam == null) ? null : Json.mapper.readValue(cleanupJobPeriodParam, Integer.class);
                service.orgApacheSlingModelsImplModelAdapterFactory(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardListener, osgiHttpWhiteboardContextSelect, maxRecursionDepth, cleanupJobPeriod, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingModelsImplModelAdapterFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingModelsImplModelAdapterFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingModelsJacksonexporterImplResourceModuleProvider
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGMODELSJACKSONEXPORTERIMPLRESOURCEMODULEPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingModelsJacksonexporterImplResourceModuleProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String maxRecursionLevelsParam = message.body().getString("max.recursion.levels");
                Integer maxRecursionLevels = (maxRecursionLevelsParam == null) ? null : Json.mapper.readValue(maxRecursionLevelsParam, Integer.class);
                service.orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(post, apply, delete, action, $location, propertylist, maxRecursionLevels, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingModelsJacksonexporterImplResourceModuleProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingModelsJacksonexporterImplResourceModuleProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGRESOURCEINVENTORYIMPLRESOURCEINVENTORYPRINTERFACTO_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String felixInventoryPrinterNameParam = message.body().getString("felix.inventory.printer.name");
                String felixInventoryPrinterName = (felixInventoryPrinterNameParam == null) ? null : felixInventoryPrinterNameParam;
                String felixInventoryPrinterTitleParam = message.body().getString("felix.inventory.printer.title");
                String felixInventoryPrinterTitle = (felixInventoryPrinterTitleParam == null) ? null : felixInventoryPrinterTitleParam;
                String pathParam = message.body().getString("path");
                String path = (pathParam == null) ? null : pathParam;
                service.orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(post, apply, delete, action, $location, propertylist, felixInventoryPrinterName, felixInventoryPrinterTitle, path, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingResourcemergerImplMergedResourceProviderFactory
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGRESOURCEMERGERIMPLMERGEDRESOURCEPROVIDERFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingResourcemergerImplMergedResourceProviderFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String mergeRootParam = message.body().getString("merge.root");
                String mergeRoot = (mergeRootParam == null) ? null : mergeRootParam;
                String mergeReadOnlyParam = message.body().getString("merge.readOnly");
                Boolean mergeReadOnly = (mergeReadOnlyParam == null) ? null : Json.mapper.readValue(mergeReadOnlyParam, Boolean.class);
                service.orgApacheSlingResourcemergerImplMergedResourceProviderFactory(post, apply, delete, action, $location, propertylist, mergeRoot, mergeReadOnly, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingResourcemergerImplMergedResourceProviderFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingResourcemergerImplMergedResourceProviderFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingResourcemergerPickerOverriding
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGRESOURCEMERGERPICKEROVERRIDING_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingResourcemergerPickerOverriding";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String mergeRootParam = message.body().getString("merge.root");
                String mergeRoot = (mergeRootParam == null) ? null : mergeRootParam;
                String mergeReadOnlyParam = message.body().getString("merge.readOnly");
                Boolean mergeReadOnly = (mergeReadOnlyParam == null) ? null : Json.mapper.readValue(mergeReadOnlyParam, Boolean.class);
                service.orgApacheSlingResourcemergerPickerOverriding(post, apply, delete, action, $location, propertylist, mergeRoot, mergeReadOnly, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingResourcemergerPickerOverriding");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingResourcemergerPickerOverriding", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingScriptingCoreImplScriptCacheImpl
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGSCRIPTINGCOREIMPLSCRIPTCACHEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingScriptingCoreImplScriptCacheImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String orgApacheSlingScriptingCacheSizeParam = message.body().getString("org.apache.sling.scripting.cache.size");
                Integer orgApacheSlingScriptingCacheSize = (orgApacheSlingScriptingCacheSizeParam == null) ? null : Json.mapper.readValue(orgApacheSlingScriptingCacheSizeParam, Integer.class);
                JsonArray orgApacheSlingScriptingCacheAdditionalExtensionsParam = message.body().getJsonArray("org.apache.sling.scripting.cache.additional_extensions");
                List<String> orgApacheSlingScriptingCacheAdditionalExtensions = (orgApacheSlingScriptingCacheAdditionalExtensionsParam == null) ? null : Json.mapper.readValue(orgApacheSlingScriptingCacheAdditionalExtensionsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingScriptingCoreImplScriptCacheImpl(post, apply, delete, action, $location, propertylist, orgApacheSlingScriptingCacheSize, orgApacheSlingScriptingCacheAdditionalExtensions, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingScriptingCoreImplScriptCacheImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingScriptingCoreImplScriptCacheImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGSCRIPTINGCOREIMPLSCRIPTINGRESOURCERESOLVERPROVIDER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String logStacktraceOncloseParam = message.body().getString("log.stacktrace.onclose");
                Boolean logStacktraceOnclose = (logStacktraceOncloseParam == null) ? null : Json.mapper.readValue(logStacktraceOncloseParam, Boolean.class);
                service.orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(post, apply, delete, action, $location, propertylist, logStacktraceOnclose, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingScriptingJavaImplJavaScriptEngineFactory
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGSCRIPTINGJAVAIMPLJAVASCRIPTENGINEFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingScriptingJavaImplJavaScriptEngineFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String javaClassdebuginfoParam = message.body().getString("java.classdebuginfo");
                Boolean javaClassdebuginfo = (javaClassdebuginfoParam == null) ? null : Json.mapper.readValue(javaClassdebuginfoParam, Boolean.class);
                String javaJavaEncodingParam = message.body().getString("java.javaEncoding");
                String javaJavaEncoding = (javaJavaEncodingParam == null) ? null : javaJavaEncodingParam;
                String javaCompilerSourceVMParam = message.body().getString("java.compilerSourceVM");
                String javaCompilerSourceVM = (javaCompilerSourceVMParam == null) ? null : javaCompilerSourceVMParam;
                String javaCompilerTargetVMParam = message.body().getString("java.compilerTargetVM");
                String javaCompilerTargetVM = (javaCompilerTargetVMParam == null) ? null : javaCompilerTargetVMParam;
                service.orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(post, apply, delete, action, $location, propertylist, javaClassdebuginfo, javaJavaEncoding, javaCompilerSourceVM, javaCompilerTargetVM, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingScriptingJavaImplJavaScriptEngineFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingScriptingJavaImplJavaScriptEngineFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGSCRIPTINGJAVASCRIPTINTERNALRHINOJAVASCRIPTENGINEFA_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String orgApacheSlingScriptingJavascriptRhinoOptLevelParam = message.body().getString("org.apache.sling.scripting.javascript.rhino.optLevel");
                Integer orgApacheSlingScriptingJavascriptRhinoOptLevel = (orgApacheSlingScriptingJavascriptRhinoOptLevelParam == null) ? null : Json.mapper.readValue(orgApacheSlingScriptingJavascriptRhinoOptLevelParam, Integer.class);
                service.orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(post, apply, delete, action, $location, propertylist, orgApacheSlingScriptingJavascriptRhinoOptLevel, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingScriptingJspJspScriptEngineFactory
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGSCRIPTINGJSPJSPSCRIPTENGINEFACTORY_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingScriptingJspJspScriptEngineFactory";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String jasperCompilerTargetVMParam = message.body().getString("jasper.compilerTargetVM");
                String jasperCompilerTargetVM = (jasperCompilerTargetVMParam == null) ? null : jasperCompilerTargetVMParam;
                String jasperCompilerSourceVMParam = message.body().getString("jasper.compilerSourceVM");
                String jasperCompilerSourceVM = (jasperCompilerSourceVMParam == null) ? null : jasperCompilerSourceVMParam;
                String jasperClassdebuginfoParam = message.body().getString("jasper.classdebuginfo");
                Boolean jasperClassdebuginfo = (jasperClassdebuginfoParam == null) ? null : Json.mapper.readValue(jasperClassdebuginfoParam, Boolean.class);
                String jasperEnablePoolingParam = message.body().getString("jasper.enablePooling");
                Boolean jasperEnablePooling = (jasperEnablePoolingParam == null) ? null : Json.mapper.readValue(jasperEnablePoolingParam, Boolean.class);
                String jasperIeClassIdParam = message.body().getString("jasper.ieClassId");
                String jasperIeClassId = (jasperIeClassIdParam == null) ? null : jasperIeClassIdParam;
                String jasperGenStringAsCharArrayParam = message.body().getString("jasper.genStringAsCharArray");
                Boolean jasperGenStringAsCharArray = (jasperGenStringAsCharArrayParam == null) ? null : Json.mapper.readValue(jasperGenStringAsCharArrayParam, Boolean.class);
                String jasperKeepgeneratedParam = message.body().getString("jasper.keepgenerated");
                Boolean jasperKeepgenerated = (jasperKeepgeneratedParam == null) ? null : Json.mapper.readValue(jasperKeepgeneratedParam, Boolean.class);
                String jasperMappedfileParam = message.body().getString("jasper.mappedfile");
                Boolean jasperMappedfile = (jasperMappedfileParam == null) ? null : Json.mapper.readValue(jasperMappedfileParam, Boolean.class);
                String jasperTrimSpacesParam = message.body().getString("jasper.trimSpaces");
                Boolean jasperTrimSpaces = (jasperTrimSpacesParam == null) ? null : Json.mapper.readValue(jasperTrimSpacesParam, Boolean.class);
                String jasperDisplaySourceFragmentsParam = message.body().getString("jasper.displaySourceFragments");
                Boolean jasperDisplaySourceFragments = (jasperDisplaySourceFragmentsParam == null) ? null : Json.mapper.readValue(jasperDisplaySourceFragmentsParam, Boolean.class);
                String defaultIsSessionParam = message.body().getString("default.is.session");
                Boolean defaultIsSession = (defaultIsSessionParam == null) ? null : Json.mapper.readValue(defaultIsSessionParam, Boolean.class);
                service.orgApacheSlingScriptingJspJspScriptEngineFactory(post, apply, delete, action, $location, propertylist, jasperCompilerTargetVM, jasperCompilerSourceVM, jasperClassdebuginfo, jasperEnablePooling, jasperIeClassId, jasperGenStringAsCharArray, jasperKeepgenerated, jasperMappedfile, jasperTrimSpaces, jasperDisplaySourceFragments, defaultIsSession, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingScriptingJspJspScriptEngineFactory");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingScriptingJspJspScriptEngineFactory", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGSCRIPTINGSIGHTLYJSIMPLJSAPISLYBINDINGSVALUESPROV_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray orgApacheSlingScriptingSightlyJsBindingsParam = message.body().getJsonArray("org.apache.sling.scripting.sightly.js.bindings");
                List<String> orgApacheSlingScriptingSightlyJsBindings = (orgApacheSlingScriptingSightlyJsBindingsParam == null) ? null : Json.mapper.readValue(orgApacheSlingScriptingSightlyJsBindingsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(post, apply, delete, action, $location, propertylist, orgApacheSlingScriptingSightlyJsBindings, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingSecurityImplContentDispositionFilter
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGSECURITYIMPLCONTENTDISPOSITIONFILTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingSecurityImplContentDispositionFilter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray slingContentDispositionPathsParam = message.body().getJsonArray("sling.content.disposition.paths");
                List<String> slingContentDispositionPaths = (slingContentDispositionPathsParam == null) ? null : Json.mapper.readValue(slingContentDispositionPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray slingContentDispositionExcludedPathsParam = message.body().getJsonArray("sling.content.disposition.excluded.paths");
                List<String> slingContentDispositionExcludedPaths = (slingContentDispositionExcludedPathsParam == null) ? null : Json.mapper.readValue(slingContentDispositionExcludedPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingContentDispositionAllPathsParam = message.body().getString("sling.content.disposition.all.paths");
                Boolean slingContentDispositionAllPaths = (slingContentDispositionAllPathsParam == null) ? null : Json.mapper.readValue(slingContentDispositionAllPathsParam, Boolean.class);
                service.orgApacheSlingSecurityImplContentDispositionFilter(post, apply, delete, action, $location, propertylist, slingContentDispositionPaths, slingContentDispositionExcludedPaths, slingContentDispositionAllPaths, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingSecurityImplContentDispositionFilter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingSecurityImplContentDispositionFilter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingSecurityImplReferrerFilter
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGSECURITYIMPLREFERRERFILTER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingSecurityImplReferrerFilter";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String allowEmptyParam = message.body().getString("allow.empty");
                Boolean allowEmpty = (allowEmptyParam == null) ? null : Json.mapper.readValue(allowEmptyParam, Boolean.class);
                JsonArray allowHostsParam = message.body().getJsonArray("allow.hosts");
                List<String> allowHosts = (allowHostsParam == null) ? null : Json.mapper.readValue(allowHostsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray allowHostsRegexpParam = message.body().getJsonArray("allow.hosts.regexp");
                List<String> allowHostsRegexp = (allowHostsRegexpParam == null) ? null : Json.mapper.readValue(allowHostsRegexpParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray filterMethodsParam = message.body().getJsonArray("filter.methods");
                List<String> filterMethods = (filterMethodsParam == null) ? null : Json.mapper.readValue(filterMethodsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray excludeAgentsRegexpParam = message.body().getJsonArray("exclude.agents.regexp");
                List<String> excludeAgentsRegexp = (excludeAgentsRegexpParam == null) ? null : Json.mapper.readValue(excludeAgentsRegexpParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingSecurityImplReferrerFilter(post, apply, delete, action, $location, propertylist, allowEmpty, allowHosts, allowHostsRegexp, filterMethods, excludeAgentsRegexp, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingSecurityImplReferrerFilter");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingSecurityImplReferrerFilter", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingServiceusermappingImplServiceUserMapperImpl
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGSERVICEUSERMAPPINGIMPLSERVICEUSERMAPPERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingServiceusermappingImplServiceUserMapperImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray userMappingParam = message.body().getJsonArray("user.mapping");
                List<String> userMapping = (userMappingParam == null) ? null : Json.mapper.readValue(userMappingParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String userDefaultParam = message.body().getString("user.default");
                String userDefault = (userDefaultParam == null) ? null : userDefaultParam;
                String userEnableDefaultMappingParam = message.body().getString("user.enable.default.mapping");
                Boolean userEnableDefaultMapping = (userEnableDefaultMappingParam == null) ? null : Json.mapper.readValue(userEnableDefaultMappingParam, Boolean.class);
                String requireValidationParam = message.body().getString("require.validation");
                Boolean requireValidation = (requireValidationParam == null) ? null : Json.mapper.readValue(requireValidationParam, Boolean.class);
                service.orgApacheSlingServiceusermappingImplServiceUserMapperImpl(post, apply, delete, action, $location, propertylist, userMapping, userDefault, userEnableDefaultMapping, requireValidation, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingServiceusermappingImplServiceUserMapperImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingServiceusermappingImplServiceUserMapperImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGSERVICEUSERMAPPINGIMPLSERVICEUSERMAPPERIMPLAMENDED_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String serviceRankingParam = message.body().getString("service.ranking");
                Integer serviceRanking = (serviceRankingParam == null) ? null : Json.mapper.readValue(serviceRankingParam, Integer.class);
                JsonArray userMappingParam = message.body().getJsonArray("user.mapping");
                List<String> userMapping = (userMappingParam == null) ? null : Json.mapper.readValue(userMappingParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(post, apply, delete, action, $location, propertylist, serviceRanking, userMapping, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingServletsGetDefaultGetServlet
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGSERVLETSGETDEFAULTGETSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingServletsGetDefaultGetServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray aliasesParam = message.body().getJsonArray("aliases");
                List<String> aliases = (aliasesParam == null) ? null : Json.mapper.readValue(aliasesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String indexParam = message.body().getString("index");
                Boolean index = (indexParam == null) ? null : Json.mapper.readValue(indexParam, Boolean.class);
                JsonArray indexFilesParam = message.body().getJsonArray("index.files");
                List<String> indexFiles = (indexFilesParam == null) ? null : Json.mapper.readValue(indexFilesParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enableHtmlParam = message.body().getString("enable.html");
                Boolean enableHtml = (enableHtmlParam == null) ? null : Json.mapper.readValue(enableHtmlParam, Boolean.class);
                String enableJsonParam = message.body().getString("enable.json");
                Boolean enableJson = (enableJsonParam == null) ? null : Json.mapper.readValue(enableJsonParam, Boolean.class);
                String enableTxtParam = message.body().getString("enable.txt");
                Boolean enableTxt = (enableTxtParam == null) ? null : Json.mapper.readValue(enableTxtParam, Boolean.class);
                String enableXmlParam = message.body().getString("enable.xml");
                Boolean enableXml = (enableXmlParam == null) ? null : Json.mapper.readValue(enableXmlParam, Boolean.class);
                String jsonMaximumresultsParam = message.body().getString("json.maximumresults");
                Integer jsonMaximumresults = (jsonMaximumresultsParam == null) ? null : Json.mapper.readValue(jsonMaximumresultsParam, Integer.class);
                String ecmaSuportParam = message.body().getString("ecmaSuport");
                Boolean ecmaSuport = (ecmaSuportParam == null) ? null : Json.mapper.readValue(ecmaSuportParam, Boolean.class);
                service.orgApacheSlingServletsGetDefaultGetServlet(post, apply, delete, action, $location, propertylist, aliases, index, indexFiles, enableHtml, enableJson, enableTxt, enableXml, jsonMaximumresults, ecmaSuport, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingServletsGetDefaultGetServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingServletsGetDefaultGetServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingServletsGetImplVersionVersionInfoServlet
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGSERVLETSGETIMPLVERSIONVERSIONINFOSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingServletsGetImplVersionVersionInfoServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray slingServletSelectorsParam = message.body().getJsonArray("sling.servlet.selectors");
                List<String> slingServletSelectors = (slingServletSelectorsParam == null) ? null : Json.mapper.readValue(slingServletSelectorsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String ecmaSuportParam = message.body().getString("ecmaSuport");
                Boolean ecmaSuport = (ecmaSuportParam == null) ? null : Json.mapper.readValue(ecmaSuportParam, Boolean.class);
                service.orgApacheSlingServletsGetImplVersionVersionInfoServlet(post, apply, delete, action, $location, propertylist, slingServletSelectors, ecmaSuport, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingServletsGetImplVersionVersionInfoServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingServletsGetImplVersionVersionInfoServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingServletsPostImplHelperChunkCleanUpTask
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGSERVLETSPOSTIMPLHELPERCHUNKCLEANUPTASK_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingServletsPostImplHelperChunkCleanUpTask";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String schedulerExpressionParam = message.body().getString("scheduler.expression");
                String schedulerExpression = (schedulerExpressionParam == null) ? null : schedulerExpressionParam;
                String schedulerConcurrentParam = message.body().getString("scheduler.concurrent");
                Boolean schedulerConcurrent = (schedulerConcurrentParam == null) ? null : Json.mapper.readValue(schedulerConcurrentParam, Boolean.class);
                String chunkCleanupAgeParam = message.body().getString("chunk.cleanup.age");
                Integer chunkCleanupAge = (chunkCleanupAgeParam == null) ? null : Json.mapper.readValue(chunkCleanupAgeParam, Integer.class);
                service.orgApacheSlingServletsPostImplHelperChunkCleanUpTask(post, apply, delete, action, $location, propertylist, schedulerExpression, schedulerConcurrent, chunkCleanupAge, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingServletsPostImplHelperChunkCleanUpTask");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingServletsPostImplHelperChunkCleanUpTask", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingServletsPostImplSlingPostServlet
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGSERVLETSPOSTIMPLSLINGPOSTSERVLET_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingServletsPostImplSlingPostServlet";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray servletPostDateFormatsParam = message.body().getJsonArray("servlet.post.dateFormats");
                List<String> servletPostDateFormats = (servletPostDateFormatsParam == null) ? null : Json.mapper.readValue(servletPostDateFormatsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray servletPostNodeNameHintsParam = message.body().getJsonArray("servlet.post.nodeNameHints");
                List<String> servletPostNodeNameHints = (servletPostNodeNameHintsParam == null) ? null : Json.mapper.readValue(servletPostNodeNameHintsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String servletPostNodeNameMaxLengthParam = message.body().getString("servlet.post.nodeNameMaxLength");
                Integer servletPostNodeNameMaxLength = (servletPostNodeNameMaxLengthParam == null) ? null : Json.mapper.readValue(servletPostNodeNameMaxLengthParam, Integer.class);
                String servletPostCheckinNewVersionableNodesParam = message.body().getString("servlet.post.checkinNewVersionableNodes");
                Boolean servletPostCheckinNewVersionableNodes = (servletPostCheckinNewVersionableNodesParam == null) ? null : Json.mapper.readValue(servletPostCheckinNewVersionableNodesParam, Boolean.class);
                String servletPostAutoCheckoutParam = message.body().getString("servlet.post.autoCheckout");
                Boolean servletPostAutoCheckout = (servletPostAutoCheckoutParam == null) ? null : Json.mapper.readValue(servletPostAutoCheckoutParam, Boolean.class);
                String servletPostAutoCheckinParam = message.body().getString("servlet.post.autoCheckin");
                Boolean servletPostAutoCheckin = (servletPostAutoCheckinParam == null) ? null : Json.mapper.readValue(servletPostAutoCheckinParam, Boolean.class);
                String servletPostIgnorePatternParam = message.body().getString("servlet.post.ignorePattern");
                String servletPostIgnorePattern = (servletPostIgnorePatternParam == null) ? null : servletPostIgnorePatternParam;
                service.orgApacheSlingServletsPostImplSlingPostServlet(post, apply, delete, action, $location, propertylist, servletPostDateFormats, servletPostNodeNameHints, servletPostNodeNameMaxLength, servletPostCheckinNewVersionableNodes, servletPostAutoCheckout, servletPostAutoCheckin, servletPostIgnorePattern, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingServletsPostImplSlingPostServlet");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingServletsPostImplSlingPostServlet", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingServletsResolverSlingServletResolver
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGSERVLETSRESOLVERSLINGSERVLETRESOLVER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingServletsResolverSlingServletResolver";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String servletresolverServletRootParam = message.body().getString("servletresolver.servletRoot");
                String servletresolverServletRoot = (servletresolverServletRootParam == null) ? null : servletresolverServletRootParam;
                String servletresolverCacheSizeParam = message.body().getString("servletresolver.cacheSize");
                Integer servletresolverCacheSize = (servletresolverCacheSizeParam == null) ? null : Json.mapper.readValue(servletresolverCacheSizeParam, Integer.class);
                JsonArray servletresolverPathsParam = message.body().getJsonArray("servletresolver.paths");
                List<String> servletresolverPaths = (servletresolverPathsParam == null) ? null : Json.mapper.readValue(servletresolverPathsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray servletresolverDefaultExtensionsParam = message.body().getJsonArray("servletresolver.defaultExtensions");
                List<String> servletresolverDefaultExtensions = (servletresolverDefaultExtensionsParam == null) ? null : Json.mapper.readValue(servletresolverDefaultExtensionsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingServletsResolverSlingServletResolver(post, apply, delete, action, $location, propertylist, servletresolverServletRoot, servletresolverCacheSize, servletresolverPaths, servletresolverDefaultExtensions, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingServletsResolverSlingServletResolver");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingServletsResolverSlingServletResolver", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingSettingsImplSlingSettingsServiceImpl
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGSETTINGSIMPLSLINGSETTINGSSERVICEIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingSettingsImplSlingSettingsServiceImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String slingNameParam = message.body().getString("sling.name");
                String slingName = (slingNameParam == null) ? null : slingNameParam;
                String slingDescriptionParam = message.body().getString("sling.description");
                String slingDescription = (slingDescriptionParam == null) ? null : slingDescriptionParam;
                service.orgApacheSlingSettingsImplSlingSettingsServiceImpl(post, apply, delete, action, $location, propertylist, slingName, slingDescription, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingSettingsImplSlingSettingsServiceImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingSettingsImplSlingSettingsServiceImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingStartupfilterImplStartupFilterImpl
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGSTARTUPFILTERIMPLSTARTUPFILTERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingStartupfilterImplStartupFilterImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String activeByDefaultParam = message.body().getString("active.by.default");
                Boolean activeByDefault = (activeByDefaultParam == null) ? null : Json.mapper.readValue(activeByDefaultParam, Boolean.class);
                String defaultMessageParam = message.body().getString("default.message");
                String defaultMessage = (defaultMessageParam == null) ? null : defaultMessageParam;
                service.orgApacheSlingStartupfilterImplStartupFilterImpl(post, apply, delete, action, $location, propertylist, activeByDefault, defaultMessage, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingStartupfilterImplStartupFilterImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingStartupfilterImplStartupFilterImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingTenantInternalTenantProviderImpl
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGTENANTINTERNALTENANTPROVIDERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingTenantInternalTenantProviderImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String tenantRootParam = message.body().getString("tenant.root");
                String tenantRoot = (tenantRootParam == null) ? null : tenantRootParam;
                JsonArray tenantPathMatcherParam = message.body().getJsonArray("tenant.path.matcher");
                List<String> tenantPathMatcher = (tenantPathMatcherParam == null) ? null : Json.mapper.readValue(tenantPathMatcherParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                service.orgApacheSlingTenantInternalTenantProviderImpl(post, apply, delete, action, $location, propertylist, tenantRoot, tenantPathMatcher, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingTenantInternalTenantProviderImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingTenantInternalTenantProviderImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingTracerInternalLogTracer
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGTRACERINTERNALLOGTRACER_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingTracerInternalLogTracer";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                JsonArray tracerSetsParam = message.body().getJsonArray("tracerSets");
                List<String> tracerSets = (tracerSetsParam == null) ? null : Json.mapper.readValue(tracerSetsParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String enabledParam = message.body().getString("enabled");
                Boolean enabled = (enabledParam == null) ? null : Json.mapper.readValue(enabledParam, Boolean.class);
                String servletEnabledParam = message.body().getString("servletEnabled");
                Boolean servletEnabled = (servletEnabledParam == null) ? null : Json.mapper.readValue(servletEnabledParam, Boolean.class);
                String recordingCacheSizeInMBParam = message.body().getString("recordingCacheSizeInMB");
                Integer recordingCacheSizeInMB = (recordingCacheSizeInMBParam == null) ? null : Json.mapper.readValue(recordingCacheSizeInMBParam, Integer.class);
                String recordingCacheDurationInSecsParam = message.body().getString("recordingCacheDurationInSecs");
                Integer recordingCacheDurationInSecs = (recordingCacheDurationInSecsParam == null) ? null : Json.mapper.readValue(recordingCacheDurationInSecsParam, Integer.class);
                String recordingCompressionEnabledParam = message.body().getString("recordingCompressionEnabled");
                Boolean recordingCompressionEnabled = (recordingCompressionEnabledParam == null) ? null : Json.mapper.readValue(recordingCompressionEnabledParam, Boolean.class);
                String gzipResponseParam = message.body().getString("gzipResponse");
                Boolean gzipResponse = (gzipResponseParam == null) ? null : Json.mapper.readValue(gzipResponseParam, Boolean.class);
                service.orgApacheSlingTracerInternalLogTracer(post, apply, delete, action, $location, propertylist, tracerSets, enabled, servletEnabled, recordingCacheSizeInMB, recordingCacheDurationInSecs, recordingCompressionEnabled, gzipResponse, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingTracerInternalLogTracer");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingTracerInternalLogTracer", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
        //Consumer for orgApacheSlingXssImplXSSFilterImpl
        vertx.eventBus().<JsonObject> consumer(ORGAPACHESLINGXSSIMPLXSSFILTERIMPL_SERVICE_ID).handler(message -> {
            try {
                // Workaround for #allParams section clearing the vendorExtensions map
                String serviceId = "orgApacheSlingXssImplXSSFilterImpl";
                String postParam = message.body().getString("post");
                Boolean post = (postParam == null) ? null : Json.mapper.readValue(postParam, Boolean.class);
                String applyParam = message.body().getString("apply");
                Boolean apply = (applyParam == null) ? null : Json.mapper.readValue(applyParam, Boolean.class);
                String deleteParam = message.body().getString("delete");
                Boolean delete = (deleteParam == null) ? null : Json.mapper.readValue(deleteParam, Boolean.class);
                String actionParam = message.body().getString("action");
                String action = (actionParam == null) ? null : actionParam;
                String $locationParam = message.body().getString("$location");
                String $location = ($locationParam == null) ? null : $locationParam;
                JsonArray propertylistParam = message.body().getJsonArray("propertylist");
                List<String> propertylist = (propertylistParam == null) ? null : Json.mapper.readValue(propertylistParam.encode(),
                    Json.mapper.getTypeFactory().constructCollectionType(List.class, String.class));
                String policyPathParam = message.body().getString("policyPath");
                String policyPath = (policyPathParam == null) ? null : policyPathParam;
                service.orgApacheSlingXssImplXSSFilterImpl(post, apply, delete, action, $location, propertylist, policyPath, result -> {
                    if (result.succeeded())
                        message.reply(new JsonObject(Json.encode(result.result())).encodePrettily());
                    else {
                        Throwable cause = result.cause();
                        manageError(message, cause, "orgApacheSlingXssImplXSSFilterImpl");
                    }
                });
            } catch (Exception e) {
                logUnexpectedError("orgApacheSlingXssImplXSSFilterImpl", e);
                message.fail(MainApiException.INTERNAL_SERVER_ERROR.getStatusCode(), MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage());
            }
        });
        
    }
    
    private void manageError(Message<JsonObject> message, Throwable cause, String serviceName) {
        int code = MainApiException.INTERNAL_SERVER_ERROR.getStatusCode();
        String statusMessage = MainApiException.INTERNAL_SERVER_ERROR.getStatusMessage();
        if (cause instanceof MainApiException) {
            code = ((MainApiException)cause).getStatusCode();
            statusMessage = ((MainApiException)cause).getStatusMessage();
        } else {
            logUnexpectedError(serviceName, cause); 
        }
            
        message.fail(code, statusMessage);
    }
    
    private void logUnexpectedError(String serviceName, Throwable cause) {
        LOGGER.error("Unexpected error in "+ serviceName, cause);
    }
}
