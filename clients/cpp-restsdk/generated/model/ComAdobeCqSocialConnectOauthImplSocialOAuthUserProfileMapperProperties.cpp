/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties()
{
    m_FacebookIsSet = false;
    m_TwitterIsSet = false;
    m_Provider_config_user_folderIsSet = false;
}

ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::~ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties()
{
}

void ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_FacebookIsSet)
    {
        val[utility::conversions::to_string_t("facebook")] = ModelBase::toJson(m_Facebook);
    }
    if(m_TwitterIsSet)
    {
        val[utility::conversions::to_string_t("twitter")] = ModelBase::toJson(m_Twitter);
    }
    if(m_Provider_config_user_folderIsSet)
    {
        val[utility::conversions::to_string_t("provider.config.user.folder")] = ModelBase::toJson(m_Provider_config_user_folder);
    }

    return val;
}

void ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("facebook")))
    {
        if(!val[utility::conversions::to_string_t("facebook")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("facebook")]);
            setFacebook( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("twitter")))
    {
        if(!val[utility::conversions::to_string_t("twitter")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("twitter")]);
            setTwitter( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("provider.config.user.folder")))
    {
        if(!val[utility::conversions::to_string_t("provider.config.user.folder")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("provider.config.user.folder")]);
            setProviderConfigUserFolder( newItem );
        }
    }
}

void ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_FacebookIsSet)
    {
        if (m_Facebook.get())
        {
            m_Facebook->toMultipart(multipart, utility::conversions::to_string_t("facebook."));
        }
    }
    if(m_TwitterIsSet)
    {
        if (m_Twitter.get())
        {
            m_Twitter->toMultipart(multipart, utility::conversions::to_string_t("twitter."));
        }
    }
    if(m_Provider_config_user_folderIsSet)
    {
        if (m_Provider_config_user_folder.get())
        {
            m_Provider_config_user_folder->toMultipart(multipart, utility::conversions::to_string_t("provider.config.user.folder."));
        }
    }
}

void ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("facebook")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("facebook")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("facebook."));
            setFacebook( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("twitter")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("twitter")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("twitter."));
            setTwitter( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("provider.config.user.folder")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("provider.config.user.folder")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("provider.config.user.folder."));
            setProviderConfigUserFolder( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::getFacebook() const
{
    return m_Facebook;
}


void ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::setFacebook(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Facebook = value;
    m_FacebookIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::facebookIsSet() const
{
    return m_FacebookIsSet;
}

void ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::unsetFacebook()
{
    m_FacebookIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::getTwitter() const
{
    return m_Twitter;
}


void ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::setTwitter(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Twitter = value;
    m_TwitterIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::twitterIsSet() const
{
    return m_TwitterIsSet;
}

void ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::unsetTwitter()
{
    m_TwitterIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::getProviderConfigUserFolder() const
{
    return m_Provider_config_user_folder;
}


void ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::setProviderConfigUserFolder(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Provider_config_user_folder = value;
    m_Provider_config_user_folderIsSet = true;
}
bool ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::providerConfigUserFolderIsSet() const
{
    return m_Provider_config_user_folderIsSet;
}

void ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::unsetProvider_config_user_folder()
{
    m_Provider_config_user_folderIsSet = false;
}

}
}
}
}

