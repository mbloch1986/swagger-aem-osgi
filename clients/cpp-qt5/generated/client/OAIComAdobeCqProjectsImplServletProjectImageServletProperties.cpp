/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqProjectsImplServletProjectImageServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqProjectsImplServletProjectImageServletProperties::OAIComAdobeCqProjectsImplServletProjectImageServletProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqProjectsImplServletProjectImageServletProperties::OAIComAdobeCqProjectsImplServletProjectImageServletProperties() {
    init();
}

OAIComAdobeCqProjectsImplServletProjectImageServletProperties::~OAIComAdobeCqProjectsImplServletProjectImageServletProperties() {
    this->cleanup();
}

void
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::init() {
    image_quality = new OAIConfigNodePropertyString();
    m_image_quality_isSet = false;
    image_supported_resolutions = new OAIConfigNodePropertyString();
    m_image_supported_resolutions_isSet = false;
}

void
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::cleanup() {
    if(image_quality != nullptr) { 
        delete image_quality;
    }
    if(image_supported_resolutions != nullptr) { 
        delete image_supported_resolutions;
    }
}

OAIComAdobeCqProjectsImplServletProjectImageServletProperties*
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&image_quality, pJson["image.quality"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&image_supported_resolutions, pJson["image.supported.resolutions"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::asJsonObject() {
    QJsonObject obj;
    if((image_quality != nullptr) && (image_quality->isSet())){
        toJsonValue(QString("image.quality"), image_quality, obj, QString("OAIConfigNodePropertyString"));
    }
    if((image_supported_resolutions != nullptr) && (image_supported_resolutions->isSet())){
        toJsonValue(QString("image.supported.resolutions"), image_supported_resolutions, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::getImageQuality() {
    return image_quality;
}
void
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::setImageQuality(OAIConfigNodePropertyString* image_quality) {
    this->image_quality = image_quality;
    this->m_image_quality_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::getImageSupportedResolutions() {
    return image_supported_resolutions;
}
void
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::setImageSupportedResolutions(OAIConfigNodePropertyString* image_supported_resolutions) {
    this->image_supported_resolutions = image_supported_resolutions;
    this->m_image_supported_resolutions_isSet = true;
}


bool
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(image_quality != nullptr && image_quality->isSet()){ isObjectUpdated = true; break;}
        if(image_supported_resolutions != nullptr && image_supported_resolutions->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

