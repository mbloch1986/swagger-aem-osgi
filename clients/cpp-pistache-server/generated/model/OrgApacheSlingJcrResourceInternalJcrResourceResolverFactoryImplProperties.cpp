/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties()
{
    m_Resource_resolver_searchpathIsSet = false;
    m_Resource_resolver_manglenamespacesIsSet = false;
    m_Resource_resolver_allowDirectIsSet = false;
    m_Resource_resolver_required_providersIsSet = false;
    m_Resource_resolver_required_providernamesIsSet = false;
    m_Resource_resolver_virtualIsSet = false;
    m_Resource_resolver_mappingIsSet = false;
    m_Resource_resolver_map_locationIsSet = false;
    m_Resource_resolver_map_observationIsSet = false;
    m_Resource_resolver_default_vanity_redirect_statusIsSet = false;
    m_Resource_resolver_enable_vanitypathIsSet = false;
    m_Resource_resolver_vanitypath_maxEntriesIsSet = false;
    m_Resource_resolver_vanitypath_maxEntries_startupIsSet = false;
    m_Resource_resolver_vanitypath_bloomfilter_maxBytesIsSet = false;
    m_Resource_resolver_optimize_alias_resolutionIsSet = false;
    m_Resource_resolver_vanitypath_whitelistIsSet = false;
    m_Resource_resolver_vanitypath_blacklistIsSet = false;
    m_Resource_resolver_vanity_precedenceIsSet = false;
    m_Resource_resolver_providerhandling_paranoidIsSet = false;
    m_Resource_resolver_log_closingIsSet = false;
    m_Resource_resolver_log_unclosedIsSet = false;
    
}

OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::~OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties()
{
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Resource_resolver_searchpathIsSet)
    {
        val["resource.resolver.searchpath"] = ModelBase::toJson(m_Resource_resolver_searchpath);
    }
    if(m_Resource_resolver_manglenamespacesIsSet)
    {
        val["resource.resolver.manglenamespaces"] = ModelBase::toJson(m_Resource_resolver_manglenamespaces);
    }
    if(m_Resource_resolver_allowDirectIsSet)
    {
        val["resource.resolver.allowDirect"] = ModelBase::toJson(m_Resource_resolver_allowDirect);
    }
    if(m_Resource_resolver_required_providersIsSet)
    {
        val["resource.resolver.required.providers"] = ModelBase::toJson(m_Resource_resolver_required_providers);
    }
    if(m_Resource_resolver_required_providernamesIsSet)
    {
        val["resource.resolver.required.providernames"] = ModelBase::toJson(m_Resource_resolver_required_providernames);
    }
    if(m_Resource_resolver_virtualIsSet)
    {
        val["resource.resolver.virtual"] = ModelBase::toJson(m_Resource_resolver_virtual);
    }
    if(m_Resource_resolver_mappingIsSet)
    {
        val["resource.resolver.mapping"] = ModelBase::toJson(m_Resource_resolver_mapping);
    }
    if(m_Resource_resolver_map_locationIsSet)
    {
        val["resource.resolver.map.location"] = ModelBase::toJson(m_Resource_resolver_map_location);
    }
    if(m_Resource_resolver_map_observationIsSet)
    {
        val["resource.resolver.map.observation"] = ModelBase::toJson(m_Resource_resolver_map_observation);
    }
    if(m_Resource_resolver_default_vanity_redirect_statusIsSet)
    {
        val["resource.resolver.default.vanity.redirect.status"] = ModelBase::toJson(m_Resource_resolver_default_vanity_redirect_status);
    }
    if(m_Resource_resolver_enable_vanitypathIsSet)
    {
        val["resource.resolver.enable.vanitypath"] = ModelBase::toJson(m_Resource_resolver_enable_vanitypath);
    }
    if(m_Resource_resolver_vanitypath_maxEntriesIsSet)
    {
        val["resource.resolver.vanitypath.maxEntries"] = ModelBase::toJson(m_Resource_resolver_vanitypath_maxEntries);
    }
    if(m_Resource_resolver_vanitypath_maxEntries_startupIsSet)
    {
        val["resource.resolver.vanitypath.maxEntries.startup"] = ModelBase::toJson(m_Resource_resolver_vanitypath_maxEntries_startup);
    }
    if(m_Resource_resolver_vanitypath_bloomfilter_maxBytesIsSet)
    {
        val["resource.resolver.vanitypath.bloomfilter.maxBytes"] = ModelBase::toJson(m_Resource_resolver_vanitypath_bloomfilter_maxBytes);
    }
    if(m_Resource_resolver_optimize_alias_resolutionIsSet)
    {
        val["resource.resolver.optimize.alias.resolution"] = ModelBase::toJson(m_Resource_resolver_optimize_alias_resolution);
    }
    if(m_Resource_resolver_vanitypath_whitelistIsSet)
    {
        val["resource.resolver.vanitypath.whitelist"] = ModelBase::toJson(m_Resource_resolver_vanitypath_whitelist);
    }
    if(m_Resource_resolver_vanitypath_blacklistIsSet)
    {
        val["resource.resolver.vanitypath.blacklist"] = ModelBase::toJson(m_Resource_resolver_vanitypath_blacklist);
    }
    if(m_Resource_resolver_vanity_precedenceIsSet)
    {
        val["resource.resolver.vanity.precedence"] = ModelBase::toJson(m_Resource_resolver_vanity_precedence);
    }
    if(m_Resource_resolver_providerhandling_paranoidIsSet)
    {
        val["resource.resolver.providerhandling.paranoid"] = ModelBase::toJson(m_Resource_resolver_providerhandling_paranoid);
    }
    if(m_Resource_resolver_log_closingIsSet)
    {
        val["resource.resolver.log.closing"] = ModelBase::toJson(m_Resource_resolver_log_closing);
    }
    if(m_Resource_resolver_log_unclosedIsSet)
    {
        val["resource.resolver.log.unclosed"] = ModelBase::toJson(m_Resource_resolver_log_unclosed);
    }
    

    return val;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("resource.resolver.searchpath") != val.end())
    {
        if(!val["resource.resolver.searchpath"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["resource.resolver.searchpath"]);
            setResourceResolverSearchpath( newItem );
        }
        
    }
    if(val.find("resource.resolver.manglenamespaces") != val.end())
    {
        if(!val["resource.resolver.manglenamespaces"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["resource.resolver.manglenamespaces"]);
            setResourceResolverManglenamespaces( newItem );
        }
        
    }
    if(val.find("resource.resolver.allowDirect") != val.end())
    {
        if(!val["resource.resolver.allowDirect"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["resource.resolver.allowDirect"]);
            setResourceResolverAllowDirect( newItem );
        }
        
    }
    if(val.find("resource.resolver.required.providers") != val.end())
    {
        if(!val["resource.resolver.required.providers"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["resource.resolver.required.providers"]);
            setResourceResolverRequiredProviders( newItem );
        }
        
    }
    if(val.find("resource.resolver.required.providernames") != val.end())
    {
        if(!val["resource.resolver.required.providernames"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["resource.resolver.required.providernames"]);
            setResourceResolverRequiredProvidernames( newItem );
        }
        
    }
    if(val.find("resource.resolver.virtual") != val.end())
    {
        if(!val["resource.resolver.virtual"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["resource.resolver.virtual"]);
            setResourceResolverVirtual( newItem );
        }
        
    }
    if(val.find("resource.resolver.mapping") != val.end())
    {
        if(!val["resource.resolver.mapping"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["resource.resolver.mapping"]);
            setResourceResolverMapping( newItem );
        }
        
    }
    if(val.find("resource.resolver.map.location") != val.end())
    {
        if(!val["resource.resolver.map.location"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["resource.resolver.map.location"]);
            setResourceResolverMapLocation( newItem );
        }
        
    }
    if(val.find("resource.resolver.map.observation") != val.end())
    {
        if(!val["resource.resolver.map.observation"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["resource.resolver.map.observation"]);
            setResourceResolverMapObservation( newItem );
        }
        
    }
    if(val.find("resource.resolver.default.vanity.redirect.status") != val.end())
    {
        if(!val["resource.resolver.default.vanity.redirect.status"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["resource.resolver.default.vanity.redirect.status"]);
            setResourceResolverDefaultVanityRedirectStatus( newItem );
        }
        
    }
    if(val.find("resource.resolver.enable.vanitypath") != val.end())
    {
        if(!val["resource.resolver.enable.vanitypath"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["resource.resolver.enable.vanitypath"]);
            setResourceResolverEnableVanitypath( newItem );
        }
        
    }
    if(val.find("resource.resolver.vanitypath.maxEntries") != val.end())
    {
        if(!val["resource.resolver.vanitypath.maxEntries"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["resource.resolver.vanitypath.maxEntries"]);
            setResourceResolverVanitypathMaxEntries( newItem );
        }
        
    }
    if(val.find("resource.resolver.vanitypath.maxEntries.startup") != val.end())
    {
        if(!val["resource.resolver.vanitypath.maxEntries.startup"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["resource.resolver.vanitypath.maxEntries.startup"]);
            setResourceResolverVanitypathMaxEntriesStartup( newItem );
        }
        
    }
    if(val.find("resource.resolver.vanitypath.bloomfilter.maxBytes") != val.end())
    {
        if(!val["resource.resolver.vanitypath.bloomfilter.maxBytes"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["resource.resolver.vanitypath.bloomfilter.maxBytes"]);
            setResourceResolverVanitypathBloomfilterMaxBytes( newItem );
        }
        
    }
    if(val.find("resource.resolver.optimize.alias.resolution") != val.end())
    {
        if(!val["resource.resolver.optimize.alias.resolution"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["resource.resolver.optimize.alias.resolution"]);
            setResourceResolverOptimizeAliasResolution( newItem );
        }
        
    }
    if(val.find("resource.resolver.vanitypath.whitelist") != val.end())
    {
        if(!val["resource.resolver.vanitypath.whitelist"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["resource.resolver.vanitypath.whitelist"]);
            setResourceResolverVanitypathWhitelist( newItem );
        }
        
    }
    if(val.find("resource.resolver.vanitypath.blacklist") != val.end())
    {
        if(!val["resource.resolver.vanitypath.blacklist"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["resource.resolver.vanitypath.blacklist"]);
            setResourceResolverVanitypathBlacklist( newItem );
        }
        
    }
    if(val.find("resource.resolver.vanity.precedence") != val.end())
    {
        if(!val["resource.resolver.vanity.precedence"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["resource.resolver.vanity.precedence"]);
            setResourceResolverVanityPrecedence( newItem );
        }
        
    }
    if(val.find("resource.resolver.providerhandling.paranoid") != val.end())
    {
        if(!val["resource.resolver.providerhandling.paranoid"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["resource.resolver.providerhandling.paranoid"]);
            setResourceResolverProviderhandlingParanoid( newItem );
        }
        
    }
    if(val.find("resource.resolver.log.closing") != val.end())
    {
        if(!val["resource.resolver.log.closing"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["resource.resolver.log.closing"]);
            setResourceResolverLogClosing( newItem );
        }
        
    }
    if(val.find("resource.resolver.log.unclosed") != val.end())
    {
        if(!val["resource.resolver.log.unclosed"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["resource.resolver.log.unclosed"]);
            setResourceResolverLogUnclosed( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverSearchpath() const
{
    return m_Resource_resolver_searchpath;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverSearchpath(ConfigNodePropertyArray const& value)
{
    m_Resource_resolver_searchpath = value;
    m_Resource_resolver_searchpathIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverSearchpathIsSet() const
{
    return m_Resource_resolver_searchpathIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_searchpath()
{
    m_Resource_resolver_searchpathIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverManglenamespaces() const
{
    return m_Resource_resolver_manglenamespaces;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverManglenamespaces(ConfigNodePropertyBoolean const& value)
{
    m_Resource_resolver_manglenamespaces = value;
    m_Resource_resolver_manglenamespacesIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverManglenamespacesIsSet() const
{
    return m_Resource_resolver_manglenamespacesIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_manglenamespaces()
{
    m_Resource_resolver_manglenamespacesIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverAllowDirect() const
{
    return m_Resource_resolver_allowDirect;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverAllowDirect(ConfigNodePropertyBoolean const& value)
{
    m_Resource_resolver_allowDirect = value;
    m_Resource_resolver_allowDirectIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverAllowDirectIsSet() const
{
    return m_Resource_resolver_allowDirectIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_allowDirect()
{
    m_Resource_resolver_allowDirectIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverRequiredProviders() const
{
    return m_Resource_resolver_required_providers;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverRequiredProviders(ConfigNodePropertyArray const& value)
{
    m_Resource_resolver_required_providers = value;
    m_Resource_resolver_required_providersIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverRequiredProvidersIsSet() const
{
    return m_Resource_resolver_required_providersIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_required_providers()
{
    m_Resource_resolver_required_providersIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverRequiredProvidernames() const
{
    return m_Resource_resolver_required_providernames;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverRequiredProvidernames(ConfigNodePropertyArray const& value)
{
    m_Resource_resolver_required_providernames = value;
    m_Resource_resolver_required_providernamesIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverRequiredProvidernamesIsSet() const
{
    return m_Resource_resolver_required_providernamesIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_required_providernames()
{
    m_Resource_resolver_required_providernamesIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVirtual() const
{
    return m_Resource_resolver_virtual;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVirtual(ConfigNodePropertyArray const& value)
{
    m_Resource_resolver_virtual = value;
    m_Resource_resolver_virtualIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverVirtualIsSet() const
{
    return m_Resource_resolver_virtualIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_virtual()
{
    m_Resource_resolver_virtualIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverMapping() const
{
    return m_Resource_resolver_mapping;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverMapping(ConfigNodePropertyArray const& value)
{
    m_Resource_resolver_mapping = value;
    m_Resource_resolver_mappingIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverMappingIsSet() const
{
    return m_Resource_resolver_mappingIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_mapping()
{
    m_Resource_resolver_mappingIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverMapLocation() const
{
    return m_Resource_resolver_map_location;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverMapLocation(ConfigNodePropertyString const& value)
{
    m_Resource_resolver_map_location = value;
    m_Resource_resolver_map_locationIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverMapLocationIsSet() const
{
    return m_Resource_resolver_map_locationIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_map_location()
{
    m_Resource_resolver_map_locationIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverMapObservation() const
{
    return m_Resource_resolver_map_observation;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverMapObservation(ConfigNodePropertyArray const& value)
{
    m_Resource_resolver_map_observation = value;
    m_Resource_resolver_map_observationIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverMapObservationIsSet() const
{
    return m_Resource_resolver_map_observationIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_map_observation()
{
    m_Resource_resolver_map_observationIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverDefaultVanityRedirectStatus() const
{
    return m_Resource_resolver_default_vanity_redirect_status;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverDefaultVanityRedirectStatus(ConfigNodePropertyInteger const& value)
{
    m_Resource_resolver_default_vanity_redirect_status = value;
    m_Resource_resolver_default_vanity_redirect_statusIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverDefaultVanityRedirectStatusIsSet() const
{
    return m_Resource_resolver_default_vanity_redirect_statusIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_default_vanity_redirect_status()
{
    m_Resource_resolver_default_vanity_redirect_statusIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverEnableVanitypath() const
{
    return m_Resource_resolver_enable_vanitypath;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverEnableVanitypath(ConfigNodePropertyBoolean const& value)
{
    m_Resource_resolver_enable_vanitypath = value;
    m_Resource_resolver_enable_vanitypathIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverEnableVanitypathIsSet() const
{
    return m_Resource_resolver_enable_vanitypathIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_enable_vanitypath()
{
    m_Resource_resolver_enable_vanitypathIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanitypathMaxEntries() const
{
    return m_Resource_resolver_vanitypath_maxEntries;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanitypathMaxEntries(ConfigNodePropertyInteger const& value)
{
    m_Resource_resolver_vanitypath_maxEntries = value;
    m_Resource_resolver_vanitypath_maxEntriesIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverVanitypathMaxEntriesIsSet() const
{
    return m_Resource_resolver_vanitypath_maxEntriesIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_vanitypath_maxEntries()
{
    m_Resource_resolver_vanitypath_maxEntriesIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanitypathMaxEntriesStartup() const
{
    return m_Resource_resolver_vanitypath_maxEntries_startup;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanitypathMaxEntriesStartup(ConfigNodePropertyBoolean const& value)
{
    m_Resource_resolver_vanitypath_maxEntries_startup = value;
    m_Resource_resolver_vanitypath_maxEntries_startupIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverVanitypathMaxEntriesStartupIsSet() const
{
    return m_Resource_resolver_vanitypath_maxEntries_startupIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_vanitypath_maxEntries_startup()
{
    m_Resource_resolver_vanitypath_maxEntries_startupIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanitypathBloomfilterMaxBytes() const
{
    return m_Resource_resolver_vanitypath_bloomfilter_maxBytes;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanitypathBloomfilterMaxBytes(ConfigNodePropertyInteger const& value)
{
    m_Resource_resolver_vanitypath_bloomfilter_maxBytes = value;
    m_Resource_resolver_vanitypath_bloomfilter_maxBytesIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverVanitypathBloomfilterMaxBytesIsSet() const
{
    return m_Resource_resolver_vanitypath_bloomfilter_maxBytesIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_vanitypath_bloomfilter_maxBytes()
{
    m_Resource_resolver_vanitypath_bloomfilter_maxBytesIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverOptimizeAliasResolution() const
{
    return m_Resource_resolver_optimize_alias_resolution;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverOptimizeAliasResolution(ConfigNodePropertyBoolean const& value)
{
    m_Resource_resolver_optimize_alias_resolution = value;
    m_Resource_resolver_optimize_alias_resolutionIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverOptimizeAliasResolutionIsSet() const
{
    return m_Resource_resolver_optimize_alias_resolutionIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_optimize_alias_resolution()
{
    m_Resource_resolver_optimize_alias_resolutionIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanitypathWhitelist() const
{
    return m_Resource_resolver_vanitypath_whitelist;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanitypathWhitelist(ConfigNodePropertyArray const& value)
{
    m_Resource_resolver_vanitypath_whitelist = value;
    m_Resource_resolver_vanitypath_whitelistIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverVanitypathWhitelistIsSet() const
{
    return m_Resource_resolver_vanitypath_whitelistIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_vanitypath_whitelist()
{
    m_Resource_resolver_vanitypath_whitelistIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanitypathBlacklist() const
{
    return m_Resource_resolver_vanitypath_blacklist;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanitypathBlacklist(ConfigNodePropertyArray const& value)
{
    m_Resource_resolver_vanitypath_blacklist = value;
    m_Resource_resolver_vanitypath_blacklistIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverVanitypathBlacklistIsSet() const
{
    return m_Resource_resolver_vanitypath_blacklistIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_vanitypath_blacklist()
{
    m_Resource_resolver_vanitypath_blacklistIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanityPrecedence() const
{
    return m_Resource_resolver_vanity_precedence;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanityPrecedence(ConfigNodePropertyBoolean const& value)
{
    m_Resource_resolver_vanity_precedence = value;
    m_Resource_resolver_vanity_precedenceIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverVanityPrecedenceIsSet() const
{
    return m_Resource_resolver_vanity_precedenceIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_vanity_precedence()
{
    m_Resource_resolver_vanity_precedenceIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverProviderhandlingParanoid() const
{
    return m_Resource_resolver_providerhandling_paranoid;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverProviderhandlingParanoid(ConfigNodePropertyBoolean const& value)
{
    m_Resource_resolver_providerhandling_paranoid = value;
    m_Resource_resolver_providerhandling_paranoidIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverProviderhandlingParanoidIsSet() const
{
    return m_Resource_resolver_providerhandling_paranoidIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_providerhandling_paranoid()
{
    m_Resource_resolver_providerhandling_paranoidIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverLogClosing() const
{
    return m_Resource_resolver_log_closing;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverLogClosing(ConfigNodePropertyBoolean const& value)
{
    m_Resource_resolver_log_closing = value;
    m_Resource_resolver_log_closingIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverLogClosingIsSet() const
{
    return m_Resource_resolver_log_closingIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_log_closing()
{
    m_Resource_resolver_log_closingIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverLogUnclosed() const
{
    return m_Resource_resolver_log_unclosed;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverLogUnclosed(ConfigNodePropertyBoolean const& value)
{
    m_Resource_resolver_log_unclosed = value;
    m_Resource_resolver_log_unclosedIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverLogUnclosedIsSet() const
{
    return m_Resource_resolver_log_unclosedIsSet;
}
void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_log_unclosed()
{
    m_Resource_resolver_log_unclosedIsSet = false;
}

}
}
}
}

