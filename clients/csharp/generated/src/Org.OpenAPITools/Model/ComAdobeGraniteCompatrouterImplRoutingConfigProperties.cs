/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeGraniteCompatrouterImplRoutingConfigProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteCompatrouterImplRoutingConfigProperties :  IEquatable<ComAdobeGraniteCompatrouterImplRoutingConfigProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeGraniteCompatrouterImplRoutingConfigProperties" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="compatPath">compatPath.</param>
        /// <param name="newPath">newPath.</param>
        public ComAdobeGraniteCompatrouterImplRoutingConfigProperties(ConfigNodePropertyString id = default(ConfigNodePropertyString), ConfigNodePropertyString compatPath = default(ConfigNodePropertyString), ConfigNodePropertyString newPath = default(ConfigNodePropertyString))
        {
            this.Id = id;
            this.CompatPath = compatPath;
            this.NewPath = newPath;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public ConfigNodePropertyString Id { get; set; }

        /// <summary>
        /// Gets or Sets CompatPath
        /// </summary>
        [DataMember(Name="compatPath", EmitDefaultValue=false)]
        public ConfigNodePropertyString CompatPath { get; set; }

        /// <summary>
        /// Gets or Sets NewPath
        /// </summary>
        [DataMember(Name="newPath", EmitDefaultValue=false)]
        public ConfigNodePropertyString NewPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteCompatrouterImplRoutingConfigProperties {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompatPath: ").Append(CompatPath).Append("\n");
            sb.Append("  NewPath: ").Append(NewPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeGraniteCompatrouterImplRoutingConfigProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteCompatrouterImplRoutingConfigProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeGraniteCompatrouterImplRoutingConfigProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteCompatrouterImplRoutingConfigProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CompatPath == input.CompatPath ||
                    (this.CompatPath != null &&
                    this.CompatPath.Equals(input.CompatPath))
                ) && 
                (
                    this.NewPath == input.NewPath ||
                    (this.NewPath != null &&
                    this.NewPath.Equals(input.NewPath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CompatPath != null)
                    hashCode = hashCode * 59 + this.CompatPath.GetHashCode();
                if (this.NewPath != null)
                    hashCode = hashCode * 59 + this.NewPath.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
