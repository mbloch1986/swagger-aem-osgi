/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties() {
    init();
}

OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::~OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties() {
    this->cleanup();
}

void
OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::init() {
    pool_size = new OAIConfigNodePropertyInteger();
    m_pool_size_isSet = false;
    max_pool_size = new OAIConfigNodePropertyInteger();
    m_max_pool_size_isSet = false;
    queue_size = new OAIConfigNodePropertyInteger();
    m_queue_size_isSet = false;
    keep_alive_time = new OAIConfigNodePropertyInteger();
    m_keep_alive_time_isSet = false;
}

void
OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::cleanup() {
    if(pool_size != nullptr) { 
        delete pool_size;
    }
    if(max_pool_size != nullptr) { 
        delete max_pool_size;
    }
    if(queue_size != nullptr) { 
        delete queue_size;
    }
    if(keep_alive_time != nullptr) { 
        delete keep_alive_time;
    }
}

OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties*
OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&pool_size, pJson["poolSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&max_pool_size, pJson["maxPoolSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&queue_size, pJson["queueSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&keep_alive_time, pJson["keepAliveTime"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::asJsonObject() {
    QJsonObject obj;
    if((pool_size != nullptr) && (pool_size->isSet())){
        toJsonValue(QString("poolSize"), pool_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((max_pool_size != nullptr) && (max_pool_size->isSet())){
        toJsonValue(QString("maxPoolSize"), max_pool_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((queue_size != nullptr) && (queue_size->isSet())){
        toJsonValue(QString("queueSize"), queue_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((keep_alive_time != nullptr) && (keep_alive_time->isSet())){
        toJsonValue(QString("keepAliveTime"), keep_alive_time, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::getPoolSize() {
    return pool_size;
}
void
OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::setPoolSize(OAIConfigNodePropertyInteger* pool_size) {
    this->pool_size = pool_size;
    this->m_pool_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::getMaxPoolSize() {
    return max_pool_size;
}
void
OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::setMaxPoolSize(OAIConfigNodePropertyInteger* max_pool_size) {
    this->max_pool_size = max_pool_size;
    this->m_max_pool_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::getQueueSize() {
    return queue_size;
}
void
OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::setQueueSize(OAIConfigNodePropertyInteger* queue_size) {
    this->queue_size = queue_size;
    this->m_queue_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::getKeepAliveTime() {
    return keep_alive_time;
}
void
OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::setKeepAliveTime(OAIConfigNodePropertyInteger* keep_alive_time) {
    this->keep_alive_time = keep_alive_time;
    this->m_keep_alive_time_isSet = true;
}


bool
OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(pool_size != nullptr && pool_size->isSet()){ isObjectUpdated = true; break;}
        if(max_pool_size != nullptr && max_pool_size->isSet()){ isObjectUpdated = true; break;}
        if(queue_size != nullptr && queue_size->isSet()){ isObjectUpdated = true; break;}
        if(keep_alive_time != nullptr && keep_alive_time->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

