/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingDatasourceDataSourceFactoryProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::OAIOrgApacheSlingDatasourceDataSourceFactoryProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::OAIOrgApacheSlingDatasourceDataSourceFactoryProperties() {
    init();
}

OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::~OAIOrgApacheSlingDatasourceDataSourceFactoryProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::init() {
    datasource_name = new OAIConfigNodePropertyString();
    m_datasource_name_isSet = false;
    datasource_svc_prop_name = new OAIConfigNodePropertyString();
    m_datasource_svc_prop_name_isSet = false;
    driver_class_name = new OAIConfigNodePropertyString();
    m_driver_class_name_isSet = false;
    url = new OAIConfigNodePropertyString();
    m_url_isSet = false;
    username = new OAIConfigNodePropertyString();
    m_username_isSet = false;
    password = new OAIConfigNodePropertyString();
    m_password_isSet = false;
    default_auto_commit = new OAIConfigNodePropertyDropDown();
    m_default_auto_commit_isSet = false;
    default_read_only = new OAIConfigNodePropertyDropDown();
    m_default_read_only_isSet = false;
    default_transaction_isolation = new OAIConfigNodePropertyDropDown();
    m_default_transaction_isolation_isSet = false;
    default_catalog = new OAIConfigNodePropertyString();
    m_default_catalog_isSet = false;
    max_active = new OAIConfigNodePropertyInteger();
    m_max_active_isSet = false;
    max_idle = new OAIConfigNodePropertyInteger();
    m_max_idle_isSet = false;
    min_idle = new OAIConfigNodePropertyInteger();
    m_min_idle_isSet = false;
    initial_size = new OAIConfigNodePropertyInteger();
    m_initial_size_isSet = false;
    max_wait = new OAIConfigNodePropertyInteger();
    m_max_wait_isSet = false;
    max_age = new OAIConfigNodePropertyInteger();
    m_max_age_isSet = false;
    test_on_borrow = new OAIConfigNodePropertyBoolean();
    m_test_on_borrow_isSet = false;
    test_on_return = new OAIConfigNodePropertyBoolean();
    m_test_on_return_isSet = false;
    test_while_idle = new OAIConfigNodePropertyBoolean();
    m_test_while_idle_isSet = false;
    validation_query = new OAIConfigNodePropertyString();
    m_validation_query_isSet = false;
    validation_query_timeout = new OAIConfigNodePropertyInteger();
    m_validation_query_timeout_isSet = false;
    time_between_eviction_runs_millis = new OAIConfigNodePropertyInteger();
    m_time_between_eviction_runs_millis_isSet = false;
    min_evictable_idle_time_millis = new OAIConfigNodePropertyInteger();
    m_min_evictable_idle_time_millis_isSet = false;
    connection_properties = new OAIConfigNodePropertyString();
    m_connection_properties_isSet = false;
    init_sql = new OAIConfigNodePropertyString();
    m_init_sql_isSet = false;
    jdbc_interceptors = new OAIConfigNodePropertyString();
    m_jdbc_interceptors_isSet = false;
    validation_interval = new OAIConfigNodePropertyInteger();
    m_validation_interval_isSet = false;
    log_validation_errors = new OAIConfigNodePropertyBoolean();
    m_log_validation_errors_isSet = false;
    datasource_svc_properties = new OAIConfigNodePropertyArray();
    m_datasource_svc_properties_isSet = false;
}

void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::cleanup() {
    if(datasource_name != nullptr) { 
        delete datasource_name;
    }
    if(datasource_svc_prop_name != nullptr) { 
        delete datasource_svc_prop_name;
    }
    if(driver_class_name != nullptr) { 
        delete driver_class_name;
    }
    if(url != nullptr) { 
        delete url;
    }
    if(username != nullptr) { 
        delete username;
    }
    if(password != nullptr) { 
        delete password;
    }
    if(default_auto_commit != nullptr) { 
        delete default_auto_commit;
    }
    if(default_read_only != nullptr) { 
        delete default_read_only;
    }
    if(default_transaction_isolation != nullptr) { 
        delete default_transaction_isolation;
    }
    if(default_catalog != nullptr) { 
        delete default_catalog;
    }
    if(max_active != nullptr) { 
        delete max_active;
    }
    if(max_idle != nullptr) { 
        delete max_idle;
    }
    if(min_idle != nullptr) { 
        delete min_idle;
    }
    if(initial_size != nullptr) { 
        delete initial_size;
    }
    if(max_wait != nullptr) { 
        delete max_wait;
    }
    if(max_age != nullptr) { 
        delete max_age;
    }
    if(test_on_borrow != nullptr) { 
        delete test_on_borrow;
    }
    if(test_on_return != nullptr) { 
        delete test_on_return;
    }
    if(test_while_idle != nullptr) { 
        delete test_while_idle;
    }
    if(validation_query != nullptr) { 
        delete validation_query;
    }
    if(validation_query_timeout != nullptr) { 
        delete validation_query_timeout;
    }
    if(time_between_eviction_runs_millis != nullptr) { 
        delete time_between_eviction_runs_millis;
    }
    if(min_evictable_idle_time_millis != nullptr) { 
        delete min_evictable_idle_time_millis;
    }
    if(connection_properties != nullptr) { 
        delete connection_properties;
    }
    if(init_sql != nullptr) { 
        delete init_sql;
    }
    if(jdbc_interceptors != nullptr) { 
        delete jdbc_interceptors;
    }
    if(validation_interval != nullptr) { 
        delete validation_interval;
    }
    if(log_validation_errors != nullptr) { 
        delete log_validation_errors;
    }
    if(datasource_svc_properties != nullptr) { 
        delete datasource_svc_properties;
    }
}

OAIOrgApacheSlingDatasourceDataSourceFactoryProperties*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&datasource_name, pJson["datasource.name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&datasource_svc_prop_name, pJson["datasource.svc.prop.name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&driver_class_name, pJson["driverClassName"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&url, pJson["url"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&username, pJson["username"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&password, pJson["password"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&default_auto_commit, pJson["defaultAutoCommit"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&default_read_only, pJson["defaultReadOnly"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&default_transaction_isolation, pJson["defaultTransactionIsolation"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&default_catalog, pJson["defaultCatalog"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&max_active, pJson["maxActive"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&max_idle, pJson["maxIdle"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&min_idle, pJson["minIdle"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&initial_size, pJson["initialSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&max_wait, pJson["maxWait"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&max_age, pJson["maxAge"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&test_on_borrow, pJson["testOnBorrow"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&test_on_return, pJson["testOnReturn"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&test_while_idle, pJson["testWhileIdle"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&validation_query, pJson["validationQuery"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&validation_query_timeout, pJson["validationQueryTimeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&time_between_eviction_runs_millis, pJson["timeBetweenEvictionRunsMillis"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&min_evictable_idle_time_millis, pJson["minEvictableIdleTimeMillis"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&connection_properties, pJson["connectionProperties"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&init_sql, pJson["initSQL"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&jdbc_interceptors, pJson["jdbcInterceptors"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&validation_interval, pJson["validationInterval"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&log_validation_errors, pJson["logValidationErrors"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&datasource_svc_properties, pJson["datasource.svc.properties"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::asJsonObject() {
    QJsonObject obj;
    if((datasource_name != nullptr) && (datasource_name->isSet())){
        toJsonValue(QString("datasource.name"), datasource_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((datasource_svc_prop_name != nullptr) && (datasource_svc_prop_name->isSet())){
        toJsonValue(QString("datasource.svc.prop.name"), datasource_svc_prop_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((driver_class_name != nullptr) && (driver_class_name->isSet())){
        toJsonValue(QString("driverClassName"), driver_class_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((url != nullptr) && (url->isSet())){
        toJsonValue(QString("url"), url, obj, QString("OAIConfigNodePropertyString"));
    }
    if((username != nullptr) && (username->isSet())){
        toJsonValue(QString("username"), username, obj, QString("OAIConfigNodePropertyString"));
    }
    if((password != nullptr) && (password->isSet())){
        toJsonValue(QString("password"), password, obj, QString("OAIConfigNodePropertyString"));
    }
    if((default_auto_commit != nullptr) && (default_auto_commit->isSet())){
        toJsonValue(QString("defaultAutoCommit"), default_auto_commit, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((default_read_only != nullptr) && (default_read_only->isSet())){
        toJsonValue(QString("defaultReadOnly"), default_read_only, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((default_transaction_isolation != nullptr) && (default_transaction_isolation->isSet())){
        toJsonValue(QString("defaultTransactionIsolation"), default_transaction_isolation, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((default_catalog != nullptr) && (default_catalog->isSet())){
        toJsonValue(QString("defaultCatalog"), default_catalog, obj, QString("OAIConfigNodePropertyString"));
    }
    if((max_active != nullptr) && (max_active->isSet())){
        toJsonValue(QString("maxActive"), max_active, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((max_idle != nullptr) && (max_idle->isSet())){
        toJsonValue(QString("maxIdle"), max_idle, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((min_idle != nullptr) && (min_idle->isSet())){
        toJsonValue(QString("minIdle"), min_idle, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((initial_size != nullptr) && (initial_size->isSet())){
        toJsonValue(QString("initialSize"), initial_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((max_wait != nullptr) && (max_wait->isSet())){
        toJsonValue(QString("maxWait"), max_wait, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((max_age != nullptr) && (max_age->isSet())){
        toJsonValue(QString("maxAge"), max_age, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((test_on_borrow != nullptr) && (test_on_borrow->isSet())){
        toJsonValue(QString("testOnBorrow"), test_on_borrow, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((test_on_return != nullptr) && (test_on_return->isSet())){
        toJsonValue(QString("testOnReturn"), test_on_return, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((test_while_idle != nullptr) && (test_while_idle->isSet())){
        toJsonValue(QString("testWhileIdle"), test_while_idle, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((validation_query != nullptr) && (validation_query->isSet())){
        toJsonValue(QString("validationQuery"), validation_query, obj, QString("OAIConfigNodePropertyString"));
    }
    if((validation_query_timeout != nullptr) && (validation_query_timeout->isSet())){
        toJsonValue(QString("validationQueryTimeout"), validation_query_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((time_between_eviction_runs_millis != nullptr) && (time_between_eviction_runs_millis->isSet())){
        toJsonValue(QString("timeBetweenEvictionRunsMillis"), time_between_eviction_runs_millis, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((min_evictable_idle_time_millis != nullptr) && (min_evictable_idle_time_millis->isSet())){
        toJsonValue(QString("minEvictableIdleTimeMillis"), min_evictable_idle_time_millis, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((connection_properties != nullptr) && (connection_properties->isSet())){
        toJsonValue(QString("connectionProperties"), connection_properties, obj, QString("OAIConfigNodePropertyString"));
    }
    if((init_sql != nullptr) && (init_sql->isSet())){
        toJsonValue(QString("initSQL"), init_sql, obj, QString("OAIConfigNodePropertyString"));
    }
    if((jdbc_interceptors != nullptr) && (jdbc_interceptors->isSet())){
        toJsonValue(QString("jdbcInterceptors"), jdbc_interceptors, obj, QString("OAIConfigNodePropertyString"));
    }
    if((validation_interval != nullptr) && (validation_interval->isSet())){
        toJsonValue(QString("validationInterval"), validation_interval, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((log_validation_errors != nullptr) && (log_validation_errors->isSet())){
        toJsonValue(QString("logValidationErrors"), log_validation_errors, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((datasource_svc_properties != nullptr) && (datasource_svc_properties->isSet())){
        toJsonValue(QString("datasource.svc.properties"), datasource_svc_properties, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getDatasourceName() {
    return datasource_name;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setDatasourceName(OAIConfigNodePropertyString* datasource_name) {
    this->datasource_name = datasource_name;
    this->m_datasource_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getDatasourceSvcPropName() {
    return datasource_svc_prop_name;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setDatasourceSvcPropName(OAIConfigNodePropertyString* datasource_svc_prop_name) {
    this->datasource_svc_prop_name = datasource_svc_prop_name;
    this->m_datasource_svc_prop_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getDriverClassName() {
    return driver_class_name;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setDriverClassName(OAIConfigNodePropertyString* driver_class_name) {
    this->driver_class_name = driver_class_name;
    this->m_driver_class_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getUrl() {
    return url;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setUrl(OAIConfigNodePropertyString* url) {
    this->url = url;
    this->m_url_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getUsername() {
    return username;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setUsername(OAIConfigNodePropertyString* username) {
    this->username = username;
    this->m_username_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getPassword() {
    return password;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setPassword(OAIConfigNodePropertyString* password) {
    this->password = password;
    this->m_password_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getDefaultAutoCommit() {
    return default_auto_commit;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setDefaultAutoCommit(OAIConfigNodePropertyDropDown* default_auto_commit) {
    this->default_auto_commit = default_auto_commit;
    this->m_default_auto_commit_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getDefaultReadOnly() {
    return default_read_only;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setDefaultReadOnly(OAIConfigNodePropertyDropDown* default_read_only) {
    this->default_read_only = default_read_only;
    this->m_default_read_only_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getDefaultTransactionIsolation() {
    return default_transaction_isolation;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setDefaultTransactionIsolation(OAIConfigNodePropertyDropDown* default_transaction_isolation) {
    this->default_transaction_isolation = default_transaction_isolation;
    this->m_default_transaction_isolation_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getDefaultCatalog() {
    return default_catalog;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setDefaultCatalog(OAIConfigNodePropertyString* default_catalog) {
    this->default_catalog = default_catalog;
    this->m_default_catalog_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getMaxActive() {
    return max_active;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setMaxActive(OAIConfigNodePropertyInteger* max_active) {
    this->max_active = max_active;
    this->m_max_active_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getMaxIdle() {
    return max_idle;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setMaxIdle(OAIConfigNodePropertyInteger* max_idle) {
    this->max_idle = max_idle;
    this->m_max_idle_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getMinIdle() {
    return min_idle;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setMinIdle(OAIConfigNodePropertyInteger* min_idle) {
    this->min_idle = min_idle;
    this->m_min_idle_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getInitialSize() {
    return initial_size;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setInitialSize(OAIConfigNodePropertyInteger* initial_size) {
    this->initial_size = initial_size;
    this->m_initial_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getMaxWait() {
    return max_wait;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setMaxWait(OAIConfigNodePropertyInteger* max_wait) {
    this->max_wait = max_wait;
    this->m_max_wait_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getMaxAge() {
    return max_age;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setMaxAge(OAIConfigNodePropertyInteger* max_age) {
    this->max_age = max_age;
    this->m_max_age_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getTestOnBorrow() {
    return test_on_borrow;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setTestOnBorrow(OAIConfigNodePropertyBoolean* test_on_borrow) {
    this->test_on_borrow = test_on_borrow;
    this->m_test_on_borrow_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getTestOnReturn() {
    return test_on_return;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setTestOnReturn(OAIConfigNodePropertyBoolean* test_on_return) {
    this->test_on_return = test_on_return;
    this->m_test_on_return_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getTestWhileIdle() {
    return test_while_idle;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setTestWhileIdle(OAIConfigNodePropertyBoolean* test_while_idle) {
    this->test_while_idle = test_while_idle;
    this->m_test_while_idle_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getValidationQuery() {
    return validation_query;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setValidationQuery(OAIConfigNodePropertyString* validation_query) {
    this->validation_query = validation_query;
    this->m_validation_query_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getValidationQueryTimeout() {
    return validation_query_timeout;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setValidationQueryTimeout(OAIConfigNodePropertyInteger* validation_query_timeout) {
    this->validation_query_timeout = validation_query_timeout;
    this->m_validation_query_timeout_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getTimeBetweenEvictionRunsMillis() {
    return time_between_eviction_runs_millis;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setTimeBetweenEvictionRunsMillis(OAIConfigNodePropertyInteger* time_between_eviction_runs_millis) {
    this->time_between_eviction_runs_millis = time_between_eviction_runs_millis;
    this->m_time_between_eviction_runs_millis_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getMinEvictableIdleTimeMillis() {
    return min_evictable_idle_time_millis;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setMinEvictableIdleTimeMillis(OAIConfigNodePropertyInteger* min_evictable_idle_time_millis) {
    this->min_evictable_idle_time_millis = min_evictable_idle_time_millis;
    this->m_min_evictable_idle_time_millis_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getConnectionProperties() {
    return connection_properties;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setConnectionProperties(OAIConfigNodePropertyString* connection_properties) {
    this->connection_properties = connection_properties;
    this->m_connection_properties_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getInitSql() {
    return init_sql;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setInitSql(OAIConfigNodePropertyString* init_sql) {
    this->init_sql = init_sql;
    this->m_init_sql_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getJdbcInterceptors() {
    return jdbc_interceptors;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setJdbcInterceptors(OAIConfigNodePropertyString* jdbc_interceptors) {
    this->jdbc_interceptors = jdbc_interceptors;
    this->m_jdbc_interceptors_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getValidationInterval() {
    return validation_interval;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setValidationInterval(OAIConfigNodePropertyInteger* validation_interval) {
    this->validation_interval = validation_interval;
    this->m_validation_interval_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getLogValidationErrors() {
    return log_validation_errors;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setLogValidationErrors(OAIConfigNodePropertyBoolean* log_validation_errors) {
    this->log_validation_errors = log_validation_errors;
    this->m_log_validation_errors_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::getDatasourceSvcProperties() {
    return datasource_svc_properties;
}
void
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::setDatasourceSvcProperties(OAIConfigNodePropertyArray* datasource_svc_properties) {
    this->datasource_svc_properties = datasource_svc_properties;
    this->m_datasource_svc_properties_isSet = true;
}


bool
OAIOrgApacheSlingDatasourceDataSourceFactoryProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(datasource_name != nullptr && datasource_name->isSet()){ isObjectUpdated = true; break;}
        if(datasource_svc_prop_name != nullptr && datasource_svc_prop_name->isSet()){ isObjectUpdated = true; break;}
        if(driver_class_name != nullptr && driver_class_name->isSet()){ isObjectUpdated = true; break;}
        if(url != nullptr && url->isSet()){ isObjectUpdated = true; break;}
        if(username != nullptr && username->isSet()){ isObjectUpdated = true; break;}
        if(password != nullptr && password->isSet()){ isObjectUpdated = true; break;}
        if(default_auto_commit != nullptr && default_auto_commit->isSet()){ isObjectUpdated = true; break;}
        if(default_read_only != nullptr && default_read_only->isSet()){ isObjectUpdated = true; break;}
        if(default_transaction_isolation != nullptr && default_transaction_isolation->isSet()){ isObjectUpdated = true; break;}
        if(default_catalog != nullptr && default_catalog->isSet()){ isObjectUpdated = true; break;}
        if(max_active != nullptr && max_active->isSet()){ isObjectUpdated = true; break;}
        if(max_idle != nullptr && max_idle->isSet()){ isObjectUpdated = true; break;}
        if(min_idle != nullptr && min_idle->isSet()){ isObjectUpdated = true; break;}
        if(initial_size != nullptr && initial_size->isSet()){ isObjectUpdated = true; break;}
        if(max_wait != nullptr && max_wait->isSet()){ isObjectUpdated = true; break;}
        if(max_age != nullptr && max_age->isSet()){ isObjectUpdated = true; break;}
        if(test_on_borrow != nullptr && test_on_borrow->isSet()){ isObjectUpdated = true; break;}
        if(test_on_return != nullptr && test_on_return->isSet()){ isObjectUpdated = true; break;}
        if(test_while_idle != nullptr && test_while_idle->isSet()){ isObjectUpdated = true; break;}
        if(validation_query != nullptr && validation_query->isSet()){ isObjectUpdated = true; break;}
        if(validation_query_timeout != nullptr && validation_query_timeout->isSet()){ isObjectUpdated = true; break;}
        if(time_between_eviction_runs_millis != nullptr && time_between_eviction_runs_millis->isSet()){ isObjectUpdated = true; break;}
        if(min_evictable_idle_time_millis != nullptr && min_evictable_idle_time_millis->isSet()){ isObjectUpdated = true; break;}
        if(connection_properties != nullptr && connection_properties->isSet()){ isObjectUpdated = true; break;}
        if(init_sql != nullptr && init_sql->isSet()){ isObjectUpdated = true; break;}
        if(jdbc_interceptors != nullptr && jdbc_interceptors->isSet()){ isObjectUpdated = true; break;}
        if(validation_interval != nullptr && validation_interval->isSet()){ isObjectUpdated = true; break;}
        if(log_validation_errors != nullptr && log_validation_errors->isSet()){ isObjectUpdated = true; break;}
        if(datasource_svc_properties != nullptr && datasource_svc_properties->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

