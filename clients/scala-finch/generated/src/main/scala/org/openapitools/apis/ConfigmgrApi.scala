package org.openapitools.apis

import java.io._
import org.openapitools._
import org.openapitools.models._
import org.openapitools.models.AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo
import org.openapitools.models.AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo
import org.openapitools.models.AnalyticsComponentQueryCacheServiceInfo
import org.openapitools.models.ApacheSlingHealthCheckResultHTMLSerializerInfo
import java.math.BigDecimal
import org.openapitools.models.ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo
import org.openapitools.models.ComAdobeAemTransactionCoreImplTransactionRecorderInfo
import org.openapitools.models.ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo
import org.openapitools.models.ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo
import org.openapitools.models.ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo
import org.openapitools.models.ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo
import org.openapitools.models.ComAdobeCqAccountApiAccountManagementServiceInfo
import org.openapitools.models.ComAdobeCqAccountImplAccountManagementServletInfo
import org.openapitools.models.ComAdobeCqAddressImplLocationLocationListServletInfo
import org.openapitools.models.ComAdobeCqAuditPurgeDamInfo
import org.openapitools.models.ComAdobeCqAuditPurgePagesInfo
import org.openapitools.models.ComAdobeCqAuditPurgeReplicationInfo
import org.openapitools.models.ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo
import org.openapitools.models.ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo
import org.openapitools.models.ComAdobeCqCdnRewriterImplCDNRewriterInfo
import org.openapitools.models.ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo
import org.openapitools.models.ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo
import org.openapitools.models.ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo
import org.openapitools.models.ComAdobeCqCommerceImplAssetStaticImageHandlerInfo
import org.openapitools.models.ComAdobeCqCommerceImplAssetVideoHandlerInfo
import org.openapitools.models.ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo
import org.openapitools.models.ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo
import org.openapitools.models.ComAdobeCqCommercePimImplPageEventListenerInfo
import org.openapitools.models.ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo
import org.openapitools.models.ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo
import org.openapitools.models.ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo
import org.openapitools.models.ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo
import org.openapitools.models.ComAdobeCqDamCfmImplComponentComponentConfigImplInfo
import org.openapitools.models.ComAdobeCqDamCfmImplConfFeatureConfigImplInfo
import org.openapitools.models.ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo
import org.openapitools.models.ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo
import org.openapitools.models.ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo
import org.openapitools.models.ComAdobeCqDamDmProcessImagePTiffManagerImplInfo
import org.openapitools.models.ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo
import org.openapitools.models.ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo
import org.openapitools.models.ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo
import org.openapitools.models.ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo
import org.openapitools.models.ComAdobeCqDamS7imagingImplIsImageServerComponentInfo
import org.openapitools.models.ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo
import org.openapitools.models.ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo
import org.openapitools.models.ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo
import org.openapitools.models.ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo
import org.openapitools.models.ComAdobeCqDeserfwImplDeserializationFirewallImplInfo
import org.openapitools.models.ComAdobeCqDtmImplServiceDTMWebServiceImplInfo
import org.openapitools.models.ComAdobeCqDtmImplServletsDTMDeployHookServletInfo
import org.openapitools.models.ComAdobeCqDtmReactorImplServiceWebServiceImplInfo
import org.openapitools.models.ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo
import org.openapitools.models.ComAdobeCqHcContentPackagesHealthCheckInfo
import org.openapitools.models.ComAdobeCqHistoryImplHistoryRequestFilterInfo
import org.openapitools.models.ComAdobeCqHistoryImplHistoryServiceImplInfo
import org.openapitools.models.ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo
import org.openapitools.models.ComAdobeCqProjectsImplServletProjectImageServletInfo
import org.openapitools.models.ComAdobeCqProjectsPurgeSchedulerInfo
import org.openapitools.models.ComAdobeCqScheduledExporterImplScheduledExporterImplInfo
import org.openapitools.models.ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo
import org.openapitools.models.ComAdobeCqScreensDeviceImplDeviceServiceInfo
import org.openapitools.models.ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo
import org.openapitools.models.ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo
import org.openapitools.models.ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo
import org.openapitools.models.ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo
import org.openapitools.models.ComAdobeCqScreensImplScreensChannelPostProcessorInfo
import org.openapitools.models.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo
import org.openapitools.models.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo
import org.openapitools.models.ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo
import org.openapitools.models.ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo
import org.openapitools.models.ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo
import org.openapitools.models.ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo
import org.openapitools.models.ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo
import org.openapitools.models.ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo
import org.openapitools.models.ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo
import org.openapitools.models.ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo
import org.openapitools.models.ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo
import org.openapitools.models.ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo
import org.openapitools.models.ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo
import org.openapitools.models.ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo
import org.openapitools.models.ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo
import org.openapitools.models.ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo
import org.openapitools.models.ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo
import org.openapitools.models.ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo
import org.openapitools.models.ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo
import org.openapitools.models.ComAdobeCqSocialCalendarServletsTimeZoneServletInfo
import org.openapitools.models.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo
import org.openapitools.models.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo
import org.openapitools.models.ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo
import org.openapitools.models.ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo
import org.openapitools.models.ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo
import org.openapitools.models.ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo
import org.openapitools.models.ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo
import org.openapitools.models.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo
import org.openapitools.models.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo
import org.openapitools.models.ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo
import org.openapitools.models.ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo
import org.openapitools.models.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo
import org.openapitools.models.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo
import org.openapitools.models.ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo
import org.openapitools.models.ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo
import org.openapitools.models.ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo
import org.openapitools.models.ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo
import org.openapitools.models.ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo
import org.openapitools.models.ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo
import org.openapitools.models.ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo
import org.openapitools.models.ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo
import org.openapitools.models.ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo
import org.openapitools.models.ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo
import org.openapitools.models.ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo
import org.openapitools.models.ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo
import org.openapitools.models.ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo
import org.openapitools.models.ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo
import org.openapitools.models.ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo
import org.openapitools.models.ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo
import org.openapitools.models.ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo
import org.openapitools.models.ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo
import org.openapitools.models.ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo
import org.openapitools.models.ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo
import org.openapitools.models.ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo
import org.openapitools.models.ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo
import org.openapitools.models.ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo
import org.openapitools.models.ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo
import org.openapitools.models.ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo
import org.openapitools.models.ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo
import org.openapitools.models.ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo
import org.openapitools.models.ComAdobeCqSocialGroupImplGroupServiceImplInfo
import org.openapitools.models.ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo
import org.openapitools.models.ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo
import org.openapitools.models.ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo
import org.openapitools.models.ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo
import org.openapitools.models.ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo
import org.openapitools.models.ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo
import org.openapitools.models.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo
import org.openapitools.models.ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo
import org.openapitools.models.ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo
import org.openapitools.models.ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo
import org.openapitools.models.ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo
import org.openapitools.models.ComAdobeCqSocialNotificationsImplMentionsRouterInfo
import org.openapitools.models.ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo
import org.openapitools.models.ComAdobeCqSocialNotificationsImplNotificationsRouterInfo
import org.openapitools.models.ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo
import org.openapitools.models.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo
import org.openapitools.models.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo
import org.openapitools.models.ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo
import org.openapitools.models.ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo
import org.openapitools.models.ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo
import org.openapitools.models.ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo
import org.openapitools.models.ComAdobeCqSocialScoringImplScoringEventListenerInfo
import org.openapitools.models.ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo
import org.openapitools.models.ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo
import org.openapitools.models.ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo
import org.openapitools.models.ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo
import org.openapitools.models.ComAdobeCqSocialSrpImplSocialSolrConnectorInfo
import org.openapitools.models.ComAdobeCqSocialSyncImplDiffChangesObserverInfo
import org.openapitools.models.ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo
import org.openapitools.models.ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo
import org.openapitools.models.ComAdobeCqSocialSyncImplUserSyncListenerImplInfo
import org.openapitools.models.ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo
import org.openapitools.models.ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo
import org.openapitools.models.ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo
import org.openapitools.models.ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo
import org.openapitools.models.ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo
import org.openapitools.models.ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo
import org.openapitools.models.ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo
import org.openapitools.models.ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo
import org.openapitools.models.ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo
import org.openapitools.models.ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo
import org.openapitools.models.ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo
import org.openapitools.models.ComAdobeCqSocialUserImplTransportHttpToPublisherInfo
import org.openapitools.models.ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo
import org.openapitools.models.ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo
import org.openapitools.models.ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo
import org.openapitools.models.ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo
import org.openapitools.models.ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo
import org.openapitools.models.ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo
import org.openapitools.models.ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo
import org.openapitools.models.ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo
import org.openapitools.models.ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo
import org.openapitools.models.ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo
import org.openapitools.models.ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo
import org.openapitools.models.ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo
import org.openapitools.models.ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo
import org.openapitools.models.ComAdobeFormsCommonServiceImplDefaultDataProviderInfo
import org.openapitools.models.ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo
import org.openapitools.models.ComAdobeFormsCommonServletTempCleanUpTaskInfo
import org.openapitools.models.ComAdobeGraniteAcpPlatformPlatformServletInfo
import org.openapitools.models.ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo
import org.openapitools.models.ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo
import org.openapitools.models.ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo
import org.openapitools.models.ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo
import org.openapitools.models.ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo
import org.openapitools.models.ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo
import org.openapitools.models.ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo
import org.openapitools.models.ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo
import org.openapitools.models.ComAdobeGraniteAuthImsImplIMSProviderImplInfo
import org.openapitools.models.ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo
import org.openapitools.models.ComAdobeGraniteAuthImsInfo
import org.openapitools.models.ComAdobeGraniteAuthOauthAccesstokenProviderInfo
import org.openapitools.models.ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo
import org.openapitools.models.ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo
import org.openapitools.models.ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo
import org.openapitools.models.ComAdobeGraniteAuthOauthImplGithubProviderImplInfo
import org.openapitools.models.ComAdobeGraniteAuthOauthImplGraniteProviderInfo
import org.openapitools.models.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo
import org.openapitools.models.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo
import org.openapitools.models.ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo
import org.openapitools.models.ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo
import org.openapitools.models.ComAdobeGraniteAuthOauthProviderInfo
import org.openapitools.models.ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo
import org.openapitools.models.ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo
import org.openapitools.models.ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo
import org.openapitools.models.ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo
import org.openapitools.models.ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo
import org.openapitools.models.ComAdobeGraniteCompatrouterImplRoutingConfigInfo
import org.openapitools.models.ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo
import org.openapitools.models.ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo
import org.openapitools.models.ComAdobeGraniteContexthubImplContextHubImplInfo
import org.openapitools.models.ComAdobeGraniteCorsImplCORSPolicyImplInfo
import org.openapitools.models.ComAdobeGraniteCsrfImplCSRFFilterInfo
import org.openapitools.models.ComAdobeGraniteCsrfImplCSRFServletInfo
import org.openapitools.models.ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo
import org.openapitools.models.ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo
import org.openapitools.models.ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo
import org.openapitools.models.ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo
import org.openapitools.models.ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo
import org.openapitools.models.ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo
import org.openapitools.models.ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo
import org.openapitools.models.ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo
import org.openapitools.models.ComAdobeGraniteFragsImplRandomFeatureInfo
import org.openapitools.models.ComAdobeGraniteHttpcacheFileFileCacheStoreInfo
import org.openapitools.models.ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo
import org.openapitools.models.ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo
import org.openapitools.models.ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo
import org.openapitools.models.ComAdobeGraniteInfocollectorInfoCollectorInfo
import org.openapitools.models.ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo
import org.openapitools.models.ComAdobeGraniteLicenseImplLicenseCheckFilterInfo
import org.openapitools.models.ComAdobeGraniteLoggingImplLogAnalyserImplInfo
import org.openapitools.models.ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo
import org.openapitools.models.ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo
import org.openapitools.models.ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo
import org.openapitools.models.ComAdobeGraniteMonitoringImplScriptConfigImplInfo
import org.openapitools.models.ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo
import org.openapitools.models.ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo
import org.openapitools.models.ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo
import org.openapitools.models.ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo
import org.openapitools.models.ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo
import org.openapitools.models.ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo
import org.openapitools.models.ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo
import org.openapitools.models.ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo
import org.openapitools.models.ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo
import org.openapitools.models.ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo
import org.openapitools.models.ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo
import org.openapitools.models.ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo
import org.openapitools.models.ComAdobeGraniteOptoutImplOptOutServiceImplInfo
import org.openapitools.models.ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo
import org.openapitools.models.ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo
import org.openapitools.models.ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo
import org.openapitools.models.ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo
import org.openapitools.models.ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo
import org.openapitools.models.ComAdobeGraniteRepositoryImplCommitStatsConfigInfo
import org.openapitools.models.ComAdobeGraniteRepositoryServiceUserConfigurationInfo
import org.openapitools.models.ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo
import org.openapitools.models.ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo
import org.openapitools.models.ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo
import org.openapitools.models.ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo
import org.openapitools.models.ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo
import org.openapitools.models.ComAdobeGraniteRestImplServletDefaultGETServletInfo
import org.openapitools.models.ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo
import org.openapitools.models.ComAdobeGraniteSecurityUserUserPropertiesServiceInfo
import org.openapitools.models.ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo
import org.openapitools.models.ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo
import org.openapitools.models.ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo
import org.openapitools.models.ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo
import org.openapitools.models.ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo
import org.openapitools.models.ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo
import org.openapitools.models.ComAdobeGraniteThreaddumpThreadDumpCollectorInfo
import org.openapitools.models.ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo
import org.openapitools.models.ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo
import org.openapitools.models.ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo
import org.openapitools.models.ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo
import org.openapitools.models.ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo
import org.openapitools.models.ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo
import org.openapitools.models.ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo
import org.openapitools.models.ComAdobeGraniteWorkflowCoreJobJobHandlerInfo
import org.openapitools.models.ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo
import org.openapitools.models.ComAdobeGraniteWorkflowCorePayloadMapCacheInfo
import org.openapitools.models.ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo
import org.openapitools.models.ComAdobeGraniteWorkflowCoreWorkflowConfigInfo
import org.openapitools.models.ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo
import org.openapitools.models.ComAdobeGraniteWorkflowPurgeSchedulerInfo
import org.openapitools.models.ComAdobeOctopusNcommBootstrapInfo
import org.openapitools.models.ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo
import org.openapitools.models.ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo
import org.openapitools.models.ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo
import org.openapitools.models.ComDayCommonsHttpclientInfo
import org.openapitools.models.ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo
import org.openapitools.models.ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo
import org.openapitools.models.ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo
import org.openapitools.models.ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo
import org.openapitools.models.ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo
import org.openapitools.models.ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo
import org.openapitools.models.ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo
import org.openapitools.models.ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo
import org.openapitools.models.ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo
import org.openapitools.models.ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo
import org.openapitools.models.ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo
import org.openapitools.models.ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo
import org.openapitools.models.ComDayCqAuthImplCugCugSupportImplInfo
import org.openapitools.models.ComDayCqAuthImplLoginSelectorHandlerInfo
import org.openapitools.models.ComDayCqCommonsImplExternalizerImplInfo
import org.openapitools.models.ComDayCqCommonsServletsRootMappingServletInfo
import org.openapitools.models.ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo
import org.openapitools.models.ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo
import org.openapitools.models.ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo
import org.openapitools.models.ComDayCqContentsyncImplContentSyncManagerImplInfo
import org.openapitools.models.ComDayCqDamCommonsHandlerStandardImageHandlerInfo
import org.openapitools.models.ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo
import org.openapitools.models.ComDayCqDamCommonsUtilImplAssetCacheImplInfo
import org.openapitools.models.ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo
import org.openapitools.models.ComDayCqDamCoreImplAssetMoveListenerInfo
import org.openapitools.models.ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo
import org.openapitools.models.ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo
import org.openapitools.models.ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo
import org.openapitools.models.ComDayCqDamCoreImplDamChangeEventListenerInfo
import org.openapitools.models.ComDayCqDamCoreImplDamEventPurgeServiceInfo
import org.openapitools.models.ComDayCqDamCoreImplDamEventRecorderImplInfo
import org.openapitools.models.ComDayCqDamCoreImplEventDamEventAuditListenerInfo
import org.openapitools.models.ComDayCqDamCoreImplExpiryNotificationJobImplInfo
import org.openapitools.models.ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo
import org.openapitools.models.ComDayCqDamCoreImplGfxCommonsGfxRendererInfo
import org.openapitools.models.ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo
import org.openapitools.models.ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo
import org.openapitools.models.ComDayCqDamCoreImplHandlerJpegHandlerInfo
import org.openapitools.models.ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo
import org.openapitools.models.ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo
import org.openapitools.models.ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo
import org.openapitools.models.ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo
import org.openapitools.models.ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo
import org.openapitools.models.ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo
import org.openapitools.models.ComDayCqDamCoreImplLightboxLightboxServletInfo
import org.openapitools.models.ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo
import org.openapitools.models.ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo
import org.openapitools.models.ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo
import org.openapitools.models.ComDayCqDamCoreImplMissingMetadataNotificationJobInfo
import org.openapitools.models.ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo
import org.openapitools.models.ComDayCqDamCoreImplProcessTextExtractionProcessInfo
import org.openapitools.models.ComDayCqDamCoreImplRenditionMakerImplInfo
import org.openapitools.models.ComDayCqDamCoreImplReportsReportExportServiceInfo
import org.openapitools.models.ComDayCqDamCoreImplReportsReportPurgeServiceInfo
import org.openapitools.models.ComDayCqDamCoreImplServletAssetDownloadServletInfo
import org.openapitools.models.ComDayCqDamCoreImplServletAssetStatusServletInfo
import org.openapitools.models.ComDayCqDamCoreImplServletAssetXMPSearchServletInfo
import org.openapitools.models.ComDayCqDamCoreImplServletBatchMetadataServletInfo
import org.openapitools.models.ComDayCqDamCoreImplServletBinaryProviderServletInfo
import org.openapitools.models.ComDayCqDamCoreImplServletCollectionServletInfo
import org.openapitools.models.ComDayCqDamCoreImplServletCollectionsServletInfo
import org.openapitools.models.ComDayCqDamCoreImplServletCompanionServletInfo
import org.openapitools.models.ComDayCqDamCoreImplServletCreateAssetServletInfo
import org.openapitools.models.ComDayCqDamCoreImplServletDamContentDispositionFilterInfo
import org.openapitools.models.ComDayCqDamCoreImplServletGuidLookupFilterInfo
import org.openapitools.models.ComDayCqDamCoreImplServletHealthCheckServletInfo
import org.openapitools.models.ComDayCqDamCoreImplServletMetadataGetServletInfo
import org.openapitools.models.ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo
import org.openapitools.models.ComDayCqDamCoreImplServletResourceCollectionServletInfo
import org.openapitools.models.ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo
import org.openapitools.models.ComDayCqDamCoreImplUnzipUnzipConfigInfo
import org.openapitools.models.ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo
import org.openapitools.models.ComDayCqDamCoreProcessExtractMetadataProcessInfo
import org.openapitools.models.ComDayCqDamCoreProcessMetadataProcessorProcessInfo
import org.openapitools.models.ComDayCqDamHandlerFfmpegLocatorImplInfo
import org.openapitools.models.ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo
import org.openapitools.models.ComDayCqDamHandlerStandardPdfPdfHandlerInfo
import org.openapitools.models.ComDayCqDamHandlerStandardPsPostScriptHandlerInfo
import org.openapitools.models.ComDayCqDamHandlerStandardPsdPsdHandlerInfo
import org.openapitools.models.ComDayCqDamIdsImplIDSJobProcessorInfo
import org.openapitools.models.ComDayCqDamIdsImplIDSPoolManagerImplInfo
import org.openapitools.models.ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo
import org.openapitools.models.ComDayCqDamInddImplServletSnippetCreationServletInfo
import org.openapitools.models.ComDayCqDamInddProcessINDDMediaExtractProcessInfo
import org.openapitools.models.ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo
import org.openapitools.models.ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo
import org.openapitools.models.ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo
import org.openapitools.models.ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo
import org.openapitools.models.ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo
import org.openapitools.models.ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo
import org.openapitools.models.ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo
import org.openapitools.models.ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo
import org.openapitools.models.ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo
import org.openapitools.models.ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo
import org.openapitools.models.ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo
import org.openapitools.models.ComDayCqDamScene7ImplScene7APIClientImplInfo
import org.openapitools.models.ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo
import org.openapitools.models.ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo
import org.openapitools.models.ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo
import org.openapitools.models.ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo
import org.openapitools.models.ComDayCqDamScene7ImplScene7UploadServiceImplInfo
import org.openapitools.models.ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo
import org.openapitools.models.ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo
import org.openapitools.models.ComDayCqDamVideoImplServletVideoTestServletInfo
import org.openapitools.models.ComDayCqExtwidgetServletsImageSpriteServletInfo
import org.openapitools.models.ComDayCqImageInternalFontFontHelperInfo
import org.openapitools.models.ComDayCqJcrclustersupportClusterStartLevelControllerInfo
import org.openapitools.models.ComDayCqMailerDefaultMailServiceInfo
import org.openapitools.models.ComDayCqMailerImplCqMailingServiceInfo
import org.openapitools.models.ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo
import org.openapitools.models.ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo
import org.openapitools.models.ComDayCqMcmCampaignImplIntegrationConfigImplInfo
import org.openapitools.models.ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo
import org.openapitools.models.ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo
import org.openapitools.models.ComDayCqMcmImplMCMConfigurationInfo
import org.openapitools.models.ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo
import org.openapitools.models.ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo
import org.openapitools.models.ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo
import org.openapitools.models.ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo
import org.openapitools.models.ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo
import org.openapitools.models.ComDayCqNotificationImplNotificationServiceImplInfo
import org.openapitools.models.ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo
import org.openapitools.models.ComDayCqPollingImporterImplManagedPollConfigImplInfo
import org.openapitools.models.ComDayCqPollingImporterImplManagedPollingImporterImplInfo
import org.openapitools.models.ComDayCqPollingImporterImplPollingImporterImplInfo
import org.openapitools.models.ComDayCqReplicationAuditReplicationEventListenerInfo
import org.openapitools.models.ComDayCqReplicationContentStaticContentBuilderInfo
import org.openapitools.models.ComDayCqReplicationImplAgentManagerImplInfo
import org.openapitools.models.ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo
import org.openapitools.models.ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo
import org.openapitools.models.ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo
import org.openapitools.models.ComDayCqReplicationImplReplicationReceiverImplInfo
import org.openapitools.models.ComDayCqReplicationImplReplicatorImplInfo
import org.openapitools.models.ComDayCqReplicationImplReverseReplicatorInfo
import org.openapitools.models.ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo
import org.openapitools.models.ComDayCqReplicationImplTransportHttpInfo
import org.openapitools.models.ComDayCqReportingImplCacheCacheImplInfo
import org.openapitools.models.ComDayCqReportingImplConfigServiceImplInfo
import org.openapitools.models.ComDayCqReportingImplRLogAnalyzerInfo
import org.openapitools.models.ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo
import org.openapitools.models.ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo
import org.openapitools.models.ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo
import org.openapitools.models.ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo
import org.openapitools.models.ComDayCqRewriterProcessorImplHtmlParserFactoryInfo
import org.openapitools.models.ComDayCqSearchImplBuilderQueryBuilderImplInfo
import org.openapitools.models.ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo
import org.openapitools.models.ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo
import org.openapitools.models.ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo
import org.openapitools.models.ComDayCqSecurityACLSetupInfo
import org.openapitools.models.ComDayCqStatisticsImplStatisticsServiceImplInfo
import org.openapitools.models.ComDayCqTaggingImplJcrTagManagerFactoryImplInfo
import org.openapitools.models.ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo
import org.openapitools.models.ComDayCqTaggingImplTagGarbageCollectorInfo
import org.openapitools.models.ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo
import org.openapitools.models.ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo
import org.openapitools.models.ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo
import org.openapitools.models.ComDayCqWcmCoreImplCommandsWCMCommandServletInfo
import org.openapitools.models.ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo
import org.openapitools.models.ComDayCqWcmCoreImplEventPageEventAuditListenerInfo
import org.openapitools.models.ComDayCqWcmCoreImplEventPagePostProcessorInfo
import org.openapitools.models.ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo
import org.openapitools.models.ComDayCqWcmCoreImplEventTemplatePostProcessorInfo
import org.openapitools.models.ComDayCqWcmCoreImplLanguageManagerImplInfo
import org.openapitools.models.ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo
import org.openapitools.models.ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo
import org.openapitools.models.ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo
import org.openapitools.models.ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo
import org.openapitools.models.ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo
import org.openapitools.models.ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo
import org.openapitools.models.ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo
import org.openapitools.models.ComDayCqWcmCoreImplServletsFindReplaceServletInfo
import org.openapitools.models.ComDayCqWcmCoreImplServletsReferenceSearchServletInfo
import org.openapitools.models.ComDayCqWcmCoreImplServletsThumbnailServletInfo
import org.openapitools.models.ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo
import org.openapitools.models.ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo
import org.openapitools.models.ComDayCqWcmCoreImplVersionManagerImplInfo
import org.openapitools.models.ComDayCqWcmCoreImplVersionPurgeTaskInfo
import org.openapitools.models.ComDayCqWcmCoreImplWCMDebugFilterInfo
import org.openapitools.models.ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo
import org.openapitools.models.ComDayCqWcmCoreImplWarpTimeWarpFilterInfo
import org.openapitools.models.ComDayCqWcmCoreMvtMVTStatisticsImplInfo
import org.openapitools.models.ComDayCqWcmCoreStatsPageViewStatisticsImplInfo
import org.openapitools.models.ComDayCqWcmCoreWCMRequestFilterInfo
import org.openapitools.models.ComDayCqWcmDesignimporterDesignPackageImporterInfo
import org.openapitools.models.ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo
import org.openapitools.models.ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo
import org.openapitools.models.ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo
import org.openapitools.models.ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo
import org.openapitools.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo
import org.openapitools.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo
import org.openapitools.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo
import org.openapitools.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo
import org.openapitools.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo
import org.openapitools.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo
import org.openapitools.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo
import org.openapitools.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo
import org.openapitools.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo
import org.openapitools.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo
import org.openapitools.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo
import org.openapitools.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo
import org.openapitools.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo
import org.openapitools.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo
import org.openapitools.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo
import org.openapitools.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo
import org.openapitools.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo
import org.openapitools.models.ComDayCqWcmFoundationFormsImplFormChooserServletInfo
import org.openapitools.models.ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo
import org.openapitools.models.ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo
import org.openapitools.models.ComDayCqWcmFoundationFormsImplMailServletInfo
import org.openapitools.models.ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo
import org.openapitools.models.ComDayCqWcmFoundationImplHTTPAuthHandlerInfo
import org.openapitools.models.ComDayCqWcmFoundationImplPageImpressionsTrackerInfo
import org.openapitools.models.ComDayCqWcmFoundationImplPageRedirectServletInfo
import org.openapitools.models.ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo
import org.openapitools.models.ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo
import org.openapitools.models.ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo
import org.openapitools.models.ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo
import org.openapitools.models.ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo
import org.openapitools.models.ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo
import org.openapitools.models.ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo
import org.openapitools.models.ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo
import org.openapitools.models.ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo
import org.openapitools.models.ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo
import org.openapitools.models.ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo
import org.openapitools.models.ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo
import org.openapitools.models.ComDayCqWcmMsmImplRolloutManagerImplInfo
import org.openapitools.models.ComDayCqWcmMsmImplServletsAuditLogServletInfo
import org.openapitools.models.ComDayCqWcmNotificationEmailImplEmailChannelInfo
import org.openapitools.models.ComDayCqWcmNotificationImplNotificationManagerImplInfo
import org.openapitools.models.ComDayCqWcmScriptingImplBVPManagerInfo
import org.openapitools.models.ComDayCqWcmUndoUndoConfigInfo
import org.openapitools.models.ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo
import org.openapitools.models.ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo
import org.openapitools.models.ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo
import org.openapitools.models.ComDayCqWidgetImplHtmlLibraryManagerImplInfo
import org.openapitools.models.ComDayCqWidgetImplWidgetExtensionProviderImplInfo
import org.openapitools.models.ComDayCqWorkflowImplEmailEMailNotificationServiceInfo
import org.openapitools.models.ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo
import org.openapitools.models.ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo
import org.openapitools.models.ComDayCrxSecurityTokenImplTokenCleanupTaskInfo
import org.openapitools.models.GuideLocalizationServiceInfo
import org.openapitools.models.MessagingUserComponentFactoryInfo
import org.openapitools.models.OrgApacheAriesJmxFrameworkStateConfigInfo
import org.openapitools.models.OrgApacheFelixEventadminImplEventAdminInfo
import org.openapitools.models.OrgApacheFelixHttpInfo
import org.openapitools.models.OrgApacheFelixHttpSslfilterSslFilterInfo
import org.openapitools.models.OrgApacheFelixJaasConfigurationFactoryInfo
import org.openapitools.models.OrgApacheFelixJaasConfigurationSpiInfo
import org.openapitools.models.OrgApacheFelixScrScrServiceInfo
import org.openapitools.models.OrgApacheFelixSystemreadyImplComponentsCheckInfo
import org.openapitools.models.OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo
import org.openapitools.models.OrgApacheFelixSystemreadyImplServicesCheckInfo
import org.openapitools.models.OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo
import org.openapitools.models.OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo
import org.openapitools.models.OrgApacheFelixSystemreadySystemReadyMonitorInfo
import org.openapitools.models.OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo
import org.openapitools.models.OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo
import org.openapitools.models.OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo
import org.openapitools.models.OrgApacheHttpProxyconfiguratorInfo
import org.openapitools.models.OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo
import org.openapitools.models.OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo
import org.openapitools.models.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo
import org.openapitools.models.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo
import org.openapitools.models.OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo
import org.openapitools.models.OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo
import org.openapitools.models.OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo
import org.openapitools.models.OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo
import org.openapitools.models.OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo
import org.openapitools.models.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo
import org.openapitools.models.OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo
import org.openapitools.models.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo
import org.openapitools.models.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo
import org.openapitools.models.OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo
import org.openapitools.models.OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo
import org.openapitools.models.OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo
import org.openapitools.models.OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo
import org.openapitools.models.OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo
import org.openapitools.models.OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo
import org.openapitools.models.OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo
import org.openapitools.models.OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo
import org.openapitools.models.OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo
import org.openapitools.models.OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo
import org.openapitools.models.OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo
import org.openapitools.models.OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo
import org.openapitools.models.OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo
import org.openapitools.models.OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo
import org.openapitools.models.OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo
import org.openapitools.models.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo
import org.openapitools.models.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo
import org.openapitools.models.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo
import org.openapitools.models.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo
import org.openapitools.models.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo
import org.openapitools.models.OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo
import org.openapitools.models.OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo
import org.openapitools.models.OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo
import org.openapitools.models.OrgApacheSlingAuthCoreImplLogoutServletInfo
import org.openapitools.models.OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo
import org.openapitools.models.OrgApacheSlingCaconfigImplConfigurationResolverImplInfo
import org.openapitools.models.OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo
import org.openapitools.models.OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo
import org.openapitools.models.OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo
import org.openapitools.models.OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo
import org.openapitools.models.OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo
import org.openapitools.models.OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo
import org.openapitools.models.OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo
import org.openapitools.models.OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo
import org.openapitools.models.OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo
import org.openapitools.models.OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo
import org.openapitools.models.OrgApacheSlingCommonsLogLogManagerInfo
import org.openapitools.models.OrgApacheSlingCommonsMetricsInternalLogReporterInfo
import org.openapitools.models.OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo
import org.openapitools.models.OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo
import org.openapitools.models.OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo
import org.openapitools.models.OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo
import org.openapitools.models.OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo
import org.openapitools.models.OrgApacheSlingDatasourceDataSourceFactoryInfo
import org.openapitools.models.OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo
import org.openapitools.models.OrgApacheSlingDiscoveryOakConfigInfo
import org.openapitools.models.OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo
import org.openapitools.models.OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo
import org.openapitools.models.OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo
import org.openapitools.models.OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo
import org.openapitools.models.OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo
import org.openapitools.models.OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo
import org.openapitools.models.OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo
import org.openapitools.models.OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo
import org.openapitools.models.OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo
import org.openapitools.models.OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo
import org.openapitools.models.OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo
import org.openapitools.models.OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo
import org.openapitools.models.OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo
import org.openapitools.models.OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo
import org.openapitools.models.OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo
import org.openapitools.models.OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo
import org.openapitools.models.OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo
import org.openapitools.models.OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo
import org.openapitools.models.OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo
import org.openapitools.models.OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo
import org.openapitools.models.OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo
import org.openapitools.models.OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo
import org.openapitools.models.OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo
import org.openapitools.models.OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo
import org.openapitools.models.OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo
import org.openapitools.models.OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo
import org.openapitools.models.OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo
import org.openapitools.models.OrgApacheSlingEngineImplLogRequestLoggerInfo
import org.openapitools.models.OrgApacheSlingEngineImplLogRequestLoggerServiceInfo
import org.openapitools.models.OrgApacheSlingEngineImplSlingMainServletInfo
import org.openapitools.models.OrgApacheSlingEngineParametersInfo
import org.openapitools.models.OrgApacheSlingEventImplEventingThreadPoolInfo
import org.openapitools.models.OrgApacheSlingEventImplJobsDefaultJobManagerInfo
import org.openapitools.models.OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo
import org.openapitools.models.OrgApacheSlingEventImplJobsJobConsumerManagerInfo
import org.openapitools.models.OrgApacheSlingEventJobsQueueConfigurationInfo
import org.openapitools.models.OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo
import org.openapitools.models.OrgApacheSlingFeatureflagsFeatureInfo
import org.openapitools.models.OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo
import org.openapitools.models.OrgApacheSlingHapiImplHApiUtilImplInfo
import org.openapitools.models.OrgApacheSlingHcCoreImplCompositeHealthCheckInfo
import org.openapitools.models.OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo
import org.openapitools.models.OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo
import org.openapitools.models.OrgApacheSlingHcCoreImplScriptableHealthCheckInfo
import org.openapitools.models.OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo
import org.openapitools.models.OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo
import org.openapitools.models.OrgApacheSlingI18nImplI18NFilterInfo
import org.openapitools.models.OrgApacheSlingI18nImplJcrResourceBundleProviderInfo
import org.openapitools.models.OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo
import org.openapitools.models.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo
import org.openapitools.models.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo
import org.openapitools.models.OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo
import org.openapitools.models.OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo
import org.openapitools.models.OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo
import org.openapitools.models.OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo
import org.openapitools.models.OrgApacheSlingJcrRepoinitRepositoryInitializerInfo
import org.openapitools.models.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo
import org.openapitools.models.OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo
import org.openapitools.models.OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo
import org.openapitools.models.OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo
import org.openapitools.models.OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo
import org.openapitools.models.OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo
import org.openapitools.models.OrgApacheSlingJmxProviderImplJMXResourceProviderInfo
import org.openapitools.models.OrgApacheSlingModelsImplModelAdapterFactoryInfo
import org.openapitools.models.OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo
import org.openapitools.models.OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo
import org.openapitools.models.OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo
import org.openapitools.models.OrgApacheSlingResourcemergerPickerOverridingInfo
import org.openapitools.models.OrgApacheSlingScriptingCoreImplScriptCacheImplInfo
import org.openapitools.models.OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo
import org.openapitools.models.OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo
import org.openapitools.models.OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo
import org.openapitools.models.OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo
import org.openapitools.models.OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo
import org.openapitools.models.OrgApacheSlingSecurityImplContentDispositionFilterInfo
import org.openapitools.models.OrgApacheSlingSecurityImplReferrerFilterInfo
import org.openapitools.models.OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo
import org.openapitools.models.OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo
import org.openapitools.models.OrgApacheSlingServletsGetDefaultGetServletInfo
import org.openapitools.models.OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo
import org.openapitools.models.OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo
import org.openapitools.models.OrgApacheSlingServletsPostImplSlingPostServletInfo
import org.openapitools.models.OrgApacheSlingServletsResolverSlingServletResolverInfo
import org.openapitools.models.OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo
import org.openapitools.models.OrgApacheSlingStartupfilterImplStartupFilterImplInfo
import org.openapitools.models.OrgApacheSlingTenantInternalTenantProviderImplInfo
import org.openapitools.models.OrgApacheSlingTracerInternalLogTracerInfo
import org.openapitools.models.OrgApacheSlingXssImplXSSFilterImplInfo
import io.finch.circe._
import io.circe.generic.semiauto._
import com.twitter.concurrent.AsyncStream
import com.twitter.finagle.Service
import com.twitter.finagle.Http
import com.twitter.finagle.http.{Request, Response}
import com.twitter.finagle.http.exp.Multipart.{FileUpload, InMemoryFileUpload, OnDiskFileUpload}
import com.twitter.util.Future
import com.twitter.io.Buf
import io.finch._, items._
import java.io.File
import java.time._

object ConfigmgrApi {
    /**
    * Compiles all service endpoints.
    * @return Bundled compilation of all service endpoints.
    */
    def endpoints(da: DataAccessor) =
        adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(da) :+:
        adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(da) :+:
        analyticsComponentQueryCacheService(da) :+:
        apacheSlingHealthCheckResultHTMLSerializer(da) :+:
        comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(da) :+:
        comAdobeAemTransactionCoreImplTransactionRecorder(da) :+:
        comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(da) :+:
        comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(da) :+:
        comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(da) :+:
        comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(da) :+:
        comAdobeCqAccountApiAccountManagementService(da) :+:
        comAdobeCqAccountImplAccountManagementServlet(da) :+:
        comAdobeCqAddressImplLocationLocationListServlet(da) :+:
        comAdobeCqAuditPurgeDam(da) :+:
        comAdobeCqAuditPurgePages(da) :+:
        comAdobeCqAuditPurgeReplication(da) :+:
        comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(da) :+:
        comAdobeCqCdnRewriterImplCDNConfigServiceImpl(da) :+:
        comAdobeCqCdnRewriterImplCDNRewriter(da) :+:
        comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(da) :+:
        comAdobeCqCommerceImplAssetDynamicImageHandler(da) :+:
        comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(da) :+:
        comAdobeCqCommerceImplAssetStaticImageHandler(da) :+:
        comAdobeCqCommerceImplAssetVideoHandler(da) :+:
        comAdobeCqCommerceImplPromotionPromotionManagerImpl(da) :+:
        comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(da) :+:
        comAdobeCqCommercePimImplPageEventListener(da) :+:
        comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(da) :+:
        comAdobeCqContentinsightImplReportingServicesSettingsProvider(da) :+:
        comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(da) :+:
        comAdobeCqContentinsightImplServletsReportingServicesProxyServle(da) :+:
        comAdobeCqDamCfmImplComponentComponentConfigImpl(da) :+:
        comAdobeCqDamCfmImplConfFeatureConfigImpl(da) :+:
        comAdobeCqDamCfmImplContentRewriterAssetProcessor(da) :+:
        comAdobeCqDamCfmImplContentRewriterParRangeFilter(da) :+:
        comAdobeCqDamCfmImplContentRewriterPayloadFilter(da) :+:
        comAdobeCqDamDmProcessImagePTiffManagerImpl(da) :+:
        comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(da) :+:
        comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(da) :+:
        comAdobeCqDamMacSyncImplDAMSyncServiceImpl(da) :+:
        comAdobeCqDamProcessorNuiImplNuiAssetProcessor(da) :+:
        comAdobeCqDamS7imagingImplIsImageServerComponent(da) :+:
        comAdobeCqDamS7imagingImplPsPlatformServerServlet(da) :+:
        comAdobeCqDamWebdavImplIoAssetIOHandler(da) :+:
        comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(da) :+:
        comAdobeCqDamWebdavImplIoSpecialFilesHandler(da) :+:
        comAdobeCqDeserfwImplDeserializationFirewallImpl(da) :+:
        comAdobeCqDtmImplServiceDTMWebServiceImpl(da) :+:
        comAdobeCqDtmImplServletsDTMDeployHookServlet(da) :+:
        comAdobeCqDtmReactorImplServiceWebServiceImpl(da) :+:
        comAdobeCqExperiencelogImplExperienceLogConfigServlet(da) :+:
        comAdobeCqHcContentPackagesHealthCheck(da) :+:
        comAdobeCqHistoryImplHistoryRequestFilter(da) :+:
        comAdobeCqHistoryImplHistoryServiceImpl(da) :+:
        comAdobeCqInboxImplTypeproviderItemTypeProvider(da) :+:
        comAdobeCqProjectsImplServletProjectImageServlet(da) :+:
        comAdobeCqProjectsPurgeScheduler(da) :+:
        comAdobeCqScheduledExporterImplScheduledExporterImpl(da) :+:
        comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(da) :+:
        comAdobeCqScreensDeviceImplDeviceService(da) :+:
        comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(da) :+:
        comAdobeCqScreensImplHandlerChannelsUpdateHandler(da) :+:
        comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(da) :+:
        comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(da) :+:
        comAdobeCqScreensImplScreensChannelPostProcessor(da) :+:
        comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(da) :+:
        comAdobeCqScreensMqActivemqImplArtemisJMSProvider(da) :+:
        comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(da) :+:
        comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(da) :+:
        comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(da) :+:
        comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(da) :+:
        comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(da) :+:
        comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(da) :+:
        comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(da) :+:
        comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(da) :+:
        comAdobeCqSocialAccountverificationImplAccountManagementConfigIm(da) :+:
        comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(da) :+:
        comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(da) :+:
        comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(da) :+:
        comAdobeCqSocialActivitystreamsListenerImplModerationEventExten(da) :+:
        comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(da) :+:
        comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(da) :+:
        comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(da) :+:
        comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(da) :+:
        comAdobeCqSocialCalendarServletsTimeZoneServlet(da) :+:
        comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(da) :+:
        comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(da) :+:
        comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(da) :+:
        comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(da) :+:
        comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(da) :+:
        comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(da) :+:
        comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(da) :+:
        comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(da) :+:
        comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(da) :+:
        comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(da) :+:
        comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(da) :+:
        comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(da) :+:
        comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(da) :+:
        comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(da) :+:
        comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(da) :+:
        comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(da) :+:
        comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(da) :+:
        comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(da) :+:
        comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(da) :+:
        comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(da) :+:
        comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(da) :+:
        comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(da) :+:
        comAdobeCqSocialConnectOauthImplFacebookProviderImpl(da) :+:
        comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(da) :+:
        comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(da) :+:
        comAdobeCqSocialConnectOauthImplTwitterProviderImpl(da) :+:
        comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(da) :+:
        comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(da) :+:
        comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(da) :+:
        comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(da) :+:
        comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(da) :+:
        comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(da) :+:
        comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(da) :+:
        comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(da) :+:
        comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(da) :+:
        comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(da) :+:
        comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(da) :+:
        comAdobeCqSocialForumClientEndpointsImplForumOperationsService(da) :+:
        comAdobeCqSocialForumDispatcherImplFlushOperations(da) :+:
        comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(da) :+:
        comAdobeCqSocialGroupImplGroupServiceImpl(da) :+:
        comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(da) :+:
        comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(da) :+:
        comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(da) :+:
        comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(da) :+:
        comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(da) :+:
        comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(da) :+:
        comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(da) :+:
        comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(da) :+:
        comAdobeCqSocialModerationDashboardApiModerationDashboardSocial(da) :+:
        comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(da) :+:
        comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(da) :+:
        comAdobeCqSocialNotificationsImplMentionsRouter(da) :+:
        comAdobeCqSocialNotificationsImplNotificationManagerImpl(da) :+:
        comAdobeCqSocialNotificationsImplNotificationsRouter(da) :+:
        comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(da) :+:
        comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(da) :+:
        comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(da) :+:
        comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(da) :+:
        comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(da) :+:
        comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(da) :+:
        comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(da) :+:
        comAdobeCqSocialScoringImplScoringEventListener(da) :+:
        comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(da) :+:
        comAdobeCqSocialSiteEndpointsImplSiteOperationService(da) :+:
        comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(da) :+:
        comAdobeCqSocialSiteImplSiteConfiguratorImpl(da) :+:
        comAdobeCqSocialSrpImplSocialSolrConnector(da) :+:
        comAdobeCqSocialSyncImplDiffChangesObserver(da) :+:
        comAdobeCqSocialSyncImplGroupSyncListenerImpl(da) :+:
        comAdobeCqSocialSyncImplPublisherSyncServiceImpl(da) :+:
        comAdobeCqSocialSyncImplUserSyncListenerImpl(da) :+:
        comAdobeCqSocialTranslationImplTranslationServiceConfigManager(da) :+:
        comAdobeCqSocialTranslationImplUGCLanguageDetector(da) :+:
        comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(da) :+:
        comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(da) :+:
        comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(da) :+:
        comAdobeCqSocialUgcbaseImplSocialUtilsImpl(da) :+:
        comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(da) :+:
        comAdobeCqSocialUgcbaseModerationImplSentimentProcess(da) :+:
        comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(da) :+:
        comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(da) :+:
        comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(da) :+:
        comAdobeCqSocialUserImplTransportHttpToPublisher(da) :+:
        comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(da) :+:
        comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(da) :+:
        comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(da) :+:
        comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(da) :+:
        comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(da) :+:
        comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(da) :+:
        comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(da) :+:
        comAdobeCqWcmLaunchesImplLaunchesEventHandler(da) :+:
        comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(da) :+:
        comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(da) :+:
        comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(da) :+:
        comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(da) :+:
        comAdobeFdFpConfigFormsPortalSchedulerService(da) :+:
        comAdobeFormsCommonServiceImplDefaultDataProvider(da) :+:
        comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(da) :+:
        comAdobeFormsCommonServletTempCleanUpTask(da) :+:
        comAdobeGraniteAcpPlatformPlatformServlet(da) :+:
        comAdobeGraniteActivitystreamsImplActivityManagerImpl(da) :+:
        comAdobeGraniteAnalyzerBaseSystemStatusServlet(da) :+:
        comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(da) :+:
        comAdobeGraniteApicontrollerFilterResolverHookFactory(da) :+:
        comAdobeGraniteAuthCertImplClientCertAuthHandler(da) :+:
        comAdobeGraniteAuthIms(da) :+:
        comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(da) :+:
        comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(da) :+:
        comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(da) :+:
        comAdobeGraniteAuthImsImplIMSProviderImpl(da) :+:
        comAdobeGraniteAuthImsImplImsConfigProviderImpl(da) :+:
        comAdobeGraniteAuthOauthAccesstokenProvider(da) :+:
        comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(da) :+:
        comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(da) :+:
        comAdobeGraniteAuthOauthImplFacebookProviderImpl(da) :+:
        comAdobeGraniteAuthOauthImplGithubProviderImpl(da) :+:
        comAdobeGraniteAuthOauthImplGraniteProvider(da) :+:
        comAdobeGraniteAuthOauthImplHelperProviderConfigManager(da) :+:
        comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(da) :+:
        comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(da) :+:
        comAdobeGraniteAuthOauthImplTwitterProviderImpl(da) :+:
        comAdobeGraniteAuthOauthProvider(da) :+:
        comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(da) :+:
        comAdobeGraniteAuthSamlSamlAuthenticationHandler(da) :+:
        comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(da) :+:
        comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(da) :+:
        comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(da) :+:
        comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(da) :+:
        comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(da) :+:
        comAdobeGraniteBundlesHcImplJobsHealthCheck(da) :+:
        comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(da) :+:
        comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(da) :+:
        comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(da) :+:
        comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(da) :+:
        comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(da) :+:
        comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(da) :+:
        comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(da) :+:
        comAdobeGraniteCompatrouterImplRoutingConfig(da) :+:
        comAdobeGraniteCompatrouterImplSwitchMappingConfig(da) :+:
        comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(da) :+:
        comAdobeGraniteContexthubImplContextHubImpl(da) :+:
        comAdobeGraniteCorsImplCORSPolicyImpl(da) :+:
        comAdobeGraniteCsrfImplCSRFFilter(da) :+:
        comAdobeGraniteCsrfImplCSRFServlet(da) :+:
        comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(da) :+:
        comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(da) :+:
        comAdobeGraniteDistributionCoreImplDiffDiffEventListener(da) :+:
        comAdobeGraniteDistributionCoreImplDistributionToReplicationEven(da) :+:
        comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(da) :+:
        comAdobeGraniteDistributionCoreImplReplicationDistributionTrans(da) :+:
        comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(da) :+:
        comAdobeGraniteFragsImplCheckHttpHeaderFlag(da) :+:
        comAdobeGraniteFragsImplRandomFeature(da) :+:
        comAdobeGraniteHttpcacheFileFileCacheStore(da) :+:
        comAdobeGraniteHttpcacheImplOuterCacheFilter(da) :+:
        comAdobeGraniteI18nImplBundlePseudoTranslations(da) :+:
        comAdobeGraniteI18nImplPreferencesLocaleResolverService(da) :+:
        comAdobeGraniteInfocollectorInfoCollector(da) :+:
        comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(da) :+:
        comAdobeGraniteLicenseImplLicenseCheckFilter(da) :+:
        comAdobeGraniteLoggingImplLogAnalyserImpl(da) :+:
        comAdobeGraniteLoggingImplLogErrorHealthCheck(da) :+:
        comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(da) :+:
        comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(da) :+:
        comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(da) :+:
        comAdobeGraniteMonitoringImplScriptConfigImpl(da) :+:
        comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(da) :+:
        comAdobeGraniteOauthServerImplAccessTokenCleanupTask(da) :+:
        comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(da) :+:
        comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(da) :+:
        comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(da) :+:
        comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(da) :+:
        comAdobeGraniteOffloadingImplOffloadingConfigurator(da) :+:
        comAdobeGraniteOffloadingImplOffloadingJobCloner(da) :+:
        comAdobeGraniteOffloadingImplOffloadingJobOffloader(da) :+:
        comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(da) :+:
        comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(da) :+:
        comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(da) :+:
        comAdobeGraniteOptoutImplOptOutServiceImpl(da) :+:
        comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(da) :+:
        comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(da) :+:
        comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(da) :+:
        comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(da) :+:
        comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(da) :+:
        comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(da) :+:
        comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(da) :+:
        comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(da) :+:
        comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(da) :+:
        comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(da) :+:
        comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(da) :+:
        comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(da) :+:
        comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(da) :+:
        comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(da) :+:
        comAdobeGraniteRepositoryImplCommitStatsConfig(da) :+:
        comAdobeGraniteRepositoryServiceUserConfiguration(da) :+:
        comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(da) :+:
        comAdobeGraniteResourcestatusImplCompositeStatusType(da) :+:
        comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(da) :+:
        comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(da) :+:
        comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(da) :+:
        comAdobeGraniteRestImplServletDefaultGETServlet(da) :+:
        comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(da) :+:
        comAdobeGraniteSecurityUserUserPropertiesService(da) :+:
        comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(da) :+:
        comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(da) :+:
        comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(da) :+:
        comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(da) :+:
        comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(da) :+:
        comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(da) :+:
        comAdobeGraniteThreaddumpThreadDumpCollector(da) :+:
        comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(da) :+:
        comAdobeGraniteTranslationCoreImplTranslationManagerImpl(da) :+:
        comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(da) :+:
        comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(da) :+:
        comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(da) :+:
        comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(da) :+:
        comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(da) :+:
        comAdobeGraniteWorkflowCoreJobJobHandler(da) :+:
        comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(da) :+:
        comAdobeGraniteWorkflowCorePayloadMapCache(da) :+:
        comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(da) :+:
        comAdobeGraniteWorkflowCoreWorkflowConfig(da) :+:
        comAdobeGraniteWorkflowCoreWorkflowSessionFactory(da) :+:
        comAdobeGraniteWorkflowPurgeScheduler(da) :+:
        comAdobeOctopusNcommBootstrap(da) :+:
        comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(da) :+:
        comAdobeXmpWorkerFilesNcommXMPFilesNComm(da) :+:
        comDayCommonsDatasourceJdbcpoolJdbcPoolService(da) :+:
        comDayCommonsHttpclient(da) :+:
        comDayCqAnalyticsImplStorePropertiesChangeListener(da) :+:
        comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(da) :+:
        comDayCqAnalyticsSitecatalystImplImporterReportImporter(da) :+:
        comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(da) :+:
        comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(da) :+:
        comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(da) :+:
        comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(da) :+:
        comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(da) :+:
        comDayCqAnalyticsTestandtargetImplSegmentImporter(da) :+:
        comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(da) :+:
        comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(da) :+:
        comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(da) :+:
        comDayCqAuthImplCugCugSupportImpl(da) :+:
        comDayCqAuthImplLoginSelectorHandler(da) :+:
        comDayCqCommonsImplExternalizerImpl(da) :+:
        comDayCqCommonsServletsRootMappingServlet(da) :+:
        comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(da) :+:
        comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(da) :+:
        comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(da) :+:
        comDayCqContentsyncImplContentSyncManagerImpl(da) :+:
        comDayCqDamCommonsHandlerStandardImageHandler(da) :+:
        comDayCqDamCommonsMetadataXmpFilterBlackWhite(da) :+:
        comDayCqDamCommonsUtilImplAssetCacheImpl(da) :+:
        comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(da) :+:
        comDayCqDamCoreImplAssetMoveListener(da) :+:
        comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(da) :+:
        comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(da) :+:
        comDayCqDamCoreImplCacheCQBufferedImageCache(da) :+:
        comDayCqDamCoreImplDamChangeEventListener(da) :+:
        comDayCqDamCoreImplDamEventPurgeService(da) :+:
        comDayCqDamCoreImplDamEventRecorderImpl(da) :+:
        comDayCqDamCoreImplEventDamEventAuditListener(da) :+:
        comDayCqDamCoreImplExpiryNotificationJobImpl(da) :+:
        comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(da) :+:
        comDayCqDamCoreImplGfxCommonsGfxRenderer(da) :+:
        comDayCqDamCoreImplHandlerEPSFormatHandler(da) :+:
        comDayCqDamCoreImplHandlerIndesignFormatHandler(da) :+:
        comDayCqDamCoreImplHandlerJpegHandler(da) :+:
        comDayCqDamCoreImplHandlerXmpNCommXMPHandler(da) :+:
        comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(da) :+:
        comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(da) :+:
        comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(da) :+:
        comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(da) :+:
        comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(da) :+:
        comDayCqDamCoreImplLightboxLightboxServlet(da) :+:
        comDayCqDamCoreImplMetadataEditorSelectComponentHandler(da) :+:
        comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(da) :+:
        comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(da) :+:
        comDayCqDamCoreImplMissingMetadataNotificationJob(da) :+:
        comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(da) :+:
        comDayCqDamCoreImplProcessTextExtractionProcess(da) :+:
        comDayCqDamCoreImplRenditionMakerImpl(da) :+:
        comDayCqDamCoreImplReportsReportExportService(da) :+:
        comDayCqDamCoreImplReportsReportPurgeService(da) :+:
        comDayCqDamCoreImplServletAssetDownloadServlet(da) :+:
        comDayCqDamCoreImplServletAssetStatusServlet(da) :+:
        comDayCqDamCoreImplServletAssetXMPSearchServlet(da) :+:
        comDayCqDamCoreImplServletBatchMetadataServlet(da) :+:
        comDayCqDamCoreImplServletBinaryProviderServlet(da) :+:
        comDayCqDamCoreImplServletCollectionServlet(da) :+:
        comDayCqDamCoreImplServletCollectionsServlet(da) :+:
        comDayCqDamCoreImplServletCompanionServlet(da) :+:
        comDayCqDamCoreImplServletCreateAssetServlet(da) :+:
        comDayCqDamCoreImplServletDamContentDispositionFilter(da) :+:
        comDayCqDamCoreImplServletGuidLookupFilter(da) :+:
        comDayCqDamCoreImplServletHealthCheckServlet(da) :+:
        comDayCqDamCoreImplServletMetadataGetServlet(da) :+:
        comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(da) :+:
        comDayCqDamCoreImplServletResourceCollectionServlet(da) :+:
        comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(da) :+:
        comDayCqDamCoreImplUnzipUnzipConfig(da) :+:
        comDayCqDamCoreProcessExifToolExtractMetadataProcess(da) :+:
        comDayCqDamCoreProcessExtractMetadataProcess(da) :+:
        comDayCqDamCoreProcessMetadataProcessorProcess(da) :+:
        comDayCqDamHandlerFfmpegLocatorImpl(da) :+:
        comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(da) :+:
        comDayCqDamHandlerStandardPdfPdfHandler(da) :+:
        comDayCqDamHandlerStandardPsPostScriptHandler(da) :+:
        comDayCqDamHandlerStandardPsdPsdHandler(da) :+:
        comDayCqDamIdsImplIDSJobProcessor(da) :+:
        comDayCqDamIdsImplIDSPoolManagerImpl(da) :+:
        comDayCqDamInddImplHandlerIndesignXMPHandler(da) :+:
        comDayCqDamInddImplServletSnippetCreationServlet(da) :+:
        comDayCqDamInddProcessINDDMediaExtractProcess(da) :+:
        comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(da) :+:
        comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(da) :+:
        comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(da) :+:
        comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(da) :+:
        comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(da) :+:
        comDayCqDamS7damCommonPostServletsSetCreateHandler(da) :+:
        comDayCqDamS7damCommonPostServletsSetModifyHandler(da) :+:
        comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(da) :+:
        comDayCqDamS7damCommonS7damDamChangeEventListener(da) :+:
        comDayCqDamS7damCommonServletsS7damProductInfoServlet(da) :+:
        comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(da) :+:
        comDayCqDamScene7ImplScene7APIClientImpl(da) :+:
        comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(da) :+:
        comDayCqDamScene7ImplScene7ConfigurationEventListener(da) :+:
        comDayCqDamScene7ImplScene7DamChangeEventListener(da) :+:
        comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(da) :+:
        comDayCqDamScene7ImplScene7UploadServiceImpl(da) :+:
        comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(da) :+:
        comDayCqDamStockIntegrationImplConfigurationStockConfiguration(da) :+:
        comDayCqDamVideoImplServletVideoTestServlet(da) :+:
        comDayCqExtwidgetServletsImageSpriteServlet(da) :+:
        comDayCqImageInternalFontFontHelper(da) :+:
        comDayCqJcrclustersupportClusterStartLevelController(da) :+:
        comDayCqMailerDefaultMailService(da) :+:
        comDayCqMailerImplCqMailingService(da) :+:
        comDayCqMailerImplEmailCqEmailTemplateFactory(da) :+:
        comDayCqMailerImplEmailCqRetrieverTemplateFactory(da) :+:
        comDayCqMcmCampaignImplIntegrationConfigImpl(da) :+:
        comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(da) :+:
        comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(da) :+:
        comDayCqMcmImplMCMConfiguration(da) :+:
        comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(da) :+:
        comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(da) :+:
        comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(da) :+:
        comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(da) :+:
        comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(da) :+:
        comDayCqNotificationImplNotificationServiceImpl(da) :+:
        comDayCqPersonalizationImplServletsTargetingConfigurationServlet(da) :+:
        comDayCqPollingImporterImplManagedPollConfigImpl(da) :+:
        comDayCqPollingImporterImplManagedPollingImporterImpl(da) :+:
        comDayCqPollingImporterImplPollingImporterImpl(da) :+:
        comDayCqReplicationAuditReplicationEventListener(da) :+:
        comDayCqReplicationContentStaticContentBuilder(da) :+:
        comDayCqReplicationImplAgentManagerImpl(da) :+:
        comDayCqReplicationImplContentDurboBinaryLessContentBuilder(da) :+:
        comDayCqReplicationImplContentDurboDurboImportConfigurationProv(da) :+:
        comDayCqReplicationImplReplicationContentFactoryProviderImpl(da) :+:
        comDayCqReplicationImplReplicationReceiverImpl(da) :+:
        comDayCqReplicationImplReplicatorImpl(da) :+:
        comDayCqReplicationImplReverseReplicator(da) :+:
        comDayCqReplicationImplTransportBinaryLessTransportHandler(da) :+:
        comDayCqReplicationImplTransportHttp(da) :+:
        comDayCqReportingImplCacheCacheImpl(da) :+:
        comDayCqReportingImplConfigServiceImpl(da) :+:
        comDayCqReportingImplRLogAnalyzer(da) :+:
        comDayCqRewriterLinkcheckerImplLinkCheckerImpl(da) :+:
        comDayCqRewriterLinkcheckerImplLinkCheckerTask(da) :+:
        comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(da) :+:
        comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(da) :+:
        comDayCqRewriterProcessorImplHtmlParserFactory(da) :+:
        comDayCqSearchImplBuilderQueryBuilderImpl(da) :+:
        comDayCqSearchSuggestImplSuggestionIndexManagerImpl(da) :+:
        comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(da) :+:
        comDayCqSearchpromoteImplSearchPromoteServiceImpl(da) :+:
        comDayCqSecurityACLSetup(da) :+:
        comDayCqStatisticsImplStatisticsServiceImpl(da) :+:
        comDayCqTaggingImplJcrTagManagerFactoryImpl(da) :+:
        comDayCqTaggingImplSearchTagPredicateEvaluator(da) :+:
        comDayCqTaggingImplTagGarbageCollector(da) :+:
        comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(da) :+:
        comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(da) :+:
        comDayCqWcmCoreImplAuthoringUIModeServiceImpl(da) :+:
        comDayCqWcmCoreImplCommandsWCMCommandServlet(da) :+:
        comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(da) :+:
        comDayCqWcmCoreImplEventPageEventAuditListener(da) :+:
        comDayCqWcmCoreImplEventPagePostProcessor(da) :+:
        comDayCqWcmCoreImplEventRepositoryChangeEventListener(da) :+:
        comDayCqWcmCoreImplEventTemplatePostProcessor(da) :+:
        comDayCqWcmCoreImplLanguageManagerImpl(da) :+:
        comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(da) :+:
        comDayCqWcmCoreImplPagePageInfoAggregatorImpl(da) :+:
        comDayCqWcmCoreImplPagePageManagerFactoryImpl(da) :+:
        comDayCqWcmCoreImplReferencesContentContentReferenceConfig(da) :+:
        comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(da) :+:
        comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(da) :+:
        comDayCqWcmCoreImplServletsContentfinderPageViewHandler(da) :+:
        comDayCqWcmCoreImplServletsFindReplaceServlet(da) :+:
        comDayCqWcmCoreImplServletsReferenceSearchServlet(da) :+:
        comDayCqWcmCoreImplServletsThumbnailServlet(da) :+:
        comDayCqWcmCoreImplUtilsDefaultPageNameValidator(da) :+:
        comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(da) :+:
        comDayCqWcmCoreImplVersionManagerImpl(da) :+:
        comDayCqWcmCoreImplVersionPurgeTask(da) :+:
        comDayCqWcmCoreImplWCMDebugFilter(da) :+:
        comDayCqWcmCoreImplWCMDeveloperModeFilter(da) :+:
        comDayCqWcmCoreImplWarpTimeWarpFilter(da) :+:
        comDayCqWcmCoreMvtMVTStatisticsImpl(da) :+:
        comDayCqWcmCoreStatsPageViewStatisticsImpl(da) :+:
        comDayCqWcmCoreWCMRequestFilter(da) :+:
        comDayCqWcmDesignimporterDesignPackageImporter(da) :+:
        comDayCqWcmDesignimporterImplCanvasBuilderImpl(da) :+:
        comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(da) :+:
        comDayCqWcmDesignimporterImplEntryPreprocessorImpl(da) :+:
        comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(da) :+:
        comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(da) :+:
        comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(da) :+:
        comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(da) :+:
        comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(da) :+:
        comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(da) :+:
        comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(da) :+:
        comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(da) :+:
        comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(da) :+:
        comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(da) :+:
        comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(da) :+:
        comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(da) :+:
        comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(da) :+:
        comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(da) :+:
        comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(da) :+:
        comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(da) :+:
        comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(da) :+:
        comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(da) :+:
        comDayCqWcmFoundationFormsImplFormChooserServlet(da) :+:
        comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(da) :+:
        comDayCqWcmFoundationFormsImplFormsHandlingServlet(da) :+:
        comDayCqWcmFoundationFormsImplMailServlet(da) :+:
        comDayCqWcmFoundationImplAdaptiveImageComponentServlet(da) :+:
        comDayCqWcmFoundationImplHTTPAuthHandler(da) :+:
        comDayCqWcmFoundationImplPageImpressionsTracker(da) :+:
        comDayCqWcmFoundationImplPageRedirectServlet(da) :+:
        comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(da) :+:
        comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(da) :+:
        comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(da) :+:
        comDayCqWcmMobileCoreImplRedirectRedirectFilter(da) :+:
        comDayCqWcmMsmImplActionsContentCopyActionFactory(da) :+:
        comDayCqWcmMsmImplActionsContentDeleteActionFactory(da) :+:
        comDayCqWcmMsmImplActionsContentUpdateActionFactory(da) :+:
        comDayCqWcmMsmImplActionsOrderChildrenActionFactory(da) :+:
        comDayCqWcmMsmImplActionsPageMoveActionFactory(da) :+:
        comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(da) :+:
        comDayCqWcmMsmImplActionsVersionCopyActionFactory(da) :+:
        comDayCqWcmMsmImplLiveRelationshipManagerImpl(da) :+:
        comDayCqWcmMsmImplRolloutManagerImpl(da) :+:
        comDayCqWcmMsmImplServletsAuditLogServlet(da) :+:
        comDayCqWcmNotificationEmailImplEmailChannel(da) :+:
        comDayCqWcmNotificationImplNotificationManagerImpl(da) :+:
        comDayCqWcmScriptingImplBVPManager(da) :+:
        comDayCqWcmUndoUndoConfig(da) :+:
        comDayCqWcmWebservicesupportImplReplicationEventListener(da) :+:
        comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(da) :+:
        comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(da) :+:
        comDayCqWidgetImplHtmlLibraryManagerImpl(da) :+:
        comDayCqWidgetImplWidgetExtensionProviderImpl(da) :+:
        comDayCqWorkflowImplEmailEMailNotificationService(da) :+:
        comDayCqWorkflowImplEmailTaskEMailNotificationService(da) :+:
        comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(da) :+:
        comDayCrxSecurityTokenImplTokenCleanupTask(da) :+:
        guideLocalizationService(da) :+:
        messagingUserComponentFactory(da) :+:
        orgApacheAriesJmxFrameworkStateConfig(da) :+:
        orgApacheFelixEventadminImplEventAdmin(da) :+:
        orgApacheFelixHttp(da) :+:
        orgApacheFelixHttpSslfilterSslFilter(da) :+:
        orgApacheFelixJaasConfigurationFactory(da) :+:
        orgApacheFelixJaasConfigurationSpi(da) :+:
        orgApacheFelixScrScrService(da) :+:
        orgApacheFelixSystemreadyImplComponentsCheck(da) :+:
        orgApacheFelixSystemreadyImplFrameworkStartCheck(da) :+:
        orgApacheFelixSystemreadyImplServicesCheck(da) :+:
        orgApacheFelixSystemreadyImplServletSystemAliveServlet(da) :+:
        orgApacheFelixSystemreadyImplServletSystemReadyServlet(da) :+:
        orgApacheFelixSystemreadySystemReadyMonitor(da) :+:
        orgApacheFelixWebconsoleInternalServletOsgiManager(da) :+:
        orgApacheFelixWebconsolePluginsEventInternalPluginServlet(da) :+:
        orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(da) :+:
        orgApacheHttpProxyconfigurator(da) :+:
        orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(da) :+:
        orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(da) :+:
        orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(da) :+:
        orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(da) :+:
        orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(da) :+:
        orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(da) :+:
        orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(da) :+:
        orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(da) :+:
        orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(da) :+:
        orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(da) :+:
        orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(da) :+:
        orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(da) :+:
        orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(da) :+:
        orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(da) :+:
        orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(da) :+:
        orgApacheJackrabbitOakQueryQueryEngineSettingsService(da) :+:
        orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(da) :+:
        orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(da) :+:
        orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(da) :+:
        orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(da) :+:
        orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(da) :+:
        orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(da) :+:
        orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(da) :+:
        orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(da) :+:
        orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(da) :+:
        orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(da) :+:
        orgApacheJackrabbitOakSegmentSegmentNodeStoreService(da) :+:
        orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(da) :+:
        orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(da) :+:
        orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(da) :+:
        orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(da) :+:
        orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(da) :+:
        orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(da) :+:
        orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(da) :+:
        orgApacheJackrabbitVaultPackagingImplPackagingImpl(da) :+:
        orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(da) :+:
        orgApacheSlingAuthCoreImplLogoutServlet(da) :+:
        orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(da) :+:
        orgApacheSlingCaconfigImplConfigurationResolverImpl(da) :+:
        orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(da) :+:
        orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(da) :+:
        orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(da) :+:
        orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(da) :+:
        orgApacheSlingCaconfigManagementImplConfigurationManagementSetti(da) :+:
        orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(da) :+:
        orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(da) :+:
        orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(da) :+:
        orgApacheSlingCommonsLogLogManager(da) :+:
        orgApacheSlingCommonsLogLogManagerFactoryConfig(da) :+:
        orgApacheSlingCommonsLogLogManagerFactoryWriter(da) :+:
        orgApacheSlingCommonsMetricsInternalLogReporter(da) :+:
        orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(da) :+:
        orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(da) :+:
        orgApacheSlingCommonsSchedulerImplQuartzScheduler(da) :+:
        orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(da) :+:
        orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(da) :+:
        orgApacheSlingDatasourceDataSourceFactory(da) :+:
        orgApacheSlingDatasourceJNDIDataSourceFactory(da) :+:
        orgApacheSlingDiscoveryOakConfig(da) :+:
        orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(da) :+:
        orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(da) :+:
        orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(da) :+:
        orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(da) :+:
        orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(da) :+:
        orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(da) :+:
        orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(da) :+:
        orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(da) :+:
        orgApacheSlingDistributionPackagingImplExporterAgentDistributio(da) :+:
        orgApacheSlingDistributionPackagingImplExporterLocalDistributio(da) :+:
        orgApacheSlingDistributionPackagingImplExporterRemoteDistributi(da) :+:
        orgApacheSlingDistributionPackagingImplImporterLocalDistributio(da) :+:
        orgApacheSlingDistributionPackagingImplImporterRemoteDistributi(da) :+:
        orgApacheSlingDistributionPackagingImplImporterRepositoryDistri(da) :+:
        orgApacheSlingDistributionResourcesImplDistributionConfiguration(da) :+:
        orgApacheSlingDistributionResourcesImplDistributionServiceResour(da) :+:
        orgApacheSlingDistributionSerializationImplDistributionPackageBu(da) :+:
        orgApacheSlingDistributionSerializationImplVltVaultDistribution(da) :+:
        orgApacheSlingDistributionTransportImplUserCredentialsDistributi(da) :+:
        orgApacheSlingDistributionTriggerImplDistributionEventDistribute(da) :+:
        orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(da) :+:
        orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(da) :+:
        orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(da) :+:
        orgApacheSlingDistributionTriggerImplResourceEventDistributionTr(da) :+:
        orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(da) :+:
        orgApacheSlingEngineImplAuthSlingAuthenticator(da) :+:
        orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(da) :+:
        orgApacheSlingEngineImplLogRequestLogger(da) :+:
        orgApacheSlingEngineImplLogRequestLoggerService(da) :+:
        orgApacheSlingEngineImplSlingMainServlet(da) :+:
        orgApacheSlingEngineParameters(da) :+:
        orgApacheSlingEventImplEventingThreadPool(da) :+:
        orgApacheSlingEventImplJobsDefaultJobManager(da) :+:
        orgApacheSlingEventImplJobsJcrPersistenceHandler(da) :+:
        orgApacheSlingEventImplJobsJobConsumerManager(da) :+:
        orgApacheSlingEventJobsQueueConfiguration(da) :+:
        orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(da) :+:
        orgApacheSlingFeatureflagsFeature(da) :+:
        orgApacheSlingFeatureflagsImplConfiguredFeature(da) :+:
        orgApacheSlingHapiImplHApiUtilImpl(da) :+:
        orgApacheSlingHcCoreImplCompositeHealthCheck(da) :+:
        orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(da) :+:
        orgApacheSlingHcCoreImplJmxAttributeHealthCheck(da) :+:
        orgApacheSlingHcCoreImplScriptableHealthCheck(da) :+:
        orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(da) :+:
        orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(da) :+:
        orgApacheSlingI18nImplI18NFilter(da) :+:
        orgApacheSlingI18nImplJcrResourceBundleProvider(da) :+:
        orgApacheSlingInstallerProviderJcrImplJcrInstaller(da) :+:
        orgApacheSlingJcrBaseInternalLoginAdminWhitelist(da) :+:
        orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(da) :+:
        orgApacheSlingJcrDavexImplServletsSlingDavExServlet(da) :+:
        orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(da) :+:
        orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(da) :+:
        orgApacheSlingJcrRepoinitImplRepositoryInitializer(da) :+:
        orgApacheSlingJcrRepoinitRepositoryInitializer(da) :+:
        orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(da) :+:
        orgApacheSlingJcrResourceInternalJcrSystemUserValidator(da) :+:
        orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(da) :+:
        orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(da) :+:
        orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(da) :+:
        orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(da) :+:
        orgApacheSlingJmxProviderImplJMXResourceProvider(da) :+:
        orgApacheSlingModelsImplModelAdapterFactory(da) :+:
        orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(da) :+:
        orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(da) :+:
        orgApacheSlingResourcemergerImplMergedResourceProviderFactory(da) :+:
        orgApacheSlingResourcemergerPickerOverriding(da) :+:
        orgApacheSlingScriptingCoreImplScriptCacheImpl(da) :+:
        orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(da) :+:
        orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(da) :+:
        orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(da) :+:
        orgApacheSlingScriptingJspJspScriptEngineFactory(da) :+:
        orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(da) :+:
        orgApacheSlingSecurityImplContentDispositionFilter(da) :+:
        orgApacheSlingSecurityImplReferrerFilter(da) :+:
        orgApacheSlingServiceusermappingImplServiceUserMapperImpl(da) :+:
        orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(da) :+:
        orgApacheSlingServletsGetDefaultGetServlet(da) :+:
        orgApacheSlingServletsGetImplVersionVersionInfoServlet(da) :+:
        orgApacheSlingServletsPostImplHelperChunkCleanUpTask(da) :+:
        orgApacheSlingServletsPostImplSlingPostServlet(da) :+:
        orgApacheSlingServletsResolverSlingServletResolver(da) :+:
        orgApacheSlingSettingsImplSlingSettingsServiceImpl(da) :+:
        orgApacheSlingStartupfilterImplStartupFilterImpl(da) :+:
        orgApacheSlingTenantInternalTenantProviderImpl(da) :+:
        orgApacheSlingTracerInternalLogTracer(da) :+:
        orgApacheSlingXssImplXSSFilterImpl(da)


    private def checkError(e: CommonError) = e match {
      case InvalidInput(_) => BadRequest(e)
      case MissingIdentifier(_) => BadRequest(e)
      case RecordNotFound(_) => NotFound(e)
      case _ => InternalServerError(e)
    }

    implicit class StringOps(s: String) {

      import java.time.format.DateTimeFormatter

      lazy val localformatter: DateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd")
      lazy val datetimeformatter: DateTimeFormatter =
      DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSSZ")

      def toLocalDateTime: LocalDateTime = LocalDateTime.parse(s,localformatter)
      def toZonedDateTime: ZonedDateTime = ZonedDateTime.parse(s, datetimeformatter)

    }

        /**
        * 
        * @return An endpoint representing a AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo
        */
        private def adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(da: DataAccessor): Endpoint[AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo] =
        post("system" :: "console" :: "configMgr" :: "Adaptive Form and Interactive Communication Web Channel Configuration" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("showPlaceholder").map(_.map(_.toBoolean)) :: paramOption("maximumCacheEntries").map(_.map(_.toInt)) :: paramOption("af.scripting.compatversion") :: paramOption("makeFileNameUnique").map(_.map(_.toBoolean)) :: paramOption("generatingCompliantData").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], showPlaceholder: Option[Boolean], maximumCacheEntries: Option[Int], afPeriodscriptingPeriodcompatversion: Option[String], makeFileNameUnique: Option[Boolean], generatingCompliantData: Option[Boolean]) =>
          da.Configmgr_adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(post, apply, delete, action, Dollarlocation, propertylist, showPlaceholder, maximumCacheEntries, afPeriodscriptingPeriodcompatversion, makeFileNameUnique, generatingCompliantData) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo
        */
        private def adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(da: DataAccessor): Endpoint[AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo] =
        post("system" :: "console" :: "configMgr" :: "Adaptive Form and Interactive Communication Web Channel Theme Configuration" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("fontList")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], fontList: Seq[String]) =>
          da.Configmgr_adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(post, apply, delete, action, Dollarlocation, propertylist, fontList) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a AnalyticsComponentQueryCacheServiceInfo
        */
        private def analyticsComponentQueryCacheService(da: DataAccessor): Endpoint[AnalyticsComponentQueryCacheServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "Analytics Component Query Cache Service" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.analytics.component.query.cache.size").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodanalyticsPeriodcomponentPeriodqueryPeriodcachePeriodsize: Option[Int]) =>
          da.Configmgr_analyticsComponentQueryCacheService(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodanalyticsPeriodcomponentPeriodqueryPeriodcachePeriodsize) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ApacheSlingHealthCheckResultHTMLSerializerInfo
        */
        private def apacheSlingHealthCheckResultHTMLSerializer(da: DataAccessor): Endpoint[ApacheSlingHealthCheckResultHTMLSerializerInfo] =
        post("system" :: "console" :: "configMgr" :: "Apache Sling Health Check Result HTML Serializer" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("styleString")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], styleString: Option[String]) =>
          da.Configmgr_apacheSlingHealthCheckResultHTMLSerializer(post, apply, delete, action, Dollarlocation, propertylist, styleString) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo
        */
        private def comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(da: DataAccessor): Endpoint[ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("formsManagerConfig.includeOOTBTemplates").map(_.map(_.toBoolean)) :: paramOption("formsManagerConfig.includeDeprecatedTemplates").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], formsManagerConfigPeriodincludeOOTBTemplates: Option[Boolean], formsManagerConfigPeriodincludeDeprecatedTemplates: Option[Boolean]) =>
          da.Configmgr_comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(post, apply, delete, action, Dollarlocation, propertylist, formsManagerConfigPeriodincludeOOTBTemplates, formsManagerConfigPeriodincludeDeprecatedTemplates) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeAemTransactionCoreImplTransactionRecorderInfo
        */
        private def comAdobeAemTransactionCoreImplTransactionRecorder(da: DataAccessor): Endpoint[ComAdobeAemTransactionCoreImplTransactionRecorderInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.aem.transaction.core.impl.TransactionRecorder" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("isTransactionRecordingEnabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], isTransactionRecordingEnabled: Option[Boolean]) =>
          da.Configmgr_comAdobeAemTransactionCoreImplTransactionRecorder(post, apply, delete, action, Dollarlocation, propertylist, isTransactionRecordingEnabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo
        */
        private def comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(da: DataAccessor): Endpoint[ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("hc.name") :: params("hc.tags") :: paramOption("hc.mbean.name")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodname: Option[String], hcPeriodtags: Seq[String], hcPeriodmbeanPeriodname: Option[String]) =>
          da.Configmgr_comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodname, hcPeriodtags, hcPeriodmbeanPeriodname) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo
        */
        private def comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(da: DataAccessor): Endpoint[ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("hc.name") :: params("hc.tags") :: paramOption("hc.mbean.name")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodname: Option[String], hcPeriodtags: Seq[String], hcPeriodmbeanPeriodname: Option[String]) =>
          da.Configmgr_comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodname, hcPeriodtags, hcPeriodmbeanPeriodname) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo
        */
        private def comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(da: DataAccessor): Endpoint[ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("pre-upgrade.maintenance.tasks") :: params("pre-upgrade.hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], preUpgradePeriodmaintenancePeriodtasks: Seq[String], preUpgradePeriodhcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(post, apply, delete, action, Dollarlocation, propertylist, preUpgradePeriodmaintenancePeriodtasks, preUpgradePeriodhcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo
        */
        private def comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(da: DataAccessor): Endpoint[ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("root.path") :: paramOption("fix.inconsistencies").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], rootPeriodpath: Option[String], fixPeriodinconsistencies: Option[Boolean]) =>
          da.Configmgr_comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(post, apply, delete, action, Dollarlocation, propertylist, rootPeriodpath, fixPeriodinconsistencies) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqAccountApiAccountManagementServiceInfo
        */
        private def comAdobeCqAccountApiAccountManagementService(da: DataAccessor): Endpoint[ComAdobeCqAccountApiAccountManagementServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.account.api.AccountManagementService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.accountmanager.token.validity.period").map(_.map(_.toInt)) :: paramOption("cq.accountmanager.config.requestnewaccount.mail") :: paramOption("cq.accountmanager.config.requestnewpwd.mail")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodaccountmanagerPeriodtokenPeriodvalidityPeriodperiod: Option[Int], cqPeriodaccountmanagerPeriodconfigPeriodrequestnewaccountPeriodmail: Option[String], cqPeriodaccountmanagerPeriodconfigPeriodrequestnewpwdPeriodmail: Option[String]) =>
          da.Configmgr_comAdobeCqAccountApiAccountManagementService(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodaccountmanagerPeriodtokenPeriodvalidityPeriodperiod, cqPeriodaccountmanagerPeriodconfigPeriodrequestnewaccountPeriodmail, cqPeriodaccountmanagerPeriodconfigPeriodrequestnewpwdPeriodmail) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqAccountImplAccountManagementServletInfo
        */
        private def comAdobeCqAccountImplAccountManagementServlet(da: DataAccessor): Endpoint[ComAdobeCqAccountImplAccountManagementServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.account.impl.AccountManagementServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.accountmanager.config.informnewaccount.mail") :: paramOption("cq.accountmanager.config.informnewpwd.mail")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodaccountmanagerPeriodconfigPeriodinformnewaccountPeriodmail: Option[String], cqPeriodaccountmanagerPeriodconfigPeriodinformnewpwdPeriodmail: Option[String]) =>
          da.Configmgr_comAdobeCqAccountImplAccountManagementServlet(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodaccountmanagerPeriodconfigPeriodinformnewaccountPeriodmail, cqPeriodaccountmanagerPeriodconfigPeriodinformnewpwdPeriodmail) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqAddressImplLocationLocationListServletInfo
        */
        private def comAdobeCqAddressImplLocationLocationListServlet(da: DataAccessor): Endpoint[ComAdobeCqAddressImplLocationLocationListServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.address.impl.location.LocationListServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.address.location.default.maxResults").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodaddressPeriodlocationPerioddefaultPeriodmaxResults: Option[Int]) =>
          da.Configmgr_comAdobeCqAddressImplLocationLocationListServlet(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodaddressPeriodlocationPerioddefaultPeriodmaxResults) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqAuditPurgeDamInfo
        */
        private def comAdobeCqAuditPurgeDam(da: DataAccessor): Endpoint[ComAdobeCqAuditPurgeDamInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.audit.purge.Dam" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("auditlog.rule.name") :: paramOption("auditlog.rule.contentpath") :: paramOption("auditlog.rule.minimumage").map(_.map(_.toInt)) :: paramOption("auditlog.rule.types")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], auditlogPeriodrulePeriodname: Option[String], auditlogPeriodrulePeriodcontentpath: Option[String], auditlogPeriodrulePeriodminimumage: Option[Int], auditlogPeriodrulePeriodtypes: Option[String]) =>
          da.Configmgr_comAdobeCqAuditPurgeDam(post, apply, delete, action, Dollarlocation, propertylist, auditlogPeriodrulePeriodname, auditlogPeriodrulePeriodcontentpath, auditlogPeriodrulePeriodminimumage, auditlogPeriodrulePeriodtypes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqAuditPurgePagesInfo
        */
        private def comAdobeCqAuditPurgePages(da: DataAccessor): Endpoint[ComAdobeCqAuditPurgePagesInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.audit.purge.Pages" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("auditlog.rule.name") :: paramOption("auditlog.rule.contentpath") :: paramOption("auditlog.rule.minimumage").map(_.map(_.toInt)) :: paramOption("auditlog.rule.types")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], auditlogPeriodrulePeriodname: Option[String], auditlogPeriodrulePeriodcontentpath: Option[String], auditlogPeriodrulePeriodminimumage: Option[Int], auditlogPeriodrulePeriodtypes: Option[String]) =>
          da.Configmgr_comAdobeCqAuditPurgePages(post, apply, delete, action, Dollarlocation, propertylist, auditlogPeriodrulePeriodname, auditlogPeriodrulePeriodcontentpath, auditlogPeriodrulePeriodminimumage, auditlogPeriodrulePeriodtypes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqAuditPurgeReplicationInfo
        */
        private def comAdobeCqAuditPurgeReplication(da: DataAccessor): Endpoint[ComAdobeCqAuditPurgeReplicationInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.audit.purge.Replication" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("auditlog.rule.name") :: paramOption("auditlog.rule.contentpath") :: paramOption("auditlog.rule.minimumage").map(_.map(_.toInt)) :: paramOption("auditlog.rule.types")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], auditlogPeriodrulePeriodname: Option[String], auditlogPeriodrulePeriodcontentpath: Option[String], auditlogPeriodrulePeriodminimumage: Option[Int], auditlogPeriodrulePeriodtypes: Option[String]) =>
          da.Configmgr_comAdobeCqAuditPurgeReplication(post, apply, delete, action, Dollarlocation, propertylist, auditlogPeriodrulePeriodname, auditlogPeriodrulePeriodcontentpath, auditlogPeriodrulePeriodminimumage, auditlogPeriodrulePeriodtypes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo
        */
        private def comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(da: DataAccessor): Endpoint[ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("keypair.id") :: paramOption("keypair.alias") :: params("cdnrewriter.attributes") :: paramOption("cdn.rewriter.distribution.domain")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], keypairPeriodid: Option[String], keypairPeriodalias: Option[String], cdnrewriterPeriodattributes: Seq[String], cdnPeriodrewriterPerioddistributionPerioddomain: Option[String]) =>
          da.Configmgr_comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, keypairPeriodid, keypairPeriodalias, cdnrewriterPeriodattributes, cdnPeriodrewriterPerioddistributionPerioddomain) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo
        */
        private def comAdobeCqCdnRewriterImplCDNConfigServiceImpl(da: DataAccessor): Endpoint[ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cdn.config.distribution.domain") :: paramOption("cdn.config.enable.rewriting").map(_.map(_.toBoolean)) :: params("cdn.config.path.prefixes") :: paramOption("cdn.config.cdnttl").map(_.map(_.toInt)) :: paramOption("cdn.config.application.protocol")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cdnPeriodconfigPerioddistributionPerioddomain: Option[String], cdnPeriodconfigPeriodenablePeriodrewriting: Option[Boolean], cdnPeriodconfigPeriodpathPeriodprefixes: Seq[String], cdnPeriodconfigPeriodcdnttl: Option[Int], cdnPeriodconfigPeriodapplicationPeriodprotocol: Option[String]) =>
          da.Configmgr_comAdobeCqCdnRewriterImplCDNConfigServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, cdnPeriodconfigPerioddistributionPerioddomain, cdnPeriodconfigPeriodenablePeriodrewriting, cdnPeriodconfigPeriodpathPeriodprefixes, cdnPeriodconfigPeriodcdnttl, cdnPeriodconfigPeriodapplicationPeriodprotocol) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqCdnRewriterImplCDNRewriterInfo
        */
        private def comAdobeCqCdnRewriterImplCDNRewriter(da: DataAccessor): Endpoint[ComAdobeCqCdnRewriterImplCDNRewriterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.cdn.rewriter.impl.CDNRewriter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: params("cdnrewriter.attributes") :: paramOption("cdn.rewriter.distribution.domain")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], cdnrewriterPeriodattributes: Seq[String], cdnPeriodrewriterPerioddistributionPerioddomain: Option[String]) =>
          da.Configmgr_comAdobeCqCdnRewriterImplCDNRewriter(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, cdnrewriterPeriodattributes, cdnPeriodrewriterPerioddistributionPerioddomain) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo
        */
        private def comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(da: DataAccessor): Endpoint[ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("flush.agents")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], flushPeriodagents: Seq[String]) =>
          da.Configmgr_comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(post, apply, delete, action, Dollarlocation, propertylist, flushPeriodagents) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo
        */
        private def comAdobeCqCommerceImplAssetDynamicImageHandler(da: DataAccessor): Endpoint[ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.commerce.impl.asset.DynamicImageHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.commerce.asset.handler.active").map(_.map(_.toBoolean)) :: paramOption("cq.commerce.asset.handler.name")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodcommercePeriodassetPeriodhandlerPeriodactive: Option[Boolean], cqPeriodcommercePeriodassetPeriodhandlerPeriodname: Option[String]) =>
          da.Configmgr_comAdobeCqCommerceImplAssetDynamicImageHandler(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodcommercePeriodassetPeriodhandlerPeriodactive, cqPeriodcommercePeriodassetPeriodhandlerPeriodname) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo
        */
        private def comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(da: DataAccessor): Endpoint[ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.commerce.asset.handler.fallback")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodcommercePeriodassetPeriodhandlerPeriodfallback: Option[String]) =>
          da.Configmgr_comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodcommercePeriodassetPeriodhandlerPeriodfallback) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqCommerceImplAssetStaticImageHandlerInfo
        */
        private def comAdobeCqCommerceImplAssetStaticImageHandler(da: DataAccessor): Endpoint[ComAdobeCqCommerceImplAssetStaticImageHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.commerce.impl.asset.StaticImageHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.commerce.asset.handler.active").map(_.map(_.toBoolean)) :: paramOption("cq.commerce.asset.handler.name")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodcommercePeriodassetPeriodhandlerPeriodactive: Option[Boolean], cqPeriodcommercePeriodassetPeriodhandlerPeriodname: Option[String]) =>
          da.Configmgr_comAdobeCqCommerceImplAssetStaticImageHandler(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodcommercePeriodassetPeriodhandlerPeriodactive, cqPeriodcommercePeriodassetPeriodhandlerPeriodname) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqCommerceImplAssetVideoHandlerInfo
        */
        private def comAdobeCqCommerceImplAssetVideoHandler(da: DataAccessor): Endpoint[ComAdobeCqCommerceImplAssetVideoHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.commerce.impl.asset.VideoHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.commerce.asset.handler.active").map(_.map(_.toBoolean)) :: paramOption("cq.commerce.asset.handler.name")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodcommercePeriodassetPeriodhandlerPeriodactive: Option[Boolean], cqPeriodcommercePeriodassetPeriodhandlerPeriodname: Option[String]) =>
          da.Configmgr_comAdobeCqCommerceImplAssetVideoHandler(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodcommercePeriodassetPeriodhandlerPeriodactive, cqPeriodcommercePeriodassetPeriodhandlerPeriodname) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo
        */
        private def comAdobeCqCommerceImplPromotionPromotionManagerImpl(da: DataAccessor): Endpoint[ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.commerce.promotion.root")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodcommercePeriodpromotionPeriodroot: Option[String]) =>
          da.Configmgr_comAdobeCqCommerceImplPromotionPromotionManagerImpl(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodcommercePeriodpromotionPeriodroot) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo
        */
        private def comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(da: DataAccessor): Endpoint[ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.commerce.cataloggenerator.bucketsize").map(_.map(_.toInt)) :: paramOption("cq.commerce.cataloggenerator.bucketname") :: params("cq.commerce.cataloggenerator.excludedtemplateproperties")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodcommercePeriodcataloggeneratorPeriodbucketsize: Option[Int], cqPeriodcommercePeriodcataloggeneratorPeriodbucketname: Option[String], cqPeriodcommercePeriodcataloggeneratorPeriodexcludedtemplateproperties: Seq[String]) =>
          da.Configmgr_comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodcommercePeriodcataloggeneratorPeriodbucketsize, cqPeriodcommercePeriodcataloggeneratorPeriodbucketname, cqPeriodcommercePeriodcataloggeneratorPeriodexcludedtemplateproperties) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqCommercePimImplPageEventListenerInfo
        */
        private def comAdobeCqCommercePimImplPageEventListener(da: DataAccessor): Endpoint[ComAdobeCqCommercePimImplPageEventListenerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.commerce.pim.impl.PageEventListener" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.commerce.pageeventlistener.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodcommercePeriodpageeventlistenerPeriodenabled: Option[Boolean]) =>
          da.Configmgr_comAdobeCqCommercePimImplPageEventListener(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodcommercePeriodpageeventlistenerPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo
        */
        private def comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(da: DataAccessor): Endpoint[ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("Feed generator algorithm")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], feed generator algorithm: Option[String]) =>
          da.Configmgr_comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, feed generator algorithm) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo
        */
        private def comAdobeCqContentinsightImplReportingServicesSettingsProvider(da: DataAccessor): Endpoint[ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("reportingservices.url")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], reportingservicesPeriodurl: Option[String]) =>
          da.Configmgr_comAdobeCqContentinsightImplReportingServicesSettingsProvider(post, apply, delete, action, Dollarlocation, propertylist, reportingservicesPeriodurl) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo
        */
        private def comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(da: DataAccessor): Endpoint[ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("brightedge.url")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], brightedgePeriodurl: Option[String]) =>
          da.Configmgr_comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(post, apply, delete, action, Dollarlocation, propertylist, brightedgePeriodurl) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo
        */
        private def comAdobeCqContentinsightImplServletsReportingServicesProxyServle(da: DataAccessor): Endpoint[ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("reportingservices.proxy.whitelist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], reportingservicesPeriodproxyPeriodwhitelist: Seq[String]) =>
          da.Configmgr_comAdobeCqContentinsightImplServletsReportingServicesProxyServle(post, apply, delete, action, Dollarlocation, propertylist, reportingservicesPeriodproxyPeriodwhitelist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqDamCfmImplComponentComponentConfigImplInfo
        */
        private def comAdobeCqDamCfmImplComponentComponentConfigImpl(da: DataAccessor): Endpoint[ComAdobeCqDamCfmImplComponentComponentConfigImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("dam.cfm.component.resourceType") :: paramOption("dam.cfm.component.fileReferenceProp") :: paramOption("dam.cfm.component.elementsProp") :: paramOption("dam.cfm.component.variationProp")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], damPeriodcfmPeriodcomponentPeriodresourceType: Option[String], damPeriodcfmPeriodcomponentPeriodfileReferenceProp: Option[String], damPeriodcfmPeriodcomponentPeriodelementsProp: Option[String], damPeriodcfmPeriodcomponentPeriodvariationProp: Option[String]) =>
          da.Configmgr_comAdobeCqDamCfmImplComponentComponentConfigImpl(post, apply, delete, action, Dollarlocation, propertylist, damPeriodcfmPeriodcomponentPeriodresourceType, damPeriodcfmPeriodcomponentPeriodfileReferenceProp, damPeriodcfmPeriodcomponentPeriodelementsProp, damPeriodcfmPeriodcomponentPeriodvariationProp) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqDamCfmImplConfFeatureConfigImplInfo
        */
        private def comAdobeCqDamCfmImplConfFeatureConfigImpl(da: DataAccessor): Endpoint[ComAdobeCqDamCfmImplConfFeatureConfigImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("dam.cfm.resourceTypes") :: params("dam.cfm.referenceProperties")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], damPeriodcfmPeriodresourceTypes: Seq[String], damPeriodcfmPeriodreferenceProperties: Seq[String]) =>
          da.Configmgr_comAdobeCqDamCfmImplConfFeatureConfigImpl(post, apply, delete, action, Dollarlocation, propertylist, damPeriodcfmPeriodresourceTypes, damPeriodcfmPeriodreferenceProperties) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo
        */
        private def comAdobeCqDamCfmImplContentRewriterAssetProcessor(da: DataAccessor): Endpoint[ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("pipeline.type")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], pipelinePeriodtype: Option[String]) =>
          da.Configmgr_comAdobeCqDamCfmImplContentRewriterAssetProcessor(post, apply, delete, action, Dollarlocation, propertylist, pipelinePeriodtype) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo
        */
        private def comAdobeCqDamCfmImplContentRewriterParRangeFilter(da: DataAccessor): Endpoint[ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("pipeline.type")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], pipelinePeriodtype: Option[String]) =>
          da.Configmgr_comAdobeCqDamCfmImplContentRewriterParRangeFilter(post, apply, delete, action, Dollarlocation, propertylist, pipelinePeriodtype) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo
        */
        private def comAdobeCqDamCfmImplContentRewriterPayloadFilter(da: DataAccessor): Endpoint[ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("pipeline.type")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], pipelinePeriodtype: Option[String]) =>
          da.Configmgr_comAdobeCqDamCfmImplContentRewriterPayloadFilter(post, apply, delete, action, Dollarlocation, propertylist, pipelinePeriodtype) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqDamDmProcessImagePTiffManagerImplInfo
        */
        private def comAdobeCqDamDmProcessImagePTiffManagerImpl(da: DataAccessor): Endpoint[ComAdobeCqDamDmProcessImagePTiffManagerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.dam.dm.process.image.PTiffManagerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("maxMemory").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], maxMemory: Option[Int]) =>
          da.Configmgr_comAdobeCqDamDmProcessImagePTiffManagerImpl(post, apply, delete, action, Dollarlocation, propertylist, maxMemory) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo
        */
        private def comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(da: DataAccessor): Endpoint[ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("dmreplicateonmodify.enabled").map(_.map(_.toBoolean)) :: paramOption("dmreplicateonmodify.forcesyncdeletes").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], dmreplicateonmodifyPeriodenabled: Option[Boolean], dmreplicateonmodifyPeriodforcesyncdeletes: Option[Boolean]) =>
          da.Configmgr_comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(post, apply, delete, action, Dollarlocation, propertylist, dmreplicateonmodifyPeriodenabled, dmreplicateonmodifyPeriodforcesyncdeletes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo
        */
        private def comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(da: DataAccessor): Endpoint[ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("com.adobe.dam.mac.sync.client.so.timeout").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], comPeriodadobePerioddamPeriodmacPeriodsyncPeriodclientPeriodsoPeriodtimeout: Option[Int]) =>
          da.Configmgr_comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePerioddamPeriodmacPeriodsyncPeriodclientPeriodsoPeriodtimeout) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo
        */
        private def comAdobeCqDamMacSyncImplDAMSyncServiceImpl(da: DataAccessor): Endpoint[ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths") :: paramOption("com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions").map(_.map(_.toBoolean)) :: paramOption("com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms").map(_.map(_.toInt)) :: paramOption("com.adobe.cq.dam.mac.sync.damsyncservice.platform")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodregisteredPaths: Seq[String], comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodsyncPeriodrenditions: Option[Boolean], comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodreplicatePeriodthreadPeriodwaitPeriodms: Option[Int], comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodplatform: Option[String]) =>
          da.Configmgr_comAdobeCqDamMacSyncImplDAMSyncServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodregisteredPaths, comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodsyncPeriodrenditions, comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodreplicatePeriodthreadPeriodwaitPeriodms, comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodplatform) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo
        */
        private def comAdobeCqDamProcessorNuiImplNuiAssetProcessor(da: DataAccessor): Endpoint[ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("nuiEnabled").map(_.map(_.toBoolean)) :: paramOption("nuiServiceUrl") :: paramOption("nuiApiKey")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], nuiEnabled: Option[Boolean], nuiServiceUrl: Option[String], nuiApiKey: Option[String]) =>
          da.Configmgr_comAdobeCqDamProcessorNuiImplNuiAssetProcessor(post, apply, delete, action, Dollarlocation, propertylist, nuiEnabled, nuiServiceUrl, nuiApiKey) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqDamS7imagingImplIsImageServerComponentInfo
        */
        private def comAdobeCqDamS7imagingImplIsImageServerComponent(da: DataAccessor): Endpoint[ComAdobeCqDamS7imagingImplIsImageServerComponentInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("TcpPort") :: paramOption("AllowRemoteAccess").map(_.map(_.toBoolean)) :: paramOption("MaxRenderRgnPixels") :: paramOption("MaxMessageSize") :: paramOption("RandomAccessUrlTimeout").map(_.map(_.toInt)) :: paramOption("WorkerThreads").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], tcpPort: Option[String], allowRemoteAccess: Option[Boolean], maxRenderRgnPixels: Option[String], maxMessageSize: Option[String], randomAccessUrlTimeout: Option[Int], workerThreads: Option[Int]) =>
          da.Configmgr_comAdobeCqDamS7imagingImplIsImageServerComponent(post, apply, delete, action, Dollarlocation, propertylist, tcpPort, allowRemoteAccess, maxRenderRgnPixels, maxMessageSize, randomAccessUrlTimeout, workerThreads) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo
        */
        private def comAdobeCqDamS7imagingImplPsPlatformServerServlet(da: DataAccessor): Endpoint[ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cache.enable").map(_.map(_.toBoolean)) :: params("cache.rootPaths") :: paramOption("cache.maxSize").map(_.map(_.toInt)) :: paramOption("cache.maxEntries").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cachePeriodenable: Option[Boolean], cachePeriodrootPaths: Seq[String], cachePeriodmaxSize: Option[Int], cachePeriodmaxEntries: Option[Int]) =>
          da.Configmgr_comAdobeCqDamS7imagingImplPsPlatformServerServlet(post, apply, delete, action, Dollarlocation, propertylist, cachePeriodenable, cachePeriodrootPaths, cachePeriodmaxSize, cachePeriodmaxEntries) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo
        */
        private def comAdobeCqDamWebdavImplIoAssetIOHandler(da: DataAccessor): Endpoint[ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.dam.webdav.impl.io.AssetIOHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("pathPrefix") :: paramOption("createVersion").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], pathPrefix: Option[String], createVersion: Option[Boolean]) =>
          da.Configmgr_comAdobeCqDamWebdavImplIoAssetIOHandler(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, pathPrefix, createVersion) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo
        */
        private def comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(da: DataAccessor): Endpoint[ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.webdav.version.linking.enable").map(_.map(_.toBoolean)) :: paramOption("cq.dam.webdav.version.linking.scheduler.period").map(_.map(_.toInt)) :: paramOption("cq.dam.webdav.version.linking.staging.timeout").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodenable: Option[Boolean], cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodschedulerPeriodperiod: Option[Int], cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodstagingPeriodtimeout: Option[Int]) =>
          da.Configmgr_comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodenable, cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodschedulerPeriodperiod, cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodstagingPeriodtimeout) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo
        */
        private def comAdobeCqDamWebdavImplIoSpecialFilesHandler(da: DataAccessor): Endpoint[ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], comPerioddayPeriodcqPerioddamPeriodcorePeriodimplPeriodioPeriodSpecialFilesHandlerPeriodfilepatters: Seq[String]) =>
          da.Configmgr_comAdobeCqDamWebdavImplIoSpecialFilesHandler(post, apply, delete, action, Dollarlocation, propertylist, comPerioddayPeriodcqPerioddamPeriodcorePeriodimplPeriodioPeriodSpecialFilesHandlerPeriodfilepatters) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqDeserfwImplDeserializationFirewallImplInfo
        */
        private def comAdobeCqDeserfwImplDeserializationFirewallImpl(da: DataAccessor): Endpoint[ComAdobeCqDeserfwImplDeserializationFirewallImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.deserfw.impl.DeserializationFirewallImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("firewall.deserialization.whitelist") :: params("firewall.deserialization.blacklist") :: paramOption("firewall.deserialization.diagnostics")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], firewallPerioddeserializationPeriodwhitelist: Seq[String], firewallPerioddeserializationPeriodblacklist: Seq[String], firewallPerioddeserializationPerioddiagnostics: Option[String]) =>
          da.Configmgr_comAdobeCqDeserfwImplDeserializationFirewallImpl(post, apply, delete, action, Dollarlocation, propertylist, firewallPerioddeserializationPeriodwhitelist, firewallPerioddeserializationPeriodblacklist, firewallPerioddeserializationPerioddiagnostics) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqDtmImplServiceDTMWebServiceImplInfo
        */
        private def comAdobeCqDtmImplServiceDTMWebServiceImpl(da: DataAccessor): Endpoint[ComAdobeCqDtmImplServiceDTMWebServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.dtm.impl.service.DTMWebServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("connection.timeout").map(_.map(_.toInt)) :: paramOption("socket.timeout").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], connectionPeriodtimeout: Option[Int], socketPeriodtimeout: Option[Int]) =>
          da.Configmgr_comAdobeCqDtmImplServiceDTMWebServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, connectionPeriodtimeout, socketPeriodtimeout) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqDtmImplServletsDTMDeployHookServletInfo
        */
        private def comAdobeCqDtmImplServletsDTMDeployHookServlet(da: DataAccessor): Endpoint[ComAdobeCqDtmImplServletsDTMDeployHookServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("dtm.staging.ip.whitelist") :: params("dtm.production.ip.whitelist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], dtmPeriodstagingPeriodipPeriodwhitelist: Seq[String], dtmPeriodproductionPeriodipPeriodwhitelist: Seq[String]) =>
          da.Configmgr_comAdobeCqDtmImplServletsDTMDeployHookServlet(post, apply, delete, action, Dollarlocation, propertylist, dtmPeriodstagingPeriodipPeriodwhitelist, dtmPeriodproductionPeriodipPeriodwhitelist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqDtmReactorImplServiceWebServiceImplInfo
        */
        private def comAdobeCqDtmReactorImplServiceWebServiceImpl(da: DataAccessor): Endpoint[ComAdobeCqDtmReactorImplServiceWebServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("endpointUri") :: paramOption("connectionTimeout").map(_.map(_.toInt)) :: paramOption("socketTimeout").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], endpointUri: Option[String], connectionTimeout: Option[Int], socketTimeout: Option[Int]) =>
          da.Configmgr_comAdobeCqDtmReactorImplServiceWebServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, endpointUri, connectionTimeout, socketTimeout) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo
        */
        private def comAdobeCqExperiencelogImplExperienceLogConfigServlet(da: DataAccessor): Endpoint[ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enabled").map(_.map(_.toBoolean)) :: params("disabledForGroups")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enabled: Option[Boolean], disabledForGroups: Seq[String]) =>
          da.Configmgr_comAdobeCqExperiencelogImplExperienceLogConfigServlet(post, apply, delete, action, Dollarlocation, propertylist, enabled, disabledForGroups) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqHcContentPackagesHealthCheckInfo
        */
        private def comAdobeCqHcContentPackagesHealthCheck(da: DataAccessor): Endpoint[ComAdobeCqHcContentPackagesHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.hc.ContentPackagesHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("hc.name") :: params("hc.tags") :: paramOption("hc.mbean.name") :: params("package.names")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodname: Option[String], hcPeriodtags: Seq[String], hcPeriodmbeanPeriodname: Option[String], packagePeriodnames: Seq[String]) =>
          da.Configmgr_comAdobeCqHcContentPackagesHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodname, hcPeriodtags, hcPeriodmbeanPeriodname, packagePeriodnames) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqHistoryImplHistoryRequestFilterInfo
        */
        private def comAdobeCqHistoryImplHistoryRequestFilter(da: DataAccessor): Endpoint[ComAdobeCqHistoryImplHistoryRequestFilterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.history.impl.HistoryRequestFilter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("history.requestFilter.excludedSelectors") :: params("history.requestFilter.excludedExtensions")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], historyPeriodrequestFilterPeriodexcludedSelectors: Seq[String], historyPeriodrequestFilterPeriodexcludedExtensions: Seq[String]) =>
          da.Configmgr_comAdobeCqHistoryImplHistoryRequestFilter(post, apply, delete, action, Dollarlocation, propertylist, historyPeriodrequestFilterPeriodexcludedSelectors, historyPeriodrequestFilterPeriodexcludedExtensions) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqHistoryImplHistoryServiceImplInfo
        */
        private def comAdobeCqHistoryImplHistoryServiceImpl(da: DataAccessor): Endpoint[ComAdobeCqHistoryImplHistoryServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.history.impl.HistoryServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("history.service.resourceTypes") :: params("history.service.pathFilter")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], historyPeriodservicePeriodresourceTypes: Seq[String], historyPeriodservicePeriodpathFilter: Seq[String]) =>
          da.Configmgr_comAdobeCqHistoryImplHistoryServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, historyPeriodservicePeriodresourceTypes, historyPeriodservicePeriodpathFilter) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo
        */
        private def comAdobeCqInboxImplTypeproviderItemTypeProvider(da: DataAccessor): Endpoint[ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("inbox.impl.typeprovider.registrypaths") :: params("inbox.impl.typeprovider.legacypaths") :: paramOption("inbox.impl.typeprovider.defaulturl.failureitem") :: paramOption("inbox.impl.typeprovider.defaulturl.workitem") :: paramOption("inbox.impl.typeprovider.defaulturl.task")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], inboxPeriodimplPeriodtypeproviderPeriodregistrypaths: Seq[String], inboxPeriodimplPeriodtypeproviderPeriodlegacypaths: Seq[String], inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodfailureitem: Option[String], inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodworkitem: Option[String], inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodtask: Option[String]) =>
          da.Configmgr_comAdobeCqInboxImplTypeproviderItemTypeProvider(post, apply, delete, action, Dollarlocation, propertylist, inboxPeriodimplPeriodtypeproviderPeriodregistrypaths, inboxPeriodimplPeriodtypeproviderPeriodlegacypaths, inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodfailureitem, inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodworkitem, inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodtask) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqProjectsImplServletProjectImageServletInfo
        */
        private def comAdobeCqProjectsImplServletProjectImageServlet(da: DataAccessor): Endpoint[ComAdobeCqProjectsImplServletProjectImageServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.projects.impl.servlet.ProjectImageServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("image.quality") :: paramOption("image.supported.resolutions")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], imagePeriodquality: Option[String], imagePeriodsupportedPeriodresolutions: Option[String]) =>
          da.Configmgr_comAdobeCqProjectsImplServletProjectImageServlet(post, apply, delete, action, Dollarlocation, propertylist, imagePeriodquality, imagePeriodsupportedPeriodresolutions) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqProjectsPurgeSchedulerInfo
        */
        private def comAdobeCqProjectsPurgeScheduler(da: DataAccessor): Endpoint[ComAdobeCqProjectsPurgeSchedulerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.projects.purge.Scheduler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("scheduledpurge.name") :: paramOption("scheduledpurge.purgeActive").map(_.map(_.toBoolean)) :: params("scheduledpurge.templates") :: paramOption("scheduledpurge.purgeGroups").map(_.map(_.toBoolean)) :: paramOption("scheduledpurge.purgeAssets").map(_.map(_.toBoolean)) :: paramOption("scheduledpurge.terminateRunningWorkflows").map(_.map(_.toBoolean)) :: paramOption("scheduledpurge.daysold").map(_.map(_.toInt)) :: paramOption("scheduledpurge.saveThreshold").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], scheduledpurgePeriodname: Option[String], scheduledpurgePeriodpurgeActive: Option[Boolean], scheduledpurgePeriodtemplates: Seq[String], scheduledpurgePeriodpurgeGroups: Option[Boolean], scheduledpurgePeriodpurgeAssets: Option[Boolean], scheduledpurgePeriodterminateRunningWorkflows: Option[Boolean], scheduledpurgePerioddaysold: Option[Int], scheduledpurgePeriodsaveThreshold: Option[Int]) =>
          da.Configmgr_comAdobeCqProjectsPurgeScheduler(post, apply, delete, action, Dollarlocation, propertylist, scheduledpurgePeriodname, scheduledpurgePeriodpurgeActive, scheduledpurgePeriodtemplates, scheduledpurgePeriodpurgeGroups, scheduledpurgePeriodpurgeAssets, scheduledpurgePeriodterminateRunningWorkflows, scheduledpurgePerioddaysold, scheduledpurgePeriodsaveThreshold) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqScheduledExporterImplScheduledExporterImplInfo
        */
        private def comAdobeCqScheduledExporterImplScheduledExporterImpl(da: DataAccessor): Endpoint[ComAdobeCqScheduledExporterImplScheduledExporterImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("include.paths") :: paramOption("exporter.user")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], includePeriodpaths: Seq[String], exporterPerioduser: Option[String]) =>
          da.Configmgr_comAdobeCqScheduledExporterImplScheduledExporterImpl(post, apply, delete, action, Dollarlocation, propertylist, includePeriodpaths, exporterPerioduser) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo
        */
        private def comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(da: DataAccessor): Endpoint[ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("com.adobe.cq.screens.analytics.impl.url") :: paramOption("com.adobe.cq.screens.analytics.impl.apikey") :: paramOption("com.adobe.cq.screens.analytics.impl.project") :: paramOption("com.adobe.cq.screens.analytics.impl.environment") :: paramOption("com.adobe.cq.screens.analytics.impl.sendFrequency").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodurl: Option[String], comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodapikey: Option[String], comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodproject: Option[String], comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodenvironment: Option[String], comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodsendFrequency: Option[Int]) =>
          da.Configmgr_comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodurl, comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodapikey, comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodproject, comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodenvironment, comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodsendFrequency) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqScreensDeviceImplDeviceServiceInfo
        */
        private def comAdobeCqScreensDeviceImplDeviceService(da: DataAccessor): Endpoint[ComAdobeCqScreensDeviceImplDeviceServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.screens.device.impl.DeviceService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("com.adobe.aem.screens.player.pingfrequency").map(_.map(_.toInt)) :: paramOption("com.adobe.aem.screens.device.pasword.specialchars") :: paramOption("com.adobe.aem.screens.device.pasword.minlowercasechars").map(_.map(_.toInt)) :: paramOption("com.adobe.aem.screens.device.pasword.minuppercasechars").map(_.map(_.toInt)) :: paramOption("com.adobe.aem.screens.device.pasword.minnumberchars").map(_.map(_.toInt)) :: paramOption("com.adobe.aem.screens.device.pasword.minspecialchars").map(_.map(_.toInt)) :: paramOption("com.adobe.aem.screens.device.pasword.minlength").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], comPeriodadobePeriodaemPeriodscreensPeriodplayerPeriodpingfrequency: Option[Int], comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodspecialchars: Option[String], comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlowercasechars: Option[Int], comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminuppercasechars: Option[Int], comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminnumberchars: Option[Int], comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminspecialchars: Option[Int], comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlength: Option[Int]) =>
          da.Configmgr_comAdobeCqScreensDeviceImplDeviceService(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodaemPeriodscreensPeriodplayerPeriodpingfrequency, comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodspecialchars, comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlowercasechars, comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminuppercasechars, comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminnumberchars, comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminspecialchars, comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlength) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo
        */
        private def comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(da: DataAccessor): Endpoint[ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("deviceRegistrationTimeout").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], deviceRegistrationTimeout: Option[Int]) =>
          da.Configmgr_comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, deviceRegistrationTimeout) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo
        */
        private def comAdobeCqScreensImplHandlerChannelsUpdateHandler(da: DataAccessor): Endpoint[ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.pagesupdatehandler.imageresourcetypes") :: params("cq.pagesupdatehandler.productresourcetypes") :: params("cq.pagesupdatehandler.videoresourcetypes") :: params("cq.pagesupdatehandler.dynamicsequenceresourcetypes") :: params("cq.pagesupdatehandler.previewmodepaths")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodpagesupdatehandlerPeriodimageresourcetypes: Seq[String], cqPeriodpagesupdatehandlerPeriodproductresourcetypes: Seq[String], cqPeriodpagesupdatehandlerPeriodvideoresourcetypes: Seq[String], cqPeriodpagesupdatehandlerPerioddynamicsequenceresourcetypes: Seq[String], cqPeriodpagesupdatehandlerPeriodpreviewmodepaths: Seq[String]) =>
          da.Configmgr_comAdobeCqScreensImplHandlerChannelsUpdateHandler(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodpagesupdatehandlerPeriodimageresourcetypes, cqPeriodpagesupdatehandlerPeriodproductresourcetypes, cqPeriodpagesupdatehandlerPeriodvideoresourcetypes, cqPeriodpagesupdatehandlerPerioddynamicsequenceresourcetypes, cqPeriodpagesupdatehandlerPeriodpreviewmodepaths) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo
        */
        private def comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(da: DataAccessor): Endpoint[ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("scheduler.expression")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], schedulerPeriodexpression: Option[String]) =>
          da.Configmgr_comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo
        */
        private def comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(da: DataAccessor): Endpoint[ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("com.adobe.aem.screens.impl.remote.request_timeout").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], comPeriodadobePeriodaemPeriodscreensPeriodimplPeriodremotePeriodrequestTimeout: Option[Int]) =>
          da.Configmgr_comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodaemPeriodscreensPeriodimplPeriodremotePeriodrequestTimeout) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqScreensImplScreensChannelPostProcessorInfo
        */
        private def comAdobeCqScreensImplScreensChannelPostProcessor(da: DataAccessor): Endpoint[ComAdobeCqScreensImplScreensChannelPostProcessorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.screens.impl.ScreensChannelPostProcessor" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("screens.channels.properties.to.remove")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], screensPeriodchannelsPeriodpropertiesPeriodtoPeriodremove: Seq[String]) =>
          da.Configmgr_comAdobeCqScreensImplScreensChannelPostProcessor(post, apply, delete, action, Dollarlocation, propertylist, screensPeriodchannelsPeriodpropertiesPeriodtoPeriodremove) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo
        */
        private def comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(da: DataAccessor): Endpoint[ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath") :: paramOption("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency") :: paramOption("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout").map(_.map(_.toInt)) :: paramOption("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients") :: paramOption("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver") :: paramOption("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport").map(_.map(_.toInt)) :: paramOption("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls").map(_.map(_.toBoolean)) :: paramOption("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username") :: paramOption("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodprojectPath: Seq[String], comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodscheduleFrequency: Option[String], comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpingTimeout: Option[Int], comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodrecipients: Option[String], comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpserver: Option[String], comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpport: Option[Int], comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusetls: Option[Boolean], comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusername: Option[String], comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpassword: Option[String]) =>
          da.Configmgr_comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodprojectPath, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodscheduleFrequency, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpingTimeout, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodrecipients, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpserver, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpport, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusetls, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusername, comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpassword) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo
        */
        private def comAdobeCqScreensMqActivemqImplArtemisJMSProvider(da: DataAccessor): Endpoint[ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("global.size").map(_.map(_.toInt)) :: paramOption("max.disk.usage").map(_.map(_.toInt)) :: paramOption("persistence.enabled").map(_.map(_.toBoolean)) :: paramOption("thread.pool.max.size").map(_.map(_.toInt)) :: paramOption("scheduled.thread.pool.max.size").map(_.map(_.toInt)) :: paramOption("graceful.shutdown.timeout").map(_.map(_.toInt)) :: params("queues") :: params("topics") :: paramOption("addresses.max.delivery.attempts").map(_.map(_.toInt)) :: paramOption("addresses.expiry.delay").map(_.map(_.toInt)) :: paramOption("addresses.address.full.message.policy") :: paramOption("addresses.max.size.bytes").map(_.map(_.toInt)) :: paramOption("addresses.page.size.bytes").map(_.map(_.toInt)) :: paramOption("addresses.page.cache.max.size").map(_.map(_.toInt)) :: paramOption("cluster.user") :: paramOption("cluster.password") :: paramOption("cluster.call.timeout").map(_.map(_.toInt)) :: paramOption("cluster.call.failover.timeout").map(_.map(_.toInt)) :: paramOption("cluster.client.failure.check.period").map(_.map(_.toInt)) :: paramOption("cluster.notification.attempts").map(_.map(_.toInt)) :: paramOption("cluster.notification.interval").map(_.map(_.toInt)) :: paramOption("id.cache.size").map(_.map(_.toInt)) :: paramOption("cluster.confirmation.window.size").map(_.map(_.toInt)) :: paramOption("cluster.connection.ttl").map(_.map(_.toInt)) :: paramOption("cluster.duplicate.detection").map(_.map(_.toBoolean)) :: paramOption("cluster.initial.connect.attempts").map(_.map(_.toInt)) :: paramOption("cluster.max.retry.interval").map(_.map(_.toInt)) :: paramOption("cluster.min.large.message.size").map(_.map(_.toInt)) :: paramOption("cluster.producer.window.size").map(_.map(_.toInt)) :: paramOption("cluster.reconnect.attempts").map(_.map(_.toInt)) :: paramOption("cluster.retry.interval").map(_.map(_.toInt)) :: paramOption("cluster.retry.interval.multiplier").map(_.map(_.toBigDecimal))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], globalPeriodsize: Option[Int], maxPerioddiskPeriodusage: Option[Int], persistencePeriodenabled: Option[Boolean], threadPeriodpoolPeriodmaxPeriodsize: Option[Int], scheduledPeriodthreadPeriodpoolPeriodmaxPeriodsize: Option[Int], gracefulPeriodshutdownPeriodtimeout: Option[Int], queues: Seq[String], topics: Seq[String], addressesPeriodmaxPerioddeliveryPeriodattempts: Option[Int], addressesPeriodexpiryPerioddelay: Option[Int], addressesPeriodaddressPeriodfullPeriodmessagePeriodpolicy: Option[String], addressesPeriodmaxPeriodsizePeriodbytes: Option[Int], addressesPeriodpagePeriodsizePeriodbytes: Option[Int], addressesPeriodpagePeriodcachePeriodmaxPeriodsize: Option[Int], clusterPerioduser: Option[String], clusterPeriodpassword: Option[String], clusterPeriodcallPeriodtimeout: Option[Int], clusterPeriodcallPeriodfailoverPeriodtimeout: Option[Int], clusterPeriodclientPeriodfailurePeriodcheckPeriodperiod: Option[Int], clusterPeriodnotificationPeriodattempts: Option[Int], clusterPeriodnotificationPeriodinterval: Option[Int], idPeriodcachePeriodsize: Option[Int], clusterPeriodconfirmationPeriodwindowPeriodsize: Option[Int], clusterPeriodconnectionPeriodttl: Option[Int], clusterPeriodduplicatePerioddetection: Option[Boolean], clusterPeriodinitialPeriodconnectPeriodattempts: Option[Int], clusterPeriodmaxPeriodretryPeriodinterval: Option[Int], clusterPeriodminPeriodlargePeriodmessagePeriodsize: Option[Int], clusterPeriodproducerPeriodwindowPeriodsize: Option[Int], clusterPeriodreconnectPeriodattempts: Option[Int], clusterPeriodretryPeriodinterval: Option[Int], clusterPeriodretryPeriodintervalPeriodmultiplier: Option[BigDecimal]) =>
          da.Configmgr_comAdobeCqScreensMqActivemqImplArtemisJMSProvider(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, globalPeriodsize, maxPerioddiskPeriodusage, persistencePeriodenabled, threadPeriodpoolPeriodmaxPeriodsize, scheduledPeriodthreadPeriodpoolPeriodmaxPeriodsize, gracefulPeriodshutdownPeriodtimeout, queues, topics, addressesPeriodmaxPerioddeliveryPeriodattempts, addressesPeriodexpiryPerioddelay, addressesPeriodaddressPeriodfullPeriodmessagePeriodpolicy, addressesPeriodmaxPeriodsizePeriodbytes, addressesPeriodpagePeriodsizePeriodbytes, addressesPeriodpagePeriodcachePeriodmaxPeriodsize, clusterPerioduser, clusterPeriodpassword, clusterPeriodcallPeriodtimeout, clusterPeriodcallPeriodfailoverPeriodtimeout, clusterPeriodclientPeriodfailurePeriodcheckPeriodperiod, clusterPeriodnotificationPeriodattempts, clusterPeriodnotificationPeriodinterval, idPeriodcachePeriodsize, clusterPeriodconfirmationPeriodwindowPeriodsize, clusterPeriodconnectionPeriodttl, clusterPeriodduplicatePerioddetection, clusterPeriodinitialPeriodconnectPeriodattempts, clusterPeriodmaxPeriodretryPeriodinterval, clusterPeriodminPeriodlargePeriodmessagePeriodsize, clusterPeriodproducerPeriodwindowPeriodsize, clusterPeriodreconnectPeriodattempts, clusterPeriodretryPeriodinterval, clusterPeriodretryPeriodintervalPeriodmultiplier) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo
        */
        private def comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(da: DataAccessor): Endpoint[ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath") :: paramOption("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodprojectPath: Seq[String], comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodscheduleFrequency: Option[String]) =>
          da.Configmgr_comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodprojectPath, comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodscheduleFrequency) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo
        */
        private def comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(da: DataAccessor): Endpoint[ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("disableSmartSync").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], disableSmartSync: Option[Boolean]) =>
          da.Configmgr_comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, disableSmartSync) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo
        */
        private def comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(da: DataAccessor): Endpoint[ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enableDataTriggeredContent").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enableDataTriggeredContent: Option[Boolean]) =>
          da.Configmgr_comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(post, apply, delete, action, Dollarlocation, propertylist, enableDataTriggeredContent) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo
        */
        private def comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(da: DataAccessor): Endpoint[ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo
        */
        private def comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(da: DataAccessor): Endpoint[ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo
        */
        private def comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(da: DataAccessor): Endpoint[ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags") :: paramOption("dispatcher.address") :: params("dispatcher.filter.allowed") :: params("dispatcher.filter.blocked")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String], dispatcherPeriodaddress: Option[String], dispatcherPeriodfilterPeriodallowed: Seq[String], dispatcherPeriodfilterPeriodblocked: Seq[String]) =>
          da.Configmgr_comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, dispatcherPeriodaddress, dispatcherPeriodfilterPeriodallowed, dispatcherPeriodfilterPeriodblocked) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo
        */
        private def comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(da: DataAccessor): Endpoint[ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo
        */
        private def comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(da: DataAccessor): Endpoint[ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags") :: paramOption("webserver.address")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String], webserverPeriodaddress: Option[String]) =>
          da.Configmgr_comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, webserverPeriodaddress) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo
        */
        private def comAdobeCqSocialAccountverificationImplAccountManagementConfigIm(da: DataAccessor): Endpoint[ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enable").map(_.map(_.toBoolean)) :: paramOption("ttl1").map(_.map(_.toInt)) :: paramOption("ttl2").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enable: Option[Boolean], ttl1: Option[Int], ttl2: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialAccountverificationImplAccountManagementConfigIm(post, apply, delete, action, Dollarlocation, propertylist, enable, ttl1, ttl2) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo
        */
        private def comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(da: DataAccessor): Endpoint[ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("priority").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], priority: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(post, apply, delete, action, Dollarlocation, propertylist, priority) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo
        */
        private def comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(da: DataAccessor): Endpoint[ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("priority").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], priority: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(post, apply, delete, action, Dollarlocation, propertylist, priority) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo
        */
        private def comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(da: DataAccessor): Endpoint[ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("event.topics") :: paramOption("event.filter")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], eventPeriodtopics: Option[String], eventPeriodfilter: Option[String]) =>
          da.Configmgr_comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodtopics, eventPeriodfilter) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo
        */
        private def comAdobeCqSocialActivitystreamsListenerImplModerationEventExten(da: DataAccessor): Endpoint[ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("accepted").map(_.map(_.toBoolean)) :: paramOption("ranked").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], accepted: Option[Boolean], ranked: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialActivitystreamsListenerImplModerationEventExten(post, apply, delete, action, Dollarlocation, propertylist, accepted, ranked) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo
        */
        private def comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(da: DataAccessor): Endpoint[ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("ranking").map(_.map(_.toInt)) :: paramOption("enable").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], ranking: Option[Int], enable: Option[Boolean]) =>
          da.Configmgr_comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(post, apply, delete, action, Dollarlocation, propertylist, ranking, enable) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo
        */
        private def comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(da: DataAccessor): Endpoint[ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("streamPath") :: paramOption("streamName")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], streamPath: Option[String], streamName: Option[String]) =>
          da.Configmgr_comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(post, apply, delete, action, Dollarlocation, propertylist, streamPath, streamName) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo
        */
        private def comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(da: DataAccessor): Endpoint[ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("MaxRetry").map(_.map(_.toInt)) :: params("fieldWhitelist") :: params("attachmentTypeBlacklist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], maxRetry: Option[Int], fieldWhitelist: Seq[String], attachmentTypeBlacklist: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(post, apply, delete, action, Dollarlocation, propertylist, maxRetry, fieldWhitelist, attachmentTypeBlacklist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo
        */
        private def comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(da: DataAccessor): Endpoint[ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.calendar.client.operationextensions.EventAttachment" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("attachmentTypeBlacklist") :: paramOption("extension.order").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], attachmentTypeBlacklist: Option[String], extensionPeriodorder: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(post, apply, delete, action, Dollarlocation, propertylist, attachmentTypeBlacklist, extensionPeriodorder) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCalendarServletsTimeZoneServletInfo
        */
        private def comAdobeCqSocialCalendarServletsTimeZoneServlet(da: DataAccessor): Endpoint[ComAdobeCqSocialCalendarServletsTimeZoneServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.calendar.servlets.TimeZoneServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("timezones.expirytime").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], timezonesPeriodexpirytime: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialCalendarServletsTimeZoneServlet(post, apply, delete, action, Dollarlocation, propertylist, timezonesPeriodexpirytime) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo
        */
        private def comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("ranking").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], ranking: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(post, apply, delete, action, Dollarlocation, propertylist, ranking) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo
        */
        private def comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("fieldWhitelist") :: params("attachmentTypeBlacklist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], fieldWhitelist: Seq[String], attachmentTypeBlacklist: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, attachmentTypeBlacklist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo
        */
        private def comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("fieldWhitelist") :: params("attachmentTypeBlacklist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], fieldWhitelist: Seq[String], attachmentTypeBlacklist: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, attachmentTypeBlacklist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo
        */
        private def comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("numUserLimit").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], numUserLimit: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(post, apply, delete, action, Dollarlocation, propertylist, numUserLimit) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo
        */
        private def comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enableScheduledPostsSearch").map(_.map(_.toBoolean)) :: paramOption("numberOfMinutes").map(_.map(_.toInt)) :: paramOption("maxSearchLimit").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enableScheduledPostsSearch: Option[Boolean], numberOfMinutes: Option[Int], maxSearchLimit: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(post, apply, delete, action, Dollarlocation, propertylist, enableScheduledPostsSearch, numberOfMinutes, maxSearchLimit) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo
        */
        private def comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.cors.CORSAuthenticationFilter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cors.enabling").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], corsPeriodenabling: Option[Boolean]) =>
          da.Configmgr_comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(post, apply, delete, action, Dollarlocation, propertylist, corsPeriodenabling) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo
        */
        private def comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("priorityOrder").map(_.map(_.toInt)) :: params("replyEmailPatterns")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], priorityOrder: Option[Int], replyEmailPatterns: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(post, apply, delete, action, Dollarlocation, propertylist, priorityOrder, replyEmailPatterns) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo
        */
        private def comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("context.path")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], contextPeriodpath: Option[String]) =>
          da.Configmgr_comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(post, apply, delete, action, Dollarlocation, propertylist, contextPeriodpath) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo
        */
        private def comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("event.topics")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], eventPeriodtopics: Option[String]) =>
          da.Configmgr_comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodtopics) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo
        */
        private def comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("priorityOrder").map(_.map(_.toInt)) :: params("replyEmailPatterns")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], priorityOrder: Option[Int], replyEmailPatterns: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(post, apply, delete, action, Dollarlocation, propertylist, priorityOrder, replyEmailPatterns) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo
        */
        private def comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("pattern.time") :: paramOption("pattern.newline") :: paramOption("pattern.dayOfMonth") :: paramOption("pattern.month") :: paramOption("pattern.year") :: paramOption("pattern.date") :: paramOption("pattern.dateTime") :: paramOption("pattern.email")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], patternPeriodtime: Option[String], patternPeriodnewline: Option[String], patternPerioddayOfMonth: Option[String], patternPeriodmonth: Option[String], patternPeriodyear: Option[String], patternPerioddate: Option[String], patternPerioddateTime: Option[String], patternPeriodemail: Option[String]) =>
          da.Configmgr_comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(post, apply, delete, action, Dollarlocation, propertylist, patternPeriodtime, patternPeriodnewline, patternPerioddayOfMonth, patternPeriodmonth, patternPeriodyear, patternPerioddate, patternPerioddateTime, patternPeriodemail) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo
        */
        private def comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("email.name") :: paramOption("email.createPostFromReply").map(_.map(_.toBoolean)) :: paramOption("email.addCommentIdTo") :: paramOption("email.subjectMaximumLength").map(_.map(_.toInt)) :: paramOption("email.replyToAddress") :: paramOption("email.replyToDelimiter") :: paramOption("email.trackerIdPrefixInSubject") :: paramOption("email.trackerIdPrefixInBody") :: paramOption("email.asHTML").map(_.map(_.toBoolean)) :: paramOption("email.defaultUserName") :: paramOption("email.templates.rootPath")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], emailPeriodname: Option[String], emailPeriodcreatePostFromReply: Option[Boolean], emailPeriodaddCommentIdTo: Option[String], emailPeriodsubjectMaximumLength: Option[Int], emailPeriodreplyToAddress: Option[String], emailPeriodreplyToDelimiter: Option[String], emailPeriodtrackerIdPrefixInSubject: Option[String], emailPeriodtrackerIdPrefixInBody: Option[String], emailPeriodasHTML: Option[Boolean], emailPerioddefaultUserName: Option[String], emailPeriodtemplatesPeriodrootPath: Option[String]) =>
          da.Configmgr_comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(post, apply, delete, action, Dollarlocation, propertylist, emailPeriodname, emailPeriodcreatePostFromReply, emailPeriodaddCommentIdTo, emailPeriodsubjectMaximumLength, emailPeriodreplyToAddress, emailPeriodreplyToDelimiter, emailPeriodtrackerIdPrefixInSubject, emailPeriodtrackerIdPrefixInBody, emailPeriodasHTML, emailPerioddefaultUserName, emailPeriodtemplatesPeriodrootPath) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo
        */
        private def comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("connectProtocol")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], connectProtocol: Option[String]) =>
          da.Configmgr_comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(post, apply, delete, action, Dollarlocation, propertylist, connectProtocol) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo
        */
        private def comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("priorityOrder").map(_.map(_.toInt)) :: params("replyEmailPatterns")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], priorityOrder: Option[Int], replyEmailPatterns: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(post, apply, delete, action, Dollarlocation, propertylist, priorityOrder, replyEmailPatterns) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo
        */
        private def comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("priorityOrder").map(_.map(_.toInt)) :: params("replyEmailPatterns")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], priorityOrder: Option[Int], replyEmailPatterns: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(post, apply, delete, action, Dollarlocation, propertylist, priorityOrder, replyEmailPatterns) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo
        */
        private def comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("priorityOrder").map(_.map(_.toInt)) :: params("replyEmailPatterns")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], priorityOrder: Option[Int], replyEmailPatterns: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(post, apply, delete, action, Dollarlocation, propertylist, priorityOrder, replyEmailPatterns) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo
        */
        private def comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("priorityOrder").map(_.map(_.toInt)) :: params("replyEmailPatterns")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], priorityOrder: Option[Int], replyEmailPatterns: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(post, apply, delete, action, Dollarlocation, propertylist, priorityOrder, replyEmailPatterns) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo
        */
        private def comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("replyEmailPatterns") :: paramOption("priorityOrder").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], replyEmailPatterns: Seq[String], priorityOrder: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(post, apply, delete, action, Dollarlocation, propertylist, replyEmailPatterns, priorityOrder) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo
        */
        private def comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("priorityOrder").map(_.map(_.toInt)) :: params("replyEmailPatterns")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], priorityOrder: Option[Int], replyEmailPatterns: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(post, apply, delete, action, Dollarlocation, propertylist, priorityOrder, replyEmailPatterns) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo
        */
        private def comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("numberOfDays").map(_.map(_.toInt)) :: paramOption("ageOfFile").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], numberOfDays: Option[Int], ageOfFile: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(post, apply, delete, action, Dollarlocation, propertylist, numberOfDays, ageOfFile) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo
        */
        private def comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("event.topics") :: paramOption("event.filter") :: params("verbs")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], eventPeriodtopics: Option[String], eventPeriodfilter: Option[String], verbs: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodtopics, eventPeriodfilter, verbs) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo
        */
        private def comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(da: DataAccessor): Endpoint[ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enable").map(_.map(_.toBoolean)) :: paramOption("UGCLimit").map(_.map(_.toInt)) :: paramOption("ugcLimitDuration").map(_.map(_.toInt)) :: params("domains") :: params("toList")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enable: Option[Boolean], uGCLimit: Option[Int], ugcLimitDuration: Option[Int], domains: Seq[String], toList: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(post, apply, delete, action, Dollarlocation, propertylist, enable, uGCLimit, ugcLimitDuration, domains, toList) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo
        */
        private def comAdobeCqSocialConnectOauthImplFacebookProviderImpl(da: DataAccessor): Endpoint[ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("oauth.provider.id") :: paramOption("oauth.cloud.config.root") :: paramOption("provider.config.root") :: paramOption("provider.config.create.tags.enabled").map(_.map(_.toBoolean)) :: paramOption("provider.config.user.folder") :: paramOption("provider.config.facebook.fetch.fields").map(_.map(_.toBoolean)) :: params("provider.config.facebook.fields") :: paramOption("provider.config.refresh.userdata.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], oauthPeriodproviderPeriodid: Option[String], oauthPeriodcloudPeriodconfigPeriodroot: Option[String], providerPeriodconfigPeriodroot: Option[String], providerPeriodconfigPeriodcreatePeriodtagsPeriodenabled: Option[Boolean], providerPeriodconfigPerioduserPeriodfolder: Option[String], providerPeriodconfigPeriodfacebookPeriodfetchPeriodfields: Option[Boolean], providerPeriodconfigPeriodfacebookPeriodfields: Seq[String], providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled: Option[Boolean]) =>
          da.Configmgr_comAdobeCqSocialConnectOauthImplFacebookProviderImpl(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodproviderPeriodid, oauthPeriodcloudPeriodconfigPeriodroot, providerPeriodconfigPeriodroot, providerPeriodconfigPeriodcreatePeriodtagsPeriodenabled, providerPeriodconfigPerioduserPeriodfolder, providerPeriodconfigPeriodfacebookPeriodfetchPeriodfields, providerPeriodconfigPeriodfacebookPeriodfields, providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo
        */
        private def comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(da: DataAccessor): Endpoint[ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("path") :: paramOption("service.ranking").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], path: Seq[String], servicePeriodranking: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(post, apply, delete, action, Dollarlocation, propertylist, path, servicePeriodranking) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo
        */
        private def comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(da: DataAccessor): Endpoint[ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("facebook") :: params("twitter") :: paramOption("provider.config.user.folder")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], facebook: Seq[String], twitter: Seq[String], providerPeriodconfigPerioduserPeriodfolder: Option[String]) =>
          da.Configmgr_comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(post, apply, delete, action, Dollarlocation, propertylist, facebook, twitter, providerPeriodconfigPerioduserPeriodfolder) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo
        */
        private def comAdobeCqSocialConnectOauthImplTwitterProviderImpl(da: DataAccessor): Endpoint[ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("oauth.provider.id") :: paramOption("oauth.cloud.config.root") :: paramOption("provider.config.root") :: paramOption("provider.config.user.folder") :: paramOption("provider.config.twitter.enable.params").map(_.map(_.toBoolean)) :: params("provider.config.twitter.params") :: paramOption("provider.config.refresh.userdata.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], oauthPeriodproviderPeriodid: Option[String], oauthPeriodcloudPeriodconfigPeriodroot: Option[String], providerPeriodconfigPeriodroot: Option[String], providerPeriodconfigPerioduserPeriodfolder: Option[String], providerPeriodconfigPeriodtwitterPeriodenablePeriodparams: Option[Boolean], providerPeriodconfigPeriodtwitterPeriodparams: Seq[String], providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled: Option[Boolean]) =>
          da.Configmgr_comAdobeCqSocialConnectOauthImplTwitterProviderImpl(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodproviderPeriodid, oauthPeriodcloudPeriodconfigPeriodroot, providerPeriodconfigPeriodroot, providerPeriodconfigPerioduserPeriodfolder, providerPeriodconfigPeriodtwitterPeriodenablePeriodparams, providerPeriodconfigPeriodtwitterPeriodparams, providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo
        */
        private def comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(da: DataAccessor): Endpoint[ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.social.content.fragments.services.enabled").map(_.map(_.toBoolean)) :: paramOption("cq.social.content.fragments.services.waitTimeSeconds").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodenabled: Option[Boolean], cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodwaitTimeSeconds: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodenabled, cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodwaitTimeSeconds) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo
        */
        private def comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(da: DataAccessor): Endpoint[ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("version.id") :: paramOption("cache.on").map(_.map(_.toBoolean)) :: paramOption("concurrency.level").map(_.map(_.toInt)) :: paramOption("cache.start.size").map(_.map(_.toInt)) :: paramOption("cache.ttl").map(_.map(_.toInt)) :: paramOption("cache.size").map(_.map(_.toInt)) :: paramOption("time.limit").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], versionPeriodid: Option[String], cachePeriodon: Option[Boolean], concurrencyPeriodlevel: Option[Int], cachePeriodstartPeriodsize: Option[Int], cachePeriodttl: Option[Int], cachePeriodsize: Option[Int], timePeriodlimit: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(post, apply, delete, action, Dollarlocation, propertylist, versionPeriodid, cachePeriodon, concurrencyPeriodlevel, cachePeriodstartPeriodsize, cachePeriodttl, cachePeriodsize, timePeriodlimit) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo
        */
        private def comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(da: DataAccessor): Endpoint[ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("solr.zk.timeout") :: paramOption("solr.commit") :: paramOption("cache.on").map(_.map(_.toBoolean)) :: paramOption("concurrency.level").map(_.map(_.toInt)) :: paramOption("cache.start.size").map(_.map(_.toInt)) :: paramOption("cache.ttl").map(_.map(_.toInt)) :: paramOption("cache.size").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], solrPeriodzkPeriodtimeout: Option[String], solrPeriodcommit: Option[String], cachePeriodon: Option[Boolean], concurrencyPeriodlevel: Option[Int], cachePeriodstartPeriodsize: Option[Int], cachePeriodttl: Option[Int], cachePeriodsize: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(post, apply, delete, action, Dollarlocation, propertylist, solrPeriodzkPeriodtimeout, solrPeriodcommit, cachePeriodon, concurrencyPeriodlevel, cachePeriodstartPeriodsize, cachePeriodttl, cachePeriodsize) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo
        */
        private def comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(da: DataAccessor): Endpoint[ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("solr.zk.timeout") :: paramOption("solr.commit") :: paramOption("cache.on").map(_.map(_.toBoolean)) :: paramOption("concurrency.level").map(_.map(_.toInt)) :: paramOption("cache.start.size").map(_.map(_.toInt)) :: paramOption("cache.ttl").map(_.map(_.toInt)) :: paramOption("cache.size").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], solrPeriodzkPeriodtimeout: Option[String], solrPeriodcommit: Option[String], cachePeriodon: Option[Boolean], concurrencyPeriodlevel: Option[Int], cachePeriodstartPeriodsize: Option[Int], cachePeriodttl: Option[Int], cachePeriodsize: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(post, apply, delete, action, Dollarlocation, propertylist, solrPeriodzkPeriodtimeout, solrPeriodcommit, cachePeriodon, concurrencyPeriodlevel, cachePeriodstartPeriodsize, cachePeriodttl, cachePeriodsize) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo
        */
        private def comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(da: DataAccessor): Endpoint[ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("isMemberCheck").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], isMemberCheck: Option[Boolean]) =>
          da.Configmgr_comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(post, apply, delete, action, Dollarlocation, propertylist, isMemberCheck) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo
        */
        private def comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(da: DataAccessor): Endpoint[ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("isMemberCheck").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], isMemberCheck: Option[Boolean]) =>
          da.Configmgr_comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(post, apply, delete, action, Dollarlocation, propertylist, isMemberCheck) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo
        */
        private def comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(da: DataAccessor): Endpoint[ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("fieldWhitelist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], fieldWhitelist: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo
        */
        private def comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(da: DataAccessor): Endpoint[ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("fieldWhitelist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], fieldWhitelist: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo
        */
        private def comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(da: DataAccessor): Endpoint[ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo
        */
        private def comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(da: DataAccessor): Endpoint[ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("sling.servlet.selectors") :: paramOption("sling.servlet.extensions")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], slingPeriodservletPeriodselectors: Option[String], slingPeriodservletPeriodextensions: Option[String]) =>
          da.Configmgr_comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodselectors, slingPeriodservletPeriodextensions) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo
        */
        private def comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(da: DataAccessor): Endpoint[ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("fieldWhitelist") :: params("attachmentTypeBlacklist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], fieldWhitelist: Seq[String], attachmentTypeBlacklist: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, attachmentTypeBlacklist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo
        */
        private def comAdobeCqSocialForumClientEndpointsImplForumOperationsService(da: DataAccessor): Endpoint[ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("fieldWhitelist") :: params("attachmentTypeBlacklist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], fieldWhitelist: Seq[String], attachmentTypeBlacklist: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialForumClientEndpointsImplForumOperationsService(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, attachmentTypeBlacklist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo
        */
        private def comAdobeCqSocialForumDispatcherImplFlushOperations(da: DataAccessor): Endpoint[ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.forum.dispatcher.impl.FlushOperations" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("extension.order").map(_.map(_.toInt)) :: paramOption("flush.forumontopic").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], extensionPeriodorder: Option[Int], flushPeriodforumontopic: Option[Boolean]) =>
          da.Configmgr_comAdobeCqSocialForumDispatcherImplFlushOperations(post, apply, delete, action, Dollarlocation, propertylist, extensionPeriodorder, flushPeriodforumontopic) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo
        */
        private def comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(da: DataAccessor): Endpoint[ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("group.listing.pagination.enable").map(_.map(_.toBoolean)) :: paramOption("group.listing.lazyloading.enable").map(_.map(_.toBoolean)) :: paramOption("page.size").map(_.map(_.toInt)) :: paramOption("priority").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], groupPeriodlistingPeriodpaginationPeriodenable: Option[Boolean], groupPeriodlistingPeriodlazyloadingPeriodenable: Option[Boolean], pagePeriodsize: Option[Int], priority: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(post, apply, delete, action, Dollarlocation, propertylist, groupPeriodlistingPeriodpaginationPeriodenable, groupPeriodlistingPeriodlazyloadingPeriodenable, pagePeriodsize, priority) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialGroupImplGroupServiceImplInfo
        */
        private def comAdobeCqSocialGroupImplGroupServiceImpl(da: DataAccessor): Endpoint[ComAdobeCqSocialGroupImplGroupServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.group.impl.GroupServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("maxWaitTime").map(_.map(_.toInt)) :: paramOption("minWaitBetweenRetries").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], maxWaitTime: Option[Int], minWaitBetweenRetries: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialGroupImplGroupServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, maxWaitTime, minWaitBetweenRetries) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo
        */
        private def comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(da: DataAccessor): Endpoint[ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("parameter.guava.cache.enabled").map(_.map(_.toBoolean)) :: paramOption("parameter.guava.cache.params") :: paramOption("parameter.guava.cache.reload").map(_.map(_.toBoolean)) :: paramOption("service.ranking").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], parameterPeriodguavaPeriodcachePeriodenabled: Option[Boolean], parameterPeriodguavaPeriodcachePeriodparams: Option[String], parameterPeriodguavaPeriodcachePeriodreload: Option[Boolean], servicePeriodranking: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(post, apply, delete, action, Dollarlocation, propertylist, parameterPeriodguavaPeriodcachePeriodenabled, parameterPeriodguavaPeriodcachePeriodparams, parameterPeriodguavaPeriodcachePeriodreload, servicePeriodranking) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo
        */
        private def comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(da: DataAccessor): Endpoint[ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("fieldWhitelist") :: params("attachmentTypeBlacklist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], fieldWhitelist: Seq[String], attachmentTypeBlacklist: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, attachmentTypeBlacklist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo
        */
        private def comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(da: DataAccessor): Endpoint[ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("fieldWhitelist") :: params("attachmentTypeBlacklist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], fieldWhitelist: Seq[String], attachmentTypeBlacklist: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, attachmentTypeBlacklist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo
        */
        private def comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(da: DataAccessor): Endpoint[ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("fieldWhitelist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], fieldWhitelist: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo
        */
        private def comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(da: DataAccessor): Endpoint[ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("fieldWhitelist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], fieldWhitelist: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo
        */
        private def comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(da: DataAccessor): Endpoint[ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("everyoneLimit").map(_.map(_.toInt)) :: paramOption("priority").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], everyoneLimit: Option[Int], priority: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(post, apply, delete, action, Dollarlocation, propertylist, everyoneLimit, priority) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo
        */
        private def comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(da: DataAccessor): Endpoint[ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("message.properties") :: paramOption("messageBoxSizeLimit").map(_.map(_.toInt)) :: paramOption("messageCountLimit").map(_.map(_.toInt)) :: paramOption("notifyFailure").map(_.map(_.toBoolean)) :: paramOption("failureMessageFrom") :: paramOption("failureTemplatePath") :: paramOption("maxRetries").map(_.map(_.toInt)) :: paramOption("minWaitBetweenRetries").map(_.map(_.toInt)) :: paramOption("countUpdatePoolSize").map(_.map(_.toInt)) :: paramOption("inbox.path") :: paramOption("sentitems.path") :: paramOption("supportAttachments").map(_.map(_.toBoolean)) :: paramOption("supportGroupMessaging").map(_.map(_.toBoolean)) :: paramOption("maxTotalRecipients").map(_.map(_.toInt)) :: paramOption("batchSize").map(_.map(_.toInt)) :: paramOption("maxTotalAttachmentSize").map(_.map(_.toInt)) :: params("attachmentTypeBlacklist") :: params("allowedAttachmentTypes") :: paramOption("serviceSelector") :: params("fieldWhitelist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], messagePeriodproperties: Seq[String], messageBoxSizeLimit: Option[Int], messageCountLimit: Option[Int], notifyFailure: Option[Boolean], failureMessageFrom: Option[String], failureTemplatePath: Option[String], maxRetries: Option[Int], minWaitBetweenRetries: Option[Int], countUpdatePoolSize: Option[Int], inboxPeriodpath: Option[String], sentitemsPeriodpath: Option[String], supportAttachments: Option[Boolean], supportGroupMessaging: Option[Boolean], maxTotalRecipients: Option[Int], batchSize: Option[Int], maxTotalAttachmentSize: Option[Int], attachmentTypeBlacklist: Seq[String], allowedAttachmentTypes: Seq[String], serviceSelector: Option[String], fieldWhitelist: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(post, apply, delete, action, Dollarlocation, propertylist, messagePeriodproperties, messageBoxSizeLimit, messageCountLimit, notifyFailure, failureMessageFrom, failureTemplatePath, maxRetries, minWaitBetweenRetries, countUpdatePoolSize, inboxPeriodpath, sentitemsPeriodpath, supportAttachments, supportGroupMessaging, maxTotalRecipients, batchSize, maxTotalAttachmentSize, attachmentTypeBlacklist, allowedAttachmentTypes, serviceSelector, fieldWhitelist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo
        */
        private def comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(da: DataAccessor): Endpoint[ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("resourceType.filters") :: paramOption("priority").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], resourceTypePeriodfilters: Seq[String], priority: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(post, apply, delete, action, Dollarlocation, propertylist, resourceTypePeriodfilters, priority) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo
        */
        private def comAdobeCqSocialModerationDashboardApiModerationDashboardSocial(da: DataAccessor): Endpoint[ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("priority").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], priority: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialModerationDashboardApiModerationDashboardSocial(post, apply, delete, action, Dollarlocation, propertylist, priority) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo
        */
        private def comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(da: DataAccessor): Endpoint[ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("priority").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], priority: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(post, apply, delete, action, Dollarlocation, propertylist, priority) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo
        */
        private def comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(da: DataAccessor): Endpoint[ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("resourceType.filters") :: paramOption("priority").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], resourceTypePeriodfilters: Seq[String], priority: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(post, apply, delete, action, Dollarlocation, propertylist, resourceTypePeriodfilters, priority) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialNotificationsImplMentionsRouterInfo
        */
        private def comAdobeCqSocialNotificationsImplMentionsRouter(da: DataAccessor): Endpoint[ComAdobeCqSocialNotificationsImplMentionsRouterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.notifications.impl.MentionsRouter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("event.topics") :: paramOption("event.filter")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], eventPeriodtopics: Option[String], eventPeriodfilter: Option[String]) =>
          da.Configmgr_comAdobeCqSocialNotificationsImplMentionsRouter(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodtopics, eventPeriodfilter) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo
        */
        private def comAdobeCqSocialNotificationsImplNotificationManagerImpl(da: DataAccessor): Endpoint[ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.notifications.impl.NotificationManagerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("max.unread.notification.count").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], maxPeriodunreadPeriodnotificationPeriodcount: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialNotificationsImplNotificationManagerImpl(post, apply, delete, action, Dollarlocation, propertylist, maxPeriodunreadPeriodnotificationPeriodcount) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialNotificationsImplNotificationsRouterInfo
        */
        private def comAdobeCqSocialNotificationsImplNotificationsRouter(da: DataAccessor): Endpoint[ComAdobeCqSocialNotificationsImplNotificationsRouterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.notifications.impl.NotificationsRouter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("event.topics") :: paramOption("event.filter")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], eventPeriodtopics: Option[String], eventPeriodfilter: Option[String]) =>
          da.Configmgr_comAdobeCqSocialNotificationsImplNotificationsRouter(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodtopics, eventPeriodfilter) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo
        */
        private def comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(da: DataAccessor): Endpoint[ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("fieldWhitelist") :: params("attachmentTypeBlacklist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], fieldWhitelist: Seq[String], attachmentTypeBlacklist: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, attachmentTypeBlacklist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo
        */
        private def comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(da: DataAccessor): Endpoint[ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.social.reporting.analytics.polling.importer.interval").map(_.map(_.toInt)) :: paramOption("cq.social.reporting.analytics.polling.importer.pageSize").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodinterval: Option[Int], cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodpageSize: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodinterval, cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodpageSize) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo
        */
        private def comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(da: DataAccessor): Endpoint[ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("report.fetch.delay").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], reportPeriodfetchPerioddelay: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(post, apply, delete, action, Dollarlocation, propertylist, reportPeriodfetchPerioddelay) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo
        */
        private def comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(da: DataAccessor): Endpoint[ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.social.console.analytics.sites.mapping") :: paramOption("priority").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodsocialPeriodconsolePeriodanalyticsPeriodsitesPeriodmapping: Seq[String], priority: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodsocialPeriodconsolePeriodanalyticsPeriodsitesPeriodmapping, priority) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo
        */
        private def comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(da: DataAccessor): Endpoint[ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("fieldWhitelist") :: params("attachmentTypeBlacklist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], fieldWhitelist: Seq[String], attachmentTypeBlacklist: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, attachmentTypeBlacklist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo
        */
        private def comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(da: DataAccessor): Endpoint[ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("sling.servlet.selectors") :: paramOption("sling.servlet.extensions")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], slingPeriodservletPeriodselectors: Option[String], slingPeriodservletPeriodextensions: Option[String]) =>
          da.Configmgr_comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodselectors, slingPeriodservletPeriodextensions) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo
        */
        private def comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(da: DataAccessor): Endpoint[ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("sling.servlet.selectors") :: paramOption("sling.servlet.extensions")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], slingPeriodservletPeriodselectors: Seq[String], slingPeriodservletPeriodextensions: Option[String]) =>
          da.Configmgr_comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodselectors, slingPeriodservletPeriodextensions) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialScoringImplScoringEventListenerInfo
        */
        private def comAdobeCqSocialScoringImplScoringEventListener(da: DataAccessor): Endpoint[ComAdobeCqSocialScoringImplScoringEventListenerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.scoring.impl.ScoringEventListener" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("event.topics") :: paramOption("event.filter")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], eventPeriodtopics: Option[String], eventPeriodfilter: Option[String]) =>
          da.Configmgr_comAdobeCqSocialScoringImplScoringEventListener(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodtopics, eventPeriodfilter) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo
        */
        private def comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(da: DataAccessor): Endpoint[ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enableFallback").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enableFallback: Option[Boolean]) =>
          da.Configmgr_comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(post, apply, delete, action, Dollarlocation, propertylist, enableFallback) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo
        */
        private def comAdobeCqSocialSiteEndpointsImplSiteOperationService(da: DataAccessor): Endpoint[ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.site.endpoints.impl.SiteOperationService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("fieldWhitelist") :: params("sitePathFilters") :: paramOption("sitePackageGroup")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], fieldWhitelist: Seq[String], sitePathFilters: Seq[String], sitePackageGroup: Option[String]) =>
          da.Configmgr_comAdobeCqSocialSiteEndpointsImplSiteOperationService(post, apply, delete, action, Dollarlocation, propertylist, fieldWhitelist, sitePathFilters, sitePackageGroup) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo
        */
        private def comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(da: DataAccessor): Endpoint[ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.social.console.analytics.components")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodsocialPeriodconsolePeriodanalyticsPeriodcomponents: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodsocialPeriodconsolePeriodanalyticsPeriodcomponents) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo
        */
        private def comAdobeCqSocialSiteImplSiteConfiguratorImpl(da: DataAccessor): Endpoint[ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.site.impl.SiteConfiguratorImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("componentsUsingTags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], componentsUsingTags: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialSiteImplSiteConfiguratorImpl(post, apply, delete, action, Dollarlocation, propertylist, componentsUsingTags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialSrpImplSocialSolrConnectorInfo
        */
        private def comAdobeCqSocialSrpImplSocialSolrConnector(da: DataAccessor): Endpoint[ComAdobeCqSocialSrpImplSocialSolrConnectorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.srp.impl.SocialSolrConnector" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("srp.type")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], srpPeriodtype: Option[String]) =>
          da.Configmgr_comAdobeCqSocialSrpImplSocialSolrConnector(post, apply, delete, action, Dollarlocation, propertylist, srpPeriodtype) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialSyncImplDiffChangesObserverInfo
        */
        private def comAdobeCqSocialSyncImplDiffChangesObserver(da: DataAccessor): Endpoint[ComAdobeCqSocialSyncImplDiffChangesObserverInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.sync.impl.DiffChangesObserver" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enabled").map(_.map(_.toBoolean)) :: paramOption("agentName") :: paramOption("diffPath") :: paramOption("propertyNames")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enabled: Option[Boolean], agentName: Option[String], diffPath: Option[String], propertyNames: Option[String]) =>
          da.Configmgr_comAdobeCqSocialSyncImplDiffChangesObserver(post, apply, delete, action, Dollarlocation, propertylist, enabled, agentName, diffPath, propertyNames) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo
        */
        private def comAdobeCqSocialSyncImplGroupSyncListenerImpl(da: DataAccessor): Endpoint[ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.sync.impl.GroupSyncListenerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("nodetypes") :: params("ignorableprops") :: paramOption("ignorablenodes") :: paramOption("enabled").map(_.map(_.toBoolean)) :: paramOption("distfolders")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], nodetypes: Seq[String], ignorableprops: Seq[String], ignorablenodes: Option[String], enabled: Option[Boolean], distfolders: Option[String]) =>
          da.Configmgr_comAdobeCqSocialSyncImplGroupSyncListenerImpl(post, apply, delete, action, Dollarlocation, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo
        */
        private def comAdobeCqSocialSyncImplPublisherSyncServiceImpl(da: DataAccessor): Endpoint[ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("activeRunModes")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], activeRunModes: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialSyncImplPublisherSyncServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, activeRunModes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialSyncImplUserSyncListenerImplInfo
        */
        private def comAdobeCqSocialSyncImplUserSyncListenerImpl(da: DataAccessor): Endpoint[ComAdobeCqSocialSyncImplUserSyncListenerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.sync.impl.UserSyncListenerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("nodetypes") :: params("ignorableprops") :: params("ignorablenodes") :: paramOption("enabled").map(_.map(_.toBoolean)) :: params("distfolders")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], nodetypes: Seq[String], ignorableprops: Seq[String], ignorablenodes: Seq[String], enabled: Option[Boolean], distfolders: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialSyncImplUserSyncListenerImpl(post, apply, delete, action, Dollarlocation, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo
        */
        private def comAdobeCqSocialTranslationImplTranslationServiceConfigManager(da: DataAccessor): Endpoint[ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.translation.impl.TranslationServiceConfigManager" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("translate.language") :: paramOption("translate.display") :: paramOption("translate.attribution").map(_.map(_.toBoolean)) :: paramOption("translate.caching") :: paramOption("translate.smart.rendering") :: paramOption("translate.caching.duration") :: paramOption("translate.session.save.interval") :: paramOption("translate.session.save.batchLimit")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], translatePeriodlanguage: Option[String], translatePerioddisplay: Option[String], translatePeriodattribution: Option[Boolean], translatePeriodcaching: Option[String], translatePeriodsmartPeriodrendering: Option[String], translatePeriodcachingPeriodduration: Option[String], translatePeriodsessionPeriodsavePeriodinterval: Option[String], translatePeriodsessionPeriodsavePeriodbatchLimit: Option[String]) =>
          da.Configmgr_comAdobeCqSocialTranslationImplTranslationServiceConfigManager(post, apply, delete, action, Dollarlocation, propertylist, translatePeriodlanguage, translatePerioddisplay, translatePeriodattribution, translatePeriodcaching, translatePeriodsmartPeriodrendering, translatePeriodcachingPeriodduration, translatePeriodsessionPeriodsavePeriodinterval, translatePeriodsessionPeriodsavePeriodbatchLimit) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo
        */
        private def comAdobeCqSocialTranslationImplUGCLanguageDetector(da: DataAccessor): Endpoint[ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.translation.impl.UGCLanguageDetector" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("event.topics") :: paramOption("event.filter") :: params("translate.listener.type") :: params("translate.property.list") :: paramOption("poolSize").map(_.map(_.toInt)) :: paramOption("maxPoolSize").map(_.map(_.toInt)) :: paramOption("queueSize").map(_.map(_.toInt)) :: paramOption("keepAliveTime").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], eventPeriodtopics: Option[String], eventPeriodfilter: Option[String], translatePeriodlistenerPeriodtype: Seq[String], translatePeriodpropertyPeriodlist: Seq[String], poolSize: Option[Int], maxPoolSize: Option[Int], queueSize: Option[Int], keepAliveTime: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialTranslationImplUGCLanguageDetector(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodtopics, eventPeriodfilter, translatePeriodlistenerPeriodtype, translatePeriodpropertyPeriodlist, poolSize, maxPoolSize, queueSize, keepAliveTime) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo
        */
        private def comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(da: DataAccessor): Endpoint[ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("threadPoolSize").map(_.map(_.toInt)) :: paramOption("delayTime").map(_.map(_.toInt)) :: paramOption("workerSleepTime").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], threadPoolSize: Option[Int], delayTime: Option[Int], workerSleepTime: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, threadPoolSize, delayTime, workerSleepTime) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo
        */
        private def comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(da: DataAccessor): Endpoint[ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("poolSize").map(_.map(_.toInt)) :: paramOption("maxPoolSize").map(_.map(_.toInt)) :: paramOption("queueSize").map(_.map(_.toInt)) :: paramOption("keepAliveTime").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], poolSize: Option[Int], maxPoolSize: Option[Int], queueSize: Option[Int], keepAliveTime: Option[Int]) =>
          da.Configmgr_comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(post, apply, delete, action, Dollarlocation, propertylist, poolSize, maxPoolSize, queueSize, keepAliveTime) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo
        */
        private def comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(da: DataAccessor): Endpoint[ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("isPrimaryPublisher").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], isPrimaryPublisher: Option[Boolean]) =>
          da.Configmgr_comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(post, apply, delete, action, Dollarlocation, propertylist, isPrimaryPublisher) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo
        */
        private def comAdobeCqSocialUgcbaseImplSocialUtilsImpl(da: DataAccessor): Endpoint[ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("legacyCloudUGCPathMapping").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], legacyCloudUGCPathMapping: Option[Boolean]) =>
          da.Configmgr_comAdobeCqSocialUgcbaseImplSocialUtilsImpl(post, apply, delete, action, Dollarlocation, propertylist, legacyCloudUGCPathMapping) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo
        */
        private def comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(da: DataAccessor): Endpoint[ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("automoderation.sequence") :: paramOption("automoderation.onfailurestop").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], automoderationPeriodsequence: Seq[String], automoderationPeriodonfailurestop: Option[Boolean]) =>
          da.Configmgr_comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(post, apply, delete, action, Dollarlocation, propertylist, automoderationPeriodsequence, automoderationPeriodonfailurestop) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo
        */
        private def comAdobeCqSocialUgcbaseModerationImplSentimentProcess(da: DataAccessor): Endpoint[ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("watchwords.positive") :: params("watchwords.negative") :: paramOption("watchwords.path") :: paramOption("sentiment.path")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], watchwordsPeriodpositive: Seq[String], watchwordsPeriodnegative: Seq[String], watchwordsPeriodpath: Option[String], sentimentPeriodpath: Option[String]) =>
          da.Configmgr_comAdobeCqSocialUgcbaseModerationImplSentimentProcess(post, apply, delete, action, Dollarlocation, propertylist, watchwordsPeriodpositive, watchwordsPeriodnegative, watchwordsPeriodpath, sentimentPeriodpath) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo
        */
        private def comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(da: DataAccessor): Endpoint[ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("default.attachment.type.blacklist") :: params("baseline.attachment.type.blacklist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], defaultPeriodattachmentPeriodtypePeriodblacklist: Seq[String], baselinePeriodattachmentPeriodtypePeriodblacklist: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(post, apply, delete, action, Dollarlocation, propertylist, defaultPeriodattachmentPeriodtypePeriodblacklist, baselinePeriodattachmentPeriodtypePeriodblacklist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo
        */
        private def comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(da: DataAccessor): Endpoint[ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("parameter.whitelist") :: params("parameter.whitelist.prefixes") :: params("binary.parameter.whitelist") :: params("modifier.whitelist") :: params("operation.whitelist") :: params("operation.whitelist.prefixes") :: params("typehint.whitelist") :: params("resourcetype.whitelist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], parameterPeriodwhitelist: Seq[String], parameterPeriodwhitelistPeriodprefixes: Seq[String], binaryPeriodparameterPeriodwhitelist: Seq[String], modifierPeriodwhitelist: Seq[String], operationPeriodwhitelist: Seq[String], operationPeriodwhitelistPeriodprefixes: Seq[String], typehintPeriodwhitelist: Seq[String], resourcetypePeriodwhitelist: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(post, apply, delete, action, Dollarlocation, propertylist, parameterPeriodwhitelist, parameterPeriodwhitelistPeriodprefixes, binaryPeriodparameterPeriodwhitelist, modifierPeriodwhitelist, operationPeriodwhitelist, operationPeriodwhitelistPeriodprefixes, typehintPeriodwhitelist, resourcetypePeriodwhitelist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo
        */
        private def comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(da: DataAccessor): Endpoint[ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("sling.servlet.extensions") :: paramOption("sling.servlet.paths") :: paramOption("sling.servlet.methods")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], slingPeriodservletPeriodextensions: Option[String], slingPeriodservletPeriodpaths: Option[String], slingPeriodservletPeriodmethods: Option[String]) =>
          da.Configmgr_comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodextensions, slingPeriodservletPeriodpaths, slingPeriodservletPeriodmethods) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqSocialUserImplTransportHttpToPublisherInfo
        */
        private def comAdobeCqSocialUserImplTransportHttpToPublisher(da: DataAccessor): Endpoint[ComAdobeCqSocialUserImplTransportHttpToPublisherInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.social.user.impl.transport.HttpToPublisher" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enable").map(_.map(_.toBoolean)) :: params("agent.configuration") :: paramOption("context.path") :: params("disabled.cipher.suites") :: params("enabled.cipher.suites")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enable: Option[Boolean], agentPeriodconfiguration: Seq[String], contextPeriodpath: Option[String], disabledPeriodcipherPeriodsuites: Seq[String], enabledPeriodcipherPeriodsuites: Seq[String]) =>
          da.Configmgr_comAdobeCqSocialUserImplTransportHttpToPublisher(post, apply, delete, action, Dollarlocation, propertylist, enable, agentPeriodconfiguration, contextPeriodpath, disabledPeriodcipherPeriodsuites, enabledPeriodcipherPeriodsuites) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo
        */
        private def comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(da: DataAccessor): Endpoint[ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("resource.types")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], resourcePeriodtypes: Seq[String]) =>
          da.Configmgr_comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(post, apply, delete, action, Dollarlocation, propertylist, resourcePeriodtypes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo
        */
        private def comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(da: DataAccessor): Endpoint[ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("delete.path.regexps") :: paramOption("delete.sql2.query")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], deletePeriodpathPeriodregexps: Seq[String], deletePeriodsql2Periodquery: Option[String]) =>
          da.Configmgr_comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(post, apply, delete, action, Dollarlocation, propertylist, deletePeriodpathPeriodregexps, deletePeriodsql2Periodquery) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo
        */
        private def comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(da: DataAccessor): Endpoint[ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("delete.name.regexps")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], deletePeriodnamePeriodregexps: Seq[String]) =>
          da.Configmgr_comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(post, apply, delete, action, Dollarlocation, propertylist, deletePeriodnamePeriodregexps) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo
        */
        private def comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(da: DataAccessor): Endpoint[ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("threshold").map(_.map(_.toInt)) :: paramOption("jobTopicName") :: paramOption("emailEnabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], threshold: Option[Int], jobTopicName: Option[String], emailEnabled: Option[Boolean]) =>
          da.Configmgr_comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(post, apply, delete, action, Dollarlocation, propertylist, threshold, jobTopicName, emailEnabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo
        */
        private def comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(da: DataAccessor): Endpoint[ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("scheduler.expression") :: paramOption("job.purge.threshold").map(_.map(_.toInt)) :: paramOption("job.purge.max.jobs").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], schedulerPeriodexpression: Option[String], jobPeriodpurgePeriodthreshold: Option[Int], jobPeriodpurgePeriodmaxPeriodjobs: Option[Int]) =>
          da.Configmgr_comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression, jobPeriodpurgePeriodthreshold, jobPeriodpurgePeriodmaxPeriodjobs) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo
        */
        private def comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(da: DataAccessor): Endpoint[ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("threshold").map(_.map(_.toInt)) :: paramOption("jobTopicName") :: paramOption("emailEnabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], threshold: Option[Int], jobTopicName: Option[String], emailEnabled: Option[Boolean]) =>
          da.Configmgr_comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(post, apply, delete, action, Dollarlocation, propertylist, threshold, jobTopicName, emailEnabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo
        */
        private def comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(da: DataAccessor): Endpoint[ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("threshold").map(_.map(_.toInt)) :: paramOption("jobTopicName") :: paramOption("emailEnabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], threshold: Option[Int], jobTopicName: Option[String], emailEnabled: Option[Boolean]) =>
          da.Configmgr_comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(post, apply, delete, action, Dollarlocation, propertylist, threshold, jobTopicName, emailEnabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo
        */
        private def comAdobeCqWcmLaunchesImplLaunchesEventHandler(da: DataAccessor): Endpoint[ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.wcm.launches.impl.LaunchesEventHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("event.filter") :: paramOption("launches.eventhandler.threadpool.maxsize").map(_.map(_.toInt)) :: paramOption("launches.eventhandler.threadpool.priority") :: paramOption("launches.eventhandler.updatelastmodification").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], eventPeriodfilter: Option[String], launchesPeriodeventhandlerPeriodthreadpoolPeriodmaxsize: Option[Int], launchesPeriodeventhandlerPeriodthreadpoolPeriodpriority: Option[String], launchesPeriodeventhandlerPeriodupdatelastmodification: Option[Boolean]) =>
          da.Configmgr_comAdobeCqWcmLaunchesImplLaunchesEventHandler(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodfilter, launchesPeriodeventhandlerPeriodthreadpoolPeriodmaxsize, launchesPeriodeventhandlerPeriodthreadpoolPeriodpriority, launchesPeriodeventhandlerPeriodupdatelastmodification) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo
        */
        private def comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(da: DataAccessor): Endpoint[ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.wcm.qrcode.servlet.whitelist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodwcmPeriodqrcodePeriodservletPeriodwhitelist: Seq[String]) =>
          da.Configmgr_comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodwcmPeriodqrcodePeriodservletPeriodwhitelist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo
        */
        private def comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(da: DataAccessor): Endpoint[ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("size").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], size: Option[Int]) =>
          da.Configmgr_comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(post, apply, delete, action, Dollarlocation, propertylist, size) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo
        */
        private def comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(da: DataAccessor): Endpoint[ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("syncTranslationState.schedulingFormat") :: paramOption("schedulingRepeatTranslation.schedulingFormat") :: paramOption("syncTranslationState.lockTimeoutInMinutes") :: paramOption("export.format")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], syncTranslationStatePeriodschedulingFormat: Option[String], schedulingRepeatTranslationPeriodschedulingFormat: Option[String], syncTranslationStatePeriodlockTimeoutInMinutes: Option[String], exportPeriodformat: Option[String]) =>
          da.Configmgr_comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(post, apply, delete, action, Dollarlocation, propertylist, syncTranslationStatePeriodschedulingFormat, schedulingRepeatTranslationPeriodschedulingFormat, syncTranslationStatePeriodlockTimeoutInMinutes, exportPeriodformat) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo
        */
        private def comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(da: DataAccessor): Endpoint[ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("portal.outboxes") :: paramOption("draft.data.service") :: paramOption("draft.metadata.service") :: paramOption("submit.data.service") :: paramOption("submit.metadata.service") :: paramOption("pendingSign.data.service") :: paramOption("pendingSign.metadata.service")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], portalPeriodoutboxes: Seq[String], draftPerioddataPeriodservice: Option[String], draftPeriodmetadataPeriodservice: Option[String], submitPerioddataPeriodservice: Option[String], submitPeriodmetadataPeriodservice: Option[String], pendingSignPerioddataPeriodservice: Option[String], pendingSignPeriodmetadataPeriodservice: Option[String]) =>
          da.Configmgr_comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(post, apply, delete, action, Dollarlocation, propertylist, portalPeriodoutboxes, draftPerioddataPeriodservice, draftPeriodmetadataPeriodservice, submitPerioddataPeriodservice, submitPeriodmetadataPeriodservice, pendingSignPerioddataPeriodservice, pendingSignPeriodmetadataPeriodservice) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo
        */
        private def comAdobeFdFpConfigFormsPortalSchedulerService(da: DataAccessor): Endpoint[ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.fd.fp.config.FormsPortalSchedulerService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("formportal.interval")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], formportalPeriodinterval: Option[String]) =>
          da.Configmgr_comAdobeFdFpConfigFormsPortalSchedulerService(post, apply, delete, action, Dollarlocation, propertylist, formportalPeriodinterval) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeFormsCommonServiceImplDefaultDataProviderInfo
        */
        private def comAdobeFormsCommonServiceImplDefaultDataProvider(da: DataAccessor): Endpoint[ComAdobeFormsCommonServiceImplDefaultDataProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.forms.common.service.impl.DefaultDataProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("alloweddataFileLocations")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], alloweddataFileLocations: Seq[String]) =>
          da.Configmgr_comAdobeFormsCommonServiceImplDefaultDataProvider(post, apply, delete, action, Dollarlocation, propertylist, alloweddataFileLocations) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo
        */
        private def comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(da: DataAccessor): Endpoint[ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("tempStorageConfig")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], tempStorageConfig: Option[String]) =>
          da.Configmgr_comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(post, apply, delete, action, Dollarlocation, propertylist, tempStorageConfig) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeFormsCommonServletTempCleanUpTaskInfo
        */
        private def comAdobeFormsCommonServletTempCleanUpTask(da: DataAccessor): Endpoint[ComAdobeFormsCommonServletTempCleanUpTaskInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.forms.common.servlet.TempCleanUpTask" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("scheduler.expression") :: paramOption("Duration for Temporary Storage") :: paramOption("Duration for Anonymous Storage")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], schedulerPeriodexpression: Option[String], duration for Temporary Storage: Option[String], duration for Anonymous Storage: Option[String]) =>
          da.Configmgr_comAdobeFormsCommonServletTempCleanUpTask(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression, duration for Temporary Storage, duration for Anonymous Storage) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAcpPlatformPlatformServletInfo
        */
        private def comAdobeGraniteAcpPlatformPlatformServlet(da: DataAccessor): Endpoint[ComAdobeGraniteAcpPlatformPlatformServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.acp.platform.PlatformServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("query.limit").map(_.map(_.toInt)) :: params("file.type.extension.map")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], queryPeriodlimit: Option[Int], filePeriodtypePeriodextensionPeriodmap: Seq[String]) =>
          da.Configmgr_comAdobeGraniteAcpPlatformPlatformServlet(post, apply, delete, action, Dollarlocation, propertylist, queryPeriodlimit, filePeriodtypePeriodextensionPeriodmap) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo
        */
        private def comAdobeGraniteActivitystreamsImplActivityManagerImpl(da: DataAccessor): Endpoint[ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.activitystreams.impl.ActivityManagerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("aggregate.relationships") :: paramOption("aggregate.descend.virtual").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], aggregatePeriodrelationships: Seq[String], aggregatePerioddescendPeriodvirtual: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteActivitystreamsImplActivityManagerImpl(post, apply, delete, action, Dollarlocation, propertylist, aggregatePeriodrelationships, aggregatePerioddescendPeriodvirtual) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo
        */
        private def comAdobeGraniteAnalyzerBaseSystemStatusServlet(da: DataAccessor): Endpoint[ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.analyzer.base.SystemStatusServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("disabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], disabled: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteAnalyzerBaseSystemStatusServlet(post, apply, delete, action, Dollarlocation, propertylist, disabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo
        */
        private def comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(da: DataAccessor): Endpoint[ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("disabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], disabled: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(post, apply, delete, action, Dollarlocation, propertylist, disabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo
        */
        private def comAdobeGraniteApicontrollerFilterResolverHookFactory(da: DataAccessor): Endpoint[ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.apicontroller.FilterResolverHookFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("com.adobe.cq.cdn.cdn-rewriter") :: paramOption("com.adobe.cq.cloud-config.components") :: paramOption("com.adobe.cq.cloud-config.core") :: paramOption("com.adobe.cq.cloud-config.ui") :: paramOption("com.adobe.cq.com.adobe.cq.editor") :: paramOption("com.adobe.cq.com.adobe.cq.projects.core") :: paramOption("com.adobe.cq.com.adobe.cq.projects.wcm.core") :: paramOption("com.adobe.cq.com.adobe.cq.ui.commons") :: paramOption("com.adobe.cq.com.adobe.cq.wcm.style") :: paramOption("com.adobe.cq.cq-activitymap-integration") :: paramOption("com.adobe.cq.cq-contexthub-commons") :: paramOption("com.adobe.cq.cq-dtm") :: paramOption("com.adobe.cq.cq-healthcheck") :: paramOption("com.adobe.cq.cq-multisite-targeting") :: paramOption("com.adobe.cq.cq-pre-upgrade-cleanup") :: paramOption("com.adobe.cq.cq-product-info-provider") :: paramOption("com.adobe.cq.cq-rest-sites") :: paramOption("com.adobe.cq.cq-security-hc") :: paramOption("com.adobe.cq.dam.cq-dam-svg-handler") :: paramOption("com.adobe.cq.dam.cq-scene7-imaging") :: paramOption("com.adobe.cq.dtm-reactor.core") :: paramOption("com.adobe.cq.dtm-reactor.ui") :: paramOption("com.adobe.cq.exp-jspel-resolver") :: paramOption("com.adobe.cq.inbox.cq-inbox") :: paramOption("com.adobe.cq.json-schema-parser") :: paramOption("com.adobe.cq.media.cq-media-publishing-dps-fp-core") :: paramOption("com.adobe.cq.mobile.cq-mobile-caas") :: paramOption("com.adobe.cq.mobile.cq-mobile-index-builder") :: paramOption("com.adobe.cq.mobile.cq-mobile-phonegap-build") :: paramOption("com.adobe.cq.myspell") :: paramOption("com.adobe.cq.sample.we.retail.core") :: paramOption("com.adobe.cq.screens.com.adobe.cq.screens.dcc") :: paramOption("com.adobe.cq.screens.com.adobe.cq.screens.mq.core") :: paramOption("com.adobe.cq.social.cq-social-as-provider") :: paramOption("com.adobe.cq.social.cq-social-badging-basic-impl") :: paramOption("com.adobe.cq.social.cq-social-badging-impl") :: paramOption("com.adobe.cq.social.cq-social-calendar-impl") :: paramOption("com.adobe.cq.social.cq-social-content-fragments-impl") :: paramOption("com.adobe.cq.social.cq-social-enablement-impl") :: paramOption("com.adobe.cq.social.cq-social-graph-impl") :: paramOption("com.adobe.cq.social.cq-social-ideation-impl") :: paramOption("com.adobe.cq.social.cq-social-jcr-provider") :: paramOption("com.adobe.cq.social.cq-social-members-impl") :: paramOption("com.adobe.cq.social.cq-social-ms-provider") :: paramOption("com.adobe.cq.social.cq-social-notifications-channels-web") :: paramOption("com.adobe.cq.social.cq-social-notifications-impl") :: paramOption("com.adobe.cq.social.cq-social-rdb-provider") :: paramOption("com.adobe.cq.social.cq-social-scf-impl") :: paramOption("com.adobe.cq.social.cq-social-scoring-basic-impl") :: paramOption("com.adobe.cq.social.cq-social-scoring-impl") :: paramOption("com.adobe.cq.social.cq-social-serviceusers-impl") :: paramOption("com.adobe.cq.social.cq-social-srp-impl") :: paramOption("com.adobe.cq.social.cq-social-ugcbase-impl") :: paramOption("com.adobe.dam.cq-dam-cfm-impl") :: paramOption("com.adobe.forms.foundation-forms-foundation-base") :: paramOption("com.adobe.granite.apicontroller") :: paramOption("com.adobe.granite.asset.core") :: paramOption("com.adobe.granite.auth.sso") :: paramOption("com.adobe.granite.bundles.hc.impl") :: paramOption("com.adobe.granite.compat-router") :: paramOption("com.adobe.granite.conf") :: paramOption("com.adobe.granite.conf.ui.core") :: paramOption("com.adobe.granite.cors") :: paramOption("com.adobe.granite.crx-explorer") :: paramOption("com.adobe.granite.crxde-lite") :: paramOption("com.adobe.granite.crypto.config") :: paramOption("com.adobe.granite.crypto.extension") :: paramOption("com.adobe.granite.crypto.file") :: paramOption("com.adobe.granite.crypto.jcr") :: paramOption("com.adobe.granite.csrf") :: paramOption("com.adobe.granite.distribution.core") :: paramOption("com.adobe.granite.dropwizard.metrics") :: paramOption("com.adobe.granite.frags.impl") :: paramOption("com.adobe.granite.gibson") :: paramOption("com.adobe.granite.infocollector") :: paramOption("com.adobe.granite.installer.factory.packages") :: paramOption("com.adobe.granite.jetty.ssl") :: paramOption("com.adobe.granite.jobs.async") :: paramOption("com.adobe.granite.maintenance.oak") :: paramOption("com.adobe.granite.monitoring.core") :: paramOption("com.adobe.granite.queries") :: paramOption("com.adobe.granite.replication.hc.impl") :: paramOption("com.adobe.granite.repository.checker") :: paramOption("com.adobe.granite.repository.hc.impl") :: paramOption("com.adobe.granite.rest.assets") :: paramOption("com.adobe.granite.security.ui") :: paramOption("com.adobe.granite.startup") :: paramOption("com.adobe.granite.tagsoup") :: paramOption("com.adobe.granite.taskmanagement.core") :: paramOption("com.adobe.granite.taskmanagement.workflow") :: paramOption("com.adobe.granite.ui.clientlibs.compiler.less") :: paramOption("com.adobe.granite.ui.clientlibs.processor.gcc") :: paramOption("com.adobe.granite.webconsole.plugins") :: paramOption("com.adobe.granite.workflow.console") :: paramOption("com.adobe.xmp.worker.files.native.fragment.linux") :: paramOption("com.adobe.xmp.worker.files.native.fragment.macosx") :: paramOption("com.adobe.xmp.worker.files.native.fragment.win") :: paramOption("com.day.commons.osgi.wrapper.simple-jndi") :: paramOption("com.day.cq.cq-authhandler") :: paramOption("com.day.cq.cq-compat-configupdate") :: paramOption("com.day.cq.cq-licensebranding") :: paramOption("com.day.cq.cq-notifcation-impl") :: paramOption("com.day.cq.cq-replication-audit") :: paramOption("com.day.cq.cq-search-ext") :: paramOption("com.day.cq.dam.cq-dam-annotation-print") :: paramOption("com.day.cq.dam.cq-dam-asset-usage") :: paramOption("com.day.cq.dam.cq-dam-s7dam") :: paramOption("com.day.cq.dam.cq-dam-similaritysearch") :: paramOption("com.day.cq.dam.dam-webdav-support") :: paramOption("com.day.cq.pre-upgrade-tasks") :: paramOption("com.day.cq.replication.extensions") :: paramOption("com.day.cq.wcm.cq-msm-core") :: paramOption("com.day.cq.wcm.cq-wcm-translation") :: paramOption("day-commons-jrawio") :: paramOption("org.apache.aries.jmx.whiteboard") :: paramOption("org.apache.felix.http.sslfilter") :: paramOption("org.apache.felix.org.apache.felix.threaddump") :: paramOption("org.apache.felix.webconsole.plugins.ds") :: paramOption("org.apache.felix.webconsole.plugins.event") :: paramOption("org.apache.felix.webconsole.plugins.memoryusage") :: paramOption("org.apache.felix.webconsole.plugins.packageadmin") :: paramOption("org.apache.jackrabbit.oak-auth-ldap") :: paramOption("org.apache.jackrabbit.oak-segment-tar") :: paramOption("org.apache.jackrabbit.oak-solr-osgi") :: paramOption("org.apache.sling.bundleresource.impl") :: paramOption("org.apache.sling.commons.fsclassloader") :: paramOption("org.apache.sling.commons.log.webconsole") :: paramOption("org.apache.sling.datasource") :: paramOption("org.apache.sling.discovery.base") :: paramOption("org.apache.sling.discovery.oak") :: paramOption("org.apache.sling.discovery.support") :: paramOption("org.apache.sling.distribution.api") :: paramOption("org.apache.sling.distribution.core") :: paramOption("org.apache.sling.extensions.webconsolesecurityprovider") :: paramOption("org.apache.sling.hc.webconsole") :: paramOption("org.apache.sling.installer.console") :: paramOption("org.apache.sling.installer.provider.file") :: paramOption("org.apache.sling.installer.provider.jcr") :: paramOption("org.apache.sling.jcr.davex") :: paramOption("org.apache.sling.jcr.resourcesecurity") :: paramOption("org.apache.sling.jmx.provider") :: paramOption("org.apache.sling.launchpad.installer") :: paramOption("org.apache.sling.models.impl") :: paramOption("org.apache.sling.repoinit.parser") :: paramOption("org.apache.sling.resource.inventory") :: paramOption("org.apache.sling.resourceresolver") :: paramOption("org.apache.sling.scripting.javascript") :: paramOption("org.apache.sling.scripting.jst") :: paramOption("org.apache.sling.scripting.sightly.js.provider") :: paramOption("org.apache.sling.scripting.sightly.models.provider") :: paramOption("org.apache.sling.security") :: paramOption("org.apache.sling.servlets.compat") :: paramOption("org.apache.sling.servlets.get") :: paramOption("org.apache.sling.startupfilter.disabler") :: paramOption("org.apache.sling.tracer") :: paramOption("we.retail.client.app.core")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], comPeriodadobePeriodcqPeriodcdnPeriodcdnRewriter: Option[String], comPeriodadobePeriodcqPeriodcloudConfigPeriodcomponents: Option[String], comPeriodadobePeriodcqPeriodcloudConfigPeriodcore: Option[String], comPeriodadobePeriodcqPeriodcloudConfigPeriodui: Option[String], comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodeditor: Option[String], comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodcore: Option[String], comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodwcmPeriodcore: Option[String], comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPerioduiPeriodcommons: Option[String], comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodwcmPeriodstyle: Option[String], comPeriodadobePeriodcqPeriodcqActivitymapIntegration: Option[String], comPeriodadobePeriodcqPeriodcqContexthubCommons: Option[String], comPeriodadobePeriodcqPeriodcqDtm: Option[String], comPeriodadobePeriodcqPeriodcqHealthcheck: Option[String], comPeriodadobePeriodcqPeriodcqMultisiteTargeting: Option[String], comPeriodadobePeriodcqPeriodcqPreUpgradeCleanup: Option[String], comPeriodadobePeriodcqPeriodcqProductInfoProvider: Option[String], comPeriodadobePeriodcqPeriodcqRestSites: Option[String], comPeriodadobePeriodcqPeriodcqSecurityHc: Option[String], comPeriodadobePeriodcqPerioddamPeriodcqDamSvgHandler: Option[String], comPeriodadobePeriodcqPerioddamPeriodcqScene7Imaging: Option[String], comPeriodadobePeriodcqPerioddtmReactorPeriodcore: Option[String], comPeriodadobePeriodcqPerioddtmReactorPeriodui: Option[String], comPeriodadobePeriodcqPeriodexpJspelResolver: Option[String], comPeriodadobePeriodcqPeriodinboxPeriodcqInbox: Option[String], comPeriodadobePeriodcqPeriodjsonSchemaParser: Option[String], comPeriodadobePeriodcqPeriodmediaPeriodcqMediaPublishingDpsFpCore: Option[String], comPeriodadobePeriodcqPeriodmobilePeriodcqMobileCaas: Option[String], comPeriodadobePeriodcqPeriodmobilePeriodcqMobileIndexBuilder: Option[String], comPeriodadobePeriodcqPeriodmobilePeriodcqMobilePhonegapBuild: Option[String], comPeriodadobePeriodcqPeriodmyspell: Option[String], comPeriodadobePeriodcqPeriodsamplePeriodwePeriodretailPeriodcore: Option[String], comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPerioddcc: Option[String], comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPeriodmqPeriodcore: Option[String], comPeriodadobePeriodcqPeriodsocialPeriodcqSocialAsProvider: Option[String], comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingBasicImpl: Option[String], comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingImpl: Option[String], comPeriodadobePeriodcqPeriodsocialPeriodcqSocialCalendarImpl: Option[String], comPeriodadobePeriodcqPeriodsocialPeriodcqSocialContentFragmentsImpl: Option[String], comPeriodadobePeriodcqPeriodsocialPeriodcqSocialEnablementImpl: Option[String], comPeriodadobePeriodcqPeriodsocialPeriodcqSocialGraphImpl: Option[String], comPeriodadobePeriodcqPeriodsocialPeriodcqSocialIdeationImpl: Option[String], comPeriodadobePeriodcqPeriodsocialPeriodcqSocialJcrProvider: Option[String], comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMembersImpl: Option[String], comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMsProvider: Option[String], comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsChannelsWeb: Option[String], comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsImpl: Option[String], comPeriodadobePeriodcqPeriodsocialPeriodcqSocialRdbProvider: Option[String], comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScfImpl: Option[String], comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringBasicImpl: Option[String], comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringImpl: Option[String], comPeriodadobePeriodcqPeriodsocialPeriodcqSocialServiceusersImpl: Option[String], comPeriodadobePeriodcqPeriodsocialPeriodcqSocialSrpImpl: Option[String], comPeriodadobePeriodcqPeriodsocialPeriodcqSocialUgcbaseImpl: Option[String], comPeriodadobePerioddamPeriodcqDamCfmImpl: Option[String], comPeriodadobePeriodformsPeriodfoundationFormsFoundationBase: Option[String], comPeriodadobePeriodgranitePeriodapicontroller: Option[String], comPeriodadobePeriodgranitePeriodassetPeriodcore: Option[String], comPeriodadobePeriodgranitePeriodauthPeriodsso: Option[String], comPeriodadobePeriodgranitePeriodbundlesPeriodhcPeriodimpl: Option[String], comPeriodadobePeriodgranitePeriodcompatRouter: Option[String], comPeriodadobePeriodgranitePeriodconf: Option[String], comPeriodadobePeriodgranitePeriodconfPerioduiPeriodcore: Option[String], comPeriodadobePeriodgranitePeriodcors: Option[String], comPeriodadobePeriodgranitePeriodcrxExplorer: Option[String], comPeriodadobePeriodgranitePeriodcrxdeLite: Option[String], comPeriodadobePeriodgranitePeriodcryptoPeriodconfig: Option[String], comPeriodadobePeriodgranitePeriodcryptoPeriodextension: Option[String], comPeriodadobePeriodgranitePeriodcryptoPeriodfile: Option[String], comPeriodadobePeriodgranitePeriodcryptoPeriodjcr: Option[String], comPeriodadobePeriodgranitePeriodcsrf: Option[String], comPeriodadobePeriodgranitePerioddistributionPeriodcore: Option[String], comPeriodadobePeriodgranitePerioddropwizardPeriodmetrics: Option[String], comPeriodadobePeriodgranitePeriodfragsPeriodimpl: Option[String], comPeriodadobePeriodgranitePeriodgibson: Option[String], comPeriodadobePeriodgranitePeriodinfocollector: Option[String], comPeriodadobePeriodgranitePeriodinstallerPeriodfactoryPeriodpackages: Option[String], comPeriodadobePeriodgranitePeriodjettyPeriodssl: Option[String], comPeriodadobePeriodgranitePeriodjobsPeriodasync: Option[String], comPeriodadobePeriodgranitePeriodmaintenancePeriodoak: Option[String], comPeriodadobePeriodgranitePeriodmonitoringPeriodcore: Option[String], comPeriodadobePeriodgranitePeriodqueries: Option[String], comPeriodadobePeriodgranitePeriodreplicationPeriodhcPeriodimpl: Option[String], comPeriodadobePeriodgranitePeriodrepositoryPeriodchecker: Option[String], comPeriodadobePeriodgranitePeriodrepositoryPeriodhcPeriodimpl: Option[String], comPeriodadobePeriodgranitePeriodrestPeriodassets: Option[String], comPeriodadobePeriodgranitePeriodsecurityPeriodui: Option[String], comPeriodadobePeriodgranitePeriodstartup: Option[String], comPeriodadobePeriodgranitePeriodtagsoup: Option[String], comPeriodadobePeriodgranitePeriodtaskmanagementPeriodcore: Option[String], comPeriodadobePeriodgranitePeriodtaskmanagementPeriodworkflow: Option[String], comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodcompilerPeriodless: Option[String], comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodprocessorPeriodgcc: Option[String], comPeriodadobePeriodgranitePeriodwebconsolePeriodplugins: Option[String], comPeriodadobePeriodgranitePeriodworkflowPeriodconsole: Option[String], comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodlinux: Option[String], comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodmacosx: Option[String], comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodwin: Option[String], comPerioddayPeriodcommonsPeriodosgiPeriodwrapperPeriodsimpleJndi: Option[String], comPerioddayPeriodcqPeriodcqAuthhandler: Option[String], comPerioddayPeriodcqPeriodcqCompatConfigupdate: Option[String], comPerioddayPeriodcqPeriodcqLicensebranding: Option[String], comPerioddayPeriodcqPeriodcqNotifcationImpl: Option[String], comPerioddayPeriodcqPeriodcqReplicationAudit: Option[String], comPerioddayPeriodcqPeriodcqSearchExt: Option[String], comPerioddayPeriodcqPerioddamPeriodcqDamAnnotationPrint: Option[String], comPerioddayPeriodcqPerioddamPeriodcqDamAssetUsage: Option[String], comPerioddayPeriodcqPerioddamPeriodcqDamS7dam: Option[String], comPerioddayPeriodcqPerioddamPeriodcqDamSimilaritysearch: Option[String], comPerioddayPeriodcqPerioddamPerioddamWebdavSupport: Option[String], comPerioddayPeriodcqPeriodpreUpgradeTasks: Option[String], comPerioddayPeriodcqPeriodreplicationPeriodextensions: Option[String], comPerioddayPeriodcqPeriodwcmPeriodcqMsmCore: Option[String], comPerioddayPeriodcqPeriodwcmPeriodcqWcmTranslation: Option[String], dayCommonsJrawio: Option[String], orgPeriodapachePeriodariesPeriodjmxPeriodwhiteboard: Option[String], orgPeriodapachePeriodfelixPeriodhttpPeriodsslfilter: Option[String], orgPeriodapachePeriodfelixPeriodorgPeriodapachePeriodfelixPeriodthreaddump: Option[String], orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodds: Option[String], orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodevent: Option[String], orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodmemoryusage: Option[String], orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodpackageadmin: Option[String], orgPeriodapachePeriodjackrabbitPeriodoakAuthLdap: Option[String], orgPeriodapachePeriodjackrabbitPeriodoakSegmentTar: Option[String], orgPeriodapachePeriodjackrabbitPeriodoakSolrOsgi: Option[String], orgPeriodapachePeriodslingPeriodbundleresourcePeriodimpl: Option[String], orgPeriodapachePeriodslingPeriodcommonsPeriodfsclassloader: Option[String], orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodwebconsole: Option[String], orgPeriodapachePeriodslingPerioddatasource: Option[String], orgPeriodapachePeriodslingPerioddiscoveryPeriodbase: Option[String], orgPeriodapachePeriodslingPerioddiscoveryPeriodoak: Option[String], orgPeriodapachePeriodslingPerioddiscoveryPeriodsupport: Option[String], orgPeriodapachePeriodslingPerioddistributionPeriodapi: Option[String], orgPeriodapachePeriodslingPerioddistributionPeriodcore: Option[String], orgPeriodapachePeriodslingPeriodextensionsPeriodwebconsolesecurityprovider: Option[String], orgPeriodapachePeriodslingPeriodhcPeriodwebconsole: Option[String], orgPeriodapachePeriodslingPeriodinstallerPeriodconsole: Option[String], orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodfile: Option[String], orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodjcr: Option[String], orgPeriodapachePeriodslingPeriodjcrPerioddavex: Option[String], orgPeriodapachePeriodslingPeriodjcrPeriodresourcesecurity: Option[String], orgPeriodapachePeriodslingPeriodjmxPeriodprovider: Option[String], orgPeriodapachePeriodslingPeriodlaunchpadPeriodinstaller: Option[String], orgPeriodapachePeriodslingPeriodmodelsPeriodimpl: Option[String], orgPeriodapachePeriodslingPeriodrepoinitPeriodparser: Option[String], orgPeriodapachePeriodslingPeriodresourcePeriodinventory: Option[String], orgPeriodapachePeriodslingPeriodresourceresolver: Option[String], orgPeriodapachePeriodslingPeriodscriptingPeriodjavascript: Option[String], orgPeriodapachePeriodslingPeriodscriptingPeriodjst: Option[String], orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodprovider: Option[String], orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodmodelsPeriodprovider: Option[String], orgPeriodapachePeriodslingPeriodsecurity: Option[String], orgPeriodapachePeriodslingPeriodservletsPeriodcompat: Option[String], orgPeriodapachePeriodslingPeriodservletsPeriodget: Option[String], orgPeriodapachePeriodslingPeriodstartupfilterPerioddisabler: Option[String], orgPeriodapachePeriodslingPeriodtracer: Option[String], wePeriodretailPeriodclientPeriodappPeriodcore: Option[String]) =>
          da.Configmgr_comAdobeGraniteApicontrollerFilterResolverHookFactory(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodcqPeriodcdnPeriodcdnRewriter, comPeriodadobePeriodcqPeriodcloudConfigPeriodcomponents, comPeriodadobePeriodcqPeriodcloudConfigPeriodcore, comPeriodadobePeriodcqPeriodcloudConfigPeriodui, comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodeditor, comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodcore, comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodwcmPeriodcore, comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPerioduiPeriodcommons, comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodwcmPeriodstyle, comPeriodadobePeriodcqPeriodcqActivitymapIntegration, comPeriodadobePeriodcqPeriodcqContexthubCommons, comPeriodadobePeriodcqPeriodcqDtm, comPeriodadobePeriodcqPeriodcqHealthcheck, comPeriodadobePeriodcqPeriodcqMultisiteTargeting, comPeriodadobePeriodcqPeriodcqPreUpgradeCleanup, comPeriodadobePeriodcqPeriodcqProductInfoProvider, comPeriodadobePeriodcqPeriodcqRestSites, comPeriodadobePeriodcqPeriodcqSecurityHc, comPeriodadobePeriodcqPerioddamPeriodcqDamSvgHandler, comPeriodadobePeriodcqPerioddamPeriodcqScene7Imaging, comPeriodadobePeriodcqPerioddtmReactorPeriodcore, comPeriodadobePeriodcqPerioddtmReactorPeriodui, comPeriodadobePeriodcqPeriodexpJspelResolver, comPeriodadobePeriodcqPeriodinboxPeriodcqInbox, comPeriodadobePeriodcqPeriodjsonSchemaParser, comPeriodadobePeriodcqPeriodmediaPeriodcqMediaPublishingDpsFpCore, comPeriodadobePeriodcqPeriodmobilePeriodcqMobileCaas, comPeriodadobePeriodcqPeriodmobilePeriodcqMobileIndexBuilder, comPeriodadobePeriodcqPeriodmobilePeriodcqMobilePhonegapBuild, comPeriodadobePeriodcqPeriodmyspell, comPeriodadobePeriodcqPeriodsamplePeriodwePeriodretailPeriodcore, comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPerioddcc, comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPeriodmqPeriodcore, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialAsProvider, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingBasicImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialCalendarImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialContentFragmentsImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialEnablementImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialGraphImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialIdeationImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialJcrProvider, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMembersImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMsProvider, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsChannelsWeb, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialRdbProvider, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScfImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringBasicImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialServiceusersImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialSrpImpl, comPeriodadobePeriodcqPeriodsocialPeriodcqSocialUgcbaseImpl, comPeriodadobePerioddamPeriodcqDamCfmImpl, comPeriodadobePeriodformsPeriodfoundationFormsFoundationBase, comPeriodadobePeriodgranitePeriodapicontroller, comPeriodadobePeriodgranitePeriodassetPeriodcore, comPeriodadobePeriodgranitePeriodauthPeriodsso, comPeriodadobePeriodgranitePeriodbundlesPeriodhcPeriodimpl, comPeriodadobePeriodgranitePeriodcompatRouter, comPeriodadobePeriodgranitePeriodconf, comPeriodadobePeriodgranitePeriodconfPerioduiPeriodcore, comPeriodadobePeriodgranitePeriodcors, comPeriodadobePeriodgranitePeriodcrxExplorer, comPeriodadobePeriodgranitePeriodcrxdeLite, comPeriodadobePeriodgranitePeriodcryptoPeriodconfig, comPeriodadobePeriodgranitePeriodcryptoPeriodextension, comPeriodadobePeriodgranitePeriodcryptoPeriodfile, comPeriodadobePeriodgranitePeriodcryptoPeriodjcr, comPeriodadobePeriodgranitePeriodcsrf, comPeriodadobePeriodgranitePerioddistributionPeriodcore, comPeriodadobePeriodgranitePerioddropwizardPeriodmetrics, comPeriodadobePeriodgranitePeriodfragsPeriodimpl, comPeriodadobePeriodgranitePeriodgibson, comPeriodadobePeriodgranitePeriodinfocollector, comPeriodadobePeriodgranitePeriodinstallerPeriodfactoryPeriodpackages, comPeriodadobePeriodgranitePeriodjettyPeriodssl, comPeriodadobePeriodgranitePeriodjobsPeriodasync, comPeriodadobePeriodgranitePeriodmaintenancePeriodoak, comPeriodadobePeriodgranitePeriodmonitoringPeriodcore, comPeriodadobePeriodgranitePeriodqueries, comPeriodadobePeriodgranitePeriodreplicationPeriodhcPeriodimpl, comPeriodadobePeriodgranitePeriodrepositoryPeriodchecker, comPeriodadobePeriodgranitePeriodrepositoryPeriodhcPeriodimpl, comPeriodadobePeriodgranitePeriodrestPeriodassets, comPeriodadobePeriodgranitePeriodsecurityPeriodui, comPeriodadobePeriodgranitePeriodstartup, comPeriodadobePeriodgranitePeriodtagsoup, comPeriodadobePeriodgranitePeriodtaskmanagementPeriodcore, comPeriodadobePeriodgranitePeriodtaskmanagementPeriodworkflow, comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodcompilerPeriodless, comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodprocessorPeriodgcc, comPeriodadobePeriodgranitePeriodwebconsolePeriodplugins, comPeriodadobePeriodgranitePeriodworkflowPeriodconsole, comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodlinux, comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodmacosx, comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodwin, comPerioddayPeriodcommonsPeriodosgiPeriodwrapperPeriodsimpleJndi, comPerioddayPeriodcqPeriodcqAuthhandler, comPerioddayPeriodcqPeriodcqCompatConfigupdate, comPerioddayPeriodcqPeriodcqLicensebranding, comPerioddayPeriodcqPeriodcqNotifcationImpl, comPerioddayPeriodcqPeriodcqReplicationAudit, comPerioddayPeriodcqPeriodcqSearchExt, comPerioddayPeriodcqPerioddamPeriodcqDamAnnotationPrint, comPerioddayPeriodcqPerioddamPeriodcqDamAssetUsage, comPerioddayPeriodcqPerioddamPeriodcqDamS7dam, comPerioddayPeriodcqPerioddamPeriodcqDamSimilaritysearch, comPerioddayPeriodcqPerioddamPerioddamWebdavSupport, comPerioddayPeriodcqPeriodpreUpgradeTasks, comPerioddayPeriodcqPeriodreplicationPeriodextensions, comPerioddayPeriodcqPeriodwcmPeriodcqMsmCore, comPerioddayPeriodcqPeriodwcmPeriodcqWcmTranslation, dayCommonsJrawio, orgPeriodapachePeriodariesPeriodjmxPeriodwhiteboard, orgPeriodapachePeriodfelixPeriodhttpPeriodsslfilter, orgPeriodapachePeriodfelixPeriodorgPeriodapachePeriodfelixPeriodthreaddump, orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodds, orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodevent, orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodmemoryusage, orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodpackageadmin, orgPeriodapachePeriodjackrabbitPeriodoakAuthLdap, orgPeriodapachePeriodjackrabbitPeriodoakSegmentTar, orgPeriodapachePeriodjackrabbitPeriodoakSolrOsgi, orgPeriodapachePeriodslingPeriodbundleresourcePeriodimpl, orgPeriodapachePeriodslingPeriodcommonsPeriodfsclassloader, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodwebconsole, orgPeriodapachePeriodslingPerioddatasource, orgPeriodapachePeriodslingPerioddiscoveryPeriodbase, orgPeriodapachePeriodslingPerioddiscoveryPeriodoak, orgPeriodapachePeriodslingPerioddiscoveryPeriodsupport, orgPeriodapachePeriodslingPerioddistributionPeriodapi, orgPeriodapachePeriodslingPerioddistributionPeriodcore, orgPeriodapachePeriodslingPeriodextensionsPeriodwebconsolesecurityprovider, orgPeriodapachePeriodslingPeriodhcPeriodwebconsole, orgPeriodapachePeriodslingPeriodinstallerPeriodconsole, orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodfile, orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodjcr, orgPeriodapachePeriodslingPeriodjcrPerioddavex, orgPeriodapachePeriodslingPeriodjcrPeriodresourcesecurity, orgPeriodapachePeriodslingPeriodjmxPeriodprovider, orgPeriodapachePeriodslingPeriodlaunchpadPeriodinstaller, orgPeriodapachePeriodslingPeriodmodelsPeriodimpl, orgPeriodapachePeriodslingPeriodrepoinitPeriodparser, orgPeriodapachePeriodslingPeriodresourcePeriodinventory, orgPeriodapachePeriodslingPeriodresourceresolver, orgPeriodapachePeriodslingPeriodscriptingPeriodjavascript, orgPeriodapachePeriodslingPeriodscriptingPeriodjst, orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodprovider, orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodmodelsPeriodprovider, orgPeriodapachePeriodslingPeriodsecurity, orgPeriodapachePeriodslingPeriodservletsPeriodcompat, orgPeriodapachePeriodslingPeriodservletsPeriodget, orgPeriodapachePeriodslingPeriodstartupfilterPerioddisabler, orgPeriodapachePeriodslingPeriodtracer, wePeriodretailPeriodclientPeriodappPeriodcore) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo
        */
        private def comAdobeGraniteAuthCertImplClientCertAuthHandler(da: DataAccessor): Endpoint[ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.cert.impl.ClientCertAuthHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("path") :: paramOption("service.ranking").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], path: Option[String], servicePeriodranking: Option[Int]) =>
          da.Configmgr_comAdobeGraniteAuthCertImplClientCertAuthHandler(post, apply, delete, action, Dollarlocation, propertylist, path, servicePeriodranking) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthImsInfo
        */
        private def comAdobeGraniteAuthIms(da: DataAccessor): Endpoint[ComAdobeGraniteAuthImsInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.ims" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("configid") :: paramOption("scope")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], configid: Option[String], scope: Option[String]) =>
          da.Configmgr_comAdobeGraniteAuthIms(post, apply, delete, action, Dollarlocation, propertylist, configid, scope) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo
        */
        private def comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(da: DataAccessor): Endpoint[ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("oauth.provider.id")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], oauthPeriodproviderPeriodid: Option[String]) =>
          da.Configmgr_comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodproviderPeriodid) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo
        */
        private def comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(da: DataAccessor): Endpoint[ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("auth.ims.client.secret") :: paramOption("customizer.type")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], authPeriodimsPeriodclientPeriodsecret: Option[String], customizerPeriodtype: Option[String]) =>
          da.Configmgr_comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(post, apply, delete, action, Dollarlocation, propertylist, authPeriodimsPeriodclientPeriodsecret, customizerPeriodtype) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo
        */
        private def comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(da: DataAccessor): Endpoint[ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("oauth.provider.id")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], oauthPeriodproviderPeriodid: Option[String]) =>
          da.Configmgr_comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodproviderPeriodid) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthImsImplIMSProviderImplInfo
        */
        private def comAdobeGraniteAuthImsImplIMSProviderImpl(da: DataAccessor): Endpoint[ComAdobeGraniteAuthImsImplIMSProviderImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.ims.impl.IMSProviderImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("oauth.provider.id") :: paramOption("oauth.provider.ims.authorization.url") :: paramOption("oauth.provider.ims.token.url") :: paramOption("oauth.provider.ims.profile.url") :: params("oauth.provider.ims.extended.details.urls") :: paramOption("oauth.provider.ims.validate.token.url") :: paramOption("oauth.provider.ims.session.property") :: paramOption("oauth.provider.ims.service.token.client.id") :: paramOption("oauth.provider.ims.service.token.client.secret") :: paramOption("oauth.provider.ims.service.token") :: paramOption("ims.org.ref") :: params("ims.group.mapping") :: paramOption("oauth.provider.ims.only.license.group").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], oauthPeriodproviderPeriodid: Option[String], oauthPeriodproviderPeriodimsPeriodauthorizationPeriodurl: Option[String], oauthPeriodproviderPeriodimsPeriodtokenPeriodurl: Option[String], oauthPeriodproviderPeriodimsPeriodprofilePeriodurl: Option[String], oauthPeriodproviderPeriodimsPeriodextendedPerioddetailsPeriodurls: Seq[String], oauthPeriodproviderPeriodimsPeriodvalidatePeriodtokenPeriodurl: Option[String], oauthPeriodproviderPeriodimsPeriodsessionPeriodproperty: Option[String], oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodid: Option[String], oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodsecret: Option[String], oauthPeriodproviderPeriodimsPeriodservicePeriodtoken: Option[String], imsPeriodorgPeriodref: Option[String], imsPeriodgroupPeriodmapping: Seq[String], oauthPeriodproviderPeriodimsPeriodonlyPeriodlicensePeriodgroup: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteAuthImsImplIMSProviderImpl(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodproviderPeriodid, oauthPeriodproviderPeriodimsPeriodauthorizationPeriodurl, oauthPeriodproviderPeriodimsPeriodtokenPeriodurl, oauthPeriodproviderPeriodimsPeriodprofilePeriodurl, oauthPeriodproviderPeriodimsPeriodextendedPerioddetailsPeriodurls, oauthPeriodproviderPeriodimsPeriodvalidatePeriodtokenPeriodurl, oauthPeriodproviderPeriodimsPeriodsessionPeriodproperty, oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodid, oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodsecret, oauthPeriodproviderPeriodimsPeriodservicePeriodtoken, imsPeriodorgPeriodref, imsPeriodgroupPeriodmapping, oauthPeriodproviderPeriodimsPeriodonlyPeriodlicensePeriodgroup) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo
        */
        private def comAdobeGraniteAuthImsImplImsConfigProviderImpl(da: DataAccessor): Endpoint[ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("oauth.configmanager.ims.configid") :: paramOption("ims.owningEntity") :: paramOption("aem.instanceId") :: paramOption("ims.serviceCode")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], oauthPeriodconfigmanagerPeriodimsPeriodconfigid: Option[String], imsPeriodowningEntity: Option[String], aemPeriodinstanceId: Option[String], imsPeriodserviceCode: Option[String]) =>
          da.Configmgr_comAdobeGraniteAuthImsImplImsConfigProviderImpl(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodconfigmanagerPeriodimsPeriodconfigid, imsPeriodowningEntity, aemPeriodinstanceId, imsPeriodserviceCode) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthOauthAccesstokenProviderInfo
        */
        private def comAdobeGraniteAuthOauthAccesstokenProvider(da: DataAccessor): Endpoint[ComAdobeGraniteAuthOauthAccesstokenProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.oauth.accesstoken.provider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("auth.token.provider.title") :: params("auth.token.provider.default.claims") :: paramOption("auth.token.provider.endpoint") :: paramOption("auth.access.token.request") :: paramOption("auth.token.provider.keypair.alias") :: paramOption("auth.token.provider.conn.timeout").map(_.map(_.toInt)) :: paramOption("auth.token.provider.so.timeout").map(_.map(_.toInt)) :: paramOption("auth.token.provider.client.id") :: paramOption("auth.token.provider.scope") :: paramOption("auth.token.provider.reuse.access.token").map(_.map(_.toBoolean)) :: paramOption("auth.token.provider.relaxed.ssl").map(_.map(_.toBoolean)) :: paramOption("token.request.customizer.type") :: paramOption("auth.token.validator.type")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], authPeriodtokenPeriodproviderPeriodtitle: Option[String], authPeriodtokenPeriodproviderPerioddefaultPeriodclaims: Seq[String], authPeriodtokenPeriodproviderPeriodendpoint: Option[String], authPeriodaccessPeriodtokenPeriodrequest: Option[String], authPeriodtokenPeriodproviderPeriodkeypairPeriodalias: Option[String], authPeriodtokenPeriodproviderPeriodconnPeriodtimeout: Option[Int], authPeriodtokenPeriodproviderPeriodsoPeriodtimeout: Option[Int], authPeriodtokenPeriodproviderPeriodclientPeriodid: Option[String], authPeriodtokenPeriodproviderPeriodscope: Option[String], authPeriodtokenPeriodproviderPeriodreusePeriodaccessPeriodtoken: Option[Boolean], authPeriodtokenPeriodproviderPeriodrelaxedPeriodssl: Option[Boolean], tokenPeriodrequestPeriodcustomizerPeriodtype: Option[String], authPeriodtokenPeriodvalidatorPeriodtype: Option[String]) =>
          da.Configmgr_comAdobeGraniteAuthOauthAccesstokenProvider(post, apply, delete, action, Dollarlocation, propertylist, name, authPeriodtokenPeriodproviderPeriodtitle, authPeriodtokenPeriodproviderPerioddefaultPeriodclaims, authPeriodtokenPeriodproviderPeriodendpoint, authPeriodaccessPeriodtokenPeriodrequest, authPeriodtokenPeriodproviderPeriodkeypairPeriodalias, authPeriodtokenPeriodproviderPeriodconnPeriodtimeout, authPeriodtokenPeriodproviderPeriodsoPeriodtimeout, authPeriodtokenPeriodproviderPeriodclientPeriodid, authPeriodtokenPeriodproviderPeriodscope, authPeriodtokenPeriodproviderPeriodreusePeriodaccessPeriodtoken, authPeriodtokenPeriodproviderPeriodrelaxedPeriodssl, tokenPeriodrequestPeriodcustomizerPeriodtype, authPeriodtokenPeriodvalidatorPeriodtype) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo
        */
        private def comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(da: DataAccessor): Endpoint[ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("path") :: params("oauth.clientIds.allowed") :: paramOption("auth.bearer.sync.ims").map(_.map(_.toBoolean)) :: paramOption("auth.tokenRequestParameter") :: paramOption("oauth.bearer.configid") :: paramOption("oauth.jwt.support").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], path: Option[String], oauthPeriodclientIdsPeriodallowed: Seq[String], authPeriodbearerPeriodsyncPeriodims: Option[Boolean], authPeriodtokenRequestParameter: Option[String], oauthPeriodbearerPeriodconfigid: Option[String], oauthPeriodjwtPeriodsupport: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(post, apply, delete, action, Dollarlocation, propertylist, path, oauthPeriodclientIdsPeriodallowed, authPeriodbearerPeriodsyncPeriodims, authPeriodtokenRequestParameter, oauthPeriodbearerPeriodconfigid, oauthPeriodjwtPeriodsupport) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo
        */
        private def comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(da: DataAccessor): Endpoint[ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("auth.token.validator.type")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], authPeriodtokenPeriodvalidatorPeriodtype: Option[String]) =>
          da.Configmgr_comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(post, apply, delete, action, Dollarlocation, propertylist, authPeriodtokenPeriodvalidatorPeriodtype) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo
        */
        private def comAdobeGraniteAuthOauthImplFacebookProviderImpl(da: DataAccessor): Endpoint[ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.oauth.impl.FacebookProviderImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("oauth.provider.id")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], oauthPeriodproviderPeriodid: Option[String]) =>
          da.Configmgr_comAdobeGraniteAuthOauthImplFacebookProviderImpl(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodproviderPeriodid) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthOauthImplGithubProviderImplInfo
        */
        private def comAdobeGraniteAuthOauthImplGithubProviderImpl(da: DataAccessor): Endpoint[ComAdobeGraniteAuthOauthImplGithubProviderImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.oauth.impl.GithubProviderImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("oauth.provider.id") :: paramOption("oauth.provider.github.authorization.url") :: paramOption("oauth.provider.github.token.url") :: paramOption("oauth.provider.github.profile.url")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], oauthPeriodproviderPeriodid: Option[String], oauthPeriodproviderPeriodgithubPeriodauthorizationPeriodurl: Option[String], oauthPeriodproviderPeriodgithubPeriodtokenPeriodurl: Option[String], oauthPeriodproviderPeriodgithubPeriodprofilePeriodurl: Option[String]) =>
          da.Configmgr_comAdobeGraniteAuthOauthImplGithubProviderImpl(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodproviderPeriodid, oauthPeriodproviderPeriodgithubPeriodauthorizationPeriodurl, oauthPeriodproviderPeriodgithubPeriodtokenPeriodurl, oauthPeriodproviderPeriodgithubPeriodprofilePeriodurl) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthOauthImplGraniteProviderInfo
        */
        private def comAdobeGraniteAuthOauthImplGraniteProvider(da: DataAccessor): Endpoint[ComAdobeGraniteAuthOauthImplGraniteProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.oauth.impl.GraniteProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("oauth.provider.id") :: paramOption("oauth.provider.granite.authorization.url") :: paramOption("oauth.provider.granite.token.url") :: paramOption("oauth.provider.granite.profile.url") :: paramOption("oauth.provider.granite.extended.details.urls")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], oauthPeriodproviderPeriodid: Option[String], oauthPeriodproviderPeriodgranitePeriodauthorizationPeriodurl: Option[String], oauthPeriodproviderPeriodgranitePeriodtokenPeriodurl: Option[String], oauthPeriodproviderPeriodgranitePeriodprofilePeriodurl: Option[String], oauthPeriodproviderPeriodgranitePeriodextendedPerioddetailsPeriodurls: Option[String]) =>
          da.Configmgr_comAdobeGraniteAuthOauthImplGraniteProvider(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodproviderPeriodid, oauthPeriodproviderPeriodgranitePeriodauthorizationPeriodurl, oauthPeriodproviderPeriodgranitePeriodtokenPeriodurl, oauthPeriodproviderPeriodgranitePeriodprofilePeriodurl, oauthPeriodproviderPeriodgranitePeriodextendedPerioddetailsPeriodurls) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo
        */
        private def comAdobeGraniteAuthOauthImplHelperProviderConfigManager(da: DataAccessor): Endpoint[ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("oauth.cookie.login.timeout") :: paramOption("oauth.cookie.max.age")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], oauthPeriodcookiePeriodloginPeriodtimeout: Option[String], oauthPeriodcookiePeriodmaxPeriodage: Option[String]) =>
          da.Configmgr_comAdobeGraniteAuthOauthImplHelperProviderConfigManager(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodcookiePeriodloginPeriodtimeout, oauthPeriodcookiePeriodmaxPeriodage) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo
        */
        private def comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(da: DataAccessor): Endpoint[ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("oauth.cookie.login.timeout") :: paramOption("oauth.cookie.max.age")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], oauthPeriodcookiePeriodloginPeriodtimeout: Option[String], oauthPeriodcookiePeriodmaxPeriodage: Option[String]) =>
          da.Configmgr_comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodcookiePeriodloginPeriodtimeout, oauthPeriodcookiePeriodmaxPeriodage) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo
        */
        private def comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(da: DataAccessor): Endpoint[ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("path")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], path: Option[String]) =>
          da.Configmgr_comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(post, apply, delete, action, Dollarlocation, propertylist, path) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo
        */
        private def comAdobeGraniteAuthOauthImplTwitterProviderImpl(da: DataAccessor): Endpoint[ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.oauth.impl.TwitterProviderImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("oauth.provider.id")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], oauthPeriodproviderPeriodid: Option[String]) =>
          da.Configmgr_comAdobeGraniteAuthOauthImplTwitterProviderImpl(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodproviderPeriodid) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthOauthProviderInfo
        */
        private def comAdobeGraniteAuthOauthProvider(da: DataAccessor): Endpoint[ComAdobeGraniteAuthOauthProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.oauth.provider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("oauth.config.id") :: paramOption("oauth.client.id") :: paramOption("oauth.client.secret") :: params("oauth.scope") :: paramOption("oauth.config.provider.id") :: paramOption("oauth.create.users").map(_.map(_.toBoolean)) :: paramOption("oauth.userid.property") :: paramOption("force.strict.username.matching").map(_.map(_.toBoolean)) :: paramOption("oauth.encode.userids").map(_.map(_.toBoolean)) :: paramOption("oauth.hash.userids").map(_.map(_.toBoolean)) :: paramOption("oauth.callBackUrl") :: paramOption("oauth.access.token.persist").map(_.map(_.toBoolean)) :: paramOption("oauth.access.token.persist.cookie").map(_.map(_.toBoolean)) :: paramOption("oauth.csrf.state.protection").map(_.map(_.toBoolean)) :: paramOption("oauth.redirect.request.params").map(_.map(_.toBoolean)) :: paramOption("oauth.config.siblings.allow").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], oauthPeriodconfigPeriodid: Option[String], oauthPeriodclientPeriodid: Option[String], oauthPeriodclientPeriodsecret: Option[String], oauthPeriodscope: Seq[String], oauthPeriodconfigPeriodproviderPeriodid: Option[String], oauthPeriodcreatePeriodusers: Option[Boolean], oauthPerioduseridPeriodproperty: Option[String], forcePeriodstrictPeriodusernamePeriodmatching: Option[Boolean], oauthPeriodencodePerioduserids: Option[Boolean], oauthPeriodhashPerioduserids: Option[Boolean], oauthPeriodcallBackUrl: Option[String], oauthPeriodaccessPeriodtokenPeriodpersist: Option[Boolean], oauthPeriodaccessPeriodtokenPeriodpersistPeriodcookie: Option[Boolean], oauthPeriodcsrfPeriodstatePeriodprotection: Option[Boolean], oauthPeriodredirectPeriodrequestPeriodparams: Option[Boolean], oauthPeriodconfigPeriodsiblingsPeriodallow: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteAuthOauthProvider(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodconfigPeriodid, oauthPeriodclientPeriodid, oauthPeriodclientPeriodsecret, oauthPeriodscope, oauthPeriodconfigPeriodproviderPeriodid, oauthPeriodcreatePeriodusers, oauthPerioduseridPeriodproperty, forcePeriodstrictPeriodusernamePeriodmatching, oauthPeriodencodePerioduserids, oauthPeriodhashPerioduserids, oauthPeriodcallBackUrl, oauthPeriodaccessPeriodtokenPeriodpersist, oauthPeriodaccessPeriodtokenPeriodpersistPeriodcookie, oauthPeriodcsrfPeriodstatePeriodprotection, oauthPeriodredirectPeriodrequestPeriodparams, oauthPeriodconfigPeriodsiblingsPeriodallow) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo
        */
        private def comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(da: DataAccessor): Endpoint[ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("supportedPaths")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], supportedPaths: Seq[String]) =>
          da.Configmgr_comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(post, apply, delete, action, Dollarlocation, propertylist, supportedPaths) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo
        */
        private def comAdobeGraniteAuthSamlSamlAuthenticationHandler(da: DataAccessor): Endpoint[ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.saml.SamlAuthenticationHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("path") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("idpUrl") :: paramOption("idpCertAlias") :: paramOption("idpHttpRedirect").map(_.map(_.toBoolean)) :: paramOption("serviceProviderEntityId") :: paramOption("assertionConsumerServiceURL") :: paramOption("spPrivateKeyAlias") :: paramOption("keyStorePassword") :: paramOption("defaultRedirectUrl") :: paramOption("userIDAttribute") :: paramOption("useEncryption").map(_.map(_.toBoolean)) :: paramOption("createUser").map(_.map(_.toBoolean)) :: paramOption("userIntermediatePath") :: paramOption("addGroupMemberships").map(_.map(_.toBoolean)) :: paramOption("groupMembershipAttribute") :: params("defaultGroups") :: paramOption("nameIdFormat") :: params("synchronizeAttributes") :: paramOption("handleLogout").map(_.map(_.toBoolean)) :: paramOption("logoutUrl") :: paramOption("clockTolerance").map(_.map(_.toInt)) :: paramOption("digestMethod") :: paramOption("signatureMethod") :: paramOption("identitySyncType") :: paramOption("idpIdentifier")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], path: Seq[String], servicePeriodranking: Option[Int], idpUrl: Option[String], idpCertAlias: Option[String], idpHttpRedirect: Option[Boolean], serviceProviderEntityId: Option[String], assertionConsumerServiceURL: Option[String], spPrivateKeyAlias: Option[String], keyStorePassword: Option[String], defaultRedirectUrl: Option[String], userIDAttribute: Option[String], useEncryption: Option[Boolean], createUser: Option[Boolean], userIntermediatePath: Option[String], addGroupMemberships: Option[Boolean], groupMembershipAttribute: Option[String], defaultGroups: Seq[String], nameIdFormat: Option[String], synchronizeAttributes: Seq[String], handleLogout: Option[Boolean], logoutUrl: Option[String], clockTolerance: Option[Int], digestMethod: Option[String], signatureMethod: Option[String], identitySyncType: Option[String], idpIdentifier: Option[String]) =>
          da.Configmgr_comAdobeGraniteAuthSamlSamlAuthenticationHandler(post, apply, delete, action, Dollarlocation, propertylist, path, servicePeriodranking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, userIntermediatePath, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, identitySyncType, idpIdentifier) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo
        */
        private def comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(da: DataAccessor): Endpoint[ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("path") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("jaas.controlFlag") :: paramOption("jaas.realmName") :: paramOption("jaas.ranking").map(_.map(_.toInt)) :: params("headers") :: params("cookies") :: params("parameters") :: params("usermap") :: paramOption("format") :: paramOption("trustedCredentialsAttribute")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], path: Option[String], servicePeriodranking: Option[Int], jaasPeriodcontrolFlag: Option[String], jaasPeriodrealmName: Option[String], jaasPeriodranking: Option[Int], headers: Seq[String], cookies: Seq[String], parameters: Seq[String], usermap: Seq[String], format: Option[String], trustedCredentialsAttribute: Option[String]) =>
          da.Configmgr_comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(post, apply, delete, action, Dollarlocation, propertylist, path, servicePeriodranking, jaasPeriodcontrolFlag, jaasPeriodrealmName, jaasPeriodranking, headers, cookies, parameters, usermap, format, trustedCredentialsAttribute) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo
        */
        private def comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags") :: paramOption("minimum.code.cache.size").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String], minimumPeriodcodePeriodcachePeriodsize: Option[Int]) =>
          da.Configmgr_comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, minimumPeriodcodePeriodcachePeriodsize) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo
        */
        private def comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo
        */
        private def comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo
        */
        private def comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags") :: params("ignored.bundles")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String], ignoredPeriodbundles: Seq[String]) =>
          da.Configmgr_comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, ignoredPeriodbundles) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo
        */
        private def comAdobeGraniteBundlesHcImplJobsHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.bundles.hc.impl.JobsHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags") :: paramOption("max.queued.jobs").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String], maxPeriodqueuedPeriodjobs: Option[Int]) =>
          da.Configmgr_comAdobeGraniteBundlesHcImplJobsHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, maxPeriodqueuedPeriodjobs) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo
        */
        private def comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo
        */
        private def comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo
        */
        private def comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo
        */
        private def comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo
        */
        private def comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo
        */
        private def comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(da: DataAccessor): Endpoint[ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("replicate.comment.resourceTypes")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], replicatePeriodcommentPeriodresourceTypes: Seq[String]) =>
          da.Configmgr_comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(post, apply, delete, action, Dollarlocation, propertylist, replicatePeriodcommentPeriodresourceTypes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo
        */
        private def comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(da: DataAccessor): Endpoint[ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("compatgroups") :: paramOption("enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], compatgroups: Seq[String], enabled: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, compatgroups, enabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteCompatrouterImplRoutingConfigInfo
        */
        private def comAdobeGraniteCompatrouterImplRoutingConfig(da: DataAccessor): Endpoint[ComAdobeGraniteCompatrouterImplRoutingConfigInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.compatrouter.impl.RoutingConfig" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("id") :: paramOption("compatPath") :: paramOption("newPath")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], id: Option[String], compatPath: Option[String], newPath: Option[String]) =>
          da.Configmgr_comAdobeGraniteCompatrouterImplRoutingConfig(post, apply, delete, action, Dollarlocation, propertylist, id, compatPath, newPath) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo
        */
        private def comAdobeGraniteCompatrouterImplSwitchMappingConfig(da: DataAccessor): Endpoint[ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.compatrouter.impl.SwitchMappingConfig" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("group") :: params("ids")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], group: Option[String], ids: Seq[String]) =>
          da.Configmgr_comAdobeGraniteCompatrouterImplSwitchMappingConfig(post, apply, delete, action, Dollarlocation, propertylist, group, ids) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo
        */
        private def comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(da: DataAccessor): Endpoint[ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enabled").map(_.map(_.toBoolean)) :: params("fallbackPaths")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enabled: Option[Boolean], fallbackPaths: Seq[String]) =>
          da.Configmgr_comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(post, apply, delete, action, Dollarlocation, propertylist, enabled, fallbackPaths) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteContexthubImplContextHubImplInfo
        */
        private def comAdobeGraniteContexthubImplContextHubImpl(da: DataAccessor): Endpoint[ComAdobeGraniteContexthubImplContextHubImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.contexthub.impl.ContextHubImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("com.adobe.granite.contexthub.silent_mode").map(_.map(_.toBoolean)) :: paramOption("com.adobe.granite.contexthub.show_ui").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], comPeriodadobePeriodgranitePeriodcontexthubPeriodsilentMode: Option[Boolean], comPeriodadobePeriodgranitePeriodcontexthubPeriodshowUi: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteContexthubImplContextHubImpl(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodgranitePeriodcontexthubPeriodsilentMode, comPeriodadobePeriodgranitePeriodcontexthubPeriodshowUi) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteCorsImplCORSPolicyImplInfo
        */
        private def comAdobeGraniteCorsImplCORSPolicyImpl(da: DataAccessor): Endpoint[ComAdobeGraniteCorsImplCORSPolicyImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.cors.impl.CORSPolicyImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("alloworigin") :: params("alloworiginregexp") :: params("allowedpaths") :: params("exposedheaders") :: paramOption("maxage").map(_.map(_.toInt)) :: params("supportedheaders") :: params("supportedmethods") :: paramOption("supportscredentials").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], alloworigin: Seq[String], alloworiginregexp: Seq[String], allowedpaths: Seq[String], exposedheaders: Seq[String], maxage: Option[Int], supportedheaders: Seq[String], supportedmethods: Seq[String], supportscredentials: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteCorsImplCORSPolicyImpl(post, apply, delete, action, Dollarlocation, propertylist, alloworigin, alloworiginregexp, allowedpaths, exposedheaders, maxage, supportedheaders, supportedmethods, supportscredentials) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteCsrfImplCSRFFilterInfo
        */
        private def comAdobeGraniteCsrfImplCSRFFilter(da: DataAccessor): Endpoint[ComAdobeGraniteCsrfImplCSRFFilterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.csrf.impl.CSRFFilter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("filter.methods") :: paramOption("filter.enable.safe.user.agents").map(_.map(_.toBoolean)) :: params("filter.safe.user.agents") :: params("filter.excluded.paths")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], filterPeriodmethods: Seq[String], filterPeriodenablePeriodsafePerioduserPeriodagents: Option[Boolean], filterPeriodsafePerioduserPeriodagents: Seq[String], filterPeriodexcludedPeriodpaths: Seq[String]) =>
          da.Configmgr_comAdobeGraniteCsrfImplCSRFFilter(post, apply, delete, action, Dollarlocation, propertylist, filterPeriodmethods, filterPeriodenablePeriodsafePerioduserPeriodagents, filterPeriodsafePerioduserPeriodagents, filterPeriodexcludedPeriodpaths) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteCsrfImplCSRFServletInfo
        */
        private def comAdobeGraniteCsrfImplCSRFServlet(da: DataAccessor): Endpoint[ComAdobeGraniteCsrfImplCSRFServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.csrf.impl.CSRFServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("csrf.token.expires.in").map(_.map(_.toInt)) :: paramOption("sling.auth.requirements")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], csrfPeriodtokenPeriodexpiresPeriodin: Option[Int], slingPeriodauthPeriodrequirements: Option[String]) =>
          da.Configmgr_comAdobeGraniteCsrfImplCSRFServlet(post, apply, delete, action, Dollarlocation, propertylist, csrfPeriodtokenPeriodexpiresPeriodin, slingPeriodauthPeriodrequirements) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo
        */
        private def comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(da: DataAccessor): Endpoint[ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("username") :: paramOption("encryptedPassword")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], username: Option[String], encryptedPassword: Option[String]) =>
          da.Configmgr_comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(post, apply, delete, action, Dollarlocation, propertylist, name, username, encryptedPassword) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo
        */
        private def comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(da: DataAccessor): Endpoint[ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enabled").map(_.map(_.toBoolean)) :: paramOption("agentName") :: paramOption("diffPath") :: paramOption("observedPath") :: paramOption("serviceName") :: paramOption("propertyNames") :: paramOption("distributionDelay").map(_.map(_.toInt)) :: paramOption("serviceUser.target")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enabled: Option[Boolean], agentName: Option[String], diffPath: Option[String], observedPath: Option[String], serviceName: Option[String], propertyNames: Option[String], distributionDelay: Option[Int], serviceUserPeriodtarget: Option[String]) =>
          da.Configmgr_comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(post, apply, delete, action, Dollarlocation, propertylist, enabled, agentName, diffPath, observedPath, serviceName, propertyNames, distributionDelay, serviceUserPeriodtarget) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo
        */
        private def comAdobeGraniteDistributionCoreImplDiffDiffEventListener(da: DataAccessor): Endpoint[ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.distribution.core.impl.diff.DiffEventListener" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("diffPath") :: paramOption("serviceName") :: paramOption("serviceUser.target")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], diffPath: Option[String], serviceName: Option[String], serviceUserPeriodtarget: Option[String]) =>
          da.Configmgr_comAdobeGraniteDistributionCoreImplDiffDiffEventListener(post, apply, delete, action, Dollarlocation, propertylist, diffPath, serviceName, serviceUserPeriodtarget) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo
        */
        private def comAdobeGraniteDistributionCoreImplDistributionToReplicationEven(da: DataAccessor): Endpoint[ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("importer.name")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], importerPeriodname: Seq[String]) =>
          da.Configmgr_comAdobeGraniteDistributionCoreImplDistributionToReplicationEven(post, apply, delete, action, Dollarlocation, propertylist, importerPeriodname) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo
        */
        private def comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(da: DataAccessor): Endpoint[ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("providerName") :: paramOption("forward.requests").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], providerName: Option[String], forwardPeriodrequests: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(post, apply, delete, action, Dollarlocation, propertylist, providerName, forwardPeriodrequests) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo
        */
        private def comAdobeGraniteDistributionCoreImplReplicationDistributionTrans(da: DataAccessor): Endpoint[ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("forward.requests").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], forwardPeriodrequests: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteDistributionCoreImplReplicationDistributionTrans(post, apply, delete, action, Dollarlocation, propertylist, forwardPeriodrequests) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo
        */
        private def comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(da: DataAccessor): Endpoint[ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("serviceName") :: paramOption("userId") :: paramOption("accessTokenProvider.target")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], serviceName: Option[String], userId: Option[String], accessTokenProviderPeriodtarget: Option[String]) =>
          da.Configmgr_comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(post, apply, delete, action, Dollarlocation, propertylist, name, serviceName, userId, accessTokenProviderPeriodtarget) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo
        */
        private def comAdobeGraniteFragsImplCheckHttpHeaderFlag(da: DataAccessor): Endpoint[ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.frags.impl.CheckHttpHeaderFlag" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("feature.name") :: paramOption("feature.description") :: paramOption("http.header.name") :: paramOption("http.header.valuepattern")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], featurePeriodname: Option[String], featurePerioddescription: Option[String], httpPeriodheaderPeriodname: Option[String], httpPeriodheaderPeriodvaluepattern: Option[String]) =>
          da.Configmgr_comAdobeGraniteFragsImplCheckHttpHeaderFlag(post, apply, delete, action, Dollarlocation, propertylist, featurePeriodname, featurePerioddescription, httpPeriodheaderPeriodname, httpPeriodheaderPeriodvaluepattern) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteFragsImplRandomFeatureInfo
        */
        private def comAdobeGraniteFragsImplRandomFeature(da: DataAccessor): Endpoint[ComAdobeGraniteFragsImplRandomFeatureInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.frags.impl.RandomFeature" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("feature.name") :: paramOption("feature.description") :: paramOption("active.percentage") :: paramOption("cookie.name") :: paramOption("cookie.maxAge").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], featurePeriodname: Option[String], featurePerioddescription: Option[String], activePeriodpercentage: Option[String], cookiePeriodname: Option[String], cookiePeriodmaxAge: Option[Int]) =>
          da.Configmgr_comAdobeGraniteFragsImplRandomFeature(post, apply, delete, action, Dollarlocation, propertylist, featurePeriodname, featurePerioddescription, activePeriodpercentage, cookiePeriodname, cookiePeriodmaxAge) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteHttpcacheFileFileCacheStoreInfo
        */
        private def comAdobeGraniteHttpcacheFileFileCacheStore(da: DataAccessor): Endpoint[ComAdobeGraniteHttpcacheFileFileCacheStoreInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.httpcache.file.FileCacheStore" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("com.adobe.granite.httpcache.file.documentRoot") :: paramOption("com.adobe.granite.httpcache.file.includeHost")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePerioddocumentRoot: Option[String], comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePeriodincludeHost: Option[String]) =>
          da.Configmgr_comAdobeGraniteHttpcacheFileFileCacheStore(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePerioddocumentRoot, comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePeriodincludeHost) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo
        */
        private def comAdobeGraniteHttpcacheImplOuterCacheFilter(da: DataAccessor): Endpoint[ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.httpcache.impl.OuterCacheFilter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("com.adobe.granite.httpcache.url.paths")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], comPeriodadobePeriodgranitePeriodhttpcachePeriodurlPeriodpaths: Seq[String]) =>
          da.Configmgr_comAdobeGraniteHttpcacheImplOuterCacheFilter(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodgranitePeriodhttpcachePeriodurlPeriodpaths) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo
        */
        private def comAdobeGraniteI18nImplBundlePseudoTranslations(da: DataAccessor): Endpoint[ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.i18n.impl.bundle.PseudoTranslations" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("pseudo.patterns")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], pseudoPeriodpatterns: Seq[String]) =>
          da.Configmgr_comAdobeGraniteI18nImplBundlePseudoTranslations(post, apply, delete, action, Dollarlocation, propertylist, pseudoPeriodpatterns) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo
        */
        private def comAdobeGraniteI18nImplPreferencesLocaleResolverService(da: DataAccessor): Endpoint[ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.i18n.impl.PreferencesLocaleResolverService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("security.preferences.name")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], securityPeriodpreferencesPeriodname: Option[String]) =>
          da.Configmgr_comAdobeGraniteI18nImplPreferencesLocaleResolverService(post, apply, delete, action, Dollarlocation, propertylist, securityPeriodpreferencesPeriodname) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteInfocollectorInfoCollectorInfo
        */
        private def comAdobeGraniteInfocollectorInfoCollector(da: DataAccessor): Endpoint[ComAdobeGraniteInfocollectorInfoCollectorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.infocollector.InfoCollector" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("granite.infocollector.includeThreadDumps").map(_.map(_.toBoolean)) :: paramOption("granite.infocollector.includeHeapDump").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], granitePeriodinfocollectorPeriodincludeThreadDumps: Option[Boolean], granitePeriodinfocollectorPeriodincludeHeapDump: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteInfocollectorInfoCollector(post, apply, delete, action, Dollarlocation, propertylist, granitePeriodinfocollectorPeriodincludeThreadDumps, granitePeriodinfocollectorPeriodincludeHeapDump) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo
        */
        private def comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(da: DataAccessor): Endpoint[ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("com.adobe.granite.jetty.ssl.port").map(_.map(_.toInt)) :: paramOption("com.adobe.granite.jetty.ssl.keystore.user") :: paramOption("com.adobe.granite.jetty.ssl.keystore.password") :: params("com.adobe.granite.jetty.ssl.ciphersuites.excluded") :: params("com.adobe.granite.jetty.ssl.ciphersuites.included") :: paramOption("com.adobe.granite.jetty.ssl.client.certificate")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodport: Option[Int], comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePerioduser: Option[String], comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePeriodpassword: Option[String], comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodexcluded: Seq[String], comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodincluded: Seq[String], comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodclientPeriodcertificate: Option[String]) =>
          da.Configmgr_comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(post, apply, delete, action, Dollarlocation, propertylist, comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodport, comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePerioduser, comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePeriodpassword, comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodexcluded, comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodincluded, comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodclientPeriodcertificate) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteLicenseImplLicenseCheckFilterInfo
        */
        private def comAdobeGraniteLicenseImplLicenseCheckFilter(da: DataAccessor): Endpoint[ComAdobeGraniteLicenseImplLicenseCheckFilterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.license.impl.LicenseCheckFilter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("checkInternval").map(_.map(_.toInt)) :: params("excludeIds") :: paramOption("encryptPing").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], checkInternval: Option[Int], excludeIds: Seq[String], encryptPing: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteLicenseImplLicenseCheckFilter(post, apply, delete, action, Dollarlocation, propertylist, checkInternval, excludeIds, encryptPing) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteLoggingImplLogAnalyserImplInfo
        */
        private def comAdobeGraniteLoggingImplLogAnalyserImpl(da: DataAccessor): Endpoint[ComAdobeGraniteLoggingImplLogAnalyserImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.logging.impl.LogAnalyserImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("messages.queue.size").map(_.map(_.toInt)) :: params("logger.config") :: paramOption("messages.size").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], messagesPeriodqueuePeriodsize: Option[Int], loggerPeriodconfig: Seq[String], messagesPeriodsize: Option[Int]) =>
          da.Configmgr_comAdobeGraniteLoggingImplLogAnalyserImpl(post, apply, delete, action, Dollarlocation, propertylist, messagesPeriodqueuePeriodsize, loggerPeriodconfig, messagesPeriodsize) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo
        */
        private def comAdobeGraniteLoggingImplLogErrorHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.logging.impl.LogErrorHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeGraniteLoggingImplLogErrorHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo
        */
        private def comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(da: DataAccessor): Endpoint[ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("granite.maintenance.mandatory").map(_.map(_.toBoolean)) :: paramOption("job.topics")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], granitePeriodmaintenancePeriodmandatory: Option[Boolean], jobPeriodtopics: Option[String]) =>
          da.Configmgr_comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(post, apply, delete, action, Dollarlocation, propertylist, granitePeriodmaintenancePeriodmandatory, jobPeriodtopics) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo
        */
        private def comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(da: DataAccessor): Endpoint[ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("job.topics")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], jobPeriodtopics: Option[String]) =>
          da.Configmgr_comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(post, apply, delete, action, Dollarlocation, propertylist, jobPeriodtopics) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo
        */
        private def comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(da: DataAccessor): Endpoint[ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("full.gc.days")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], fullPeriodgcPerioddays: Seq[String]) =>
          da.Configmgr_comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(post, apply, delete, action, Dollarlocation, propertylist, fullPeriodgcPerioddays) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteMonitoringImplScriptConfigImplInfo
        */
        private def comAdobeGraniteMonitoringImplScriptConfigImpl(da: DataAccessor): Endpoint[ComAdobeGraniteMonitoringImplScriptConfigImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.monitoring.impl.ScriptConfigImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("script.filename") :: paramOption("script.display") :: paramOption("script.path") :: params("script.platform") :: paramOption("interval").map(_.map(_.toInt)) :: paramOption("jmxdomain")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], scriptPeriodfilename: Option[String], scriptPerioddisplay: Option[String], scriptPeriodpath: Option[String], scriptPeriodplatform: Seq[String], interval: Option[Int], jmxdomain: Option[String]) =>
          da.Configmgr_comAdobeGraniteMonitoringImplScriptConfigImpl(post, apply, delete, action, Dollarlocation, propertylist, scriptPeriodfilename, scriptPerioddisplay, scriptPeriodpath, scriptPeriodplatform, interval, jmxdomain) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo
        */
        private def comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(da: DataAccessor): Endpoint[ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("path") :: paramOption("jaas.controlFlag") :: paramOption("jaas.realmName") :: paramOption("jaas.ranking").map(_.map(_.toInt)) :: paramOption("oauth.offline.validation").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], path: Option[String], jaasPeriodcontrolFlag: Option[String], jaasPeriodrealmName: Option[String], jaasPeriodranking: Option[Int], oauthPeriodofflinePeriodvalidation: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(post, apply, delete, action, Dollarlocation, propertylist, path, jaasPeriodcontrolFlag, jaasPeriodrealmName, jaasPeriodranking, oauthPeriodofflinePeriodvalidation) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo
        */
        private def comAdobeGraniteOauthServerImplAccessTokenCleanupTask(da: DataAccessor): Endpoint[ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("scheduler.expression")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], schedulerPeriodexpression: Option[String]) =>
          da.Configmgr_comAdobeGraniteOauthServerImplAccessTokenCleanupTask(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo
        */
        private def comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(da: DataAccessor): Endpoint[ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("oauth.client.revocation.active").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], oauthPeriodclientPeriodrevocationPeriodactive: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodclientPeriodrevocationPeriodactive) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo
        */
        private def comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(da: DataAccessor): Endpoint[ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("sling.servlet.paths") :: paramOption("oauth.revocation.active").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], slingPeriodservletPeriodpaths: Option[String], oauthPeriodrevocationPeriodactive: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodpaths, oauthPeriodrevocationPeriodactive) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo
        */
        private def comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(da: DataAccessor): Endpoint[ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("oauth.issuer") :: paramOption("oauth.access.token.expires.in") :: paramOption("osgi.http.whiteboard.servlet.pattern") :: paramOption("osgi.http.whiteboard.context.select")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], oauthPeriodissuer: Option[String], oauthPeriodaccessPeriodtokenPeriodexpiresPeriodin: Option[String], osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern: Option[String], osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect: Option[String]) =>
          da.Configmgr_comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodissuer, oauthPeriodaccessPeriodtokenPeriodexpiresPeriodin, osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern, osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo
        */
        private def comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(da: DataAccessor): Endpoint[ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("oauth.token.revocation.active").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], oauthPeriodtokenPeriodrevocationPeriodactive: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(post, apply, delete, action, Dollarlocation, propertylist, oauthPeriodtokenPeriodrevocationPeriodactive) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo
        */
        private def comAdobeGraniteOffloadingImplOffloadingConfigurator(da: DataAccessor): Endpoint[ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.offloading.impl.OffloadingConfigurator" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("offloading.transporter") :: paramOption("offloading.cleanup.payload").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], offloadingPeriodtransporter: Option[String], offloadingPeriodcleanupPeriodpayload: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteOffloadingImplOffloadingConfigurator(post, apply, delete, action, Dollarlocation, propertylist, offloadingPeriodtransporter, offloadingPeriodcleanupPeriodpayload) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo
        */
        private def comAdobeGraniteOffloadingImplOffloadingJobCloner(da: DataAccessor): Endpoint[ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.offloading.impl.OffloadingJobCloner" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("offloading.jobcloner.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], offloadingPeriodjobclonerPeriodenabled: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteOffloadingImplOffloadingJobCloner(post, apply, delete, action, Dollarlocation, propertylist, offloadingPeriodjobclonerPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo
        */
        private def comAdobeGraniteOffloadingImplOffloadingJobOffloader(da: DataAccessor): Endpoint[ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.offloading.impl.OffloadingJobOffloader" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("offloading.offloader.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], offloadingPeriodoffloaderPeriodenabled: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteOffloadingImplOffloadingJobOffloader(post, apply, delete, action, Dollarlocation, propertylist, offloadingPeriodoffloaderPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo
        */
        private def comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(da: DataAccessor): Endpoint[ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("offloading.agentmanager.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], offloadingPeriodagentmanagerPeriodenabled: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(post, apply, delete, action, Dollarlocation, propertylist, offloadingPeriodagentmanagerPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo
        */
        private def comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(da: DataAccessor): Endpoint[ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("default.transport.agent-to-worker.prefix") :: paramOption("default.transport.agent-to-master.prefix") :: paramOption("default.transport.input.package") :: paramOption("default.transport.output.package") :: paramOption("default.transport.replication.synchronous").map(_.map(_.toBoolean)) :: paramOption("default.transport.contentpackage").map(_.map(_.toBoolean)) :: paramOption("offloading.transporter.default.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], defaultPeriodtransportPeriodagentToWorkerPeriodprefix: Option[String], defaultPeriodtransportPeriodagentToMasterPeriodprefix: Option[String], defaultPeriodtransportPeriodinputPeriodpackage: Option[String], defaultPeriodtransportPeriodoutputPeriodpackage: Option[String], defaultPeriodtransportPeriodreplicationPeriodsynchronous: Option[Boolean], defaultPeriodtransportPeriodcontentpackage: Option[Boolean], offloadingPeriodtransporterPerioddefaultPeriodenabled: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(post, apply, delete, action, Dollarlocation, propertylist, defaultPeriodtransportPeriodagentToWorkerPeriodprefix, defaultPeriodtransportPeriodagentToMasterPeriodprefix, defaultPeriodtransportPeriodinputPeriodpackage, defaultPeriodtransportPeriodoutputPeriodpackage, defaultPeriodtransportPeriodreplicationPeriodsynchronous, defaultPeriodtransportPeriodcontentpackage, offloadingPeriodtransporterPerioddefaultPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo
        */
        private def comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(da: DataAccessor): Endpoint[ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("omnisearch.suggestion.requiretext.min").map(_.map(_.toInt)) :: paramOption("omnisearch.suggestion.spellcheck.require").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], omnisearchPeriodsuggestionPeriodrequiretextPeriodmin: Option[Int], omnisearchPeriodsuggestionPeriodspellcheckPeriodrequire: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, omnisearchPeriodsuggestionPeriodrequiretextPeriodmin, omnisearchPeriodsuggestionPeriodspellcheckPeriodrequire) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteOptoutImplOptOutServiceImplInfo
        */
        private def comAdobeGraniteOptoutImplOptOutServiceImpl(da: DataAccessor): Endpoint[ComAdobeGraniteOptoutImplOptOutServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.optout.impl.OptOutServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("optout.cookies") :: params("optout.headers") :: params("optout.whitelist.cookies")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], optoutPeriodcookies: Seq[String], optoutPeriodheaders: Seq[String], optoutPeriodwhitelistPeriodcookies: Seq[String]) =>
          da.Configmgr_comAdobeGraniteOptoutImplOptOutServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, optoutPeriodcookies, optoutPeriodheaders, optoutPeriodwhitelistPeriodcookies) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo
        */
        private def comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("indexing.critical.threshold").map(_.map(_.toInt)) :: paramOption("indexing.warn.threshold").map(_.map(_.toInt)) :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], indexingPeriodcriticalPeriodthreshold: Option[Int], indexingPeriodwarnPeriodthreshold: Option[Int], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, indexingPeriodcriticalPeriodthreshold, indexingPeriodwarnPeriodthreshold, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo
        */
        private def comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("large.index.critical.threshold").map(_.map(_.toInt)) :: paramOption("large.index.warn.threshold").map(_.map(_.toInt)) :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], largePeriodindexPeriodcriticalPeriodthreshold: Option[Int], largePeriodindexPeriodwarnPeriodthreshold: Option[Int], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, largePeriodindexPeriodcriticalPeriodthreshold, largePeriodindexPeriodwarnPeriodthreshold, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo
        */
        private def comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo
        */
        private def comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(da: DataAccessor): Endpoint[ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("getPeriod").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], getPeriod: Option[Int]) =>
          da.Configmgr_comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(post, apply, delete, action, Dollarlocation, propertylist, getPeriod) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo
        */
        private def comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo
        */
        private def comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("number.of.retries.allowed").map(_.map(_.toInt)) :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], numberPeriodofPeriodretriesPeriodallowed: Option[Int], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, numberPeriodofPeriodretriesPeriodallowed, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo
        */
        private def comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(da: DataAccessor): Endpoint[ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo
        */
        private def comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo
        */
        private def comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(da: DataAccessor): Endpoint[ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags") :: params("exclude.search.path")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String], excludePeriodsearchPeriodpath: Seq[String]) =>
          da.Configmgr_comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, excludePeriodsearchPeriodpath) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo
        */
        private def comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo
        */
        private def comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(da: DataAccessor): Endpoint[ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo
        */
        private def comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags") :: params("account.logins") :: params("console.logins")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String], accountPeriodlogins: Seq[String], consolePeriodlogins: Seq[String]) =>
          da.Configmgr_comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, accountPeriodlogins, consolePeriodlogins) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo
        */
        private def comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags") :: paramOption("disk.space.warn.threshold").map(_.map(_.toInt)) :: paramOption("disk.space.error.threshold").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String], diskPeriodspacePeriodwarnPeriodthreshold: Option[Int], diskPeriodspacePerioderrorPeriodthreshold: Option[Int]) =>
          da.Configmgr_comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags, diskPeriodspacePeriodwarnPeriodthreshold, diskPeriodspacePerioderrorPeriodthreshold) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo
        */
        private def comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(da: DataAccessor): Endpoint[ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteRepositoryImplCommitStatsConfigInfo
        */
        private def comAdobeGraniteRepositoryImplCommitStatsConfig(da: DataAccessor): Endpoint[ComAdobeGraniteRepositoryImplCommitStatsConfigInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.repository.impl.CommitStatsConfig" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enabled").map(_.map(_.toBoolean)) :: paramOption("intervalSeconds").map(_.map(_.toInt)) :: paramOption("commitsPerIntervalThreshold").map(_.map(_.toInt)) :: paramOption("maxLocationLength").map(_.map(_.toInt)) :: paramOption("maxDetailsShown").map(_.map(_.toInt)) :: paramOption("minDetailsPercentage").map(_.map(_.toInt)) :: params("threadMatchers") :: paramOption("maxGreedyDepth").map(_.map(_.toInt)) :: paramOption("greedyStackMatchers") :: params("stackFilters") :: params("stackMatchers") :: params("stackCategorizers") :: params("stackShorteners")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enabled: Option[Boolean], intervalSeconds: Option[Int], commitsPerIntervalThreshold: Option[Int], maxLocationLength: Option[Int], maxDetailsShown: Option[Int], minDetailsPercentage: Option[Int], threadMatchers: Seq[String], maxGreedyDepth: Option[Int], greedyStackMatchers: Option[String], stackFilters: Seq[String], stackMatchers: Seq[String], stackCategorizers: Seq[String], stackShorteners: Seq[String]) =>
          da.Configmgr_comAdobeGraniteRepositoryImplCommitStatsConfig(post, apply, delete, action, Dollarlocation, propertylist, enabled, intervalSeconds, commitsPerIntervalThreshold, maxLocationLength, maxDetailsShown, minDetailsPercentage, threadMatchers, maxGreedyDepth, greedyStackMatchers, stackFilters, stackMatchers, stackCategorizers, stackShorteners) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteRepositoryServiceUserConfigurationInfo
        */
        private def comAdobeGraniteRepositoryServiceUserConfiguration(da: DataAccessor): Endpoint[ComAdobeGraniteRepositoryServiceUserConfigurationInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.repository.ServiceUserConfiguration" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("serviceusers.simpleSubjectPopulation").map(_.map(_.toBoolean)) :: params("serviceusers.list")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], serviceusersPeriodsimpleSubjectPopulation: Option[Boolean], serviceusersPeriodlist: Seq[String]) =>
          da.Configmgr_comAdobeGraniteRepositoryServiceUserConfiguration(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, serviceusersPeriodsimpleSubjectPopulation, serviceusersPeriodlist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo
        */
        private def comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(da: DataAccessor): Endpoint[ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo
        */
        private def comAdobeGraniteResourcestatusImplCompositeStatusType(da: DataAccessor): Endpoint[ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.resourcestatus.impl.CompositeStatusType" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: params("types")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], types: Seq[String]) =>
          da.Configmgr_comAdobeGraniteResourcestatusImplCompositeStatusType(post, apply, delete, action, Dollarlocation, propertylist, name, types) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo
        */
        private def comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(da: DataAccessor): Endpoint[ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("provider.root")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], providerPeriodroot: Option[String]) =>
          da.Configmgr_comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(post, apply, delete, action, Dollarlocation, propertylist, providerPeriodroot) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo
        */
        private def comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(da: DataAccessor): Endpoint[ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("mime.allowEmpty").map(_.map(_.toBoolean)) :: params("mime.allowed")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], mimePeriodallowEmpty: Option[Boolean], mimePeriodallowed: Seq[String]) =>
          da.Configmgr_comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(post, apply, delete, action, Dollarlocation, propertylist, mimePeriodallowEmpty, mimePeriodallowed) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo
        */
        private def comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(da: DataAccessor): Endpoint[ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("provider.roots")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], providerPeriodroots: Option[String]) =>
          da.Configmgr_comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(post, apply, delete, action, Dollarlocation, propertylist, providerPeriodroots) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteRestImplServletDefaultGETServletInfo
        */
        private def comAdobeGraniteRestImplServletDefaultGETServlet(da: DataAccessor): Endpoint[ComAdobeGraniteRestImplServletDefaultGETServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.rest.impl.servlet.DefaultGETServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("default.limit").map(_.map(_.toInt)) :: paramOption("use.absolute.uri").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], defaultPeriodlimit: Option[Int], usePeriodabsolutePerioduri: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteRestImplServletDefaultGETServlet(post, apply, delete, action, Dollarlocation, propertylist, defaultPeriodlimit, usePeriodabsolutePerioduri) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo
        */
        private def comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(da: DataAccessor): Endpoint[ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("hc.tags")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodtags: Seq[String]) =>
          da.Configmgr_comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodtags) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteSecurityUserUserPropertiesServiceInfo
        */
        private def comAdobeGraniteSecurityUserUserPropertiesService(da: DataAccessor): Endpoint[ComAdobeGraniteSecurityUserUserPropertiesServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.security.user.UserPropertiesService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("adapter.condition") :: params("granite.userproperties.nodetypes") :: params("granite.userproperties.resourcetypes")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], adapterPeriodcondition: Option[String], granitePerioduserpropertiesPeriodnodetypes: Seq[String], granitePerioduserpropertiesPeriodresourcetypes: Seq[String]) =>
          da.Configmgr_comAdobeGraniteSecurityUserUserPropertiesService(post, apply, delete, action, Dollarlocation, propertylist, adapterPeriodcondition, granitePerioduserpropertiesPeriodnodetypes, granitePerioduserpropertiesPeriodresourcetypes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo
        */
        private def comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(da: DataAccessor): Endpoint[ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("group2member.relationship.outgoing") :: params("group2member.excluded.outgoing") :: paramOption("group2member.relationship.incoming") :: params("group2member.excluded.incoming")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], group2memberPeriodrelationshipPeriodoutgoing: Option[String], group2memberPeriodexcludedPeriodoutgoing: Seq[String], group2memberPeriodrelationshipPeriodincoming: Option[String], group2memberPeriodexcludedPeriodincoming: Seq[String]) =>
          da.Configmgr_comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(post, apply, delete, action, Dollarlocation, propertylist, group2memberPeriodrelationshipPeriodoutgoing, group2memberPeriodexcludedPeriodoutgoing, group2memberPeriodrelationshipPeriodincoming, group2memberPeriodexcludedPeriodincoming) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo
        */
        private def comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(da: DataAccessor): Endpoint[ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("scheduler.expression") :: paramOption("jmx.objectname")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], schedulerPeriodexpression: Option[String], jmxPeriodobjectname: Option[String]) =>
          da.Configmgr_comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression, jmxPeriodobjectname) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo
        */
        private def comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(da: DataAccessor): Endpoint[ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("adapter.condition")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], adapterPeriodcondition: Option[String]) =>
          da.Configmgr_comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(post, apply, delete, action, Dollarlocation, propertylist, adapterPeriodcondition) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo
        */
        private def comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(da: DataAccessor): Endpoint[ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("archiving.enabled").map(_.map(_.toBoolean)) :: paramOption("scheduler.expression") :: paramOption("archive.since.days.completed").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], archivingPeriodenabled: Option[Boolean], schedulerPeriodexpression: Option[String], archivePeriodsincePerioddaysPeriodcompleted: Option[Int]) =>
          da.Configmgr_comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(post, apply, delete, action, Dollarlocation, propertylist, archivingPeriodenabled, schedulerPeriodexpression, archivePeriodsincePerioddaysPeriodcompleted) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo
        */
        private def comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(da: DataAccessor): Endpoint[ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("purgeCompleted").map(_.map(_.toBoolean)) :: paramOption("completedAge").map(_.map(_.toInt)) :: paramOption("purgeActive").map(_.map(_.toBoolean)) :: paramOption("activeAge").map(_.map(_.toInt)) :: paramOption("saveThreshold").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], purgeCompleted: Option[Boolean], completedAge: Option[Int], purgeActive: Option[Boolean], activeAge: Option[Int], saveThreshold: Option[Int]) =>
          da.Configmgr_comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(post, apply, delete, action, Dollarlocation, propertylist, purgeCompleted, completedAge, purgeActive, activeAge, saveThreshold) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo
        */
        private def comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(da: DataAccessor): Endpoint[ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("adapter.condition") :: params("taskmanager.admingroups")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], adapterPeriodcondition: Option[String], taskmanagerPeriodadmingroups: Seq[String]) =>
          da.Configmgr_comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(post, apply, delete, action, Dollarlocation, propertylist, adapterPeriodcondition, taskmanagerPeriodadmingroups) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteThreaddumpThreadDumpCollectorInfo
        */
        private def comAdobeGraniteThreaddumpThreadDumpCollector(da: DataAccessor): Endpoint[ComAdobeGraniteThreaddumpThreadDumpCollectorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.threaddump.ThreadDumpCollector" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("scheduler.period").map(_.map(_.toInt)) :: paramOption("scheduler.runOn") :: paramOption("granite.threaddump.enabled").map(_.map(_.toBoolean)) :: paramOption("granite.threaddump.dumpsPerFile").map(_.map(_.toInt)) :: paramOption("granite.threaddump.enableGzipCompression").map(_.map(_.toBoolean)) :: paramOption("granite.threaddump.enableDirectoriesCompression").map(_.map(_.toBoolean)) :: paramOption("granite.threaddump.enableJStack").map(_.map(_.toBoolean)) :: paramOption("granite.threaddump.maxBackupDays").map(_.map(_.toInt)) :: paramOption("granite.threaddump.backupCleanTrigger")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], schedulerPeriodperiod: Option[Int], schedulerPeriodrunOn: Option[String], granitePeriodthreaddumpPeriodenabled: Option[Boolean], granitePeriodthreaddumpPerioddumpsPerFile: Option[Int], granitePeriodthreaddumpPeriodenableGzipCompression: Option[Boolean], granitePeriodthreaddumpPeriodenableDirectoriesCompression: Option[Boolean], granitePeriodthreaddumpPeriodenableJStack: Option[Boolean], granitePeriodthreaddumpPeriodmaxBackupDays: Option[Int], granitePeriodthreaddumpPeriodbackupCleanTrigger: Option[String]) =>
          da.Configmgr_comAdobeGraniteThreaddumpThreadDumpCollector(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodperiod, schedulerPeriodrunOn, granitePeriodthreaddumpPeriodenabled, granitePeriodthreaddumpPerioddumpsPerFile, granitePeriodthreaddumpPeriodenableGzipCompression, granitePeriodthreaddumpPeriodenableDirectoriesCompression, granitePeriodthreaddumpPeriodenableJStack, granitePeriodthreaddumpPeriodmaxBackupDays, granitePeriodthreaddumpPeriodbackupCleanTrigger) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo
        */
        private def comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(da: DataAccessor): Endpoint[ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("translationFactory") :: paramOption("defaultConnectorLabel") :: paramOption("defaultConnectorAttribution") :: paramOption("defaultConnectorWorkspaceId") :: paramOption("defaultConnectorSubscriptionKey") :: paramOption("languageMapLocation") :: paramOption("categoryMapLocation") :: paramOption("retryAttempts").map(_.map(_.toInt)) :: paramOption("timeoutCount").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], translationFactory: Option[String], defaultConnectorLabel: Option[String], defaultConnectorAttribution: Option[String], defaultConnectorWorkspaceId: Option[String], defaultConnectorSubscriptionKey: Option[String], languageMapLocation: Option[String], categoryMapLocation: Option[String], retryAttempts: Option[Int], timeoutCount: Option[Int]) =>
          da.Configmgr_comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(post, apply, delete, action, Dollarlocation, propertylist, translationFactory, defaultConnectorLabel, defaultConnectorAttribution, defaultConnectorWorkspaceId, defaultConnectorSubscriptionKey, languageMapLocation, categoryMapLocation, retryAttempts, timeoutCount) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo
        */
        private def comAdobeGraniteTranslationCoreImplTranslationManagerImpl(da: DataAccessor): Endpoint[ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.translation.core.impl.TranslationManagerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("defaultConnectorName") :: paramOption("defaultCategory")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], defaultConnectorName: Option[String], defaultCategory: Option[String]) =>
          da.Configmgr_comAdobeGraniteTranslationCoreImplTranslationManagerImpl(post, apply, delete, action, Dollarlocation, propertylist, defaultConnectorName, defaultCategory) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo
        */
        private def comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(da: DataAccessor): Endpoint[ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("htmllibmanager.timing").map(_.map(_.toBoolean)) :: paramOption("htmllibmanager.debug.init.js") :: paramOption("htmllibmanager.minify").map(_.map(_.toBoolean)) :: paramOption("htmllibmanager.debug").map(_.map(_.toBoolean)) :: paramOption("htmllibmanager.gzip").map(_.map(_.toBoolean)) :: paramOption("htmllibmanager.maxDataUriSize").map(_.map(_.toInt)) :: paramOption("htmllibmanager.maxage").map(_.map(_.toInt)) :: paramOption("htmllibmanager.forceCQUrlInfo").map(_.map(_.toBoolean)) :: paramOption("htmllibmanager.defaultthemename") :: paramOption("htmllibmanager.defaultuserthemename") :: paramOption("htmllibmanager.clientmanager") :: params("htmllibmanager.path.list") :: params("htmllibmanager.excluded.path.list") :: params("htmllibmanager.processor.js") :: params("htmllibmanager.processor.css") :: params("htmllibmanager.longcache.patterns") :: paramOption("htmllibmanager.longcache.format") :: paramOption("htmllibmanager.useFileSystemOutputCache").map(_.map(_.toBoolean)) :: paramOption("htmllibmanager.fileSystemOutputCacheLocation") :: params("htmllibmanager.disable.replacement")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], htmllibmanagerPeriodtiming: Option[Boolean], htmllibmanagerPerioddebugPeriodinitPeriodjs: Option[String], htmllibmanagerPeriodminify: Option[Boolean], htmllibmanagerPerioddebug: Option[Boolean], htmllibmanagerPeriodgzip: Option[Boolean], htmllibmanagerPeriodmaxDataUriSize: Option[Int], htmllibmanagerPeriodmaxage: Option[Int], htmllibmanagerPeriodforceCQUrlInfo: Option[Boolean], htmllibmanagerPerioddefaultthemename: Option[String], htmllibmanagerPerioddefaultuserthemename: Option[String], htmllibmanagerPeriodclientmanager: Option[String], htmllibmanagerPeriodpathPeriodlist: Seq[String], htmllibmanagerPeriodexcludedPeriodpathPeriodlist: Seq[String], htmllibmanagerPeriodprocessorPeriodjs: Seq[String], htmllibmanagerPeriodprocessorPeriodcss: Seq[String], htmllibmanagerPeriodlongcachePeriodpatterns: Seq[String], htmllibmanagerPeriodlongcachePeriodformat: Option[String], htmllibmanagerPerioduseFileSystemOutputCache: Option[Boolean], htmllibmanagerPeriodfileSystemOutputCacheLocation: Option[String], htmllibmanagerPerioddisablePeriodreplacement: Seq[String]) =>
          da.Configmgr_comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(post, apply, delete, action, Dollarlocation, propertylist, htmllibmanagerPeriodtiming, htmllibmanagerPerioddebugPeriodinitPeriodjs, htmllibmanagerPeriodminify, htmllibmanagerPerioddebug, htmllibmanagerPeriodgzip, htmllibmanagerPeriodmaxDataUriSize, htmllibmanagerPeriodmaxage, htmllibmanagerPeriodforceCQUrlInfo, htmllibmanagerPerioddefaultthemename, htmllibmanagerPerioddefaultuserthemename, htmllibmanagerPeriodclientmanager, htmllibmanagerPeriodpathPeriodlist, htmllibmanagerPeriodexcludedPeriodpathPeriodlist, htmllibmanagerPeriodprocessorPeriodjs, htmllibmanagerPeriodprocessorPeriodcss, htmllibmanagerPeriodlongcachePeriodpatterns, htmllibmanagerPeriodlongcachePeriodformat, htmllibmanagerPerioduseFileSystemOutputCache, htmllibmanagerPeriodfileSystemOutputCacheLocation, htmllibmanagerPerioddisablePeriodreplacement) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo
        */
        private def comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(da: DataAccessor): Endpoint[ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enabled: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(post, apply, delete, action, Dollarlocation, propertylist, enabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo
        */
        private def comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(da: DataAccessor): Endpoint[ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.workflow.console.publish.WorkflowPublishEventService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("granite.workflow.WorkflowPublishEventService.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], granitePeriodworkflowPeriodWorkflowPublishEventServicePeriodenabled: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(post, apply, delete, action, Dollarlocation, propertylist, granitePeriodworkflowPeriodWorkflowPublishEventServicePeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo
        */
        private def comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(da: DataAccessor): Endpoint[ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.workflow.core.jcr.WorkflowBucketManager" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("bucketSize").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], bucketSize: Option[Int]) =>
          da.Configmgr_comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(post, apply, delete, action, Dollarlocation, propertylist, bucketSize) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo
        */
        private def comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(da: DataAccessor): Endpoint[ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.workflow.core.job.ExternalProcessJobHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("default.timeout").map(_.map(_.toInt)) :: paramOption("max.timeout").map(_.map(_.toInt)) :: paramOption("default.period").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], defaultPeriodtimeout: Option[Int], maxPeriodtimeout: Option[Int], defaultPeriodperiod: Option[Int]) =>
          da.Configmgr_comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(post, apply, delete, action, Dollarlocation, propertylist, defaultPeriodtimeout, maxPeriodtimeout, defaultPeriodperiod) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteWorkflowCoreJobJobHandlerInfo
        */
        private def comAdobeGraniteWorkflowCoreJobJobHandler(da: DataAccessor): Endpoint[ComAdobeGraniteWorkflowCoreJobJobHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.workflow.core.job.JobHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("job.topics") :: paramOption("allow.self.process.termination").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], jobPeriodtopics: Seq[String], allowPeriodselfPeriodprocessPeriodtermination: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteWorkflowCoreJobJobHandler(post, apply, delete, action, Dollarlocation, propertylist, jobPeriodtopics, allowPeriodselfPeriodprocessPeriodtermination) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo
        */
        private def comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(da: DataAccessor): Endpoint[ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("job.topics")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], jobPeriodtopics: Option[String]) =>
          da.Configmgr_comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(post, apply, delete, action, Dollarlocation, propertylist, jobPeriodtopics) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteWorkflowCorePayloadMapCacheInfo
        */
        private def comAdobeGraniteWorkflowCorePayloadMapCache(da: DataAccessor): Endpoint[ComAdobeGraniteWorkflowCorePayloadMapCacheInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.workflow.core.PayloadMapCache" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("getSystemWorkflowModels") :: paramOption("getPackageRootPath")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], getSystemWorkflowModels: Seq[String], getPackageRootPath: Option[String]) =>
          da.Configmgr_comAdobeGraniteWorkflowCorePayloadMapCache(post, apply, delete, action, Dollarlocation, propertylist, getSystemWorkflowModels, getPackageRootPath) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo
        */
        private def comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(da: DataAccessor): Endpoint[ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("payload.move.white.list") :: paramOption("payload.move.handle.from.workflow.process").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], payloadPeriodmovePeriodwhitePeriodlist: Seq[String], payloadPeriodmovePeriodhandlePeriodfromPeriodworkflowPeriodprocess: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(post, apply, delete, action, Dollarlocation, propertylist, payloadPeriodmovePeriodwhitePeriodlist, payloadPeriodmovePeriodhandlePeriodfromPeriodworkflowPeriodprocess) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteWorkflowCoreWorkflowConfigInfo
        */
        private def comAdobeGraniteWorkflowCoreWorkflowConfig(da: DataAccessor): Endpoint[ComAdobeGraniteWorkflowCoreWorkflowConfigInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.workflow.core.WorkflowConfig" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.workflow.config.workflow.packages.root.path") :: paramOption("cq.workflow.config.workflow.process.legacy.mode").map(_.map(_.toBoolean)) :: paramOption("cq.workflow.config.allow.locking").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodworkflowPeriodconfigPeriodworkflowPeriodpackagesPeriodrootPeriodpath: Seq[String], cqPeriodworkflowPeriodconfigPeriodworkflowPeriodprocessPeriodlegacyPeriodmode: Option[Boolean], cqPeriodworkflowPeriodconfigPeriodallowPeriodlocking: Option[Boolean]) =>
          da.Configmgr_comAdobeGraniteWorkflowCoreWorkflowConfig(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodworkflowPeriodconfigPeriodworkflowPeriodpackagesPeriodrootPeriodpath, cqPeriodworkflowPeriodconfigPeriodworkflowPeriodprocessPeriodlegacyPeriodmode, cqPeriodworkflowPeriodconfigPeriodallowPeriodlocking) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo
        */
        private def comAdobeGraniteWorkflowCoreWorkflowSessionFactory(da: DataAccessor): Endpoint[ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.workflow.core.WorkflowSessionFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("granite.workflowinbox.sort.propertyName") :: paramOption("granite.workflowinbox.sort.order") :: paramOption("cq.workflow.job.retry").map(_.map(_.toInt)) :: params("cq.workflow.superuser") :: paramOption("granite.workflow.inboxQuerySize").map(_.map(_.toInt)) :: paramOption("granite.workflow.adminUserGroupFilter").map(_.map(_.toBoolean)) :: paramOption("granite.workflow.enforceWorkitemAssigneePermissions").map(_.map(_.toBoolean)) :: paramOption("granite.workflow.enforceWorkflowInitiatorPermissions").map(_.map(_.toBoolean)) :: paramOption("granite.workflow.injectTenantIdInJobTopics").map(_.map(_.toBoolean)) :: paramOption("granite.workflow.maxPurgeSaveThreshold").map(_.map(_.toInt)) :: paramOption("granite.workflow.maxPurgeQueryCount").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], granitePeriodworkflowinboxPeriodsortPeriodpropertyName: Option[String], granitePeriodworkflowinboxPeriodsortPeriodorder: Option[String], cqPeriodworkflowPeriodjobPeriodretry: Option[Int], cqPeriodworkflowPeriodsuperuser: Seq[String], granitePeriodworkflowPeriodinboxQuerySize: Option[Int], granitePeriodworkflowPeriodadminUserGroupFilter: Option[Boolean], granitePeriodworkflowPeriodenforceWorkitemAssigneePermissions: Option[Boolean], granitePeriodworkflowPeriodenforceWorkflowInitiatorPermissions: Option[Boolean], granitePeriodworkflowPeriodinjectTenantIdInJobTopics: Option[Boolean], granitePeriodworkflowPeriodmaxPurgeSaveThreshold: Option[Int], granitePeriodworkflowPeriodmaxPurgeQueryCount: Option[Int]) =>
          da.Configmgr_comAdobeGraniteWorkflowCoreWorkflowSessionFactory(post, apply, delete, action, Dollarlocation, propertylist, granitePeriodworkflowinboxPeriodsortPeriodpropertyName, granitePeriodworkflowinboxPeriodsortPeriodorder, cqPeriodworkflowPeriodjobPeriodretry, cqPeriodworkflowPeriodsuperuser, granitePeriodworkflowPeriodinboxQuerySize, granitePeriodworkflowPeriodadminUserGroupFilter, granitePeriodworkflowPeriodenforceWorkitemAssigneePermissions, granitePeriodworkflowPeriodenforceWorkflowInitiatorPermissions, granitePeriodworkflowPeriodinjectTenantIdInJobTopics, granitePeriodworkflowPeriodmaxPurgeSaveThreshold, granitePeriodworkflowPeriodmaxPurgeQueryCount) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeGraniteWorkflowPurgeSchedulerInfo
        */
        private def comAdobeGraniteWorkflowPurgeScheduler(da: DataAccessor): Endpoint[ComAdobeGraniteWorkflowPurgeSchedulerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.granite.workflow.purge.Scheduler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("scheduledpurge.name") :: paramOption("scheduledpurge.workflowStatus") :: params("scheduledpurge.modelIds") :: paramOption("scheduledpurge.daysold").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], scheduledpurgePeriodname: Option[String], scheduledpurgePeriodworkflowStatus: Option[String], scheduledpurgePeriodmodelIds: Seq[String], scheduledpurgePerioddaysold: Option[Int]) =>
          da.Configmgr_comAdobeGraniteWorkflowPurgeScheduler(post, apply, delete, action, Dollarlocation, propertylist, scheduledpurgePeriodname, scheduledpurgePeriodworkflowStatus, scheduledpurgePeriodmodelIds, scheduledpurgePerioddaysold) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeOctopusNcommBootstrapInfo
        */
        private def comAdobeOctopusNcommBootstrap(da: DataAccessor): Endpoint[ComAdobeOctopusNcommBootstrapInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.octopus.ncomm.bootstrap" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("maxConnections").map(_.map(_.toInt)) :: paramOption("maxRequests").map(_.map(_.toInt)) :: paramOption("requestTimeout").map(_.map(_.toInt)) :: paramOption("requestRetries").map(_.map(_.toInt)) :: paramOption("launchTimeout").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], maxConnections: Option[Int], maxRequests: Option[Int], requestTimeout: Option[Int], requestRetries: Option[Int], launchTimeout: Option[Int]) =>
          da.Configmgr_comAdobeOctopusNcommBootstrap(post, apply, delete, action, Dollarlocation, propertylist, maxConnections, maxRequests, requestTimeout, requestRetries, launchTimeout) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo
        */
        private def comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(da: DataAccessor): Endpoint[ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("communities.integration.livefyre.sling.event.filter")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], communitiesPeriodintegrationPeriodlivefyrePeriodslingPeriodeventPeriodfilter: Option[String]) =>
          da.Configmgr_comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(post, apply, delete, action, Dollarlocation, propertylist, communitiesPeriodintegrationPeriodlivefyrePeriodslingPeriodeventPeriodfilter) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo
        */
        private def comAdobeXmpWorkerFilesNcommXMPFilesNComm(da: DataAccessor): Endpoint[ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo] =
        post("system" :: "console" :: "configMgr" :: "com.adobe.xmp.worker.files.ncomm.XMPFilesNComm" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("maxConnections") :: paramOption("maxRequests") :: paramOption("requestTimeout") :: paramOption("logDir")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], maxConnections: Option[String], maxRequests: Option[String], requestTimeout: Option[String], logDir: Option[String]) =>
          da.Configmgr_comAdobeXmpWorkerFilesNcommXMPFilesNComm(post, apply, delete, action, Dollarlocation, propertylist, maxConnections, maxRequests, requestTimeout, logDir) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo
        */
        private def comDayCommonsDatasourceJdbcpoolJdbcPoolService(da: DataAccessor): Endpoint[ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.commons.datasource.jdbcpool.JdbcPoolService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("jdbc.driver.class") :: paramOption("jdbc.connection.uri") :: paramOption("jdbc.username") :: paramOption("jdbc.password") :: paramOption("jdbc.validation.query") :: paramOption("default.readonly").map(_.map(_.toBoolean)) :: paramOption("default.autocommit").map(_.map(_.toBoolean)) :: paramOption("pool.size").map(_.map(_.toInt)) :: paramOption("pool.max.wait.msec").map(_.map(_.toInt)) :: paramOption("datasource.name") :: params("datasource.svc.properties")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], jdbcPerioddriverPeriodclass: Option[String], jdbcPeriodconnectionPerioduri: Option[String], jdbcPeriodusername: Option[String], jdbcPeriodpassword: Option[String], jdbcPeriodvalidationPeriodquery: Option[String], defaultPeriodreadonly: Option[Boolean], defaultPeriodautocommit: Option[Boolean], poolPeriodsize: Option[Int], poolPeriodmaxPeriodwaitPeriodmsec: Option[Int], datasourcePeriodname: Option[String], datasourcePeriodsvcPeriodproperties: Seq[String]) =>
          da.Configmgr_comDayCommonsDatasourceJdbcpoolJdbcPoolService(post, apply, delete, action, Dollarlocation, propertylist, jdbcPerioddriverPeriodclass, jdbcPeriodconnectionPerioduri, jdbcPeriodusername, jdbcPeriodpassword, jdbcPeriodvalidationPeriodquery, defaultPeriodreadonly, defaultPeriodautocommit, poolPeriodsize, poolPeriodmaxPeriodwaitPeriodmsec, datasourcePeriodname, datasourcePeriodsvcPeriodproperties) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCommonsHttpclientInfo
        */
        private def comDayCommonsHttpclient(da: DataAccessor): Endpoint[ComDayCommonsHttpclientInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.commons.httpclient" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("proxy.enabled").map(_.map(_.toBoolean)) :: paramOption("proxy.host") :: paramOption("proxy.user") :: paramOption("proxy.password") :: paramOption("proxy.ntlm.host") :: paramOption("proxy.ntlm.domain") :: params("proxy.exceptions")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], proxyPeriodenabled: Option[Boolean], proxyPeriodhost: Option[String], proxyPerioduser: Option[String], proxyPeriodpassword: Option[String], proxyPeriodntlmPeriodhost: Option[String], proxyPeriodntlmPerioddomain: Option[String], proxyPeriodexceptions: Seq[String]) =>
          da.Configmgr_comDayCommonsHttpclient(post, apply, delete, action, Dollarlocation, propertylist, proxyPeriodenabled, proxyPeriodhost, proxyPerioduser, proxyPeriodpassword, proxyPeriodntlmPeriodhost, proxyPeriodntlmPerioddomain, proxyPeriodexceptions) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo
        */
        private def comDayCqAnalyticsImplStorePropertiesChangeListener(da: DataAccessor): Endpoint[ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.analytics.impl.StorePropertiesChangeListener" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.store.listener.additionalStorePaths")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodstorePeriodlistenerPeriodadditionalStorePaths: Seq[String]) =>
          da.Configmgr_comDayCqAnalyticsImplStorePropertiesChangeListener(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodstorePeriodlistenerPeriodadditionalStorePaths) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo
        */
        private def comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(da: DataAccessor): Endpoint[ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("allowed.paths") :: paramOption("cq.analytics.saint.exporter.pagesize").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], allowedPeriodpaths: Seq[String], cqPeriodanalyticsPeriodsaintPeriodexporterPeriodpagesize: Option[Int]) =>
          da.Configmgr_comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(post, apply, delete, action, Dollarlocation, propertylist, allowedPeriodpaths, cqPeriodanalyticsPeriodsaintPeriodexporterPeriodpagesize) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo
        */
        private def comDayCqAnalyticsSitecatalystImplImporterReportImporter(da: DataAccessor): Endpoint[ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("report.fetch.attempts").map(_.map(_.toInt)) :: paramOption("report.fetch.delay").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], reportPeriodfetchPeriodattempts: Option[Int], reportPeriodfetchPerioddelay: Option[Int]) =>
          da.Configmgr_comDayCqAnalyticsSitecatalystImplImporterReportImporter(post, apply, delete, action, Dollarlocation, propertylist, reportPeriodfetchPeriodattempts, reportPeriodfetchPerioddelay) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo
        */
        private def comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(da: DataAccessor): Endpoint[ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.analytics.adapterfactory.contextstores")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodanalyticsPeriodadapterfactoryPeriodcontextstores: Seq[String]) =>
          da.Configmgr_comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodanalyticsPeriodadapterfactoryPeriodcontextstores) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo
        */
        private def comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(da: DataAccessor): Endpoint[ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.analytics.sitecatalyst.service.datacenter.url") :: params("devhostnamepatterns") :: paramOption("connection.timeout").map(_.map(_.toInt)) :: paramOption("socket.timeout").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodanalyticsPeriodsitecatalystPeriodservicePerioddatacenterPeriodurl: Seq[String], devhostnamepatterns: Seq[String], connectionPeriodtimeout: Option[Int], socketPeriodtimeout: Option[Int]) =>
          da.Configmgr_comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodanalyticsPeriodsitecatalystPeriodservicePerioddatacenterPeriodurl, devhostnamepatterns, connectionPeriodtimeout, socketPeriodtimeout) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo
        */
        private def comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(da: DataAccessor): Endpoint[ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.analytics.testandtarget.accountoptionsupdater.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodanalyticsPeriodtestandtargetPeriodaccountoptionsupdaterPeriodenabled: Option[Boolean]) =>
          da.Configmgr_comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodanalyticsPeriodtestandtargetPeriodaccountoptionsupdaterPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo
        */
        private def comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(da: DataAccessor): Endpoint[ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.analytics.testandtarget.deleteauthoractivitylistener.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodanalyticsPeriodtestandtargetPerioddeleteauthoractivitylistenerPeriodenabled: Option[Boolean]) =>
          da.Configmgr_comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodanalyticsPeriodtestandtargetPerioddeleteauthoractivitylistenerPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo
        */
        private def comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(da: DataAccessor): Endpoint[ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodanalyticsPeriodtestandtargetPeriodpushauthorcampaignpagelistenerPeriodenabled: Option[Boolean]) =>
          da.Configmgr_comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodanalyticsPeriodtestandtargetPeriodpushauthorcampaignpagelistenerPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo
        */
        private def comDayCqAnalyticsTestandtargetImplSegmentImporter(da: DataAccessor): Endpoint[ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.analytics.testandtarget.impl.SegmentImporter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.analytics.testandtarget.segmentimporter.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodanalyticsPeriodtestandtargetPeriodsegmentimporterPeriodenabled: Option[Boolean]) =>
          da.Configmgr_comDayCqAnalyticsTestandtargetImplSegmentImporter(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodanalyticsPeriodtestandtargetPeriodsegmentimporterPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo
        */
        private def comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(da: DataAccessor): Endpoint[ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("endpointUri") :: paramOption("connectionTimeout").map(_.map(_.toInt)) :: paramOption("socketTimeout").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], endpointUri: Option[String], connectionTimeout: Option[Int], socketTimeout: Option[Int]) =>
          da.Configmgr_comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, endpointUri, connectionTimeout, socketTimeout) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo
        */
        private def comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(da: DataAccessor): Endpoint[ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("testandtarget.endpoint.url")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], testandtargetPeriodendpointPeriodurl: Option[String]) =>
          da.Configmgr_comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(post, apply, delete, action, Dollarlocation, propertylist, testandtargetPeriodendpointPeriodurl) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo
        */
        private def comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(da: DataAccessor): Endpoint[ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.analytics.testandtarget.api.url") :: paramOption("cq.analytics.testandtarget.timeout").map(_.map(_.toInt)) :: paramOption("cq.analytics.testandtarget.sockettimeout").map(_.map(_.toInt)) :: paramOption("cq.analytics.testandtarget.recommendations.url.replace") :: paramOption("cq.analytics.testandtarget.recommendations.url.replacewith")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodanalyticsPeriodtestandtargetPeriodapiPeriodurl: Option[String], cqPeriodanalyticsPeriodtestandtargetPeriodtimeout: Option[Int], cqPeriodanalyticsPeriodtestandtargetPeriodsockettimeout: Option[Int], cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplace: Option[String], cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplacewith: Option[String]) =>
          da.Configmgr_comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodanalyticsPeriodtestandtargetPeriodapiPeriodurl, cqPeriodanalyticsPeriodtestandtargetPeriodtimeout, cqPeriodanalyticsPeriodtestandtargetPeriodsockettimeout, cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplace, cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplacewith) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqAuthImplCugCugSupportImplInfo
        */
        private def comDayCqAuthImplCugCugSupportImpl(da: DataAccessor): Endpoint[ComDayCqAuthImplCugCugSupportImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.auth.impl.cug.CugSupportImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cug.exempted.principals") :: paramOption("cug.enabled").map(_.map(_.toBoolean)) :: paramOption("cug.principals.regex") :: paramOption("cug.principals.replacement")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cugPeriodexemptedPeriodprincipals: Seq[String], cugPeriodenabled: Option[Boolean], cugPeriodprincipalsPeriodregex: Option[String], cugPeriodprincipalsPeriodreplacement: Option[String]) =>
          da.Configmgr_comDayCqAuthImplCugCugSupportImpl(post, apply, delete, action, Dollarlocation, propertylist, cugPeriodexemptedPeriodprincipals, cugPeriodenabled, cugPeriodprincipalsPeriodregex, cugPeriodprincipalsPeriodreplacement) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqAuthImplLoginSelectorHandlerInfo
        */
        private def comDayCqAuthImplLoginSelectorHandler(da: DataAccessor): Endpoint[ComDayCqAuthImplLoginSelectorHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.auth.impl.LoginSelectorHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("path") :: paramOption("service.ranking").map(_.map(_.toInt)) :: params("auth.loginselector.mappings") :: params("auth.loginselector.changepw.mappings") :: paramOption("auth.loginselector.defaultloginpage") :: paramOption("auth.loginselector.defaultchangepwpage") :: params("auth.loginselector.handle") :: paramOption("auth.loginselector.handle.all.extensions").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], path: Option[String], servicePeriodranking: Option[Int], authPeriodloginselectorPeriodmappings: Seq[String], authPeriodloginselectorPeriodchangepwPeriodmappings: Seq[String], authPeriodloginselectorPerioddefaultloginpage: Option[String], authPeriodloginselectorPerioddefaultchangepwpage: Option[String], authPeriodloginselectorPeriodhandle: Seq[String], authPeriodloginselectorPeriodhandlePeriodallPeriodextensions: Option[Boolean]) =>
          da.Configmgr_comDayCqAuthImplLoginSelectorHandler(post, apply, delete, action, Dollarlocation, propertylist, path, servicePeriodranking, authPeriodloginselectorPeriodmappings, authPeriodloginselectorPeriodchangepwPeriodmappings, authPeriodloginselectorPerioddefaultloginpage, authPeriodloginselectorPerioddefaultchangepwpage, authPeriodloginselectorPeriodhandle, authPeriodloginselectorPeriodhandlePeriodallPeriodextensions) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqCommonsImplExternalizerImplInfo
        */
        private def comDayCqCommonsImplExternalizerImpl(da: DataAccessor): Endpoint[ComDayCqCommonsImplExternalizerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.commons.impl.ExternalizerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("externalizer.domains") :: paramOption("externalizer.host") :: paramOption("externalizer.contextpath") :: paramOption("externalizer.encodedpath").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], externalizerPerioddomains: Seq[String], externalizerPeriodhost: Option[String], externalizerPeriodcontextpath: Option[String], externalizerPeriodencodedpath: Option[Boolean]) =>
          da.Configmgr_comDayCqCommonsImplExternalizerImpl(post, apply, delete, action, Dollarlocation, propertylist, externalizerPerioddomains, externalizerPeriodhost, externalizerPeriodcontextpath, externalizerPeriodencodedpath) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqCommonsServletsRootMappingServletInfo
        */
        private def comDayCqCommonsServletsRootMappingServlet(da: DataAccessor): Endpoint[ComDayCqCommonsServletsRootMappingServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.commons.servlets.RootMappingServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("rootmapping.target")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], rootmappingPeriodtarget: Option[String]) =>
          da.Configmgr_comDayCqCommonsServletsRootMappingServlet(post, apply, delete, action, Dollarlocation, propertylist, rootmappingPeriodtarget) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo
        */
        private def comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(da: DataAccessor): Endpoint[ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("codeupgradetasks") :: params("codeupgradetaskfilters")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], codeupgradetasks: Seq[String], codeupgradetaskfilters: Seq[String]) =>
          da.Configmgr_comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(post, apply, delete, action, Dollarlocation, propertylist, codeupgradetasks, codeupgradetaskfilters) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo
        */
        private def comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(da: DataAccessor): Endpoint[ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("upgradeTaskIgnoreList")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], upgradeTaskIgnoreList: Seq[String]) =>
          da.Configmgr_comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(post, apply, delete, action, Dollarlocation, propertylist, upgradeTaskIgnoreList) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo
        */
        private def comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(da: DataAccessor): Endpoint[ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("effectiveBundleListPath")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], effectiveBundleListPath: Option[String]) =>
          da.Configmgr_comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(post, apply, delete, action, Dollarlocation, propertylist, effectiveBundleListPath) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqContentsyncImplContentSyncManagerImplInfo
        */
        private def comDayCqContentsyncImplContentSyncManagerImpl(da: DataAccessor): Endpoint[ComDayCqContentsyncImplContentSyncManagerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.contentsync.impl.ContentSyncManagerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("contentsync.fallback.authorizable") :: paramOption("contentsync.fallback.updateuser")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], contentsyncPeriodfallbackPeriodauthorizable: Option[String], contentsyncPeriodfallbackPeriodupdateuser: Option[String]) =>
          da.Configmgr_comDayCqContentsyncImplContentSyncManagerImpl(post, apply, delete, action, Dollarlocation, propertylist, contentsyncPeriodfallbackPeriodauthorizable, contentsyncPeriodfallbackPeriodupdateuser) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCommonsHandlerStandardImageHandlerInfo
        */
        private def comDayCqDamCommonsHandlerStandardImageHandler(da: DataAccessor): Endpoint[ComDayCqDamCommonsHandlerStandardImageHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.commons.handler.StandardImageHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("large_file_threshold").map(_.map(_.toInt)) :: paramOption("large_comment_threshold").map(_.map(_.toInt)) :: paramOption("cq.dam.enable.ext.meta.extraction").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], largeFileThreshold: Option[Int], largeCommentThreshold: Option[Int], cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCommonsHandlerStandardImageHandler(post, apply, delete, action, Dollarlocation, propertylist, largeFileThreshold, largeCommentThreshold, cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo
        */
        private def comDayCqDamCommonsMetadataXmpFilterBlackWhite(da: DataAccessor): Endpoint[ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.commons.metadata.XmpFilterBlackWhite" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("xmp.filter.apply_whitelist").map(_.map(_.toBoolean)) :: params("xmp.filter.whitelist") :: paramOption("xmp.filter.apply_blacklist").map(_.map(_.toBoolean)) :: params("xmp.filter.blacklist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], xmpPeriodfilterPeriodapplyWhitelist: Option[Boolean], xmpPeriodfilterPeriodwhitelist: Seq[String], xmpPeriodfilterPeriodapplyBlacklist: Option[Boolean], xmpPeriodfilterPeriodblacklist: Seq[String]) =>
          da.Configmgr_comDayCqDamCommonsMetadataXmpFilterBlackWhite(post, apply, delete, action, Dollarlocation, propertylist, xmpPeriodfilterPeriodapplyWhitelist, xmpPeriodfilterPeriodwhitelist, xmpPeriodfilterPeriodapplyBlacklist, xmpPeriodfilterPeriodblacklist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCommonsUtilImplAssetCacheImplInfo
        */
        private def comDayCqDamCommonsUtilImplAssetCacheImpl(da: DataAccessor): Endpoint[ComDayCqDamCommonsUtilImplAssetCacheImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.commons.util.impl.AssetCacheImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("large.file.min").map(_.map(_.toInt)) :: paramOption("cache.apply").map(_.map(_.toBoolean)) :: params("mime.types")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], largePeriodfilePeriodmin: Option[Int], cachePeriodapply: Option[Boolean], mimePeriodtypes: Seq[String]) =>
          da.Configmgr_comDayCqDamCommonsUtilImplAssetCacheImpl(post, apply, delete, action, Dollarlocation, propertylist, largePeriodfilePeriodmin, cachePeriodapply, mimePeriodtypes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo
        */
        private def comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(da: DataAccessor): Endpoint[ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.config.annotation.pdf.document.width").map(_.map(_.toInt)) :: paramOption("cq.dam.config.annotation.pdf.document.height").map(_.map(_.toInt)) :: paramOption("cq.dam.config.annotation.pdf.document.padding.horizontal").map(_.map(_.toInt)) :: paramOption("cq.dam.config.annotation.pdf.document.padding.vertical").map(_.map(_.toInt)) :: paramOption("cq.dam.config.annotation.pdf.font.size").map(_.map(_.toInt)) :: paramOption("cq.dam.config.annotation.pdf.font.color") :: paramOption("cq.dam.config.annotation.pdf.font.family") :: paramOption("cq.dam.config.annotation.pdf.font.light") :: paramOption("cq.dam.config.annotation.pdf.marginTextImage").map(_.map(_.toInt)) :: paramOption("cq.dam.config.annotation.pdf.minImageHeight").map(_.map(_.toInt)) :: paramOption("cq.dam.config.annotation.pdf.reviewStatus.width").map(_.map(_.toInt)) :: paramOption("cq.dam.config.annotation.pdf.reviewStatus.color.approved") :: paramOption("cq.dam.config.annotation.pdf.reviewStatus.color.rejected") :: paramOption("cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested") :: paramOption("cq.dam.config.annotation.pdf.annotationMarker.width").map(_.map(_.toInt)) :: paramOption("cq.dam.config.annotation.pdf.asset.minheight").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodwidth: Option[Int], cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodheight: Option[Int], cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodhorizontal: Option[Int], cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodvertical: Option[Int], cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodsize: Option[Int], cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodcolor: Option[String], cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodfamily: Option[String], cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodlight: Option[String], cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodmarginTextImage: Option[Int], cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodminImageHeight: Option[Int], cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodwidth: Option[Int], cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodapproved: Option[String], cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodrejected: Option[String], cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodchangesRequested: Option[String], cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodannotationMarkerPeriodwidth: Option[Int], cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodassetPeriodminheight: Option[Int]) =>
          da.Configmgr_comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodwidth, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodheight, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodhorizontal, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodvertical, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodsize, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodcolor, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodfamily, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodlight, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodmarginTextImage, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodminImageHeight, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodwidth, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodapproved, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodrejected, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodchangesRequested, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodannotationMarkerPeriodwidth, cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodassetPeriodminheight) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplAssetMoveListenerInfo
        */
        private def comDayCqDamCoreImplAssetMoveListener(da: DataAccessor): Endpoint[ComDayCqDamCoreImplAssetMoveListenerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.AssetMoveListener" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enabled: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreImplAssetMoveListener(post, apply, delete, action, Dollarlocation, propertylist, enabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo
        */
        private def comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(da: DataAccessor): Endpoint[ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("isEnabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], isEnabled: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(post, apply, delete, action, Dollarlocation, propertylist, isEnabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo
        */
        private def comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(da: DataAccessor): Endpoint[ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.adhoc.asset.share.prezip.maxcontentsize").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodadhocPeriodassetPeriodsharePeriodprezipPeriodmaxcontentsize: Option[Int]) =>
          da.Configmgr_comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodadhocPeriodassetPeriodsharePeriodprezipPeriodmaxcontentsize) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo
        */
        private def comDayCqDamCoreImplCacheCQBufferedImageCache(da: DataAccessor): Endpoint[ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.cache.CQBufferedImageCache" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.image.cache.max.memory").map(_.map(_.toInt)) :: paramOption("cq.dam.image.cache.max.age").map(_.map(_.toInt)) :: paramOption("cq.dam.image.cache.max.dimension")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodmemory: Option[Int], cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodage: Option[Int], cqPerioddamPeriodimagePeriodcachePeriodmaxPerioddimension: Option[String]) =>
          da.Configmgr_comDayCqDamCoreImplCacheCQBufferedImageCache(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodmemory, cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodage, cqPerioddamPeriodimagePeriodcachePeriodmaxPerioddimension) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplDamChangeEventListenerInfo
        */
        private def comDayCqDamCoreImplDamChangeEventListener(da: DataAccessor): Endpoint[ComDayCqDamCoreImplDamChangeEventListenerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.DamChangeEventListener" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("changeeventlistener.observed.paths")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], changeeventlistenerPeriodobservedPeriodpaths: Seq[String]) =>
          da.Configmgr_comDayCqDamCoreImplDamChangeEventListener(post, apply, delete, action, Dollarlocation, propertylist, changeeventlistenerPeriodobservedPeriodpaths) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplDamEventPurgeServiceInfo
        */
        private def comDayCqDamCoreImplDamEventPurgeService(da: DataAccessor): Endpoint[ComDayCqDamCoreImplDamEventPurgeServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.DamEventPurgeService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("scheduler.expression") :: paramOption("maxSavedActivities").map(_.map(_.toInt)) :: paramOption("saveInterval").map(_.map(_.toInt)) :: paramOption("enableActivityPurge").map(_.map(_.toBoolean)) :: paramOption("eventTypes")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], schedulerPeriodexpression: Option[String], maxSavedActivities: Option[Int], saveInterval: Option[Int], enableActivityPurge: Option[Boolean], eventTypes: Option[String]) =>
          da.Configmgr_comDayCqDamCoreImplDamEventPurgeService(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression, maxSavedActivities, saveInterval, enableActivityPurge, eventTypes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplDamEventRecorderImplInfo
        */
        private def comDayCqDamCoreImplDamEventRecorderImpl(da: DataAccessor): Endpoint[ComDayCqDamCoreImplDamEventRecorderImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.DamEventRecorderImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("event.filter") :: paramOption("event.queue.length").map(_.map(_.toInt)) :: paramOption("eventrecorder.enabled").map(_.map(_.toBoolean)) :: params("eventrecorder.blacklist") :: paramOption("eventrecorder.eventtypes")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], eventPeriodfilter: Option[String], eventPeriodqueuePeriodlength: Option[Int], eventrecorderPeriodenabled: Option[Boolean], eventrecorderPeriodblacklist: Seq[String], eventrecorderPeriodeventtypes: Option[String]) =>
          da.Configmgr_comDayCqDamCoreImplDamEventRecorderImpl(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodfilter, eventPeriodqueuePeriodlength, eventrecorderPeriodenabled, eventrecorderPeriodblacklist, eventrecorderPeriodeventtypes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplEventDamEventAuditListenerInfo
        */
        private def comDayCqDamCoreImplEventDamEventAuditListener(da: DataAccessor): Endpoint[ComDayCqDamCoreImplEventDamEventAuditListenerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.event.DamEventAuditListener" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("event.filter") :: paramOption("enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], eventPeriodfilter: Option[String], enabled: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreImplEventDamEventAuditListener(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodfilter, enabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplExpiryNotificationJobImplInfo
        */
        private def comDayCqDamCoreImplExpiryNotificationJobImpl(da: DataAccessor): Endpoint[ComDayCqDamCoreImplExpiryNotificationJobImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.ExpiryNotificationJobImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.expiry.notification.scheduler.istimebased").map(_.map(_.toBoolean)) :: paramOption("cq.dam.expiry.notification.scheduler.timebased.rule") :: paramOption("cq.dam.expiry.notification.scheduler.period.rule").map(_.map(_.toInt)) :: paramOption("send_email").map(_.map(_.toBoolean)) :: paramOption("asset_expired_limit").map(_.map(_.toInt)) :: paramOption("prior_notification_seconds").map(_.map(_.toInt)) :: paramOption("cq.dam.expiry.notification.url.protocol")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodistimebased: Option[Boolean], cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule: Option[String], cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodperiodPeriodrule: Option[Int], sendEmail: Option[Boolean], assetExpiredLimit: Option[Int], priorNotificationSeconds: Option[Int], cqPerioddamPeriodexpiryPeriodnotificationPeriodurlPeriodprotocol: Option[String]) =>
          da.Configmgr_comDayCqDamCoreImplExpiryNotificationJobImpl(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodistimebased, cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule, cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodperiodPeriodrule, sendEmail, assetExpiredLimit, priorNotificationSeconds, cqPerioddamPeriodexpiryPeriodnotificationPeriodurlPeriodprotocol) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo
        */
        private def comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(da: DataAccessor): Endpoint[ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("isEnabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], isEnabled: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(post, apply, delete, action, Dollarlocation, propertylist, isEnabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplGfxCommonsGfxRendererInfo
        */
        private def comDayCqDamCoreImplGfxCommonsGfxRenderer(da: DataAccessor): Endpoint[ComDayCqDamCoreImplGfxCommonsGfxRendererInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("skip.bufferedcache").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], skipPeriodbufferedcache: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreImplGfxCommonsGfxRenderer(post, apply, delete, action, Dollarlocation, propertylist, skipPeriodbufferedcache) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo
        */
        private def comDayCqDamCoreImplHandlerEPSFormatHandler(da: DataAccessor): Endpoint[ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.handler.EPSFormatHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("mimetype")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], mimetype: Option[String]) =>
          da.Configmgr_comDayCqDamCoreImplHandlerEPSFormatHandler(post, apply, delete, action, Dollarlocation, propertylist, mimetype) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo
        */
        private def comDayCqDamCoreImplHandlerIndesignFormatHandler(da: DataAccessor): Endpoint[ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.handler.IndesignFormatHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("mimetype")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], mimetype: Seq[String]) =>
          da.Configmgr_comDayCqDamCoreImplHandlerIndesignFormatHandler(post, apply, delete, action, Dollarlocation, propertylist, mimetype) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplHandlerJpegHandlerInfo
        */
        private def comDayCqDamCoreImplHandlerJpegHandler(da: DataAccessor): Endpoint[ComDayCqDamCoreImplHandlerJpegHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.handler.JpegHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.enable.ext.meta.extraction").map(_.map(_.toBoolean)) :: paramOption("large_file_threshold").map(_.map(_.toInt)) :: paramOption("large_comment_threshold").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction: Option[Boolean], largeFileThreshold: Option[Int], largeCommentThreshold: Option[Int]) =>
          da.Configmgr_comDayCqDamCoreImplHandlerJpegHandler(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction, largeFileThreshold, largeCommentThreshold) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo
        */
        private def comDayCqDamCoreImplHandlerXmpNCommXMPHandler(da: DataAccessor): Endpoint[ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("xmphandler.cq.formats")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], xmphandlerPeriodcqPeriodformats: Seq[String]) =>
          da.Configmgr_comDayCqDamCoreImplHandlerXmpNCommXMPHandler(post, apply, delete, action, Dollarlocation, propertylist, xmphandlerPeriodcqPeriodformats) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo
        */
        private def comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(da: DataAccessor): Endpoint[ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("jmx.objectname") :: paramOption("property.measure.enabled").map(_.map(_.toBoolean)) :: paramOption("property.name") :: paramOption("property.max.wait.ms").map(_.map(_.toInt)) :: paramOption("property.max.rate").map(_.map(_.toBigDecimal)) :: paramOption("fulltext.measure.enabled").map(_.map(_.toBoolean)) :: paramOption("fulltext.name") :: paramOption("fulltext.max.wait.ms").map(_.map(_.toInt)) :: paramOption("fulltext.max.rate").map(_.map(_.toBigDecimal))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], jmxPeriodobjectname: Option[String], propertyPeriodmeasurePeriodenabled: Option[Boolean], propertyPeriodname: Option[String], propertyPeriodmaxPeriodwaitPeriodms: Option[Int], propertyPeriodmaxPeriodrate: Option[BigDecimal], fulltextPeriodmeasurePeriodenabled: Option[Boolean], fulltextPeriodname: Option[String], fulltextPeriodmaxPeriodwaitPeriodms: Option[Int], fulltextPeriodmaxPeriodrate: Option[BigDecimal]) =>
          da.Configmgr_comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(post, apply, delete, action, Dollarlocation, propertylist, jmxPeriodobjectname, propertyPeriodmeasurePeriodenabled, propertyPeriodname, propertyPeriodmaxPeriodwaitPeriodms, propertyPeriodmaxPeriodrate, fulltextPeriodmeasurePeriodenabled, fulltextPeriodname, fulltextPeriodmaxPeriodwaitPeriodms, fulltextPeriodmaxPeriodrate) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo
        */
        private def comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(da: DataAccessor): Endpoint[ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("jmx.objectname")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], jmxPeriodobjectname: Option[String]) =>
          da.Configmgr_comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(post, apply, delete, action, Dollarlocation, propertylist, jmxPeriodobjectname) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo
        */
        private def comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(da: DataAccessor): Endpoint[ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("jmx.objectname") :: paramOption("active").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], jmxPeriodobjectname: Option[String], active: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(post, apply, delete, action, Dollarlocation, propertylist, jmxPeriodobjectname, active) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo
        */
        private def comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(da: DataAccessor): Endpoint[ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("operation") :: paramOption("emailEnabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], operation: Option[String], emailEnabled: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(post, apply, delete, action, Dollarlocation, propertylist, operation, emailEnabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo
        */
        private def comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(da: DataAccessor): Endpoint[ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("operation") :: paramOption("operationIcon") :: paramOption("topicName") :: paramOption("emailEnabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], operation: Option[String], operationIcon: Option[String], topicName: Option[String], emailEnabled: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(post, apply, delete, action, Dollarlocation, propertylist, operation, operationIcon, topicName, emailEnabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplLightboxLightboxServletInfo
        */
        private def comDayCqDamCoreImplLightboxLightboxServlet(da: DataAccessor): Endpoint[ComDayCqDamCoreImplLightboxLightboxServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.lightbox.LightboxServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("sling.servlet.paths") :: params("sling.servlet.methods") :: paramOption("cq.dam.enable.anonymous").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], slingPeriodservletPeriodpaths: Option[String], slingPeriodservletPeriodmethods: Seq[String], cqPerioddamPeriodenablePeriodanonymous: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreImplLightboxLightboxServlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodpaths, slingPeriodservletPeriodmethods, cqPerioddamPeriodenablePeriodanonymous) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo
        */
        private def comDayCqDamCoreImplMetadataEditorSelectComponentHandler(da: DataAccessor): Endpoint[ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("granite:data")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], graniteData: Seq[String]) =>
          da.Configmgr_comDayCqDamCoreImplMetadataEditorSelectComponentHandler(post, apply, delete, action, Dollarlocation, propertylist, graniteData) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo
        */
        private def comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(da: DataAccessor): Endpoint[ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.allow.all.mime").map(_.map(_.toBoolean)) :: params("cq.dam.allowed.asset.mimes")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodallowPeriodallPeriodmime: Option[Boolean], cqPerioddamPeriodallowedPeriodassetPeriodmimes: Seq[String]) =>
          da.Configmgr_comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodallowPeriodallPeriodmime, cqPerioddamPeriodallowedPeriodassetPeriodmimes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo
        */
        private def comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(da: DataAccessor): Endpoint[ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.detect.asset.mime.from.content").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPerioddetectPeriodassetPeriodmimePeriodfromPeriodcontent: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPerioddetectPeriodassetPeriodmimePeriodfromPeriodcontent) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplMissingMetadataNotificationJobInfo
        */
        private def comDayCqDamCoreImplMissingMetadataNotificationJob(da: DataAccessor): Endpoint[ComDayCqDamCoreImplMissingMetadataNotificationJobInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.MissingMetadataNotificationJob" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.missingmetadata.notification.scheduler.istimebased").map(_.map(_.toBoolean)) :: paramOption("cq.dam.missingmetadata.notification.scheduler.timebased.rule") :: paramOption("cq.dam.missingmetadata.notification.scheduler.period.rule").map(_.map(_.toInt)) :: paramOption("cq.dam.missingmetadata.notification.recipient")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodistimebased: Option[Boolean], cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule: Option[String], cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodperiodPeriodrule: Option[Int], cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodrecipient: Option[String]) =>
          da.Configmgr_comDayCqDamCoreImplMissingMetadataNotificationJob(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodistimebased, cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule, cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodperiodPeriodrule, cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodrecipient) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo
        */
        private def comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(da: DataAccessor): Endpoint[ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("process.label") :: paramOption("Notify on Complete").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], processPeriodlabel: Option[String], notify on Complete: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(post, apply, delete, action, Dollarlocation, propertylist, processPeriodlabel, notify on Complete) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplProcessTextExtractionProcessInfo
        */
        private def comDayCqDamCoreImplProcessTextExtractionProcess(da: DataAccessor): Endpoint[ComDayCqDamCoreImplProcessTextExtractionProcessInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.process.TextExtractionProcess" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("mimeTypes") :: paramOption("maxExtract").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], mimeTypes: Seq[String], maxExtract: Option[Int]) =>
          da.Configmgr_comDayCqDamCoreImplProcessTextExtractionProcess(post, apply, delete, action, Dollarlocation, propertylist, mimeTypes, maxExtract) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplRenditionMakerImplInfo
        */
        private def comDayCqDamCoreImplRenditionMakerImpl(da: DataAccessor): Endpoint[ComDayCqDamCoreImplRenditionMakerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.RenditionMakerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("xmp.propagate").map(_.map(_.toBoolean)) :: params("xmp.excludes")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], xmpPeriodpropagate: Option[Boolean], xmpPeriodexcludes: Seq[String]) =>
          da.Configmgr_comDayCqDamCoreImplRenditionMakerImpl(post, apply, delete, action, Dollarlocation, propertylist, xmpPeriodpropagate, xmpPeriodexcludes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplReportsReportExportServiceInfo
        */
        private def comDayCqDamCoreImplReportsReportExportService(da: DataAccessor): Endpoint[ComDayCqDamCoreImplReportsReportExportServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.reports.ReportExportService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("queryBatchSize").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], queryBatchSize: Option[Int]) =>
          da.Configmgr_comDayCqDamCoreImplReportsReportExportService(post, apply, delete, action, Dollarlocation, propertylist, queryBatchSize) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplReportsReportPurgeServiceInfo
        */
        private def comDayCqDamCoreImplReportsReportPurgeService(da: DataAccessor): Endpoint[ComDayCqDamCoreImplReportsReportPurgeServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.reports.ReportPurgeService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("scheduler.expression") :: paramOption("maxSavedReports").map(_.map(_.toInt)) :: paramOption("timeDuration").map(_.map(_.toInt)) :: paramOption("enableReportPurge").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], schedulerPeriodexpression: Option[String], maxSavedReports: Option[Int], timeDuration: Option[Int], enableReportPurge: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreImplReportsReportPurgeService(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression, maxSavedReports, timeDuration, enableReportPurge) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplServletAssetDownloadServletInfo
        */
        private def comDayCqDamCoreImplServletAssetDownloadServlet(da: DataAccessor): Endpoint[ComDayCqDamCoreImplServletAssetDownloadServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.servlet.AssetDownloadServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enabled: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreImplServletAssetDownloadServlet(post, apply, delete, action, Dollarlocation, propertylist, enabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplServletAssetStatusServletInfo
        */
        private def comDayCqDamCoreImplServletAssetStatusServlet(da: DataAccessor): Endpoint[ComDayCqDamCoreImplServletAssetStatusServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.servlet.AssetStatusServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.batch.status.maxassets").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodbatchPeriodstatusPeriodmaxassets: Option[Int]) =>
          da.Configmgr_comDayCqDamCoreImplServletAssetStatusServlet(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodbatchPeriodstatusPeriodmaxassets) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplServletAssetXMPSearchServletInfo
        */
        private def comDayCqDamCoreImplServletAssetXMPSearchServlet(da: DataAccessor): Endpoint[ComDayCqDamCoreImplServletAssetXMPSearchServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.batch.indesign.maxassets").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodbatchPeriodindesignPeriodmaxassets: Option[Int]) =>
          da.Configmgr_comDayCqDamCoreImplServletAssetXMPSearchServlet(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodbatchPeriodindesignPeriodmaxassets) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplServletBatchMetadataServletInfo
        */
        private def comDayCqDamCoreImplServletBatchMetadataServlet(da: DataAccessor): Endpoint[ComDayCqDamCoreImplServletBatchMetadataServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.servlet.BatchMetadataServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.dam.batch.metadata.asset.default") :: params("cq.dam.batch.metadata.collection.default") :: paramOption("cq.dam.batch.metadata.maxresources").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodbatchPeriodmetadataPeriodassetPerioddefault: Seq[String], cqPerioddamPeriodbatchPeriodmetadataPeriodcollectionPerioddefault: Seq[String], cqPerioddamPeriodbatchPeriodmetadataPeriodmaxresources: Option[Int]) =>
          da.Configmgr_comDayCqDamCoreImplServletBatchMetadataServlet(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodbatchPeriodmetadataPeriodassetPerioddefault, cqPerioddamPeriodbatchPeriodmetadataPeriodcollectionPerioddefault, cqPerioddamPeriodbatchPeriodmetadataPeriodmaxresources) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplServletBinaryProviderServletInfo
        */
        private def comDayCqDamCoreImplServletBinaryProviderServlet(da: DataAccessor): Endpoint[ComDayCqDamCoreImplServletBinaryProviderServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.servlet.BinaryProviderServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("sling.servlet.resourceTypes") :: params("sling.servlet.methods") :: paramOption("cq.dam.drm.enable").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], slingPeriodservletPeriodresourceTypes: Seq[String], slingPeriodservletPeriodmethods: Seq[String], cqPerioddamPerioddrmPeriodenable: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreImplServletBinaryProviderServlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodresourceTypes, slingPeriodservletPeriodmethods, cqPerioddamPerioddrmPeriodenable) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplServletCollectionServletInfo
        */
        private def comDayCqDamCoreImplServletCollectionServlet(da: DataAccessor): Endpoint[ComDayCqDamCoreImplServletCollectionServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.servlet.CollectionServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.dam.batch.collection.properties") :: paramOption("cq.dam.batch.collection.maxcollections").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodbatchPeriodcollectionPeriodproperties: Seq[String], cqPerioddamPeriodbatchPeriodcollectionPeriodmaxcollections: Option[Int]) =>
          da.Configmgr_comDayCqDamCoreImplServletCollectionServlet(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodbatchPeriodcollectionPeriodproperties, cqPerioddamPeriodbatchPeriodcollectionPeriodmaxcollections) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplServletCollectionsServletInfo
        */
        private def comDayCqDamCoreImplServletCollectionsServlet(da: DataAccessor): Endpoint[ComDayCqDamCoreImplServletCollectionsServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.servlet.CollectionsServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.dam.batch.collections.properties") :: paramOption("cq.dam.batch.collections.limit").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodbatchPeriodcollectionsPeriodproperties: Seq[String], cqPerioddamPeriodbatchPeriodcollectionsPeriodlimit: Option[Int]) =>
          da.Configmgr_comDayCqDamCoreImplServletCollectionsServlet(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodbatchPeriodcollectionsPeriodproperties, cqPerioddamPeriodbatchPeriodcollectionsPeriodlimit) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplServletCompanionServletInfo
        */
        private def comDayCqDamCoreImplServletCompanionServlet(da: DataAccessor): Endpoint[ComDayCqDamCoreImplServletCompanionServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.servlet.CompanionServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("More Info") :: paramOption("/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], more Info: Option[String], SlashmntSlashoverlaySlashdamSlashguiSlashcontentSlashassetsSlashmoreinfoPeriodhtmlSlashDollarLeft_Curly_BracketpathRight_Curly_Bracket: Option[String]) =>
          da.Configmgr_comDayCqDamCoreImplServletCompanionServlet(post, apply, delete, action, Dollarlocation, propertylist, more Info, SlashmntSlashoverlaySlashdamSlashguiSlashcontentSlashassetsSlashmoreinfoPeriodhtmlSlashDollarLeft_Curly_BracketpathRight_Curly_Bracket) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplServletCreateAssetServletInfo
        */
        private def comDayCqDamCoreImplServletCreateAssetServlet(da: DataAccessor): Endpoint[ComDayCqDamCoreImplServletCreateAssetServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.servlet.CreateAssetServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("detect_duplicate").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], detectDuplicate: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreImplServletCreateAssetServlet(post, apply, delete, action, Dollarlocation, propertylist, detectDuplicate) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplServletDamContentDispositionFilterInfo
        */
        private def comDayCqDamCoreImplServletDamContentDispositionFilter(da: DataAccessor): Endpoint[ComDayCqDamCoreImplServletDamContentDispositionFilterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.mime.type.blacklist") :: paramOption("cq.dam.empty.mime").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodmimePeriodtypePeriodblacklist: Seq[String], cqPerioddamPeriodemptyPeriodmime: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreImplServletDamContentDispositionFilter(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodmimePeriodtypePeriodblacklist, cqPerioddamPeriodemptyPeriodmime) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplServletGuidLookupFilterInfo
        */
        private def comDayCqDamCoreImplServletGuidLookupFilter(da: DataAccessor): Endpoint[ComDayCqDamCoreImplServletGuidLookupFilterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.servlet.GuidLookupFilter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.core.guidlookupfilter.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodcorePeriodguidlookupfilterPeriodenabled: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreImplServletGuidLookupFilter(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodcorePeriodguidlookupfilterPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplServletHealthCheckServletInfo
        */
        private def comDayCqDamCoreImplServletHealthCheckServlet(da: DataAccessor): Endpoint[ComDayCqDamCoreImplServletHealthCheckServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.servlet.HealthCheckServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.sync.workflow.id") :: params("cq.dam.sync.folder.types")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodsyncPeriodworkflowPeriodid: Option[String], cqPerioddamPeriodsyncPeriodfolderPeriodtypes: Seq[String]) =>
          da.Configmgr_comDayCqDamCoreImplServletHealthCheckServlet(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodsyncPeriodworkflowPeriodid, cqPerioddamPeriodsyncPeriodfolderPeriodtypes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplServletMetadataGetServletInfo
        */
        private def comDayCqDamCoreImplServletMetadataGetServlet(da: DataAccessor): Endpoint[ComDayCqDamCoreImplServletMetadataGetServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.servlet.MetadataGetServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("sling.servlet.resourceTypes") :: paramOption("sling.servlet.methods") :: paramOption("sling.servlet.extensions") :: paramOption("sling.servlet.selectors")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], slingPeriodservletPeriodresourceTypes: Option[String], slingPeriodservletPeriodmethods: Option[String], slingPeriodservletPeriodextensions: Option[String], slingPeriodservletPeriodselectors: Option[String]) =>
          da.Configmgr_comDayCqDamCoreImplServletMetadataGetServlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodresourceTypes, slingPeriodservletPeriodmethods, slingPeriodservletPeriodextensions, slingPeriodservletPeriodselectors) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo
        */
        private def comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(da: DataAccessor): Endpoint[ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.drm.enable").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPerioddrmPeriodenable: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPerioddrmPeriodenable) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplServletResourceCollectionServletInfo
        */
        private def comDayCqDamCoreImplServletResourceCollectionServlet(da: DataAccessor): Endpoint[ComDayCqDamCoreImplServletResourceCollectionServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("sling.servlet.resourceTypes") :: paramOption("sling.servlet.methods") :: paramOption("sling.servlet.selectors") :: paramOption("download.config") :: paramOption("view.selector") :: paramOption("send_email").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], slingPeriodservletPeriodresourceTypes: Seq[String], slingPeriodservletPeriodmethods: Option[String], slingPeriodservletPeriodselectors: Option[String], downloadPeriodconfig: Option[String], viewPeriodselector: Option[String], sendEmail: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreImplServletResourceCollectionServlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodresourceTypes, slingPeriodservletPeriodmethods, slingPeriodservletPeriodselectors, downloadPeriodconfig, viewPeriodselector, sendEmail) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo
        */
        private def comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(da: DataAccessor): Endpoint[ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("createPreviewEnabled").map(_.map(_.toBoolean)) :: paramOption("updatePreviewEnabled").map(_.map(_.toBoolean)) :: paramOption("queueSize").map(_.map(_.toInt)) :: paramOption("folderPreviewRenditionRegex")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], createPreviewEnabled: Option[Boolean], updatePreviewEnabled: Option[Boolean], queueSize: Option[Int], folderPreviewRenditionRegex: Option[String]) =>
          da.Configmgr_comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(post, apply, delete, action, Dollarlocation, propertylist, createPreviewEnabled, updatePreviewEnabled, queueSize, folderPreviewRenditionRegex) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreImplUnzipUnzipConfigInfo
        */
        private def comDayCqDamCoreImplUnzipUnzipConfig(da: DataAccessor): Endpoint[ComDayCqDamCoreImplUnzipUnzipConfigInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.impl.unzip.UnzipConfig" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.config.unzip.maxuncompressedsize").map(_.map(_.toInt)) :: paramOption("cq.dam.config.unzip.encoding")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodconfigPeriodunzipPeriodmaxuncompressedsize: Option[Int], cqPerioddamPeriodconfigPeriodunzipPeriodencoding: Option[String]) =>
          da.Configmgr_comDayCqDamCoreImplUnzipUnzipConfig(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodconfigPeriodunzipPeriodmaxuncompressedsize, cqPerioddamPeriodconfigPeriodunzipPeriodencoding) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo
        */
        private def comDayCqDamCoreProcessExifToolExtractMetadataProcess(da: DataAccessor): Endpoint[ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.process.ExifToolExtractMetadataProcess" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("process.label") :: paramOption("cq.dam.enable.sha1").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], processPeriodlabel: Option[String], cqPerioddamPeriodenablePeriodsha1: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreProcessExifToolExtractMetadataProcess(post, apply, delete, action, Dollarlocation, propertylist, processPeriodlabel, cqPerioddamPeriodenablePeriodsha1) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreProcessExtractMetadataProcessInfo
        */
        private def comDayCqDamCoreProcessExtractMetadataProcess(da: DataAccessor): Endpoint[ComDayCqDamCoreProcessExtractMetadataProcessInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.process.ExtractMetadataProcess" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("process.label") :: paramOption("cq.dam.enable.sha1").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], processPeriodlabel: Option[String], cqPerioddamPeriodenablePeriodsha1: Option[Boolean]) =>
          da.Configmgr_comDayCqDamCoreProcessExtractMetadataProcess(post, apply, delete, action, Dollarlocation, propertylist, processPeriodlabel, cqPerioddamPeriodenablePeriodsha1) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamCoreProcessMetadataProcessorProcessInfo
        */
        private def comDayCqDamCoreProcessMetadataProcessorProcess(da: DataAccessor): Endpoint[ComDayCqDamCoreProcessMetadataProcessorProcessInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.core.process.MetadataProcessorProcess" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("process.label") :: paramOption("cq.dam.enable.sha1").map(_.map(_.toBoolean)) :: params("cq.dam.metadata.xssprotected.properties")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], processPeriodlabel: Option[String], cqPerioddamPeriodenablePeriodsha1: Option[Boolean], cqPerioddamPeriodmetadataPeriodxssprotectedPeriodproperties: Seq[String]) =>
          da.Configmgr_comDayCqDamCoreProcessMetadataProcessorProcess(post, apply, delete, action, Dollarlocation, propertylist, processPeriodlabel, cqPerioddamPeriodenablePeriodsha1, cqPerioddamPeriodmetadataPeriodxssprotectedPeriodproperties) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamHandlerFfmpegLocatorImplInfo
        */
        private def comDayCqDamHandlerFfmpegLocatorImpl(da: DataAccessor): Endpoint[ComDayCqDamHandlerFfmpegLocatorImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.handler.ffmpeg.LocatorImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("executable.searchpath")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], executablePeriodsearchpath: Seq[String]) =>
          da.Configmgr_comDayCqDamHandlerFfmpegLocatorImpl(post, apply, delete, action, Dollarlocation, propertylist, executablePeriodsearchpath) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo
        */
        private def comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(da: DataAccessor): Endpoint[ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("event.filter") :: params("fontmgr.system.font.dir") :: paramOption("fontmgr.adobe.font.dir") :: paramOption("fontmgr.customer.font.dir")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], eventPeriodfilter: Option[String], fontmgrPeriodsystemPeriodfontPerioddir: Seq[String], fontmgrPeriodadobePeriodfontPerioddir: Option[String], fontmgrPeriodcustomerPeriodfontPerioddir: Option[String]) =>
          da.Configmgr_comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodfilter, fontmgrPeriodsystemPeriodfontPerioddir, fontmgrPeriodadobePeriodfontPerioddir, fontmgrPeriodcustomerPeriodfontPerioddir) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamHandlerStandardPdfPdfHandlerInfo
        */
        private def comDayCqDamHandlerStandardPdfPdfHandler(da: DataAccessor): Endpoint[ComDayCqDamHandlerStandardPdfPdfHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.handler.standard.pdf.PdfHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("raster.annotation").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], rasterPeriodannotation: Option[Boolean]) =>
          da.Configmgr_comDayCqDamHandlerStandardPdfPdfHandler(post, apply, delete, action, Dollarlocation, propertylist, rasterPeriodannotation) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamHandlerStandardPsPostScriptHandlerInfo
        */
        private def comDayCqDamHandlerStandardPsPostScriptHandler(da: DataAccessor): Endpoint[ComDayCqDamHandlerStandardPsPostScriptHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.handler.standard.ps.PostScriptHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("raster.annotation").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], rasterPeriodannotation: Option[Boolean]) =>
          da.Configmgr_comDayCqDamHandlerStandardPsPostScriptHandler(post, apply, delete, action, Dollarlocation, propertylist, rasterPeriodannotation) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamHandlerStandardPsdPsdHandlerInfo
        */
        private def comDayCqDamHandlerStandardPsdPsdHandler(da: DataAccessor): Endpoint[ComDayCqDamHandlerStandardPsdPsdHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.handler.standard.psd.PsdHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("large_file_threshold").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], largeFileThreshold: Option[Int]) =>
          da.Configmgr_comDayCqDamHandlerStandardPsdPsdHandler(post, apply, delete, action, Dollarlocation, propertylist, largeFileThreshold) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamIdsImplIDSJobProcessorInfo
        */
        private def comDayCqDamIdsImplIDSJobProcessor(da: DataAccessor): Endpoint[ComDayCqDamIdsImplIDSJobProcessorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.ids.impl.IDSJobProcessor" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enable.multisession").map(_.map(_.toBoolean)) :: paramOption("ids.cc.enable").map(_.map(_.toBoolean)) :: paramOption("enable.retry").map(_.map(_.toBoolean)) :: paramOption("enable.retry.scripterror").map(_.map(_.toBoolean)) :: paramOption("externalizer.domain.cqhost") :: paramOption("externalizer.domain.http")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enablePeriodmultisession: Option[Boolean], idsPeriodccPeriodenable: Option[Boolean], enablePeriodretry: Option[Boolean], enablePeriodretryPeriodscripterror: Option[Boolean], externalizerPerioddomainPeriodcqhost: Option[String], externalizerPerioddomainPeriodhttp: Option[String]) =>
          da.Configmgr_comDayCqDamIdsImplIDSJobProcessor(post, apply, delete, action, Dollarlocation, propertylist, enablePeriodmultisession, idsPeriodccPeriodenable, enablePeriodretry, enablePeriodretryPeriodscripterror, externalizerPerioddomainPeriodcqhost, externalizerPerioddomainPeriodhttp) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamIdsImplIDSPoolManagerImplInfo
        */
        private def comDayCqDamIdsImplIDSPoolManagerImpl(da: DataAccessor): Endpoint[ComDayCqDamIdsImplIDSPoolManagerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.ids.impl.IDSPoolManagerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("max.errors.to.blacklist").map(_.map(_.toInt)) :: paramOption("retry.interval.to.whitelist").map(_.map(_.toInt)) :: paramOption("connect.timeout").map(_.map(_.toInt)) :: paramOption("socket.timeout").map(_.map(_.toInt)) :: paramOption("process.label") :: paramOption("connection.use.max").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], maxPerioderrorsPeriodtoPeriodblacklist: Option[Int], retryPeriodintervalPeriodtoPeriodwhitelist: Option[Int], connectPeriodtimeout: Option[Int], socketPeriodtimeout: Option[Int], processPeriodlabel: Option[String], connectionPeriodusePeriodmax: Option[Int]) =>
          da.Configmgr_comDayCqDamIdsImplIDSPoolManagerImpl(post, apply, delete, action, Dollarlocation, propertylist, maxPerioderrorsPeriodtoPeriodblacklist, retryPeriodintervalPeriodtoPeriodwhitelist, connectPeriodtimeout, socketPeriodtimeout, processPeriodlabel, connectionPeriodusePeriodmax) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo
        */
        private def comDayCqDamInddImplHandlerIndesignXMPHandler(da: DataAccessor): Endpoint[ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.indd.impl.handler.IndesignXMPHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("process.label") :: paramOption("extract.pages").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], processPeriodlabel: Option[String], extractPeriodpages: Option[Boolean]) =>
          da.Configmgr_comDayCqDamInddImplHandlerIndesignXMPHandler(post, apply, delete, action, Dollarlocation, propertylist, processPeriodlabel, extractPeriodpages) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamInddImplServletSnippetCreationServletInfo
        */
        private def comDayCqDamInddImplServletSnippetCreationServlet(da: DataAccessor): Endpoint[ComDayCqDamInddImplServletSnippetCreationServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("snippetcreation.maxcollections").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], snippetcreationPeriodmaxcollections: Option[Int]) =>
          da.Configmgr_comDayCqDamInddImplServletSnippetCreationServlet(post, apply, delete, action, Dollarlocation, propertylist, snippetcreationPeriodmaxcollections) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamInddProcessINDDMediaExtractProcessInfo
        */
        private def comDayCqDamInddProcessINDDMediaExtractProcess(da: DataAccessor): Endpoint[ComDayCqDamInddProcessINDDMediaExtractProcessInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.indd.process.INDDMediaExtractProcess" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("process.label") :: paramOption("cq.dam.indd.pages.regex") :: paramOption("ids.job.decoupled").map(_.map(_.toBoolean)) :: paramOption("ids.job.workflow.model")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], processPeriodlabel: Option[String], cqPerioddamPeriodinddPeriodpagesPeriodregex: Option[String], idsPeriodjobPerioddecoupled: Option[Boolean], idsPeriodjobPeriodworkflowPeriodmodel: Option[String]) =>
          da.Configmgr_comDayCqDamInddProcessINDDMediaExtractProcess(post, apply, delete, action, Dollarlocation, propertylist, processPeriodlabel, cqPerioddamPeriodinddPeriodpagesPeriodregex, idsPeriodjobPerioddecoupled, idsPeriodjobPeriodworkflowPeriodmodel) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo
        */
        private def comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(da: DataAccessor): Endpoint[ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("batch.commit.size").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], batchPeriodcommitPeriodsize: Option[Int]) =>
          da.Configmgr_comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(post, apply, delete, action, Dollarlocation, propertylist, batchPeriodcommitPeriodsize) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo
        */
        private def comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(da: DataAccessor): Endpoint[ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("scheduler.expression")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], schedulerPeriodexpression: Option[String]) =>
          da.Configmgr_comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo
        */
        private def comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(da: DataAccessor): Endpoint[ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("delete.zip.file").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], deletePeriodzipPeriodfile: Option[Boolean]) =>
          da.Configmgr_comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(post, apply, delete, action, Dollarlocation, propertylist, deletePeriodzipPeriodfile) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo
        */
        private def comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(da: DataAccessor): Endpoint[ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriods7damPerioddynamicmediaconfigeventlistenerPeriodenabled: Option[Boolean]) =>
          da.Configmgr_comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriods7damPerioddynamicmediaconfigeventlistenerPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo
        */
        private def comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(da: DataAccessor): Endpoint[ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("scheduler.expression") :: paramOption("scheduler.concurrent").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], schedulerPeriodexpression: Option[String], schedulerPeriodconcurrent: Option[Boolean]) =>
          da.Configmgr_comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression, schedulerPeriodconcurrent) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo
        */
        private def comDayCqDamS7damCommonPostServletsSetCreateHandler(da: DataAccessor): Endpoint[ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("sling.post.operation") :: paramOption("sling.servlet.methods")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], slingPeriodpostPeriodoperation: Option[String], slingPeriodservletPeriodmethods: Option[String]) =>
          da.Configmgr_comDayCqDamS7damCommonPostServletsSetCreateHandler(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodpostPeriodoperation, slingPeriodservletPeriodmethods) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo
        */
        private def comDayCqDamS7damCommonPostServletsSetModifyHandler(da: DataAccessor): Endpoint[ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("sling.post.operation") :: paramOption("sling.servlet.methods")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], slingPeriodpostPeriodoperation: Option[String], slingPeriodservletPeriodmethods: Option[String]) =>
          da.Configmgr_comDayCqDamS7damCommonPostServletsSetModifyHandler(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodpostPeriodoperation, slingPeriodservletPeriodmethods) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo
        */
        private def comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(da: DataAccessor): Endpoint[ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("process.label")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], processPeriodlabel: Option[String]) =>
          da.Configmgr_comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(post, apply, delete, action, Dollarlocation, propertylist, processPeriodlabel) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo
        */
        private def comDayCqDamS7damCommonS7damDamChangeEventListener(da: DataAccessor): Endpoint[ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.s7dam.common.S7damDamChangeEventListener" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.s7dam.damchangeeventlistener.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriods7damPerioddamchangeeventlistenerPeriodenabled: Option[Boolean]) =>
          da.Configmgr_comDayCqDamS7damCommonS7damDamChangeEventListener(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriods7damPerioddamchangeeventlistenerPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo
        */
        private def comDayCqDamS7damCommonServletsS7damProductInfoServlet(da: DataAccessor): Endpoint[ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("sling.servlet.paths") :: paramOption("sling.servlet.methods")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], slingPeriodservletPeriodpaths: Option[String], slingPeriodservletPeriodmethods: Option[String]) =>
          da.Configmgr_comDayCqDamS7damCommonServletsS7damProductInfoServlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodpaths, slingPeriodservletPeriodmethods) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo
        */
        private def comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(da: DataAccessor): Endpoint[ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name").map(_.map(_.toInt)) :: paramOption("cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name").map(_.map(_.toInt)) :: paramOption("cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name").map(_.map(_.toInt)) :: paramOption("cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name").map(_.map(_.toInt)) :: paramOption("cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name").map(_.map(_.toInt)) :: paramOption("cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name").map(_.map(_.toInt)) :: paramOption("cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodminsizePeriodname: Option[Int], cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodpartsizePeriodname: Option[Int], cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodnumthreadPeriodname: Option[Int], cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodreadtimeoutPeriodname: Option[Int], cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodconnectiontimeoutPeriodname: Option[Int], cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodmaxretrycountPeriodname: Option[Int], cqPerioddamPeriods7damPeriodvideoproxyclientservicePerioduploadprogressPeriodintervalPeriodname: Option[Int]) =>
          da.Configmgr_comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodminsizePeriodname, cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodpartsizePeriodname, cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodnumthreadPeriodname, cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodreadtimeoutPeriodname, cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodconnectiontimeoutPeriodname, cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodmaxretrycountPeriodname, cqPerioddamPeriods7damPeriodvideoproxyclientservicePerioduploadprogressPeriodintervalPeriodname) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamScene7ImplScene7APIClientImplInfo
        */
        private def comDayCqDamScene7ImplScene7APIClientImpl(da: DataAccessor): Endpoint[ComDayCqDamScene7ImplScene7APIClientImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.scene7.impl.Scene7APIClientImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.scene7.apiclient.recordsperpage.nofilter.name").map(_.map(_.toInt)) :: paramOption("cq.dam.scene7.apiclient.recordsperpage.withfilter.name").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodnofilterPeriodname: Option[Int], cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodwithfilterPeriodname: Option[Int]) =>
          da.Configmgr_comDayCqDamScene7ImplScene7APIClientImpl(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodnofilterPeriodname, cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodwithfilterPeriodname) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo
        */
        private def comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(da: DataAccessor): Endpoint[ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.dam.scene7.assetmimetypeservice.mapping")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodscene7PeriodassetmimetypeservicePeriodmapping: Seq[String]) =>
          da.Configmgr_comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodscene7PeriodassetmimetypeservicePeriodmapping) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo
        */
        private def comDayCqDamScene7ImplScene7ConfigurationEventListener(da: DataAccessor): Endpoint[ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.scene7.configurationeventlistener.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodscene7PeriodconfigurationeventlistenerPeriodenabled: Option[Boolean]) =>
          da.Configmgr_comDayCqDamScene7ImplScene7ConfigurationEventListener(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodscene7PeriodconfigurationeventlistenerPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo
        */
        private def comDayCqDamScene7ImplScene7DamChangeEventListener(da: DataAccessor): Endpoint[ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.scene7.damchangeeventlistener.enabled").map(_.map(_.toBoolean)) :: params("cq.dam.scene7.damchangeeventlistener.observed.paths")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodenabled: Option[Boolean], cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodobservedPeriodpaths: Seq[String]) =>
          da.Configmgr_comDayCqDamScene7ImplScene7DamChangeEventListener(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodenabled, cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodobservedPeriodpaths) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo
        */
        private def comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(da: DataAccessor): Endpoint[ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("scene7FlashTemplates.rti") :: paramOption("scene7FlashTemplates.rsi") :: paramOption("scene7FlashTemplates.rb") :: paramOption("scene7FlashTemplates.rurl") :: paramOption("scene7FlashTemplate.urlFormatParameter")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], scene7FlashTemplatesPeriodrti: Option[String], scene7FlashTemplatesPeriodrsi: Option[String], scene7FlashTemplatesPeriodrb: Option[String], scene7FlashTemplatesPeriodrurl: Option[String], scene7FlashTemplatePeriodurlFormatParameter: Option[String]) =>
          da.Configmgr_comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, scene7FlashTemplatesPeriodrti, scene7FlashTemplatesPeriodrsi, scene7FlashTemplatesPeriodrb, scene7FlashTemplatesPeriodrurl, scene7FlashTemplatePeriodurlFormatParameter) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamScene7ImplScene7UploadServiceImplInfo
        */
        private def comDayCqDamScene7ImplScene7UploadServiceImpl(da: DataAccessor): Endpoint[ComDayCqDamScene7ImplScene7UploadServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.dam.scene7.uploadservice.activejobtimeout.label").map(_.map(_.toInt)) :: paramOption("cq.dam.scene7.uploadservice.connectionmaxperroute.label").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPerioddamPeriodscene7PerioduploadservicePeriodactivejobtimeoutPeriodlabel: Option[Int], cqPerioddamPeriodscene7PerioduploadservicePeriodconnectionmaxperroutePeriodlabel: Option[Int]) =>
          da.Configmgr_comDayCqDamScene7ImplScene7UploadServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, cqPerioddamPeriodscene7PerioduploadservicePeriodactivejobtimeoutPeriodlabel, cqPerioddamPeriodscene7PerioduploadservicePeriodconnectionmaxperroutePeriodlabel) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo
        */
        private def comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(da: DataAccessor): Endpoint[ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("getCacheExpirationUnit") :: paramOption("getCacheExpirationValue").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], getCacheExpirationUnit: Option[String], getCacheExpirationValue: Option[Int]) =>
          da.Configmgr_comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(post, apply, delete, action, Dollarlocation, propertylist, getCacheExpirationUnit, getCacheExpirationValue) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo
        */
        private def comDayCqDamStockIntegrationImplConfigurationStockConfiguration(da: DataAccessor): Endpoint[ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("locale") :: paramOption("imsConfig")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], locale: Option[String], imsConfig: Option[String]) =>
          da.Configmgr_comDayCqDamStockIntegrationImplConfigurationStockConfiguration(post, apply, delete, action, Dollarlocation, propertylist, name, locale, imsConfig) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqDamVideoImplServletVideoTestServletInfo
        */
        private def comDayCqDamVideoImplServletVideoTestServlet(da: DataAccessor): Endpoint[ComDayCqDamVideoImplServletVideoTestServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.dam.video.impl.servlet.VideoTestServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enabled: Option[Boolean]) =>
          da.Configmgr_comDayCqDamVideoImplServletVideoTestServlet(post, apply, delete, action, Dollarlocation, propertylist, enabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqExtwidgetServletsImageSpriteServletInfo
        */
        private def comDayCqExtwidgetServletsImageSpriteServlet(da: DataAccessor): Endpoint[ComDayCqExtwidgetServletsImageSpriteServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.extwidget.servlets.ImageSpriteServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("maxWidth").map(_.map(_.toInt)) :: paramOption("maxHeight").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], maxWidth: Option[Int], maxHeight: Option[Int]) =>
          da.Configmgr_comDayCqExtwidgetServletsImageSpriteServlet(post, apply, delete, action, Dollarlocation, propertylist, maxWidth, maxHeight) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqImageInternalFontFontHelperInfo
        */
        private def comDayCqImageInternalFontFontHelper(da: DataAccessor): Endpoint[ComDayCqImageInternalFontFontHelperInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.image.internal.font.FontHelper" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("fontpath") :: paramOption("oversamplingFactor").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], fontpath: Seq[String], oversamplingFactor: Option[Int]) =>
          da.Configmgr_comDayCqImageInternalFontFontHelper(post, apply, delete, action, Dollarlocation, propertylist, fontpath, oversamplingFactor) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqJcrclustersupportClusterStartLevelControllerInfo
        */
        private def comDayCqJcrclustersupportClusterStartLevelController(da: DataAccessor): Endpoint[ComDayCqJcrclustersupportClusterStartLevelControllerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.jcrclustersupport.ClusterStartLevelController" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cluster.level.enable").map(_.map(_.toBoolean)) :: paramOption("cluster.master.level").map(_.map(_.toInt)) :: paramOption("cluster.slave.level").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], clusterPeriodlevelPeriodenable: Option[Boolean], clusterPeriodmasterPeriodlevel: Option[Int], clusterPeriodslavePeriodlevel: Option[Int]) =>
          da.Configmgr_comDayCqJcrclustersupportClusterStartLevelController(post, apply, delete, action, Dollarlocation, propertylist, clusterPeriodlevelPeriodenable, clusterPeriodmasterPeriodlevel, clusterPeriodslavePeriodlevel) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqMailerDefaultMailServiceInfo
        */
        private def comDayCqMailerDefaultMailService(da: DataAccessor): Endpoint[ComDayCqMailerDefaultMailServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.mailer.DefaultMailService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("smtp.host") :: paramOption("smtp.port").map(_.map(_.toInt)) :: paramOption("smtp.user") :: paramOption("smtp.password") :: paramOption("from.address") :: paramOption("smtp.ssl").map(_.map(_.toBoolean)) :: paramOption("smtp.starttls").map(_.map(_.toBoolean)) :: paramOption("debug.email").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], smtpPeriodhost: Option[String], smtpPeriodport: Option[Int], smtpPerioduser: Option[String], smtpPeriodpassword: Option[String], fromPeriodaddress: Option[String], smtpPeriodssl: Option[Boolean], smtpPeriodstarttls: Option[Boolean], debugPeriodemail: Option[Boolean]) =>
          da.Configmgr_comDayCqMailerDefaultMailService(post, apply, delete, action, Dollarlocation, propertylist, smtpPeriodhost, smtpPeriodport, smtpPerioduser, smtpPeriodpassword, fromPeriodaddress, smtpPeriodssl, smtpPeriodstarttls, debugPeriodemail) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqMailerImplCqMailingServiceInfo
        */
        private def comDayCqMailerImplCqMailingService(da: DataAccessor): Endpoint[ComDayCqMailerImplCqMailingServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.mailer.impl.CqMailingService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("max.recipient.count")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], maxPeriodrecipientPeriodcount: Option[String]) =>
          da.Configmgr_comDayCqMailerImplCqMailingService(post, apply, delete, action, Dollarlocation, propertylist, maxPeriodrecipientPeriodcount) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo
        */
        private def comDayCqMailerImplEmailCqEmailTemplateFactory(da: DataAccessor): Endpoint[ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.mailer.impl.email.CqEmailTemplateFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("mailer.email.charset")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], mailerPeriodemailPeriodcharset: Option[String]) =>
          da.Configmgr_comDayCqMailerImplEmailCqEmailTemplateFactory(post, apply, delete, action, Dollarlocation, propertylist, mailerPeriodemailPeriodcharset) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo
        */
        private def comDayCqMailerImplEmailCqRetrieverTemplateFactory(da: DataAccessor): Endpoint[ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("mailer.email.embed").map(_.map(_.toBoolean)) :: paramOption("mailer.email.charset") :: paramOption("mailer.email.retrieverUserID") :: paramOption("mailer.email.retrieverUserPWD")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], mailerPeriodemailPeriodembed: Option[Boolean], mailerPeriodemailPeriodcharset: Option[String], mailerPeriodemailPeriodretrieverUserID: Option[String], mailerPeriodemailPeriodretrieverUserPWD: Option[String]) =>
          da.Configmgr_comDayCqMailerImplEmailCqRetrieverTemplateFactory(post, apply, delete, action, Dollarlocation, propertylist, mailerPeriodemailPeriodembed, mailerPeriodemailPeriodcharset, mailerPeriodemailPeriodretrieverUserID, mailerPeriodemailPeriodretrieverUserPWD) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqMcmCampaignImplIntegrationConfigImplInfo
        */
        private def comDayCqMcmCampaignImplIntegrationConfigImpl(da: DataAccessor): Endpoint[ComDayCqMcmCampaignImplIntegrationConfigImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.mcm.campaign.impl.IntegrationConfigImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("aem.mcm.campaign.formConstraints") :: paramOption("aem.mcm.campaign.publicUrl") :: paramOption("aem.mcm.campaign.relaxedSSL").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], aemPeriodmcmPeriodcampaignPeriodformConstraints: Seq[String], aemPeriodmcmPeriodcampaignPeriodpublicUrl: Option[String], aemPeriodmcmPeriodcampaignPeriodrelaxedSSL: Option[Boolean]) =>
          da.Configmgr_comDayCqMcmCampaignImplIntegrationConfigImpl(post, apply, delete, action, Dollarlocation, propertylist, aemPeriodmcmPeriodcampaignPeriodformConstraints, aemPeriodmcmPeriodcampaignPeriodpublicUrl, aemPeriodmcmPeriodcampaignPeriodrelaxedSSL) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo
        */
        private def comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(da: DataAccessor): Endpoint[ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String]) =>
          da.Configmgr_comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo
        */
        private def comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(da: DataAccessor): Endpoint[ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("from.address") :: paramOption("sender.host") :: paramOption("max.bounce.count")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], fromPeriodaddress: Option[String], senderPeriodhost: Option[String], maxPeriodbouncePeriodcount: Option[String]) =>
          da.Configmgr_comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, fromPeriodaddress, senderPeriodhost, maxPeriodbouncePeriodcount) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqMcmImplMCMConfigurationInfo
        */
        private def comDayCqMcmImplMCMConfiguration(da: DataAccessor): Endpoint[ComDayCqMcmImplMCMConfigurationInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.mcm.impl.MCMConfiguration" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("experience.indirection") :: params("touchpoint.indirection")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], experiencePeriodindirection: Seq[String], touchpointPeriodindirection: Seq[String]) =>
          da.Configmgr_comDayCqMcmImplMCMConfiguration(post, apply, delete, action, Dollarlocation, propertylist, experiencePeriodindirection, touchpointPeriodindirection) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo
        */
        private def comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(da: DataAccessor): Endpoint[ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern") :: paramOption("component.resourceType")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String], componentPeriodresourceType: Option[String]) =>
          da.Configmgr_comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, componentPeriodresourceType) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo
        */
        private def comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(da: DataAccessor): Endpoint[ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern") :: paramOption("component.resourceType")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String], componentPeriodresourceType: Option[String]) =>
          da.Configmgr_comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, componentPeriodresourceType) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo
        */
        private def comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(da: DataAccessor): Endpoint[ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String]) =>
          da.Configmgr_comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo
        */
        private def comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(da: DataAccessor): Endpoint[ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String]) =>
          da.Configmgr_comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo
        */
        private def comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(da: DataAccessor): Endpoint[ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern") :: paramOption("component.resourceType")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String], componentPeriodresourceType: Option[String]) =>
          da.Configmgr_comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, componentPeriodresourceType) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqNotificationImplNotificationServiceImplInfo
        */
        private def comDayCqNotificationImplNotificationServiceImpl(da: DataAccessor): Endpoint[ComDayCqNotificationImplNotificationServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.notification.impl.NotificationServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("event.filter")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], eventPeriodfilter: Option[String]) =>
          da.Configmgr_comDayCqNotificationImplNotificationServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodfilter) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo
        */
        private def comDayCqPersonalizationImplServletsTargetingConfigurationServlet(da: DataAccessor): Endpoint[ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("forcelocation").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], forcelocation: Option[Boolean]) =>
          da.Configmgr_comDayCqPersonalizationImplServletsTargetingConfigurationServlet(post, apply, delete, action, Dollarlocation, propertylist, forcelocation) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqPollingImporterImplManagedPollConfigImplInfo
        */
        private def comDayCqPollingImporterImplManagedPollConfigImpl(da: DataAccessor): Endpoint[ComDayCqPollingImporterImplManagedPollConfigImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.polling.importer.impl.ManagedPollConfigImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("id") :: paramOption("enabled").map(_.map(_.toBoolean)) :: paramOption("reference").map(_.map(_.toBoolean)) :: paramOption("interval").map(_.map(_.toInt)) :: paramOption("expression") :: paramOption("source") :: paramOption("target") :: paramOption("login") :: paramOption("password")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], id: Option[String], enabled: Option[Boolean], reference: Option[Boolean], interval: Option[Int], expression: Option[String], source: Option[String], target: Option[String], login: Option[String], password: Option[String]) =>
          da.Configmgr_comDayCqPollingImporterImplManagedPollConfigImpl(post, apply, delete, action, Dollarlocation, propertylist, id, enabled, reference, interval, expression, source, target, login, password) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqPollingImporterImplManagedPollingImporterImplInfo
        */
        private def comDayCqPollingImporterImplManagedPollingImporterImpl(da: DataAccessor): Endpoint[ComDayCqPollingImporterImplManagedPollingImporterImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.polling.importer.impl.ManagedPollingImporterImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("importer.user")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], importerPerioduser: Option[String]) =>
          da.Configmgr_comDayCqPollingImporterImplManagedPollingImporterImpl(post, apply, delete, action, Dollarlocation, propertylist, importerPerioduser) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqPollingImporterImplPollingImporterImplInfo
        */
        private def comDayCqPollingImporterImplPollingImporterImpl(da: DataAccessor): Endpoint[ComDayCqPollingImporterImplPollingImporterImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.polling.importer.impl.PollingImporterImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("importer.min.interval").map(_.map(_.toInt)) :: paramOption("importer.user") :: params("exclude.paths") :: params("include.paths")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], importerPeriodminPeriodinterval: Option[Int], importerPerioduser: Option[String], excludePeriodpaths: Seq[String], includePeriodpaths: Seq[String]) =>
          da.Configmgr_comDayCqPollingImporterImplPollingImporterImpl(post, apply, delete, action, Dollarlocation, propertylist, importerPeriodminPeriodinterval, importerPerioduser, excludePeriodpaths, includePeriodpaths) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqReplicationAuditReplicationEventListenerInfo
        */
        private def comDayCqReplicationAuditReplicationEventListener(da: DataAccessor): Endpoint[ComDayCqReplicationAuditReplicationEventListenerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.replication.audit.ReplicationEventListener" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int]) =>
          da.Configmgr_comDayCqReplicationAuditReplicationEventListener(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqReplicationContentStaticContentBuilderInfo
        */
        private def comDayCqReplicationContentStaticContentBuilder(da: DataAccessor): Endpoint[ComDayCqReplicationContentStaticContentBuilderInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.replication.content.StaticContentBuilder" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("host") :: paramOption("port").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], host: Option[String], port: Option[Int]) =>
          da.Configmgr_comDayCqReplicationContentStaticContentBuilder(post, apply, delete, action, Dollarlocation, propertylist, host, port) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqReplicationImplAgentManagerImplInfo
        */
        private def comDayCqReplicationImplAgentManagerImpl(da: DataAccessor): Endpoint[ComDayCqReplicationImplAgentManagerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.replication.impl.AgentManagerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("job.topics") :: paramOption("serviceUser.target") :: paramOption("agentProvider.target")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], jobPeriodtopics: Option[String], serviceUserPeriodtarget: Option[String], agentProviderPeriodtarget: Option[String]) =>
          da.Configmgr_comDayCqReplicationImplAgentManagerImpl(post, apply, delete, action, Dollarlocation, propertylist, jobPeriodtopics, serviceUserPeriodtarget, agentProviderPeriodtarget) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo
        */
        private def comDayCqReplicationImplContentDurboBinaryLessContentBuilder(da: DataAccessor): Endpoint[ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("binary.threshold").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], binaryPeriodthreshold: Option[Int]) =>
          da.Configmgr_comDayCqReplicationImplContentDurboBinaryLessContentBuilder(post, apply, delete, action, Dollarlocation, propertylist, binaryPeriodthreshold) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo
        */
        private def comDayCqReplicationImplContentDurboDurboImportConfigurationProv(da: DataAccessor): Endpoint[ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("preserve.hierarchy.nodes").map(_.map(_.toBoolean)) :: paramOption("ignore.versioning").map(_.map(_.toBoolean)) :: paramOption("import.acl").map(_.map(_.toBoolean)) :: paramOption("save.threshold").map(_.map(_.toInt)) :: paramOption("preserve.user.paths").map(_.map(_.toBoolean)) :: paramOption("preserve.uuid").map(_.map(_.toBoolean)) :: params("preserve.uuid.nodetypes") :: params("preserve.uuid.subtrees") :: paramOption("auto.commit").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], preservePeriodhierarchyPeriodnodes: Option[Boolean], ignorePeriodversioning: Option[Boolean], importPeriodacl: Option[Boolean], savePeriodthreshold: Option[Int], preservePerioduserPeriodpaths: Option[Boolean], preservePerioduuid: Option[Boolean], preservePerioduuidPeriodnodetypes: Seq[String], preservePerioduuidPeriodsubtrees: Seq[String], autoPeriodcommit: Option[Boolean]) =>
          da.Configmgr_comDayCqReplicationImplContentDurboDurboImportConfigurationProv(post, apply, delete, action, Dollarlocation, propertylist, preservePeriodhierarchyPeriodnodes, ignorePeriodversioning, importPeriodacl, savePeriodthreshold, preservePerioduserPeriodpaths, preservePerioduuid, preservePerioduuidPeriodnodetypes, preservePerioduuidPeriodsubtrees, autoPeriodcommit) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo
        */
        private def comDayCqReplicationImplReplicationContentFactoryProviderImpl(da: DataAccessor): Endpoint[ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("replication.content.useFileStorage").map(_.map(_.toBoolean)) :: paramOption("replication.content.maxCommitAttempts").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], replicationPeriodcontentPerioduseFileStorage: Option[Boolean], replicationPeriodcontentPeriodmaxCommitAttempts: Option[Int]) =>
          da.Configmgr_comDayCqReplicationImplReplicationContentFactoryProviderImpl(post, apply, delete, action, Dollarlocation, propertylist, replicationPeriodcontentPerioduseFileStorage, replicationPeriodcontentPeriodmaxCommitAttempts) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqReplicationImplReplicationReceiverImplInfo
        */
        private def comDayCqReplicationImplReplicationReceiverImpl(da: DataAccessor): Endpoint[ComDayCqReplicationImplReplicationReceiverImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.replication.impl.ReplicationReceiverImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("receiver.tmpfile.threshold").map(_.map(_.toInt)) :: paramOption("receiver.packages.use.install").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], receiverPeriodtmpfilePeriodthreshold: Option[Int], receiverPeriodpackagesPeriodusePeriodinstall: Option[Boolean]) =>
          da.Configmgr_comDayCqReplicationImplReplicationReceiverImpl(post, apply, delete, action, Dollarlocation, propertylist, receiverPeriodtmpfilePeriodthreshold, receiverPeriodpackagesPeriodusePeriodinstall) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqReplicationImplReplicatorImplInfo
        */
        private def comDayCqReplicationImplReplicatorImpl(da: DataAccessor): Endpoint[ComDayCqReplicationImplReplicatorImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.replication.impl.ReplicatorImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("distribute_events").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], distributeEvents: Option[Boolean]) =>
          da.Configmgr_comDayCqReplicationImplReplicatorImpl(post, apply, delete, action, Dollarlocation, propertylist, distributeEvents) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqReplicationImplReverseReplicatorInfo
        */
        private def comDayCqReplicationImplReverseReplicator(da: DataAccessor): Endpoint[ComDayCqReplicationImplReverseReplicatorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.replication.impl.ReverseReplicator" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("scheduler.period").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], schedulerPeriodperiod: Option[Int]) =>
          da.Configmgr_comDayCqReplicationImplReverseReplicator(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodperiod) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo
        */
        private def comDayCqReplicationImplTransportBinaryLessTransportHandler(da: DataAccessor): Endpoint[ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.replication.impl.transport.BinaryLessTransportHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("disabled.cipher.suites") :: params("enabled.cipher.suites")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], disabledPeriodcipherPeriodsuites: Seq[String], enabledPeriodcipherPeriodsuites: Seq[String]) =>
          da.Configmgr_comDayCqReplicationImplTransportBinaryLessTransportHandler(post, apply, delete, action, Dollarlocation, propertylist, disabledPeriodcipherPeriodsuites, enabledPeriodcipherPeriodsuites) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqReplicationImplTransportHttpInfo
        */
        private def comDayCqReplicationImplTransportHttp(da: DataAccessor): Endpoint[ComDayCqReplicationImplTransportHttpInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.replication.impl.transport.Http" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("disabled.cipher.suites") :: params("enabled.cipher.suites")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], disabledPeriodcipherPeriodsuites: Seq[String], enabledPeriodcipherPeriodsuites: Seq[String]) =>
          da.Configmgr_comDayCqReplicationImplTransportHttp(post, apply, delete, action, Dollarlocation, propertylist, disabledPeriodcipherPeriodsuites, enabledPeriodcipherPeriodsuites) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqReportingImplCacheCacheImplInfo
        */
        private def comDayCqReportingImplCacheCacheImpl(da: DataAccessor): Endpoint[ComDayCqReportingImplCacheCacheImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.reporting.impl.cache.CacheImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("repcache.enable").map(_.map(_.toBoolean)) :: paramOption("repcache.ttl").map(_.map(_.toInt)) :: paramOption("repcache.max").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], repcachePeriodenable: Option[Boolean], repcachePeriodttl: Option[Int], repcachePeriodmax: Option[Int]) =>
          da.Configmgr_comDayCqReportingImplCacheCacheImpl(post, apply, delete, action, Dollarlocation, propertylist, repcachePeriodenable, repcachePeriodttl, repcachePeriodmax) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqReportingImplConfigServiceImplInfo
        */
        private def comDayCqReportingImplConfigServiceImpl(da: DataAccessor): Endpoint[ComDayCqReportingImplConfigServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.reporting.impl.ConfigServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("repconf.timezone") :: paramOption("repconf.locale") :: paramOption("repconf.snapshots") :: paramOption("repconf.repdir") :: paramOption("repconf.hourofday").map(_.map(_.toInt)) :: paramOption("repconf.minofhour").map(_.map(_.toInt)) :: paramOption("repconf.maxrows").map(_.map(_.toInt)) :: paramOption("repconf.fakedata").map(_.map(_.toBoolean)) :: paramOption("repconf.snapshotuser") :: paramOption("repconf.enforcesnapshotuser").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], repconfPeriodtimezone: Option[String], repconfPeriodlocale: Option[String], repconfPeriodsnapshots: Option[String], repconfPeriodrepdir: Option[String], repconfPeriodhourofday: Option[Int], repconfPeriodminofhour: Option[Int], repconfPeriodmaxrows: Option[Int], repconfPeriodfakedata: Option[Boolean], repconfPeriodsnapshotuser: Option[String], repconfPeriodenforcesnapshotuser: Option[Boolean]) =>
          da.Configmgr_comDayCqReportingImplConfigServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, repconfPeriodtimezone, repconfPeriodlocale, repconfPeriodsnapshots, repconfPeriodrepdir, repconfPeriodhourofday, repconfPeriodminofhour, repconfPeriodmaxrows, repconfPeriodfakedata, repconfPeriodsnapshotuser, repconfPeriodenforcesnapshotuser) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqReportingImplRLogAnalyzerInfo
        */
        private def comDayCqReportingImplRLogAnalyzer(da: DataAccessor): Endpoint[ComDayCqReportingImplRLogAnalyzerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.reporting.impl.RLogAnalyzer" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("request.log.output")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], requestPeriodlogPeriodoutput: Option[String]) =>
          da.Configmgr_comDayCqReportingImplRLogAnalyzer(post, apply, delete, action, Dollarlocation, propertylist, requestPeriodlogPeriodoutput) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo
        */
        private def comDayCqRewriterLinkcheckerImplLinkCheckerImpl(da: DataAccessor): Endpoint[ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("scheduler.period").map(_.map(_.toInt)) :: paramOption("scheduler.concurrent").map(_.map(_.toBoolean)) :: paramOption("service.bad_link_tolerance_interval").map(_.map(_.toInt)) :: params("service.check_override_patterns") :: paramOption("service.cache_broken_internal_links").map(_.map(_.toBoolean)) :: params("service.special_link_prefix") :: params("service.special_link_patterns")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], schedulerPeriodperiod: Option[Int], schedulerPeriodconcurrent: Option[Boolean], servicePeriodbadLinkToleranceInterval: Option[Int], servicePeriodcheckOverridePatterns: Seq[String], servicePeriodcacheBrokenInternalLinks: Option[Boolean], servicePeriodspecialLinkPrefix: Seq[String], servicePeriodspecialLinkPatterns: Seq[String]) =>
          da.Configmgr_comDayCqRewriterLinkcheckerImplLinkCheckerImpl(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodperiod, schedulerPeriodconcurrent, servicePeriodbadLinkToleranceInterval, servicePeriodcheckOverridePatterns, servicePeriodcacheBrokenInternalLinks, servicePeriodspecialLinkPrefix, servicePeriodspecialLinkPatterns) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo
        */
        private def comDayCqRewriterLinkcheckerImplLinkCheckerTask(da: DataAccessor): Endpoint[ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("scheduler.period").map(_.map(_.toInt)) :: paramOption("scheduler.concurrent").map(_.map(_.toBoolean)) :: paramOption("good_link_test_interval").map(_.map(_.toInt)) :: paramOption("bad_link_test_interval").map(_.map(_.toInt)) :: paramOption("link_unused_interval").map(_.map(_.toInt)) :: paramOption("connection.timeout").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], schedulerPeriodperiod: Option[Int], schedulerPeriodconcurrent: Option[Boolean], goodLinkTestInterval: Option[Int], badLinkTestInterval: Option[Int], linkUnusedInterval: Option[Int], connectionPeriodtimeout: Option[Int]) =>
          da.Configmgr_comDayCqRewriterLinkcheckerImplLinkCheckerTask(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodperiod, schedulerPeriodconcurrent, goodLinkTestInterval, badLinkTestInterval, linkUnusedInterval, connectionPeriodtimeout) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo
        */
        private def comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(da: DataAccessor): Endpoint[ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("linkcheckertransformer.disableRewriting").map(_.map(_.toBoolean)) :: paramOption("linkcheckertransformer.disableChecking").map(_.map(_.toBoolean)) :: paramOption("linkcheckertransformer.mapCacheSize").map(_.map(_.toInt)) :: paramOption("linkcheckertransformer.strictExtensionCheck").map(_.map(_.toBoolean)) :: paramOption("linkcheckertransformer.stripHtmltExtension").map(_.map(_.toBoolean)) :: params("linkcheckertransformer.rewriteElements") :: params("linkcheckertransformer.stripExtensionPathBlacklist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], linkcheckertransformerPerioddisableRewriting: Option[Boolean], linkcheckertransformerPerioddisableChecking: Option[Boolean], linkcheckertransformerPeriodmapCacheSize: Option[Int], linkcheckertransformerPeriodstrictExtensionCheck: Option[Boolean], linkcheckertransformerPeriodstripHtmltExtension: Option[Boolean], linkcheckertransformerPeriodrewriteElements: Seq[String], linkcheckertransformerPeriodstripExtensionPathBlacklist: Seq[String]) =>
          da.Configmgr_comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(post, apply, delete, action, Dollarlocation, propertylist, linkcheckertransformerPerioddisableRewriting, linkcheckertransformerPerioddisableChecking, linkcheckertransformerPeriodmapCacheSize, linkcheckertransformerPeriodstrictExtensionCheck, linkcheckertransformerPeriodstripHtmltExtension, linkcheckertransformerPeriodrewriteElements, linkcheckertransformerPeriodstripExtensionPathBlacklist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo
        */
        private def comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(da: DataAccessor): Endpoint[ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.max_links_per_host").map(_.map(_.toInt)) :: paramOption("service.save_external_link_references").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodmaxLinksPerHost: Option[Int], servicePeriodsaveExternalLinkReferences: Option[Boolean]) =>
          da.Configmgr_comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodmaxLinksPerHost, servicePeriodsaveExternalLinkReferences) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqRewriterProcessorImplHtmlParserFactoryInfo
        */
        private def comDayCqRewriterProcessorImplHtmlParserFactory(da: DataAccessor): Endpoint[ComDayCqRewriterProcessorImplHtmlParserFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.rewriter.processor.impl.HtmlParserFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("htmlparser.processTags") :: paramOption("htmlparser.preserveCamelCase").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], htmlparserPeriodprocessTags: Seq[String], htmlparserPeriodpreserveCamelCase: Option[Boolean]) =>
          da.Configmgr_comDayCqRewriterProcessorImplHtmlParserFactory(post, apply, delete, action, Dollarlocation, propertylist, htmlparserPeriodprocessTags, htmlparserPeriodpreserveCamelCase) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqSearchImplBuilderQueryBuilderImplInfo
        */
        private def comDayCqSearchImplBuilderQueryBuilderImpl(da: DataAccessor): Endpoint[ComDayCqSearchImplBuilderQueryBuilderImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.search.impl.builder.QueryBuilderImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("excerpt.properties") :: paramOption("cache.max.entries").map(_.map(_.toInt)) :: paramOption("cache.entry.lifetime").map(_.map(_.toInt)) :: paramOption("xpath.union").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], excerptPeriodproperties: Seq[String], cachePeriodmaxPeriodentries: Option[Int], cachePeriodentryPeriodlifetime: Option[Int], xpathPeriodunion: Option[Boolean]) =>
          da.Configmgr_comDayCqSearchImplBuilderQueryBuilderImpl(post, apply, delete, action, Dollarlocation, propertylist, excerptPeriodproperties, cachePeriodmaxPeriodentries, cachePeriodentryPeriodlifetime, xpathPeriodunion) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo
        */
        private def comDayCqSearchSuggestImplSuggestionIndexManagerImpl(da: DataAccessor): Endpoint[ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("pathBuilder.target") :: paramOption("suggest.basepath")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], pathBuilderPeriodtarget: Option[String], suggestPeriodbasepath: Option[String]) =>
          da.Configmgr_comDayCqSearchSuggestImplSuggestionIndexManagerImpl(post, apply, delete, action, Dollarlocation, propertylist, pathBuilderPeriodtarget, suggestPeriodbasepath) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo
        */
        private def comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(da: DataAccessor): Endpoint[ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.searchpromote.confighandler.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodsearchpromotePeriodconfighandlerPeriodenabled: Option[Boolean]) =>
          da.Configmgr_comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodsearchpromotePeriodconfighandlerPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo
        */
        private def comDayCqSearchpromoteImplSearchPromoteServiceImpl(da: DataAccessor): Endpoint[ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.searchpromote.impl.SearchPromoteServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.searchpromote.configuration.server.uri") :: paramOption("cq.searchpromote.configuration.environment") :: paramOption("connection.timeout").map(_.map(_.toInt)) :: paramOption("socket.timeout").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodsearchpromotePeriodconfigurationPeriodserverPerioduri: Option[String], cqPeriodsearchpromotePeriodconfigurationPeriodenvironment: Option[String], connectionPeriodtimeout: Option[Int], socketPeriodtimeout: Option[Int]) =>
          da.Configmgr_comDayCqSearchpromoteImplSearchPromoteServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodsearchpromotePeriodconfigurationPeriodserverPerioduri, cqPeriodsearchpromotePeriodconfigurationPeriodenvironment, connectionPeriodtimeout, socketPeriodtimeout) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqSecurityACLSetupInfo
        */
        private def comDayCqSecurityACLSetup(da: DataAccessor): Endpoint[ComDayCqSecurityACLSetupInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.security.ACLSetup" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.aclsetup.rules")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodaclsetupPeriodrules: Seq[String]) =>
          da.Configmgr_comDayCqSecurityACLSetup(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodaclsetupPeriodrules) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqStatisticsImplStatisticsServiceImplInfo
        */
        private def comDayCqStatisticsImplStatisticsServiceImpl(da: DataAccessor): Endpoint[ComDayCqStatisticsImplStatisticsServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.statistics.impl.StatisticsServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("scheduler.period").map(_.map(_.toInt)) :: paramOption("scheduler.concurrent").map(_.map(_.toBoolean)) :: paramOption("path") :: paramOption("workspace") :: paramOption("keywordsPath") :: paramOption("asyncEntries").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], schedulerPeriodperiod: Option[Int], schedulerPeriodconcurrent: Option[Boolean], path: Option[String], workspace: Option[String], keywordsPath: Option[String], asyncEntries: Option[Boolean]) =>
          da.Configmgr_comDayCqStatisticsImplStatisticsServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodperiod, schedulerPeriodconcurrent, path, workspace, keywordsPath, asyncEntries) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqTaggingImplJcrTagManagerFactoryImplInfo
        */
        private def comDayCqTaggingImplJcrTagManagerFactoryImpl(da: DataAccessor): Endpoint[ComDayCqTaggingImplJcrTagManagerFactoryImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.tagging.impl.JcrTagManagerFactoryImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("validation.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], validationPeriodenabled: Option[Boolean]) =>
          da.Configmgr_comDayCqTaggingImplJcrTagManagerFactoryImpl(post, apply, delete, action, Dollarlocation, propertylist, validationPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo
        */
        private def comDayCqTaggingImplSearchTagPredicateEvaluator(da: DataAccessor): Endpoint[ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.tagging.impl.search.TagPredicateEvaluator" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("ignore_path").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], ignorePath: Option[Boolean]) =>
          da.Configmgr_comDayCqTaggingImplSearchTagPredicateEvaluator(post, apply, delete, action, Dollarlocation, propertylist, ignorePath) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqTaggingImplTagGarbageCollectorInfo
        */
        private def comDayCqTaggingImplTagGarbageCollector(da: DataAccessor): Endpoint[ComDayCqTaggingImplTagGarbageCollectorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.tagging.impl.TagGarbageCollector" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("scheduler.expression")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], schedulerPeriodexpression: Option[String]) =>
          da.Configmgr_comDayCqTaggingImplTagGarbageCollector(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo
        */
        private def comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(da: DataAccessor): Endpoint[ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.pagesupdatehandler.imageresourcetypes")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodpagesupdatehandlerPeriodimageresourcetypes: Seq[String]) =>
          da.Configmgr_comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodpagesupdatehandlerPeriodimageresourcetypes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo
        */
        private def comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(da: DataAccessor): Endpoint[ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.contentsync.pathrewritertransformer.mapping.links") :: params("cq.contentsync.pathrewritertransformer.mapping.clientlibs") :: params("cq.contentsync.pathrewritertransformer.mapping.images") :: paramOption("cq.contentsync.pathrewritertransformer.attribute.pattern") :: paramOption("cq.contentsync.pathrewritertransformer.clientlibrary.pattern") :: paramOption("cq.contentsync.pathrewritertransformer.clientlibrary.replace")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodlinks: Seq[String], cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodclientlibs: Seq[String], cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodimages: Seq[String], cqPeriodcontentsyncPeriodpathrewritertransformerPeriodattributePeriodpattern: Option[String], cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodpattern: Option[String], cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodreplace: Option[String]) =>
          da.Configmgr_comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodlinks, cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodclientlibs, cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodimages, cqPeriodcontentsyncPeriodpathrewritertransformerPeriodattributePeriodpattern, cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodpattern, cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodreplace) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo
        */
        private def comDayCqWcmCoreImplAuthoringUIModeServiceImpl(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("authoringUIModeService.default")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], authoringUIModeServicePerioddefault: Option[String]) =>
          da.Configmgr_comDayCqWcmCoreImplAuthoringUIModeServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, authoringUIModeServicePerioddefault) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplCommandsWCMCommandServletInfo
        */
        private def comDayCqWcmCoreImplCommandsWCMCommandServlet(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplCommandsWCMCommandServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.commands.WCMCommandServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("wcmcommandservlet.delete_whitelist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], wcmcommandservletPerioddeleteWhitelist: Seq[String]) =>
          da.Configmgr_comDayCqWcmCoreImplCommandsWCMCommandServlet(post, apply, delete, action, Dollarlocation, propertylist, wcmcommandservletPerioddeleteWhitelist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo
        */
        private def comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("dim.default.mode") :: paramOption("dim.appcache.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], dimPerioddefaultPeriodmode: Option[String], dimPeriodappcachePeriodenabled: Option[Boolean]) =>
          da.Configmgr_comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(post, apply, delete, action, Dollarlocation, propertylist, dimPerioddefaultPeriodmode, dimPeriodappcachePeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplEventPageEventAuditListenerInfo
        */
        private def comDayCqWcmCoreImplEventPageEventAuditListener(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplEventPageEventAuditListenerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.event.PageEventAuditListener" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("configured")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], configured: Option[String]) =>
          da.Configmgr_comDayCqWcmCoreImplEventPageEventAuditListener(post, apply, delete, action, Dollarlocation, propertylist, configured) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplEventPagePostProcessorInfo
        */
        private def comDayCqWcmCoreImplEventPagePostProcessor(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplEventPagePostProcessorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.event.PagePostProcessor" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("paths")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], paths: Seq[String]) =>
          da.Configmgr_comDayCqWcmCoreImplEventPagePostProcessor(post, apply, delete, action, Dollarlocation, propertylist, paths) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo
        */
        private def comDayCqWcmCoreImplEventRepositoryChangeEventListener(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("paths") :: params("excludedPaths")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], paths: Seq[String], excludedPaths: Seq[String]) =>
          da.Configmgr_comDayCqWcmCoreImplEventRepositoryChangeEventListener(post, apply, delete, action, Dollarlocation, propertylist, paths, excludedPaths) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplEventTemplatePostProcessorInfo
        */
        private def comDayCqWcmCoreImplEventTemplatePostProcessor(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplEventTemplatePostProcessorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.event.TemplatePostProcessor" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("paths")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], paths: Option[String]) =>
          da.Configmgr_comDayCqWcmCoreImplEventTemplatePostProcessor(post, apply, delete, action, Dollarlocation, propertylist, paths) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplLanguageManagerImplInfo
        */
        private def comDayCqWcmCoreImplLanguageManagerImpl(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplLanguageManagerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.LanguageManagerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("langmgr.list.path") :: params("langmgr.country.default")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], langmgrPeriodlistPeriodpath: Option[String], langmgrPeriodcountryPerioddefault: Seq[String]) =>
          da.Configmgr_comDayCqWcmCoreImplLanguageManagerImpl(post, apply, delete, action, Dollarlocation, propertylist, langmgrPeriodlistPeriodpath, langmgrPeriodcountryPerioddefault) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo
        */
        private def comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("link.expired.prefix") :: paramOption("link.expired.remove").map(_.map(_.toBoolean)) :: paramOption("link.expired.suffix") :: paramOption("link.invalid.prefix") :: paramOption("link.invalid.remove").map(_.map(_.toBoolean)) :: paramOption("link.invalid.suffix") :: paramOption("link.predated.prefix") :: paramOption("link.predated.remove").map(_.map(_.toBoolean)) :: paramOption("link.predated.suffix") :: params("link.wcmmodes")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], linkPeriodexpiredPeriodprefix: Option[String], linkPeriodexpiredPeriodremove: Option[Boolean], linkPeriodexpiredPeriodsuffix: Option[String], linkPeriodinvalidPeriodprefix: Option[String], linkPeriodinvalidPeriodremove: Option[Boolean], linkPeriodinvalidPeriodsuffix: Option[String], linkPeriodpredatedPeriodprefix: Option[String], linkPeriodpredatedPeriodremove: Option[Boolean], linkPeriodpredatedPeriodsuffix: Option[String], linkPeriodwcmmodes: Seq[String]) =>
          da.Configmgr_comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(post, apply, delete, action, Dollarlocation, propertylist, linkPeriodexpiredPeriodprefix, linkPeriodexpiredPeriodremove, linkPeriodexpiredPeriodsuffix, linkPeriodinvalidPeriodprefix, linkPeriodinvalidPeriodremove, linkPeriodinvalidPeriodsuffix, linkPeriodpredatedPeriodprefix, linkPeriodpredatedPeriodremove, linkPeriodpredatedPeriodsuffix, linkPeriodwcmmodes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo
        */
        private def comDayCqWcmCoreImplPagePageInfoAggregatorImpl(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("page.info.provider.property.regex.default") :: paramOption("page.info.provider.property.name")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], pagePeriodinfoPeriodproviderPeriodpropertyPeriodregexPerioddefault: Option[String], pagePeriodinfoPeriodproviderPeriodpropertyPeriodname: Option[String]) =>
          da.Configmgr_comDayCqWcmCoreImplPagePageInfoAggregatorImpl(post, apply, delete, action, Dollarlocation, propertylist, pagePeriodinfoPeriodproviderPeriodpropertyPeriodregexPerioddefault, pagePeriodinfoPeriodproviderPeriodpropertyPeriodname) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo
        */
        private def comDayCqWcmCoreImplPagePageManagerFactoryImpl(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("illegalCharMapping") :: paramOption("pageSubTreeActivationCheck").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], illegalCharMapping: Option[String], pageSubTreeActivationCheck: Option[Boolean]) =>
          da.Configmgr_comDayCqWcmCoreImplPagePageManagerFactoryImpl(post, apply, delete, action, Dollarlocation, propertylist, illegalCharMapping, pageSubTreeActivationCheck) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo
        */
        private def comDayCqWcmCoreImplReferencesContentContentReferenceConfig(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("contentReferenceConfig.resourceTypes")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], contentReferenceConfigPeriodresourceTypes: Seq[String]) =>
          da.Configmgr_comDayCqWcmCoreImplReferencesContentContentReferenceConfig(post, apply, delete, action, Dollarlocation, propertylist, contentReferenceConfigPeriodresourceTypes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo
        */
        private def comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("dam.showexpired").map(_.map(_.toBoolean)) :: paramOption("dam.showhidden").map(_.map(_.toBoolean)) :: paramOption("tagTitleSearch").map(_.map(_.toBoolean)) :: paramOption("guessTotal") :: paramOption("dam.expiryProperty")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], damPeriodshowexpired: Option[Boolean], damPeriodshowhidden: Option[Boolean], tagTitleSearch: Option[Boolean], guessTotal: Option[String], damPeriodexpiryProperty: Option[String]) =>
          da.Configmgr_comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(post, apply, delete, action, Dollarlocation, propertylist, damPeriodshowexpired, damPeriodshowhidden, tagTitleSearch, guessTotal, damPeriodexpiryProperty) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo
        */
        private def comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("item.resource.types")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], itemPeriodresourcePeriodtypes: Seq[String]) =>
          da.Configmgr_comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(post, apply, delete, action, Dollarlocation, propertylist, itemPeriodresourcePeriodtypes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo
        */
        private def comDayCqWcmCoreImplServletsContentfinderPageViewHandler(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("guessTotal") :: paramOption("tagTitleSearch").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], guessTotal: Option[String], tagTitleSearch: Option[Boolean]) =>
          da.Configmgr_comDayCqWcmCoreImplServletsContentfinderPageViewHandler(post, apply, delete, action, Dollarlocation, propertylist, guessTotal, tagTitleSearch) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplServletsFindReplaceServletInfo
        */
        private def comDayCqWcmCoreImplServletsFindReplaceServlet(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplServletsFindReplaceServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.servlets.FindReplaceServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("scope")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], scope: Seq[String]) =>
          da.Configmgr_comDayCqWcmCoreImplServletsFindReplaceServlet(post, apply, delete, action, Dollarlocation, propertylist, scope) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplServletsReferenceSearchServletInfo
        */
        private def comDayCqWcmCoreImplServletsReferenceSearchServlet(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplServletsReferenceSearchServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("referencesearchservlet.maxReferencesPerPage").map(_.map(_.toInt)) :: paramOption("referencesearchservlet.maxPages").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], referencesearchservletPeriodmaxReferencesPerPage: Option[Int], referencesearchservletPeriodmaxPages: Option[Int]) =>
          da.Configmgr_comDayCqWcmCoreImplServletsReferenceSearchServlet(post, apply, delete, action, Dollarlocation, propertylist, referencesearchservletPeriodmaxReferencesPerPage, referencesearchservletPeriodmaxPages) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplServletsThumbnailServletInfo
        */
        private def comDayCqWcmCoreImplServletsThumbnailServlet(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplServletsThumbnailServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.servlets.ThumbnailServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("workspace") :: params("dimensions")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], workspace: Option[String], dimensions: Seq[String]) =>
          da.Configmgr_comDayCqWcmCoreImplServletsThumbnailServlet(post, apply, delete, action, Dollarlocation, propertylist, workspace, dimensions) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo
        */
        private def comDayCqWcmCoreImplUtilsDefaultPageNameValidator(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("nonValidChars")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], nonValidChars: Option[String]) =>
          da.Configmgr_comDayCqWcmCoreImplUtilsDefaultPageNameValidator(post, apply, delete, action, Dollarlocation, propertylist, nonValidChars) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo
        */
        private def comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("default.externalizer.domain")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], defaultPeriodexternalizerPerioddomain: Option[String]) =>
          da.Configmgr_comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(post, apply, delete, action, Dollarlocation, propertylist, defaultPeriodexternalizerPerioddomain) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplVersionManagerImplInfo
        */
        private def comDayCqWcmCoreImplVersionManagerImpl(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplVersionManagerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.VersionManagerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("versionmanager.createVersionOnActivation").map(_.map(_.toBoolean)) :: paramOption("versionmanager.purgingEnabled").map(_.map(_.toBoolean)) :: params("versionmanager.purgePaths") :: params("versionmanager.ivPaths") :: paramOption("versionmanager.maxAgeDays").map(_.map(_.toInt)) :: paramOption("versionmanager.maxNumberVersions").map(_.map(_.toInt)) :: paramOption("versionmanager.minNumberVersions").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], versionmanagerPeriodcreateVersionOnActivation: Option[Boolean], versionmanagerPeriodpurgingEnabled: Option[Boolean], versionmanagerPeriodpurgePaths: Seq[String], versionmanagerPeriodivPaths: Seq[String], versionmanagerPeriodmaxAgeDays: Option[Int], versionmanagerPeriodmaxNumberVersions: Option[Int], versionmanagerPeriodminNumberVersions: Option[Int]) =>
          da.Configmgr_comDayCqWcmCoreImplVersionManagerImpl(post, apply, delete, action, Dollarlocation, propertylist, versionmanagerPeriodcreateVersionOnActivation, versionmanagerPeriodpurgingEnabled, versionmanagerPeriodpurgePaths, versionmanagerPeriodivPaths, versionmanagerPeriodmaxAgeDays, versionmanagerPeriodmaxNumberVersions, versionmanagerPeriodminNumberVersions) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplVersionPurgeTaskInfo
        */
        private def comDayCqWcmCoreImplVersionPurgeTask(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplVersionPurgeTaskInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.VersionPurgeTask" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("versionpurge.paths") :: paramOption("versionpurge.recursive").map(_.map(_.toBoolean)) :: paramOption("versionpurge.maxVersions").map(_.map(_.toInt)) :: paramOption("versionpurge.minVersions").map(_.map(_.toInt)) :: paramOption("versionpurge.maxAgeDays").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], versionpurgePeriodpaths: Seq[String], versionpurgePeriodrecursive: Option[Boolean], versionpurgePeriodmaxVersions: Option[Int], versionpurgePeriodminVersions: Option[Int], versionpurgePeriodmaxAgeDays: Option[Int]) =>
          da.Configmgr_comDayCqWcmCoreImplVersionPurgeTask(post, apply, delete, action, Dollarlocation, propertylist, versionpurgePeriodpaths, versionpurgePeriodrecursive, versionpurgePeriodmaxVersions, versionpurgePeriodminVersions, versionpurgePeriodmaxAgeDays) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplWCMDebugFilterInfo
        */
        private def comDayCqWcmCoreImplWCMDebugFilter(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplWCMDebugFilterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.WCMDebugFilter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("wcmdbgfilter.enabled").map(_.map(_.toBoolean)) :: paramOption("wcmdbgfilter.jspDebug").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], wcmdbgfilterPeriodenabled: Option[Boolean], wcmdbgfilterPeriodjspDebug: Option[Boolean]) =>
          da.Configmgr_comDayCqWcmCoreImplWCMDebugFilter(post, apply, delete, action, Dollarlocation, propertylist, wcmdbgfilterPeriodenabled, wcmdbgfilterPeriodjspDebug) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo
        */
        private def comDayCqWcmCoreImplWCMDeveloperModeFilter(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.WCMDeveloperModeFilter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("wcmdevmodefilter.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], wcmdevmodefilterPeriodenabled: Option[Boolean]) =>
          da.Configmgr_comDayCqWcmCoreImplWCMDeveloperModeFilter(post, apply, delete, action, Dollarlocation, propertylist, wcmdevmodefilterPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreImplWarpTimeWarpFilterInfo
        */
        private def comDayCqWcmCoreImplWarpTimeWarpFilter(da: DataAccessor): Endpoint[ComDayCqWcmCoreImplWarpTimeWarpFilterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.impl.warp.TimeWarpFilter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("filter.order") :: paramOption("filter.scope")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], filterPeriodorder: Option[String], filterPeriodscope: Option[String]) =>
          da.Configmgr_comDayCqWcmCoreImplWarpTimeWarpFilter(post, apply, delete, action, Dollarlocation, propertylist, filterPeriodorder, filterPeriodscope) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreMvtMVTStatisticsImplInfo
        */
        private def comDayCqWcmCoreMvtMVTStatisticsImpl(da: DataAccessor): Endpoint[ComDayCqWcmCoreMvtMVTStatisticsImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.mvt.MVTStatisticsImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("mvtstatistics.trackingurl")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], mvtstatisticsPeriodtrackingurl: Option[String]) =>
          da.Configmgr_comDayCqWcmCoreMvtMVTStatisticsImpl(post, apply, delete, action, Dollarlocation, propertylist, mvtstatisticsPeriodtrackingurl) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreStatsPageViewStatisticsImplInfo
        */
        private def comDayCqWcmCoreStatsPageViewStatisticsImpl(da: DataAccessor): Endpoint[ComDayCqWcmCoreStatsPageViewStatisticsImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.stats.PageViewStatisticsImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("pageviewstatistics.trackingurl") :: paramOption("pageviewstatistics.trackingscript.enabled")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], pageviewstatisticsPeriodtrackingurl: Option[String], pageviewstatisticsPeriodtrackingscriptPeriodenabled: Option[String]) =>
          da.Configmgr_comDayCqWcmCoreStatsPageViewStatisticsImpl(post, apply, delete, action, Dollarlocation, propertylist, pageviewstatisticsPeriodtrackingurl, pageviewstatisticsPeriodtrackingscriptPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmCoreWCMRequestFilterInfo
        */
        private def comDayCqWcmCoreWCMRequestFilter(da: DataAccessor): Endpoint[ComDayCqWcmCoreWCMRequestFilterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.core.WCMRequestFilter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("wcmfilter.mode")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], wcmfilterPeriodmode: Option[String]) =>
          da.Configmgr_comDayCqWcmCoreWCMRequestFilter(post, apply, delete, action, Dollarlocation, propertylist, wcmfilterPeriodmode) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterDesignPackageImporterInfo
        */
        private def comDayCqWcmDesignimporterDesignPackageImporter(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterDesignPackageImporterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.DesignPackageImporter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("extract.filter")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], extractPeriodfilter: Seq[String]) =>
          da.Configmgr_comDayCqWcmDesignimporterDesignPackageImporter(post, apply, delete, action, Dollarlocation, propertylist, extractPeriodfilter) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo
        */
        private def comDayCqWcmDesignimporterImplCanvasBuilderImpl(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("filepattern") :: paramOption("build.page.nodes").map(_.map(_.toBoolean)) :: paramOption("build.client.libs").map(_.map(_.toBoolean)) :: paramOption("build.canvas.component").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], filepattern: Option[String], buildPeriodpagePeriodnodes: Option[Boolean], buildPeriodclientPeriodlibs: Option[Boolean], buildPeriodcanvasPeriodcomponent: Option[Boolean]) =>
          da.Configmgr_comDayCqWcmDesignimporterImplCanvasBuilderImpl(post, apply, delete, action, Dollarlocation, propertylist, filepattern, buildPeriodpagePeriodnodes, buildPeriodclientPeriodlibs, buildPeriodcanvasPeriodcomponent) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo
        */
        private def comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("minThreadPoolSize").map(_.map(_.toInt)) :: paramOption("maxThreadPoolSize").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], minThreadPoolSize: Option[Int], maxThreadPoolSize: Option[Int]) =>
          da.Configmgr_comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(post, apply, delete, action, Dollarlocation, propertylist, minThreadPoolSize, maxThreadPoolSize) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo
        */
        private def comDayCqWcmDesignimporterImplEntryPreprocessorImpl(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("search.pattern") :: paramOption("replace.pattern")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], searchPeriodpattern: Option[String], replacePeriodpattern: Option[String]) =>
          da.Configmgr_comDayCqWcmDesignimporterImplEntryPreprocessorImpl(post, apply, delete, action, Dollarlocation, propertylist, searchPeriodpattern, replacePeriodpattern) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo
        */
        private def comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("filepattern") :: params("device.groups") :: paramOption("build.page.nodes").map(_.map(_.toBoolean)) :: paramOption("build.client.libs").map(_.map(_.toBoolean)) :: paramOption("build.canvas.component").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], filepattern: Option[String], devicePeriodgroups: Seq[String], buildPeriodpagePeriodnodes: Option[Boolean], buildPeriodclientPeriodlibs: Option[Boolean], buildPeriodcanvasPeriodcomponent: Option[Boolean]) =>
          da.Configmgr_comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(post, apply, delete, action, Dollarlocation, propertylist, filepattern, devicePeriodgroups, buildPeriodpagePeriodnodes, buildPeriodclientPeriodlibs, buildPeriodcanvasPeriodcomponent) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo
        */
        private def comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String]) =>
          da.Configmgr_comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo
        */
        private def comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String]) =>
          da.Configmgr_comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo
        */
        private def comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String]) =>
          da.Configmgr_comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo
        */
        private def comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String]) =>
          da.Configmgr_comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo
        */
        private def comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String]) =>
          da.Configmgr_comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo
        */
        private def comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern") :: paramOption("component.resourceType")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String], componentPeriodresourceType: Option[String]) =>
          da.Configmgr_comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, componentPeriodresourceType) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo
        */
        private def comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String]) =>
          da.Configmgr_comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo
        */
        private def comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String]) =>
          da.Configmgr_comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo
        */
        private def comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String]) =>
          da.Configmgr_comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo
        */
        private def comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String]) =>
          da.Configmgr_comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo
        */
        private def comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String]) =>
          da.Configmgr_comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo
        */
        private def comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern") :: paramOption("component.resourceType")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String], componentPeriodresourceType: Option[String]) =>
          da.Configmgr_comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, componentPeriodresourceType) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo
        */
        private def comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String]) =>
          da.Configmgr_comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo
        */
        private def comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String]) =>
          da.Configmgr_comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo
        */
        private def comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern") :: paramOption("component.resourceType")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String], componentPeriodresourceType: Option[String]) =>
          da.Configmgr_comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, componentPeriodresourceType) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo
        */
        private def comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern") :: paramOption("component.resourceType")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String], componentPeriodresourceType: Option[String]) =>
          da.Configmgr_comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern, componentPeriodresourceType) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo
        */
        private def comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(da: DataAccessor): Endpoint[ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("tagpattern")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], tagpattern: Option[String]) =>
          da.Configmgr_comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, tagpattern) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmFoundationFormsImplFormChooserServletInfo
        */
        private def comDayCqWcmFoundationFormsImplFormChooserServlet(da: DataAccessor): Endpoint[ComDayCqWcmFoundationFormsImplFormChooserServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.foundation.forms.impl.FormChooserServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.name") :: paramOption("sling.servlet.resourceTypes") :: paramOption("sling.servlet.selectors") :: params("sling.servlet.methods") :: paramOption("forms.formchooserservlet.advansesearch.require").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodname: Option[String], slingPeriodservletPeriodresourceTypes: Option[String], slingPeriodservletPeriodselectors: Option[String], slingPeriodservletPeriodmethods: Seq[String], formsPeriodformchooserservletPeriodadvansesearchPeriodrequire: Option[Boolean]) =>
          da.Configmgr_comDayCqWcmFoundationFormsImplFormChooserServlet(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodname, slingPeriodservletPeriodresourceTypes, slingPeriodservletPeriodselectors, slingPeriodservletPeriodmethods, formsPeriodformchooserservletPeriodadvansesearchPeriodrequire) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo
        */
        private def comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(da: DataAccessor): Endpoint[ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("forms.formparagraphpostprocessor.enabled").map(_.map(_.toBoolean)) :: params("forms.formparagraphpostprocessor.formresourcetypes")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], formsPeriodformparagraphpostprocessorPeriodenabled: Option[Boolean], formsPeriodformparagraphpostprocessorPeriodformresourcetypes: Seq[String]) =>
          da.Configmgr_comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(post, apply, delete, action, Dollarlocation, propertylist, formsPeriodformparagraphpostprocessorPeriodenabled, formsPeriodformparagraphpostprocessorPeriodformresourcetypes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo
        */
        private def comDayCqWcmFoundationFormsImplFormsHandlingServlet(da: DataAccessor): Endpoint[ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name.whitelist") :: paramOption("allow.expressions").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], namePeriodwhitelist: Option[String], allowPeriodexpressions: Option[Boolean]) =>
          da.Configmgr_comDayCqWcmFoundationFormsImplFormsHandlingServlet(post, apply, delete, action, Dollarlocation, propertylist, namePeriodwhitelist, allowPeriodexpressions) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmFoundationFormsImplMailServletInfo
        */
        private def comDayCqWcmFoundationFormsImplMailServlet(da: DataAccessor): Endpoint[ComDayCqWcmFoundationFormsImplMailServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.foundation.forms.impl.MailServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("sling.servlet.resourceTypes") :: paramOption("sling.servlet.selectors") :: params("resource.whitelist") :: paramOption("resource.blacklist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], slingPeriodservletPeriodresourceTypes: Option[String], slingPeriodservletPeriodselectors: Option[String], resourcePeriodwhitelist: Seq[String], resourcePeriodblacklist: Option[String]) =>
          da.Configmgr_comDayCqWcmFoundationFormsImplMailServlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodresourceTypes, slingPeriodservletPeriodselectors, resourcePeriodwhitelist, resourcePeriodblacklist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo
        */
        private def comDayCqWcmFoundationImplAdaptiveImageComponentServlet(da: DataAccessor): Endpoint[ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("adapt.supported.widths")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], adaptPeriodsupportedPeriodwidths: Seq[String]) =>
          da.Configmgr_comDayCqWcmFoundationImplAdaptiveImageComponentServlet(post, apply, delete, action, Dollarlocation, propertylist, adaptPeriodsupportedPeriodwidths) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmFoundationImplHTTPAuthHandlerInfo
        */
        private def comDayCqWcmFoundationImplHTTPAuthHandler(da: DataAccessor): Endpoint[ComDayCqWcmFoundationImplHTTPAuthHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.foundation.impl.HTTPAuthHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("path") :: paramOption("auth.http.nologin").map(_.map(_.toBoolean)) :: paramOption("auth.http.realm") :: paramOption("auth.default.loginpage") :: params("auth.cred.form") :: params("auth.cred.utf8")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], path: Option[String], authPeriodhttpPeriodnologin: Option[Boolean], authPeriodhttpPeriodrealm: Option[String], authPerioddefaultPeriodloginpage: Option[String], authPeriodcredPeriodform: Seq[String], authPeriodcredPeriodutf8: Seq[String]) =>
          da.Configmgr_comDayCqWcmFoundationImplHTTPAuthHandler(post, apply, delete, action, Dollarlocation, propertylist, path, authPeriodhttpPeriodnologin, authPeriodhttpPeriodrealm, authPerioddefaultPeriodloginpage, authPeriodcredPeriodform, authPeriodcredPeriodutf8) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmFoundationImplPageImpressionsTrackerInfo
        */
        private def comDayCqWcmFoundationImplPageImpressionsTracker(da: DataAccessor): Endpoint[ComDayCqWcmFoundationImplPageImpressionsTrackerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.foundation.impl.PageImpressionsTracker" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("sling.auth.requirements")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], slingPeriodauthPeriodrequirements: Option[String]) =>
          da.Configmgr_comDayCqWcmFoundationImplPageImpressionsTracker(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodauthPeriodrequirements) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmFoundationImplPageRedirectServletInfo
        */
        private def comDayCqWcmFoundationImplPageRedirectServlet(da: DataAccessor): Endpoint[ComDayCqWcmFoundationImplPageRedirectServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.foundation.impl.PageRedirectServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("excluded.resource.types")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], excludedPeriodresourcePeriodtypes: Seq[String]) =>
          da.Configmgr_comDayCqWcmFoundationImplPageRedirectServlet(post, apply, delete, action, Dollarlocation, propertylist, excludedPeriodresourcePeriodtypes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo
        */
        private def comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(da: DataAccessor): Endpoint[ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("default.attachment.type.blacklist") :: params("baseline.attachment.type.blacklist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], defaultPeriodattachmentPeriodtypePeriodblacklist: Seq[String], baselinePeriodattachmentPeriodtypePeriodblacklist: Seq[String]) =>
          da.Configmgr_comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(post, apply, delete, action, Dollarlocation, propertylist, defaultPeriodattachmentPeriodtypePeriodblacklist, baselinePeriodattachmentPeriodtypePeriodblacklist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo
        */
        private def comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(da: DataAccessor): Endpoint[ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("parameter.whitelist") :: params("parameter.whitelist.prefixes") :: params("binary.parameter.whitelist") :: params("modifier.whitelist") :: params("operation.whitelist") :: params("operation.whitelist.prefixes") :: params("typehint.whitelist") :: params("resourcetype.whitelist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], parameterPeriodwhitelist: Seq[String], parameterPeriodwhitelistPeriodprefixes: Seq[String], binaryPeriodparameterPeriodwhitelist: Seq[String], modifierPeriodwhitelist: Seq[String], operationPeriodwhitelist: Seq[String], operationPeriodwhitelistPeriodprefixes: Seq[String], typehintPeriodwhitelist: Seq[String], resourcetypePeriodwhitelist: Seq[String]) =>
          da.Configmgr_comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(post, apply, delete, action, Dollarlocation, propertylist, parameterPeriodwhitelist, parameterPeriodwhitelistPeriodprefixes, binaryPeriodparameterPeriodwhitelist, modifierPeriodwhitelist, operationPeriodwhitelist, operationPeriodwhitelistPeriodprefixes, typehintPeriodwhitelist, resourcetypePeriodwhitelist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo
        */
        private def comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(da: DataAccessor): Endpoint[ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("device.info.transformer.enabled").map(_.map(_.toBoolean)) :: paramOption("device.info.transformer.css.style")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], devicePeriodinfoPeriodtransformerPeriodenabled: Option[Boolean], devicePeriodinfoPeriodtransformerPeriodcssPeriodstyle: Option[String]) =>
          da.Configmgr_comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(post, apply, delete, action, Dollarlocation, propertylist, devicePeriodinfoPeriodtransformerPeriodenabled, devicePeriodinfoPeriodtransformerPeriodcssPeriodstyle) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo
        */
        private def comDayCqWcmMobileCoreImplRedirectRedirectFilter(da: DataAccessor): Endpoint[ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("redirect.enabled").map(_.map(_.toBoolean)) :: paramOption("redirect.stats.enabled").map(_.map(_.toBoolean)) :: params("redirect.extensions") :: params("redirect.paths")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], redirectPeriodenabled: Option[Boolean], redirectPeriodstatsPeriodenabled: Option[Boolean], redirectPeriodextensions: Seq[String], redirectPeriodpaths: Seq[String]) =>
          da.Configmgr_comDayCqWcmMobileCoreImplRedirectRedirectFilter(post, apply, delete, action, Dollarlocation, propertylist, redirectPeriodenabled, redirectPeriodstatsPeriodenabled, redirectPeriodextensions, redirectPeriodpaths) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo
        */
        private def comDayCqWcmMsmImplActionsContentCopyActionFactory(da: DataAccessor): Endpoint[ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.wcm.msm.action.excludednodetypes") :: params("cq.wcm.msm.action.excludedparagraphitems") :: params("cq.wcm.msm.action.excludedprops") :: paramOption("contentcopyaction.order.style")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: Seq[String], contentcopyactionPeriodorderPeriodstyle: Option[String]) =>
          da.Configmgr_comDayCqWcmMsmImplActionsContentCopyActionFactory(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, contentcopyactionPeriodorderPeriodstyle) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo
        */
        private def comDayCqWcmMsmImplActionsContentDeleteActionFactory(da: DataAccessor): Endpoint[ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.wcm.msm.action.excludednodetypes") :: params("cq.wcm.msm.action.excludedparagraphitems") :: params("cq.wcm.msm.action.excludedprops")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: Seq[String]) =>
          da.Configmgr_comDayCqWcmMsmImplActionsContentDeleteActionFactory(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo
        */
        private def comDayCqWcmMsmImplActionsContentUpdateActionFactory(da: DataAccessor): Endpoint[ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.wcm.msm.action.excludednodetypes") :: params("cq.wcm.msm.action.excludedparagraphitems") :: params("cq.wcm.msm.action.excludedprops") :: params("cq.wcm.msm.action.ignoredMixin")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodignoredMixin: Seq[String]) =>
          da.Configmgr_comDayCqWcmMsmImplActionsContentUpdateActionFactory(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, cqPeriodwcmPeriodmsmPeriodactionPeriodignoredMixin) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo
        */
        private def comDayCqWcmMsmImplActionsOrderChildrenActionFactory(da: DataAccessor): Endpoint[ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.wcm.msm.action.excludednodetypes") :: params("cq.wcm.msm.action.excludedparagraphitems") :: params("cq.wcm.msm.action.excludedprops")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: Seq[String]) =>
          da.Configmgr_comDayCqWcmMsmImplActionsOrderChildrenActionFactory(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo
        */
        private def comDayCqWcmMsmImplActionsPageMoveActionFactory(da: DataAccessor): Endpoint[ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.wcm.msm.action.excludednodetypes") :: params("cq.wcm.msm.action.excludedparagraphitems") :: params("cq.wcm.msm.action.excludedprops") :: paramOption("cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: Seq[String], cqPeriodwcmPeriodmsmPeriodimplPeriodactionsPeriodpagemovePeriodpropReferenceUpdate: Option[Boolean]) =>
          da.Configmgr_comDayCqWcmMsmImplActionsPageMoveActionFactory(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, cqPeriodwcmPeriodmsmPeriodimplPeriodactionsPeriodpagemovePeriodpropReferenceUpdate) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo
        */
        private def comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(da: DataAccessor): Endpoint[ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.wcm.msm.action.excludednodetypes") :: params("cq.wcm.msm.action.excludedparagraphitems") :: params("cq.wcm.msm.action.excludedprops") :: paramOption("cq.wcm.msm.impl.action.referencesupdate.prop_updateNested").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: Seq[String], cqPeriodwcmPeriodmsmPeriodimplPeriodactionPeriodreferencesupdatePeriodpropUpdateNested: Option[Boolean]) =>
          da.Configmgr_comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops, cqPeriodwcmPeriodmsmPeriodimplPeriodactionPeriodreferencesupdatePeriodpropUpdateNested) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo
        */
        private def comDayCqWcmMsmImplActionsVersionCopyActionFactory(da: DataAccessor): Endpoint[ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cq.wcm.msm.action.excludednodetypes") :: params("cq.wcm.msm.action.excludedparagraphitems") :: params("cq.wcm.msm.action.excludedprops")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems: Seq[String], cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops: Seq[String]) =>
          da.Configmgr_comDayCqWcmMsmImplActionsVersionCopyActionFactory(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems, cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo
        */
        private def comDayCqWcmMsmImplLiveRelationshipManagerImpl(da: DataAccessor): Endpoint[ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("liverelationshipmgr.relationsconfig.default")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], liverelationshipmgrPeriodrelationsconfigPerioddefault: Option[String]) =>
          da.Configmgr_comDayCqWcmMsmImplLiveRelationshipManagerImpl(post, apply, delete, action, Dollarlocation, propertylist, liverelationshipmgrPeriodrelationsconfigPerioddefault) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmMsmImplRolloutManagerImplInfo
        */
        private def comDayCqWcmMsmImplRolloutManagerImpl(da: DataAccessor): Endpoint[ComDayCqWcmMsmImplRolloutManagerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.msm.impl.RolloutManagerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("event.filter") :: params("rolloutmgr.excludedprops.default") :: params("rolloutmgr.excludedparagraphprops.default") :: params("rolloutmgr.excludednodetypes.default") :: paramOption("rolloutmgr.threadpool.maxsize").map(_.map(_.toInt)) :: paramOption("rolloutmgr.threadpool.maxshutdowntime").map(_.map(_.toInt)) :: paramOption("rolloutmgr.threadpool.priority") :: paramOption("rolloutmgr.commit.size").map(_.map(_.toInt)) :: paramOption("rolloutmgr.conflicthandling.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], eventPeriodfilter: Option[String], rolloutmgrPeriodexcludedpropsPerioddefault: Seq[String], rolloutmgrPeriodexcludedparagraphpropsPerioddefault: Seq[String], rolloutmgrPeriodexcludednodetypesPerioddefault: Seq[String], rolloutmgrPeriodthreadpoolPeriodmaxsize: Option[Int], rolloutmgrPeriodthreadpoolPeriodmaxshutdowntime: Option[Int], rolloutmgrPeriodthreadpoolPeriodpriority: Option[String], rolloutmgrPeriodcommitPeriodsize: Option[Int], rolloutmgrPeriodconflicthandlingPeriodenabled: Option[Boolean]) =>
          da.Configmgr_comDayCqWcmMsmImplRolloutManagerImpl(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodfilter, rolloutmgrPeriodexcludedpropsPerioddefault, rolloutmgrPeriodexcludedparagraphpropsPerioddefault, rolloutmgrPeriodexcludednodetypesPerioddefault, rolloutmgrPeriodthreadpoolPeriodmaxsize, rolloutmgrPeriodthreadpoolPeriodmaxshutdowntime, rolloutmgrPeriodthreadpoolPeriodpriority, rolloutmgrPeriodcommitPeriodsize, rolloutmgrPeriodconflicthandlingPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmMsmImplServletsAuditLogServletInfo
        */
        private def comDayCqWcmMsmImplServletsAuditLogServlet(da: DataAccessor): Endpoint[ComDayCqWcmMsmImplServletsAuditLogServletInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.msm.impl.servlets.AuditLogServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("auditlogservlet.default.events.count").map(_.map(_.toInt)) :: paramOption("auditlogservlet.default.path")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], auditlogservletPerioddefaultPeriodeventsPeriodcount: Option[Int], auditlogservletPerioddefaultPeriodpath: Option[String]) =>
          da.Configmgr_comDayCqWcmMsmImplServletsAuditLogServlet(post, apply, delete, action, Dollarlocation, propertylist, auditlogservletPerioddefaultPeriodeventsPeriodcount, auditlogservletPerioddefaultPeriodpath) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmNotificationEmailImplEmailChannelInfo
        */
        private def comDayCqWcmNotificationEmailImplEmailChannel(da: DataAccessor): Endpoint[ComDayCqWcmNotificationEmailImplEmailChannelInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.notification.email.impl.EmailChannel" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("email.from")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], emailPeriodfrom: Option[String]) =>
          da.Configmgr_comDayCqWcmNotificationEmailImplEmailChannel(post, apply, delete, action, Dollarlocation, propertylist, emailPeriodfrom) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmNotificationImplNotificationManagerImplInfo
        */
        private def comDayCqWcmNotificationImplNotificationManagerImpl(da: DataAccessor): Endpoint[ComDayCqWcmNotificationImplNotificationManagerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.notification.impl.NotificationManagerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("event.topics")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], eventPeriodtopics: Seq[String]) =>
          da.Configmgr_comDayCqWcmNotificationImplNotificationManagerImpl(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodtopics) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmScriptingImplBVPManagerInfo
        */
        private def comDayCqWcmScriptingImplBVPManager(da: DataAccessor): Endpoint[ComDayCqWcmScriptingImplBVPManagerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.scripting.impl.BVPManager" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("com.day.cq.wcm.scripting.bvp.script.engines")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], comPerioddayPeriodcqPeriodwcmPeriodscriptingPeriodbvpPeriodscriptPeriodengines: Seq[String]) =>
          da.Configmgr_comDayCqWcmScriptingImplBVPManager(post, apply, delete, action, Dollarlocation, propertylist, comPerioddayPeriodcqPeriodwcmPeriodscriptingPeriodbvpPeriodscriptPeriodengines) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmUndoUndoConfigInfo
        */
        private def comDayCqWcmUndoUndoConfig(da: DataAccessor): Endpoint[ComDayCqWcmUndoUndoConfigInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.undo.UndoConfig" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("cq.wcm.undo.enabled").map(_.map(_.toBoolean)) :: paramOption("cq.wcm.undo.path") :: paramOption("cq.wcm.undo.validity").map(_.map(_.toInt)) :: paramOption("cq.wcm.undo.steps").map(_.map(_.toInt)) :: paramOption("cq.wcm.undo.persistence") :: paramOption("cq.wcm.undo.persistence.mode").map(_.map(_.toBoolean)) :: paramOption("cq.wcm.undo.markermode") :: params("cq.wcm.undo.whitelist") :: params("cq.wcm.undo.blacklist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cqPeriodwcmPeriodundoPeriodenabled: Option[Boolean], cqPeriodwcmPeriodundoPeriodpath: Option[String], cqPeriodwcmPeriodundoPeriodvalidity: Option[Int], cqPeriodwcmPeriodundoPeriodsteps: Option[Int], cqPeriodwcmPeriodundoPeriodpersistence: Option[String], cqPeriodwcmPeriodundoPeriodpersistencePeriodmode: Option[Boolean], cqPeriodwcmPeriodundoPeriodmarkermode: Option[String], cqPeriodwcmPeriodundoPeriodwhitelist: Seq[String], cqPeriodwcmPeriodundoPeriodblacklist: Seq[String]) =>
          da.Configmgr_comDayCqWcmUndoUndoConfig(post, apply, delete, action, Dollarlocation, propertylist, cqPeriodwcmPeriodundoPeriodenabled, cqPeriodwcmPeriodundoPeriodpath, cqPeriodwcmPeriodundoPeriodvalidity, cqPeriodwcmPeriodundoPeriodsteps, cqPeriodwcmPeriodundoPeriodpersistence, cqPeriodwcmPeriodundoPeriodpersistencePeriodmode, cqPeriodwcmPeriodundoPeriodmarkermode, cqPeriodwcmPeriodundoPeriodwhitelist, cqPeriodwcmPeriodundoPeriodblacklist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo
        */
        private def comDayCqWcmWebservicesupportImplReplicationEventListener(da: DataAccessor): Endpoint[ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("Flush agents")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], flush agents: Seq[String]) =>
          da.Configmgr_comDayCqWcmWebservicesupportImplReplicationEventListener(post, apply, delete, action, Dollarlocation, propertylist, flush agents) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo
        */
        private def comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(da: DataAccessor): Endpoint[ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("event.filter") :: paramOption("minThreadPoolSize").map(_.map(_.toInt)) :: paramOption("maxThreadPoolSize").map(_.map(_.toInt)) :: paramOption("cq.wcm.workflow.terminate.on.activate").map(_.map(_.toBoolean)) :: params("cq.wcm.worklfow.terminate.exclusion.list")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], eventPeriodfilter: Option[String], minThreadPoolSize: Option[Int], maxThreadPoolSize: Option[Int], cqPeriodwcmPeriodworkflowPeriodterminatePeriodonPeriodactivate: Option[Boolean], cqPeriodwcmPeriodworklfowPeriodterminatePeriodexclusionPeriodlist: Seq[String]) =>
          da.Configmgr_comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, eventPeriodfilter, minThreadPoolSize, maxThreadPoolSize, cqPeriodwcmPeriodworkflowPeriodterminatePeriodonPeriodactivate, cqPeriodwcmPeriodworklfowPeriodterminatePeriodexclusionPeriodlist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo
        */
        private def comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(da: DataAccessor): Endpoint[ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("workflowpackageinfoprovider.filter") :: paramOption("workflowpackageinfoprovider.filter.rootpath")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], workflowpackageinfoproviderPeriodfilter: Seq[String], workflowpackageinfoproviderPeriodfilterPeriodrootpath: Option[String]) =>
          da.Configmgr_comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(post, apply, delete, action, Dollarlocation, propertylist, workflowpackageinfoproviderPeriodfilter, workflowpackageinfoproviderPeriodfilterPeriodrootpath) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWidgetImplHtmlLibraryManagerImplInfo
        */
        private def comDayCqWidgetImplHtmlLibraryManagerImpl(da: DataAccessor): Endpoint[ComDayCqWidgetImplHtmlLibraryManagerImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.widget.impl.HtmlLibraryManagerImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("htmllibmanager.clientmanager") :: paramOption("htmllibmanager.debug").map(_.map(_.toBoolean)) :: paramOption("htmllibmanager.debug.console").map(_.map(_.toBoolean)) :: paramOption("htmllibmanager.debug.init.js") :: paramOption("htmllibmanager.defaultthemename") :: paramOption("htmllibmanager.defaultuserthemename") :: paramOption("htmllibmanager.firebuglite.path") :: paramOption("htmllibmanager.forceCQUrlInfo").map(_.map(_.toBoolean)) :: paramOption("htmllibmanager.gzip").map(_.map(_.toBoolean)) :: paramOption("htmllibmanager.maxage").map(_.map(_.toInt)) :: paramOption("htmllibmanager.maxDataUriSize").map(_.map(_.toInt)) :: paramOption("htmllibmanager.minify").map(_.map(_.toBoolean)) :: params("htmllibmanager.path.list") :: paramOption("htmllibmanager.timing").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], htmllibmanagerPeriodclientmanager: Option[String], htmllibmanagerPerioddebug: Option[Boolean], htmllibmanagerPerioddebugPeriodconsole: Option[Boolean], htmllibmanagerPerioddebugPeriodinitPeriodjs: Option[String], htmllibmanagerPerioddefaultthemename: Option[String], htmllibmanagerPerioddefaultuserthemename: Option[String], htmllibmanagerPeriodfirebuglitePeriodpath: Option[String], htmllibmanagerPeriodforceCQUrlInfo: Option[Boolean], htmllibmanagerPeriodgzip: Option[Boolean], htmllibmanagerPeriodmaxage: Option[Int], htmllibmanagerPeriodmaxDataUriSize: Option[Int], htmllibmanagerPeriodminify: Option[Boolean], htmllibmanagerPeriodpathPeriodlist: Seq[String], htmllibmanagerPeriodtiming: Option[Boolean]) =>
          da.Configmgr_comDayCqWidgetImplHtmlLibraryManagerImpl(post, apply, delete, action, Dollarlocation, propertylist, htmllibmanagerPeriodclientmanager, htmllibmanagerPerioddebug, htmllibmanagerPerioddebugPeriodconsole, htmllibmanagerPerioddebugPeriodinitPeriodjs, htmllibmanagerPerioddefaultthemename, htmllibmanagerPerioddefaultuserthemename, htmllibmanagerPeriodfirebuglitePeriodpath, htmllibmanagerPeriodforceCQUrlInfo, htmllibmanagerPeriodgzip, htmllibmanagerPeriodmaxage, htmllibmanagerPeriodmaxDataUriSize, htmllibmanagerPeriodminify, htmllibmanagerPeriodpathPeriodlist, htmllibmanagerPeriodtiming) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWidgetImplWidgetExtensionProviderImplInfo
        */
        private def comDayCqWidgetImplWidgetExtensionProviderImpl(da: DataAccessor): Endpoint[ComDayCqWidgetImplWidgetExtensionProviderImplInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.widget.impl.WidgetExtensionProviderImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("extendable.widgets") :: paramOption("widgetextensionprovider.debug").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], extendablePeriodwidgets: Seq[String], widgetextensionproviderPerioddebug: Option[Boolean]) =>
          da.Configmgr_comDayCqWidgetImplWidgetExtensionProviderImpl(post, apply, delete, action, Dollarlocation, propertylist, extendablePeriodwidgets, widgetextensionproviderPerioddebug) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWorkflowImplEmailEMailNotificationServiceInfo
        */
        private def comDayCqWorkflowImplEmailEMailNotificationService(da: DataAccessor): Endpoint[ComDayCqWorkflowImplEmailEMailNotificationServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.workflow.impl.email.EMailNotificationService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("from.address") :: paramOption("host.prefix") :: paramOption("notify.onabort").map(_.map(_.toBoolean)) :: paramOption("notify.oncomplete").map(_.map(_.toBoolean)) :: paramOption("notify.oncontainercomplete").map(_.map(_.toBoolean)) :: paramOption("notify.useronly").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], fromPeriodaddress: Option[String], hostPeriodprefix: Option[String], notifyPeriodonabort: Option[Boolean], notifyPeriodoncomplete: Option[Boolean], notifyPeriodoncontainercomplete: Option[Boolean], notifyPerioduseronly: Option[Boolean]) =>
          da.Configmgr_comDayCqWorkflowImplEmailEMailNotificationService(post, apply, delete, action, Dollarlocation, propertylist, fromPeriodaddress, hostPeriodprefix, notifyPeriodonabort, notifyPeriodoncomplete, notifyPeriodoncontainercomplete, notifyPerioduseronly) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo
        */
        private def comDayCqWorkflowImplEmailTaskEMailNotificationService(da: DataAccessor): Endpoint[ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.cq.workflow.impl.email.TaskEMailNotificationService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("notify.onupdate").map(_.map(_.toBoolean)) :: paramOption("notify.oncomplete").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], notifyPeriodonupdate: Option[Boolean], notifyPeriodoncomplete: Option[Boolean]) =>
          da.Configmgr_comDayCqWorkflowImplEmailTaskEMailNotificationService(post, apply, delete, action, Dollarlocation, propertylist, notifyPeriodonupdate, notifyPeriodoncomplete) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo
        */
        private def comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(da: DataAccessor): Endpoint[ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.crx.security.token.impl.impl.TokenAuthenticationHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("path") :: paramOption("token.required.attr") :: paramOption("token.alternate.url") :: paramOption("token.encapsulated").map(_.map(_.toBoolean)) :: params("skip.token.refresh")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], path: Option[String], tokenPeriodrequiredPeriodattr: Option[String], tokenPeriodalternatePeriodurl: Option[String], tokenPeriodencapsulated: Option[Boolean], skipPeriodtokenPeriodrefresh: Seq[String]) =>
          da.Configmgr_comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(post, apply, delete, action, Dollarlocation, propertylist, path, tokenPeriodrequiredPeriodattr, tokenPeriodalternatePeriodurl, tokenPeriodencapsulated, skipPeriodtokenPeriodrefresh) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a ComDayCrxSecurityTokenImplTokenCleanupTaskInfo
        */
        private def comDayCrxSecurityTokenImplTokenCleanupTask(da: DataAccessor): Endpoint[ComDayCrxSecurityTokenImplTokenCleanupTaskInfo] =
        post("system" :: "console" :: "configMgr" :: "com.day.crx.security.token.impl.TokenCleanupTask" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enable.token.cleanup.task").map(_.map(_.toBoolean)) :: paramOption("scheduler.expression") :: paramOption("batch.size").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enablePeriodtokenPeriodcleanupPeriodtask: Option[Boolean], schedulerPeriodexpression: Option[String], batchPeriodsize: Option[Int]) =>
          da.Configmgr_comDayCrxSecurityTokenImplTokenCleanupTask(post, apply, delete, action, Dollarlocation, propertylist, enablePeriodtokenPeriodcleanupPeriodtask, schedulerPeriodexpression, batchPeriodsize) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a GuideLocalizationServiceInfo
        */
        private def guideLocalizationService(da: DataAccessor): Endpoint[GuideLocalizationServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "Guide Localization Service" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("supportedLocales") :: params("Localizable Properties")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], supportedLocales: Seq[String], localizable Properties: Seq[String]) =>
          da.Configmgr_guideLocalizationService(post, apply, delete, action, Dollarlocation, propertylist, supportedLocales, localizable Properties) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a MessagingUserComponentFactoryInfo
        */
        private def messagingUserComponentFactory(da: DataAccessor): Endpoint[MessagingUserComponentFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "MessagingUserComponentFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("priority").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], priority: Option[Int]) =>
          da.Configmgr_messagingUserComponentFactory(post, apply, delete, action, Dollarlocation, propertylist, priority) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheAriesJmxFrameworkStateConfigInfo
        */
        private def orgApacheAriesJmxFrameworkStateConfig(da: DataAccessor): Endpoint[OrgApacheAriesJmxFrameworkStateConfigInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.aries.jmx.framework.StateConfig" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("attributeChangeNotificationEnabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], attributeChangeNotificationEnabled: Option[Boolean]) =>
          da.Configmgr_orgApacheAriesJmxFrameworkStateConfig(post, apply, delete, action, Dollarlocation, propertylist, attributeChangeNotificationEnabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheFelixEventadminImplEventAdminInfo
        */
        private def orgApacheFelixEventadminImplEventAdmin(da: DataAccessor): Endpoint[OrgApacheFelixEventadminImplEventAdminInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.felix.eventadmin.impl.EventAdmin" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("org.apache.felix.eventadmin.ThreadPoolSize").map(_.map(_.toInt)) :: paramOption("org.apache.felix.eventadmin.AsyncToSyncThreadRatio").map(_.map(_.toBigDecimal)) :: paramOption("org.apache.felix.eventadmin.Timeout").map(_.map(_.toInt)) :: paramOption("org.apache.felix.eventadmin.RequireTopic").map(_.map(_.toBoolean)) :: params("org.apache.felix.eventadmin.IgnoreTimeout") :: params("org.apache.felix.eventadmin.IgnoreTopic")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], orgPeriodapachePeriodfelixPeriodeventadminPeriodThreadPoolSize: Option[Int], orgPeriodapachePeriodfelixPeriodeventadminPeriodAsyncToSyncThreadRatio: Option[BigDecimal], orgPeriodapachePeriodfelixPeriodeventadminPeriodTimeout: Option[Int], orgPeriodapachePeriodfelixPeriodeventadminPeriodRequireTopic: Option[Boolean], orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTimeout: Seq[String], orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTopic: Seq[String]) =>
          da.Configmgr_orgApacheFelixEventadminImplEventAdmin(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodfelixPeriodeventadminPeriodThreadPoolSize, orgPeriodapachePeriodfelixPeriodeventadminPeriodAsyncToSyncThreadRatio, orgPeriodapachePeriodfelixPeriodeventadminPeriodTimeout, orgPeriodapachePeriodfelixPeriodeventadminPeriodRequireTopic, orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTimeout, orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTopic) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheFelixHttpInfo
        */
        private def orgApacheFelixHttp(da: DataAccessor): Endpoint[OrgApacheFelixHttpInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.felix.http" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("org.apache.felix.http.host") :: paramOption("org.apache.felix.http.enable").map(_.map(_.toBoolean)) :: paramOption("org.osgi.service.http.port").map(_.map(_.toInt)) :: paramOption("org.apache.felix.http.timeout").map(_.map(_.toInt)) :: paramOption("org.apache.felix.https.enable").map(_.map(_.toBoolean)) :: paramOption("org.osgi.service.http.port.secure").map(_.map(_.toInt)) :: paramOption("org.apache.felix.https.keystore") :: paramOption("org.apache.felix.https.keystore.password") :: paramOption("org.apache.felix.https.keystore.key.password") :: paramOption("org.apache.felix.https.truststore") :: paramOption("org.apache.felix.https.truststore.password") :: paramOption("org.apache.felix.https.clientcertificate") :: paramOption("org.apache.felix.http.context_path") :: paramOption("org.apache.felix.http.mbeans").map(_.map(_.toBoolean)) :: paramOption("org.apache.felix.http.session.timeout").map(_.map(_.toInt)) :: paramOption("org.apache.felix.http.jetty.threadpool.max").map(_.map(_.toInt)) :: paramOption("org.apache.felix.http.jetty.acceptors").map(_.map(_.toInt)) :: paramOption("org.apache.felix.http.jetty.selectors").map(_.map(_.toInt)) :: paramOption("org.apache.felix.http.jetty.headerBufferSize").map(_.map(_.toInt)) :: paramOption("org.apache.felix.http.jetty.requestBufferSize").map(_.map(_.toInt)) :: paramOption("org.apache.felix.http.jetty.responseBufferSize").map(_.map(_.toInt)) :: paramOption("org.apache.felix.http.jetty.maxFormSize").map(_.map(_.toInt)) :: params("org.apache.felix.http.path_exclusions") :: params("org.apache.felix.https.jetty.ciphersuites.excluded") :: params("org.apache.felix.https.jetty.ciphersuites.included") :: paramOption("org.apache.felix.http.jetty.sendServerHeader").map(_.map(_.toBoolean)) :: params("org.apache.felix.https.jetty.protocols.included") :: params("org.apache.felix.https.jetty.protocols.excluded") :: paramOption("org.apache.felix.proxy.load.balancer.connection.enable").map(_.map(_.toBoolean)) :: paramOption("org.apache.felix.https.jetty.renegotiateAllowed").map(_.map(_.toBoolean)) :: paramOption("org.apache.felix.https.jetty.session.cookie.httpOnly").map(_.map(_.toBoolean)) :: paramOption("org.apache.felix.https.jetty.session.cookie.secure").map(_.map(_.toBoolean)) :: paramOption("org.eclipse.jetty.servlet.SessionIdPathParameterName") :: paramOption("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding").map(_.map(_.toBoolean)) :: paramOption("org.eclipse.jetty.servlet.SessionCookie") :: paramOption("org.eclipse.jetty.servlet.SessionDomain") :: paramOption("org.eclipse.jetty.servlet.SessionPath") :: paramOption("org.eclipse.jetty.servlet.MaxAge").map(_.map(_.toInt)) :: paramOption("org.apache.felix.http.name") :: paramOption("org.apache.felix.jetty.gziphandler.enable").map(_.map(_.toBoolean)) :: paramOption("org.apache.felix.jetty.gzip.minGzipSize").map(_.map(_.toInt)) :: paramOption("org.apache.felix.jetty.gzip.compressionLevel").map(_.map(_.toInt)) :: paramOption("org.apache.felix.jetty.gzip.inflateBufferSize").map(_.map(_.toInt)) :: paramOption("org.apache.felix.jetty.gzip.syncFlush").map(_.map(_.toBoolean)) :: params("org.apache.felix.jetty.gzip.excludedUserAgents") :: params("org.apache.felix.jetty.gzip.includedMethods") :: params("org.apache.felix.jetty.gzip.excludedMethods") :: params("org.apache.felix.jetty.gzip.includedPaths") :: params("org.apache.felix.jetty.gzip.excludedPaths") :: params("org.apache.felix.jetty.gzip.includedMimeTypes") :: params("org.apache.felix.jetty.gzip.excludedMimeTypes") :: paramOption("org.apache.felix.http.session.invalidate").map(_.map(_.toBoolean)) :: paramOption("org.apache.felix.http.session.uniqueid").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], orgPeriodapachePeriodfelixPeriodhttpPeriodhost: Option[String], orgPeriodapachePeriodfelixPeriodhttpPeriodenable: Option[Boolean], orgPeriodosgiPeriodservicePeriodhttpPeriodport: Option[Int], orgPeriodapachePeriodfelixPeriodhttpPeriodtimeout: Option[Int], orgPeriodapachePeriodfelixPeriodhttpsPeriodenable: Option[Boolean], orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure: Option[Int], orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore: Option[String], orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword: Option[String], orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword: Option[String], orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore: Option[String], orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword: Option[String], orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate: Option[String], orgPeriodapachePeriodfelixPeriodhttpPeriodcontextPath: Option[String], orgPeriodapachePeriodfelixPeriodhttpPeriodmbeans: Option[Boolean], orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodtimeout: Option[Int], orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodthreadpoolPeriodmax: Option[Int], orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodacceptors: Option[Int], orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodselectors: Option[Int], orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodheaderBufferSize: Option[Int], orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodrequestBufferSize: Option[Int], orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodresponseBufferSize: Option[Int], orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodmaxFormSize: Option[Int], orgPeriodapachePeriodfelixPeriodhttpPeriodpathExclusions: Seq[String], orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodexcluded: Seq[String], orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodincluded: Seq[String], orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodsendServerHeader: Option[Boolean], orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodincluded: Seq[String], orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodexcluded: Seq[String], orgPeriodapachePeriodfelixPeriodproxyPeriodloadPeriodbalancerPeriodconnectionPeriodenable: Option[Boolean], orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodrenegotiateAllowed: Option[Boolean], orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodhttpOnly: Option[Boolean], orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodsecure: Option[Boolean], orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionIdPathParameterName: Option[String], orgPeriodeclipsePeriodjettyPeriodservletPeriodCheckingRemoteSessionIdEncoding: Option[Boolean], orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionCookie: Option[String], orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionDomain: Option[String], orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionPath: Option[String], orgPeriodeclipsePeriodjettyPeriodservletPeriodMaxAge: Option[Int], orgPeriodapachePeriodfelixPeriodhttpPeriodname: Option[String], orgPeriodapachePeriodfelixPeriodjettyPeriodgziphandlerPeriodenable: Option[Boolean], orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodminGzipSize: Option[Int], orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodcompressionLevel: Option[Int], orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodinflateBufferSize: Option[Int], orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodsyncFlush: Option[Boolean], orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedUserAgents: Seq[String], orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMethods: Seq[String], orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMethods: Seq[String], orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedPaths: Seq[String], orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedPaths: Seq[String], orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMimeTypes: Seq[String], orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMimeTypes: Seq[String], orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodinvalidate: Option[Boolean], orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPerioduniqueid: Option[Boolean]) =>
          da.Configmgr_orgApacheFelixHttp(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodfelixPeriodhttpPeriodhost, orgPeriodapachePeriodfelixPeriodhttpPeriodenable, orgPeriodosgiPeriodservicePeriodhttpPeriodport, orgPeriodapachePeriodfelixPeriodhttpPeriodtimeout, orgPeriodapachePeriodfelixPeriodhttpsPeriodenable, orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure, orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore, orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword, orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword, orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore, orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword, orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate, orgPeriodapachePeriodfelixPeriodhttpPeriodcontextPath, orgPeriodapachePeriodfelixPeriodhttpPeriodmbeans, orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodtimeout, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodthreadpoolPeriodmax, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodacceptors, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodselectors, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodheaderBufferSize, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodrequestBufferSize, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodresponseBufferSize, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodmaxFormSize, orgPeriodapachePeriodfelixPeriodhttpPeriodpathExclusions, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodexcluded, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodincluded, orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodsendServerHeader, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodincluded, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodexcluded, orgPeriodapachePeriodfelixPeriodproxyPeriodloadPeriodbalancerPeriodconnectionPeriodenable, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodrenegotiateAllowed, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodhttpOnly, orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodsecure, orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionIdPathParameterName, orgPeriodeclipsePeriodjettyPeriodservletPeriodCheckingRemoteSessionIdEncoding, orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionCookie, orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionDomain, orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionPath, orgPeriodeclipsePeriodjettyPeriodservletPeriodMaxAge, orgPeriodapachePeriodfelixPeriodhttpPeriodname, orgPeriodapachePeriodfelixPeriodjettyPeriodgziphandlerPeriodenable, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodminGzipSize, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodcompressionLevel, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodinflateBufferSize, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodsyncFlush, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedUserAgents, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMethods, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMethods, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedPaths, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedPaths, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMimeTypes, orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMimeTypes, orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodinvalidate, orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPerioduniqueid) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheFelixHttpSslfilterSslFilterInfo
        */
        private def orgApacheFelixHttpSslfilterSslFilter(da: DataAccessor): Endpoint[OrgApacheFelixHttpSslfilterSslFilterInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.felix.http.sslfilter.SslFilter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("ssl-forward.header") :: paramOption("ssl-forward.value") :: paramOption("ssl-forward-cert.header") :: paramOption("rewrite.absolute.urls").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], sslForwardPeriodheader: Option[String], sslForwardPeriodvalue: Option[String], sslForwardCertPeriodheader: Option[String], rewritePeriodabsolutePeriodurls: Option[Boolean]) =>
          da.Configmgr_orgApacheFelixHttpSslfilterSslFilter(post, apply, delete, action, Dollarlocation, propertylist, sslForwardPeriodheader, sslForwardPeriodvalue, sslForwardCertPeriodheader, rewritePeriodabsolutePeriodurls) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheFelixJaasConfigurationFactoryInfo
        */
        private def orgApacheFelixJaasConfigurationFactory(da: DataAccessor): Endpoint[OrgApacheFelixJaasConfigurationFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.felix.jaas.Configuration.factory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("jaas.controlFlag") :: paramOption("jaas.ranking").map(_.map(_.toInt)) :: paramOption("jaas.realmName") :: paramOption("jaas.classname") :: params("jaas.options")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], jaasPeriodcontrolFlag: Option[String], jaasPeriodranking: Option[Int], jaasPeriodrealmName: Option[String], jaasPeriodclassname: Option[String], jaasPeriodoptions: Seq[String]) =>
          da.Configmgr_orgApacheFelixJaasConfigurationFactory(post, apply, delete, action, Dollarlocation, propertylist, jaasPeriodcontrolFlag, jaasPeriodranking, jaasPeriodrealmName, jaasPeriodclassname, jaasPeriodoptions) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheFelixJaasConfigurationSpiInfo
        */
        private def orgApacheFelixJaasConfigurationSpi(da: DataAccessor): Endpoint[OrgApacheFelixJaasConfigurationSpiInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.felix.jaas.ConfigurationSpi" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("jaas.defaultRealmName") :: paramOption("jaas.configProviderName") :: paramOption("jaas.globalConfigPolicy")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], jaasPerioddefaultRealmName: Option[String], jaasPeriodconfigProviderName: Option[String], jaasPeriodglobalConfigPolicy: Option[String]) =>
          da.Configmgr_orgApacheFelixJaasConfigurationSpi(post, apply, delete, action, Dollarlocation, propertylist, jaasPerioddefaultRealmName, jaasPeriodconfigProviderName, jaasPeriodglobalConfigPolicy) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheFelixScrScrServiceInfo
        */
        private def orgApacheFelixScrScrService(da: DataAccessor): Endpoint[OrgApacheFelixScrScrServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.felix.scr.ScrService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("ds.loglevel").map(_.map(_.toInt)) :: paramOption("ds.factory.enabled").map(_.map(_.toBoolean)) :: paramOption("ds.delayed.keepInstances").map(_.map(_.toBoolean)) :: paramOption("ds.lock.timeout.milliseconds").map(_.map(_.toInt)) :: paramOption("ds.stop.timeout.milliseconds").map(_.map(_.toInt)) :: paramOption("ds.global.extender").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], dsPeriodloglevel: Option[Int], dsPeriodfactoryPeriodenabled: Option[Boolean], dsPerioddelayedPeriodkeepInstances: Option[Boolean], dsPeriodlockPeriodtimeoutPeriodmilliseconds: Option[Int], dsPeriodstopPeriodtimeoutPeriodmilliseconds: Option[Int], dsPeriodglobalPeriodextender: Option[Boolean]) =>
          da.Configmgr_orgApacheFelixScrScrService(post, apply, delete, action, Dollarlocation, propertylist, dsPeriodloglevel, dsPeriodfactoryPeriodenabled, dsPerioddelayedPeriodkeepInstances, dsPeriodlockPeriodtimeoutPeriodmilliseconds, dsPeriodstopPeriodtimeoutPeriodmilliseconds, dsPeriodglobalPeriodextender) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheFelixSystemreadyImplComponentsCheckInfo
        */
        private def orgApacheFelixSystemreadyImplComponentsCheck(da: DataAccessor): Endpoint[OrgApacheFelixSystemreadyImplComponentsCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.felix.systemready.impl.ComponentsCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("components.list") :: paramOption("type")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], componentsPeriodlist: Seq[String], _type: Option[String]) =>
          da.Configmgr_orgApacheFelixSystemreadyImplComponentsCheck(post, apply, delete, action, Dollarlocation, propertylist, componentsPeriodlist, _type) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo
        */
        private def orgApacheFelixSystemreadyImplFrameworkStartCheck(da: DataAccessor): Endpoint[OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.felix.systemready.impl.FrameworkStartCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("timeout").map(_.map(_.toInt)) :: paramOption("target.start.level").map(_.map(_.toInt)) :: paramOption("target.start.level.prop.name") :: paramOption("type")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], timeout: Option[Int], targetPeriodstartPeriodlevel: Option[Int], targetPeriodstartPeriodlevelPeriodpropPeriodname: Option[String], _type: Option[String]) =>
          da.Configmgr_orgApacheFelixSystemreadyImplFrameworkStartCheck(post, apply, delete, action, Dollarlocation, propertylist, timeout, targetPeriodstartPeriodlevel, targetPeriodstartPeriodlevelPeriodpropPeriodname, _type) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheFelixSystemreadyImplServicesCheckInfo
        */
        private def orgApacheFelixSystemreadyImplServicesCheck(da: DataAccessor): Endpoint[OrgApacheFelixSystemreadyImplServicesCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.felix.systemready.impl.ServicesCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("services.list") :: paramOption("type")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicesPeriodlist: Seq[String], _type: Option[String]) =>
          da.Configmgr_orgApacheFelixSystemreadyImplServicesCheck(post, apply, delete, action, Dollarlocation, propertylist, servicesPeriodlist, _type) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo
        */
        private def orgApacheFelixSystemreadyImplServletSystemAliveServlet(da: DataAccessor): Endpoint[OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.felix.systemready.impl.servlet.SystemAliveServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("osgi.http.whiteboard.servlet.pattern") :: paramOption("osgi.http.whiteboard.context.select")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern: Option[String], osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect: Option[String]) =>
          da.Configmgr_orgApacheFelixSystemreadyImplServletSystemAliveServlet(post, apply, delete, action, Dollarlocation, propertylist, osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern, osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo
        */
        private def orgApacheFelixSystemreadyImplServletSystemReadyServlet(da: DataAccessor): Endpoint[OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.felix.systemready.impl.servlet.SystemReadyServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("osgi.http.whiteboard.servlet.pattern") :: paramOption("osgi.http.whiteboard.context.select")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern: Option[String], osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect: Option[String]) =>
          da.Configmgr_orgApacheFelixSystemreadyImplServletSystemReadyServlet(post, apply, delete, action, Dollarlocation, propertylist, osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern, osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheFelixSystemreadySystemReadyMonitorInfo
        */
        private def orgApacheFelixSystemreadySystemReadyMonitor(da: DataAccessor): Endpoint[OrgApacheFelixSystemreadySystemReadyMonitorInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.felix.systemready.SystemReadyMonitor" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("poll.interval").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], pollPeriodinterval: Option[Int]) =>
          da.Configmgr_orgApacheFelixSystemreadySystemReadyMonitor(post, apply, delete, action, Dollarlocation, propertylist, pollPeriodinterval) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo
        */
        private def orgApacheFelixWebconsoleInternalServletOsgiManager(da: DataAccessor): Endpoint[OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.felix.webconsole.internal.servlet.OsgiManager" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("manager.root") :: paramOption("http.service.filter") :: paramOption("default.render") :: paramOption("realm") :: paramOption("username") :: paramOption("password") :: paramOption("category") :: paramOption("locale") :: paramOption("loglevel").map(_.map(_.toInt)) :: paramOption("plugins")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], managerPeriodroot: Option[String], httpPeriodservicePeriodfilter: Option[String], defaultPeriodrender: Option[String], realm: Option[String], username: Option[String], password: Option[String], category: Option[String], locale: Option[String], loglevel: Option[Int], plugins: Option[String]) =>
          da.Configmgr_orgApacheFelixWebconsoleInternalServletOsgiManager(post, apply, delete, action, Dollarlocation, propertylist, managerPeriodroot, httpPeriodservicePeriodfilter, defaultPeriodrender, realm, username, password, category, locale, loglevel, plugins) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo
        */
        private def orgApacheFelixWebconsolePluginsEventInternalPluginServlet(da: DataAccessor): Endpoint[OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.felix.webconsole.plugins.event.internal.PluginServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("max.size").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], maxPeriodsize: Option[Int]) =>
          da.Configmgr_orgApacheFelixWebconsolePluginsEventInternalPluginServlet(post, apply, delete, action, Dollarlocation, propertylist, maxPeriodsize) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo
        */
        private def orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(da: DataAccessor): Endpoint[OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("felix.memoryusage.dump.threshold").map(_.map(_.toInt)) :: paramOption("felix.memoryusage.dump.interval").map(_.map(_.toInt)) :: paramOption("felix.memoryusage.dump.location")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], felixPeriodmemoryusagePerioddumpPeriodthreshold: Option[Int], felixPeriodmemoryusagePerioddumpPeriodinterval: Option[Int], felixPeriodmemoryusagePerioddumpPeriodlocation: Option[String]) =>
          da.Configmgr_orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(post, apply, delete, action, Dollarlocation, propertylist, felixPeriodmemoryusagePerioddumpPeriodthreshold, felixPeriodmemoryusagePerioddumpPeriodinterval, felixPeriodmemoryusagePerioddumpPeriodlocation) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheHttpProxyconfiguratorInfo
        */
        private def orgApacheHttpProxyconfigurator(da: DataAccessor): Endpoint[OrgApacheHttpProxyconfiguratorInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.http.proxyconfigurator" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("proxy.enabled").map(_.map(_.toBoolean)) :: paramOption("proxy.host") :: paramOption("proxy.port").map(_.map(_.toInt)) :: paramOption("proxy.user") :: paramOption("proxy.password") :: params("proxy.exceptions")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], proxyPeriodenabled: Option[Boolean], proxyPeriodhost: Option[String], proxyPeriodport: Option[Int], proxyPerioduser: Option[String], proxyPeriodpassword: Option[String], proxyPeriodexceptions: Seq[String]) =>
          da.Configmgr_orgApacheHttpProxyconfigurator(post, apply, delete, action, Dollarlocation, propertylist, proxyPeriodenabled, proxyPeriodhost, proxyPeriodport, proxyPerioduser, proxyPeriodpassword, proxyPeriodexceptions) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo
        */
        private def orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("dir")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], dir: Option[String]) =>
          da.Configmgr_orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(post, apply, delete, action, Dollarlocation, propertylist, dir) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo
        */
        private def orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("path")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], path: Option[String]) =>
          da.Configmgr_orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(post, apply, delete, action, Dollarlocation, propertylist, path) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo
        */
        private def orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("mongouri") :: paramOption("db") :: paramOption("socketKeepAlive").map(_.map(_.toBoolean)) :: paramOption("cache").map(_.map(_.toInt)) :: paramOption("nodeCachePercentage").map(_.map(_.toInt)) :: paramOption("prevDocCachePercentage").map(_.map(_.toInt)) :: paramOption("childrenCachePercentage").map(_.map(_.toInt)) :: paramOption("diffCachePercentage").map(_.map(_.toInt)) :: paramOption("cacheSegmentCount").map(_.map(_.toInt)) :: paramOption("cacheStackMoveDistance").map(_.map(_.toInt)) :: paramOption("blobCacheSize").map(_.map(_.toInt)) :: paramOption("persistentCache") :: paramOption("journalCache") :: paramOption("customBlobStore").map(_.map(_.toBoolean)) :: paramOption("journalGCInterval").map(_.map(_.toInt)) :: paramOption("journalGCMaxAge").map(_.map(_.toInt)) :: paramOption("prefetchExternalChanges").map(_.map(_.toBoolean)) :: paramOption("role") :: paramOption("versionGcMaxAgeInSecs").map(_.map(_.toInt)) :: paramOption("versionGCExpression") :: paramOption("versionGCTimeLimitInSecs").map(_.map(_.toInt)) :: paramOption("blobGcMaxAgeInSecs").map(_.map(_.toInt)) :: paramOption("blobTrackSnapshotIntervalInSecs").map(_.map(_.toInt)) :: paramOption("repository.home") :: paramOption("maxReplicationLagInSecs").map(_.map(_.toInt)) :: paramOption("documentStoreType") :: paramOption("bundlingDisabled").map(_.map(_.toBoolean)) :: paramOption("updateLimit").map(_.map(_.toInt)) :: params("persistentCacheIncludes") :: paramOption("leaseCheckMode")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], mongouri: Option[String], db: Option[String], socketKeepAlive: Option[Boolean], cache: Option[Int], nodeCachePercentage: Option[Int], prevDocCachePercentage: Option[Int], childrenCachePercentage: Option[Int], diffCachePercentage: Option[Int], cacheSegmentCount: Option[Int], cacheStackMoveDistance: Option[Int], blobCacheSize: Option[Int], persistentCache: Option[String], journalCache: Option[String], customBlobStore: Option[Boolean], journalGCInterval: Option[Int], journalGCMaxAge: Option[Int], prefetchExternalChanges: Option[Boolean], role: Option[String], versionGcMaxAgeInSecs: Option[Int], versionGCExpression: Option[String], versionGCTimeLimitInSecs: Option[Int], blobGcMaxAgeInSecs: Option[Int], blobTrackSnapshotIntervalInSecs: Option[Int], repositoryPeriodhome: Option[String], maxReplicationLagInSecs: Option[Int], documentStoreType: Option[String], bundlingDisabled: Option[Boolean], updateLimit: Option[Int], persistentCacheIncludes: Seq[String], leaseCheckMode: Option[String]) =>
          da.Configmgr_orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(post, apply, delete, action, Dollarlocation, propertylist, mongouri, db, socketKeepAlive, cache, nodeCachePercentage, prevDocCachePercentage, childrenCachePercentage, diffCachePercentage, cacheSegmentCount, cacheStackMoveDistance, blobCacheSize, persistentCache, journalCache, customBlobStore, journalGCInterval, journalGCMaxAge, prefetchExternalChanges, role, versionGcMaxAgeInSecs, versionGCExpression, versionGCTimeLimitInSecs, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, repositoryPeriodhome, maxReplicationLagInSecs, documentStoreType, bundlingDisabled, updateLimit, persistentCacheIncludes, leaseCheckMode) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo
        */
        private def orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("persistentCacheIncludes")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], persistentCacheIncludes: Seq[String]) =>
          da.Configmgr_orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(post, apply, delete, action, Dollarlocation, propertylist, persistentCacheIncludes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo
        */
        private def orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("includedPaths") :: paramOption("enableAsyncObserver").map(_.map(_.toBoolean)) :: paramOption("observerQueueSize").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], includedPaths: Seq[String], enableAsyncObserver: Option[Boolean], observerQueueSize: Option[Int]) =>
          da.Configmgr_orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(post, apply, delete, action, Dollarlocation, propertylist, includedPaths, enableAsyncObserver, observerQueueSize) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo
        */
        private def orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("asyncConfigs") :: paramOption("leaseTimeOutMinutes").map(_.map(_.toInt)) :: paramOption("failingIndexTimeoutSeconds").map(_.map(_.toInt)) :: paramOption("errorWarnIntervalSeconds").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], asyncConfigs: Seq[String], leaseTimeOutMinutes: Option[Int], failingIndexTimeoutSeconds: Option[Int], errorWarnIntervalSeconds: Option[Int]) =>
          da.Configmgr_orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(post, apply, delete, action, Dollarlocation, propertylist, asyncConfigs, leaseTimeOutMinutes, failingIndexTimeoutSeconds, errorWarnIntervalSeconds) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo
        */
        private def orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("disabled").map(_.map(_.toBoolean)) :: paramOption("debug").map(_.map(_.toBoolean)) :: paramOption("localIndexDir") :: paramOption("enableOpenIndexAsync").map(_.map(_.toBoolean)) :: paramOption("threadPoolSize").map(_.map(_.toInt)) :: paramOption("prefetchIndexFiles").map(_.map(_.toBoolean)) :: paramOption("extractedTextCacheSizeInMB").map(_.map(_.toInt)) :: paramOption("extractedTextCacheExpiryInSecs").map(_.map(_.toInt)) :: paramOption("alwaysUsePreExtractedCache").map(_.map(_.toBoolean)) :: paramOption("booleanClauseLimit").map(_.map(_.toInt)) :: paramOption("enableHybridIndexing").map(_.map(_.toBoolean)) :: paramOption("hybridQueueSize").map(_.map(_.toInt)) :: paramOption("disableStoredIndexDefinition").map(_.map(_.toBoolean)) :: paramOption("deletedBlobsCollectionEnabled").map(_.map(_.toBoolean)) :: paramOption("propIndexCleanerIntervalInSecs").map(_.map(_.toInt)) :: paramOption("enableSingleBlobIndexFiles").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], disabled: Option[Boolean], debug: Option[Boolean], localIndexDir: Option[String], enableOpenIndexAsync: Option[Boolean], threadPoolSize: Option[Int], prefetchIndexFiles: Option[Boolean], extractedTextCacheSizeInMB: Option[Int], extractedTextCacheExpiryInSecs: Option[Int], alwaysUsePreExtractedCache: Option[Boolean], booleanClauseLimit: Option[Int], enableHybridIndexing: Option[Boolean], hybridQueueSize: Option[Int], disableStoredIndexDefinition: Option[Boolean], deletedBlobsCollectionEnabled: Option[Boolean], propIndexCleanerIntervalInSecs: Option[Int], enableSingleBlobIndexFiles: Option[Boolean]) =>
          da.Configmgr_orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(post, apply, delete, action, Dollarlocation, propertylist, disabled, debug, localIndexDir, enableOpenIndexAsync, threadPoolSize, prefetchIndexFiles, extractedTextCacheSizeInMB, extractedTextCacheExpiryInSecs, alwaysUsePreExtractedCache, booleanClauseLimit, enableHybridIndexing, hybridQueueSize, disableStoredIndexDefinition, deletedBlobsCollectionEnabled, propIndexCleanerIntervalInSecs, enableSingleBlobIndexFiles) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo
        */
        private def orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("solr.home.path") :: paramOption("solr.core.name")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], solrPeriodhomePeriodpath: Option[String], solrPeriodcorePeriodname: Option[String]) =>
          da.Configmgr_orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(post, apply, delete, action, Dollarlocation, propertylist, solrPeriodhomePeriodpath, solrPeriodcorePeriodname) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo
        */
        private def orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enabled: Option[Boolean]) =>
          da.Configmgr_orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(post, apply, delete, action, Dollarlocation, propertylist, enabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo
        */
        private def orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("path.desc.field") :: paramOption("path.child.field") :: paramOption("path.parent.field") :: paramOption("path.exact.field") :: paramOption("catch.all.field") :: paramOption("collapsed.path.field") :: paramOption("path.depth.field") :: paramOption("commit.policy") :: paramOption("rows").map(_.map(_.toInt)) :: paramOption("path.restrictions").map(_.map(_.toBoolean)) :: paramOption("property.restrictions").map(_.map(_.toBoolean)) :: paramOption("primarytypes.restrictions").map(_.map(_.toBoolean)) :: params("ignored.properties") :: params("used.properties") :: params("type.mappings") :: params("property.mappings") :: paramOption("collapse.jcrcontent.nodes").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], pathPerioddescPeriodfield: Option[String], pathPeriodchildPeriodfield: Option[String], pathPeriodparentPeriodfield: Option[String], pathPeriodexactPeriodfield: Option[String], catchPeriodallPeriodfield: Option[String], collapsedPeriodpathPeriodfield: Option[String], pathPerioddepthPeriodfield: Option[String], commitPeriodpolicy: Option[String], rows: Option[Int], pathPeriodrestrictions: Option[Boolean], propertyPeriodrestrictions: Option[Boolean], primarytypesPeriodrestrictions: Option[Boolean], ignoredPeriodproperties: Seq[String], usedPeriodproperties: Seq[String], typePeriodmappings: Seq[String], propertyPeriodmappings: Seq[String], collapsePeriodjcrcontentPeriodnodes: Option[Boolean]) =>
          da.Configmgr_orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(post, apply, delete, action, Dollarlocation, propertylist, pathPerioddescPeriodfield, pathPeriodchildPeriodfield, pathPeriodparentPeriodfield, pathPeriodexactPeriodfield, catchPeriodallPeriodfield, collapsedPeriodpathPeriodfield, pathPerioddepthPeriodfield, commitPeriodpolicy, rows, pathPeriodrestrictions, propertyPeriodrestrictions, primarytypesPeriodrestrictions, ignoredPeriodproperties, usedPeriodproperties, typePeriodmappings, propertyPeriodmappings, collapsePeriodjcrcontentPeriodnodes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo
        */
        private def orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("solr.http.url") :: paramOption("solr.zk.host") :: paramOption("solr.collection") :: paramOption("solr.socket.timeout").map(_.map(_.toInt)) :: paramOption("solr.connection.timeout").map(_.map(_.toInt)) :: paramOption("solr.shards.no").map(_.map(_.toInt)) :: paramOption("solr.replication.factor").map(_.map(_.toInt)) :: paramOption("solr.conf.dir")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], solrPeriodhttpPeriodurl: Option[String], solrPeriodzkPeriodhost: Option[String], solrPeriodcollection: Option[String], solrPeriodsocketPeriodtimeout: Option[Int], solrPeriodconnectionPeriodtimeout: Option[Int], solrPeriodshardsPeriodno: Option[Int], solrPeriodreplicationPeriodfactor: Option[Int], solrPeriodconfPerioddir: Option[String]) =>
          da.Configmgr_orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(post, apply, delete, action, Dollarlocation, propertylist, solrPeriodhttpPeriodurl, solrPeriodzkPeriodhost, solrPeriodcollection, solrPeriodsocketPeriodtimeout, solrPeriodconnectionPeriodtimeout, solrPeriodshardsPeriodno, solrPeriodreplicationPeriodfactor, solrPeriodconfPerioddir) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo
        */
        private def orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("query.aggregation").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], queryPeriodaggregation: Option[Boolean]) =>
          da.Configmgr_orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(post, apply, delete, action, Dollarlocation, propertylist, queryPeriodaggregation) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo
        */
        private def orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("server.type")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], serverPeriodtype: Option[String]) =>
          da.Configmgr_orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(post, apply, delete, action, Dollarlocation, propertylist, serverPeriodtype) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo
        */
        private def orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("providerType")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], providerType: Option[String]) =>
          da.Configmgr_orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(post, apply, delete, action, Dollarlocation, propertylist, providerType) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo
        */
        private def orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("maxItems").map(_.map(_.toInt)) :: paramOption("maxPathDepth").map(_.map(_.toInt)) :: paramOption("enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], maxItems: Option[Int], maxPathDepth: Option[Int], enabled: Option[Boolean]) =>
          da.Configmgr_orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(post, apply, delete, action, Dollarlocation, propertylist, maxItems, maxPathDepth, enabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo
        */
        private def orgApacheJackrabbitOakQueryQueryEngineSettingsService(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.query.QueryEngineSettingsService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("queryLimitInMemory").map(_.map(_.toInt)) :: paramOption("queryLimitReads").map(_.map(_.toInt)) :: paramOption("queryFailTraversal").map(_.map(_.toBoolean)) :: paramOption("fastQuerySize").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], queryLimitInMemory: Option[Int], queryLimitReads: Option[Int], queryFailTraversal: Option[Boolean], fastQuerySize: Option[Boolean]) =>
          da.Configmgr_orgApacheJackrabbitOakQueryQueryEngineSettingsService(post, apply, delete, action, Dollarlocation, propertylist, queryLimitInMemory, queryLimitReads, queryFailTraversal, fastQuerySize) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo
        */
        private def orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("org.apache.jackrabbit.oak.authentication.appName") :: paramOption("org.apache.jackrabbit.oak.authentication.configSpiName")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodappName: Option[String], orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodconfigSpiName: Option[String]) =>
          da.Configmgr_orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodappName, orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodconfigSpiName) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo
        */
        private def orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("provider.name") :: paramOption("host.name") :: paramOption("host.port").map(_.map(_.toInt)) :: paramOption("host.ssl").map(_.map(_.toBoolean)) :: paramOption("host.tls").map(_.map(_.toBoolean)) :: paramOption("host.noCertCheck").map(_.map(_.toBoolean)) :: paramOption("bind.dn") :: paramOption("bind.password") :: paramOption("searchTimeout") :: paramOption("adminPool.maxActive").map(_.map(_.toInt)) :: paramOption("adminPool.lookupOnValidate").map(_.map(_.toBoolean)) :: paramOption("userPool.maxActive").map(_.map(_.toInt)) :: paramOption("userPool.lookupOnValidate").map(_.map(_.toBoolean)) :: paramOption("user.baseDN") :: params("user.objectclass") :: paramOption("user.idAttribute") :: paramOption("user.extraFilter") :: paramOption("user.makeDnPath").map(_.map(_.toBoolean)) :: paramOption("group.baseDN") :: params("group.objectclass") :: paramOption("group.nameAttribute") :: paramOption("group.extraFilter") :: paramOption("group.makeDnPath").map(_.map(_.toBoolean)) :: paramOption("group.memberAttribute") :: paramOption("useUidForExtId").map(_.map(_.toBoolean)) :: params("customattributes")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], providerPeriodname: Option[String], hostPeriodname: Option[String], hostPeriodport: Option[Int], hostPeriodssl: Option[Boolean], hostPeriodtls: Option[Boolean], hostPeriodnoCertCheck: Option[Boolean], bindPerioddn: Option[String], bindPeriodpassword: Option[String], searchTimeout: Option[String], adminPoolPeriodmaxActive: Option[Int], adminPoolPeriodlookupOnValidate: Option[Boolean], userPoolPeriodmaxActive: Option[Int], userPoolPeriodlookupOnValidate: Option[Boolean], userPeriodbaseDN: Option[String], userPeriodobjectclass: Seq[String], userPeriodidAttribute: Option[String], userPeriodextraFilter: Option[String], userPeriodmakeDnPath: Option[Boolean], groupPeriodbaseDN: Option[String], groupPeriodobjectclass: Seq[String], groupPeriodnameAttribute: Option[String], groupPeriodextraFilter: Option[String], groupPeriodmakeDnPath: Option[Boolean], groupPeriodmemberAttribute: Option[String], useUidForExtId: Option[Boolean], customattributes: Seq[String]) =>
          da.Configmgr_orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(post, apply, delete, action, Dollarlocation, propertylist, providerPeriodname, hostPeriodname, hostPeriodport, hostPeriodssl, hostPeriodtls, hostPeriodnoCertCheck, bindPerioddn, bindPeriodpassword, searchTimeout, adminPoolPeriodmaxActive, adminPoolPeriodlookupOnValidate, userPoolPeriodmaxActive, userPoolPeriodlookupOnValidate, userPeriodbaseDN, userPeriodobjectclass, userPeriodidAttribute, userPeriodextraFilter, userPeriodmakeDnPath, groupPeriodbaseDN, groupPeriodobjectclass, groupPeriodnameAttribute, groupPeriodextraFilter, groupPeriodmakeDnPath, groupPeriodmemberAttribute, useUidForExtId, customattributes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo
        */
        private def orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("tokenExpiration") :: paramOption("tokenLength") :: paramOption("tokenRefresh").map(_.map(_.toBoolean)) :: paramOption("tokenCleanupThreshold").map(_.map(_.toInt)) :: paramOption("passwordHashAlgorithm") :: paramOption("passwordHashIterations").map(_.map(_.toInt)) :: paramOption("passwordSaltSize").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], tokenExpiration: Option[String], tokenLength: Option[String], tokenRefresh: Option[Boolean], tokenCleanupThreshold: Option[Int], passwordHashAlgorithm: Option[String], passwordHashIterations: Option[Int], passwordSaltSize: Option[Int]) =>
          da.Configmgr_orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(post, apply, delete, action, Dollarlocation, propertylist, tokenExpiration, tokenLength, tokenRefresh, tokenCleanupThreshold, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo
        */
        private def orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("permissionsJr2") :: paramOption("importBehavior") :: params("readPaths") :: params("administrativePrincipals") :: paramOption("configurationRanking").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], permissionsJr2: Option[String], importBehavior: Option[String], readPaths: Seq[String], administrativePrincipals: Seq[String], configurationRanking: Option[Int]) =>
          da.Configmgr_orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(post, apply, delete, action, Dollarlocation, propertylist, permissionsJr2, importBehavior, readPaths, administrativePrincipals, configurationRanking) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo
        */
        private def orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("requiredServicePids") :: paramOption("authorizationCompositionType")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], requiredServicePids: Seq[String], authorizationCompositionType: Option[String]) =>
          da.Configmgr_orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(post, apply, delete, action, Dollarlocation, propertylist, requiredServicePids, authorizationCompositionType) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo
        */
        private def orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("length").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], length: Option[Int]) =>
          da.Configmgr_orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(post, apply, delete, action, Dollarlocation, propertylist, length) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo
        */
        private def orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.security.user.UserConfigurationImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("usersPath") :: paramOption("groupsPath") :: paramOption("systemRelativePath") :: paramOption("defaultDepth").map(_.map(_.toInt)) :: paramOption("importBehavior") :: paramOption("passwordHashAlgorithm") :: paramOption("passwordHashIterations").map(_.map(_.toInt)) :: paramOption("passwordSaltSize").map(_.map(_.toInt)) :: paramOption("omitAdminPw").map(_.map(_.toBoolean)) :: paramOption("supportAutoSave").map(_.map(_.toBoolean)) :: paramOption("passwordMaxAge").map(_.map(_.toInt)) :: paramOption("initialPasswordChange").map(_.map(_.toBoolean)) :: paramOption("passwordHistorySize").map(_.map(_.toInt)) :: paramOption("passwordExpiryForAdmin").map(_.map(_.toBoolean)) :: paramOption("cacheExpiration").map(_.map(_.toInt)) :: paramOption("enableRFC7613UsercaseMappedProfile").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], usersPath: Option[String], groupsPath: Option[String], systemRelativePath: Option[String], defaultDepth: Option[Int], importBehavior: Option[String], passwordHashAlgorithm: Option[String], passwordHashIterations: Option[Int], passwordSaltSize: Option[Int], omitAdminPw: Option[Boolean], supportAutoSave: Option[Boolean], passwordMaxAge: Option[Int], initialPasswordChange: Option[Boolean], passwordHistorySize: Option[Int], passwordExpiryForAdmin: Option[Boolean], cacheExpiration: Option[Int], enableRFC7613UsercaseMappedProfile: Option[Boolean]) =>
          da.Configmgr_orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(post, apply, delete, action, Dollarlocation, propertylist, usersPath, groupsPath, systemRelativePath, defaultDepth, importBehavior, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize, omitAdminPw, supportAutoSave, passwordMaxAge, initialPasswordChange, passwordHistorySize, passwordExpiryForAdmin, cacheExpiration, enableRFC7613UsercaseMappedProfile) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo
        */
        private def orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("accountName") :: paramOption("containerName") :: paramOption("accessKey") :: paramOption("rootPath") :: paramOption("connectionURL")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], accountName: Option[String], containerName: Option[String], accessKey: Option[String], rootPath: Option[String], connectionURL: Option[String]) =>
          da.Configmgr_orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(post, apply, delete, action, Dollarlocation, propertylist, accountName, containerName, accessKey, rootPath, connectionURL) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo
        */
        private def orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("repository.home") :: paramOption("tarmk.mode") :: paramOption("tarmk.size").map(_.map(_.toInt)) :: paramOption("segmentCache.size").map(_.map(_.toInt)) :: paramOption("stringCache.size").map(_.map(_.toInt)) :: paramOption("templateCache.size").map(_.map(_.toInt)) :: paramOption("stringDeduplicationCache.size").map(_.map(_.toInt)) :: paramOption("templateDeduplicationCache.size").map(_.map(_.toInt)) :: paramOption("nodeDeduplicationCache.size").map(_.map(_.toInt)) :: paramOption("pauseCompaction").map(_.map(_.toBoolean)) :: paramOption("compaction.retryCount").map(_.map(_.toInt)) :: paramOption("compaction.force.timeout").map(_.map(_.toInt)) :: paramOption("compaction.sizeDeltaEstimation").map(_.map(_.toInt)) :: paramOption("compaction.disableEstimation").map(_.map(_.toBoolean)) :: paramOption("compaction.retainedGenerations").map(_.map(_.toInt)) :: paramOption("compaction.memoryThreshold").map(_.map(_.toInt)) :: paramOption("compaction.progressLog").map(_.map(_.toInt)) :: paramOption("standby").map(_.map(_.toBoolean)) :: paramOption("customBlobStore").map(_.map(_.toBoolean)) :: paramOption("customSegmentStore").map(_.map(_.toBoolean)) :: paramOption("splitPersistence").map(_.map(_.toBoolean)) :: paramOption("repository.backup.dir") :: paramOption("blobGcMaxAgeInSecs").map(_.map(_.toInt)) :: paramOption("blobTrackSnapshotIntervalInSecs").map(_.map(_.toInt)) :: paramOption("role") :: paramOption("registerDescriptors").map(_.map(_.toBoolean)) :: paramOption("dispatchChanges").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], repositoryPeriodhome: Option[String], tarmkPeriodmode: Option[String], tarmkPeriodsize: Option[Int], segmentCachePeriodsize: Option[Int], stringCachePeriodsize: Option[Int], templateCachePeriodsize: Option[Int], stringDeduplicationCachePeriodsize: Option[Int], templateDeduplicationCachePeriodsize: Option[Int], nodeDeduplicationCachePeriodsize: Option[Int], pauseCompaction: Option[Boolean], compactionPeriodretryCount: Option[Int], compactionPeriodforcePeriodtimeout: Option[Int], compactionPeriodsizeDeltaEstimation: Option[Int], compactionPerioddisableEstimation: Option[Boolean], compactionPeriodretainedGenerations: Option[Int], compactionPeriodmemoryThreshold: Option[Int], compactionPeriodprogressLog: Option[Int], standby: Option[Boolean], customBlobStore: Option[Boolean], customSegmentStore: Option[Boolean], splitPersistence: Option[Boolean], repositoryPeriodbackupPerioddir: Option[String], blobGcMaxAgeInSecs: Option[Int], blobTrackSnapshotIntervalInSecs: Option[Int], role: Option[String], registerDescriptors: Option[Boolean], dispatchChanges: Option[Boolean]) =>
          da.Configmgr_orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(post, apply, delete, action, Dollarlocation, propertylist, repositoryPeriodhome, tarmkPeriodmode, tarmkPeriodsize, segmentCachePeriodsize, stringCachePeriodsize, templateCachePeriodsize, stringDeduplicationCachePeriodsize, templateDeduplicationCachePeriodsize, nodeDeduplicationCachePeriodsize, pauseCompaction, compactionPeriodretryCount, compactionPeriodforcePeriodtimeout, compactionPeriodsizeDeltaEstimation, compactionPerioddisableEstimation, compactionPeriodretainedGenerations, compactionPeriodmemoryThreshold, compactionPeriodprogressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryPeriodbackupPerioddir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, role, registerDescriptors, dispatchChanges) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo
        */
        private def orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("commitsTrackerWriterGroups")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], commitsTrackerWriterGroups: Seq[String]) =>
          da.Configmgr_orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(post, apply, delete, action, Dollarlocation, propertylist, commitsTrackerWriterGroups) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo
        */
        private def orgApacheJackrabbitOakSegmentSegmentNodeStoreService(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.segment.SegmentNodeStoreService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("repository.home") :: paramOption("tarmk.mode") :: paramOption("tarmk.size").map(_.map(_.toInt)) :: paramOption("segmentCache.size").map(_.map(_.toInt)) :: paramOption("stringCache.size").map(_.map(_.toInt)) :: paramOption("templateCache.size").map(_.map(_.toInt)) :: paramOption("stringDeduplicationCache.size").map(_.map(_.toInt)) :: paramOption("templateDeduplicationCache.size").map(_.map(_.toInt)) :: paramOption("nodeDeduplicationCache.size").map(_.map(_.toInt)) :: paramOption("pauseCompaction").map(_.map(_.toBoolean)) :: paramOption("compaction.retryCount").map(_.map(_.toInt)) :: paramOption("compaction.force.timeout").map(_.map(_.toInt)) :: paramOption("compaction.sizeDeltaEstimation").map(_.map(_.toInt)) :: paramOption("compaction.disableEstimation").map(_.map(_.toBoolean)) :: paramOption("compaction.retainedGenerations").map(_.map(_.toInt)) :: paramOption("compaction.memoryThreshold").map(_.map(_.toInt)) :: paramOption("compaction.progressLog").map(_.map(_.toInt)) :: paramOption("standby").map(_.map(_.toBoolean)) :: paramOption("customBlobStore").map(_.map(_.toBoolean)) :: paramOption("customSegmentStore").map(_.map(_.toBoolean)) :: paramOption("splitPersistence").map(_.map(_.toBoolean)) :: paramOption("repository.backup.dir") :: paramOption("blobGcMaxAgeInSecs").map(_.map(_.toInt)) :: paramOption("blobTrackSnapshotIntervalInSecs").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], repositoryPeriodhome: Option[String], tarmkPeriodmode: Option[String], tarmkPeriodsize: Option[Int], segmentCachePeriodsize: Option[Int], stringCachePeriodsize: Option[Int], templateCachePeriodsize: Option[Int], stringDeduplicationCachePeriodsize: Option[Int], templateDeduplicationCachePeriodsize: Option[Int], nodeDeduplicationCachePeriodsize: Option[Int], pauseCompaction: Option[Boolean], compactionPeriodretryCount: Option[Int], compactionPeriodforcePeriodtimeout: Option[Int], compactionPeriodsizeDeltaEstimation: Option[Int], compactionPerioddisableEstimation: Option[Boolean], compactionPeriodretainedGenerations: Option[Int], compactionPeriodmemoryThreshold: Option[Int], compactionPeriodprogressLog: Option[Int], standby: Option[Boolean], customBlobStore: Option[Boolean], customSegmentStore: Option[Boolean], splitPersistence: Option[Boolean], repositoryPeriodbackupPerioddir: Option[String], blobGcMaxAgeInSecs: Option[Int], blobTrackSnapshotIntervalInSecs: Option[Int]) =>
          da.Configmgr_orgApacheJackrabbitOakSegmentSegmentNodeStoreService(post, apply, delete, action, Dollarlocation, propertylist, repositoryPeriodhome, tarmkPeriodmode, tarmkPeriodsize, segmentCachePeriodsize, stringCachePeriodsize, templateCachePeriodsize, stringDeduplicationCachePeriodsize, templateDeduplicationCachePeriodsize, nodeDeduplicationCachePeriodsize, pauseCompaction, compactionPeriodretryCount, compactionPeriodforcePeriodtimeout, compactionPeriodsizeDeltaEstimation, compactionPerioddisableEstimation, compactionPeriodretainedGenerations, compactionPeriodmemoryThreshold, compactionPeriodprogressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryPeriodbackupPerioddir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo
        */
        private def orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("org.apache.sling.installer.configuration.persist").map(_.map(_.toBoolean)) :: paramOption("mode") :: paramOption("port").map(_.map(_.toInt)) :: paramOption("primary.host") :: paramOption("interval").map(_.map(_.toInt)) :: params("primary.allowed-client-ip-ranges") :: paramOption("secure").map(_.map(_.toBoolean)) :: paramOption("standby.readtimeout").map(_.map(_.toInt)) :: paramOption("standby.autoclean").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist: Option[Boolean], mode: Option[String], port: Option[Int], primaryPeriodhost: Option[String], interval: Option[Int], primaryPeriodallowedClientIpRanges: Seq[String], secure: Option[Boolean], standbyPeriodreadtimeout: Option[Int], standbyPeriodautoclean: Option[Boolean]) =>
          da.Configmgr_orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist, mode, port, primaryPeriodhost, interval, primaryPeriodallowedClientIpRanges, secure, standbyPeriodreadtimeout, standbyPeriodautoclean) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo
        */
        private def orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("handler.name") :: paramOption("user.expirationTime") :: params("user.autoMembership") :: params("user.propertyMapping") :: paramOption("user.pathPrefix") :: paramOption("user.membershipExpTime") :: paramOption("user.membershipNestingDepth").map(_.map(_.toInt)) :: paramOption("user.dynamicMembership").map(_.map(_.toBoolean)) :: paramOption("user.disableMissing").map(_.map(_.toBoolean)) :: paramOption("group.expirationTime") :: params("group.autoMembership") :: params("group.propertyMapping") :: paramOption("group.pathPrefix") :: paramOption("enableRFC7613UsercaseMappedProfile").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], handlerPeriodname: Option[String], userPeriodexpirationTime: Option[String], userPeriodautoMembership: Seq[String], userPeriodpropertyMapping: Seq[String], userPeriodpathPrefix: Option[String], userPeriodmembershipExpTime: Option[String], userPeriodmembershipNestingDepth: Option[Int], userPerioddynamicMembership: Option[Boolean], userPerioddisableMissing: Option[Boolean], groupPeriodexpirationTime: Option[String], groupPeriodautoMembership: Seq[String], groupPeriodpropertyMapping: Seq[String], groupPeriodpathPrefix: Option[String], enableRFC7613UsercaseMappedProfile: Option[Boolean]) =>
          da.Configmgr_orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(post, apply, delete, action, Dollarlocation, propertylist, handlerPeriodname, userPeriodexpirationTime, userPeriodautoMembership, userPeriodpropertyMapping, userPeriodpathPrefix, userPeriodmembershipExpTime, userPeriodmembershipNestingDepth, userPerioddynamicMembership, userPerioddisableMissing, groupPeriodexpirationTime, groupPeriodautoMembership, groupPeriodpropertyMapping, groupPeriodpathPrefix, enableRFC7613UsercaseMappedProfile) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo
        */
        private def orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("jaas.ranking").map(_.map(_.toInt)) :: paramOption("jaas.controlFlag") :: paramOption("jaas.realmName") :: paramOption("idp.name") :: paramOption("sync.handlerName")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], jaasPeriodranking: Option[Int], jaasPeriodcontrolFlag: Option[String], jaasPeriodrealmName: Option[String], idpPeriodname: Option[String], syncPeriodhandlerName: Option[String]) =>
          da.Configmgr_orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(post, apply, delete, action, Dollarlocation, propertylist, jaasPeriodranking, jaasPeriodcontrolFlag, jaasPeriodrealmName, idpPeriodname, syncPeriodhandlerName) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo
        */
        private def orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("protectExternalId").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], protectExternalId: Option[Boolean]) =>
          da.Configmgr_orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(post, apply, delete, action, Dollarlocation, propertylist, protectExternalId) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo
        */
        private def orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("cugSupportedPaths") :: paramOption("cugEnabled").map(_.map(_.toBoolean)) :: paramOption("configurationRanking").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], cugSupportedPaths: Seq[String], cugEnabled: Option[Boolean], configurationRanking: Option[Int]) =>
          da.Configmgr_orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(post, apply, delete, action, Dollarlocation, propertylist, cugSupportedPaths, cugEnabled, configurationRanking) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo
        */
        private def orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("principalNames")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], principalNames: Seq[String]) =>
          da.Configmgr_orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(post, apply, delete, action, Dollarlocation, propertylist, principalNames) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo
        */
        private def orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(da: DataAccessor): Endpoint[OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enabledActions") :: params("userPrivilegeNames") :: params("groupPrivilegeNames") :: paramOption("constraint")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enabledActions: Option[String], userPrivilegeNames: Seq[String], groupPrivilegeNames: Seq[String], constraint: Option[String]) =>
          da.Configmgr_orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(post, apply, delete, action, Dollarlocation, propertylist, enabledActions, userPrivilegeNames, groupPrivilegeNames, constraint) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo
        */
        private def orgApacheJackrabbitVaultPackagingImplPackagingImpl(da: DataAccessor): Endpoint[OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.vault.packaging.impl.PackagingImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("packageRoots")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], packageRoots: Seq[String]) =>
          da.Configmgr_orgApacheJackrabbitVaultPackagingImplPackagingImpl(post, apply, delete, action, Dollarlocation, propertylist, packageRoots) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo
        */
        private def orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(da: DataAccessor): Endpoint[OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("homePath")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], homePath: Option[String]) =>
          da.Configmgr_orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(post, apply, delete, action, Dollarlocation, propertylist, homePath) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingAuthCoreImplLogoutServletInfo
        */
        private def orgApacheSlingAuthCoreImplLogoutServlet(da: DataAccessor): Endpoint[OrgApacheSlingAuthCoreImplLogoutServletInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.auth.core.impl.LogoutServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("sling.servlet.methods") :: paramOption("sling.servlet.paths")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], slingPeriodservletPeriodmethods: Seq[String], slingPeriodservletPeriodpaths: Option[String]) =>
          da.Configmgr_orgApacheSlingAuthCoreImplLogoutServlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodmethods, slingPeriodservletPeriodpaths) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo
        */
        private def orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(da: DataAccessor): Endpoint[OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enabled: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(post, apply, delete, action, Dollarlocation, propertylist, enabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingCaconfigImplConfigurationResolverImplInfo
        */
        private def orgApacheSlingCaconfigImplConfigurationResolverImpl(da: DataAccessor): Endpoint[OrgApacheSlingCaconfigImplConfigurationResolverImplInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.caconfig.impl.ConfigurationResolverImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("configBucketNames")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], configBucketNames: Seq[String]) =>
          da.Configmgr_orgApacheSlingCaconfigImplConfigurationResolverImpl(post, apply, delete, action, Dollarlocation, propertylist, configBucketNames) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo
        */
        private def orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(da: DataAccessor): Endpoint[OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enabled").map(_.map(_.toBoolean)) :: params("configPropertyInheritancePropertyNames")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enabled: Option[Boolean], configPropertyInheritancePropertyNames: Seq[String]) =>
          da.Configmgr_orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(post, apply, delete, action, Dollarlocation, propertylist, enabled, configPropertyInheritancePropertyNames) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo
        */
        private def orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(da: DataAccessor): Endpoint[OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enabled: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(post, apply, delete, action, Dollarlocation, propertylist, enabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo
        */
        private def orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(da: DataAccessor): Endpoint[OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("description") :: params("overrides") :: paramOption("enabled").map(_.map(_.toBoolean)) :: paramOption("service.ranking").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], description: Option[String], overrides: Seq[String], enabled: Option[Boolean], servicePeriodranking: Option[Int]) =>
          da.Configmgr_orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(post, apply, delete, action, Dollarlocation, propertylist, description, overrides, enabled, servicePeriodranking) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo
        */
        private def orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(da: DataAccessor): Endpoint[OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enabled").map(_.map(_.toBoolean)) :: paramOption("service.ranking").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enabled: Option[Boolean], servicePeriodranking: Option[Int]) =>
          da.Configmgr_orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(post, apply, delete, action, Dollarlocation, propertylist, enabled, servicePeriodranking) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo
        */
        private def orgApacheSlingCaconfigManagementImplConfigurationManagementSetti(da: DataAccessor): Endpoint[OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("ignorePropertyNameRegex") :: params("configCollectionPropertiesResourceNames")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], ignorePropertyNameRegex: Seq[String], configCollectionPropertiesResourceNames: Seq[String]) =>
          da.Configmgr_orgApacheSlingCaconfigManagementImplConfigurationManagementSetti(post, apply, delete, action, Dollarlocation, propertylist, ignorePropertyNameRegex, configCollectionPropertiesResourceNames) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo
        */
        private def orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(da: DataAccessor): Endpoint[OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enabled").map(_.map(_.toBoolean)) :: paramOption("configPath") :: params("fallbackPaths") :: params("configCollectionInheritancePropertyNames")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enabled: Option[Boolean], configPath: Option[String], fallbackPaths: Seq[String], configCollectionInheritancePropertyNames: Seq[String]) =>
          da.Configmgr_orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(post, apply, delete, action, Dollarlocation, propertylist, enabled, configPath, fallbackPaths, configCollectionInheritancePropertyNames) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo
        */
        private def orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(da: DataAccessor): Endpoint[OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("enabled").map(_.map(_.toBoolean)) :: params("configRefResourceNames") :: params("configRefPropertyNames") :: paramOption("service.ranking").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], enabled: Option[Boolean], configRefResourceNames: Seq[String], configRefPropertyNames: Seq[String], servicePeriodranking: Option[Int]) =>
          da.Configmgr_orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(post, apply, delete, action, Dollarlocation, propertylist, enabled, configRefResourceNames, configRefPropertyNames, servicePeriodranking) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo
        */
        private def orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(da: DataAccessor): Endpoint[OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.commons.html.internal.TagsoupHtmlParser" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("parser.features")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], parserPeriodfeatures: Seq[String]) =>
          da.Configmgr_orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(post, apply, delete, action, Dollarlocation, propertylist, parserPeriodfeatures) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingCommonsLogLogManagerInfo
        */
        private def orgApacheSlingCommonsLogLogManager(da: DataAccessor): Endpoint[OrgApacheSlingCommonsLogLogManagerInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.commons.log.LogManager" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("org.apache.sling.commons.log.level") :: paramOption("org.apache.sling.commons.log.file") :: paramOption("org.apache.sling.commons.log.file.number").map(_.map(_.toInt)) :: paramOption("org.apache.sling.commons.log.file.size") :: paramOption("org.apache.sling.commons.log.pattern") :: paramOption("org.apache.sling.commons.log.configurationFile") :: paramOption("org.apache.sling.commons.log.packagingDataEnabled").map(_.map(_.toBoolean)) :: paramOption("org.apache.sling.commons.log.maxCallerDataDepth").map(_.map(_.toInt)) :: paramOption("org.apache.sling.commons.log.maxOldFileCountInDump").map(_.map(_.toInt)) :: paramOption("org.apache.sling.commons.log.numOfLines").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel: Option[String], orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile: Option[String], orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber: Option[Int], orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize: Option[String], orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern: Option[String], orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodconfigurationFile: Option[String], orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpackagingDataEnabled: Option[Boolean], orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxCallerDataDepth: Option[Int], orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxOldFileCountInDump: Option[Int], orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnumOfLines: Option[Int]) =>
          da.Configmgr_orgApacheSlingCommonsLogLogManager(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodconfigurationFile, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpackagingDataEnabled, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxCallerDataDepth, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxOldFileCountInDump, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnumOfLines) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo
        */
        private def orgApacheSlingCommonsLogLogManagerFactoryConfig(da: DataAccessor): Endpoint[OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.commons.log.LogManager.factory.config" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("org.apache.sling.commons.log.level") :: paramOption("org.apache.sling.commons.log.file") :: paramOption("org.apache.sling.commons.log.pattern") :: params("org.apache.sling.commons.log.names") :: paramOption("org.apache.sling.commons.log.additiv").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel: Option[String], orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile: Option[String], orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern: Option[String], orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnames: Seq[String], orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodadditiv: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingCommonsLogLogManagerFactoryConfig(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnames, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodadditiv) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo
        */
        private def orgApacheSlingCommonsLogLogManagerFactoryWriter(da: DataAccessor): Endpoint[OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.commons.log.LogManager.factory.writer" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("org.apache.sling.commons.log.file") :: paramOption("org.apache.sling.commons.log.file.number").map(_.map(_.toInt)) :: paramOption("org.apache.sling.commons.log.file.size") :: paramOption("org.apache.sling.commons.log.file.buffered").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile: Option[String], orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber: Option[Int], orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize: Option[String], orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodbuffered: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingCommonsLogLogManagerFactoryWriter(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize, orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodbuffered) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingCommonsMetricsInternalLogReporterInfo
        */
        private def orgApacheSlingCommonsMetricsInternalLogReporter(da: DataAccessor): Endpoint[OrgApacheSlingCommonsMetricsInternalLogReporterInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.commons.metrics.internal.LogReporter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("period").map(_.map(_.toInt)) :: paramOption("timeUnit") :: paramOption("level") :: paramOption("loggerName") :: paramOption("prefix") :: paramOption("pattern") :: paramOption("registryName")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], period: Option[Int], timeUnit: Option[String], level: Option[String], loggerName: Option[String], prefix: Option[String], pattern: Option[String], registryName: Option[String]) =>
          da.Configmgr_orgApacheSlingCommonsMetricsInternalLogReporter(post, apply, delete, action, Dollarlocation, propertylist, period, timeUnit, level, loggerName, prefix, pattern, registryName) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo
        */
        private def orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(da: DataAccessor): Endpoint[OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("datasources") :: paramOption("step").map(_.map(_.toInt)) :: params("archives") :: paramOption("path")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], datasources: Seq[String], step: Option[Int], archives: Seq[String], path: Option[String]) =>
          da.Configmgr_orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(post, apply, delete, action, Dollarlocation, propertylist, datasources, step, archives, path) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo
        */
        private def orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(da: DataAccessor): Endpoint[OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.commons.mime.internal.MimeTypeServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("mime.types")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], mimePeriodtypes: Seq[String]) =>
          da.Configmgr_orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, mimePeriodtypes) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo
        */
        private def orgApacheSlingCommonsSchedulerImplQuartzScheduler(da: DataAccessor): Endpoint[OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.commons.scheduler.impl.QuartzScheduler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("poolName") :: params("allowedPoolNames") :: paramOption("scheduler.useleaderforsingle").map(_.map(_.toBoolean)) :: params("metrics.filters") :: paramOption("slowThresholdMillis").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], poolName: Option[String], allowedPoolNames: Seq[String], schedulerPerioduseleaderforsingle: Option[Boolean], metricsPeriodfilters: Seq[String], slowThresholdMillis: Option[Int]) =>
          da.Configmgr_orgApacheSlingCommonsSchedulerImplQuartzScheduler(post, apply, delete, action, Dollarlocation, propertylist, poolName, allowedPoolNames, schedulerPerioduseleaderforsingle, metricsPeriodfilters, slowThresholdMillis) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo
        */
        private def orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(da: DataAccessor): Endpoint[OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("max.quartzJob.duration.acceptable").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], maxPeriodquartzJobPerioddurationPeriodacceptable: Option[Int]) =>
          da.Configmgr_orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, maxPeriodquartzJobPerioddurationPeriodacceptable) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo
        */
        private def orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(da: DataAccessor): Endpoint[OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.commons.threads.impl.DefaultThreadPool.factory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("minPoolSize").map(_.map(_.toInt)) :: paramOption("maxPoolSize").map(_.map(_.toInt)) :: paramOption("queueSize").map(_.map(_.toInt)) :: paramOption("maxThreadAge").map(_.map(_.toInt)) :: paramOption("keepAliveTime").map(_.map(_.toInt)) :: paramOption("blockPolicy") :: paramOption("shutdownGraceful").map(_.map(_.toBoolean)) :: paramOption("daemon").map(_.map(_.toBoolean)) :: paramOption("shutdownWaitTime").map(_.map(_.toInt)) :: paramOption("priority")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], minPoolSize: Option[Int], maxPoolSize: Option[Int], queueSize: Option[Int], maxThreadAge: Option[Int], keepAliveTime: Option[Int], blockPolicy: Option[String], shutdownGraceful: Option[Boolean], daemon: Option[Boolean], shutdownWaitTime: Option[Int], priority: Option[String]) =>
          da.Configmgr_orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(post, apply, delete, action, Dollarlocation, propertylist, name, minPoolSize, maxPoolSize, queueSize, maxThreadAge, keepAliveTime, blockPolicy, shutdownGraceful, daemon, shutdownWaitTime, priority) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDatasourceDataSourceFactoryInfo
        */
        private def orgApacheSlingDatasourceDataSourceFactory(da: DataAccessor): Endpoint[OrgApacheSlingDatasourceDataSourceFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.datasource.DataSourceFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("datasource.name") :: paramOption("datasource.svc.prop.name") :: paramOption("driverClassName") :: paramOption("url") :: paramOption("username") :: paramOption("password") :: paramOption("defaultAutoCommit") :: paramOption("defaultReadOnly") :: paramOption("defaultTransactionIsolation") :: paramOption("defaultCatalog") :: paramOption("maxActive").map(_.map(_.toInt)) :: paramOption("maxIdle").map(_.map(_.toInt)) :: paramOption("minIdle").map(_.map(_.toInt)) :: paramOption("initialSize").map(_.map(_.toInt)) :: paramOption("maxWait").map(_.map(_.toInt)) :: paramOption("maxAge").map(_.map(_.toInt)) :: paramOption("testOnBorrow").map(_.map(_.toBoolean)) :: paramOption("testOnReturn").map(_.map(_.toBoolean)) :: paramOption("testWhileIdle").map(_.map(_.toBoolean)) :: paramOption("validationQuery") :: paramOption("validationQueryTimeout").map(_.map(_.toInt)) :: paramOption("timeBetweenEvictionRunsMillis").map(_.map(_.toInt)) :: paramOption("minEvictableIdleTimeMillis").map(_.map(_.toInt)) :: paramOption("connectionProperties") :: paramOption("initSQL") :: paramOption("jdbcInterceptors") :: paramOption("validationInterval").map(_.map(_.toInt)) :: paramOption("logValidationErrors").map(_.map(_.toBoolean)) :: params("datasource.svc.properties")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], datasourcePeriodname: Option[String], datasourcePeriodsvcPeriodpropPeriodname: Option[String], driverClassName: Option[String], url: Option[String], username: Option[String], password: Option[String], defaultAutoCommit: Option[String], defaultReadOnly: Option[String], defaultTransactionIsolation: Option[String], defaultCatalog: Option[String], maxActive: Option[Int], maxIdle: Option[Int], minIdle: Option[Int], initialSize: Option[Int], maxWait: Option[Int], maxAge: Option[Int], testOnBorrow: Option[Boolean], testOnReturn: Option[Boolean], testWhileIdle: Option[Boolean], validationQuery: Option[String], validationQueryTimeout: Option[Int], timeBetweenEvictionRunsMillis: Option[Int], minEvictableIdleTimeMillis: Option[Int], connectionProperties: Option[String], initSQL: Option[String], jdbcInterceptors: Option[String], validationInterval: Option[Int], logValidationErrors: Option[Boolean], datasourcePeriodsvcPeriodproperties: Seq[String]) =>
          da.Configmgr_orgApacheSlingDatasourceDataSourceFactory(post, apply, delete, action, Dollarlocation, propertylist, datasourcePeriodname, datasourcePeriodsvcPeriodpropPeriodname, driverClassName, url, username, password, defaultAutoCommit, defaultReadOnly, defaultTransactionIsolation, defaultCatalog, maxActive, maxIdle, minIdle, initialSize, maxWait, maxAge, testOnBorrow, testOnReturn, testWhileIdle, validationQuery, validationQueryTimeout, timeBetweenEvictionRunsMillis, minEvictableIdleTimeMillis, connectionProperties, initSQL, jdbcInterceptors, validationInterval, logValidationErrors, datasourcePeriodsvcPeriodproperties) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo
        */
        private def orgApacheSlingDatasourceJNDIDataSourceFactory(da: DataAccessor): Endpoint[OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.datasource.JNDIDataSourceFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("datasource.name") :: paramOption("datasource.svc.prop.name") :: paramOption("datasource.jndi.name") :: params("jndi.properties")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], datasourcePeriodname: Option[String], datasourcePeriodsvcPeriodpropPeriodname: Option[String], datasourcePeriodjndiPeriodname: Option[String], jndiPeriodproperties: Seq[String]) =>
          da.Configmgr_orgApacheSlingDatasourceJNDIDataSourceFactory(post, apply, delete, action, Dollarlocation, propertylist, datasourcePeriodname, datasourcePeriodsvcPeriodpropPeriodname, datasourcePeriodjndiPeriodname, jndiPeriodproperties) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDiscoveryOakConfigInfo
        */
        private def orgApacheSlingDiscoveryOakConfig(da: DataAccessor): Endpoint[OrgApacheSlingDiscoveryOakConfigInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.discovery.oak.Config" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("connectorPingTimeout").map(_.map(_.toInt)) :: paramOption("connectorPingInterval").map(_.map(_.toInt)) :: paramOption("discoveryLiteCheckInterval").map(_.map(_.toInt)) :: paramOption("clusterSyncServiceTimeout").map(_.map(_.toInt)) :: paramOption("clusterSyncServiceInterval").map(_.map(_.toInt)) :: paramOption("enableSyncToken").map(_.map(_.toBoolean)) :: paramOption("minEventDelay").map(_.map(_.toInt)) :: paramOption("socketConnectTimeout").map(_.map(_.toInt)) :: paramOption("soTimeout").map(_.map(_.toInt)) :: params("topologyConnectorUrls") :: params("topologyConnectorWhitelist") :: paramOption("autoStopLocalLoopEnabled").map(_.map(_.toBoolean)) :: paramOption("gzipConnectorRequestsEnabled").map(_.map(_.toBoolean)) :: paramOption("hmacEnabled").map(_.map(_.toBoolean)) :: paramOption("enableEncryption").map(_.map(_.toBoolean)) :: paramOption("sharedKey") :: paramOption("hmacSharedKeyTTL").map(_.map(_.toInt)) :: paramOption("backoffStandbyFactor") :: paramOption("backoffStableFactor")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], connectorPingTimeout: Option[Int], connectorPingInterval: Option[Int], discoveryLiteCheckInterval: Option[Int], clusterSyncServiceTimeout: Option[Int], clusterSyncServiceInterval: Option[Int], enableSyncToken: Option[Boolean], minEventDelay: Option[Int], socketConnectTimeout: Option[Int], soTimeout: Option[Int], topologyConnectorUrls: Seq[String], topologyConnectorWhitelist: Seq[String], autoStopLocalLoopEnabled: Option[Boolean], gzipConnectorRequestsEnabled: Option[Boolean], hmacEnabled: Option[Boolean], enableEncryption: Option[Boolean], sharedKey: Option[String], hmacSharedKeyTTL: Option[Int], backoffStandbyFactor: Option[String], backoffStableFactor: Option[String]) =>
          da.Configmgr_orgApacheSlingDiscoveryOakConfig(post, apply, delete, action, Dollarlocation, propertylist, connectorPingTimeout, connectorPingInterval, discoveryLiteCheckInterval, clusterSyncServiceTimeout, clusterSyncServiceInterval, enableSyncToken, minEventDelay, socketConnectTimeout, soTimeout, topologyConnectorUrls, topologyConnectorWhitelist, autoStopLocalLoopEnabled, gzipConnectorRequestsEnabled, hmacEnabled, enableEncryption, sharedKey, hmacSharedKeyTTL, backoffStandbyFactor, backoffStableFactor) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo
        */
        private def orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(da: DataAccessor): Endpoint[OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("hc.name") :: params("hc.tags") :: paramOption("hc.mbean.name")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodname: Option[String], hcPeriodtags: Seq[String], hcPeriodmbeanPeriodname: Option[String]) =>
          da.Configmgr_orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodname, hcPeriodtags, hcPeriodmbeanPeriodname) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo
        */
        private def orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(da: DataAccessor): Endpoint[OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("title") :: paramOption("details") :: paramOption("enabled").map(_.map(_.toBoolean)) :: paramOption("serviceName") :: paramOption("log.level") :: params("allowed.roots") :: paramOption("queue.processing.enabled").map(_.map(_.toBoolean)) :: params("packageImporter.endpoints") :: params("passiveQueues") :: params("priorityQueues") :: paramOption("retry.strategy") :: paramOption("retry.attempts").map(_.map(_.toInt)) :: paramOption("requestAuthorizationStrategy.target") :: paramOption("transportSecretProvider.target") :: paramOption("packageBuilder.target") :: paramOption("triggers.target") :: paramOption("queue.provider") :: paramOption("async.delivery").map(_.map(_.toBoolean)) :: paramOption("http.conn.timeout").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], title: Option[String], details: Option[String], enabled: Option[Boolean], serviceName: Option[String], logPeriodlevel: Option[String], allowedPeriodroots: Seq[String], queuePeriodprocessingPeriodenabled: Option[Boolean], packageImporterPeriodendpoints: Seq[String], passiveQueues: Seq[String], priorityQueues: Seq[String], retryPeriodstrategy: Option[String], retryPeriodattempts: Option[Int], requestAuthorizationStrategyPeriodtarget: Option[String], transportSecretProviderPeriodtarget: Option[String], packageBuilderPeriodtarget: Option[String], triggersPeriodtarget: Option[String], queuePeriodprovider: Option[String], asyncPerioddelivery: Option[Boolean], httpPeriodconnPeriodtimeout: Option[Int]) =>
          da.Configmgr_orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(post, apply, delete, action, Dollarlocation, propertylist, name, title, details, enabled, serviceName, logPeriodlevel, allowedPeriodroots, queuePeriodprocessingPeriodenabled, packageImporterPeriodendpoints, passiveQueues, priorityQueues, retryPeriodstrategy, retryPeriodattempts, requestAuthorizationStrategyPeriodtarget, transportSecretProviderPeriodtarget, packageBuilderPeriodtarget, triggersPeriodtarget, queuePeriodprovider, asyncPerioddelivery, httpPeriodconnPeriodtimeout) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo
        */
        private def orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(da: DataAccessor): Endpoint[OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("jcrPrivilege")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], jcrPrivilege: Option[String]) =>
          da.Configmgr_orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(post, apply, delete, action, Dollarlocation, propertylist, name, jcrPrivilege) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo
        */
        private def orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(da: DataAccessor): Endpoint[OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("title") :: paramOption("details") :: paramOption("enabled").map(_.map(_.toBoolean)) :: paramOption("serviceName") :: paramOption("log.level") :: params("allowed.roots") :: paramOption("requestAuthorizationStrategy.target") :: paramOption("queueProviderFactory.target") :: paramOption("packageBuilder.target") :: paramOption("triggers.target") :: params("priorityQueues")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], title: Option[String], details: Option[String], enabled: Option[Boolean], serviceName: Option[String], logPeriodlevel: Option[String], allowedPeriodroots: Seq[String], requestAuthorizationStrategyPeriodtarget: Option[String], queueProviderFactoryPeriodtarget: Option[String], packageBuilderPeriodtarget: Option[String], triggersPeriodtarget: Option[String], priorityQueues: Seq[String]) =>
          da.Configmgr_orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(post, apply, delete, action, Dollarlocation, propertylist, name, title, details, enabled, serviceName, logPeriodlevel, allowedPeriodroots, requestAuthorizationStrategyPeriodtarget, queueProviderFactoryPeriodtarget, packageBuilderPeriodtarget, triggersPeriodtarget, priorityQueues) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo
        */
        private def orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(da: DataAccessor): Endpoint[OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("title") :: paramOption("details") :: paramOption("enabled").map(_.map(_.toBoolean)) :: paramOption("serviceName") :: paramOption("log.level") :: paramOption("queue.processing.enabled").map(_.map(_.toBoolean)) :: params("packageExporter.endpoints") :: paramOption("pull.items").map(_.map(_.toInt)) :: paramOption("http.conn.timeout").map(_.map(_.toInt)) :: paramOption("requestAuthorizationStrategy.target") :: paramOption("transportSecretProvider.target") :: paramOption("packageBuilder.target") :: paramOption("triggers.target")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], title: Option[String], details: Option[String], enabled: Option[Boolean], serviceName: Option[String], logPeriodlevel: Option[String], queuePeriodprocessingPeriodenabled: Option[Boolean], packageExporterPeriodendpoints: Seq[String], pullPerioditems: Option[Int], httpPeriodconnPeriodtimeout: Option[Int], requestAuthorizationStrategyPeriodtarget: Option[String], transportSecretProviderPeriodtarget: Option[String], packageBuilderPeriodtarget: Option[String], triggersPeriodtarget: Option[String]) =>
          da.Configmgr_orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(post, apply, delete, action, Dollarlocation, propertylist, name, title, details, enabled, serviceName, logPeriodlevel, queuePeriodprocessingPeriodenabled, packageExporterPeriodendpoints, pullPerioditems, httpPeriodconnPeriodtimeout, requestAuthorizationStrategyPeriodtarget, transportSecretProviderPeriodtarget, packageBuilderPeriodtarget, triggersPeriodtarget) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo
        */
        private def orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(da: DataAccessor): Endpoint[OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("title") :: paramOption("details") :: paramOption("enabled").map(_.map(_.toBoolean)) :: paramOption("serviceName") :: paramOption("log.level") :: paramOption("queue.processing.enabled").map(_.map(_.toBoolean)) :: paramOption("packageExporter.target") :: paramOption("packageImporter.target") :: paramOption("requestAuthorizationStrategy.target") :: paramOption("triggers.target")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], title: Option[String], details: Option[String], enabled: Option[Boolean], serviceName: Option[String], logPeriodlevel: Option[String], queuePeriodprocessingPeriodenabled: Option[Boolean], packageExporterPeriodtarget: Option[String], packageImporterPeriodtarget: Option[String], requestAuthorizationStrategyPeriodtarget: Option[String], triggersPeriodtarget: Option[String]) =>
          da.Configmgr_orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(post, apply, delete, action, Dollarlocation, propertylist, name, title, details, enabled, serviceName, logPeriodlevel, queuePeriodprocessingPeriodenabled, packageExporterPeriodtarget, packageImporterPeriodtarget, requestAuthorizationStrategyPeriodtarget, triggersPeriodtarget) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo
        */
        private def orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(da: DataAccessor): Endpoint[OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("title") :: paramOption("details") :: paramOption("enabled").map(_.map(_.toBoolean)) :: paramOption("serviceName") :: paramOption("log.level") :: paramOption("queue.processing.enabled").map(_.map(_.toBoolean)) :: params("passiveQueues") :: params("packageExporter.endpoints") :: params("packageImporter.endpoints") :: paramOption("retry.strategy") :: paramOption("retry.attempts").map(_.map(_.toInt)) :: paramOption("pull.items").map(_.map(_.toInt)) :: paramOption("http.conn.timeout").map(_.map(_.toInt)) :: paramOption("requestAuthorizationStrategy.target") :: paramOption("transportSecretProvider.target") :: paramOption("packageBuilder.target") :: paramOption("triggers.target")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], title: Option[String], details: Option[String], enabled: Option[Boolean], serviceName: Option[String], logPeriodlevel: Option[String], queuePeriodprocessingPeriodenabled: Option[Boolean], passiveQueues: Seq[String], packageExporterPeriodendpoints: Seq[String], packageImporterPeriodendpoints: Seq[String], retryPeriodstrategy: Option[String], retryPeriodattempts: Option[Int], pullPerioditems: Option[Int], httpPeriodconnPeriodtimeout: Option[Int], requestAuthorizationStrategyPeriodtarget: Option[String], transportSecretProviderPeriodtarget: Option[String], packageBuilderPeriodtarget: Option[String], triggersPeriodtarget: Option[String]) =>
          da.Configmgr_orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(post, apply, delete, action, Dollarlocation, propertylist, name, title, details, enabled, serviceName, logPeriodlevel, queuePeriodprocessingPeriodenabled, passiveQueues, packageExporterPeriodendpoints, packageImporterPeriodendpoints, retryPeriodstrategy, retryPeriodattempts, pullPerioditems, httpPeriodconnPeriodtimeout, requestAuthorizationStrategyPeriodtarget, transportSecretProviderPeriodtarget, packageBuilderPeriodtarget, triggersPeriodtarget) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo
        */
        private def orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(da: DataAccessor): Endpoint[OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.monitor.DistributionQueueHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("hc.name") :: params("hc.tags") :: paramOption("hc.mbean.name") :: paramOption("numberOfRetriesAllowed").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodname: Option[String], hcPeriodtags: Seq[String], hcPeriodmbeanPeriodname: Option[String], numberOfRetriesAllowed: Option[Int]) =>
          da.Configmgr_orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodname, hcPeriodtags, hcPeriodmbeanPeriodname, numberOfRetriesAllowed) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo
        */
        private def orgApacheSlingDistributionPackagingImplExporterAgentDistributio(da: DataAccessor): Endpoint[OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("queue") :: paramOption("drop.invalid.items").map(_.map(_.toBoolean)) :: paramOption("agent.target")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], queue: Option[String], dropPeriodinvalidPerioditems: Option[Boolean], agentPeriodtarget: Option[String]) =>
          da.Configmgr_orgApacheSlingDistributionPackagingImplExporterAgentDistributio(post, apply, delete, action, Dollarlocation, propertylist, name, queue, dropPeriodinvalidPerioditems, agentPeriodtarget) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo
        */
        private def orgApacheSlingDistributionPackagingImplExporterLocalDistributio(da: DataAccessor): Endpoint[OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("packageBuilder.target")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], packageBuilderPeriodtarget: Option[String]) =>
          da.Configmgr_orgApacheSlingDistributionPackagingImplExporterLocalDistributio(post, apply, delete, action, Dollarlocation, propertylist, name, packageBuilderPeriodtarget) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo
        */
        private def orgApacheSlingDistributionPackagingImplExporterRemoteDistributi(da: DataAccessor): Endpoint[OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: params("endpoints") :: paramOption("pull.items").map(_.map(_.toInt)) :: paramOption("packageBuilder.target") :: paramOption("transportSecretProvider.target")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], endpoints: Seq[String], pullPerioditems: Option[Int], packageBuilderPeriodtarget: Option[String], transportSecretProviderPeriodtarget: Option[String]) =>
          da.Configmgr_orgApacheSlingDistributionPackagingImplExporterRemoteDistributi(post, apply, delete, action, Dollarlocation, propertylist, name, endpoints, pullPerioditems, packageBuilderPeriodtarget, transportSecretProviderPeriodtarget) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo
        */
        private def orgApacheSlingDistributionPackagingImplImporterLocalDistributio(da: DataAccessor): Endpoint[OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("packageBuilder.target")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], packageBuilderPeriodtarget: Option[String]) =>
          da.Configmgr_orgApacheSlingDistributionPackagingImplImporterLocalDistributio(post, apply, delete, action, Dollarlocation, propertylist, name, packageBuilderPeriodtarget) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo
        */
        private def orgApacheSlingDistributionPackagingImplImporterRemoteDistributi(da: DataAccessor): Endpoint[OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: params("endpoints") :: paramOption("transportSecretProvider.target")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], endpoints: Seq[String], transportSecretProviderPeriodtarget: Option[String]) =>
          da.Configmgr_orgApacheSlingDistributionPackagingImplImporterRemoteDistributi(post, apply, delete, action, Dollarlocation, propertylist, name, endpoints, transportSecretProviderPeriodtarget) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo
        */
        private def orgApacheSlingDistributionPackagingImplImporterRepositoryDistri(da: DataAccessor): Endpoint[OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("service.name") :: paramOption("path") :: paramOption("privilege.name")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], servicePeriodname: Option[String], path: Option[String], privilegePeriodname: Option[String]) =>
          da.Configmgr_orgApacheSlingDistributionPackagingImplImporterRepositoryDistri(post, apply, delete, action, Dollarlocation, propertylist, name, servicePeriodname, path, privilegePeriodname) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo
        */
        private def orgApacheSlingDistributionResourcesImplDistributionConfiguration(da: DataAccessor): Endpoint[OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("provider.roots") :: paramOption("kind")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], providerPeriodroots: Option[String], kind: Option[String]) =>
          da.Configmgr_orgApacheSlingDistributionResourcesImplDistributionConfiguration(post, apply, delete, action, Dollarlocation, propertylist, providerPeriodroots, kind) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo
        */
        private def orgApacheSlingDistributionResourcesImplDistributionServiceResour(da: DataAccessor): Endpoint[OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("provider.roots") :: paramOption("kind")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], providerPeriodroots: Option[String], kind: Option[String]) =>
          da.Configmgr_orgApacheSlingDistributionResourcesImplDistributionServiceResour(post, apply, delete, action, Dollarlocation, propertylist, providerPeriodroots, kind) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo
        */
        private def orgApacheSlingDistributionSerializationImplDistributionPackageBu(da: DataAccessor): Endpoint[OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("type") :: paramOption("format.target") :: paramOption("tempFsFolder") :: paramOption("fileThreshold").map(_.map(_.toInt)) :: paramOption("memoryUnit") :: paramOption("useOffHeapMemory").map(_.map(_.toBoolean)) :: paramOption("digestAlgorithm") :: paramOption("monitoringQueueSize").map(_.map(_.toInt)) :: paramOption("cleanupDelay").map(_.map(_.toInt)) :: params("package.filters") :: params("property.filters")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], _type: Option[String], formatPeriodtarget: Option[String], tempFsFolder: Option[String], fileThreshold: Option[Int], memoryUnit: Option[String], useOffHeapMemory: Option[Boolean], digestAlgorithm: Option[String], monitoringQueueSize: Option[Int], cleanupDelay: Option[Int], packagePeriodfilters: Seq[String], propertyPeriodfilters: Seq[String]) =>
          da.Configmgr_orgApacheSlingDistributionSerializationImplDistributionPackageBu(post, apply, delete, action, Dollarlocation, propertylist, name, _type, formatPeriodtarget, tempFsFolder, fileThreshold, memoryUnit, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, cleanupDelay, packagePeriodfilters, propertyPeriodfilters) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo
        */
        private def orgApacheSlingDistributionSerializationImplVltVaultDistribution(da: DataAccessor): Endpoint[OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("type") :: paramOption("importMode") :: paramOption("aclHandling") :: paramOption("package.roots") :: params("package.filters") :: params("property.filters") :: paramOption("tempFsFolder") :: paramOption("useBinaryReferences").map(_.map(_.toBoolean)) :: paramOption("autoSaveThreshold").map(_.map(_.toInt)) :: paramOption("cleanupDelay").map(_.map(_.toInt)) :: paramOption("fileThreshold").map(_.map(_.toInt)) :: paramOption("MEGA_BYTES") :: paramOption("useOffHeapMemory").map(_.map(_.toBoolean)) :: paramOption("digestAlgorithm") :: paramOption("monitoringQueueSize").map(_.map(_.toInt)) :: params("pathsMapping") :: paramOption("strictImport").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], _type: Option[String], importMode: Option[String], aclHandling: Option[String], packagePeriodroots: Option[String], packagePeriodfilters: Seq[String], propertyPeriodfilters: Seq[String], tempFsFolder: Option[String], useBinaryReferences: Option[Boolean], autoSaveThreshold: Option[Int], cleanupDelay: Option[Int], fileThreshold: Option[Int], mEGABYTES: Option[String], useOffHeapMemory: Option[Boolean], digestAlgorithm: Option[String], monitoringQueueSize: Option[Int], pathsMapping: Seq[String], strictImport: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingDistributionSerializationImplVltVaultDistribution(post, apply, delete, action, Dollarlocation, propertylist, name, _type, importMode, aclHandling, packagePeriodroots, packagePeriodfilters, propertyPeriodfilters, tempFsFolder, useBinaryReferences, autoSaveThreshold, cleanupDelay, fileThreshold, mEGABYTES, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, pathsMapping, strictImport) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo
        */
        private def orgApacheSlingDistributionTransportImplUserCredentialsDistributi(da: DataAccessor): Endpoint[OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("username") :: paramOption("password")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], username: Option[String], password: Option[String]) =>
          da.Configmgr_orgApacheSlingDistributionTransportImplUserCredentialsDistributi(post, apply, delete, action, Dollarlocation, propertylist, name, username, password) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo
        */
        private def orgApacheSlingDistributionTriggerImplDistributionEventDistribute(da: DataAccessor): Endpoint[OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("path")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], path: Option[String]) =>
          da.Configmgr_orgApacheSlingDistributionTriggerImplDistributionEventDistribute(post, apply, delete, action, Dollarlocation, propertylist, name, path) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo
        */
        private def orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(da: DataAccessor): Endpoint[OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("path") :: params("ignoredPathsPatterns") :: paramOption("serviceName") :: paramOption("deep").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], path: Option[String], ignoredPathsPatterns: Seq[String], serviceName: Option[String], deep: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(post, apply, delete, action, Dollarlocation, propertylist, name, path, ignoredPathsPatterns, serviceName, deep) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo
        */
        private def orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(da: DataAccessor): Endpoint[OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("path") :: paramOption("serviceName") :: paramOption("nuggetsPath")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], path: Option[String], serviceName: Option[String], nuggetsPath: Option[String]) =>
          da.Configmgr_orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(post, apply, delete, action, Dollarlocation, propertylist, name, path, serviceName, nuggetsPath) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo
        */
        private def orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(da: DataAccessor): Endpoint[OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("endpoint") :: paramOption("transportSecretProvider.target")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], endpoint: Option[String], transportSecretProviderPeriodtarget: Option[String]) =>
          da.Configmgr_orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(post, apply, delete, action, Dollarlocation, propertylist, name, endpoint, transportSecretProviderPeriodtarget) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo
        */
        private def orgApacheSlingDistributionTriggerImplResourceEventDistributionTr(da: DataAccessor): Endpoint[OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("path")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], path: Option[String]) =>
          da.Configmgr_orgApacheSlingDistributionTriggerImplResourceEventDistributionTr(post, apply, delete, action, Dollarlocation, propertylist, name, path) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo
        */
        private def orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(da: DataAccessor): Endpoint[OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("path") :: paramOption("seconds") :: paramOption("serviceName")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], path: Option[String], seconds: Option[String], serviceName: Option[String]) =>
          da.Configmgr_orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(post, apply, delete, action, Dollarlocation, propertylist, name, path, seconds, serviceName) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo
        */
        private def orgApacheSlingEngineImplAuthSlingAuthenticator(da: DataAccessor): Endpoint[OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.engine.impl.auth.SlingAuthenticator" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("osgi.http.whiteboard.context.select") :: paramOption("osgi.http.whiteboard.listener") :: paramOption("auth.sudo.cookie") :: paramOption("auth.sudo.parameter") :: paramOption("auth.annonymous").map(_.map(_.toBoolean)) :: params("sling.auth.requirements") :: paramOption("sling.auth.anonymous.user") :: paramOption("sling.auth.anonymous.password") :: paramOption("auth.http") :: paramOption("auth.http.realm") :: params("auth.uri.suffix")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect: Option[String], osgiPeriodhttpPeriodwhiteboardPeriodlistener: Option[String], authPeriodsudoPeriodcookie: Option[String], authPeriodsudoPeriodparameter: Option[String], authPeriodannonymous: Option[Boolean], slingPeriodauthPeriodrequirements: Seq[String], slingPeriodauthPeriodanonymousPerioduser: Option[String], slingPeriodauthPeriodanonymousPeriodpassword: Option[String], authPeriodhttp: Option[String], authPeriodhttpPeriodrealm: Option[String], authPerioduriPeriodsuffix: Seq[String]) =>
          da.Configmgr_orgApacheSlingEngineImplAuthSlingAuthenticator(post, apply, delete, action, Dollarlocation, propertylist, osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect, osgiPeriodhttpPeriodwhiteboardPeriodlistener, authPeriodsudoPeriodcookie, authPeriodsudoPeriodparameter, authPeriodannonymous, slingPeriodauthPeriodrequirements, slingPeriodauthPeriodanonymousPerioduser, slingPeriodauthPeriodanonymousPeriodpassword, authPeriodhttp, authPeriodhttpPeriodrealm, authPerioduriPeriodsuffix) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo
        */
        private def orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(da: DataAccessor): Endpoint[OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("extensions") :: paramOption("minDurationMs").map(_.map(_.toInt)) :: paramOption("maxDurationMs").map(_.map(_.toInt)) :: paramOption("compactLogFormat").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], extensions: Seq[String], minDurationMs: Option[Int], maxDurationMs: Option[Int], compactLogFormat: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(post, apply, delete, action, Dollarlocation, propertylist, extensions, minDurationMs, maxDurationMs, compactLogFormat) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingEngineImplLogRequestLoggerInfo
        */
        private def orgApacheSlingEngineImplLogRequestLogger(da: DataAccessor): Endpoint[OrgApacheSlingEngineImplLogRequestLoggerInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.engine.impl.log.RequestLogger" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("request.log.output") :: paramOption("request.log.outputtype").map(_.map(_.toInt)) :: paramOption("request.log.enabled").map(_.map(_.toBoolean)) :: paramOption("access.log.output") :: paramOption("access.log.outputtype").map(_.map(_.toInt)) :: paramOption("access.log.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], requestPeriodlogPeriodoutput: Option[String], requestPeriodlogPeriodoutputtype: Option[Int], requestPeriodlogPeriodenabled: Option[Boolean], accessPeriodlogPeriodoutput: Option[String], accessPeriodlogPeriodoutputtype: Option[Int], accessPeriodlogPeriodenabled: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingEngineImplLogRequestLogger(post, apply, delete, action, Dollarlocation, propertylist, requestPeriodlogPeriodoutput, requestPeriodlogPeriodoutputtype, requestPeriodlogPeriodenabled, accessPeriodlogPeriodoutput, accessPeriodlogPeriodoutputtype, accessPeriodlogPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingEngineImplLogRequestLoggerServiceInfo
        */
        private def orgApacheSlingEngineImplLogRequestLoggerService(da: DataAccessor): Endpoint[OrgApacheSlingEngineImplLogRequestLoggerServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.engine.impl.log.RequestLoggerService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("request.log.service.format") :: paramOption("request.log.service.output") :: paramOption("request.log.service.outputtype").map(_.map(_.toInt)) :: paramOption("request.log.service.onentry").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], requestPeriodlogPeriodservicePeriodformat: Option[String], requestPeriodlogPeriodservicePeriodoutput: Option[String], requestPeriodlogPeriodservicePeriodoutputtype: Option[Int], requestPeriodlogPeriodservicePeriodonentry: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingEngineImplLogRequestLoggerService(post, apply, delete, action, Dollarlocation, propertylist, requestPeriodlogPeriodservicePeriodformat, requestPeriodlogPeriodservicePeriodoutput, requestPeriodlogPeriodservicePeriodoutputtype, requestPeriodlogPeriodservicePeriodonentry) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingEngineImplSlingMainServletInfo
        */
        private def orgApacheSlingEngineImplSlingMainServlet(da: DataAccessor): Endpoint[OrgApacheSlingEngineImplSlingMainServletInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.engine.impl.SlingMainServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("sling.max.calls").map(_.map(_.toInt)) :: paramOption("sling.max.inclusions").map(_.map(_.toInt)) :: paramOption("sling.trace.allow").map(_.map(_.toBoolean)) :: paramOption("sling.max.record.requests").map(_.map(_.toInt)) :: params("sling.store.pattern.requests") :: paramOption("sling.serverinfo") :: params("sling.additional.response.headers")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], slingPeriodmaxPeriodcalls: Option[Int], slingPeriodmaxPeriodinclusions: Option[Int], slingPeriodtracePeriodallow: Option[Boolean], slingPeriodmaxPeriodrecordPeriodrequests: Option[Int], slingPeriodstorePeriodpatternPeriodrequests: Seq[String], slingPeriodserverinfo: Option[String], slingPeriodadditionalPeriodresponsePeriodheaders: Seq[String]) =>
          da.Configmgr_orgApacheSlingEngineImplSlingMainServlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodmaxPeriodcalls, slingPeriodmaxPeriodinclusions, slingPeriodtracePeriodallow, slingPeriodmaxPeriodrecordPeriodrequests, slingPeriodstorePeriodpatternPeriodrequests, slingPeriodserverinfo, slingPeriodadditionalPeriodresponsePeriodheaders) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingEngineParametersInfo
        */
        private def orgApacheSlingEngineParameters(da: DataAccessor): Endpoint[OrgApacheSlingEngineParametersInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.engine.parameters" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("sling.default.parameter.encoding") :: paramOption("sling.default.max.parameters").map(_.map(_.toInt)) :: paramOption("file.location") :: paramOption("file.threshold").map(_.map(_.toInt)) :: paramOption("file.max").map(_.map(_.toInt)) :: paramOption("request.max").map(_.map(_.toInt)) :: paramOption("sling.default.parameter.checkForAdditionalContainerParameters").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], slingPerioddefaultPeriodparameterPeriodencoding: Option[String], slingPerioddefaultPeriodmaxPeriodparameters: Option[Int], filePeriodlocation: Option[String], filePeriodthreshold: Option[Int], filePeriodmax: Option[Int], requestPeriodmax: Option[Int], slingPerioddefaultPeriodparameterPeriodcheckForAdditionalContainerParameters: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingEngineParameters(post, apply, delete, action, Dollarlocation, propertylist, slingPerioddefaultPeriodparameterPeriodencoding, slingPerioddefaultPeriodmaxPeriodparameters, filePeriodlocation, filePeriodthreshold, filePeriodmax, requestPeriodmax, slingPerioddefaultPeriodparameterPeriodcheckForAdditionalContainerParameters) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingEventImplEventingThreadPoolInfo
        */
        private def orgApacheSlingEventImplEventingThreadPool(da: DataAccessor): Endpoint[OrgApacheSlingEventImplEventingThreadPoolInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.event.impl.EventingThreadPool" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("minPoolSize").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], minPoolSize: Option[Int]) =>
          da.Configmgr_orgApacheSlingEventImplEventingThreadPool(post, apply, delete, action, Dollarlocation, propertylist, minPoolSize) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingEventImplJobsDefaultJobManagerInfo
        */
        private def orgApacheSlingEventImplJobsDefaultJobManager(da: DataAccessor): Endpoint[OrgApacheSlingEventImplJobsDefaultJobManagerInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.event.impl.jobs.DefaultJobManager" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("queue.priority") :: paramOption("queue.retries").map(_.map(_.toInt)) :: paramOption("queue.retrydelay").map(_.map(_.toInt)) :: paramOption("queue.maxparallel").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], queuePeriodpriority: Option[String], queuePeriodretries: Option[Int], queuePeriodretrydelay: Option[Int], queuePeriodmaxparallel: Option[Int]) =>
          da.Configmgr_orgApacheSlingEventImplJobsDefaultJobManager(post, apply, delete, action, Dollarlocation, propertylist, queuePeriodpriority, queuePeriodretries, queuePeriodretrydelay, queuePeriodmaxparallel) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo
        */
        private def orgApacheSlingEventImplJobsJcrPersistenceHandler(da: DataAccessor): Endpoint[OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.event.impl.jobs.jcr.PersistenceHandler" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("job.consumermanager.disableDistribution").map(_.map(_.toBoolean)) :: paramOption("startup.delay").map(_.map(_.toInt)) :: paramOption("cleanup.period").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], jobPeriodconsumermanagerPerioddisableDistribution: Option[Boolean], startupPerioddelay: Option[Int], cleanupPeriodperiod: Option[Int]) =>
          da.Configmgr_orgApacheSlingEventImplJobsJcrPersistenceHandler(post, apply, delete, action, Dollarlocation, propertylist, jobPeriodconsumermanagerPerioddisableDistribution, startupPerioddelay, cleanupPeriodperiod) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingEventImplJobsJobConsumerManagerInfo
        */
        private def orgApacheSlingEventImplJobsJobConsumerManager(da: DataAccessor): Endpoint[OrgApacheSlingEventImplJobsJobConsumerManagerInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.event.impl.jobs.JobConsumerManager" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("org.apache.sling.installer.configuration.persist").map(_.map(_.toBoolean)) :: params("job.consumermanager.whitelist") :: params("job.consumermanager.blacklist")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist: Option[Boolean], jobPeriodconsumermanagerPeriodwhitelist: Seq[String], jobPeriodconsumermanagerPeriodblacklist: Seq[String]) =>
          da.Configmgr_orgApacheSlingEventImplJobsJobConsumerManager(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist, jobPeriodconsumermanagerPeriodwhitelist, jobPeriodconsumermanagerPeriodblacklist) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingEventJobsQueueConfigurationInfo
        */
        private def orgApacheSlingEventJobsQueueConfiguration(da: DataAccessor): Endpoint[OrgApacheSlingEventJobsQueueConfigurationInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.event.jobs.QueueConfiguration" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("queue.name") :: params("queue.topics") :: paramOption("queue.type") :: paramOption("queue.priority") :: paramOption("queue.retries").map(_.map(_.toInt)) :: paramOption("queue.retrydelay").map(_.map(_.toInt)) :: paramOption("queue.maxparallel").map(_.map(_.toBigDecimal)) :: paramOption("queue.keepJobs").map(_.map(_.toBoolean)) :: paramOption("queue.preferRunOnCreationInstance").map(_.map(_.toBoolean)) :: paramOption("queue.threadPoolSize").map(_.map(_.toInt)) :: paramOption("service.ranking").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], queuePeriodname: Option[String], queuePeriodtopics: Seq[String], queuePeriodtype: Option[String], queuePeriodpriority: Option[String], queuePeriodretries: Option[Int], queuePeriodretrydelay: Option[Int], queuePeriodmaxparallel: Option[BigDecimal], queuePeriodkeepJobs: Option[Boolean], queuePeriodpreferRunOnCreationInstance: Option[Boolean], queuePeriodthreadPoolSize: Option[Int], servicePeriodranking: Option[Int]) =>
          da.Configmgr_orgApacheSlingEventJobsQueueConfiguration(post, apply, delete, action, Dollarlocation, propertylist, queuePeriodname, queuePeriodtopics, queuePeriodtype, queuePeriodpriority, queuePeriodretries, queuePeriodretrydelay, queuePeriodmaxparallel, queuePeriodkeepJobs, queuePeriodpreferRunOnCreationInstance, queuePeriodthreadPoolSize, servicePeriodranking) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo
        */
        private def orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(da: DataAccessor): Endpoint[OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("users") :: params("groups")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], users: Seq[String], groups: Seq[String]) =>
          da.Configmgr_orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(post, apply, delete, action, Dollarlocation, propertylist, users, groups) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingFeatureflagsFeatureInfo
        */
        private def orgApacheSlingFeatureflagsFeature(da: DataAccessor): Endpoint[OrgApacheSlingFeatureflagsFeatureInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.featureflags.Feature" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("description") :: paramOption("enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], description: Option[String], enabled: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingFeatureflagsFeature(post, apply, delete, action, Dollarlocation, propertylist, name, description, enabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo
        */
        private def orgApacheSlingFeatureflagsImplConfiguredFeature(da: DataAccessor): Endpoint[OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.featureflags.impl.ConfiguredFeature" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("name") :: paramOption("description") :: paramOption("enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], name: Option[String], description: Option[String], enabled: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingFeatureflagsImplConfiguredFeature(post, apply, delete, action, Dollarlocation, propertylist, name, description, enabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingHapiImplHApiUtilImplInfo
        */
        private def orgApacheSlingHapiImplHApiUtilImpl(da: DataAccessor): Endpoint[OrgApacheSlingHapiImplHApiUtilImplInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.hapi.impl.HApiUtilImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("org.apache.sling.hapi.tools.resourcetype") :: paramOption("org.apache.sling.hapi.tools.collectionresourcetype") :: params("org.apache.sling.hapi.tools.searchpaths") :: paramOption("org.apache.sling.hapi.tools.externalurl") :: paramOption("org.apache.sling.hapi.tools.enabled").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodresourcetype: Option[String], orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodcollectionresourcetype: Option[String], orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodsearchpaths: Seq[String], orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodexternalurl: Option[String], orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodenabled: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingHapiImplHApiUtilImpl(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodresourcetype, orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodcollectionresourcetype, orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodsearchpaths, orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodexternalurl, orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodenabled) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingHcCoreImplCompositeHealthCheckInfo
        */
        private def orgApacheSlingHcCoreImplCompositeHealthCheck(da: DataAccessor): Endpoint[OrgApacheSlingHcCoreImplCompositeHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.hc.core.impl.CompositeHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("hc.name") :: params("hc.tags") :: paramOption("hc.mbean.name") :: params("filter.tags") :: paramOption("filter.combineTagsWithOr").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodname: Option[String], hcPeriodtags: Seq[String], hcPeriodmbeanPeriodname: Option[String], filterPeriodtags: Seq[String], filterPeriodcombineTagsWithOr: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingHcCoreImplCompositeHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodname, hcPeriodtags, hcPeriodmbeanPeriodname, filterPeriodtags, filterPeriodcombineTagsWithOr) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo
        */
        private def orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(da: DataAccessor): Endpoint[OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("timeoutInMs").map(_.map(_.toInt)) :: paramOption("longRunningFutureThresholdForCriticalMs").map(_.map(_.toInt)) :: paramOption("resultCacheTtlInMs").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], timeoutInMs: Option[Int], longRunningFutureThresholdForCriticalMs: Option[Int], resultCacheTtlInMs: Option[Int]) =>
          da.Configmgr_orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(post, apply, delete, action, Dollarlocation, propertylist, timeoutInMs, longRunningFutureThresholdForCriticalMs, resultCacheTtlInMs) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo
        */
        private def orgApacheSlingHcCoreImplJmxAttributeHealthCheck(da: DataAccessor): Endpoint[OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.hc.core.impl.JmxAttributeHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("hc.name") :: params("hc.tags") :: paramOption("hc.mbean.name") :: paramOption("mbean.name") :: paramOption("attribute.name") :: paramOption("attribute.value.constraint")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodname: Option[String], hcPeriodtags: Seq[String], hcPeriodmbeanPeriodname: Option[String], mbeanPeriodname: Option[String], attributePeriodname: Option[String], attributePeriodvaluePeriodconstraint: Option[String]) =>
          da.Configmgr_orgApacheSlingHcCoreImplJmxAttributeHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodname, hcPeriodtags, hcPeriodmbeanPeriodname, mbeanPeriodname, attributePeriodname, attributePeriodvaluePeriodconstraint) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingHcCoreImplScriptableHealthCheckInfo
        */
        private def orgApacheSlingHcCoreImplScriptableHealthCheck(da: DataAccessor): Endpoint[OrgApacheSlingHcCoreImplScriptableHealthCheckInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.hc.core.impl.ScriptableHealthCheck" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("hc.name") :: params("hc.tags") :: paramOption("hc.mbean.name") :: paramOption("expression") :: paramOption("language.extension")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], hcPeriodname: Option[String], hcPeriodtags: Seq[String], hcPeriodmbeanPeriodname: Option[String], expression: Option[String], languagePeriodextension: Option[String]) =>
          da.Configmgr_orgApacheSlingHcCoreImplScriptableHealthCheck(post, apply, delete, action, Dollarlocation, propertylist, hcPeriodname, hcPeriodtags, hcPeriodmbeanPeriodname, expression, languagePeriodextension) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo
        */
        private def orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(da: DataAccessor): Endpoint[OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("servletPath") :: paramOption("disabled").map(_.map(_.toBoolean)) :: paramOption("cors.accessControlAllowOrigin")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servletPath: Option[String], disabled: Option[Boolean], corsPeriodaccessControlAllowOrigin: Option[String]) =>
          da.Configmgr_orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(post, apply, delete, action, Dollarlocation, propertylist, servletPath, disabled, corsPeriodaccessControlAllowOrigin) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo
        */
        private def orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(da: DataAccessor): Endpoint[OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("totalWidth").map(_.map(_.toInt)) :: paramOption("colWidthName").map(_.map(_.toInt)) :: paramOption("colWidthResult").map(_.map(_.toInt)) :: paramOption("colWidthTiming").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], totalWidth: Option[Int], colWidthName: Option[Int], colWidthResult: Option[Int], colWidthTiming: Option[Int]) =>
          da.Configmgr_orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(post, apply, delete, action, Dollarlocation, propertylist, totalWidth, colWidthName, colWidthResult, colWidthTiming) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingI18nImplI18NFilterInfo
        */
        private def orgApacheSlingI18nImplI18NFilter(da: DataAccessor): Endpoint[OrgApacheSlingI18nImplI18NFilterInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.i18n.impl.I18NFilter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: params("sling.filter.scope")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], slingPeriodfilterPeriodscope: Seq[String]) =>
          da.Configmgr_orgApacheSlingI18nImplI18NFilter(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, slingPeriodfilterPeriodscope) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingI18nImplJcrResourceBundleProviderInfo
        */
        private def orgApacheSlingI18nImplJcrResourceBundleProvider(da: DataAccessor): Endpoint[OrgApacheSlingI18nImplJcrResourceBundleProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.i18n.impl.JcrResourceBundleProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("locale.default") :: paramOption("preload.bundles").map(_.map(_.toBoolean)) :: paramOption("invalidation.delay").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], localePerioddefault: Option[String], preloadPeriodbundles: Option[Boolean], invalidationPerioddelay: Option[Int]) =>
          da.Configmgr_orgApacheSlingI18nImplJcrResourceBundleProvider(post, apply, delete, action, Dollarlocation, propertylist, localePerioddefault, preloadPeriodbundles, invalidationPerioddelay) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo
        */
        private def orgApacheSlingInstallerProviderJcrImplJcrInstaller(da: DataAccessor): Endpoint[OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.installer.provider.jcr.impl.JcrInstaller" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("handler.schemes") :: paramOption("sling.jcrinstall.folder.name.regexp") :: paramOption("sling.jcrinstall.folder.max.depth").map(_.map(_.toInt)) :: params("sling.jcrinstall.search.path") :: paramOption("sling.jcrinstall.new.config.path") :: paramOption("sling.jcrinstall.signal.path") :: paramOption("sling.jcrinstall.enable.writeback").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], handlerPeriodschemes: Seq[String], slingPeriodjcrinstallPeriodfolderPeriodnamePeriodregexp: Option[String], slingPeriodjcrinstallPeriodfolderPeriodmaxPerioddepth: Option[Int], slingPeriodjcrinstallPeriodsearchPeriodpath: Seq[String], slingPeriodjcrinstallPeriodnewPeriodconfigPeriodpath: Option[String], slingPeriodjcrinstallPeriodsignalPeriodpath: Option[String], slingPeriodjcrinstallPeriodenablePeriodwriteback: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingInstallerProviderJcrImplJcrInstaller(post, apply, delete, action, Dollarlocation, propertylist, handlerPeriodschemes, slingPeriodjcrinstallPeriodfolderPeriodnamePeriodregexp, slingPeriodjcrinstallPeriodfolderPeriodmaxPerioddepth, slingPeriodjcrinstallPeriodsearchPeriodpath, slingPeriodjcrinstallPeriodnewPeriodconfigPeriodpath, slingPeriodjcrinstallPeriodsignalPeriodpath, slingPeriodjcrinstallPeriodenablePeriodwriteback) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo
        */
        private def orgApacheSlingJcrBaseInternalLoginAdminWhitelist(da: DataAccessor): Endpoint[OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.jcr.base.internal.LoginAdminWhitelist" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("whitelist.bypass").map(_.map(_.toBoolean)) :: paramOption("whitelist.bundles.regexp")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], whitelistPeriodbypass: Option[Boolean], whitelistPeriodbundlesPeriodregexp: Option[String]) =>
          da.Configmgr_orgApacheSlingJcrBaseInternalLoginAdminWhitelist(post, apply, delete, action, Dollarlocation, propertylist, whitelistPeriodbypass, whitelistPeriodbundlesPeriodregexp) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo
        */
        private def orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(da: DataAccessor): Endpoint[OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("whitelist.name") :: params("whitelist.bundles")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], whitelistPeriodname: Option[String], whitelistPeriodbundles: Seq[String]) =>
          da.Configmgr_orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(post, apply, delete, action, Dollarlocation, propertylist, whitelistPeriodname, whitelistPeriodbundles) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo
        */
        private def orgApacheSlingJcrDavexImplServletsSlingDavExServlet(da: DataAccessor): Endpoint[OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("alias") :: paramOption("dav.create-absolute-uri").map(_.map(_.toBoolean)) :: paramOption("dav.protectedhandlers")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], alias: Option[String], davPeriodcreateAbsoluteUri: Option[Boolean], davPeriodprotectedhandlers: Option[String]) =>
          da.Configmgr_orgApacheSlingJcrDavexImplServletsSlingDavExServlet(post, apply, delete, action, Dollarlocation, propertylist, alias, davPeriodcreateAbsoluteUri, davPeriodprotectedhandlers) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo
        */
        private def orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(da: DataAccessor): Endpoint[OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("java.naming.factory.initial") :: paramOption("java.naming.provider.url")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], javaPeriodnamingPeriodfactoryPeriodinitial: Option[String], javaPeriodnamingPeriodproviderPeriodurl: Option[String]) =>
          da.Configmgr_orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(post, apply, delete, action, Dollarlocation, propertylist, javaPeriodnamingPeriodfactoryPeriodinitial, javaPeriodnamingPeriodproviderPeriodurl) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo
        */
        private def orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(da: DataAccessor): Endpoint[OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("port").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], port: Option[Int]) =>
          da.Configmgr_orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(post, apply, delete, action, Dollarlocation, propertylist, port) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo
        */
        private def orgApacheSlingJcrRepoinitImplRepositoryInitializer(da: DataAccessor): Endpoint[OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.jcr.repoinit.impl.RepositoryInitializer" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("references")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], references: Seq[String]) =>
          da.Configmgr_orgApacheSlingJcrRepoinitImplRepositoryInitializer(post, apply, delete, action, Dollarlocation, propertylist, references) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingJcrRepoinitRepositoryInitializerInfo
        */
        private def orgApacheSlingJcrRepoinitRepositoryInitializer(da: DataAccessor): Endpoint[OrgApacheSlingJcrRepoinitRepositoryInitializerInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.jcr.repoinit.RepositoryInitializer" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("references") :: params("scripts")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], references: Seq[String], scripts: Seq[String]) =>
          da.Configmgr_orgApacheSlingJcrRepoinitRepositoryInitializer(post, apply, delete, action, Dollarlocation, propertylist, references, scripts) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo
        */
        private def orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(da: DataAccessor): Endpoint[OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("resource.resolver.searchpath") :: paramOption("resource.resolver.manglenamespaces").map(_.map(_.toBoolean)) :: paramOption("resource.resolver.allowDirect").map(_.map(_.toBoolean)) :: params("resource.resolver.required.providers") :: params("resource.resolver.required.providernames") :: params("resource.resolver.virtual") :: params("resource.resolver.mapping") :: paramOption("resource.resolver.map.location") :: params("resource.resolver.map.observation") :: paramOption("resource.resolver.default.vanity.redirect.status").map(_.map(_.toInt)) :: paramOption("resource.resolver.enable.vanitypath").map(_.map(_.toBoolean)) :: paramOption("resource.resolver.vanitypath.maxEntries").map(_.map(_.toInt)) :: paramOption("resource.resolver.vanitypath.maxEntries.startup").map(_.map(_.toBoolean)) :: paramOption("resource.resolver.vanitypath.bloomfilter.maxBytes").map(_.map(_.toInt)) :: paramOption("resource.resolver.optimize.alias.resolution").map(_.map(_.toBoolean)) :: params("resource.resolver.vanitypath.whitelist") :: params("resource.resolver.vanitypath.blacklist") :: paramOption("resource.resolver.vanity.precedence").map(_.map(_.toBoolean)) :: paramOption("resource.resolver.providerhandling.paranoid").map(_.map(_.toBoolean)) :: paramOption("resource.resolver.log.closing").map(_.map(_.toBoolean)) :: paramOption("resource.resolver.log.unclosed").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], resourcePeriodresolverPeriodsearchpath: Seq[String], resourcePeriodresolverPeriodmanglenamespaces: Option[Boolean], resourcePeriodresolverPeriodallowDirect: Option[Boolean], resourcePeriodresolverPeriodrequiredPeriodproviders: Seq[String], resourcePeriodresolverPeriodrequiredPeriodprovidernames: Seq[String], resourcePeriodresolverPeriodvirtual: Seq[String], resourcePeriodresolverPeriodmapping: Seq[String], resourcePeriodresolverPeriodmapPeriodlocation: Option[String], resourcePeriodresolverPeriodmapPeriodobservation: Seq[String], resourcePeriodresolverPerioddefaultPeriodvanityPeriodredirectPeriodstatus: Option[Int], resourcePeriodresolverPeriodenablePeriodvanitypath: Option[Boolean], resourcePeriodresolverPeriodvanitypathPeriodmaxEntries: Option[Int], resourcePeriodresolverPeriodvanitypathPeriodmaxEntriesPeriodstartup: Option[Boolean], resourcePeriodresolverPeriodvanitypathPeriodbloomfilterPeriodmaxBytes: Option[Int], resourcePeriodresolverPeriodoptimizePeriodaliasPeriodresolution: Option[Boolean], resourcePeriodresolverPeriodvanitypathPeriodwhitelist: Seq[String], resourcePeriodresolverPeriodvanitypathPeriodblacklist: Seq[String], resourcePeriodresolverPeriodvanityPeriodprecedence: Option[Boolean], resourcePeriodresolverPeriodproviderhandlingPeriodparanoid: Option[Boolean], resourcePeriodresolverPeriodlogPeriodclosing: Option[Boolean], resourcePeriodresolverPeriodlogPeriodunclosed: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(post, apply, delete, action, Dollarlocation, propertylist, resourcePeriodresolverPeriodsearchpath, resourcePeriodresolverPeriodmanglenamespaces, resourcePeriodresolverPeriodallowDirect, resourcePeriodresolverPeriodrequiredPeriodproviders, resourcePeriodresolverPeriodrequiredPeriodprovidernames, resourcePeriodresolverPeriodvirtual, resourcePeriodresolverPeriodmapping, resourcePeriodresolverPeriodmapPeriodlocation, resourcePeriodresolverPeriodmapPeriodobservation, resourcePeriodresolverPerioddefaultPeriodvanityPeriodredirectPeriodstatus, resourcePeriodresolverPeriodenablePeriodvanitypath, resourcePeriodresolverPeriodvanitypathPeriodmaxEntries, resourcePeriodresolverPeriodvanitypathPeriodmaxEntriesPeriodstartup, resourcePeriodresolverPeriodvanitypathPeriodbloomfilterPeriodmaxBytes, resourcePeriodresolverPeriodoptimizePeriodaliasPeriodresolution, resourcePeriodresolverPeriodvanitypathPeriodwhitelist, resourcePeriodresolverPeriodvanitypathPeriodblacklist, resourcePeriodresolverPeriodvanityPeriodprecedence, resourcePeriodresolverPeriodproviderhandlingPeriodparanoid, resourcePeriodresolverPeriodlogPeriodclosing, resourcePeriodresolverPeriodlogPeriodunclosed) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo
        */
        private def orgApacheSlingJcrResourceInternalJcrSystemUserValidator(da: DataAccessor): Endpoint[OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.jcr.resource.internal.JcrSystemUserValidator" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("allow.only.system.user").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], allowPeriodonlyPeriodsystemPerioduser: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingJcrResourceInternalJcrSystemUserValidator(post, apply, delete, action, Dollarlocation, propertylist, allowPeriodonlyPeriodsystemPerioduser) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo
        */
        private def orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(da: DataAccessor): Endpoint[OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("path") :: paramOption("checkpath.prefix") :: paramOption("jcrPath")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], path: Option[String], checkpathPeriodprefix: Option[String], jcrPath: Option[String]) =>
          da.Configmgr_orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(post, apply, delete, action, Dollarlocation, propertylist, path, checkpathPeriodprefix, jcrPath) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo
        */
        private def orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(da: DataAccessor): Endpoint[OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: paramOption("type.collections") :: paramOption("type.noncollections") :: paramOption("type.content")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], typePeriodcollections: Option[String], typePeriodnoncollections: Option[String], typePeriodcontent: Option[String]) =>
          da.Configmgr_orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, typePeriodcollections, typePeriodnoncollections, typePeriodcontent) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo
        */
        private def orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(da: DataAccessor): Endpoint[OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int]) =>
          da.Configmgr_orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo
        */
        private def orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(da: DataAccessor): Endpoint[OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("dav.root") :: paramOption("dav.create-absolute-uri").map(_.map(_.toBoolean)) :: paramOption("dav.realm") :: params("collection.types") :: params("filter.prefixes") :: paramOption("filter.types") :: paramOption("filter.uris") :: paramOption("type.collections") :: paramOption("type.noncollections") :: paramOption("type.content")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], davPeriodroot: Option[String], davPeriodcreateAbsoluteUri: Option[Boolean], davPeriodrealm: Option[String], collectionPeriodtypes: Seq[String], filterPeriodprefixes: Seq[String], filterPeriodtypes: Option[String], filterPerioduris: Option[String], typePeriodcollections: Option[String], typePeriodnoncollections: Option[String], typePeriodcontent: Option[String]) =>
          da.Configmgr_orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(post, apply, delete, action, Dollarlocation, propertylist, davPeriodroot, davPeriodcreateAbsoluteUri, davPeriodrealm, collectionPeriodtypes, filterPeriodprefixes, filterPeriodtypes, filterPerioduris, typePeriodcollections, typePeriodnoncollections, typePeriodcontent) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingJmxProviderImplJMXResourceProviderInfo
        */
        private def orgApacheSlingJmxProviderImplJMXResourceProvider(da: DataAccessor): Endpoint[OrgApacheSlingJmxProviderImplJMXResourceProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.jmx.provider.impl.JMXResourceProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("provider.roots")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], providerPeriodroots: Option[String]) =>
          da.Configmgr_orgApacheSlingJmxProviderImplJMXResourceProvider(post, apply, delete, action, Dollarlocation, propertylist, providerPeriodroots) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingModelsImplModelAdapterFactoryInfo
        */
        private def orgApacheSlingModelsImplModelAdapterFactory(da: DataAccessor): Endpoint[OrgApacheSlingModelsImplModelAdapterFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.models.impl.ModelAdapterFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("osgi.http.whiteboard.listener") :: paramOption("osgi.http.whiteboard.context.select") :: paramOption("max.recursion.depth").map(_.map(_.toInt)) :: paramOption("cleanup.job.period").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], osgiPeriodhttpPeriodwhiteboardPeriodlistener: Option[String], osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect: Option[String], maxPeriodrecursionPerioddepth: Option[Int], cleanupPeriodjobPeriodperiod: Option[Int]) =>
          da.Configmgr_orgApacheSlingModelsImplModelAdapterFactory(post, apply, delete, action, Dollarlocation, propertylist, osgiPeriodhttpPeriodwhiteboardPeriodlistener, osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect, maxPeriodrecursionPerioddepth, cleanupPeriodjobPeriodperiod) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo
        */
        private def orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(da: DataAccessor): Endpoint[OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("max.recursion.levels").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], maxPeriodrecursionPeriodlevels: Option[Int]) =>
          da.Configmgr_orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(post, apply, delete, action, Dollarlocation, propertylist, maxPeriodrecursionPeriodlevels) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo
        */
        private def orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(da: DataAccessor): Endpoint[OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("felix.inventory.printer.name") :: paramOption("felix.inventory.printer.title") :: paramOption("path")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], felixPeriodinventoryPeriodprinterPeriodname: Option[String], felixPeriodinventoryPeriodprinterPeriodtitle: Option[String], path: Option[String]) =>
          da.Configmgr_orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(post, apply, delete, action, Dollarlocation, propertylist, felixPeriodinventoryPeriodprinterPeriodname, felixPeriodinventoryPeriodprinterPeriodtitle, path) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo
        */
        private def orgApacheSlingResourcemergerImplMergedResourceProviderFactory(da: DataAccessor): Endpoint[OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("merge.root") :: paramOption("merge.readOnly").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], mergePeriodroot: Option[String], mergePeriodreadOnly: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingResourcemergerImplMergedResourceProviderFactory(post, apply, delete, action, Dollarlocation, propertylist, mergePeriodroot, mergePeriodreadOnly) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingResourcemergerPickerOverridingInfo
        */
        private def orgApacheSlingResourcemergerPickerOverriding(da: DataAccessor): Endpoint[OrgApacheSlingResourcemergerPickerOverridingInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.resourcemerger.picker.overriding" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("merge.root") :: paramOption("merge.readOnly").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], mergePeriodroot: Option[String], mergePeriodreadOnly: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingResourcemergerPickerOverriding(post, apply, delete, action, Dollarlocation, propertylist, mergePeriodroot, mergePeriodreadOnly) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingScriptingCoreImplScriptCacheImplInfo
        */
        private def orgApacheSlingScriptingCoreImplScriptCacheImpl(da: DataAccessor): Endpoint[OrgApacheSlingScriptingCoreImplScriptCacheImplInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.scripting.core.impl.ScriptCacheImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("org.apache.sling.scripting.cache.size").map(_.map(_.toInt)) :: params("org.apache.sling.scripting.cache.additional_extensions")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodsize: Option[Int], orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodadditionalExtensions: Seq[String]) =>
          da.Configmgr_orgApacheSlingScriptingCoreImplScriptCacheImpl(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodsize, orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodadditionalExtensions) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo
        */
        private def orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(da: DataAccessor): Endpoint[OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("log.stacktrace.onclose").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], logPeriodstacktracePeriodonclose: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(post, apply, delete, action, Dollarlocation, propertylist, logPeriodstacktracePeriodonclose) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo
        */
        private def orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(da: DataAccessor): Endpoint[OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.scripting.java.impl.JavaScriptEngineFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("java.classdebuginfo").map(_.map(_.toBoolean)) :: paramOption("java.javaEncoding") :: paramOption("java.compilerSourceVM") :: paramOption("java.compilerTargetVM")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], javaPeriodclassdebuginfo: Option[Boolean], javaPeriodjavaEncoding: Option[String], javaPeriodcompilerSourceVM: Option[String], javaPeriodcompilerTargetVM: Option[String]) =>
          da.Configmgr_orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(post, apply, delete, action, Dollarlocation, propertylist, javaPeriodclassdebuginfo, javaPeriodjavaEncoding, javaPeriodcompilerSourceVM, javaPeriodcompilerTargetVM) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo
        */
        private def orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(da: DataAccessor): Endpoint[OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("org.apache.sling.scripting.javascript.rhino.optLevel").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], orgPeriodapachePeriodslingPeriodscriptingPeriodjavascriptPeriodrhinoPeriodoptLevel: Option[Int]) =>
          da.Configmgr_orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodslingPeriodscriptingPeriodjavascriptPeriodrhinoPeriodoptLevel) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo
        */
        private def orgApacheSlingScriptingJspJspScriptEngineFactory(da: DataAccessor): Endpoint[OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.scripting.jsp.JspScriptEngineFactory" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("jasper.compilerTargetVM") :: paramOption("jasper.compilerSourceVM") :: paramOption("jasper.classdebuginfo").map(_.map(_.toBoolean)) :: paramOption("jasper.enablePooling").map(_.map(_.toBoolean)) :: paramOption("jasper.ieClassId") :: paramOption("jasper.genStringAsCharArray").map(_.map(_.toBoolean)) :: paramOption("jasper.keepgenerated").map(_.map(_.toBoolean)) :: paramOption("jasper.mappedfile").map(_.map(_.toBoolean)) :: paramOption("jasper.trimSpaces").map(_.map(_.toBoolean)) :: paramOption("jasper.displaySourceFragments").map(_.map(_.toBoolean)) :: paramOption("default.is.session").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], jasperPeriodcompilerTargetVM: Option[String], jasperPeriodcompilerSourceVM: Option[String], jasperPeriodclassdebuginfo: Option[Boolean], jasperPeriodenablePooling: Option[Boolean], jasperPeriodieClassId: Option[String], jasperPeriodgenStringAsCharArray: Option[Boolean], jasperPeriodkeepgenerated: Option[Boolean], jasperPeriodmappedfile: Option[Boolean], jasperPeriodtrimSpaces: Option[Boolean], jasperPerioddisplaySourceFragments: Option[Boolean], defaultPeriodisPeriodsession: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingScriptingJspJspScriptEngineFactory(post, apply, delete, action, Dollarlocation, propertylist, jasperPeriodcompilerTargetVM, jasperPeriodcompilerSourceVM, jasperPeriodclassdebuginfo, jasperPeriodenablePooling, jasperPeriodieClassId, jasperPeriodgenStringAsCharArray, jasperPeriodkeepgenerated, jasperPeriodmappedfile, jasperPeriodtrimSpaces, jasperPerioddisplaySourceFragments, defaultPeriodisPeriodsession) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo
        */
        private def orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(da: DataAccessor): Endpoint[OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("org.apache.sling.scripting.sightly.js.bindings")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodbindings: Seq[String]) =>
          da.Configmgr_orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(post, apply, delete, action, Dollarlocation, propertylist, orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodbindings) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingSecurityImplContentDispositionFilterInfo
        */
        private def orgApacheSlingSecurityImplContentDispositionFilter(da: DataAccessor): Endpoint[OrgApacheSlingSecurityImplContentDispositionFilterInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.security.impl.ContentDispositionFilter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("sling.content.disposition.paths") :: params("sling.content.disposition.excluded.paths") :: paramOption("sling.content.disposition.all.paths").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], slingPeriodcontentPerioddispositionPeriodpaths: Seq[String], slingPeriodcontentPerioddispositionPeriodexcludedPeriodpaths: Seq[String], slingPeriodcontentPerioddispositionPeriodallPeriodpaths: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingSecurityImplContentDispositionFilter(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodcontentPerioddispositionPeriodpaths, slingPeriodcontentPerioddispositionPeriodexcludedPeriodpaths, slingPeriodcontentPerioddispositionPeriodallPeriodpaths) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingSecurityImplReferrerFilterInfo
        */
        private def orgApacheSlingSecurityImplReferrerFilter(da: DataAccessor): Endpoint[OrgApacheSlingSecurityImplReferrerFilterInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.security.impl.ReferrerFilter" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("allow.empty").map(_.map(_.toBoolean)) :: params("allow.hosts") :: params("allow.hosts.regexp") :: params("filter.methods") :: params("exclude.agents.regexp")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], allowPeriodempty: Option[Boolean], allowPeriodhosts: Seq[String], allowPeriodhostsPeriodregexp: Seq[String], filterPeriodmethods: Seq[String], excludePeriodagentsPeriodregexp: Seq[String]) =>
          da.Configmgr_orgApacheSlingSecurityImplReferrerFilter(post, apply, delete, action, Dollarlocation, propertylist, allowPeriodempty, allowPeriodhosts, allowPeriodhostsPeriodregexp, filterPeriodmethods, excludePeriodagentsPeriodregexp) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo
        */
        private def orgApacheSlingServiceusermappingImplServiceUserMapperImpl(da: DataAccessor): Endpoint[OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("user.mapping") :: paramOption("user.default") :: paramOption("user.enable.default.mapping").map(_.map(_.toBoolean)) :: paramOption("require.validation").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], userPeriodmapping: Seq[String], userPerioddefault: Option[String], userPeriodenablePerioddefaultPeriodmapping: Option[Boolean], requirePeriodvalidation: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingServiceusermappingImplServiceUserMapperImpl(post, apply, delete, action, Dollarlocation, propertylist, userPeriodmapping, userPerioddefault, userPeriodenablePerioddefaultPeriodmapping, requirePeriodvalidation) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo
        */
        private def orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(da: DataAccessor): Endpoint[OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("service.ranking").map(_.map(_.toInt)) :: params("user.mapping")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servicePeriodranking: Option[Int], userPeriodmapping: Seq[String]) =>
          da.Configmgr_orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(post, apply, delete, action, Dollarlocation, propertylist, servicePeriodranking, userPeriodmapping) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingServletsGetDefaultGetServletInfo
        */
        private def orgApacheSlingServletsGetDefaultGetServlet(da: DataAccessor): Endpoint[OrgApacheSlingServletsGetDefaultGetServletInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.servlets.get.DefaultGetServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("aliases") :: paramOption("index").map(_.map(_.toBoolean)) :: params("index.files") :: paramOption("enable.html").map(_.map(_.toBoolean)) :: paramOption("enable.json").map(_.map(_.toBoolean)) :: paramOption("enable.txt").map(_.map(_.toBoolean)) :: paramOption("enable.xml").map(_.map(_.toBoolean)) :: paramOption("json.maximumresults").map(_.map(_.toInt)) :: paramOption("ecmaSuport").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], aliases: Seq[String], index: Option[Boolean], indexPeriodfiles: Seq[String], enablePeriodhtml: Option[Boolean], enablePeriodjson: Option[Boolean], enablePeriodtxt: Option[Boolean], enablePeriodxml: Option[Boolean], jsonPeriodmaximumresults: Option[Int], ecmaSuport: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingServletsGetDefaultGetServlet(post, apply, delete, action, Dollarlocation, propertylist, aliases, index, indexPeriodfiles, enablePeriodhtml, enablePeriodjson, enablePeriodtxt, enablePeriodxml, jsonPeriodmaximumresults, ecmaSuport) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo
        */
        private def orgApacheSlingServletsGetImplVersionVersionInfoServlet(da: DataAccessor): Endpoint[OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.servlets.get.impl.version.VersionInfoServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("sling.servlet.selectors") :: paramOption("ecmaSuport").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], slingPeriodservletPeriodselectors: Seq[String], ecmaSuport: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingServletsGetImplVersionVersionInfoServlet(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodservletPeriodselectors, ecmaSuport) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo
        */
        private def orgApacheSlingServletsPostImplHelperChunkCleanUpTask(da: DataAccessor): Endpoint[OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("scheduler.expression") :: paramOption("scheduler.concurrent").map(_.map(_.toBoolean)) :: paramOption("chunk.cleanup.age").map(_.map(_.toInt))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], schedulerPeriodexpression: Option[String], schedulerPeriodconcurrent: Option[Boolean], chunkPeriodcleanupPeriodage: Option[Int]) =>
          da.Configmgr_orgApacheSlingServletsPostImplHelperChunkCleanUpTask(post, apply, delete, action, Dollarlocation, propertylist, schedulerPeriodexpression, schedulerPeriodconcurrent, chunkPeriodcleanupPeriodage) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingServletsPostImplSlingPostServletInfo
        */
        private def orgApacheSlingServletsPostImplSlingPostServlet(da: DataAccessor): Endpoint[OrgApacheSlingServletsPostImplSlingPostServletInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.servlets.post.impl.SlingPostServlet" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("servlet.post.dateFormats") :: params("servlet.post.nodeNameHints") :: paramOption("servlet.post.nodeNameMaxLength").map(_.map(_.toInt)) :: paramOption("servlet.post.checkinNewVersionableNodes").map(_.map(_.toBoolean)) :: paramOption("servlet.post.autoCheckout").map(_.map(_.toBoolean)) :: paramOption("servlet.post.autoCheckin").map(_.map(_.toBoolean)) :: paramOption("servlet.post.ignorePattern")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servletPeriodpostPerioddateFormats: Seq[String], servletPeriodpostPeriodnodeNameHints: Seq[String], servletPeriodpostPeriodnodeNameMaxLength: Option[Int], servletPeriodpostPeriodcheckinNewVersionableNodes: Option[Boolean], servletPeriodpostPeriodautoCheckout: Option[Boolean], servletPeriodpostPeriodautoCheckin: Option[Boolean], servletPeriodpostPeriodignorePattern: Option[String]) =>
          da.Configmgr_orgApacheSlingServletsPostImplSlingPostServlet(post, apply, delete, action, Dollarlocation, propertylist, servletPeriodpostPerioddateFormats, servletPeriodpostPeriodnodeNameHints, servletPeriodpostPeriodnodeNameMaxLength, servletPeriodpostPeriodcheckinNewVersionableNodes, servletPeriodpostPeriodautoCheckout, servletPeriodpostPeriodautoCheckin, servletPeriodpostPeriodignorePattern) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingServletsResolverSlingServletResolverInfo
        */
        private def orgApacheSlingServletsResolverSlingServletResolver(da: DataAccessor): Endpoint[OrgApacheSlingServletsResolverSlingServletResolverInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.servlets.resolver.SlingServletResolver" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("servletresolver.servletRoot") :: paramOption("servletresolver.cacheSize").map(_.map(_.toInt)) :: params("servletresolver.paths") :: params("servletresolver.defaultExtensions")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], servletresolverPeriodservletRoot: Option[String], servletresolverPeriodcacheSize: Option[Int], servletresolverPeriodpaths: Seq[String], servletresolverPerioddefaultExtensions: Seq[String]) =>
          da.Configmgr_orgApacheSlingServletsResolverSlingServletResolver(post, apply, delete, action, Dollarlocation, propertylist, servletresolverPeriodservletRoot, servletresolverPeriodcacheSize, servletresolverPeriodpaths, servletresolverPerioddefaultExtensions) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo
        */
        private def orgApacheSlingSettingsImplSlingSettingsServiceImpl(da: DataAccessor): Endpoint[OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.settings.impl.SlingSettingsServiceImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("sling.name") :: paramOption("sling.description")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], slingPeriodname: Option[String], slingPerioddescription: Option[String]) =>
          da.Configmgr_orgApacheSlingSettingsImplSlingSettingsServiceImpl(post, apply, delete, action, Dollarlocation, propertylist, slingPeriodname, slingPerioddescription) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingStartupfilterImplStartupFilterImplInfo
        */
        private def orgApacheSlingStartupfilterImplStartupFilterImpl(da: DataAccessor): Endpoint[OrgApacheSlingStartupfilterImplStartupFilterImplInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.startupfilter.impl.StartupFilterImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("active.by.default").map(_.map(_.toBoolean)) :: paramOption("default.message")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], activePeriodbyPerioddefault: Option[Boolean], defaultPeriodmessage: Option[String]) =>
          da.Configmgr_orgApacheSlingStartupfilterImplStartupFilterImpl(post, apply, delete, action, Dollarlocation, propertylist, activePeriodbyPerioddefault, defaultPeriodmessage) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingTenantInternalTenantProviderImplInfo
        */
        private def orgApacheSlingTenantInternalTenantProviderImpl(da: DataAccessor): Endpoint[OrgApacheSlingTenantInternalTenantProviderImplInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.tenant.internal.TenantProviderImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("tenant.root") :: params("tenant.path.matcher")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], tenantPeriodroot: Option[String], tenantPeriodpathPeriodmatcher: Seq[String]) =>
          da.Configmgr_orgApacheSlingTenantInternalTenantProviderImpl(post, apply, delete, action, Dollarlocation, propertylist, tenantPeriodroot, tenantPeriodpathPeriodmatcher) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingTracerInternalLogTracerInfo
        */
        private def orgApacheSlingTracerInternalLogTracer(da: DataAccessor): Endpoint[OrgApacheSlingTracerInternalLogTracerInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.tracer.internal.LogTracer" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: params("tracerSets") :: paramOption("enabled").map(_.map(_.toBoolean)) :: paramOption("servletEnabled").map(_.map(_.toBoolean)) :: paramOption("recordingCacheSizeInMB").map(_.map(_.toInt)) :: paramOption("recordingCacheDurationInSecs").map(_.map(_.toInt)) :: paramOption("recordingCompressionEnabled").map(_.map(_.toBoolean)) :: paramOption("gzipResponse").map(_.map(_.toBoolean))) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], tracerSets: Seq[String], enabled: Option[Boolean], servletEnabled: Option[Boolean], recordingCacheSizeInMB: Option[Int], recordingCacheDurationInSecs: Option[Int], recordingCompressionEnabled: Option[Boolean], gzipResponse: Option[Boolean]) =>
          da.Configmgr_orgApacheSlingTracerInternalLogTracer(post, apply, delete, action, Dollarlocation, propertylist, tracerSets, enabled, servletEnabled, recordingCacheSizeInMB, recordingCacheDurationInSecs, recordingCompressionEnabled, gzipResponse) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }

        /**
        * 
        * @return An endpoint representing a OrgApacheSlingXssImplXSSFilterImplInfo
        */
        private def orgApacheSlingXssImplXSSFilterImpl(da: DataAccessor): Endpoint[OrgApacheSlingXssImplXSSFilterImplInfo] =
        post("system" :: "console" :: "configMgr" :: "org.apache.sling.xss.impl.XSSFilterImpl" :: paramOption("post").map(_.map(_.toBoolean)) :: paramOption("apply").map(_.map(_.toBoolean)) :: paramOption("delete").map(_.map(_.toBoolean)) :: paramOption("action") :: paramOption("$location") :: params("propertylist") :: paramOption("policyPath")) { (post: Option[Boolean], apply: Option[Boolean], delete: Option[Boolean], action: Option[String], Dollarlocation: Option[String], propertylist: Seq[String], policyPath: Option[String]) =>
          da.Configmgr_orgApacheSlingXssImplXSSFilterImpl(post, apply, delete, action, Dollarlocation, propertylist, policyPath) match {
            case Left(error) => checkError(error)
            case Right(data) => Ok(data)
          }
        } handle {
          case e: Exception => BadRequest(e)
        }


    implicit private def fileUploadToFile(fileUpload: FileUpload) : File = {
      fileUpload match {
        case upload: InMemoryFileUpload =>
          bytesToFile(Buf.ByteArray.Owned.extract(upload.content))
        case upload: OnDiskFileUpload =>
          upload.content
        case _ => null
      }
    }

    private def bytesToFile(input: Array[Byte]): java.io.File = {
      val file = File.createTempFile("tmpConfigmgrApi", null)
      val output = new FileOutputStream(file)
      output.write(input)
      file
    }

    // This assists in params(string) application (which must be Seq[A] in parameter list) when the param is used as a List[A] elsewhere.
    implicit def seqList[A](input: Seq[A]): List[A] = input.toList
}
