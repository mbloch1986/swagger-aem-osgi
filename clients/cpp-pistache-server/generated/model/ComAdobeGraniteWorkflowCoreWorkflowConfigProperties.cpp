/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteWorkflowCoreWorkflowConfigProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::ComAdobeGraniteWorkflowCoreWorkflowConfigProperties()
{
    m_Cq_workflow_config_workflow_packages_root_pathIsSet = false;
    m_Cq_workflow_config_workflow_process_legacy_modeIsSet = false;
    m_Cq_workflow_config_allow_lockingIsSet = false;
    
}

ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::~ComAdobeGraniteWorkflowCoreWorkflowConfigProperties()
{
}

void ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Cq_workflow_config_workflow_packages_root_pathIsSet)
    {
        val["cq.workflow.config.workflow.packages.root.path"] = ModelBase::toJson(m_Cq_workflow_config_workflow_packages_root_path);
    }
    if(m_Cq_workflow_config_workflow_process_legacy_modeIsSet)
    {
        val["cq.workflow.config.workflow.process.legacy.mode"] = ModelBase::toJson(m_Cq_workflow_config_workflow_process_legacy_mode);
    }
    if(m_Cq_workflow_config_allow_lockingIsSet)
    {
        val["cq.workflow.config.allow.locking"] = ModelBase::toJson(m_Cq_workflow_config_allow_locking);
    }
    

    return val;
}

void ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::fromJson(nlohmann::json& val)
{
    if(val.find("cq.workflow.config.workflow.packages.root.path") != val.end())
    {
        if(!val["cq.workflow.config.workflow.packages.root.path"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["cq.workflow.config.workflow.packages.root.path"]);
            setCqWorkflowConfigWorkflowPackagesRootPath( newItem );
        }
        
    }
    if(val.find("cq.workflow.config.workflow.process.legacy.mode") != val.end())
    {
        if(!val["cq.workflow.config.workflow.process.legacy.mode"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["cq.workflow.config.workflow.process.legacy.mode"]);
            setCqWorkflowConfigWorkflowProcessLegacyMode( newItem );
        }
        
    }
    if(val.find("cq.workflow.config.allow.locking") != val.end())
    {
        if(!val["cq.workflow.config.allow.locking"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["cq.workflow.config.allow.locking"]);
            setCqWorkflowConfigAllowLocking( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::getCqWorkflowConfigWorkflowPackagesRootPath() const
{
    return m_Cq_workflow_config_workflow_packages_root_path;
}
void ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::setCqWorkflowConfigWorkflowPackagesRootPath(ConfigNodePropertyArray const& value)
{
    m_Cq_workflow_config_workflow_packages_root_path = value;
    m_Cq_workflow_config_workflow_packages_root_pathIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::cqWorkflowConfigWorkflowPackagesRootPathIsSet() const
{
    return m_Cq_workflow_config_workflow_packages_root_pathIsSet;
}
void ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::unsetCq_workflow_config_workflow_packages_root_path()
{
    m_Cq_workflow_config_workflow_packages_root_pathIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::getCqWorkflowConfigWorkflowProcessLegacyMode() const
{
    return m_Cq_workflow_config_workflow_process_legacy_mode;
}
void ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::setCqWorkflowConfigWorkflowProcessLegacyMode(ConfigNodePropertyBoolean const& value)
{
    m_Cq_workflow_config_workflow_process_legacy_mode = value;
    m_Cq_workflow_config_workflow_process_legacy_modeIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::cqWorkflowConfigWorkflowProcessLegacyModeIsSet() const
{
    return m_Cq_workflow_config_workflow_process_legacy_modeIsSet;
}
void ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::unsetCq_workflow_config_workflow_process_legacy_mode()
{
    m_Cq_workflow_config_workflow_process_legacy_modeIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::getCqWorkflowConfigAllowLocking() const
{
    return m_Cq_workflow_config_allow_locking;
}
void ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::setCqWorkflowConfigAllowLocking(ConfigNodePropertyBoolean const& value)
{
    m_Cq_workflow_config_allow_locking = value;
    m_Cq_workflow_config_allow_lockingIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::cqWorkflowConfigAllowLockingIsSet() const
{
    return m_Cq_workflow_config_allow_lockingIsSet;
}
void ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::unsetCq_workflow_config_allow_locking()
{
    m_Cq_workflow_config_allow_lockingIsSet = false;
}

}
}
}
}

