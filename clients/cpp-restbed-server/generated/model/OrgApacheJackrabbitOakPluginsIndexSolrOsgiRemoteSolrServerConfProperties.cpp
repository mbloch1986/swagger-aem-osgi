/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties()
{
    
}

OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::~OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties()
{
}

std::string OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrHttpUrl() const
{
    return m_Solr_http_url;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrHttpUrl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Solr_http_url = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrZkHost() const
{
    return m_Solr_zk_host;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrZkHost(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Solr_zk_host = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrCollection() const
{
    return m_Solr_collection;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrCollection(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Solr_collection = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrSocketTimeout() const
{
    return m_Solr_socket_timeout;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrSocketTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Solr_socket_timeout = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrConnectionTimeout() const
{
    return m_Solr_connection_timeout;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrConnectionTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Solr_connection_timeout = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrShardsNo() const
{
    return m_Solr_shards_no;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrShardsNo(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Solr_shards_no = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrReplicationFactor() const
{
    return m_Solr_replication_factor;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrReplicationFactor(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Solr_replication_factor = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrConfDir() const
{
    return m_Solr_conf_dir;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrConfDir(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Solr_conf_dir = value;
}

}
}
}
}

