/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheFelixHttpProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheFelixHttpProperties::OrgApacheFelixHttpProperties()
{
    m_Org_apache_felix_http_hostIsSet = false;
    m_Org_apache_felix_http_enableIsSet = false;
    m_Org_osgi_service_http_portIsSet = false;
    m_Org_apache_felix_http_timeoutIsSet = false;
    m_Org_apache_felix_https_enableIsSet = false;
    m_Org_osgi_service_http_port_secureIsSet = false;
    m_Org_apache_felix_https_keystoreIsSet = false;
    m_Org_apache_felix_https_keystore_passwordIsSet = false;
    m_Org_apache_felix_https_keystore_key_passwordIsSet = false;
    m_Org_apache_felix_https_truststoreIsSet = false;
    m_Org_apache_felix_https_truststore_passwordIsSet = false;
    m_Org_apache_felix_https_clientcertificateIsSet = false;
    m_Org_apache_felix_http_context_pathIsSet = false;
    m_Org_apache_felix_http_mbeansIsSet = false;
    m_Org_apache_felix_http_session_timeoutIsSet = false;
    m_Org_apache_felix_http_jetty_threadpool_maxIsSet = false;
    m_Org_apache_felix_http_jetty_acceptorsIsSet = false;
    m_Org_apache_felix_http_jetty_selectorsIsSet = false;
    m_Org_apache_felix_http_jetty_headerBufferSizeIsSet = false;
    m_Org_apache_felix_http_jetty_requestBufferSizeIsSet = false;
    m_Org_apache_felix_http_jetty_responseBufferSizeIsSet = false;
    m_Org_apache_felix_http_jetty_maxFormSizeIsSet = false;
    m_Org_apache_felix_http_path_exclusionsIsSet = false;
    m_Org_apache_felix_https_jetty_ciphersuites_excludedIsSet = false;
    m_Org_apache_felix_https_jetty_ciphersuites_includedIsSet = false;
    m_Org_apache_felix_http_jetty_sendServerHeaderIsSet = false;
    m_Org_apache_felix_https_jetty_protocols_includedIsSet = false;
    m_Org_apache_felix_https_jetty_protocols_excludedIsSet = false;
    m_Org_apache_felix_proxy_load_balancer_connection_enableIsSet = false;
    m_Org_apache_felix_https_jetty_renegotiateAllowedIsSet = false;
    m_Org_apache_felix_https_jetty_session_cookie_httpOnlyIsSet = false;
    m_Org_apache_felix_https_jetty_session_cookie_secureIsSet = false;
    m_Org_eclipse_jetty_servlet_SessionIdPathParameterNameIsSet = false;
    m_Org_eclipse_jetty_servlet_CheckingRemoteSessionIdEncodingIsSet = false;
    m_Org_eclipse_jetty_servlet_SessionCookieIsSet = false;
    m_Org_eclipse_jetty_servlet_SessionDomainIsSet = false;
    m_Org_eclipse_jetty_servlet_SessionPathIsSet = false;
    m_Org_eclipse_jetty_servlet_MaxAgeIsSet = false;
    m_Org_apache_felix_http_nameIsSet = false;
    m_Org_apache_felix_jetty_gziphandler_enableIsSet = false;
    m_Org_apache_felix_jetty_gzip_minGzipSizeIsSet = false;
    m_Org_apache_felix_jetty_gzip_compressionLevelIsSet = false;
    m_Org_apache_felix_jetty_gzip_inflateBufferSizeIsSet = false;
    m_Org_apache_felix_jetty_gzip_syncFlushIsSet = false;
    m_Org_apache_felix_jetty_gzip_excludedUserAgentsIsSet = false;
    m_Org_apache_felix_jetty_gzip_includedMethodsIsSet = false;
    m_Org_apache_felix_jetty_gzip_excludedMethodsIsSet = false;
    m_Org_apache_felix_jetty_gzip_includedPathsIsSet = false;
    m_Org_apache_felix_jetty_gzip_excludedPathsIsSet = false;
    m_Org_apache_felix_jetty_gzip_includedMimeTypesIsSet = false;
    m_Org_apache_felix_jetty_gzip_excludedMimeTypesIsSet = false;
    m_Org_apache_felix_http_session_invalidateIsSet = false;
    m_Org_apache_felix_http_session_uniqueidIsSet = false;
    
}

OrgApacheFelixHttpProperties::~OrgApacheFelixHttpProperties()
{
}

void OrgApacheFelixHttpProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheFelixHttpProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Org_apache_felix_http_hostIsSet)
    {
        val["org.apache.felix.http.host"] = ModelBase::toJson(m_Org_apache_felix_http_host);
    }
    if(m_Org_apache_felix_http_enableIsSet)
    {
        val["org.apache.felix.http.enable"] = ModelBase::toJson(m_Org_apache_felix_http_enable);
    }
    if(m_Org_osgi_service_http_portIsSet)
    {
        val["org.osgi.service.http.port"] = ModelBase::toJson(m_Org_osgi_service_http_port);
    }
    if(m_Org_apache_felix_http_timeoutIsSet)
    {
        val["org.apache.felix.http.timeout"] = ModelBase::toJson(m_Org_apache_felix_http_timeout);
    }
    if(m_Org_apache_felix_https_enableIsSet)
    {
        val["org.apache.felix.https.enable"] = ModelBase::toJson(m_Org_apache_felix_https_enable);
    }
    if(m_Org_osgi_service_http_port_secureIsSet)
    {
        val["org.osgi.service.http.port.secure"] = ModelBase::toJson(m_Org_osgi_service_http_port_secure);
    }
    if(m_Org_apache_felix_https_keystoreIsSet)
    {
        val["org.apache.felix.https.keystore"] = ModelBase::toJson(m_Org_apache_felix_https_keystore);
    }
    if(m_Org_apache_felix_https_keystore_passwordIsSet)
    {
        val["org.apache.felix.https.keystore.password"] = ModelBase::toJson(m_Org_apache_felix_https_keystore_password);
    }
    if(m_Org_apache_felix_https_keystore_key_passwordIsSet)
    {
        val["org.apache.felix.https.keystore.key.password"] = ModelBase::toJson(m_Org_apache_felix_https_keystore_key_password);
    }
    if(m_Org_apache_felix_https_truststoreIsSet)
    {
        val["org.apache.felix.https.truststore"] = ModelBase::toJson(m_Org_apache_felix_https_truststore);
    }
    if(m_Org_apache_felix_https_truststore_passwordIsSet)
    {
        val["org.apache.felix.https.truststore.password"] = ModelBase::toJson(m_Org_apache_felix_https_truststore_password);
    }
    if(m_Org_apache_felix_https_clientcertificateIsSet)
    {
        val["org.apache.felix.https.clientcertificate"] = ModelBase::toJson(m_Org_apache_felix_https_clientcertificate);
    }
    if(m_Org_apache_felix_http_context_pathIsSet)
    {
        val["org.apache.felix.http.context_path"] = ModelBase::toJson(m_Org_apache_felix_http_context_path);
    }
    if(m_Org_apache_felix_http_mbeansIsSet)
    {
        val["org.apache.felix.http.mbeans"] = ModelBase::toJson(m_Org_apache_felix_http_mbeans);
    }
    if(m_Org_apache_felix_http_session_timeoutIsSet)
    {
        val["org.apache.felix.http.session.timeout"] = ModelBase::toJson(m_Org_apache_felix_http_session_timeout);
    }
    if(m_Org_apache_felix_http_jetty_threadpool_maxIsSet)
    {
        val["org.apache.felix.http.jetty.threadpool.max"] = ModelBase::toJson(m_Org_apache_felix_http_jetty_threadpool_max);
    }
    if(m_Org_apache_felix_http_jetty_acceptorsIsSet)
    {
        val["org.apache.felix.http.jetty.acceptors"] = ModelBase::toJson(m_Org_apache_felix_http_jetty_acceptors);
    }
    if(m_Org_apache_felix_http_jetty_selectorsIsSet)
    {
        val["org.apache.felix.http.jetty.selectors"] = ModelBase::toJson(m_Org_apache_felix_http_jetty_selectors);
    }
    if(m_Org_apache_felix_http_jetty_headerBufferSizeIsSet)
    {
        val["org.apache.felix.http.jetty.headerBufferSize"] = ModelBase::toJson(m_Org_apache_felix_http_jetty_headerBufferSize);
    }
    if(m_Org_apache_felix_http_jetty_requestBufferSizeIsSet)
    {
        val["org.apache.felix.http.jetty.requestBufferSize"] = ModelBase::toJson(m_Org_apache_felix_http_jetty_requestBufferSize);
    }
    if(m_Org_apache_felix_http_jetty_responseBufferSizeIsSet)
    {
        val["org.apache.felix.http.jetty.responseBufferSize"] = ModelBase::toJson(m_Org_apache_felix_http_jetty_responseBufferSize);
    }
    if(m_Org_apache_felix_http_jetty_maxFormSizeIsSet)
    {
        val["org.apache.felix.http.jetty.maxFormSize"] = ModelBase::toJson(m_Org_apache_felix_http_jetty_maxFormSize);
    }
    if(m_Org_apache_felix_http_path_exclusionsIsSet)
    {
        val["org.apache.felix.http.path_exclusions"] = ModelBase::toJson(m_Org_apache_felix_http_path_exclusions);
    }
    if(m_Org_apache_felix_https_jetty_ciphersuites_excludedIsSet)
    {
        val["org.apache.felix.https.jetty.ciphersuites.excluded"] = ModelBase::toJson(m_Org_apache_felix_https_jetty_ciphersuites_excluded);
    }
    if(m_Org_apache_felix_https_jetty_ciphersuites_includedIsSet)
    {
        val["org.apache.felix.https.jetty.ciphersuites.included"] = ModelBase::toJson(m_Org_apache_felix_https_jetty_ciphersuites_included);
    }
    if(m_Org_apache_felix_http_jetty_sendServerHeaderIsSet)
    {
        val["org.apache.felix.http.jetty.sendServerHeader"] = ModelBase::toJson(m_Org_apache_felix_http_jetty_sendServerHeader);
    }
    if(m_Org_apache_felix_https_jetty_protocols_includedIsSet)
    {
        val["org.apache.felix.https.jetty.protocols.included"] = ModelBase::toJson(m_Org_apache_felix_https_jetty_protocols_included);
    }
    if(m_Org_apache_felix_https_jetty_protocols_excludedIsSet)
    {
        val["org.apache.felix.https.jetty.protocols.excluded"] = ModelBase::toJson(m_Org_apache_felix_https_jetty_protocols_excluded);
    }
    if(m_Org_apache_felix_proxy_load_balancer_connection_enableIsSet)
    {
        val["org.apache.felix.proxy.load.balancer.connection.enable"] = ModelBase::toJson(m_Org_apache_felix_proxy_load_balancer_connection_enable);
    }
    if(m_Org_apache_felix_https_jetty_renegotiateAllowedIsSet)
    {
        val["org.apache.felix.https.jetty.renegotiateAllowed"] = ModelBase::toJson(m_Org_apache_felix_https_jetty_renegotiateAllowed);
    }
    if(m_Org_apache_felix_https_jetty_session_cookie_httpOnlyIsSet)
    {
        val["org.apache.felix.https.jetty.session.cookie.httpOnly"] = ModelBase::toJson(m_Org_apache_felix_https_jetty_session_cookie_httpOnly);
    }
    if(m_Org_apache_felix_https_jetty_session_cookie_secureIsSet)
    {
        val["org.apache.felix.https.jetty.session.cookie.secure"] = ModelBase::toJson(m_Org_apache_felix_https_jetty_session_cookie_secure);
    }
    if(m_Org_eclipse_jetty_servlet_SessionIdPathParameterNameIsSet)
    {
        val["org.eclipse.jetty.servlet.SessionIdPathParameterName"] = ModelBase::toJson(m_Org_eclipse_jetty_servlet_SessionIdPathParameterName);
    }
    if(m_Org_eclipse_jetty_servlet_CheckingRemoteSessionIdEncodingIsSet)
    {
        val["org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding"] = ModelBase::toJson(m_Org_eclipse_jetty_servlet_CheckingRemoteSessionIdEncoding);
    }
    if(m_Org_eclipse_jetty_servlet_SessionCookieIsSet)
    {
        val["org.eclipse.jetty.servlet.SessionCookie"] = ModelBase::toJson(m_Org_eclipse_jetty_servlet_SessionCookie);
    }
    if(m_Org_eclipse_jetty_servlet_SessionDomainIsSet)
    {
        val["org.eclipse.jetty.servlet.SessionDomain"] = ModelBase::toJson(m_Org_eclipse_jetty_servlet_SessionDomain);
    }
    if(m_Org_eclipse_jetty_servlet_SessionPathIsSet)
    {
        val["org.eclipse.jetty.servlet.SessionPath"] = ModelBase::toJson(m_Org_eclipse_jetty_servlet_SessionPath);
    }
    if(m_Org_eclipse_jetty_servlet_MaxAgeIsSet)
    {
        val["org.eclipse.jetty.servlet.MaxAge"] = ModelBase::toJson(m_Org_eclipse_jetty_servlet_MaxAge);
    }
    if(m_Org_apache_felix_http_nameIsSet)
    {
        val["org.apache.felix.http.name"] = ModelBase::toJson(m_Org_apache_felix_http_name);
    }
    if(m_Org_apache_felix_jetty_gziphandler_enableIsSet)
    {
        val["org.apache.felix.jetty.gziphandler.enable"] = ModelBase::toJson(m_Org_apache_felix_jetty_gziphandler_enable);
    }
    if(m_Org_apache_felix_jetty_gzip_minGzipSizeIsSet)
    {
        val["org.apache.felix.jetty.gzip.minGzipSize"] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_minGzipSize);
    }
    if(m_Org_apache_felix_jetty_gzip_compressionLevelIsSet)
    {
        val["org.apache.felix.jetty.gzip.compressionLevel"] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_compressionLevel);
    }
    if(m_Org_apache_felix_jetty_gzip_inflateBufferSizeIsSet)
    {
        val["org.apache.felix.jetty.gzip.inflateBufferSize"] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_inflateBufferSize);
    }
    if(m_Org_apache_felix_jetty_gzip_syncFlushIsSet)
    {
        val["org.apache.felix.jetty.gzip.syncFlush"] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_syncFlush);
    }
    if(m_Org_apache_felix_jetty_gzip_excludedUserAgentsIsSet)
    {
        val["org.apache.felix.jetty.gzip.excludedUserAgents"] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_excludedUserAgents);
    }
    if(m_Org_apache_felix_jetty_gzip_includedMethodsIsSet)
    {
        val["org.apache.felix.jetty.gzip.includedMethods"] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_includedMethods);
    }
    if(m_Org_apache_felix_jetty_gzip_excludedMethodsIsSet)
    {
        val["org.apache.felix.jetty.gzip.excludedMethods"] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_excludedMethods);
    }
    if(m_Org_apache_felix_jetty_gzip_includedPathsIsSet)
    {
        val["org.apache.felix.jetty.gzip.includedPaths"] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_includedPaths);
    }
    if(m_Org_apache_felix_jetty_gzip_excludedPathsIsSet)
    {
        val["org.apache.felix.jetty.gzip.excludedPaths"] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_excludedPaths);
    }
    if(m_Org_apache_felix_jetty_gzip_includedMimeTypesIsSet)
    {
        val["org.apache.felix.jetty.gzip.includedMimeTypes"] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_includedMimeTypes);
    }
    if(m_Org_apache_felix_jetty_gzip_excludedMimeTypesIsSet)
    {
        val["org.apache.felix.jetty.gzip.excludedMimeTypes"] = ModelBase::toJson(m_Org_apache_felix_jetty_gzip_excludedMimeTypes);
    }
    if(m_Org_apache_felix_http_session_invalidateIsSet)
    {
        val["org.apache.felix.http.session.invalidate"] = ModelBase::toJson(m_Org_apache_felix_http_session_invalidate);
    }
    if(m_Org_apache_felix_http_session_uniqueidIsSet)
    {
        val["org.apache.felix.http.session.uniqueid"] = ModelBase::toJson(m_Org_apache_felix_http_session_uniqueid);
    }
    

    return val;
}

void OrgApacheFelixHttpProperties::fromJson(nlohmann::json& val)
{
    if(val.find("org.apache.felix.http.host") != val.end())
    {
        if(!val["org.apache.felix.http.host"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["org.apache.felix.http.host"]);
            setOrgApacheFelixHttpHost( newItem );
        }
        
    }
    if(val.find("org.apache.felix.http.enable") != val.end())
    {
        if(!val["org.apache.felix.http.enable"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["org.apache.felix.http.enable"]);
            setOrgApacheFelixHttpEnable( newItem );
        }
        
    }
    if(val.find("org.osgi.service.http.port") != val.end())
    {
        if(!val["org.osgi.service.http.port"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["org.osgi.service.http.port"]);
            setOrgOsgiServiceHttpPort( newItem );
        }
        
    }
    if(val.find("org.apache.felix.http.timeout") != val.end())
    {
        if(!val["org.apache.felix.http.timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["org.apache.felix.http.timeout"]);
            setOrgApacheFelixHttpTimeout( newItem );
        }
        
    }
    if(val.find("org.apache.felix.https.enable") != val.end())
    {
        if(!val["org.apache.felix.https.enable"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["org.apache.felix.https.enable"]);
            setOrgApacheFelixHttpsEnable( newItem );
        }
        
    }
    if(val.find("org.osgi.service.http.port.secure") != val.end())
    {
        if(!val["org.osgi.service.http.port.secure"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["org.osgi.service.http.port.secure"]);
            setOrgOsgiServiceHttpPortSecure( newItem );
        }
        
    }
    if(val.find("org.apache.felix.https.keystore") != val.end())
    {
        if(!val["org.apache.felix.https.keystore"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["org.apache.felix.https.keystore"]);
            setOrgApacheFelixHttpsKeystore( newItem );
        }
        
    }
    if(val.find("org.apache.felix.https.keystore.password") != val.end())
    {
        if(!val["org.apache.felix.https.keystore.password"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["org.apache.felix.https.keystore.password"]);
            setOrgApacheFelixHttpsKeystorePassword( newItem );
        }
        
    }
    if(val.find("org.apache.felix.https.keystore.key.password") != val.end())
    {
        if(!val["org.apache.felix.https.keystore.key.password"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["org.apache.felix.https.keystore.key.password"]);
            setOrgApacheFelixHttpsKeystoreKeyPassword( newItem );
        }
        
    }
    if(val.find("org.apache.felix.https.truststore") != val.end())
    {
        if(!val["org.apache.felix.https.truststore"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["org.apache.felix.https.truststore"]);
            setOrgApacheFelixHttpsTruststore( newItem );
        }
        
    }
    if(val.find("org.apache.felix.https.truststore.password") != val.end())
    {
        if(!val["org.apache.felix.https.truststore.password"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["org.apache.felix.https.truststore.password"]);
            setOrgApacheFelixHttpsTruststorePassword( newItem );
        }
        
    }
    if(val.find("org.apache.felix.https.clientcertificate") != val.end())
    {
        if(!val["org.apache.felix.https.clientcertificate"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["org.apache.felix.https.clientcertificate"]);
            setOrgApacheFelixHttpsClientcertificate( newItem );
        }
        
    }
    if(val.find("org.apache.felix.http.context_path") != val.end())
    {
        if(!val["org.apache.felix.http.context_path"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["org.apache.felix.http.context_path"]);
            setOrgApacheFelixHttpContextPath( newItem );
        }
        
    }
    if(val.find("org.apache.felix.http.mbeans") != val.end())
    {
        if(!val["org.apache.felix.http.mbeans"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["org.apache.felix.http.mbeans"]);
            setOrgApacheFelixHttpMbeans( newItem );
        }
        
    }
    if(val.find("org.apache.felix.http.session.timeout") != val.end())
    {
        if(!val["org.apache.felix.http.session.timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["org.apache.felix.http.session.timeout"]);
            setOrgApacheFelixHttpSessionTimeout( newItem );
        }
        
    }
    if(val.find("org.apache.felix.http.jetty.threadpool.max") != val.end())
    {
        if(!val["org.apache.felix.http.jetty.threadpool.max"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["org.apache.felix.http.jetty.threadpool.max"]);
            setOrgApacheFelixHttpJettyThreadpoolMax( newItem );
        }
        
    }
    if(val.find("org.apache.felix.http.jetty.acceptors") != val.end())
    {
        if(!val["org.apache.felix.http.jetty.acceptors"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["org.apache.felix.http.jetty.acceptors"]);
            setOrgApacheFelixHttpJettyAcceptors( newItem );
        }
        
    }
    if(val.find("org.apache.felix.http.jetty.selectors") != val.end())
    {
        if(!val["org.apache.felix.http.jetty.selectors"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["org.apache.felix.http.jetty.selectors"]);
            setOrgApacheFelixHttpJettySelectors( newItem );
        }
        
    }
    if(val.find("org.apache.felix.http.jetty.headerBufferSize") != val.end())
    {
        if(!val["org.apache.felix.http.jetty.headerBufferSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["org.apache.felix.http.jetty.headerBufferSize"]);
            setOrgApacheFelixHttpJettyHeaderBufferSize( newItem );
        }
        
    }
    if(val.find("org.apache.felix.http.jetty.requestBufferSize") != val.end())
    {
        if(!val["org.apache.felix.http.jetty.requestBufferSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["org.apache.felix.http.jetty.requestBufferSize"]);
            setOrgApacheFelixHttpJettyRequestBufferSize( newItem );
        }
        
    }
    if(val.find("org.apache.felix.http.jetty.responseBufferSize") != val.end())
    {
        if(!val["org.apache.felix.http.jetty.responseBufferSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["org.apache.felix.http.jetty.responseBufferSize"]);
            setOrgApacheFelixHttpJettyResponseBufferSize( newItem );
        }
        
    }
    if(val.find("org.apache.felix.http.jetty.maxFormSize") != val.end())
    {
        if(!val["org.apache.felix.http.jetty.maxFormSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["org.apache.felix.http.jetty.maxFormSize"]);
            setOrgApacheFelixHttpJettyMaxFormSize( newItem );
        }
        
    }
    if(val.find("org.apache.felix.http.path_exclusions") != val.end())
    {
        if(!val["org.apache.felix.http.path_exclusions"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["org.apache.felix.http.path_exclusions"]);
            setOrgApacheFelixHttpPathExclusions( newItem );
        }
        
    }
    if(val.find("org.apache.felix.https.jetty.ciphersuites.excluded") != val.end())
    {
        if(!val["org.apache.felix.https.jetty.ciphersuites.excluded"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["org.apache.felix.https.jetty.ciphersuites.excluded"]);
            setOrgApacheFelixHttpsJettyCiphersuitesExcluded( newItem );
        }
        
    }
    if(val.find("org.apache.felix.https.jetty.ciphersuites.included") != val.end())
    {
        if(!val["org.apache.felix.https.jetty.ciphersuites.included"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["org.apache.felix.https.jetty.ciphersuites.included"]);
            setOrgApacheFelixHttpsJettyCiphersuitesIncluded( newItem );
        }
        
    }
    if(val.find("org.apache.felix.http.jetty.sendServerHeader") != val.end())
    {
        if(!val["org.apache.felix.http.jetty.sendServerHeader"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["org.apache.felix.http.jetty.sendServerHeader"]);
            setOrgApacheFelixHttpJettySendServerHeader( newItem );
        }
        
    }
    if(val.find("org.apache.felix.https.jetty.protocols.included") != val.end())
    {
        if(!val["org.apache.felix.https.jetty.protocols.included"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["org.apache.felix.https.jetty.protocols.included"]);
            setOrgApacheFelixHttpsJettyProtocolsIncluded( newItem );
        }
        
    }
    if(val.find("org.apache.felix.https.jetty.protocols.excluded") != val.end())
    {
        if(!val["org.apache.felix.https.jetty.protocols.excluded"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["org.apache.felix.https.jetty.protocols.excluded"]);
            setOrgApacheFelixHttpsJettyProtocolsExcluded( newItem );
        }
        
    }
    if(val.find("org.apache.felix.proxy.load.balancer.connection.enable") != val.end())
    {
        if(!val["org.apache.felix.proxy.load.balancer.connection.enable"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["org.apache.felix.proxy.load.balancer.connection.enable"]);
            setOrgApacheFelixProxyLoadBalancerConnectionEnable( newItem );
        }
        
    }
    if(val.find("org.apache.felix.https.jetty.renegotiateAllowed") != val.end())
    {
        if(!val["org.apache.felix.https.jetty.renegotiateAllowed"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["org.apache.felix.https.jetty.renegotiateAllowed"]);
            setOrgApacheFelixHttpsJettyRenegotiateAllowed( newItem );
        }
        
    }
    if(val.find("org.apache.felix.https.jetty.session.cookie.httpOnly") != val.end())
    {
        if(!val["org.apache.felix.https.jetty.session.cookie.httpOnly"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["org.apache.felix.https.jetty.session.cookie.httpOnly"]);
            setOrgApacheFelixHttpsJettySessionCookieHttpOnly( newItem );
        }
        
    }
    if(val.find("org.apache.felix.https.jetty.session.cookie.secure") != val.end())
    {
        if(!val["org.apache.felix.https.jetty.session.cookie.secure"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["org.apache.felix.https.jetty.session.cookie.secure"]);
            setOrgApacheFelixHttpsJettySessionCookieSecure( newItem );
        }
        
    }
    if(val.find("org.eclipse.jetty.servlet.SessionIdPathParameterName") != val.end())
    {
        if(!val["org.eclipse.jetty.servlet.SessionIdPathParameterName"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["org.eclipse.jetty.servlet.SessionIdPathParameterName"]);
            setOrgEclipseJettyServletSessionIdPathParameterName( newItem );
        }
        
    }
    if(val.find("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding") != val.end())
    {
        if(!val["org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding"]);
            setOrgEclipseJettyServletCheckingRemoteSessionIdEncoding( newItem );
        }
        
    }
    if(val.find("org.eclipse.jetty.servlet.SessionCookie") != val.end())
    {
        if(!val["org.eclipse.jetty.servlet.SessionCookie"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["org.eclipse.jetty.servlet.SessionCookie"]);
            setOrgEclipseJettyServletSessionCookie( newItem );
        }
        
    }
    if(val.find("org.eclipse.jetty.servlet.SessionDomain") != val.end())
    {
        if(!val["org.eclipse.jetty.servlet.SessionDomain"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["org.eclipse.jetty.servlet.SessionDomain"]);
            setOrgEclipseJettyServletSessionDomain( newItem );
        }
        
    }
    if(val.find("org.eclipse.jetty.servlet.SessionPath") != val.end())
    {
        if(!val["org.eclipse.jetty.servlet.SessionPath"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["org.eclipse.jetty.servlet.SessionPath"]);
            setOrgEclipseJettyServletSessionPath( newItem );
        }
        
    }
    if(val.find("org.eclipse.jetty.servlet.MaxAge") != val.end())
    {
        if(!val["org.eclipse.jetty.servlet.MaxAge"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["org.eclipse.jetty.servlet.MaxAge"]);
            setOrgEclipseJettyServletMaxAge( newItem );
        }
        
    }
    if(val.find("org.apache.felix.http.name") != val.end())
    {
        if(!val["org.apache.felix.http.name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["org.apache.felix.http.name"]);
            setOrgApacheFelixHttpName( newItem );
        }
        
    }
    if(val.find("org.apache.felix.jetty.gziphandler.enable") != val.end())
    {
        if(!val["org.apache.felix.jetty.gziphandler.enable"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["org.apache.felix.jetty.gziphandler.enable"]);
            setOrgApacheFelixJettyGziphandlerEnable( newItem );
        }
        
    }
    if(val.find("org.apache.felix.jetty.gzip.minGzipSize") != val.end())
    {
        if(!val["org.apache.felix.jetty.gzip.minGzipSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["org.apache.felix.jetty.gzip.minGzipSize"]);
            setOrgApacheFelixJettyGzipMinGzipSize( newItem );
        }
        
    }
    if(val.find("org.apache.felix.jetty.gzip.compressionLevel") != val.end())
    {
        if(!val["org.apache.felix.jetty.gzip.compressionLevel"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["org.apache.felix.jetty.gzip.compressionLevel"]);
            setOrgApacheFelixJettyGzipCompressionLevel( newItem );
        }
        
    }
    if(val.find("org.apache.felix.jetty.gzip.inflateBufferSize") != val.end())
    {
        if(!val["org.apache.felix.jetty.gzip.inflateBufferSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["org.apache.felix.jetty.gzip.inflateBufferSize"]);
            setOrgApacheFelixJettyGzipInflateBufferSize( newItem );
        }
        
    }
    if(val.find("org.apache.felix.jetty.gzip.syncFlush") != val.end())
    {
        if(!val["org.apache.felix.jetty.gzip.syncFlush"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["org.apache.felix.jetty.gzip.syncFlush"]);
            setOrgApacheFelixJettyGzipSyncFlush( newItem );
        }
        
    }
    if(val.find("org.apache.felix.jetty.gzip.excludedUserAgents") != val.end())
    {
        if(!val["org.apache.felix.jetty.gzip.excludedUserAgents"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["org.apache.felix.jetty.gzip.excludedUserAgents"]);
            setOrgApacheFelixJettyGzipExcludedUserAgents( newItem );
        }
        
    }
    if(val.find("org.apache.felix.jetty.gzip.includedMethods") != val.end())
    {
        if(!val["org.apache.felix.jetty.gzip.includedMethods"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["org.apache.felix.jetty.gzip.includedMethods"]);
            setOrgApacheFelixJettyGzipIncludedMethods( newItem );
        }
        
    }
    if(val.find("org.apache.felix.jetty.gzip.excludedMethods") != val.end())
    {
        if(!val["org.apache.felix.jetty.gzip.excludedMethods"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["org.apache.felix.jetty.gzip.excludedMethods"]);
            setOrgApacheFelixJettyGzipExcludedMethods( newItem );
        }
        
    }
    if(val.find("org.apache.felix.jetty.gzip.includedPaths") != val.end())
    {
        if(!val["org.apache.felix.jetty.gzip.includedPaths"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["org.apache.felix.jetty.gzip.includedPaths"]);
            setOrgApacheFelixJettyGzipIncludedPaths( newItem );
        }
        
    }
    if(val.find("org.apache.felix.jetty.gzip.excludedPaths") != val.end())
    {
        if(!val["org.apache.felix.jetty.gzip.excludedPaths"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["org.apache.felix.jetty.gzip.excludedPaths"]);
            setOrgApacheFelixJettyGzipExcludedPaths( newItem );
        }
        
    }
    if(val.find("org.apache.felix.jetty.gzip.includedMimeTypes") != val.end())
    {
        if(!val["org.apache.felix.jetty.gzip.includedMimeTypes"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["org.apache.felix.jetty.gzip.includedMimeTypes"]);
            setOrgApacheFelixJettyGzipIncludedMimeTypes( newItem );
        }
        
    }
    if(val.find("org.apache.felix.jetty.gzip.excludedMimeTypes") != val.end())
    {
        if(!val["org.apache.felix.jetty.gzip.excludedMimeTypes"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["org.apache.felix.jetty.gzip.excludedMimeTypes"]);
            setOrgApacheFelixJettyGzipExcludedMimeTypes( newItem );
        }
        
    }
    if(val.find("org.apache.felix.http.session.invalidate") != val.end())
    {
        if(!val["org.apache.felix.http.session.invalidate"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["org.apache.felix.http.session.invalidate"]);
            setOrgApacheFelixHttpSessionInvalidate( newItem );
        }
        
    }
    if(val.find("org.apache.felix.http.session.uniqueid") != val.end())
    {
        if(!val["org.apache.felix.http.session.uniqueid"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["org.apache.felix.http.session.uniqueid"]);
            setOrgApacheFelixHttpSessionUniqueid( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheFelixHttpProperties::getOrgApacheFelixHttpHost() const
{
    return m_Org_apache_felix_http_host;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpHost(ConfigNodePropertyString const& value)
{
    m_Org_apache_felix_http_host = value;
    m_Org_apache_felix_http_hostIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpHostIsSet() const
{
    return m_Org_apache_felix_http_hostIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_host()
{
    m_Org_apache_felix_http_hostIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheFelixHttpProperties::getOrgApacheFelixHttpEnable() const
{
    return m_Org_apache_felix_http_enable;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpEnable(ConfigNodePropertyBoolean const& value)
{
    m_Org_apache_felix_http_enable = value;
    m_Org_apache_felix_http_enableIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpEnableIsSet() const
{
    return m_Org_apache_felix_http_enableIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_enable()
{
    m_Org_apache_felix_http_enableIsSet = false;
}
ConfigNodePropertyInteger OrgApacheFelixHttpProperties::getOrgOsgiServiceHttpPort() const
{
    return m_Org_osgi_service_http_port;
}
void OrgApacheFelixHttpProperties::setOrgOsgiServiceHttpPort(ConfigNodePropertyInteger const& value)
{
    m_Org_osgi_service_http_port = value;
    m_Org_osgi_service_http_portIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgOsgiServiceHttpPortIsSet() const
{
    return m_Org_osgi_service_http_portIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_osgi_service_http_port()
{
    m_Org_osgi_service_http_portIsSet = false;
}
ConfigNodePropertyInteger OrgApacheFelixHttpProperties::getOrgApacheFelixHttpTimeout() const
{
    return m_Org_apache_felix_http_timeout;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpTimeout(ConfigNodePropertyInteger const& value)
{
    m_Org_apache_felix_http_timeout = value;
    m_Org_apache_felix_http_timeoutIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpTimeoutIsSet() const
{
    return m_Org_apache_felix_http_timeoutIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_timeout()
{
    m_Org_apache_felix_http_timeoutIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsEnable() const
{
    return m_Org_apache_felix_https_enable;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsEnable(ConfigNodePropertyBoolean const& value)
{
    m_Org_apache_felix_https_enable = value;
    m_Org_apache_felix_https_enableIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsEnableIsSet() const
{
    return m_Org_apache_felix_https_enableIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_enable()
{
    m_Org_apache_felix_https_enableIsSet = false;
}
ConfigNodePropertyInteger OrgApacheFelixHttpProperties::getOrgOsgiServiceHttpPortSecure() const
{
    return m_Org_osgi_service_http_port_secure;
}
void OrgApacheFelixHttpProperties::setOrgOsgiServiceHttpPortSecure(ConfigNodePropertyInteger const& value)
{
    m_Org_osgi_service_http_port_secure = value;
    m_Org_osgi_service_http_port_secureIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgOsgiServiceHttpPortSecureIsSet() const
{
    return m_Org_osgi_service_http_port_secureIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_osgi_service_http_port_secure()
{
    m_Org_osgi_service_http_port_secureIsSet = false;
}
ConfigNodePropertyString OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsKeystore() const
{
    return m_Org_apache_felix_https_keystore;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsKeystore(ConfigNodePropertyString const& value)
{
    m_Org_apache_felix_https_keystore = value;
    m_Org_apache_felix_https_keystoreIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsKeystoreIsSet() const
{
    return m_Org_apache_felix_https_keystoreIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_keystore()
{
    m_Org_apache_felix_https_keystoreIsSet = false;
}
ConfigNodePropertyString OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsKeystorePassword() const
{
    return m_Org_apache_felix_https_keystore_password;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsKeystorePassword(ConfigNodePropertyString const& value)
{
    m_Org_apache_felix_https_keystore_password = value;
    m_Org_apache_felix_https_keystore_passwordIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsKeystorePasswordIsSet() const
{
    return m_Org_apache_felix_https_keystore_passwordIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_keystore_password()
{
    m_Org_apache_felix_https_keystore_passwordIsSet = false;
}
ConfigNodePropertyString OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsKeystoreKeyPassword() const
{
    return m_Org_apache_felix_https_keystore_key_password;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsKeystoreKeyPassword(ConfigNodePropertyString const& value)
{
    m_Org_apache_felix_https_keystore_key_password = value;
    m_Org_apache_felix_https_keystore_key_passwordIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsKeystoreKeyPasswordIsSet() const
{
    return m_Org_apache_felix_https_keystore_key_passwordIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_keystore_key_password()
{
    m_Org_apache_felix_https_keystore_key_passwordIsSet = false;
}
ConfigNodePropertyString OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsTruststore() const
{
    return m_Org_apache_felix_https_truststore;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsTruststore(ConfigNodePropertyString const& value)
{
    m_Org_apache_felix_https_truststore = value;
    m_Org_apache_felix_https_truststoreIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsTruststoreIsSet() const
{
    return m_Org_apache_felix_https_truststoreIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_truststore()
{
    m_Org_apache_felix_https_truststoreIsSet = false;
}
ConfigNodePropertyString OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsTruststorePassword() const
{
    return m_Org_apache_felix_https_truststore_password;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsTruststorePassword(ConfigNodePropertyString const& value)
{
    m_Org_apache_felix_https_truststore_password = value;
    m_Org_apache_felix_https_truststore_passwordIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsTruststorePasswordIsSet() const
{
    return m_Org_apache_felix_https_truststore_passwordIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_truststore_password()
{
    m_Org_apache_felix_https_truststore_passwordIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsClientcertificate() const
{
    return m_Org_apache_felix_https_clientcertificate;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsClientcertificate(ConfigNodePropertyDropDown const& value)
{
    m_Org_apache_felix_https_clientcertificate = value;
    m_Org_apache_felix_https_clientcertificateIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsClientcertificateIsSet() const
{
    return m_Org_apache_felix_https_clientcertificateIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_clientcertificate()
{
    m_Org_apache_felix_https_clientcertificateIsSet = false;
}
ConfigNodePropertyString OrgApacheFelixHttpProperties::getOrgApacheFelixHttpContextPath() const
{
    return m_Org_apache_felix_http_context_path;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpContextPath(ConfigNodePropertyString const& value)
{
    m_Org_apache_felix_http_context_path = value;
    m_Org_apache_felix_http_context_pathIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpContextPathIsSet() const
{
    return m_Org_apache_felix_http_context_pathIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_context_path()
{
    m_Org_apache_felix_http_context_pathIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheFelixHttpProperties::getOrgApacheFelixHttpMbeans() const
{
    return m_Org_apache_felix_http_mbeans;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpMbeans(ConfigNodePropertyBoolean const& value)
{
    m_Org_apache_felix_http_mbeans = value;
    m_Org_apache_felix_http_mbeansIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpMbeansIsSet() const
{
    return m_Org_apache_felix_http_mbeansIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_mbeans()
{
    m_Org_apache_felix_http_mbeansIsSet = false;
}
ConfigNodePropertyInteger OrgApacheFelixHttpProperties::getOrgApacheFelixHttpSessionTimeout() const
{
    return m_Org_apache_felix_http_session_timeout;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpSessionTimeout(ConfigNodePropertyInteger const& value)
{
    m_Org_apache_felix_http_session_timeout = value;
    m_Org_apache_felix_http_session_timeoutIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpSessionTimeoutIsSet() const
{
    return m_Org_apache_felix_http_session_timeoutIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_session_timeout()
{
    m_Org_apache_felix_http_session_timeoutIsSet = false;
}
ConfigNodePropertyInteger OrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettyThreadpoolMax() const
{
    return m_Org_apache_felix_http_jetty_threadpool_max;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettyThreadpoolMax(ConfigNodePropertyInteger const& value)
{
    m_Org_apache_felix_http_jetty_threadpool_max = value;
    m_Org_apache_felix_http_jetty_threadpool_maxIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpJettyThreadpoolMaxIsSet() const
{
    return m_Org_apache_felix_http_jetty_threadpool_maxIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_jetty_threadpool_max()
{
    m_Org_apache_felix_http_jetty_threadpool_maxIsSet = false;
}
ConfigNodePropertyInteger OrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettyAcceptors() const
{
    return m_Org_apache_felix_http_jetty_acceptors;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettyAcceptors(ConfigNodePropertyInteger const& value)
{
    m_Org_apache_felix_http_jetty_acceptors = value;
    m_Org_apache_felix_http_jetty_acceptorsIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpJettyAcceptorsIsSet() const
{
    return m_Org_apache_felix_http_jetty_acceptorsIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_jetty_acceptors()
{
    m_Org_apache_felix_http_jetty_acceptorsIsSet = false;
}
ConfigNodePropertyInteger OrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettySelectors() const
{
    return m_Org_apache_felix_http_jetty_selectors;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettySelectors(ConfigNodePropertyInteger const& value)
{
    m_Org_apache_felix_http_jetty_selectors = value;
    m_Org_apache_felix_http_jetty_selectorsIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpJettySelectorsIsSet() const
{
    return m_Org_apache_felix_http_jetty_selectorsIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_jetty_selectors()
{
    m_Org_apache_felix_http_jetty_selectorsIsSet = false;
}
ConfigNodePropertyInteger OrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettyHeaderBufferSize() const
{
    return m_Org_apache_felix_http_jetty_headerBufferSize;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettyHeaderBufferSize(ConfigNodePropertyInteger const& value)
{
    m_Org_apache_felix_http_jetty_headerBufferSize = value;
    m_Org_apache_felix_http_jetty_headerBufferSizeIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpJettyHeaderBufferSizeIsSet() const
{
    return m_Org_apache_felix_http_jetty_headerBufferSizeIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_jetty_headerBufferSize()
{
    m_Org_apache_felix_http_jetty_headerBufferSizeIsSet = false;
}
ConfigNodePropertyInteger OrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettyRequestBufferSize() const
{
    return m_Org_apache_felix_http_jetty_requestBufferSize;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettyRequestBufferSize(ConfigNodePropertyInteger const& value)
{
    m_Org_apache_felix_http_jetty_requestBufferSize = value;
    m_Org_apache_felix_http_jetty_requestBufferSizeIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpJettyRequestBufferSizeIsSet() const
{
    return m_Org_apache_felix_http_jetty_requestBufferSizeIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_jetty_requestBufferSize()
{
    m_Org_apache_felix_http_jetty_requestBufferSizeIsSet = false;
}
ConfigNodePropertyInteger OrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettyResponseBufferSize() const
{
    return m_Org_apache_felix_http_jetty_responseBufferSize;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettyResponseBufferSize(ConfigNodePropertyInteger const& value)
{
    m_Org_apache_felix_http_jetty_responseBufferSize = value;
    m_Org_apache_felix_http_jetty_responseBufferSizeIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpJettyResponseBufferSizeIsSet() const
{
    return m_Org_apache_felix_http_jetty_responseBufferSizeIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_jetty_responseBufferSize()
{
    m_Org_apache_felix_http_jetty_responseBufferSizeIsSet = false;
}
ConfigNodePropertyInteger OrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettyMaxFormSize() const
{
    return m_Org_apache_felix_http_jetty_maxFormSize;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettyMaxFormSize(ConfigNodePropertyInteger const& value)
{
    m_Org_apache_felix_http_jetty_maxFormSize = value;
    m_Org_apache_felix_http_jetty_maxFormSizeIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpJettyMaxFormSizeIsSet() const
{
    return m_Org_apache_felix_http_jetty_maxFormSizeIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_jetty_maxFormSize()
{
    m_Org_apache_felix_http_jetty_maxFormSizeIsSet = false;
}
ConfigNodePropertyArray OrgApacheFelixHttpProperties::getOrgApacheFelixHttpPathExclusions() const
{
    return m_Org_apache_felix_http_path_exclusions;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpPathExclusions(ConfigNodePropertyArray const& value)
{
    m_Org_apache_felix_http_path_exclusions = value;
    m_Org_apache_felix_http_path_exclusionsIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpPathExclusionsIsSet() const
{
    return m_Org_apache_felix_http_path_exclusionsIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_path_exclusions()
{
    m_Org_apache_felix_http_path_exclusionsIsSet = false;
}
ConfigNodePropertyArray OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettyCiphersuitesExcluded() const
{
    return m_Org_apache_felix_https_jetty_ciphersuites_excluded;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettyCiphersuitesExcluded(ConfigNodePropertyArray const& value)
{
    m_Org_apache_felix_https_jetty_ciphersuites_excluded = value;
    m_Org_apache_felix_https_jetty_ciphersuites_excludedIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsJettyCiphersuitesExcludedIsSet() const
{
    return m_Org_apache_felix_https_jetty_ciphersuites_excludedIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_jetty_ciphersuites_excluded()
{
    m_Org_apache_felix_https_jetty_ciphersuites_excludedIsSet = false;
}
ConfigNodePropertyArray OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettyCiphersuitesIncluded() const
{
    return m_Org_apache_felix_https_jetty_ciphersuites_included;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettyCiphersuitesIncluded(ConfigNodePropertyArray const& value)
{
    m_Org_apache_felix_https_jetty_ciphersuites_included = value;
    m_Org_apache_felix_https_jetty_ciphersuites_includedIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsJettyCiphersuitesIncludedIsSet() const
{
    return m_Org_apache_felix_https_jetty_ciphersuites_includedIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_jetty_ciphersuites_included()
{
    m_Org_apache_felix_https_jetty_ciphersuites_includedIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettySendServerHeader() const
{
    return m_Org_apache_felix_http_jetty_sendServerHeader;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettySendServerHeader(ConfigNodePropertyBoolean const& value)
{
    m_Org_apache_felix_http_jetty_sendServerHeader = value;
    m_Org_apache_felix_http_jetty_sendServerHeaderIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpJettySendServerHeaderIsSet() const
{
    return m_Org_apache_felix_http_jetty_sendServerHeaderIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_jetty_sendServerHeader()
{
    m_Org_apache_felix_http_jetty_sendServerHeaderIsSet = false;
}
ConfigNodePropertyArray OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettyProtocolsIncluded() const
{
    return m_Org_apache_felix_https_jetty_protocols_included;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettyProtocolsIncluded(ConfigNodePropertyArray const& value)
{
    m_Org_apache_felix_https_jetty_protocols_included = value;
    m_Org_apache_felix_https_jetty_protocols_includedIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsJettyProtocolsIncludedIsSet() const
{
    return m_Org_apache_felix_https_jetty_protocols_includedIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_jetty_protocols_included()
{
    m_Org_apache_felix_https_jetty_protocols_includedIsSet = false;
}
ConfigNodePropertyArray OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettyProtocolsExcluded() const
{
    return m_Org_apache_felix_https_jetty_protocols_excluded;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettyProtocolsExcluded(ConfigNodePropertyArray const& value)
{
    m_Org_apache_felix_https_jetty_protocols_excluded = value;
    m_Org_apache_felix_https_jetty_protocols_excludedIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsJettyProtocolsExcludedIsSet() const
{
    return m_Org_apache_felix_https_jetty_protocols_excludedIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_jetty_protocols_excluded()
{
    m_Org_apache_felix_https_jetty_protocols_excludedIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheFelixHttpProperties::getOrgApacheFelixProxyLoadBalancerConnectionEnable() const
{
    return m_Org_apache_felix_proxy_load_balancer_connection_enable;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixProxyLoadBalancerConnectionEnable(ConfigNodePropertyBoolean const& value)
{
    m_Org_apache_felix_proxy_load_balancer_connection_enable = value;
    m_Org_apache_felix_proxy_load_balancer_connection_enableIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixProxyLoadBalancerConnectionEnableIsSet() const
{
    return m_Org_apache_felix_proxy_load_balancer_connection_enableIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_proxy_load_balancer_connection_enable()
{
    m_Org_apache_felix_proxy_load_balancer_connection_enableIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettyRenegotiateAllowed() const
{
    return m_Org_apache_felix_https_jetty_renegotiateAllowed;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettyRenegotiateAllowed(ConfigNodePropertyBoolean const& value)
{
    m_Org_apache_felix_https_jetty_renegotiateAllowed = value;
    m_Org_apache_felix_https_jetty_renegotiateAllowedIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsJettyRenegotiateAllowedIsSet() const
{
    return m_Org_apache_felix_https_jetty_renegotiateAllowedIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_jetty_renegotiateAllowed()
{
    m_Org_apache_felix_https_jetty_renegotiateAllowedIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettySessionCookieHttpOnly() const
{
    return m_Org_apache_felix_https_jetty_session_cookie_httpOnly;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettySessionCookieHttpOnly(ConfigNodePropertyBoolean const& value)
{
    m_Org_apache_felix_https_jetty_session_cookie_httpOnly = value;
    m_Org_apache_felix_https_jetty_session_cookie_httpOnlyIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsJettySessionCookieHttpOnlyIsSet() const
{
    return m_Org_apache_felix_https_jetty_session_cookie_httpOnlyIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_jetty_session_cookie_httpOnly()
{
    m_Org_apache_felix_https_jetty_session_cookie_httpOnlyIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettySessionCookieSecure() const
{
    return m_Org_apache_felix_https_jetty_session_cookie_secure;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettySessionCookieSecure(ConfigNodePropertyBoolean const& value)
{
    m_Org_apache_felix_https_jetty_session_cookie_secure = value;
    m_Org_apache_felix_https_jetty_session_cookie_secureIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpsJettySessionCookieSecureIsSet() const
{
    return m_Org_apache_felix_https_jetty_session_cookie_secureIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_https_jetty_session_cookie_secure()
{
    m_Org_apache_felix_https_jetty_session_cookie_secureIsSet = false;
}
ConfigNodePropertyString OrgApacheFelixHttpProperties::getOrgEclipseJettyServletSessionIdPathParameterName() const
{
    return m_Org_eclipse_jetty_servlet_SessionIdPathParameterName;
}
void OrgApacheFelixHttpProperties::setOrgEclipseJettyServletSessionIdPathParameterName(ConfigNodePropertyString const& value)
{
    m_Org_eclipse_jetty_servlet_SessionIdPathParameterName = value;
    m_Org_eclipse_jetty_servlet_SessionIdPathParameterNameIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgEclipseJettyServletSessionIdPathParameterNameIsSet() const
{
    return m_Org_eclipse_jetty_servlet_SessionIdPathParameterNameIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_eclipse_jetty_servlet_SessionIdPathParameterName()
{
    m_Org_eclipse_jetty_servlet_SessionIdPathParameterNameIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheFelixHttpProperties::getOrgEclipseJettyServletCheckingRemoteSessionIdEncoding() const
{
    return m_Org_eclipse_jetty_servlet_CheckingRemoteSessionIdEncoding;
}
void OrgApacheFelixHttpProperties::setOrgEclipseJettyServletCheckingRemoteSessionIdEncoding(ConfigNodePropertyBoolean const& value)
{
    m_Org_eclipse_jetty_servlet_CheckingRemoteSessionIdEncoding = value;
    m_Org_eclipse_jetty_servlet_CheckingRemoteSessionIdEncodingIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgEclipseJettyServletCheckingRemoteSessionIdEncodingIsSet() const
{
    return m_Org_eclipse_jetty_servlet_CheckingRemoteSessionIdEncodingIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_eclipse_jetty_servlet_CheckingRemoteSessionIdEncoding()
{
    m_Org_eclipse_jetty_servlet_CheckingRemoteSessionIdEncodingIsSet = false;
}
ConfigNodePropertyString OrgApacheFelixHttpProperties::getOrgEclipseJettyServletSessionCookie() const
{
    return m_Org_eclipse_jetty_servlet_SessionCookie;
}
void OrgApacheFelixHttpProperties::setOrgEclipseJettyServletSessionCookie(ConfigNodePropertyString const& value)
{
    m_Org_eclipse_jetty_servlet_SessionCookie = value;
    m_Org_eclipse_jetty_servlet_SessionCookieIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgEclipseJettyServletSessionCookieIsSet() const
{
    return m_Org_eclipse_jetty_servlet_SessionCookieIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_eclipse_jetty_servlet_SessionCookie()
{
    m_Org_eclipse_jetty_servlet_SessionCookieIsSet = false;
}
ConfigNodePropertyString OrgApacheFelixHttpProperties::getOrgEclipseJettyServletSessionDomain() const
{
    return m_Org_eclipse_jetty_servlet_SessionDomain;
}
void OrgApacheFelixHttpProperties::setOrgEclipseJettyServletSessionDomain(ConfigNodePropertyString const& value)
{
    m_Org_eclipse_jetty_servlet_SessionDomain = value;
    m_Org_eclipse_jetty_servlet_SessionDomainIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgEclipseJettyServletSessionDomainIsSet() const
{
    return m_Org_eclipse_jetty_servlet_SessionDomainIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_eclipse_jetty_servlet_SessionDomain()
{
    m_Org_eclipse_jetty_servlet_SessionDomainIsSet = false;
}
ConfigNodePropertyString OrgApacheFelixHttpProperties::getOrgEclipseJettyServletSessionPath() const
{
    return m_Org_eclipse_jetty_servlet_SessionPath;
}
void OrgApacheFelixHttpProperties::setOrgEclipseJettyServletSessionPath(ConfigNodePropertyString const& value)
{
    m_Org_eclipse_jetty_servlet_SessionPath = value;
    m_Org_eclipse_jetty_servlet_SessionPathIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgEclipseJettyServletSessionPathIsSet() const
{
    return m_Org_eclipse_jetty_servlet_SessionPathIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_eclipse_jetty_servlet_SessionPath()
{
    m_Org_eclipse_jetty_servlet_SessionPathIsSet = false;
}
ConfigNodePropertyInteger OrgApacheFelixHttpProperties::getOrgEclipseJettyServletMaxAge() const
{
    return m_Org_eclipse_jetty_servlet_MaxAge;
}
void OrgApacheFelixHttpProperties::setOrgEclipseJettyServletMaxAge(ConfigNodePropertyInteger const& value)
{
    m_Org_eclipse_jetty_servlet_MaxAge = value;
    m_Org_eclipse_jetty_servlet_MaxAgeIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgEclipseJettyServletMaxAgeIsSet() const
{
    return m_Org_eclipse_jetty_servlet_MaxAgeIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_eclipse_jetty_servlet_MaxAge()
{
    m_Org_eclipse_jetty_servlet_MaxAgeIsSet = false;
}
ConfigNodePropertyString OrgApacheFelixHttpProperties::getOrgApacheFelixHttpName() const
{
    return m_Org_apache_felix_http_name;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpName(ConfigNodePropertyString const& value)
{
    m_Org_apache_felix_http_name = value;
    m_Org_apache_felix_http_nameIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpNameIsSet() const
{
    return m_Org_apache_felix_http_nameIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_name()
{
    m_Org_apache_felix_http_nameIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGziphandlerEnable() const
{
    return m_Org_apache_felix_jetty_gziphandler_enable;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGziphandlerEnable(ConfigNodePropertyBoolean const& value)
{
    m_Org_apache_felix_jetty_gziphandler_enable = value;
    m_Org_apache_felix_jetty_gziphandler_enableIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGziphandlerEnableIsSet() const
{
    return m_Org_apache_felix_jetty_gziphandler_enableIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gziphandler_enable()
{
    m_Org_apache_felix_jetty_gziphandler_enableIsSet = false;
}
ConfigNodePropertyInteger OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipMinGzipSize() const
{
    return m_Org_apache_felix_jetty_gzip_minGzipSize;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipMinGzipSize(ConfigNodePropertyInteger const& value)
{
    m_Org_apache_felix_jetty_gzip_minGzipSize = value;
    m_Org_apache_felix_jetty_gzip_minGzipSizeIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipMinGzipSizeIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_minGzipSizeIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_minGzipSize()
{
    m_Org_apache_felix_jetty_gzip_minGzipSizeIsSet = false;
}
ConfigNodePropertyInteger OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipCompressionLevel() const
{
    return m_Org_apache_felix_jetty_gzip_compressionLevel;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipCompressionLevel(ConfigNodePropertyInteger const& value)
{
    m_Org_apache_felix_jetty_gzip_compressionLevel = value;
    m_Org_apache_felix_jetty_gzip_compressionLevelIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipCompressionLevelIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_compressionLevelIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_compressionLevel()
{
    m_Org_apache_felix_jetty_gzip_compressionLevelIsSet = false;
}
ConfigNodePropertyInteger OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipInflateBufferSize() const
{
    return m_Org_apache_felix_jetty_gzip_inflateBufferSize;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipInflateBufferSize(ConfigNodePropertyInteger const& value)
{
    m_Org_apache_felix_jetty_gzip_inflateBufferSize = value;
    m_Org_apache_felix_jetty_gzip_inflateBufferSizeIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipInflateBufferSizeIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_inflateBufferSizeIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_inflateBufferSize()
{
    m_Org_apache_felix_jetty_gzip_inflateBufferSizeIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipSyncFlush() const
{
    return m_Org_apache_felix_jetty_gzip_syncFlush;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipSyncFlush(ConfigNodePropertyBoolean const& value)
{
    m_Org_apache_felix_jetty_gzip_syncFlush = value;
    m_Org_apache_felix_jetty_gzip_syncFlushIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipSyncFlushIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_syncFlushIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_syncFlush()
{
    m_Org_apache_felix_jetty_gzip_syncFlushIsSet = false;
}
ConfigNodePropertyArray OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipExcludedUserAgents() const
{
    return m_Org_apache_felix_jetty_gzip_excludedUserAgents;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipExcludedUserAgents(ConfigNodePropertyArray const& value)
{
    m_Org_apache_felix_jetty_gzip_excludedUserAgents = value;
    m_Org_apache_felix_jetty_gzip_excludedUserAgentsIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipExcludedUserAgentsIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_excludedUserAgentsIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_excludedUserAgents()
{
    m_Org_apache_felix_jetty_gzip_excludedUserAgentsIsSet = false;
}
ConfigNodePropertyArray OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipIncludedMethods() const
{
    return m_Org_apache_felix_jetty_gzip_includedMethods;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipIncludedMethods(ConfigNodePropertyArray const& value)
{
    m_Org_apache_felix_jetty_gzip_includedMethods = value;
    m_Org_apache_felix_jetty_gzip_includedMethodsIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipIncludedMethodsIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_includedMethodsIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_includedMethods()
{
    m_Org_apache_felix_jetty_gzip_includedMethodsIsSet = false;
}
ConfigNodePropertyArray OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipExcludedMethods() const
{
    return m_Org_apache_felix_jetty_gzip_excludedMethods;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipExcludedMethods(ConfigNodePropertyArray const& value)
{
    m_Org_apache_felix_jetty_gzip_excludedMethods = value;
    m_Org_apache_felix_jetty_gzip_excludedMethodsIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipExcludedMethodsIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_excludedMethodsIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_excludedMethods()
{
    m_Org_apache_felix_jetty_gzip_excludedMethodsIsSet = false;
}
ConfigNodePropertyArray OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipIncludedPaths() const
{
    return m_Org_apache_felix_jetty_gzip_includedPaths;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipIncludedPaths(ConfigNodePropertyArray const& value)
{
    m_Org_apache_felix_jetty_gzip_includedPaths = value;
    m_Org_apache_felix_jetty_gzip_includedPathsIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipIncludedPathsIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_includedPathsIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_includedPaths()
{
    m_Org_apache_felix_jetty_gzip_includedPathsIsSet = false;
}
ConfigNodePropertyArray OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipExcludedPaths() const
{
    return m_Org_apache_felix_jetty_gzip_excludedPaths;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipExcludedPaths(ConfigNodePropertyArray const& value)
{
    m_Org_apache_felix_jetty_gzip_excludedPaths = value;
    m_Org_apache_felix_jetty_gzip_excludedPathsIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipExcludedPathsIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_excludedPathsIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_excludedPaths()
{
    m_Org_apache_felix_jetty_gzip_excludedPathsIsSet = false;
}
ConfigNodePropertyArray OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipIncludedMimeTypes() const
{
    return m_Org_apache_felix_jetty_gzip_includedMimeTypes;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipIncludedMimeTypes(ConfigNodePropertyArray const& value)
{
    m_Org_apache_felix_jetty_gzip_includedMimeTypes = value;
    m_Org_apache_felix_jetty_gzip_includedMimeTypesIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipIncludedMimeTypesIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_includedMimeTypesIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_includedMimeTypes()
{
    m_Org_apache_felix_jetty_gzip_includedMimeTypesIsSet = false;
}
ConfigNodePropertyArray OrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipExcludedMimeTypes() const
{
    return m_Org_apache_felix_jetty_gzip_excludedMimeTypes;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipExcludedMimeTypes(ConfigNodePropertyArray const& value)
{
    m_Org_apache_felix_jetty_gzip_excludedMimeTypes = value;
    m_Org_apache_felix_jetty_gzip_excludedMimeTypesIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixJettyGzipExcludedMimeTypesIsSet() const
{
    return m_Org_apache_felix_jetty_gzip_excludedMimeTypesIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_jetty_gzip_excludedMimeTypes()
{
    m_Org_apache_felix_jetty_gzip_excludedMimeTypesIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheFelixHttpProperties::getOrgApacheFelixHttpSessionInvalidate() const
{
    return m_Org_apache_felix_http_session_invalidate;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpSessionInvalidate(ConfigNodePropertyBoolean const& value)
{
    m_Org_apache_felix_http_session_invalidate = value;
    m_Org_apache_felix_http_session_invalidateIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpSessionInvalidateIsSet() const
{
    return m_Org_apache_felix_http_session_invalidateIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_session_invalidate()
{
    m_Org_apache_felix_http_session_invalidateIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheFelixHttpProperties::getOrgApacheFelixHttpSessionUniqueid() const
{
    return m_Org_apache_felix_http_session_uniqueid;
}
void OrgApacheFelixHttpProperties::setOrgApacheFelixHttpSessionUniqueid(ConfigNodePropertyBoolean const& value)
{
    m_Org_apache_felix_http_session_uniqueid = value;
    m_Org_apache_felix_http_session_uniqueidIsSet = true;
}
bool OrgApacheFelixHttpProperties::orgApacheFelixHttpSessionUniqueidIsSet() const
{
    return m_Org_apache_felix_http_session_uniqueidIsSet;
}
void OrgApacheFelixHttpProperties::unsetOrg_apache_felix_http_session_uniqueid()
{
    m_Org_apache_felix_http_session_uniqueidIsSet = false;
}

}
}
}
}

