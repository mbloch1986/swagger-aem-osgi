/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties()
{
    m_Oauth_configmanager_ims_configidIsSet = false;
    m_Ims_owningEntityIsSet = false;
    m_Aem_instanceIdIsSet = false;
    m_Ims_serviceCodeIsSet = false;
    
}

ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::~ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties()
{
}

void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Oauth_configmanager_ims_configidIsSet)
    {
        val["oauth.configmanager.ims.configid"] = ModelBase::toJson(m_Oauth_configmanager_ims_configid);
    }
    if(m_Ims_owningEntityIsSet)
    {
        val["ims.owningEntity"] = ModelBase::toJson(m_Ims_owningEntity);
    }
    if(m_Aem_instanceIdIsSet)
    {
        val["aem.instanceId"] = ModelBase::toJson(m_Aem_instanceId);
    }
    if(m_Ims_serviceCodeIsSet)
    {
        val["ims.serviceCode"] = ModelBase::toJson(m_Ims_serviceCode);
    }
    

    return val;
}

void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("oauth.configmanager.ims.configid") != val.end())
    {
        if(!val["oauth.configmanager.ims.configid"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["oauth.configmanager.ims.configid"]);
            setOauthConfigmanagerImsConfigid( newItem );
        }
        
    }
    if(val.find("ims.owningEntity") != val.end())
    {
        if(!val["ims.owningEntity"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["ims.owningEntity"]);
            setImsOwningEntity( newItem );
        }
        
    }
    if(val.find("aem.instanceId") != val.end())
    {
        if(!val["aem.instanceId"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["aem.instanceId"]);
            setAemInstanceId( newItem );
        }
        
    }
    if(val.find("ims.serviceCode") != val.end())
    {
        if(!val["ims.serviceCode"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["ims.serviceCode"]);
            setImsServiceCode( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::getOauthConfigmanagerImsConfigid() const
{
    return m_Oauth_configmanager_ims_configid;
}
void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::setOauthConfigmanagerImsConfigid(ConfigNodePropertyString const& value)
{
    m_Oauth_configmanager_ims_configid = value;
    m_Oauth_configmanager_ims_configidIsSet = true;
}
bool ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::oauthConfigmanagerImsConfigidIsSet() const
{
    return m_Oauth_configmanager_ims_configidIsSet;
}
void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::unsetOauth_configmanager_ims_configid()
{
    m_Oauth_configmanager_ims_configidIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::getImsOwningEntity() const
{
    return m_Ims_owningEntity;
}
void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::setImsOwningEntity(ConfigNodePropertyString const& value)
{
    m_Ims_owningEntity = value;
    m_Ims_owningEntityIsSet = true;
}
bool ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::imsOwningEntityIsSet() const
{
    return m_Ims_owningEntityIsSet;
}
void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::unsetIms_owningEntity()
{
    m_Ims_owningEntityIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::getAemInstanceId() const
{
    return m_Aem_instanceId;
}
void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::setAemInstanceId(ConfigNodePropertyString const& value)
{
    m_Aem_instanceId = value;
    m_Aem_instanceIdIsSet = true;
}
bool ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::aemInstanceIdIsSet() const
{
    return m_Aem_instanceIdIsSet;
}
void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::unsetAem_instanceId()
{
    m_Aem_instanceIdIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::getImsServiceCode() const
{
    return m_Ims_serviceCode;
}
void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::setImsServiceCode(ConfigNodePropertyString const& value)
{
    m_Ims_serviceCode = value;
    m_Ims_serviceCodeIsSet = true;
}
bool ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::imsServiceCodeIsSet() const
{
    return m_Ims_serviceCodeIsSet;
}
void ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::unsetIms_serviceCode()
{
    m_Ims_serviceCodeIsSet = false;
}

}
}
}
}

