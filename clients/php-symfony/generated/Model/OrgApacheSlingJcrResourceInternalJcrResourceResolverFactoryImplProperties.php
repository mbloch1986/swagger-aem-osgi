<?php
/**
 * OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties 
{
        /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyArray|null
     * @SerializedName("resource.resolver.searchpath")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     */
    protected $resourceResolverSearchpath;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("resource.resolver.manglenamespaces")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $resourceResolverManglenamespaces;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("resource.resolver.allowDirect")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $resourceResolverAllowDirect;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyArray|null
     * @SerializedName("resource.resolver.required.providers")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     */
    protected $resourceResolverRequiredProviders;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyArray|null
     * @SerializedName("resource.resolver.required.providernames")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     */
    protected $resourceResolverRequiredProvidernames;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyArray|null
     * @SerializedName("resource.resolver.virtual")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     */
    protected $resourceResolverVirtual;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyArray|null
     * @SerializedName("resource.resolver.mapping")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     */
    protected $resourceResolverMapping;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyString|null
     * @SerializedName("resource.resolver.map.location")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     */
    protected $resourceResolverMapLocation;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyArray|null
     * @SerializedName("resource.resolver.map.observation")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     */
    protected $resourceResolverMapObservation;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("resource.resolver.default.vanity.redirect.status")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $resourceResolverDefaultVanityRedirectStatus;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("resource.resolver.enable.vanitypath")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $resourceResolverEnableVanitypath;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("resource.resolver.vanitypath.maxEntries")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $resourceResolverVanitypathMaxEntries;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("resource.resolver.vanitypath.maxEntries.startup")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $resourceResolverVanitypathMaxEntriesStartup;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     * @SerializedName("resource.resolver.vanitypath.bloomfilter.maxBytes")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyInteger")
     */
    protected $resourceResolverVanitypathBloomfilterMaxBytes;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("resource.resolver.optimize.alias.resolution")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $resourceResolverOptimizeAliasResolution;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyArray|null
     * @SerializedName("resource.resolver.vanitypath.whitelist")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     */
    protected $resourceResolverVanitypathWhitelist;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyArray|null
     * @SerializedName("resource.resolver.vanitypath.blacklist")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyArray")
     */
    protected $resourceResolverVanitypathBlacklist;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("resource.resolver.vanity.precedence")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $resourceResolverVanityPrecedence;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("resource.resolver.providerhandling.paranoid")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $resourceResolverProviderhandlingParanoid;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("resource.resolver.log.closing")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $resourceResolverLogClosing;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("resource.resolver.log.unclosed")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $resourceResolverLogUnclosed;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->resourceResolverSearchpath = isset($data['resourceResolverSearchpath']) ? $data['resourceResolverSearchpath'] : null;
        $this->resourceResolverManglenamespaces = isset($data['resourceResolverManglenamespaces']) ? $data['resourceResolverManglenamespaces'] : null;
        $this->resourceResolverAllowDirect = isset($data['resourceResolverAllowDirect']) ? $data['resourceResolverAllowDirect'] : null;
        $this->resourceResolverRequiredProviders = isset($data['resourceResolverRequiredProviders']) ? $data['resourceResolverRequiredProviders'] : null;
        $this->resourceResolverRequiredProvidernames = isset($data['resourceResolverRequiredProvidernames']) ? $data['resourceResolverRequiredProvidernames'] : null;
        $this->resourceResolverVirtual = isset($data['resourceResolverVirtual']) ? $data['resourceResolverVirtual'] : null;
        $this->resourceResolverMapping = isset($data['resourceResolverMapping']) ? $data['resourceResolverMapping'] : null;
        $this->resourceResolverMapLocation = isset($data['resourceResolverMapLocation']) ? $data['resourceResolverMapLocation'] : null;
        $this->resourceResolverMapObservation = isset($data['resourceResolverMapObservation']) ? $data['resourceResolverMapObservation'] : null;
        $this->resourceResolverDefaultVanityRedirectStatus = isset($data['resourceResolverDefaultVanityRedirectStatus']) ? $data['resourceResolverDefaultVanityRedirectStatus'] : null;
        $this->resourceResolverEnableVanitypath = isset($data['resourceResolverEnableVanitypath']) ? $data['resourceResolverEnableVanitypath'] : null;
        $this->resourceResolverVanitypathMaxEntries = isset($data['resourceResolverVanitypathMaxEntries']) ? $data['resourceResolverVanitypathMaxEntries'] : null;
        $this->resourceResolverVanitypathMaxEntriesStartup = isset($data['resourceResolverVanitypathMaxEntriesStartup']) ? $data['resourceResolverVanitypathMaxEntriesStartup'] : null;
        $this->resourceResolverVanitypathBloomfilterMaxBytes = isset($data['resourceResolverVanitypathBloomfilterMaxBytes']) ? $data['resourceResolverVanitypathBloomfilterMaxBytes'] : null;
        $this->resourceResolverOptimizeAliasResolution = isset($data['resourceResolverOptimizeAliasResolution']) ? $data['resourceResolverOptimizeAliasResolution'] : null;
        $this->resourceResolverVanitypathWhitelist = isset($data['resourceResolverVanitypathWhitelist']) ? $data['resourceResolverVanitypathWhitelist'] : null;
        $this->resourceResolverVanitypathBlacklist = isset($data['resourceResolverVanitypathBlacklist']) ? $data['resourceResolverVanitypathBlacklist'] : null;
        $this->resourceResolverVanityPrecedence = isset($data['resourceResolverVanityPrecedence']) ? $data['resourceResolverVanityPrecedence'] : null;
        $this->resourceResolverProviderhandlingParanoid = isset($data['resourceResolverProviderhandlingParanoid']) ? $data['resourceResolverProviderhandlingParanoid'] : null;
        $this->resourceResolverLogClosing = isset($data['resourceResolverLogClosing']) ? $data['resourceResolverLogClosing'] : null;
        $this->resourceResolverLogUnclosed = isset($data['resourceResolverLogUnclosed']) ? $data['resourceResolverLogUnclosed'] : null;
    }

    /**
     * Gets resourceResolverSearchpath.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyArray|null
     */
    public function getResourceResolverSearchpath()
    {
        return $this->resourceResolverSearchpath;
    }

    /**
     * Sets resourceResolverSearchpath.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyArray|null $resourceResolverSearchpath
     *
     * @return $this
     */
    public function setResourceResolverSearchpath(ConfigNodePropertyArray $resourceResolverSearchpath = null)
    {
        $this->resourceResolverSearchpath = $resourceResolverSearchpath;

        return $this;
    }

    /**
     * Gets resourceResolverManglenamespaces.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getResourceResolverManglenamespaces()
    {
        return $this->resourceResolverManglenamespaces;
    }

    /**
     * Sets resourceResolverManglenamespaces.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $resourceResolverManglenamespaces
     *
     * @return $this
     */
    public function setResourceResolverManglenamespaces(ConfigNodePropertyBoolean $resourceResolverManglenamespaces = null)
    {
        $this->resourceResolverManglenamespaces = $resourceResolverManglenamespaces;

        return $this;
    }

    /**
     * Gets resourceResolverAllowDirect.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getResourceResolverAllowDirect()
    {
        return $this->resourceResolverAllowDirect;
    }

    /**
     * Sets resourceResolverAllowDirect.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $resourceResolverAllowDirect
     *
     * @return $this
     */
    public function setResourceResolverAllowDirect(ConfigNodePropertyBoolean $resourceResolverAllowDirect = null)
    {
        $this->resourceResolverAllowDirect = $resourceResolverAllowDirect;

        return $this;
    }

    /**
     * Gets resourceResolverRequiredProviders.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyArray|null
     */
    public function getResourceResolverRequiredProviders()
    {
        return $this->resourceResolverRequiredProviders;
    }

    /**
     * Sets resourceResolverRequiredProviders.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyArray|null $resourceResolverRequiredProviders
     *
     * @return $this
     */
    public function setResourceResolverRequiredProviders(ConfigNodePropertyArray $resourceResolverRequiredProviders = null)
    {
        $this->resourceResolverRequiredProviders = $resourceResolverRequiredProviders;

        return $this;
    }

    /**
     * Gets resourceResolverRequiredProvidernames.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyArray|null
     */
    public function getResourceResolverRequiredProvidernames()
    {
        return $this->resourceResolverRequiredProvidernames;
    }

    /**
     * Sets resourceResolverRequiredProvidernames.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyArray|null $resourceResolverRequiredProvidernames
     *
     * @return $this
     */
    public function setResourceResolverRequiredProvidernames(ConfigNodePropertyArray $resourceResolverRequiredProvidernames = null)
    {
        $this->resourceResolverRequiredProvidernames = $resourceResolverRequiredProvidernames;

        return $this;
    }

    /**
     * Gets resourceResolverVirtual.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyArray|null
     */
    public function getResourceResolverVirtual()
    {
        return $this->resourceResolverVirtual;
    }

    /**
     * Sets resourceResolverVirtual.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyArray|null $resourceResolverVirtual
     *
     * @return $this
     */
    public function setResourceResolverVirtual(ConfigNodePropertyArray $resourceResolverVirtual = null)
    {
        $this->resourceResolverVirtual = $resourceResolverVirtual;

        return $this;
    }

    /**
     * Gets resourceResolverMapping.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyArray|null
     */
    public function getResourceResolverMapping()
    {
        return $this->resourceResolverMapping;
    }

    /**
     * Sets resourceResolverMapping.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyArray|null $resourceResolverMapping
     *
     * @return $this
     */
    public function setResourceResolverMapping(ConfigNodePropertyArray $resourceResolverMapping = null)
    {
        $this->resourceResolverMapping = $resourceResolverMapping;

        return $this;
    }

    /**
     * Gets resourceResolverMapLocation.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyString|null
     */
    public function getResourceResolverMapLocation()
    {
        return $this->resourceResolverMapLocation;
    }

    /**
     * Sets resourceResolverMapLocation.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyString|null $resourceResolverMapLocation
     *
     * @return $this
     */
    public function setResourceResolverMapLocation(ConfigNodePropertyString $resourceResolverMapLocation = null)
    {
        $this->resourceResolverMapLocation = $resourceResolverMapLocation;

        return $this;
    }

    /**
     * Gets resourceResolverMapObservation.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyArray|null
     */
    public function getResourceResolverMapObservation()
    {
        return $this->resourceResolverMapObservation;
    }

    /**
     * Sets resourceResolverMapObservation.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyArray|null $resourceResolverMapObservation
     *
     * @return $this
     */
    public function setResourceResolverMapObservation(ConfigNodePropertyArray $resourceResolverMapObservation = null)
    {
        $this->resourceResolverMapObservation = $resourceResolverMapObservation;

        return $this;
    }

    /**
     * Gets resourceResolverDefaultVanityRedirectStatus.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getResourceResolverDefaultVanityRedirectStatus()
    {
        return $this->resourceResolverDefaultVanityRedirectStatus;
    }

    /**
     * Sets resourceResolverDefaultVanityRedirectStatus.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $resourceResolverDefaultVanityRedirectStatus
     *
     * @return $this
     */
    public function setResourceResolverDefaultVanityRedirectStatus(ConfigNodePropertyInteger $resourceResolverDefaultVanityRedirectStatus = null)
    {
        $this->resourceResolverDefaultVanityRedirectStatus = $resourceResolverDefaultVanityRedirectStatus;

        return $this;
    }

    /**
     * Gets resourceResolverEnableVanitypath.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getResourceResolverEnableVanitypath()
    {
        return $this->resourceResolverEnableVanitypath;
    }

    /**
     * Sets resourceResolverEnableVanitypath.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $resourceResolverEnableVanitypath
     *
     * @return $this
     */
    public function setResourceResolverEnableVanitypath(ConfigNodePropertyBoolean $resourceResolverEnableVanitypath = null)
    {
        $this->resourceResolverEnableVanitypath = $resourceResolverEnableVanitypath;

        return $this;
    }

    /**
     * Gets resourceResolverVanitypathMaxEntries.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getResourceResolverVanitypathMaxEntries()
    {
        return $this->resourceResolverVanitypathMaxEntries;
    }

    /**
     * Sets resourceResolverVanitypathMaxEntries.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $resourceResolverVanitypathMaxEntries
     *
     * @return $this
     */
    public function setResourceResolverVanitypathMaxEntries(ConfigNodePropertyInteger $resourceResolverVanitypathMaxEntries = null)
    {
        $this->resourceResolverVanitypathMaxEntries = $resourceResolverVanitypathMaxEntries;

        return $this;
    }

    /**
     * Gets resourceResolverVanitypathMaxEntriesStartup.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getResourceResolverVanitypathMaxEntriesStartup()
    {
        return $this->resourceResolverVanitypathMaxEntriesStartup;
    }

    /**
     * Sets resourceResolverVanitypathMaxEntriesStartup.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $resourceResolverVanitypathMaxEntriesStartup
     *
     * @return $this
     */
    public function setResourceResolverVanitypathMaxEntriesStartup(ConfigNodePropertyBoolean $resourceResolverVanitypathMaxEntriesStartup = null)
    {
        $this->resourceResolverVanitypathMaxEntriesStartup = $resourceResolverVanitypathMaxEntriesStartup;

        return $this;
    }

    /**
     * Gets resourceResolverVanitypathBloomfilterMaxBytes.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyInteger|null
     */
    public function getResourceResolverVanitypathBloomfilterMaxBytes()
    {
        return $this->resourceResolverVanitypathBloomfilterMaxBytes;
    }

    /**
     * Sets resourceResolverVanitypathBloomfilterMaxBytes.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyInteger|null $resourceResolverVanitypathBloomfilterMaxBytes
     *
     * @return $this
     */
    public function setResourceResolverVanitypathBloomfilterMaxBytes(ConfigNodePropertyInteger $resourceResolverVanitypathBloomfilterMaxBytes = null)
    {
        $this->resourceResolverVanitypathBloomfilterMaxBytes = $resourceResolverVanitypathBloomfilterMaxBytes;

        return $this;
    }

    /**
     * Gets resourceResolverOptimizeAliasResolution.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getResourceResolverOptimizeAliasResolution()
    {
        return $this->resourceResolverOptimizeAliasResolution;
    }

    /**
     * Sets resourceResolverOptimizeAliasResolution.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $resourceResolverOptimizeAliasResolution
     *
     * @return $this
     */
    public function setResourceResolverOptimizeAliasResolution(ConfigNodePropertyBoolean $resourceResolverOptimizeAliasResolution = null)
    {
        $this->resourceResolverOptimizeAliasResolution = $resourceResolverOptimizeAliasResolution;

        return $this;
    }

    /**
     * Gets resourceResolverVanitypathWhitelist.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyArray|null
     */
    public function getResourceResolverVanitypathWhitelist()
    {
        return $this->resourceResolverVanitypathWhitelist;
    }

    /**
     * Sets resourceResolverVanitypathWhitelist.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyArray|null $resourceResolverVanitypathWhitelist
     *
     * @return $this
     */
    public function setResourceResolverVanitypathWhitelist(ConfigNodePropertyArray $resourceResolverVanitypathWhitelist = null)
    {
        $this->resourceResolverVanitypathWhitelist = $resourceResolverVanitypathWhitelist;

        return $this;
    }

    /**
     * Gets resourceResolverVanitypathBlacklist.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyArray|null
     */
    public function getResourceResolverVanitypathBlacklist()
    {
        return $this->resourceResolverVanitypathBlacklist;
    }

    /**
     * Sets resourceResolverVanitypathBlacklist.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyArray|null $resourceResolverVanitypathBlacklist
     *
     * @return $this
     */
    public function setResourceResolverVanitypathBlacklist(ConfigNodePropertyArray $resourceResolverVanitypathBlacklist = null)
    {
        $this->resourceResolverVanitypathBlacklist = $resourceResolverVanitypathBlacklist;

        return $this;
    }

    /**
     * Gets resourceResolverVanityPrecedence.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getResourceResolverVanityPrecedence()
    {
        return $this->resourceResolverVanityPrecedence;
    }

    /**
     * Sets resourceResolverVanityPrecedence.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $resourceResolverVanityPrecedence
     *
     * @return $this
     */
    public function setResourceResolverVanityPrecedence(ConfigNodePropertyBoolean $resourceResolverVanityPrecedence = null)
    {
        $this->resourceResolverVanityPrecedence = $resourceResolverVanityPrecedence;

        return $this;
    }

    /**
     * Gets resourceResolverProviderhandlingParanoid.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getResourceResolverProviderhandlingParanoid()
    {
        return $this->resourceResolverProviderhandlingParanoid;
    }

    /**
     * Sets resourceResolverProviderhandlingParanoid.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $resourceResolverProviderhandlingParanoid
     *
     * @return $this
     */
    public function setResourceResolverProviderhandlingParanoid(ConfigNodePropertyBoolean $resourceResolverProviderhandlingParanoid = null)
    {
        $this->resourceResolverProviderhandlingParanoid = $resourceResolverProviderhandlingParanoid;

        return $this;
    }

    /**
     * Gets resourceResolverLogClosing.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getResourceResolverLogClosing()
    {
        return $this->resourceResolverLogClosing;
    }

    /**
     * Sets resourceResolverLogClosing.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $resourceResolverLogClosing
     *
     * @return $this
     */
    public function setResourceResolverLogClosing(ConfigNodePropertyBoolean $resourceResolverLogClosing = null)
    {
        $this->resourceResolverLogClosing = $resourceResolverLogClosing;

        return $this;
    }

    /**
     * Gets resourceResolverLogUnclosed.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getResourceResolverLogUnclosed()
    {
        return $this->resourceResolverLogUnclosed;
    }

    /**
     * Sets resourceResolverLogUnclosed.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $resourceResolverLogUnclosed
     *
     * @return $this
     */
    public function setResourceResolverLogUnclosed(ConfigNodePropertyBoolean $resourceResolverLogUnclosed = null)
    {
        $this->resourceResolverLogUnclosed = $resourceResolverLogUnclosed;

        return $this;
    }
}


