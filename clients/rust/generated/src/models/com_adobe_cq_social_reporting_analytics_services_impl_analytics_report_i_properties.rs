/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties {
  #[serde(rename = "cq.social.reporting.analytics.polling.importer.interval")]
  cq_social_reporting_analytics_polling_importer_interval: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cq.social.reporting.analytics.polling.importer.pageSize")]
  cq_social_reporting_analytics_polling_importer_page_size: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties {
  pub fn new() -> ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties {
    ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties {
      cq_social_reporting_analytics_polling_importer_interval: None,
      cq_social_reporting_analytics_polling_importer_page_size: None
    }
  }

  pub fn set_cq_social_reporting_analytics_polling_importer_interval(&mut self, cq_social_reporting_analytics_polling_importer_interval: ::models::ConfigNodePropertyInteger) {
    self.cq_social_reporting_analytics_polling_importer_interval = Some(cq_social_reporting_analytics_polling_importer_interval);
  }

  pub fn with_cq_social_reporting_analytics_polling_importer_interval(mut self, cq_social_reporting_analytics_polling_importer_interval: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties {
    self.cq_social_reporting_analytics_polling_importer_interval = Some(cq_social_reporting_analytics_polling_importer_interval);
    self
  }

  pub fn cq_social_reporting_analytics_polling_importer_interval(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cq_social_reporting_analytics_polling_importer_interval.as_ref()
  }

  pub fn reset_cq_social_reporting_analytics_polling_importer_interval(&mut self) {
    self.cq_social_reporting_analytics_polling_importer_interval = None;
  }

  pub fn set_cq_social_reporting_analytics_polling_importer_page_size(&mut self, cq_social_reporting_analytics_polling_importer_page_size: ::models::ConfigNodePropertyInteger) {
    self.cq_social_reporting_analytics_polling_importer_page_size = Some(cq_social_reporting_analytics_polling_importer_page_size);
  }

  pub fn with_cq_social_reporting_analytics_polling_importer_page_size(mut self, cq_social_reporting_analytics_polling_importer_page_size: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties {
    self.cq_social_reporting_analytics_polling_importer_page_size = Some(cq_social_reporting_analytics_polling_importer_page_size);
    self
  }

  pub fn cq_social_reporting_analytics_polling_importer_page_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cq_social_reporting_analytics_polling_importer_page_size.as_ref()
  }

  pub fn reset_cq_social_reporting_analytics_polling_importer_page_size(&mut self) {
    self.cq_social_reporting_analytics_polling_importer_page_size = None;
  }

}



