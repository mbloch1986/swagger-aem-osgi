/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties()
{
    m_DescriptionIsSet = false;
    m_OverridesIsSet = false;
    m_EnabledIsSet = false;
    m_Service_rankingIsSet = false;
}

OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::~OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties()
{
}

void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_OverridesIsSet)
    {
        val[utility::conversions::to_string_t("overrides")] = ModelBase::toJson(m_Overrides);
    }
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t("enabled")] = ModelBase::toJson(m_Enabled);
    }
    if(m_Service_rankingIsSet)
    {
        val[utility::conversions::to_string_t("service.ranking")] = ModelBase::toJson(m_Service_ranking);
    }

    return val;
}

void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        if(!val[utility::conversions::to_string_t("description")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("description")]);
            setDescription( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("overrides")))
    {
        if(!val[utility::conversions::to_string_t("overrides")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("overrides")]);
            setOverrides( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enabled")))
    {
        if(!val[utility::conversions::to_string_t("enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enabled")]);
            setEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("service.ranking")))
    {
        if(!val[utility::conversions::to_string_t("service.ranking")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("service.ranking")]);
            setServiceRanking( newItem );
        }
    }
}

void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_DescriptionIsSet)
    {
        if (m_Description.get())
        {
            m_Description->toMultipart(multipart, utility::conversions::to_string_t("description."));
        }
    }
    if(m_OverridesIsSet)
    {
        if (m_Overrides.get())
        {
            m_Overrides->toMultipart(multipart, utility::conversions::to_string_t("overrides."));
        }
    }
    if(m_EnabledIsSet)
    {
        if (m_Enabled.get())
        {
            m_Enabled->toMultipart(multipart, utility::conversions::to_string_t("enabled."));
        }
    }
    if(m_Service_rankingIsSet)
    {
        if (m_Service_ranking.get())
        {
            m_Service_ranking->toMultipart(multipart, utility::conversions::to_string_t("service.ranking."));
        }
    }
}

void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("description")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("description."));
            setDescription( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("overrides")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("overrides")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("overrides."));
            setOverrides( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enabled."));
            setEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("service.ranking")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("service.ranking")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("service.ranking."));
            setServiceRanking( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::getDescription() const
{
    return m_Description;
}


void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::setDescription(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::unsetDescription()
{
    m_DescriptionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::getOverrides() const
{
    return m_Overrides;
}


void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::setOverrides(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Overrides = value;
    m_OverridesIsSet = true;
}
bool OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::overridesIsSet() const
{
    return m_OverridesIsSet;
}

void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::unsetOverrides()
{
    m_OverridesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::getEnabled() const
{
    return m_Enabled;
}


void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::setEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::unsetEnabled()
{
    m_EnabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::getServiceRanking() const
{
    return m_Service_ranking;
}


void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::setServiceRanking(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Service_ranking = value;
    m_Service_rankingIsSet = true;
}
bool OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::serviceRankingIsSet() const
{
    return m_Service_rankingIsSet;
}

void OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties::unsetService_ranking()
{
    m_Service_rankingIsSet = false;
}

}
}
}
}

