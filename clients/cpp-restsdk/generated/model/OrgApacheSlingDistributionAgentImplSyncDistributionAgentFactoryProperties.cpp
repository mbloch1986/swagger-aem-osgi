/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties()
{
    m_NameIsSet = false;
    m_TitleIsSet = false;
    m_DetailsIsSet = false;
    m_EnabledIsSet = false;
    m_ServiceNameIsSet = false;
    m_Log_levelIsSet = false;
    m_Queue_processing_enabledIsSet = false;
    m_PassiveQueuesIsSet = false;
    m_PackageExporter_endpointsIsSet = false;
    m_PackageImporter_endpointsIsSet = false;
    m_Retry_strategyIsSet = false;
    m_Retry_attemptsIsSet = false;
    m_Pull_itemsIsSet = false;
    m_Http_conn_timeoutIsSet = false;
    m_RequestAuthorizationStrategy_targetIsSet = false;
    m_TransportSecretProvider_targetIsSet = false;
    m_PackageBuilder_targetIsSet = false;
    m_Triggers_targetIsSet = false;
}

OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::~OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties()
{
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    }
    if(m_DetailsIsSet)
    {
        val[utility::conversions::to_string_t("details")] = ModelBase::toJson(m_Details);
    }
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t("enabled")] = ModelBase::toJson(m_Enabled);
    }
    if(m_ServiceNameIsSet)
    {
        val[utility::conversions::to_string_t("serviceName")] = ModelBase::toJson(m_ServiceName);
    }
    if(m_Log_levelIsSet)
    {
        val[utility::conversions::to_string_t("log.level")] = ModelBase::toJson(m_Log_level);
    }
    if(m_Queue_processing_enabledIsSet)
    {
        val[utility::conversions::to_string_t("queue.processing.enabled")] = ModelBase::toJson(m_Queue_processing_enabled);
    }
    if(m_PassiveQueuesIsSet)
    {
        val[utility::conversions::to_string_t("passiveQueues")] = ModelBase::toJson(m_PassiveQueues);
    }
    if(m_PackageExporter_endpointsIsSet)
    {
        val[utility::conversions::to_string_t("packageExporter.endpoints")] = ModelBase::toJson(m_PackageExporter_endpoints);
    }
    if(m_PackageImporter_endpointsIsSet)
    {
        val[utility::conversions::to_string_t("packageImporter.endpoints")] = ModelBase::toJson(m_PackageImporter_endpoints);
    }
    if(m_Retry_strategyIsSet)
    {
        val[utility::conversions::to_string_t("retry.strategy")] = ModelBase::toJson(m_Retry_strategy);
    }
    if(m_Retry_attemptsIsSet)
    {
        val[utility::conversions::to_string_t("retry.attempts")] = ModelBase::toJson(m_Retry_attempts);
    }
    if(m_Pull_itemsIsSet)
    {
        val[utility::conversions::to_string_t("pull.items")] = ModelBase::toJson(m_Pull_items);
    }
    if(m_Http_conn_timeoutIsSet)
    {
        val[utility::conversions::to_string_t("http.conn.timeout")] = ModelBase::toJson(m_Http_conn_timeout);
    }
    if(m_RequestAuthorizationStrategy_targetIsSet)
    {
        val[utility::conversions::to_string_t("requestAuthorizationStrategy.target")] = ModelBase::toJson(m_RequestAuthorizationStrategy_target);
    }
    if(m_TransportSecretProvider_targetIsSet)
    {
        val[utility::conversions::to_string_t("transportSecretProvider.target")] = ModelBase::toJson(m_TransportSecretProvider_target);
    }
    if(m_PackageBuilder_targetIsSet)
    {
        val[utility::conversions::to_string_t("packageBuilder.target")] = ModelBase::toJson(m_PackageBuilder_target);
    }
    if(m_Triggers_targetIsSet)
    {
        val[utility::conversions::to_string_t("triggers.target")] = ModelBase::toJson(m_Triggers_target);
    }

    return val;
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        if(!val[utility::conversions::to_string_t("name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("name")]);
            setName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        if(!val[utility::conversions::to_string_t("title")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("title")]);
            setTitle( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("details")))
    {
        if(!val[utility::conversions::to_string_t("details")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("details")]);
            setDetails( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enabled")))
    {
        if(!val[utility::conversions::to_string_t("enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enabled")]);
            setEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("serviceName")))
    {
        if(!val[utility::conversions::to_string_t("serviceName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("serviceName")]);
            setServiceName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("log.level")))
    {
        if(!val[utility::conversions::to_string_t("log.level")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("log.level")]);
            setLogLevel( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queue.processing.enabled")))
    {
        if(!val[utility::conversions::to_string_t("queue.processing.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("queue.processing.enabled")]);
            setQueueProcessingEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("passiveQueues")))
    {
        if(!val[utility::conversions::to_string_t("passiveQueues")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("passiveQueues")]);
            setPassiveQueues( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("packageExporter.endpoints")))
    {
        if(!val[utility::conversions::to_string_t("packageExporter.endpoints")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("packageExporter.endpoints")]);
            setPackageExporterEndpoints( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("packageImporter.endpoints")))
    {
        if(!val[utility::conversions::to_string_t("packageImporter.endpoints")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("packageImporter.endpoints")]);
            setPackageImporterEndpoints( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("retry.strategy")))
    {
        if(!val[utility::conversions::to_string_t("retry.strategy")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("retry.strategy")]);
            setRetryStrategy( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("retry.attempts")))
    {
        if(!val[utility::conversions::to_string_t("retry.attempts")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("retry.attempts")]);
            setRetryAttempts( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pull.items")))
    {
        if(!val[utility::conversions::to_string_t("pull.items")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("pull.items")]);
            setPullItems( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("http.conn.timeout")))
    {
        if(!val[utility::conversions::to_string_t("http.conn.timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("http.conn.timeout")]);
            setHttpConnTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("requestAuthorizationStrategy.target")))
    {
        if(!val[utility::conversions::to_string_t("requestAuthorizationStrategy.target")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("requestAuthorizationStrategy.target")]);
            setRequestAuthorizationStrategyTarget( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("transportSecretProvider.target")))
    {
        if(!val[utility::conversions::to_string_t("transportSecretProvider.target")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("transportSecretProvider.target")]);
            setTransportSecretProviderTarget( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("packageBuilder.target")))
    {
        if(!val[utility::conversions::to_string_t("packageBuilder.target")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("packageBuilder.target")]);
            setPackageBuilderTarget( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("triggers.target")))
    {
        if(!val[utility::conversions::to_string_t("triggers.target")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("triggers.target")]);
            setTriggersTarget( newItem );
        }
    }
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NameIsSet)
    {
        if (m_Name.get())
        {
            m_Name->toMultipart(multipart, utility::conversions::to_string_t("name."));
        }
    }
    if(m_TitleIsSet)
    {
        if (m_Title.get())
        {
            m_Title->toMultipart(multipart, utility::conversions::to_string_t("title."));
        }
    }
    if(m_DetailsIsSet)
    {
        if (m_Details.get())
        {
            m_Details->toMultipart(multipart, utility::conversions::to_string_t("details."));
        }
    }
    if(m_EnabledIsSet)
    {
        if (m_Enabled.get())
        {
            m_Enabled->toMultipart(multipart, utility::conversions::to_string_t("enabled."));
        }
    }
    if(m_ServiceNameIsSet)
    {
        if (m_ServiceName.get())
        {
            m_ServiceName->toMultipart(multipart, utility::conversions::to_string_t("serviceName."));
        }
    }
    if(m_Log_levelIsSet)
    {
        if (m_Log_level.get())
        {
            m_Log_level->toMultipart(multipart, utility::conversions::to_string_t("log.level."));
        }
    }
    if(m_Queue_processing_enabledIsSet)
    {
        if (m_Queue_processing_enabled.get())
        {
            m_Queue_processing_enabled->toMultipart(multipart, utility::conversions::to_string_t("queue.processing.enabled."));
        }
    }
    if(m_PassiveQueuesIsSet)
    {
        if (m_PassiveQueues.get())
        {
            m_PassiveQueues->toMultipart(multipart, utility::conversions::to_string_t("passiveQueues."));
        }
    }
    if(m_PackageExporter_endpointsIsSet)
    {
        if (m_PackageExporter_endpoints.get())
        {
            m_PackageExporter_endpoints->toMultipart(multipart, utility::conversions::to_string_t("packageExporter.endpoints."));
        }
    }
    if(m_PackageImporter_endpointsIsSet)
    {
        if (m_PackageImporter_endpoints.get())
        {
            m_PackageImporter_endpoints->toMultipart(multipart, utility::conversions::to_string_t("packageImporter.endpoints."));
        }
    }
    if(m_Retry_strategyIsSet)
    {
        if (m_Retry_strategy.get())
        {
            m_Retry_strategy->toMultipart(multipart, utility::conversions::to_string_t("retry.strategy."));
        }
    }
    if(m_Retry_attemptsIsSet)
    {
        if (m_Retry_attempts.get())
        {
            m_Retry_attempts->toMultipart(multipart, utility::conversions::to_string_t("retry.attempts."));
        }
    }
    if(m_Pull_itemsIsSet)
    {
        if (m_Pull_items.get())
        {
            m_Pull_items->toMultipart(multipart, utility::conversions::to_string_t("pull.items."));
        }
    }
    if(m_Http_conn_timeoutIsSet)
    {
        if (m_Http_conn_timeout.get())
        {
            m_Http_conn_timeout->toMultipart(multipart, utility::conversions::to_string_t("http.conn.timeout."));
        }
    }
    if(m_RequestAuthorizationStrategy_targetIsSet)
    {
        if (m_RequestAuthorizationStrategy_target.get())
        {
            m_RequestAuthorizationStrategy_target->toMultipart(multipart, utility::conversions::to_string_t("requestAuthorizationStrategy.target."));
        }
    }
    if(m_TransportSecretProvider_targetIsSet)
    {
        if (m_TransportSecretProvider_target.get())
        {
            m_TransportSecretProvider_target->toMultipart(multipart, utility::conversions::to_string_t("transportSecretProvider.target."));
        }
    }
    if(m_PackageBuilder_targetIsSet)
    {
        if (m_PackageBuilder_target.get())
        {
            m_PackageBuilder_target->toMultipart(multipart, utility::conversions::to_string_t("packageBuilder.target."));
        }
    }
    if(m_Triggers_targetIsSet)
    {
        if (m_Triggers_target.get())
        {
            m_Triggers_target->toMultipart(multipart, utility::conversions::to_string_t("triggers.target."));
        }
    }
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("name."));
            setName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("title")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("title."));
            setTitle( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("details")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("details")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("details."));
            setDetails( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enabled."));
            setEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("serviceName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("serviceName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("serviceName."));
            setServiceName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("log.level")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("log.level")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("log.level."));
            setLogLevel( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queue.processing.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queue.processing.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queue.processing.enabled."));
            setQueueProcessingEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("passiveQueues")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("passiveQueues")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("passiveQueues."));
            setPassiveQueues( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("packageExporter.endpoints")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("packageExporter.endpoints")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("packageExporter.endpoints."));
            setPackageExporterEndpoints( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("packageImporter.endpoints")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("packageImporter.endpoints")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("packageImporter.endpoints."));
            setPackageImporterEndpoints( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("retry.strategy")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("retry.strategy")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("retry.strategy."));
            setRetryStrategy( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("retry.attempts")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("retry.attempts")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("retry.attempts."));
            setRetryAttempts( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pull.items")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("pull.items")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("pull.items."));
            setPullItems( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("http.conn.timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("http.conn.timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("http.conn.timeout."));
            setHttpConnTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("requestAuthorizationStrategy.target")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("requestAuthorizationStrategy.target")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("requestAuthorizationStrategy.target."));
            setRequestAuthorizationStrategyTarget( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("transportSecretProvider.target")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("transportSecretProvider.target")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("transportSecretProvider.target."));
            setTransportSecretProviderTarget( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("packageBuilder.target")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("packageBuilder.target")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("packageBuilder.target."));
            setPackageBuilderTarget( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("triggers.target")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("triggers.target")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("triggers.target."));
            setTriggersTarget( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getName() const
{
    return m_Name;
}


void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::nameIsSet() const
{
    return m_NameIsSet;
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetName()
{
    m_NameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getTitle() const
{
    return m_Title;
}


void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setTitle(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::titleIsSet() const
{
    return m_TitleIsSet;
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetTitle()
{
    m_TitleIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getDetails() const
{
    return m_Details;
}


void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setDetails(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Details = value;
    m_DetailsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::detailsIsSet() const
{
    return m_DetailsIsSet;
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetDetails()
{
    m_DetailsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getEnabled() const
{
    return m_Enabled;
}


void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetEnabled()
{
    m_EnabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getServiceName() const
{
    return m_ServiceName;
}


void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setServiceName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_ServiceName = value;
    m_ServiceNameIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::serviceNameIsSet() const
{
    return m_ServiceNameIsSet;
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetServiceName()
{
    m_ServiceNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getLogLevel() const
{
    return m_Log_level;
}


void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setLogLevel(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Log_level = value;
    m_Log_levelIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::logLevelIsSet() const
{
    return m_Log_levelIsSet;
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetLog_level()
{
    m_Log_levelIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getQueueProcessingEnabled() const
{
    return m_Queue_processing_enabled;
}


void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setQueueProcessingEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Queue_processing_enabled = value;
    m_Queue_processing_enabledIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::queueProcessingEnabledIsSet() const
{
    return m_Queue_processing_enabledIsSet;
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetQueue_processing_enabled()
{
    m_Queue_processing_enabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getPassiveQueues() const
{
    return m_PassiveQueues;
}


void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setPassiveQueues(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_PassiveQueues = value;
    m_PassiveQueuesIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::passiveQueuesIsSet() const
{
    return m_PassiveQueuesIsSet;
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetPassiveQueues()
{
    m_PassiveQueuesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getPackageExporterEndpoints() const
{
    return m_PackageExporter_endpoints;
}


void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setPackageExporterEndpoints(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_PackageExporter_endpoints = value;
    m_PackageExporter_endpointsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::packageExporterEndpointsIsSet() const
{
    return m_PackageExporter_endpointsIsSet;
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetPackageExporter_endpoints()
{
    m_PackageExporter_endpointsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getPackageImporterEndpoints() const
{
    return m_PackageImporter_endpoints;
}


void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setPackageImporterEndpoints(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_PackageImporter_endpoints = value;
    m_PackageImporter_endpointsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::packageImporterEndpointsIsSet() const
{
    return m_PackageImporter_endpointsIsSet;
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetPackageImporter_endpoints()
{
    m_PackageImporter_endpointsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getRetryStrategy() const
{
    return m_Retry_strategy;
}


void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setRetryStrategy(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Retry_strategy = value;
    m_Retry_strategyIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::retryStrategyIsSet() const
{
    return m_Retry_strategyIsSet;
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetRetry_strategy()
{
    m_Retry_strategyIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getRetryAttempts() const
{
    return m_Retry_attempts;
}


void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setRetryAttempts(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Retry_attempts = value;
    m_Retry_attemptsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::retryAttemptsIsSet() const
{
    return m_Retry_attemptsIsSet;
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetRetry_attempts()
{
    m_Retry_attemptsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getPullItems() const
{
    return m_Pull_items;
}


void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setPullItems(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Pull_items = value;
    m_Pull_itemsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::pullItemsIsSet() const
{
    return m_Pull_itemsIsSet;
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetPull_items()
{
    m_Pull_itemsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getHttpConnTimeout() const
{
    return m_Http_conn_timeout;
}


void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setHttpConnTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Http_conn_timeout = value;
    m_Http_conn_timeoutIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::httpConnTimeoutIsSet() const
{
    return m_Http_conn_timeoutIsSet;
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetHttp_conn_timeout()
{
    m_Http_conn_timeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getRequestAuthorizationStrategyTarget() const
{
    return m_RequestAuthorizationStrategy_target;
}


void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setRequestAuthorizationStrategyTarget(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_RequestAuthorizationStrategy_target = value;
    m_RequestAuthorizationStrategy_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::requestAuthorizationStrategyTargetIsSet() const
{
    return m_RequestAuthorizationStrategy_targetIsSet;
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetRequestAuthorizationStrategy_target()
{
    m_RequestAuthorizationStrategy_targetIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getTransportSecretProviderTarget() const
{
    return m_TransportSecretProvider_target;
}


void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setTransportSecretProviderTarget(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_TransportSecretProvider_target = value;
    m_TransportSecretProvider_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::transportSecretProviderTargetIsSet() const
{
    return m_TransportSecretProvider_targetIsSet;
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetTransportSecretProvider_target()
{
    m_TransportSecretProvider_targetIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getPackageBuilderTarget() const
{
    return m_PackageBuilder_target;
}


void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setPackageBuilderTarget(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_PackageBuilder_target = value;
    m_PackageBuilder_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::packageBuilderTargetIsSet() const
{
    return m_PackageBuilder_targetIsSet;
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetPackageBuilder_target()
{
    m_PackageBuilder_targetIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::getTriggersTarget() const
{
    return m_Triggers_target;
}


void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::setTriggersTarget(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Triggers_target = value;
    m_Triggers_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::triggersTargetIsSet() const
{
    return m_Triggers_targetIsSet;
}

void OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties::unsetTriggers_target()
{
    m_Triggers_targetIsSet = false;
}

}
}
}
}

