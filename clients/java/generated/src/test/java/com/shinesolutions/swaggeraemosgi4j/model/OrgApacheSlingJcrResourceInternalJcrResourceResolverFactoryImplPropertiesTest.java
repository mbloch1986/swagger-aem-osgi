/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.shinesolutions.swaggeraemosgi4j.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyArray;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyBoolean;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyInteger;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyString;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties
 */
public class OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplPropertiesTest {
    private final OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties model = new OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();

    /**
     * Model tests for OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties
     */
    @Test
    public void testOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties() {
        // TODO: test OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties
    }

    /**
     * Test the property 'resourceResolverSearchpath'
     */
    @Test
    public void resourceResolverSearchpathTest() {
        // TODO: test resourceResolverSearchpath
    }

    /**
     * Test the property 'resourceResolverManglenamespaces'
     */
    @Test
    public void resourceResolverManglenamespacesTest() {
        // TODO: test resourceResolverManglenamespaces
    }

    /**
     * Test the property 'resourceResolverAllowDirect'
     */
    @Test
    public void resourceResolverAllowDirectTest() {
        // TODO: test resourceResolverAllowDirect
    }

    /**
     * Test the property 'resourceResolverRequiredProviders'
     */
    @Test
    public void resourceResolverRequiredProvidersTest() {
        // TODO: test resourceResolverRequiredProviders
    }

    /**
     * Test the property 'resourceResolverRequiredProvidernames'
     */
    @Test
    public void resourceResolverRequiredProvidernamesTest() {
        // TODO: test resourceResolverRequiredProvidernames
    }

    /**
     * Test the property 'resourceResolverVirtual'
     */
    @Test
    public void resourceResolverVirtualTest() {
        // TODO: test resourceResolverVirtual
    }

    /**
     * Test the property 'resourceResolverMapping'
     */
    @Test
    public void resourceResolverMappingTest() {
        // TODO: test resourceResolverMapping
    }

    /**
     * Test the property 'resourceResolverMapLocation'
     */
    @Test
    public void resourceResolverMapLocationTest() {
        // TODO: test resourceResolverMapLocation
    }

    /**
     * Test the property 'resourceResolverMapObservation'
     */
    @Test
    public void resourceResolverMapObservationTest() {
        // TODO: test resourceResolverMapObservation
    }

    /**
     * Test the property 'resourceResolverDefaultVanityRedirectStatus'
     */
    @Test
    public void resourceResolverDefaultVanityRedirectStatusTest() {
        // TODO: test resourceResolverDefaultVanityRedirectStatus
    }

    /**
     * Test the property 'resourceResolverEnableVanitypath'
     */
    @Test
    public void resourceResolverEnableVanitypathTest() {
        // TODO: test resourceResolverEnableVanitypath
    }

    /**
     * Test the property 'resourceResolverVanitypathMaxEntries'
     */
    @Test
    public void resourceResolverVanitypathMaxEntriesTest() {
        // TODO: test resourceResolverVanitypathMaxEntries
    }

    /**
     * Test the property 'resourceResolverVanitypathMaxEntriesStartup'
     */
    @Test
    public void resourceResolverVanitypathMaxEntriesStartupTest() {
        // TODO: test resourceResolverVanitypathMaxEntriesStartup
    }

    /**
     * Test the property 'resourceResolverVanitypathBloomfilterMaxBytes'
     */
    @Test
    public void resourceResolverVanitypathBloomfilterMaxBytesTest() {
        // TODO: test resourceResolverVanitypathBloomfilterMaxBytes
    }

    /**
     * Test the property 'resourceResolverOptimizeAliasResolution'
     */
    @Test
    public void resourceResolverOptimizeAliasResolutionTest() {
        // TODO: test resourceResolverOptimizeAliasResolution
    }

    /**
     * Test the property 'resourceResolverVanitypathWhitelist'
     */
    @Test
    public void resourceResolverVanitypathWhitelistTest() {
        // TODO: test resourceResolverVanitypathWhitelist
    }

    /**
     * Test the property 'resourceResolverVanitypathBlacklist'
     */
    @Test
    public void resourceResolverVanitypathBlacklistTest() {
        // TODO: test resourceResolverVanitypathBlacklist
    }

    /**
     * Test the property 'resourceResolverVanityPrecedence'
     */
    @Test
    public void resourceResolverVanityPrecedenceTest() {
        // TODO: test resourceResolverVanityPrecedence
    }

    /**
     * Test the property 'resourceResolverProviderhandlingParanoid'
     */
    @Test
    public void resourceResolverProviderhandlingParanoidTest() {
        // TODO: test resourceResolverProviderhandlingParanoid
    }

    /**
     * Test the property 'resourceResolverLogClosing'
     */
    @Test
    public void resourceResolverLogClosingTest() {
        // TODO: test resourceResolverLogClosing
    }

    /**
     * Test the property 'resourceResolverLogUnclosed'
     */
    @Test
    public void resourceResolverLogUnclosedTest() {
        // TODO: test resourceResolverLogUnclosed
    }

}
