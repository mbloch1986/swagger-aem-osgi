/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties() {
    this->init();
}

OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::~OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties() {
    
}

void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::init() {
    m_name_isSet = false;
    m_min_pool_size_isSet = false;
    m_max_pool_size_isSet = false;
    m_queue_size_isSet = false;
    m_max_thread_age_isSet = false;
    m_keep_alive_time_isSet = false;
    m_block_policy_isSet = false;
    m_shutdown_graceful_isSet = false;
    m_daemon_isSet = false;
    m_shutdown_wait_time_isSet = false;
    m_priority_isSet = false;
}

void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    
    ::OpenAPI::fromJsonValue(min_pool_size, json[QString("minPoolSize")]);
    
    ::OpenAPI::fromJsonValue(max_pool_size, json[QString("maxPoolSize")]);
    
    ::OpenAPI::fromJsonValue(queue_size, json[QString("queueSize")]);
    
    ::OpenAPI::fromJsonValue(max_thread_age, json[QString("maxThreadAge")]);
    
    ::OpenAPI::fromJsonValue(keep_alive_time, json[QString("keepAliveTime")]);
    
    ::OpenAPI::fromJsonValue(block_policy, json[QString("blockPolicy")]);
    
    ::OpenAPI::fromJsonValue(shutdown_graceful, json[QString("shutdownGraceful")]);
    
    ::OpenAPI::fromJsonValue(daemon, json[QString("daemon")]);
    
    ::OpenAPI::fromJsonValue(shutdown_wait_time, json[QString("shutdownWaitTime")]);
    
    ::OpenAPI::fromJsonValue(priority, json[QString("priority")]);
    
}

QString
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::asJsonObject() const {
    QJsonObject obj;
	if(name.isSet()){
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
	if(min_pool_size.isSet()){
        obj.insert(QString("minPoolSize"), ::OpenAPI::toJsonValue(min_pool_size));
    }
	if(max_pool_size.isSet()){
        obj.insert(QString("maxPoolSize"), ::OpenAPI::toJsonValue(max_pool_size));
    }
	if(queue_size.isSet()){
        obj.insert(QString("queueSize"), ::OpenAPI::toJsonValue(queue_size));
    }
	if(max_thread_age.isSet()){
        obj.insert(QString("maxThreadAge"), ::OpenAPI::toJsonValue(max_thread_age));
    }
	if(keep_alive_time.isSet()){
        obj.insert(QString("keepAliveTime"), ::OpenAPI::toJsonValue(keep_alive_time));
    }
	if(block_policy.isSet()){
        obj.insert(QString("blockPolicy"), ::OpenAPI::toJsonValue(block_policy));
    }
	if(shutdown_graceful.isSet()){
        obj.insert(QString("shutdownGraceful"), ::OpenAPI::toJsonValue(shutdown_graceful));
    }
	if(daemon.isSet()){
        obj.insert(QString("daemon"), ::OpenAPI::toJsonValue(daemon));
    }
	if(shutdown_wait_time.isSet()){
        obj.insert(QString("shutdownWaitTime"), ::OpenAPI::toJsonValue(shutdown_wait_time));
    }
	if(priority.isSet()){
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(priority));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getName() const {
    return name;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setName(const OAIConfigNodePropertyString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getMinPoolSize() const {
    return min_pool_size;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setMinPoolSize(const OAIConfigNodePropertyInteger &min_pool_size) {
    this->min_pool_size = min_pool_size;
    this->m_min_pool_size_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getMaxPoolSize() const {
    return max_pool_size;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setMaxPoolSize(const OAIConfigNodePropertyInteger &max_pool_size) {
    this->max_pool_size = max_pool_size;
    this->m_max_pool_size_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getQueueSize() const {
    return queue_size;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setQueueSize(const OAIConfigNodePropertyInteger &queue_size) {
    this->queue_size = queue_size;
    this->m_queue_size_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getMaxThreadAge() const {
    return max_thread_age;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setMaxThreadAge(const OAIConfigNodePropertyInteger &max_thread_age) {
    this->max_thread_age = max_thread_age;
    this->m_max_thread_age_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getKeepAliveTime() const {
    return keep_alive_time;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setKeepAliveTime(const OAIConfigNodePropertyInteger &keep_alive_time) {
    this->keep_alive_time = keep_alive_time;
    this->m_keep_alive_time_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getBlockPolicy() const {
    return block_policy;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setBlockPolicy(const OAIConfigNodePropertyDropDown &block_policy) {
    this->block_policy = block_policy;
    this->m_block_policy_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getShutdownGraceful() const {
    return shutdown_graceful;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setShutdownGraceful(const OAIConfigNodePropertyBoolean &shutdown_graceful) {
    this->shutdown_graceful = shutdown_graceful;
    this->m_shutdown_graceful_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getDaemon() const {
    return daemon;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setDaemon(const OAIConfigNodePropertyBoolean &daemon) {
    this->daemon = daemon;
    this->m_daemon_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getShutdownWaitTime() const {
    return shutdown_wait_time;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setShutdownWaitTime(const OAIConfigNodePropertyInteger &shutdown_wait_time) {
    this->shutdown_wait_time = shutdown_wait_time;
    this->m_shutdown_wait_time_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getPriority() const {
    return priority;
}
void
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setPriority(const OAIConfigNodePropertyDropDown &priority) {
    this->priority = priority;
    this->m_priority_isSet = true;
}


bool
OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(name.isSet()){ isObjectUpdated = true; break;}
    
        if(min_pool_size.isSet()){ isObjectUpdated = true; break;}
    
        if(max_pool_size.isSet()){ isObjectUpdated = true; break;}
    
        if(queue_size.isSet()){ isObjectUpdated = true; break;}
    
        if(max_thread_age.isSet()){ isObjectUpdated = true; break;}
    
        if(keep_alive_time.isSet()){ isObjectUpdated = true; break;}
    
        if(block_policy.isSet()){ isObjectUpdated = true; break;}
    
        if(shutdown_graceful.isSet()){ isObjectUpdated = true; break;}
    
        if(daemon.isSet()){ isObjectUpdated = true; break;}
    
        if(shutdown_wait_time.isSet()){ isObjectUpdated = true; break;}
    
        if(priority.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

