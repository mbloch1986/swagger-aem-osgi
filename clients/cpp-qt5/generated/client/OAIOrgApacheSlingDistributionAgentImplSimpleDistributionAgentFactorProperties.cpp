/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties() {
    init();
}

OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::~OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::init() {
    name = new OAIConfigNodePropertyString();
    m_name_isSet = false;
    title = new OAIConfigNodePropertyString();
    m_title_isSet = false;
    details = new OAIConfigNodePropertyString();
    m_details_isSet = false;
    enabled = new OAIConfigNodePropertyBoolean();
    m_enabled_isSet = false;
    service_name = new OAIConfigNodePropertyString();
    m_service_name_isSet = false;
    log_level = new OAIConfigNodePropertyDropDown();
    m_log_level_isSet = false;
    queue_processing_enabled = new OAIConfigNodePropertyBoolean();
    m_queue_processing_enabled_isSet = false;
    package_exporter_target = new OAIConfigNodePropertyString();
    m_package_exporter_target_isSet = false;
    package_importer_target = new OAIConfigNodePropertyString();
    m_package_importer_target_isSet = false;
    request_authorization_strategy_target = new OAIConfigNodePropertyString();
    m_request_authorization_strategy_target_isSet = false;
    triggers_target = new OAIConfigNodePropertyString();
    m_triggers_target_isSet = false;
}

void
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::cleanup() {
    if(name != nullptr) { 
        delete name;
    }
    if(title != nullptr) { 
        delete title;
    }
    if(details != nullptr) { 
        delete details;
    }
    if(enabled != nullptr) { 
        delete enabled;
    }
    if(service_name != nullptr) { 
        delete service_name;
    }
    if(log_level != nullptr) { 
        delete log_level;
    }
    if(queue_processing_enabled != nullptr) { 
        delete queue_processing_enabled;
    }
    if(package_exporter_target != nullptr) { 
        delete package_exporter_target;
    }
    if(package_importer_target != nullptr) { 
        delete package_importer_target;
    }
    if(request_authorization_strategy_target != nullptr) { 
        delete request_authorization_strategy_target;
    }
    if(triggers_target != nullptr) { 
        delete triggers_target;
    }
}

OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties*
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&name, pJson["name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&title, pJson["title"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&details, pJson["details"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&enabled, pJson["enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&service_name, pJson["serviceName"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&log_level, pJson["log.level"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&queue_processing_enabled, pJson["queue.processing.enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&package_exporter_target, pJson["packageExporter.target"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&package_importer_target, pJson["packageImporter.target"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&request_authorization_strategy_target, pJson["requestAuthorizationStrategy.target"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&triggers_target, pJson["triggers.target"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::asJsonObject() {
    QJsonObject obj;
    if((name != nullptr) && (name->isSet())){
        toJsonValue(QString("name"), name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((title != nullptr) && (title->isSet())){
        toJsonValue(QString("title"), title, obj, QString("OAIConfigNodePropertyString"));
    }
    if((details != nullptr) && (details->isSet())){
        toJsonValue(QString("details"), details, obj, QString("OAIConfigNodePropertyString"));
    }
    if((enabled != nullptr) && (enabled->isSet())){
        toJsonValue(QString("enabled"), enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((service_name != nullptr) && (service_name->isSet())){
        toJsonValue(QString("serviceName"), service_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((log_level != nullptr) && (log_level->isSet())){
        toJsonValue(QString("log.level"), log_level, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((queue_processing_enabled != nullptr) && (queue_processing_enabled->isSet())){
        toJsonValue(QString("queue.processing.enabled"), queue_processing_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((package_exporter_target != nullptr) && (package_exporter_target->isSet())){
        toJsonValue(QString("packageExporter.target"), package_exporter_target, obj, QString("OAIConfigNodePropertyString"));
    }
    if((package_importer_target != nullptr) && (package_importer_target->isSet())){
        toJsonValue(QString("packageImporter.target"), package_importer_target, obj, QString("OAIConfigNodePropertyString"));
    }
    if((request_authorization_strategy_target != nullptr) && (request_authorization_strategy_target->isSet())){
        toJsonValue(QString("requestAuthorizationStrategy.target"), request_authorization_strategy_target, obj, QString("OAIConfigNodePropertyString"));
    }
    if((triggers_target != nullptr) && (triggers_target->isSet())){
        toJsonValue(QString("triggers.target"), triggers_target, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getName() {
    return name;
}
void
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setName(OAIConfigNodePropertyString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getTitle() {
    return title;
}
void
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setTitle(OAIConfigNodePropertyString* title) {
    this->title = title;
    this->m_title_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getDetails() {
    return details;
}
void
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setDetails(OAIConfigNodePropertyString* details) {
    this->details = details;
    this->m_details_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getEnabled() {
    return enabled;
}
void
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setEnabled(OAIConfigNodePropertyBoolean* enabled) {
    this->enabled = enabled;
    this->m_enabled_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getServiceName() {
    return service_name;
}
void
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setServiceName(OAIConfigNodePropertyString* service_name) {
    this->service_name = service_name;
    this->m_service_name_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getLogLevel() {
    return log_level;
}
void
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setLogLevel(OAIConfigNodePropertyDropDown* log_level) {
    this->log_level = log_level;
    this->m_log_level_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getQueueProcessingEnabled() {
    return queue_processing_enabled;
}
void
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setQueueProcessingEnabled(OAIConfigNodePropertyBoolean* queue_processing_enabled) {
    this->queue_processing_enabled = queue_processing_enabled;
    this->m_queue_processing_enabled_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getPackageExporterTarget() {
    return package_exporter_target;
}
void
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setPackageExporterTarget(OAIConfigNodePropertyString* package_exporter_target) {
    this->package_exporter_target = package_exporter_target;
    this->m_package_exporter_target_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getPackageImporterTarget() {
    return package_importer_target;
}
void
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setPackageImporterTarget(OAIConfigNodePropertyString* package_importer_target) {
    this->package_importer_target = package_importer_target;
    this->m_package_importer_target_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getRequestAuthorizationStrategyTarget() {
    return request_authorization_strategy_target;
}
void
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setRequestAuthorizationStrategyTarget(OAIConfigNodePropertyString* request_authorization_strategy_target) {
    this->request_authorization_strategy_target = request_authorization_strategy_target;
    this->m_request_authorization_strategy_target_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::getTriggersTarget() {
    return triggers_target;
}
void
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::setTriggersTarget(OAIConfigNodePropertyString* triggers_target) {
    this->triggers_target = triggers_target;
    this->m_triggers_target_isSet = true;
}


bool
OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(name != nullptr && name->isSet()){ isObjectUpdated = true; break;}
        if(title != nullptr && title->isSet()){ isObjectUpdated = true; break;}
        if(details != nullptr && details->isSet()){ isObjectUpdated = true; break;}
        if(enabled != nullptr && enabled->isSet()){ isObjectUpdated = true; break;}
        if(service_name != nullptr && service_name->isSet()){ isObjectUpdated = true; break;}
        if(log_level != nullptr && log_level->isSet()){ isObjectUpdated = true; break;}
        if(queue_processing_enabled != nullptr && queue_processing_enabled->isSet()){ isObjectUpdated = true; break;}
        if(package_exporter_target != nullptr && package_exporter_target->isSet()){ isObjectUpdated = true; break;}
        if(package_importer_target != nullptr && package_importer_target->isSet()){ isObjectUpdated = true; break;}
        if(request_authorization_strategy_target != nullptr && request_authorization_strategy_target->isSet()){ isObjectUpdated = true; break;}
        if(triggers_target != nullptr && triggers_target->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

