/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.openapitools.client.model.ConfigNodePropertyArray;
import org.openapitools.client.model.ConfigNodePropertyBoolean;
import org.openapitools.client.model.ConfigNodePropertyInteger;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties {
  
  @SerializedName("cache.enable")
  private ConfigNodePropertyBoolean cacheEnable = null;
  @SerializedName("cache.rootPaths")
  private ConfigNodePropertyArray cacheRootPaths = null;
  @SerializedName("cache.maxSize")
  private ConfigNodePropertyInteger cacheMaxSize = null;
  @SerializedName("cache.maxEntries")
  private ConfigNodePropertyInteger cacheMaxEntries = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getCacheEnable() {
    return cacheEnable;
  }
  public void setCacheEnable(ConfigNodePropertyBoolean cacheEnable) {
    this.cacheEnable = cacheEnable;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyArray getCacheRootPaths() {
    return cacheRootPaths;
  }
  public void setCacheRootPaths(ConfigNodePropertyArray cacheRootPaths) {
    this.cacheRootPaths = cacheRootPaths;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getCacheMaxSize() {
    return cacheMaxSize;
  }
  public void setCacheMaxSize(ConfigNodePropertyInteger cacheMaxSize) {
    this.cacheMaxSize = cacheMaxSize;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getCacheMaxEntries() {
    return cacheMaxEntries;
  }
  public void setCacheMaxEntries(ConfigNodePropertyInteger cacheMaxEntries) {
    this.cacheMaxEntries = cacheMaxEntries;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties comAdobeCqDamS7imagingImplPsPlatformServerServletProperties = (ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties) o;
    return (this.cacheEnable == null ? comAdobeCqDamS7imagingImplPsPlatformServerServletProperties.cacheEnable == null : this.cacheEnable.equals(comAdobeCqDamS7imagingImplPsPlatformServerServletProperties.cacheEnable)) &&
        (this.cacheRootPaths == null ? comAdobeCqDamS7imagingImplPsPlatformServerServletProperties.cacheRootPaths == null : this.cacheRootPaths.equals(comAdobeCqDamS7imagingImplPsPlatformServerServletProperties.cacheRootPaths)) &&
        (this.cacheMaxSize == null ? comAdobeCqDamS7imagingImplPsPlatformServerServletProperties.cacheMaxSize == null : this.cacheMaxSize.equals(comAdobeCqDamS7imagingImplPsPlatformServerServletProperties.cacheMaxSize)) &&
        (this.cacheMaxEntries == null ? comAdobeCqDamS7imagingImplPsPlatformServerServletProperties.cacheMaxEntries == null : this.cacheMaxEntries.equals(comAdobeCqDamS7imagingImplPsPlatformServerServletProperties.cacheMaxEntries));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.cacheEnable == null ? 0: this.cacheEnable.hashCode());
    result = 31 * result + (this.cacheRootPaths == null ? 0: this.cacheRootPaths.hashCode());
    result = 31 * result + (this.cacheMaxSize == null ? 0: this.cacheMaxSize.hashCode());
    result = 31 * result + (this.cacheMaxEntries == null ? 0: this.cacheMaxEntries.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties {\n");
    
    sb.append("  cacheEnable: ").append(cacheEnable).append("\n");
    sb.append("  cacheRootPaths: ").append(cacheRootPaths).append("\n");
    sb.append("  cacheMaxSize: ").append(cacheMaxSize).append("\n");
    sb.append("  cacheMaxEntries: ").append(cacheMaxEntries).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
