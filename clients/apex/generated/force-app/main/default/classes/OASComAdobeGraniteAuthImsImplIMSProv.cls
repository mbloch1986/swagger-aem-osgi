/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASComAdobeGraniteAuthImsImplIMSProv
 */
public class OASComAdobeGraniteAuthImsImplIMSProv implements OAS.MappedProperties {
    /**
     * Get oauthProviderId
     * @return oauthProviderId
     */
    public OASConfigNodePropertyString oauthProviderId { get; set; }

    /**
     * Get oauthProviderImsAuthorizationUrl
     * @return oauthProviderImsAuthorizationUrl
     */
    public OASConfigNodePropertyString oauthProviderImsAuthorizationUrl { get; set; }

    /**
     * Get oauthProviderImsTokenUrl
     * @return oauthProviderImsTokenUrl
     */
    public OASConfigNodePropertyString oauthProviderImsTokenUrl { get; set; }

    /**
     * Get oauthProviderImsProfileUrl
     * @return oauthProviderImsProfileUrl
     */
    public OASConfigNodePropertyString oauthProviderImsProfileUrl { get; set; }

    /**
     * Get oauthProviderImsExtendedDetailsUrls
     * @return oauthProviderImsExtendedDetailsUrls
     */
    public OASConfigNodePropertyArray oauthProviderImsExtendedDetailsUrls { get; set; }

    /**
     * Get oauthProviderImsValidateTokenUrl
     * @return oauthProviderImsValidateTokenUrl
     */
    public OASConfigNodePropertyString oauthProviderImsValidateTokenUrl { get; set; }

    /**
     * Get oauthProviderImsSessionProperty
     * @return oauthProviderImsSessionProperty
     */
    public OASConfigNodePropertyString oauthProviderImsSessionProperty { get; set; }

    /**
     * Get oauthProviderImsServiceTokenClientId
     * @return oauthProviderImsServiceTokenClientId
     */
    public OASConfigNodePropertyString oauthProviderImsServiceTokenClientId { get; set; }

    /**
     * Get oauthProviderImsServiceTokenClientSecret
     * @return oauthProviderImsServiceTokenClientSecret
     */
    public OASConfigNodePropertyString oauthProviderImsServiceTokenClientSecret { get; set; }

    /**
     * Get oauthProviderImsServiceToken
     * @return oauthProviderImsServiceToken
     */
    public OASConfigNodePropertyString oauthProviderImsServiceToken { get; set; }

    /**
     * Get imsOrgRef
     * @return imsOrgRef
     */
    public OASConfigNodePropertyString imsOrgRef { get; set; }

    /**
     * Get imsGroupMapping
     * @return imsGroupMapping
     */
    public OASConfigNodePropertyArray imsGroupMapping { get; set; }

    /**
     * Get oauthProviderImsOnlyLicenseGroup
     * @return oauthProviderImsOnlyLicenseGroup
     */
    public OASConfigNodePropertyBoolean oauthProviderImsOnlyLicenseGroup { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'oauth.provider.id' => 'oauthProviderId',
        'oauth.provider.ims.authorization.url' => 'oauthProviderImsAuthorizationUrl',
        'oauth.provider.ims.token.url' => 'oauthProviderImsTokenUrl',
        'oauth.provider.ims.profile.url' => 'oauthProviderImsProfileUrl',
        'oauth.provider.ims.extended.details.urls' => 'oauthProviderImsExtendedDetailsUrls',
        'oauth.provider.ims.validate.token.url' => 'oauthProviderImsValidateTokenUrl',
        'oauth.provider.ims.session.property' => 'oauthProviderImsSessionProperty',
        'oauth.provider.ims.service.token.client.id' => 'oauthProviderImsServiceTokenClientId',
        'oauth.provider.ims.service.token.client.secret' => 'oauthProviderImsServiceTokenClientSecret',
        'oauth.provider.ims.service.token' => 'oauthProviderImsServiceToken',
        'ims.org.ref' => 'imsOrgRef',
        'ims.group.mapping' => 'imsGroupMapping',
        'oauth.provider.ims.only.license.group' => 'oauthProviderImsOnlyLicenseGroup'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASComAdobeGraniteAuthImsImplIMSProv getExample() {
        OASComAdobeGraniteAuthImsImplIMSProv comAdobeGraniteAuthImsImplIMSProviderImplProperties = new OASComAdobeGraniteAuthImsImplIMSProv();
          comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderId = OASConfigNodePropertyString.getExample();
          comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderImsAuthorizationUrl = OASConfigNodePropertyString.getExample();
          comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderImsTokenUrl = OASConfigNodePropertyString.getExample();
          comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderImsProfileUrl = OASConfigNodePropertyString.getExample();
          comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderImsExtendedDetailsUrls = OASConfigNodePropertyArray.getExample();
          comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderImsValidateTokenUrl = OASConfigNodePropertyString.getExample();
          comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderImsSessionProperty = OASConfigNodePropertyString.getExample();
          comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderImsServiceTokenClientId = OASConfigNodePropertyString.getExample();
          comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderImsServiceTokenClientSecret = OASConfigNodePropertyString.getExample();
          comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderImsServiceToken = OASConfigNodePropertyString.getExample();
          comAdobeGraniteAuthImsImplIMSProviderImplProperties.imsOrgRef = OASConfigNodePropertyString.getExample();
          comAdobeGraniteAuthImsImplIMSProviderImplProperties.imsGroupMapping = OASConfigNodePropertyArray.getExample();
          comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderImsOnlyLicenseGroup = OASConfigNodePropertyBoolean.getExample();
        return comAdobeGraniteAuthImsImplIMSProviderImplProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASComAdobeGraniteAuthImsImplIMSProv) {           
            OASComAdobeGraniteAuthImsImplIMSProv comAdobeGraniteAuthImsImplIMSProviderImplProperties = (OASComAdobeGraniteAuthImsImplIMSProv) obj;
            return this.oauthProviderId == comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderId
                && this.oauthProviderImsAuthorizationUrl == comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderImsAuthorizationUrl
                && this.oauthProviderImsTokenUrl == comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderImsTokenUrl
                && this.oauthProviderImsProfileUrl == comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderImsProfileUrl
                && this.oauthProviderImsExtendedDetailsUrls == comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderImsExtendedDetailsUrls
                && this.oauthProviderImsValidateTokenUrl == comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderImsValidateTokenUrl
                && this.oauthProviderImsSessionProperty == comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderImsSessionProperty
                && this.oauthProviderImsServiceTokenClientId == comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderImsServiceTokenClientId
                && this.oauthProviderImsServiceTokenClientSecret == comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderImsServiceTokenClientSecret
                && this.oauthProviderImsServiceToken == comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderImsServiceToken
                && this.imsOrgRef == comAdobeGraniteAuthImsImplIMSProviderImplProperties.imsOrgRef
                && this.imsGroupMapping == comAdobeGraniteAuthImsImplIMSProviderImplProperties.imsGroupMapping
                && this.oauthProviderImsOnlyLicenseGroup == comAdobeGraniteAuthImsImplIMSProviderImplProperties.oauthProviderImsOnlyLicenseGroup;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (oauthProviderId == null ? 0 : System.hashCode(oauthProviderId));
        hashCode = (17 * hashCode) + (oauthProviderImsAuthorizationUrl == null ? 0 : System.hashCode(oauthProviderImsAuthorizationUrl));
        hashCode = (17 * hashCode) + (oauthProviderImsTokenUrl == null ? 0 : System.hashCode(oauthProviderImsTokenUrl));
        hashCode = (17 * hashCode) + (oauthProviderImsProfileUrl == null ? 0 : System.hashCode(oauthProviderImsProfileUrl));
        hashCode = (17 * hashCode) + (oauthProviderImsExtendedDetailsUrls == null ? 0 : System.hashCode(oauthProviderImsExtendedDetailsUrls));
        hashCode = (17 * hashCode) + (oauthProviderImsValidateTokenUrl == null ? 0 : System.hashCode(oauthProviderImsValidateTokenUrl));
        hashCode = (17 * hashCode) + (oauthProviderImsSessionProperty == null ? 0 : System.hashCode(oauthProviderImsSessionProperty));
        hashCode = (17 * hashCode) + (oauthProviderImsServiceTokenClientId == null ? 0 : System.hashCode(oauthProviderImsServiceTokenClientId));
        hashCode = (17 * hashCode) + (oauthProviderImsServiceTokenClientSecret == null ? 0 : System.hashCode(oauthProviderImsServiceTokenClientSecret));
        hashCode = (17 * hashCode) + (oauthProviderImsServiceToken == null ? 0 : System.hashCode(oauthProviderImsServiceToken));
        hashCode = (17 * hashCode) + (imsOrgRef == null ? 0 : System.hashCode(imsOrgRef));
        hashCode = (17 * hashCode) + (imsGroupMapping == null ? 0 : System.hashCode(imsGroupMapping));
        hashCode = (17 * hashCode) + (oauthProviderImsOnlyLicenseGroup == null ? 0 : System.hashCode(oauthProviderImsOnlyLicenseGroup));
        return hashCode;
    }
}

