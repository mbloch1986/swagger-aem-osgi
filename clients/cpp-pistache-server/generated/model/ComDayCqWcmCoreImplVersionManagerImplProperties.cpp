/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqWcmCoreImplVersionManagerImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqWcmCoreImplVersionManagerImplProperties::ComDayCqWcmCoreImplVersionManagerImplProperties()
{
    m_Versionmanager_createVersionOnActivationIsSet = false;
    m_Versionmanager_purgingEnabledIsSet = false;
    m_Versionmanager_purgePathsIsSet = false;
    m_Versionmanager_ivPathsIsSet = false;
    m_Versionmanager_maxAgeDaysIsSet = false;
    m_Versionmanager_maxNumberVersionsIsSet = false;
    m_Versionmanager_minNumberVersionsIsSet = false;
    
}

ComDayCqWcmCoreImplVersionManagerImplProperties::~ComDayCqWcmCoreImplVersionManagerImplProperties()
{
}

void ComDayCqWcmCoreImplVersionManagerImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqWcmCoreImplVersionManagerImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Versionmanager_createVersionOnActivationIsSet)
    {
        val["versionmanager.createVersionOnActivation"] = ModelBase::toJson(m_Versionmanager_createVersionOnActivation);
    }
    if(m_Versionmanager_purgingEnabledIsSet)
    {
        val["versionmanager.purgingEnabled"] = ModelBase::toJson(m_Versionmanager_purgingEnabled);
    }
    if(m_Versionmanager_purgePathsIsSet)
    {
        val["versionmanager.purgePaths"] = ModelBase::toJson(m_Versionmanager_purgePaths);
    }
    if(m_Versionmanager_ivPathsIsSet)
    {
        val["versionmanager.ivPaths"] = ModelBase::toJson(m_Versionmanager_ivPaths);
    }
    if(m_Versionmanager_maxAgeDaysIsSet)
    {
        val["versionmanager.maxAgeDays"] = ModelBase::toJson(m_Versionmanager_maxAgeDays);
    }
    if(m_Versionmanager_maxNumberVersionsIsSet)
    {
        val["versionmanager.maxNumberVersions"] = ModelBase::toJson(m_Versionmanager_maxNumberVersions);
    }
    if(m_Versionmanager_minNumberVersionsIsSet)
    {
        val["versionmanager.minNumberVersions"] = ModelBase::toJson(m_Versionmanager_minNumberVersions);
    }
    

    return val;
}

void ComDayCqWcmCoreImplVersionManagerImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("versionmanager.createVersionOnActivation") != val.end())
    {
        if(!val["versionmanager.createVersionOnActivation"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["versionmanager.createVersionOnActivation"]);
            setVersionmanagerCreateVersionOnActivation( newItem );
        }
        
    }
    if(val.find("versionmanager.purgingEnabled") != val.end())
    {
        if(!val["versionmanager.purgingEnabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["versionmanager.purgingEnabled"]);
            setVersionmanagerPurgingEnabled( newItem );
        }
        
    }
    if(val.find("versionmanager.purgePaths") != val.end())
    {
        if(!val["versionmanager.purgePaths"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["versionmanager.purgePaths"]);
            setVersionmanagerPurgePaths( newItem );
        }
        
    }
    if(val.find("versionmanager.ivPaths") != val.end())
    {
        if(!val["versionmanager.ivPaths"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["versionmanager.ivPaths"]);
            setVersionmanagerIvPaths( newItem );
        }
        
    }
    if(val.find("versionmanager.maxAgeDays") != val.end())
    {
        if(!val["versionmanager.maxAgeDays"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["versionmanager.maxAgeDays"]);
            setVersionmanagerMaxAgeDays( newItem );
        }
        
    }
    if(val.find("versionmanager.maxNumberVersions") != val.end())
    {
        if(!val["versionmanager.maxNumberVersions"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["versionmanager.maxNumberVersions"]);
            setVersionmanagerMaxNumberVersions( newItem );
        }
        
    }
    if(val.find("versionmanager.minNumberVersions") != val.end())
    {
        if(!val["versionmanager.minNumberVersions"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["versionmanager.minNumberVersions"]);
            setVersionmanagerMinNumberVersions( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean ComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerCreateVersionOnActivation() const
{
    return m_Versionmanager_createVersionOnActivation;
}
void ComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerCreateVersionOnActivation(ConfigNodePropertyBoolean const& value)
{
    m_Versionmanager_createVersionOnActivation = value;
    m_Versionmanager_createVersionOnActivationIsSet = true;
}
bool ComDayCqWcmCoreImplVersionManagerImplProperties::versionmanagerCreateVersionOnActivationIsSet() const
{
    return m_Versionmanager_createVersionOnActivationIsSet;
}
void ComDayCqWcmCoreImplVersionManagerImplProperties::unsetVersionmanager_createVersionOnActivation()
{
    m_Versionmanager_createVersionOnActivationIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerPurgingEnabled() const
{
    return m_Versionmanager_purgingEnabled;
}
void ComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerPurgingEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Versionmanager_purgingEnabled = value;
    m_Versionmanager_purgingEnabledIsSet = true;
}
bool ComDayCqWcmCoreImplVersionManagerImplProperties::versionmanagerPurgingEnabledIsSet() const
{
    return m_Versionmanager_purgingEnabledIsSet;
}
void ComDayCqWcmCoreImplVersionManagerImplProperties::unsetVersionmanager_purgingEnabled()
{
    m_Versionmanager_purgingEnabledIsSet = false;
}
ConfigNodePropertyArray ComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerPurgePaths() const
{
    return m_Versionmanager_purgePaths;
}
void ComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerPurgePaths(ConfigNodePropertyArray const& value)
{
    m_Versionmanager_purgePaths = value;
    m_Versionmanager_purgePathsIsSet = true;
}
bool ComDayCqWcmCoreImplVersionManagerImplProperties::versionmanagerPurgePathsIsSet() const
{
    return m_Versionmanager_purgePathsIsSet;
}
void ComDayCqWcmCoreImplVersionManagerImplProperties::unsetVersionmanager_purgePaths()
{
    m_Versionmanager_purgePathsIsSet = false;
}
ConfigNodePropertyArray ComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerIvPaths() const
{
    return m_Versionmanager_ivPaths;
}
void ComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerIvPaths(ConfigNodePropertyArray const& value)
{
    m_Versionmanager_ivPaths = value;
    m_Versionmanager_ivPathsIsSet = true;
}
bool ComDayCqWcmCoreImplVersionManagerImplProperties::versionmanagerIvPathsIsSet() const
{
    return m_Versionmanager_ivPathsIsSet;
}
void ComDayCqWcmCoreImplVersionManagerImplProperties::unsetVersionmanager_ivPaths()
{
    m_Versionmanager_ivPathsIsSet = false;
}
ConfigNodePropertyInteger ComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerMaxAgeDays() const
{
    return m_Versionmanager_maxAgeDays;
}
void ComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerMaxAgeDays(ConfigNodePropertyInteger const& value)
{
    m_Versionmanager_maxAgeDays = value;
    m_Versionmanager_maxAgeDaysIsSet = true;
}
bool ComDayCqWcmCoreImplVersionManagerImplProperties::versionmanagerMaxAgeDaysIsSet() const
{
    return m_Versionmanager_maxAgeDaysIsSet;
}
void ComDayCqWcmCoreImplVersionManagerImplProperties::unsetVersionmanager_maxAgeDays()
{
    m_Versionmanager_maxAgeDaysIsSet = false;
}
ConfigNodePropertyInteger ComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerMaxNumberVersions() const
{
    return m_Versionmanager_maxNumberVersions;
}
void ComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerMaxNumberVersions(ConfigNodePropertyInteger const& value)
{
    m_Versionmanager_maxNumberVersions = value;
    m_Versionmanager_maxNumberVersionsIsSet = true;
}
bool ComDayCqWcmCoreImplVersionManagerImplProperties::versionmanagerMaxNumberVersionsIsSet() const
{
    return m_Versionmanager_maxNumberVersionsIsSet;
}
void ComDayCqWcmCoreImplVersionManagerImplProperties::unsetVersionmanager_maxNumberVersions()
{
    m_Versionmanager_maxNumberVersionsIsSet = false;
}
ConfigNodePropertyInteger ComDayCqWcmCoreImplVersionManagerImplProperties::getVersionmanagerMinNumberVersions() const
{
    return m_Versionmanager_minNumberVersions;
}
void ComDayCqWcmCoreImplVersionManagerImplProperties::setVersionmanagerMinNumberVersions(ConfigNodePropertyInteger const& value)
{
    m_Versionmanager_minNumberVersions = value;
    m_Versionmanager_minNumberVersionsIsSet = true;
}
bool ComDayCqWcmCoreImplVersionManagerImplProperties::versionmanagerMinNumberVersionsIsSet() const
{
    return m_Versionmanager_minNumberVersionsIsSet;
}
void ComDayCqWcmCoreImplVersionManagerImplProperties::unsetVersionmanager_minNumberVersions()
{
    m_Versionmanager_minNumberVersionsIsSet = false;
}

}
}
}
}

