/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheFelixJaasConfigurationSpiProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheFelixJaasConfigurationSpiProperties::OAIOrgApacheFelixJaasConfigurationSpiProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheFelixJaasConfigurationSpiProperties::OAIOrgApacheFelixJaasConfigurationSpiProperties() {
    this->init();
}

OAIOrgApacheFelixJaasConfigurationSpiProperties::~OAIOrgApacheFelixJaasConfigurationSpiProperties() {
    
}

void
OAIOrgApacheFelixJaasConfigurationSpiProperties::init() {
    m_jaas_default_realm_name_isSet = false;
    m_jaas_config_provider_name_isSet = false;
    m_jaas_global_config_policy_isSet = false;
}

void
OAIOrgApacheFelixJaasConfigurationSpiProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheFelixJaasConfigurationSpiProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(jaas_default_realm_name, json[QString("jaas.defaultRealmName")]);
    
    ::OpenAPI::fromJsonValue(jaas_config_provider_name, json[QString("jaas.configProviderName")]);
    
    ::OpenAPI::fromJsonValue(jaas_global_config_policy, json[QString("jaas.globalConfigPolicy")]);
    
}

QString
OAIOrgApacheFelixJaasConfigurationSpiProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheFelixJaasConfigurationSpiProperties::asJsonObject() const {
    QJsonObject obj;
	if(jaas_default_realm_name.isSet()){
        obj.insert(QString("jaas.defaultRealmName"), ::OpenAPI::toJsonValue(jaas_default_realm_name));
    }
	if(jaas_config_provider_name.isSet()){
        obj.insert(QString("jaas.configProviderName"), ::OpenAPI::toJsonValue(jaas_config_provider_name));
    }
	if(jaas_global_config_policy.isSet()){
        obj.insert(QString("jaas.globalConfigPolicy"), ::OpenAPI::toJsonValue(jaas_global_config_policy));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixJaasConfigurationSpiProperties::getJaasDefaultRealmName() const {
    return jaas_default_realm_name;
}
void
OAIOrgApacheFelixJaasConfigurationSpiProperties::setJaasDefaultRealmName(const OAIConfigNodePropertyString &jaas_default_realm_name) {
    this->jaas_default_realm_name = jaas_default_realm_name;
    this->m_jaas_default_realm_name_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixJaasConfigurationSpiProperties::getJaasConfigProviderName() const {
    return jaas_config_provider_name;
}
void
OAIOrgApacheFelixJaasConfigurationSpiProperties::setJaasConfigProviderName(const OAIConfigNodePropertyString &jaas_config_provider_name) {
    this->jaas_config_provider_name = jaas_config_provider_name;
    this->m_jaas_config_provider_name_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheFelixJaasConfigurationSpiProperties::getJaasGlobalConfigPolicy() const {
    return jaas_global_config_policy;
}
void
OAIOrgApacheFelixJaasConfigurationSpiProperties::setJaasGlobalConfigPolicy(const OAIConfigNodePropertyDropDown &jaas_global_config_policy) {
    this->jaas_global_config_policy = jaas_global_config_policy;
    this->m_jaas_global_config_policy_isSet = true;
}


bool
OAIOrgApacheFelixJaasConfigurationSpiProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(jaas_default_realm_name.isSet()){ isObjectUpdated = true; break;}
    
        if(jaas_config_provider_name.isSet()){ isObjectUpdated = true; break;}
    
        if(jaas_global_config_policy.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

