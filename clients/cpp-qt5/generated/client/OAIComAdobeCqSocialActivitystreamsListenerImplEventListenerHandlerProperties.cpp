/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties::OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties::OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties() {
    init();
}

OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties::~OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties() {
    this->cleanup();
}

void
OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties::init() {
    event_topics = new OAIConfigNodePropertyString();
    m_event_topics_isSet = false;
    event_filter = new OAIConfigNodePropertyString();
    m_event_filter_isSet = false;
}

void
OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties::cleanup() {
    if(event_topics != nullptr) { 
        delete event_topics;
    }
    if(event_filter != nullptr) { 
        delete event_filter;
    }
}

OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties*
OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&event_topics, pJson["event.topics"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&event_filter, pJson["event.filter"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties::asJsonObject() {
    QJsonObject obj;
    if((event_topics != nullptr) && (event_topics->isSet())){
        toJsonValue(QString("event.topics"), event_topics, obj, QString("OAIConfigNodePropertyString"));
    }
    if((event_filter != nullptr) && (event_filter->isSet())){
        toJsonValue(QString("event.filter"), event_filter, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties::getEventTopics() {
    return event_topics;
}
void
OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties::setEventTopics(OAIConfigNodePropertyString* event_topics) {
    this->event_topics = event_topics;
    this->m_event_topics_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties::getEventFilter() {
    return event_filter;
}
void
OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties::setEventFilter(OAIConfigNodePropertyString* event_filter) {
    this->event_filter = event_filter;
    this->m_event_filter_isSet = true;
}


bool
OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(event_topics != nullptr && event_topics->isSet()){ isObjectUpdated = true; break;}
        if(event_filter != nullptr && event_filter->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

