/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties()
{
    m_AccountNameIsSet = false;
    m_ContainerNameIsSet = false;
    m_AccessKeyIsSet = false;
    m_RootPathIsSet = false;
    m_ConnectionURLIsSet = false;
}

OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::~OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties()
{
}

void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AccountNameIsSet)
    {
        val[utility::conversions::to_string_t("accountName")] = ModelBase::toJson(m_AccountName);
    }
    if(m_ContainerNameIsSet)
    {
        val[utility::conversions::to_string_t("containerName")] = ModelBase::toJson(m_ContainerName);
    }
    if(m_AccessKeyIsSet)
    {
        val[utility::conversions::to_string_t("accessKey")] = ModelBase::toJson(m_AccessKey);
    }
    if(m_RootPathIsSet)
    {
        val[utility::conversions::to_string_t("rootPath")] = ModelBase::toJson(m_RootPath);
    }
    if(m_ConnectionURLIsSet)
    {
        val[utility::conversions::to_string_t("connectionURL")] = ModelBase::toJson(m_ConnectionURL);
    }

    return val;
}

void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("accountName")))
    {
        if(!val[utility::conversions::to_string_t("accountName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("accountName")]);
            setAccountName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("containerName")))
    {
        if(!val[utility::conversions::to_string_t("containerName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("containerName")]);
            setContainerName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("accessKey")))
    {
        if(!val[utility::conversions::to_string_t("accessKey")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("accessKey")]);
            setAccessKey( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rootPath")))
    {
        if(!val[utility::conversions::to_string_t("rootPath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("rootPath")]);
            setRootPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("connectionURL")))
    {
        if(!val[utility::conversions::to_string_t("connectionURL")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("connectionURL")]);
            setConnectionURL( newItem );
        }
    }
}

void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_AccountNameIsSet)
    {
        if (m_AccountName.get())
        {
            m_AccountName->toMultipart(multipart, utility::conversions::to_string_t("accountName."));
        }
    }
    if(m_ContainerNameIsSet)
    {
        if (m_ContainerName.get())
        {
            m_ContainerName->toMultipart(multipart, utility::conversions::to_string_t("containerName."));
        }
    }
    if(m_AccessKeyIsSet)
    {
        if (m_AccessKey.get())
        {
            m_AccessKey->toMultipart(multipart, utility::conversions::to_string_t("accessKey."));
        }
    }
    if(m_RootPathIsSet)
    {
        if (m_RootPath.get())
        {
            m_RootPath->toMultipart(multipart, utility::conversions::to_string_t("rootPath."));
        }
    }
    if(m_ConnectionURLIsSet)
    {
        if (m_ConnectionURL.get())
        {
            m_ConnectionURL->toMultipart(multipart, utility::conversions::to_string_t("connectionURL."));
        }
    }
}

void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("accountName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("accountName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("accountName."));
            setAccountName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("containerName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("containerName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("containerName."));
            setContainerName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("accessKey")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("accessKey")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("accessKey."));
            setAccessKey( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rootPath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("rootPath")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("rootPath."));
            setRootPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("connectionURL")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("connectionURL")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("connectionURL."));
            setConnectionURL( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::getAccountName() const
{
    return m_AccountName;
}


void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::setAccountName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_AccountName = value;
    m_AccountNameIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::accountNameIsSet() const
{
    return m_AccountNameIsSet;
}

void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::unsetAccountName()
{
    m_AccountNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::getContainerName() const
{
    return m_ContainerName;
}


void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::setContainerName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_ContainerName = value;
    m_ContainerNameIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::containerNameIsSet() const
{
    return m_ContainerNameIsSet;
}

void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::unsetContainerName()
{
    m_ContainerNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::getAccessKey() const
{
    return m_AccessKey;
}


void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::setAccessKey(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_AccessKey = value;
    m_AccessKeyIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::accessKeyIsSet() const
{
    return m_AccessKeyIsSet;
}

void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::unsetAccessKey()
{
    m_AccessKeyIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::getRootPath() const
{
    return m_RootPath;
}


void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::setRootPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_RootPath = value;
    m_RootPathIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::rootPathIsSet() const
{
    return m_RootPathIsSet;
}

void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::unsetRootPath()
{
    m_RootPathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::getConnectionURL() const
{
    return m_ConnectionURL;
}


void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::setConnectionURL(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_ConnectionURL = value;
    m_ConnectionURLIsSet = true;
}
bool OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::connectionURLIsSet() const
{
    return m_ConnectionURLIsSet;
}

void OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties::unsetConnectionURL()
{
    m_ConnectionURLIsSet = false;
}

}
}
}
}

