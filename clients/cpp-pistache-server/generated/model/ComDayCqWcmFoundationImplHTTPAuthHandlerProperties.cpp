/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::ComDayCqWcmFoundationImplHTTPAuthHandlerProperties()
{
    m_PathIsSet = false;
    m_Auth_http_nologinIsSet = false;
    m_Auth_http_realmIsSet = false;
    m_Auth_default_loginpageIsSet = false;
    m_Auth_cred_formIsSet = false;
    m_Auth_cred_utf8IsSet = false;
    
}

ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::~ComDayCqWcmFoundationImplHTTPAuthHandlerProperties()
{
}

void ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_PathIsSet)
    {
        val["path"] = ModelBase::toJson(m_Path);
    }
    if(m_Auth_http_nologinIsSet)
    {
        val["auth.http.nologin"] = ModelBase::toJson(m_Auth_http_nologin);
    }
    if(m_Auth_http_realmIsSet)
    {
        val["auth.http.realm"] = ModelBase::toJson(m_Auth_http_realm);
    }
    if(m_Auth_default_loginpageIsSet)
    {
        val["auth.default.loginpage"] = ModelBase::toJson(m_Auth_default_loginpage);
    }
    if(m_Auth_cred_formIsSet)
    {
        val["auth.cred.form"] = ModelBase::toJson(m_Auth_cred_form);
    }
    if(m_Auth_cred_utf8IsSet)
    {
        val["auth.cred.utf8"] = ModelBase::toJson(m_Auth_cred_utf8);
    }
    

    return val;
}

void ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::fromJson(nlohmann::json& val)
{
    if(val.find("path") != val.end())
    {
        if(!val["path"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["path"]);
            setPath( newItem );
        }
        
    }
    if(val.find("auth.http.nologin") != val.end())
    {
        if(!val["auth.http.nologin"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["auth.http.nologin"]);
            setAuthHttpNologin( newItem );
        }
        
    }
    if(val.find("auth.http.realm") != val.end())
    {
        if(!val["auth.http.realm"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["auth.http.realm"]);
            setAuthHttpRealm( newItem );
        }
        
    }
    if(val.find("auth.default.loginpage") != val.end())
    {
        if(!val["auth.default.loginpage"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["auth.default.loginpage"]);
            setAuthDefaultLoginpage( newItem );
        }
        
    }
    if(val.find("auth.cred.form") != val.end())
    {
        if(!val["auth.cred.form"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["auth.cred.form"]);
            setAuthCredForm( newItem );
        }
        
    }
    if(val.find("auth.cred.utf8") != val.end())
    {
        if(!val["auth.cred.utf8"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["auth.cred.utf8"]);
            setAuthCredUtf8( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::getPath() const
{
    return m_Path;
}
void ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::setPath(ConfigNodePropertyString const& value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::pathIsSet() const
{
    return m_PathIsSet;
}
void ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::unsetPath()
{
    m_PathIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::getAuthHttpNologin() const
{
    return m_Auth_http_nologin;
}
void ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::setAuthHttpNologin(ConfigNodePropertyBoolean const& value)
{
    m_Auth_http_nologin = value;
    m_Auth_http_nologinIsSet = true;
}
bool ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::authHttpNologinIsSet() const
{
    return m_Auth_http_nologinIsSet;
}
void ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::unsetAuth_http_nologin()
{
    m_Auth_http_nologinIsSet = false;
}
ConfigNodePropertyString ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::getAuthHttpRealm() const
{
    return m_Auth_http_realm;
}
void ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::setAuthHttpRealm(ConfigNodePropertyString const& value)
{
    m_Auth_http_realm = value;
    m_Auth_http_realmIsSet = true;
}
bool ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::authHttpRealmIsSet() const
{
    return m_Auth_http_realmIsSet;
}
void ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::unsetAuth_http_realm()
{
    m_Auth_http_realmIsSet = false;
}
ConfigNodePropertyString ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::getAuthDefaultLoginpage() const
{
    return m_Auth_default_loginpage;
}
void ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::setAuthDefaultLoginpage(ConfigNodePropertyString const& value)
{
    m_Auth_default_loginpage = value;
    m_Auth_default_loginpageIsSet = true;
}
bool ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::authDefaultLoginpageIsSet() const
{
    return m_Auth_default_loginpageIsSet;
}
void ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::unsetAuth_default_loginpage()
{
    m_Auth_default_loginpageIsSet = false;
}
ConfigNodePropertyArray ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::getAuthCredForm() const
{
    return m_Auth_cred_form;
}
void ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::setAuthCredForm(ConfigNodePropertyArray const& value)
{
    m_Auth_cred_form = value;
    m_Auth_cred_formIsSet = true;
}
bool ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::authCredFormIsSet() const
{
    return m_Auth_cred_formIsSet;
}
void ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::unsetAuth_cred_form()
{
    m_Auth_cred_formIsSet = false;
}
ConfigNodePropertyArray ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::getAuthCredUtf8() const
{
    return m_Auth_cred_utf8;
}
void ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::setAuthCredUtf8(ConfigNodePropertyArray const& value)
{
    m_Auth_cred_utf8 = value;
    m_Auth_cred_utf8IsSet = true;
}
bool ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::authCredUtf8IsSet() const
{
    return m_Auth_cred_utf8IsSet;
}
void ComDayCqWcmFoundationImplHTTPAuthHandlerProperties::unsetAuth_cred_utf8()
{
    m_Auth_cred_utf8IsSet = false;
}

}
}
}
}

