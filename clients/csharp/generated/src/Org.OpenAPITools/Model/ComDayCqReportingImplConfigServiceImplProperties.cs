/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqReportingImplConfigServiceImplProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqReportingImplConfigServiceImplProperties :  IEquatable<ComDayCqReportingImplConfigServiceImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqReportingImplConfigServiceImplProperties" /> class.
        /// </summary>
        /// <param name="repconfTimezone">repconfTimezone.</param>
        /// <param name="repconfLocale">repconfLocale.</param>
        /// <param name="repconfSnapshots">repconfSnapshots.</param>
        /// <param name="repconfRepdir">repconfRepdir.</param>
        /// <param name="repconfHourofday">repconfHourofday.</param>
        /// <param name="repconfMinofhour">repconfMinofhour.</param>
        /// <param name="repconfMaxrows">repconfMaxrows.</param>
        /// <param name="repconfFakedata">repconfFakedata.</param>
        /// <param name="repconfSnapshotuser">repconfSnapshotuser.</param>
        /// <param name="repconfEnforcesnapshotuser">repconfEnforcesnapshotuser.</param>
        public ComDayCqReportingImplConfigServiceImplProperties(ConfigNodePropertyString repconfTimezone = default(ConfigNodePropertyString), ConfigNodePropertyString repconfLocale = default(ConfigNodePropertyString), ConfigNodePropertyString repconfSnapshots = default(ConfigNodePropertyString), ConfigNodePropertyString repconfRepdir = default(ConfigNodePropertyString), ConfigNodePropertyInteger repconfHourofday = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger repconfMinofhour = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger repconfMaxrows = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean repconfFakedata = default(ConfigNodePropertyBoolean), ConfigNodePropertyString repconfSnapshotuser = default(ConfigNodePropertyString), ConfigNodePropertyBoolean repconfEnforcesnapshotuser = default(ConfigNodePropertyBoolean))
        {
            this.RepconfTimezone = repconfTimezone;
            this.RepconfLocale = repconfLocale;
            this.RepconfSnapshots = repconfSnapshots;
            this.RepconfRepdir = repconfRepdir;
            this.RepconfHourofday = repconfHourofday;
            this.RepconfMinofhour = repconfMinofhour;
            this.RepconfMaxrows = repconfMaxrows;
            this.RepconfFakedata = repconfFakedata;
            this.RepconfSnapshotuser = repconfSnapshotuser;
            this.RepconfEnforcesnapshotuser = repconfEnforcesnapshotuser;
        }
        
        /// <summary>
        /// Gets or Sets RepconfTimezone
        /// </summary>
        [DataMember(Name="repconf.timezone", EmitDefaultValue=false)]
        public ConfigNodePropertyString RepconfTimezone { get; set; }

        /// <summary>
        /// Gets or Sets RepconfLocale
        /// </summary>
        [DataMember(Name="repconf.locale", EmitDefaultValue=false)]
        public ConfigNodePropertyString RepconfLocale { get; set; }

        /// <summary>
        /// Gets or Sets RepconfSnapshots
        /// </summary>
        [DataMember(Name="repconf.snapshots", EmitDefaultValue=false)]
        public ConfigNodePropertyString RepconfSnapshots { get; set; }

        /// <summary>
        /// Gets or Sets RepconfRepdir
        /// </summary>
        [DataMember(Name="repconf.repdir", EmitDefaultValue=false)]
        public ConfigNodePropertyString RepconfRepdir { get; set; }

        /// <summary>
        /// Gets or Sets RepconfHourofday
        /// </summary>
        [DataMember(Name="repconf.hourofday", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger RepconfHourofday { get; set; }

        /// <summary>
        /// Gets or Sets RepconfMinofhour
        /// </summary>
        [DataMember(Name="repconf.minofhour", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger RepconfMinofhour { get; set; }

        /// <summary>
        /// Gets or Sets RepconfMaxrows
        /// </summary>
        [DataMember(Name="repconf.maxrows", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger RepconfMaxrows { get; set; }

        /// <summary>
        /// Gets or Sets RepconfFakedata
        /// </summary>
        [DataMember(Name="repconf.fakedata", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean RepconfFakedata { get; set; }

        /// <summary>
        /// Gets or Sets RepconfSnapshotuser
        /// </summary>
        [DataMember(Name="repconf.snapshotuser", EmitDefaultValue=false)]
        public ConfigNodePropertyString RepconfSnapshotuser { get; set; }

        /// <summary>
        /// Gets or Sets RepconfEnforcesnapshotuser
        /// </summary>
        [DataMember(Name="repconf.enforcesnapshotuser", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean RepconfEnforcesnapshotuser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqReportingImplConfigServiceImplProperties {\n");
            sb.Append("  RepconfTimezone: ").Append(RepconfTimezone).Append("\n");
            sb.Append("  RepconfLocale: ").Append(RepconfLocale).Append("\n");
            sb.Append("  RepconfSnapshots: ").Append(RepconfSnapshots).Append("\n");
            sb.Append("  RepconfRepdir: ").Append(RepconfRepdir).Append("\n");
            sb.Append("  RepconfHourofday: ").Append(RepconfHourofday).Append("\n");
            sb.Append("  RepconfMinofhour: ").Append(RepconfMinofhour).Append("\n");
            sb.Append("  RepconfMaxrows: ").Append(RepconfMaxrows).Append("\n");
            sb.Append("  RepconfFakedata: ").Append(RepconfFakedata).Append("\n");
            sb.Append("  RepconfSnapshotuser: ").Append(RepconfSnapshotuser).Append("\n");
            sb.Append("  RepconfEnforcesnapshotuser: ").Append(RepconfEnforcesnapshotuser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqReportingImplConfigServiceImplProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqReportingImplConfigServiceImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqReportingImplConfigServiceImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqReportingImplConfigServiceImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RepconfTimezone == input.RepconfTimezone ||
                    (this.RepconfTimezone != null &&
                    this.RepconfTimezone.Equals(input.RepconfTimezone))
                ) && 
                (
                    this.RepconfLocale == input.RepconfLocale ||
                    (this.RepconfLocale != null &&
                    this.RepconfLocale.Equals(input.RepconfLocale))
                ) && 
                (
                    this.RepconfSnapshots == input.RepconfSnapshots ||
                    (this.RepconfSnapshots != null &&
                    this.RepconfSnapshots.Equals(input.RepconfSnapshots))
                ) && 
                (
                    this.RepconfRepdir == input.RepconfRepdir ||
                    (this.RepconfRepdir != null &&
                    this.RepconfRepdir.Equals(input.RepconfRepdir))
                ) && 
                (
                    this.RepconfHourofday == input.RepconfHourofday ||
                    (this.RepconfHourofday != null &&
                    this.RepconfHourofday.Equals(input.RepconfHourofday))
                ) && 
                (
                    this.RepconfMinofhour == input.RepconfMinofhour ||
                    (this.RepconfMinofhour != null &&
                    this.RepconfMinofhour.Equals(input.RepconfMinofhour))
                ) && 
                (
                    this.RepconfMaxrows == input.RepconfMaxrows ||
                    (this.RepconfMaxrows != null &&
                    this.RepconfMaxrows.Equals(input.RepconfMaxrows))
                ) && 
                (
                    this.RepconfFakedata == input.RepconfFakedata ||
                    (this.RepconfFakedata != null &&
                    this.RepconfFakedata.Equals(input.RepconfFakedata))
                ) && 
                (
                    this.RepconfSnapshotuser == input.RepconfSnapshotuser ||
                    (this.RepconfSnapshotuser != null &&
                    this.RepconfSnapshotuser.Equals(input.RepconfSnapshotuser))
                ) && 
                (
                    this.RepconfEnforcesnapshotuser == input.RepconfEnforcesnapshotuser ||
                    (this.RepconfEnforcesnapshotuser != null &&
                    this.RepconfEnforcesnapshotuser.Equals(input.RepconfEnforcesnapshotuser))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RepconfTimezone != null)
                    hashCode = hashCode * 59 + this.RepconfTimezone.GetHashCode();
                if (this.RepconfLocale != null)
                    hashCode = hashCode * 59 + this.RepconfLocale.GetHashCode();
                if (this.RepconfSnapshots != null)
                    hashCode = hashCode * 59 + this.RepconfSnapshots.GetHashCode();
                if (this.RepconfRepdir != null)
                    hashCode = hashCode * 59 + this.RepconfRepdir.GetHashCode();
                if (this.RepconfHourofday != null)
                    hashCode = hashCode * 59 + this.RepconfHourofday.GetHashCode();
                if (this.RepconfMinofhour != null)
                    hashCode = hashCode * 59 + this.RepconfMinofhour.GetHashCode();
                if (this.RepconfMaxrows != null)
                    hashCode = hashCode * 59 + this.RepconfMaxrows.GetHashCode();
                if (this.RepconfFakedata != null)
                    hashCode = hashCode * 59 + this.RepconfFakedata.GetHashCode();
                if (this.RepconfSnapshotuser != null)
                    hashCode = hashCode * 59 + this.RepconfSnapshotuser.GetHashCode();
                if (this.RepconfEnforcesnapshotuser != null)
                    hashCode = hashCode * 59 + this.RepconfEnforcesnapshotuser.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
