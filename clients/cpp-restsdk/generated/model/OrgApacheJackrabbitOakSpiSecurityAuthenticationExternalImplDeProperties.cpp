/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties()
{
    m_Handler_nameIsSet = false;
    m_User_expirationTimeIsSet = false;
    m_User_autoMembershipIsSet = false;
    m_User_propertyMappingIsSet = false;
    m_User_pathPrefixIsSet = false;
    m_User_membershipExpTimeIsSet = false;
    m_User_membershipNestingDepthIsSet = false;
    m_User_dynamicMembershipIsSet = false;
    m_User_disableMissingIsSet = false;
    m_Group_expirationTimeIsSet = false;
    m_Group_autoMembershipIsSet = false;
    m_Group_propertyMappingIsSet = false;
    m_Group_pathPrefixIsSet = false;
    m_EnableRFC7613UsercaseMappedProfileIsSet = false;
}

OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::~OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties()
{
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Handler_nameIsSet)
    {
        val[utility::conversions::to_string_t("handler.name")] = ModelBase::toJson(m_Handler_name);
    }
    if(m_User_expirationTimeIsSet)
    {
        val[utility::conversions::to_string_t("user.expirationTime")] = ModelBase::toJson(m_User_expirationTime);
    }
    if(m_User_autoMembershipIsSet)
    {
        val[utility::conversions::to_string_t("user.autoMembership")] = ModelBase::toJson(m_User_autoMembership);
    }
    if(m_User_propertyMappingIsSet)
    {
        val[utility::conversions::to_string_t("user.propertyMapping")] = ModelBase::toJson(m_User_propertyMapping);
    }
    if(m_User_pathPrefixIsSet)
    {
        val[utility::conversions::to_string_t("user.pathPrefix")] = ModelBase::toJson(m_User_pathPrefix);
    }
    if(m_User_membershipExpTimeIsSet)
    {
        val[utility::conversions::to_string_t("user.membershipExpTime")] = ModelBase::toJson(m_User_membershipExpTime);
    }
    if(m_User_membershipNestingDepthIsSet)
    {
        val[utility::conversions::to_string_t("user.membershipNestingDepth")] = ModelBase::toJson(m_User_membershipNestingDepth);
    }
    if(m_User_dynamicMembershipIsSet)
    {
        val[utility::conversions::to_string_t("user.dynamicMembership")] = ModelBase::toJson(m_User_dynamicMembership);
    }
    if(m_User_disableMissingIsSet)
    {
        val[utility::conversions::to_string_t("user.disableMissing")] = ModelBase::toJson(m_User_disableMissing);
    }
    if(m_Group_expirationTimeIsSet)
    {
        val[utility::conversions::to_string_t("group.expirationTime")] = ModelBase::toJson(m_Group_expirationTime);
    }
    if(m_Group_autoMembershipIsSet)
    {
        val[utility::conversions::to_string_t("group.autoMembership")] = ModelBase::toJson(m_Group_autoMembership);
    }
    if(m_Group_propertyMappingIsSet)
    {
        val[utility::conversions::to_string_t("group.propertyMapping")] = ModelBase::toJson(m_Group_propertyMapping);
    }
    if(m_Group_pathPrefixIsSet)
    {
        val[utility::conversions::to_string_t("group.pathPrefix")] = ModelBase::toJson(m_Group_pathPrefix);
    }
    if(m_EnableRFC7613UsercaseMappedProfileIsSet)
    {
        val[utility::conversions::to_string_t("enableRFC7613UsercaseMappedProfile")] = ModelBase::toJson(m_EnableRFC7613UsercaseMappedProfile);
    }

    return val;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("handler.name")))
    {
        if(!val[utility::conversions::to_string_t("handler.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("handler.name")]);
            setHandlerName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user.expirationTime")))
    {
        if(!val[utility::conversions::to_string_t("user.expirationTime")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("user.expirationTime")]);
            setUserExpirationTime( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user.autoMembership")))
    {
        if(!val[utility::conversions::to_string_t("user.autoMembership")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("user.autoMembership")]);
            setUserAutoMembership( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user.propertyMapping")))
    {
        if(!val[utility::conversions::to_string_t("user.propertyMapping")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("user.propertyMapping")]);
            setUserPropertyMapping( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user.pathPrefix")))
    {
        if(!val[utility::conversions::to_string_t("user.pathPrefix")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("user.pathPrefix")]);
            setUserPathPrefix( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user.membershipExpTime")))
    {
        if(!val[utility::conversions::to_string_t("user.membershipExpTime")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("user.membershipExpTime")]);
            setUserMembershipExpTime( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user.membershipNestingDepth")))
    {
        if(!val[utility::conversions::to_string_t("user.membershipNestingDepth")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("user.membershipNestingDepth")]);
            setUserMembershipNestingDepth( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user.dynamicMembership")))
    {
        if(!val[utility::conversions::to_string_t("user.dynamicMembership")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("user.dynamicMembership")]);
            setUserDynamicMembership( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user.disableMissing")))
    {
        if(!val[utility::conversions::to_string_t("user.disableMissing")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("user.disableMissing")]);
            setUserDisableMissing( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("group.expirationTime")))
    {
        if(!val[utility::conversions::to_string_t("group.expirationTime")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("group.expirationTime")]);
            setGroupExpirationTime( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("group.autoMembership")))
    {
        if(!val[utility::conversions::to_string_t("group.autoMembership")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("group.autoMembership")]);
            setGroupAutoMembership( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("group.propertyMapping")))
    {
        if(!val[utility::conversions::to_string_t("group.propertyMapping")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("group.propertyMapping")]);
            setGroupPropertyMapping( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("group.pathPrefix")))
    {
        if(!val[utility::conversions::to_string_t("group.pathPrefix")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("group.pathPrefix")]);
            setGroupPathPrefix( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enableRFC7613UsercaseMappedProfile")))
    {
        if(!val[utility::conversions::to_string_t("enableRFC7613UsercaseMappedProfile")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enableRFC7613UsercaseMappedProfile")]);
            setEnableRFC7613UsercaseMappedProfile( newItem );
        }
    }
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Handler_nameIsSet)
    {
        if (m_Handler_name.get())
        {
            m_Handler_name->toMultipart(multipart, utility::conversions::to_string_t("handler.name."));
        }
    }
    if(m_User_expirationTimeIsSet)
    {
        if (m_User_expirationTime.get())
        {
            m_User_expirationTime->toMultipart(multipart, utility::conversions::to_string_t("user.expirationTime."));
        }
    }
    if(m_User_autoMembershipIsSet)
    {
        if (m_User_autoMembership.get())
        {
            m_User_autoMembership->toMultipart(multipart, utility::conversions::to_string_t("user.autoMembership."));
        }
    }
    if(m_User_propertyMappingIsSet)
    {
        if (m_User_propertyMapping.get())
        {
            m_User_propertyMapping->toMultipart(multipart, utility::conversions::to_string_t("user.propertyMapping."));
        }
    }
    if(m_User_pathPrefixIsSet)
    {
        if (m_User_pathPrefix.get())
        {
            m_User_pathPrefix->toMultipart(multipart, utility::conversions::to_string_t("user.pathPrefix."));
        }
    }
    if(m_User_membershipExpTimeIsSet)
    {
        if (m_User_membershipExpTime.get())
        {
            m_User_membershipExpTime->toMultipart(multipart, utility::conversions::to_string_t("user.membershipExpTime."));
        }
    }
    if(m_User_membershipNestingDepthIsSet)
    {
        if (m_User_membershipNestingDepth.get())
        {
            m_User_membershipNestingDepth->toMultipart(multipart, utility::conversions::to_string_t("user.membershipNestingDepth."));
        }
    }
    if(m_User_dynamicMembershipIsSet)
    {
        if (m_User_dynamicMembership.get())
        {
            m_User_dynamicMembership->toMultipart(multipart, utility::conversions::to_string_t("user.dynamicMembership."));
        }
    }
    if(m_User_disableMissingIsSet)
    {
        if (m_User_disableMissing.get())
        {
            m_User_disableMissing->toMultipart(multipart, utility::conversions::to_string_t("user.disableMissing."));
        }
    }
    if(m_Group_expirationTimeIsSet)
    {
        if (m_Group_expirationTime.get())
        {
            m_Group_expirationTime->toMultipart(multipart, utility::conversions::to_string_t("group.expirationTime."));
        }
    }
    if(m_Group_autoMembershipIsSet)
    {
        if (m_Group_autoMembership.get())
        {
            m_Group_autoMembership->toMultipart(multipart, utility::conversions::to_string_t("group.autoMembership."));
        }
    }
    if(m_Group_propertyMappingIsSet)
    {
        if (m_Group_propertyMapping.get())
        {
            m_Group_propertyMapping->toMultipart(multipart, utility::conversions::to_string_t("group.propertyMapping."));
        }
    }
    if(m_Group_pathPrefixIsSet)
    {
        if (m_Group_pathPrefix.get())
        {
            m_Group_pathPrefix->toMultipart(multipart, utility::conversions::to_string_t("group.pathPrefix."));
        }
    }
    if(m_EnableRFC7613UsercaseMappedProfileIsSet)
    {
        if (m_EnableRFC7613UsercaseMappedProfile.get())
        {
            m_EnableRFC7613UsercaseMappedProfile->toMultipart(multipart, utility::conversions::to_string_t("enableRFC7613UsercaseMappedProfile."));
        }
    }
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("handler.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("handler.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("handler.name."));
            setHandlerName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user.expirationTime")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("user.expirationTime")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("user.expirationTime."));
            setUserExpirationTime( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user.autoMembership")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("user.autoMembership")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("user.autoMembership."));
            setUserAutoMembership( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user.propertyMapping")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("user.propertyMapping")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("user.propertyMapping."));
            setUserPropertyMapping( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user.pathPrefix")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("user.pathPrefix")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("user.pathPrefix."));
            setUserPathPrefix( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user.membershipExpTime")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("user.membershipExpTime")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("user.membershipExpTime."));
            setUserMembershipExpTime( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user.membershipNestingDepth")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("user.membershipNestingDepth")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("user.membershipNestingDepth."));
            setUserMembershipNestingDepth( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user.dynamicMembership")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("user.dynamicMembership")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("user.dynamicMembership."));
            setUserDynamicMembership( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user.disableMissing")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("user.disableMissing")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("user.disableMissing."));
            setUserDisableMissing( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("group.expirationTime")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("group.expirationTime")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("group.expirationTime."));
            setGroupExpirationTime( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("group.autoMembership")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("group.autoMembership")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("group.autoMembership."));
            setGroupAutoMembership( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("group.propertyMapping")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("group.propertyMapping")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("group.propertyMapping."));
            setGroupPropertyMapping( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("group.pathPrefix")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("group.pathPrefix")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("group.pathPrefix."));
            setGroupPathPrefix( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enableRFC7613UsercaseMappedProfile")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enableRFC7613UsercaseMappedProfile")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enableRFC7613UsercaseMappedProfile."));
            setEnableRFC7613UsercaseMappedProfile( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::getHandlerName() const
{
    return m_Handler_name;
}


void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::setHandlerName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Handler_name = value;
    m_Handler_nameIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::handlerNameIsSet() const
{
    return m_Handler_nameIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::unsetHandler_name()
{
    m_Handler_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::getUserExpirationTime() const
{
    return m_User_expirationTime;
}


void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::setUserExpirationTime(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_User_expirationTime = value;
    m_User_expirationTimeIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::userExpirationTimeIsSet() const
{
    return m_User_expirationTimeIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::unsetUser_expirationTime()
{
    m_User_expirationTimeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::getUserAutoMembership() const
{
    return m_User_autoMembership;
}


void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::setUserAutoMembership(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_User_autoMembership = value;
    m_User_autoMembershipIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::userAutoMembershipIsSet() const
{
    return m_User_autoMembershipIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::unsetUser_autoMembership()
{
    m_User_autoMembershipIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::getUserPropertyMapping() const
{
    return m_User_propertyMapping;
}


void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::setUserPropertyMapping(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_User_propertyMapping = value;
    m_User_propertyMappingIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::userPropertyMappingIsSet() const
{
    return m_User_propertyMappingIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::unsetUser_propertyMapping()
{
    m_User_propertyMappingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::getUserPathPrefix() const
{
    return m_User_pathPrefix;
}


void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::setUserPathPrefix(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_User_pathPrefix = value;
    m_User_pathPrefixIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::userPathPrefixIsSet() const
{
    return m_User_pathPrefixIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::unsetUser_pathPrefix()
{
    m_User_pathPrefixIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::getUserMembershipExpTime() const
{
    return m_User_membershipExpTime;
}


void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::setUserMembershipExpTime(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_User_membershipExpTime = value;
    m_User_membershipExpTimeIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::userMembershipExpTimeIsSet() const
{
    return m_User_membershipExpTimeIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::unsetUser_membershipExpTime()
{
    m_User_membershipExpTimeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::getUserMembershipNestingDepth() const
{
    return m_User_membershipNestingDepth;
}


void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::setUserMembershipNestingDepth(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_User_membershipNestingDepth = value;
    m_User_membershipNestingDepthIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::userMembershipNestingDepthIsSet() const
{
    return m_User_membershipNestingDepthIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::unsetUser_membershipNestingDepth()
{
    m_User_membershipNestingDepthIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::getUserDynamicMembership() const
{
    return m_User_dynamicMembership;
}


void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::setUserDynamicMembership(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_User_dynamicMembership = value;
    m_User_dynamicMembershipIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::userDynamicMembershipIsSet() const
{
    return m_User_dynamicMembershipIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::unsetUser_dynamicMembership()
{
    m_User_dynamicMembershipIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::getUserDisableMissing() const
{
    return m_User_disableMissing;
}


void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::setUserDisableMissing(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_User_disableMissing = value;
    m_User_disableMissingIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::userDisableMissingIsSet() const
{
    return m_User_disableMissingIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::unsetUser_disableMissing()
{
    m_User_disableMissingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::getGroupExpirationTime() const
{
    return m_Group_expirationTime;
}


void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::setGroupExpirationTime(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Group_expirationTime = value;
    m_Group_expirationTimeIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::groupExpirationTimeIsSet() const
{
    return m_Group_expirationTimeIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::unsetGroup_expirationTime()
{
    m_Group_expirationTimeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::getGroupAutoMembership() const
{
    return m_Group_autoMembership;
}


void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::setGroupAutoMembership(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Group_autoMembership = value;
    m_Group_autoMembershipIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::groupAutoMembershipIsSet() const
{
    return m_Group_autoMembershipIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::unsetGroup_autoMembership()
{
    m_Group_autoMembershipIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::getGroupPropertyMapping() const
{
    return m_Group_propertyMapping;
}


void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::setGroupPropertyMapping(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Group_propertyMapping = value;
    m_Group_propertyMappingIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::groupPropertyMappingIsSet() const
{
    return m_Group_propertyMappingIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::unsetGroup_propertyMapping()
{
    m_Group_propertyMappingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::getGroupPathPrefix() const
{
    return m_Group_pathPrefix;
}


void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::setGroupPathPrefix(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Group_pathPrefix = value;
    m_Group_pathPrefixIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::groupPathPrefixIsSet() const
{
    return m_Group_pathPrefixIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::unsetGroup_pathPrefix()
{
    m_Group_pathPrefixIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::getEnableRFC7613UsercaseMappedProfile() const
{
    return m_EnableRFC7613UsercaseMappedProfile;
}


void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::setEnableRFC7613UsercaseMappedProfile(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_EnableRFC7613UsercaseMappedProfile = value;
    m_EnableRFC7613UsercaseMappedProfileIsSet = true;
}
bool OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::enableRFC7613UsercaseMappedProfileIsSet() const
{
    return m_EnableRFC7613UsercaseMappedProfileIsSet;
}

void OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties::unsetEnableRFC7613UsercaseMappedProfile()
{
    m_EnableRFC7613UsercaseMappedProfileIsSet = false;
}

}
}
}
}

