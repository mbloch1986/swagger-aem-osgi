/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteWorkflowCoreJobJobHandlerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteWorkflowCoreJobJobHandlerProperties::ComAdobeGraniteWorkflowCoreJobJobHandlerProperties()
{
    m_Job_topicsIsSet = false;
    m_Allow_self_process_terminationIsSet = false;
}

ComAdobeGraniteWorkflowCoreJobJobHandlerProperties::~ComAdobeGraniteWorkflowCoreJobJobHandlerProperties()
{
}

void ComAdobeGraniteWorkflowCoreJobJobHandlerProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteWorkflowCoreJobJobHandlerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Job_topicsIsSet)
    {
        val[utility::conversions::to_string_t("job.topics")] = ModelBase::toJson(m_Job_topics);
    }
    if(m_Allow_self_process_terminationIsSet)
    {
        val[utility::conversions::to_string_t("allow.self.process.termination")] = ModelBase::toJson(m_Allow_self_process_termination);
    }

    return val;
}

void ComAdobeGraniteWorkflowCoreJobJobHandlerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("job.topics")))
    {
        if(!val[utility::conversions::to_string_t("job.topics")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("job.topics")]);
            setJobTopics( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("allow.self.process.termination")))
    {
        if(!val[utility::conversions::to_string_t("allow.self.process.termination")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("allow.self.process.termination")]);
            setAllowSelfProcessTermination( newItem );
        }
    }
}

void ComAdobeGraniteWorkflowCoreJobJobHandlerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Job_topicsIsSet)
    {
        if (m_Job_topics.get())
        {
            m_Job_topics->toMultipart(multipart, utility::conversions::to_string_t("job.topics."));
        }
    }
    if(m_Allow_self_process_terminationIsSet)
    {
        if (m_Allow_self_process_termination.get())
        {
            m_Allow_self_process_termination->toMultipart(multipart, utility::conversions::to_string_t("allow.self.process.termination."));
        }
    }
}

void ComAdobeGraniteWorkflowCoreJobJobHandlerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("job.topics")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("job.topics")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("job.topics."));
            setJobTopics( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("allow.self.process.termination")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("allow.self.process.termination")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("allow.self.process.termination."));
            setAllowSelfProcessTermination( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteWorkflowCoreJobJobHandlerProperties::getJobTopics() const
{
    return m_Job_topics;
}


void ComAdobeGraniteWorkflowCoreJobJobHandlerProperties::setJobTopics(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Job_topics = value;
    m_Job_topicsIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreJobJobHandlerProperties::jobTopicsIsSet() const
{
    return m_Job_topicsIsSet;
}

void ComAdobeGraniteWorkflowCoreJobJobHandlerProperties::unsetJob_topics()
{
    m_Job_topicsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteWorkflowCoreJobJobHandlerProperties::getAllowSelfProcessTermination() const
{
    return m_Allow_self_process_termination;
}


void ComAdobeGraniteWorkflowCoreJobJobHandlerProperties::setAllowSelfProcessTermination(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Allow_self_process_termination = value;
    m_Allow_self_process_terminationIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreJobJobHandlerProperties::allowSelfProcessTerminationIsSet() const
{
    return m_Allow_self_process_terminationIsSet;
}

void ComAdobeGraniteWorkflowCoreJobJobHandlerProperties::unsetAllow_self_process_termination()
{
    m_Allow_self_process_terminationIsSet = false;
}

}
}
}
}

