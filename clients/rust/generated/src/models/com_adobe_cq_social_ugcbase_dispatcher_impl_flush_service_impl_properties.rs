/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties {
  #[serde(rename = "threadPoolSize")]
  thread_pool_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "delayTime")]
  delay_time: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "workerSleepTime")]
  worker_sleep_time: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties {
  pub fn new() -> ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties {
    ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties {
      thread_pool_size: None,
      delay_time: None,
      worker_sleep_time: None
    }
  }

  pub fn set_thread_pool_size(&mut self, thread_pool_size: ::models::ConfigNodePropertyInteger) {
    self.thread_pool_size = Some(thread_pool_size);
  }

  pub fn with_thread_pool_size(mut self, thread_pool_size: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties {
    self.thread_pool_size = Some(thread_pool_size);
    self
  }

  pub fn thread_pool_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.thread_pool_size.as_ref()
  }

  pub fn reset_thread_pool_size(&mut self) {
    self.thread_pool_size = None;
  }

  pub fn set_delay_time(&mut self, delay_time: ::models::ConfigNodePropertyInteger) {
    self.delay_time = Some(delay_time);
  }

  pub fn with_delay_time(mut self, delay_time: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties {
    self.delay_time = Some(delay_time);
    self
  }

  pub fn delay_time(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.delay_time.as_ref()
  }

  pub fn reset_delay_time(&mut self) {
    self.delay_time = None;
  }

  pub fn set_worker_sleep_time(&mut self, worker_sleep_time: ::models::ConfigNodePropertyInteger) {
    self.worker_sleep_time = Some(worker_sleep_time);
  }

  pub fn with_worker_sleep_time(mut self, worker_sleep_time: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties {
    self.worker_sleep_time = Some(worker_sleep_time);
    self
  }

  pub fn worker_sleep_time(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.worker_sleep_time.as_ref()
  }

  pub fn reset_worker_sleep_time(&mut self) {
    self.worker_sleep_time = None;
  }

}



