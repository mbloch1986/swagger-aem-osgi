/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties() {
    init();
}

OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::~OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::init() {
    resource_resolver_searchpath = new OAIConfigNodePropertyArray();
    m_resource_resolver_searchpath_isSet = false;
    resource_resolver_manglenamespaces = new OAIConfigNodePropertyBoolean();
    m_resource_resolver_manglenamespaces_isSet = false;
    resource_resolver_allow_direct = new OAIConfigNodePropertyBoolean();
    m_resource_resolver_allow_direct_isSet = false;
    resource_resolver_required_providers = new OAIConfigNodePropertyArray();
    m_resource_resolver_required_providers_isSet = false;
    resource_resolver_required_providernames = new OAIConfigNodePropertyArray();
    m_resource_resolver_required_providernames_isSet = false;
    resource_resolver_virtual = new OAIConfigNodePropertyArray();
    m_resource_resolver_virtual_isSet = false;
    resource_resolver_mapping = new OAIConfigNodePropertyArray();
    m_resource_resolver_mapping_isSet = false;
    resource_resolver_map_location = new OAIConfigNodePropertyString();
    m_resource_resolver_map_location_isSet = false;
    resource_resolver_map_observation = new OAIConfigNodePropertyArray();
    m_resource_resolver_map_observation_isSet = false;
    resource_resolver_default_vanity_redirect_status = new OAIConfigNodePropertyInteger();
    m_resource_resolver_default_vanity_redirect_status_isSet = false;
    resource_resolver_enable_vanitypath = new OAIConfigNodePropertyBoolean();
    m_resource_resolver_enable_vanitypath_isSet = false;
    resource_resolver_vanitypath_max_entries = new OAIConfigNodePropertyInteger();
    m_resource_resolver_vanitypath_max_entries_isSet = false;
    resource_resolver_vanitypath_max_entries_startup = new OAIConfigNodePropertyBoolean();
    m_resource_resolver_vanitypath_max_entries_startup_isSet = false;
    resource_resolver_vanitypath_bloomfilter_max_bytes = new OAIConfigNodePropertyInteger();
    m_resource_resolver_vanitypath_bloomfilter_max_bytes_isSet = false;
    resource_resolver_optimize_alias_resolution = new OAIConfigNodePropertyBoolean();
    m_resource_resolver_optimize_alias_resolution_isSet = false;
    resource_resolver_vanitypath_whitelist = new OAIConfigNodePropertyArray();
    m_resource_resolver_vanitypath_whitelist_isSet = false;
    resource_resolver_vanitypath_blacklist = new OAIConfigNodePropertyArray();
    m_resource_resolver_vanitypath_blacklist_isSet = false;
    resource_resolver_vanity_precedence = new OAIConfigNodePropertyBoolean();
    m_resource_resolver_vanity_precedence_isSet = false;
    resource_resolver_providerhandling_paranoid = new OAIConfigNodePropertyBoolean();
    m_resource_resolver_providerhandling_paranoid_isSet = false;
    resource_resolver_log_closing = new OAIConfigNodePropertyBoolean();
    m_resource_resolver_log_closing_isSet = false;
    resource_resolver_log_unclosed = new OAIConfigNodePropertyBoolean();
    m_resource_resolver_log_unclosed_isSet = false;
}

void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::cleanup() {
    if(resource_resolver_searchpath != nullptr) { 
        delete resource_resolver_searchpath;
    }
    if(resource_resolver_manglenamespaces != nullptr) { 
        delete resource_resolver_manglenamespaces;
    }
    if(resource_resolver_allow_direct != nullptr) { 
        delete resource_resolver_allow_direct;
    }
    if(resource_resolver_required_providers != nullptr) { 
        delete resource_resolver_required_providers;
    }
    if(resource_resolver_required_providernames != nullptr) { 
        delete resource_resolver_required_providernames;
    }
    if(resource_resolver_virtual != nullptr) { 
        delete resource_resolver_virtual;
    }
    if(resource_resolver_mapping != nullptr) { 
        delete resource_resolver_mapping;
    }
    if(resource_resolver_map_location != nullptr) { 
        delete resource_resolver_map_location;
    }
    if(resource_resolver_map_observation != nullptr) { 
        delete resource_resolver_map_observation;
    }
    if(resource_resolver_default_vanity_redirect_status != nullptr) { 
        delete resource_resolver_default_vanity_redirect_status;
    }
    if(resource_resolver_enable_vanitypath != nullptr) { 
        delete resource_resolver_enable_vanitypath;
    }
    if(resource_resolver_vanitypath_max_entries != nullptr) { 
        delete resource_resolver_vanitypath_max_entries;
    }
    if(resource_resolver_vanitypath_max_entries_startup != nullptr) { 
        delete resource_resolver_vanitypath_max_entries_startup;
    }
    if(resource_resolver_vanitypath_bloomfilter_max_bytes != nullptr) { 
        delete resource_resolver_vanitypath_bloomfilter_max_bytes;
    }
    if(resource_resolver_optimize_alias_resolution != nullptr) { 
        delete resource_resolver_optimize_alias_resolution;
    }
    if(resource_resolver_vanitypath_whitelist != nullptr) { 
        delete resource_resolver_vanitypath_whitelist;
    }
    if(resource_resolver_vanitypath_blacklist != nullptr) { 
        delete resource_resolver_vanitypath_blacklist;
    }
    if(resource_resolver_vanity_precedence != nullptr) { 
        delete resource_resolver_vanity_precedence;
    }
    if(resource_resolver_providerhandling_paranoid != nullptr) { 
        delete resource_resolver_providerhandling_paranoid;
    }
    if(resource_resolver_log_closing != nullptr) { 
        delete resource_resolver_log_closing;
    }
    if(resource_resolver_log_unclosed != nullptr) { 
        delete resource_resolver_log_unclosed;
    }
}

OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&resource_resolver_searchpath, pJson["resource.resolver.searchpath"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&resource_resolver_manglenamespaces, pJson["resource.resolver.manglenamespaces"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&resource_resolver_allow_direct, pJson["resource.resolver.allowDirect"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&resource_resolver_required_providers, pJson["resource.resolver.required.providers"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&resource_resolver_required_providernames, pJson["resource.resolver.required.providernames"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&resource_resolver_virtual, pJson["resource.resolver.virtual"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&resource_resolver_mapping, pJson["resource.resolver.mapping"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&resource_resolver_map_location, pJson["resource.resolver.map.location"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&resource_resolver_map_observation, pJson["resource.resolver.map.observation"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&resource_resolver_default_vanity_redirect_status, pJson["resource.resolver.default.vanity.redirect.status"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&resource_resolver_enable_vanitypath, pJson["resource.resolver.enable.vanitypath"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&resource_resolver_vanitypath_max_entries, pJson["resource.resolver.vanitypath.maxEntries"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&resource_resolver_vanitypath_max_entries_startup, pJson["resource.resolver.vanitypath.maxEntries.startup"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&resource_resolver_vanitypath_bloomfilter_max_bytes, pJson["resource.resolver.vanitypath.bloomfilter.maxBytes"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&resource_resolver_optimize_alias_resolution, pJson["resource.resolver.optimize.alias.resolution"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&resource_resolver_vanitypath_whitelist, pJson["resource.resolver.vanitypath.whitelist"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&resource_resolver_vanitypath_blacklist, pJson["resource.resolver.vanitypath.blacklist"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&resource_resolver_vanity_precedence, pJson["resource.resolver.vanity.precedence"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&resource_resolver_providerhandling_paranoid, pJson["resource.resolver.providerhandling.paranoid"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&resource_resolver_log_closing, pJson["resource.resolver.log.closing"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&resource_resolver_log_unclosed, pJson["resource.resolver.log.unclosed"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::asJsonObject() {
    QJsonObject obj;
    if((resource_resolver_searchpath != nullptr) && (resource_resolver_searchpath->isSet())){
        toJsonValue(QString("resource.resolver.searchpath"), resource_resolver_searchpath, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((resource_resolver_manglenamespaces != nullptr) && (resource_resolver_manglenamespaces->isSet())){
        toJsonValue(QString("resource.resolver.manglenamespaces"), resource_resolver_manglenamespaces, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((resource_resolver_allow_direct != nullptr) && (resource_resolver_allow_direct->isSet())){
        toJsonValue(QString("resource.resolver.allowDirect"), resource_resolver_allow_direct, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((resource_resolver_required_providers != nullptr) && (resource_resolver_required_providers->isSet())){
        toJsonValue(QString("resource.resolver.required.providers"), resource_resolver_required_providers, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((resource_resolver_required_providernames != nullptr) && (resource_resolver_required_providernames->isSet())){
        toJsonValue(QString("resource.resolver.required.providernames"), resource_resolver_required_providernames, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((resource_resolver_virtual != nullptr) && (resource_resolver_virtual->isSet())){
        toJsonValue(QString("resource.resolver.virtual"), resource_resolver_virtual, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((resource_resolver_mapping != nullptr) && (resource_resolver_mapping->isSet())){
        toJsonValue(QString("resource.resolver.mapping"), resource_resolver_mapping, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((resource_resolver_map_location != nullptr) && (resource_resolver_map_location->isSet())){
        toJsonValue(QString("resource.resolver.map.location"), resource_resolver_map_location, obj, QString("OAIConfigNodePropertyString"));
    }
    if((resource_resolver_map_observation != nullptr) && (resource_resolver_map_observation->isSet())){
        toJsonValue(QString("resource.resolver.map.observation"), resource_resolver_map_observation, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((resource_resolver_default_vanity_redirect_status != nullptr) && (resource_resolver_default_vanity_redirect_status->isSet())){
        toJsonValue(QString("resource.resolver.default.vanity.redirect.status"), resource_resolver_default_vanity_redirect_status, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((resource_resolver_enable_vanitypath != nullptr) && (resource_resolver_enable_vanitypath->isSet())){
        toJsonValue(QString("resource.resolver.enable.vanitypath"), resource_resolver_enable_vanitypath, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((resource_resolver_vanitypath_max_entries != nullptr) && (resource_resolver_vanitypath_max_entries->isSet())){
        toJsonValue(QString("resource.resolver.vanitypath.maxEntries"), resource_resolver_vanitypath_max_entries, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((resource_resolver_vanitypath_max_entries_startup != nullptr) && (resource_resolver_vanitypath_max_entries_startup->isSet())){
        toJsonValue(QString("resource.resolver.vanitypath.maxEntries.startup"), resource_resolver_vanitypath_max_entries_startup, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((resource_resolver_vanitypath_bloomfilter_max_bytes != nullptr) && (resource_resolver_vanitypath_bloomfilter_max_bytes->isSet())){
        toJsonValue(QString("resource.resolver.vanitypath.bloomfilter.maxBytes"), resource_resolver_vanitypath_bloomfilter_max_bytes, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((resource_resolver_optimize_alias_resolution != nullptr) && (resource_resolver_optimize_alias_resolution->isSet())){
        toJsonValue(QString("resource.resolver.optimize.alias.resolution"), resource_resolver_optimize_alias_resolution, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((resource_resolver_vanitypath_whitelist != nullptr) && (resource_resolver_vanitypath_whitelist->isSet())){
        toJsonValue(QString("resource.resolver.vanitypath.whitelist"), resource_resolver_vanitypath_whitelist, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((resource_resolver_vanitypath_blacklist != nullptr) && (resource_resolver_vanitypath_blacklist->isSet())){
        toJsonValue(QString("resource.resolver.vanitypath.blacklist"), resource_resolver_vanitypath_blacklist, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((resource_resolver_vanity_precedence != nullptr) && (resource_resolver_vanity_precedence->isSet())){
        toJsonValue(QString("resource.resolver.vanity.precedence"), resource_resolver_vanity_precedence, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((resource_resolver_providerhandling_paranoid != nullptr) && (resource_resolver_providerhandling_paranoid->isSet())){
        toJsonValue(QString("resource.resolver.providerhandling.paranoid"), resource_resolver_providerhandling_paranoid, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((resource_resolver_log_closing != nullptr) && (resource_resolver_log_closing->isSet())){
        toJsonValue(QString("resource.resolver.log.closing"), resource_resolver_log_closing, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((resource_resolver_log_unclosed != nullptr) && (resource_resolver_log_unclosed->isSet())){
        toJsonValue(QString("resource.resolver.log.unclosed"), resource_resolver_log_unclosed, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverSearchpath() {
    return resource_resolver_searchpath;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverSearchpath(OAIConfigNodePropertyArray* resource_resolver_searchpath) {
    this->resource_resolver_searchpath = resource_resolver_searchpath;
    this->m_resource_resolver_searchpath_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverManglenamespaces() {
    return resource_resolver_manglenamespaces;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverManglenamespaces(OAIConfigNodePropertyBoolean* resource_resolver_manglenamespaces) {
    this->resource_resolver_manglenamespaces = resource_resolver_manglenamespaces;
    this->m_resource_resolver_manglenamespaces_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverAllowDirect() {
    return resource_resolver_allow_direct;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverAllowDirect(OAIConfigNodePropertyBoolean* resource_resolver_allow_direct) {
    this->resource_resolver_allow_direct = resource_resolver_allow_direct;
    this->m_resource_resolver_allow_direct_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverRequiredProviders() {
    return resource_resolver_required_providers;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverRequiredProviders(OAIConfigNodePropertyArray* resource_resolver_required_providers) {
    this->resource_resolver_required_providers = resource_resolver_required_providers;
    this->m_resource_resolver_required_providers_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverRequiredProvidernames() {
    return resource_resolver_required_providernames;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverRequiredProvidernames(OAIConfigNodePropertyArray* resource_resolver_required_providernames) {
    this->resource_resolver_required_providernames = resource_resolver_required_providernames;
    this->m_resource_resolver_required_providernames_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVirtual() {
    return resource_resolver_virtual;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVirtual(OAIConfigNodePropertyArray* resource_resolver_virtual) {
    this->resource_resolver_virtual = resource_resolver_virtual;
    this->m_resource_resolver_virtual_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverMapping() {
    return resource_resolver_mapping;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverMapping(OAIConfigNodePropertyArray* resource_resolver_mapping) {
    this->resource_resolver_mapping = resource_resolver_mapping;
    this->m_resource_resolver_mapping_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverMapLocation() {
    return resource_resolver_map_location;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverMapLocation(OAIConfigNodePropertyString* resource_resolver_map_location) {
    this->resource_resolver_map_location = resource_resolver_map_location;
    this->m_resource_resolver_map_location_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverMapObservation() {
    return resource_resolver_map_observation;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverMapObservation(OAIConfigNodePropertyArray* resource_resolver_map_observation) {
    this->resource_resolver_map_observation = resource_resolver_map_observation;
    this->m_resource_resolver_map_observation_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverDefaultVanityRedirectStatus() {
    return resource_resolver_default_vanity_redirect_status;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverDefaultVanityRedirectStatus(OAIConfigNodePropertyInteger* resource_resolver_default_vanity_redirect_status) {
    this->resource_resolver_default_vanity_redirect_status = resource_resolver_default_vanity_redirect_status;
    this->m_resource_resolver_default_vanity_redirect_status_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverEnableVanitypath() {
    return resource_resolver_enable_vanitypath;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverEnableVanitypath(OAIConfigNodePropertyBoolean* resource_resolver_enable_vanitypath) {
    this->resource_resolver_enable_vanitypath = resource_resolver_enable_vanitypath;
    this->m_resource_resolver_enable_vanitypath_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanitypathMaxEntries() {
    return resource_resolver_vanitypath_max_entries;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanitypathMaxEntries(OAIConfigNodePropertyInteger* resource_resolver_vanitypath_max_entries) {
    this->resource_resolver_vanitypath_max_entries = resource_resolver_vanitypath_max_entries;
    this->m_resource_resolver_vanitypath_max_entries_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanitypathMaxEntriesStartup() {
    return resource_resolver_vanitypath_max_entries_startup;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanitypathMaxEntriesStartup(OAIConfigNodePropertyBoolean* resource_resolver_vanitypath_max_entries_startup) {
    this->resource_resolver_vanitypath_max_entries_startup = resource_resolver_vanitypath_max_entries_startup;
    this->m_resource_resolver_vanitypath_max_entries_startup_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanitypathBloomfilterMaxBytes() {
    return resource_resolver_vanitypath_bloomfilter_max_bytes;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanitypathBloomfilterMaxBytes(OAIConfigNodePropertyInteger* resource_resolver_vanitypath_bloomfilter_max_bytes) {
    this->resource_resolver_vanitypath_bloomfilter_max_bytes = resource_resolver_vanitypath_bloomfilter_max_bytes;
    this->m_resource_resolver_vanitypath_bloomfilter_max_bytes_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverOptimizeAliasResolution() {
    return resource_resolver_optimize_alias_resolution;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverOptimizeAliasResolution(OAIConfigNodePropertyBoolean* resource_resolver_optimize_alias_resolution) {
    this->resource_resolver_optimize_alias_resolution = resource_resolver_optimize_alias_resolution;
    this->m_resource_resolver_optimize_alias_resolution_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanitypathWhitelist() {
    return resource_resolver_vanitypath_whitelist;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanitypathWhitelist(OAIConfigNodePropertyArray* resource_resolver_vanitypath_whitelist) {
    this->resource_resolver_vanitypath_whitelist = resource_resolver_vanitypath_whitelist;
    this->m_resource_resolver_vanitypath_whitelist_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanitypathBlacklist() {
    return resource_resolver_vanitypath_blacklist;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanitypathBlacklist(OAIConfigNodePropertyArray* resource_resolver_vanitypath_blacklist) {
    this->resource_resolver_vanitypath_blacklist = resource_resolver_vanitypath_blacklist;
    this->m_resource_resolver_vanitypath_blacklist_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanityPrecedence() {
    return resource_resolver_vanity_precedence;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanityPrecedence(OAIConfigNodePropertyBoolean* resource_resolver_vanity_precedence) {
    this->resource_resolver_vanity_precedence = resource_resolver_vanity_precedence;
    this->m_resource_resolver_vanity_precedence_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverProviderhandlingParanoid() {
    return resource_resolver_providerhandling_paranoid;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverProviderhandlingParanoid(OAIConfigNodePropertyBoolean* resource_resolver_providerhandling_paranoid) {
    this->resource_resolver_providerhandling_paranoid = resource_resolver_providerhandling_paranoid;
    this->m_resource_resolver_providerhandling_paranoid_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverLogClosing() {
    return resource_resolver_log_closing;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverLogClosing(OAIConfigNodePropertyBoolean* resource_resolver_log_closing) {
    this->resource_resolver_log_closing = resource_resolver_log_closing;
    this->m_resource_resolver_log_closing_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverLogUnclosed() {
    return resource_resolver_log_unclosed;
}
void
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverLogUnclosed(OAIConfigNodePropertyBoolean* resource_resolver_log_unclosed) {
    this->resource_resolver_log_unclosed = resource_resolver_log_unclosed;
    this->m_resource_resolver_log_unclosed_isSet = true;
}


bool
OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(resource_resolver_searchpath != nullptr && resource_resolver_searchpath->isSet()){ isObjectUpdated = true; break;}
        if(resource_resolver_manglenamespaces != nullptr && resource_resolver_manglenamespaces->isSet()){ isObjectUpdated = true; break;}
        if(resource_resolver_allow_direct != nullptr && resource_resolver_allow_direct->isSet()){ isObjectUpdated = true; break;}
        if(resource_resolver_required_providers != nullptr && resource_resolver_required_providers->isSet()){ isObjectUpdated = true; break;}
        if(resource_resolver_required_providernames != nullptr && resource_resolver_required_providernames->isSet()){ isObjectUpdated = true; break;}
        if(resource_resolver_virtual != nullptr && resource_resolver_virtual->isSet()){ isObjectUpdated = true; break;}
        if(resource_resolver_mapping != nullptr && resource_resolver_mapping->isSet()){ isObjectUpdated = true; break;}
        if(resource_resolver_map_location != nullptr && resource_resolver_map_location->isSet()){ isObjectUpdated = true; break;}
        if(resource_resolver_map_observation != nullptr && resource_resolver_map_observation->isSet()){ isObjectUpdated = true; break;}
        if(resource_resolver_default_vanity_redirect_status != nullptr && resource_resolver_default_vanity_redirect_status->isSet()){ isObjectUpdated = true; break;}
        if(resource_resolver_enable_vanitypath != nullptr && resource_resolver_enable_vanitypath->isSet()){ isObjectUpdated = true; break;}
        if(resource_resolver_vanitypath_max_entries != nullptr && resource_resolver_vanitypath_max_entries->isSet()){ isObjectUpdated = true; break;}
        if(resource_resolver_vanitypath_max_entries_startup != nullptr && resource_resolver_vanitypath_max_entries_startup->isSet()){ isObjectUpdated = true; break;}
        if(resource_resolver_vanitypath_bloomfilter_max_bytes != nullptr && resource_resolver_vanitypath_bloomfilter_max_bytes->isSet()){ isObjectUpdated = true; break;}
        if(resource_resolver_optimize_alias_resolution != nullptr && resource_resolver_optimize_alias_resolution->isSet()){ isObjectUpdated = true; break;}
        if(resource_resolver_vanitypath_whitelist != nullptr && resource_resolver_vanitypath_whitelist->isSet()){ isObjectUpdated = true; break;}
        if(resource_resolver_vanitypath_blacklist != nullptr && resource_resolver_vanitypath_blacklist->isSet()){ isObjectUpdated = true; break;}
        if(resource_resolver_vanity_precedence != nullptr && resource_resolver_vanity_precedence->isSet()){ isObjectUpdated = true; break;}
        if(resource_resolver_providerhandling_paranoid != nullptr && resource_resolver_providerhandling_paranoid->isSet()){ isObjectUpdated = true; break;}
        if(resource_resolver_log_closing != nullptr && resource_resolver_log_closing->isSet()){ isObjectUpdated = true; break;}
        if(resource_resolver_log_unclosed != nullptr && resource_resolver_log_unclosed->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

