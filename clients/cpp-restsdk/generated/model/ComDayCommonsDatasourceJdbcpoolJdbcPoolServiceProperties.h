/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties
    : public ModelBase
{
public:
    ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties();
    virtual ~ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getJdbcDriverClass() const;
    bool jdbcDriverClassIsSet() const;
    void unsetJdbc_driver_class();
    void setJdbcDriverClass(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getJdbcConnectionUri() const;
    bool jdbcConnectionUriIsSet() const;
    void unsetJdbc_connection_uri();
    void setJdbcConnectionUri(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getJdbcUsername() const;
    bool jdbcUsernameIsSet() const;
    void unsetJdbc_username();
    void setJdbcUsername(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getJdbcPassword() const;
    bool jdbcPasswordIsSet() const;
    void unsetJdbc_password();
    void setJdbcPassword(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getJdbcValidationQuery() const;
    bool jdbcValidationQueryIsSet() const;
    void unsetJdbc_validation_query();
    void setJdbcValidationQuery(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getDefaultReadonly() const;
    bool defaultReadonlyIsSet() const;
    void unsetDefault_readonly();
    void setDefaultReadonly(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getDefaultAutocommit() const;
    bool defaultAutocommitIsSet() const;
    void unsetDefault_autocommit();
    void setDefaultAutocommit(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPoolSize() const;
    bool poolSizeIsSet() const;
    void unsetPool_size();
    void setPoolSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPoolMaxWaitMsec() const;
    bool poolMaxWaitMsecIsSet() const;
    void unsetPool_max_wait_msec();
    void setPoolMaxWaitMsec(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDatasourceName() const;
    bool datasourceNameIsSet() const;
    void unsetDatasource_name();
    void setDatasourceName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getDatasourceSvcProperties() const;
    bool datasourceSvcPropertiesIsSet() const;
    void unsetDatasource_svc_properties();
    void setDatasourceSvcProperties(std::shared_ptr<ConfigNodePropertyArray> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Jdbc_driver_class;
    bool m_Jdbc_driver_classIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Jdbc_connection_uri;
    bool m_Jdbc_connection_uriIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Jdbc_username;
    bool m_Jdbc_usernameIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Jdbc_password;
    bool m_Jdbc_passwordIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Jdbc_validation_query;
    bool m_Jdbc_validation_queryIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Default_readonly;
    bool m_Default_readonlyIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Default_autocommit;
    bool m_Default_autocommitIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Pool_size;
    bool m_Pool_sizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Pool_max_wait_msec;
    bool m_Pool_max_wait_msecIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Datasource_name;
    bool m_Datasource_nameIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Datasource_svc_properties;
    bool m_Datasource_svc_propertiesIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties_H_ */
