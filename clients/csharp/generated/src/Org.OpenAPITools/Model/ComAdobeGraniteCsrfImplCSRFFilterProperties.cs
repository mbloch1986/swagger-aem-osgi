/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeGraniteCsrfImplCSRFFilterProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteCsrfImplCSRFFilterProperties :  IEquatable<ComAdobeGraniteCsrfImplCSRFFilterProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeGraniteCsrfImplCSRFFilterProperties" /> class.
        /// </summary>
        /// <param name="filterMethods">filterMethods.</param>
        /// <param name="filterEnableSafeUserAgents">filterEnableSafeUserAgents.</param>
        /// <param name="filterSafeUserAgents">filterSafeUserAgents.</param>
        /// <param name="filterExcludedPaths">filterExcludedPaths.</param>
        public ComAdobeGraniteCsrfImplCSRFFilterProperties(ConfigNodePropertyArray filterMethods = default(ConfigNodePropertyArray), ConfigNodePropertyBoolean filterEnableSafeUserAgents = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray filterSafeUserAgents = default(ConfigNodePropertyArray), ConfigNodePropertyArray filterExcludedPaths = default(ConfigNodePropertyArray))
        {
            this.FilterMethods = filterMethods;
            this.FilterEnableSafeUserAgents = filterEnableSafeUserAgents;
            this.FilterSafeUserAgents = filterSafeUserAgents;
            this.FilterExcludedPaths = filterExcludedPaths;
        }
        
        /// <summary>
        /// Gets or Sets FilterMethods
        /// </summary>
        [DataMember(Name="filter.methods", EmitDefaultValue=false)]
        public ConfigNodePropertyArray FilterMethods { get; set; }

        /// <summary>
        /// Gets or Sets FilterEnableSafeUserAgents
        /// </summary>
        [DataMember(Name="filter.enable.safe.user.agents", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean FilterEnableSafeUserAgents { get; set; }

        /// <summary>
        /// Gets or Sets FilterSafeUserAgents
        /// </summary>
        [DataMember(Name="filter.safe.user.agents", EmitDefaultValue=false)]
        public ConfigNodePropertyArray FilterSafeUserAgents { get; set; }

        /// <summary>
        /// Gets or Sets FilterExcludedPaths
        /// </summary>
        [DataMember(Name="filter.excluded.paths", EmitDefaultValue=false)]
        public ConfigNodePropertyArray FilterExcludedPaths { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteCsrfImplCSRFFilterProperties {\n");
            sb.Append("  FilterMethods: ").Append(FilterMethods).Append("\n");
            sb.Append("  FilterEnableSafeUserAgents: ").Append(FilterEnableSafeUserAgents).Append("\n");
            sb.Append("  FilterSafeUserAgents: ").Append(FilterSafeUserAgents).Append("\n");
            sb.Append("  FilterExcludedPaths: ").Append(FilterExcludedPaths).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeGraniteCsrfImplCSRFFilterProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteCsrfImplCSRFFilterProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeGraniteCsrfImplCSRFFilterProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteCsrfImplCSRFFilterProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FilterMethods == input.FilterMethods ||
                    (this.FilterMethods != null &&
                    this.FilterMethods.Equals(input.FilterMethods))
                ) && 
                (
                    this.FilterEnableSafeUserAgents == input.FilterEnableSafeUserAgents ||
                    (this.FilterEnableSafeUserAgents != null &&
                    this.FilterEnableSafeUserAgents.Equals(input.FilterEnableSafeUserAgents))
                ) && 
                (
                    this.FilterSafeUserAgents == input.FilterSafeUserAgents ||
                    (this.FilterSafeUserAgents != null &&
                    this.FilterSafeUserAgents.Equals(input.FilterSafeUserAgents))
                ) && 
                (
                    this.FilterExcludedPaths == input.FilterExcludedPaths ||
                    (this.FilterExcludedPaths != null &&
                    this.FilterExcludedPaths.Equals(input.FilterExcludedPaths))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FilterMethods != null)
                    hashCode = hashCode * 59 + this.FilterMethods.GetHashCode();
                if (this.FilterEnableSafeUserAgents != null)
                    hashCode = hashCode * 59 + this.FilterEnableSafeUserAgents.GetHashCode();
                if (this.FilterSafeUserAgents != null)
                    hashCode = hashCode * 59 + this.FilterSafeUserAgents.GetHashCode();
                if (this.FilterExcludedPaths != null)
                    hashCode = hashCode * 59 + this.FilterExcludedPaths.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
