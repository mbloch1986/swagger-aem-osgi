/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCqStatisticsImplStatisticsServiceImplProperties : IEquatable<ComDayCqStatisticsImplStatisticsServiceImplProperties>
    { 
        /// <summary>
        /// Gets or Sets SchedulerPeriod
        /// </summary>
        [DataMember(Name="scheduler.period")]
        public ConfigNodePropertyInteger SchedulerPeriod { get; set; }

        /// <summary>
        /// Gets or Sets SchedulerConcurrent
        /// </summary>
        [DataMember(Name="scheduler.concurrent")]
        public ConfigNodePropertyBoolean SchedulerConcurrent { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path")]
        public ConfigNodePropertyString Path { get; set; }

        /// <summary>
        /// Gets or Sets Workspace
        /// </summary>
        [DataMember(Name="workspace")]
        public ConfigNodePropertyString Workspace { get; set; }

        /// <summary>
        /// Gets or Sets KeywordsPath
        /// </summary>
        [DataMember(Name="keywordsPath")]
        public ConfigNodePropertyString KeywordsPath { get; set; }

        /// <summary>
        /// Gets or Sets AsyncEntries
        /// </summary>
        [DataMember(Name="asyncEntries")]
        public ConfigNodePropertyBoolean AsyncEntries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqStatisticsImplStatisticsServiceImplProperties {\n");
            sb.Append("  SchedulerPeriod: ").Append(SchedulerPeriod).Append("\n");
            sb.Append("  SchedulerConcurrent: ").Append(SchedulerConcurrent).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Workspace: ").Append(Workspace).Append("\n");
            sb.Append("  KeywordsPath: ").Append(KeywordsPath).Append("\n");
            sb.Append("  AsyncEntries: ").Append(AsyncEntries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCqStatisticsImplStatisticsServiceImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCqStatisticsImplStatisticsServiceImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCqStatisticsImplStatisticsServiceImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqStatisticsImplStatisticsServiceImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SchedulerPeriod == other.SchedulerPeriod ||
                    SchedulerPeriod != null &&
                    SchedulerPeriod.Equals(other.SchedulerPeriod)
                ) && 
                (
                    SchedulerConcurrent == other.SchedulerConcurrent ||
                    SchedulerConcurrent != null &&
                    SchedulerConcurrent.Equals(other.SchedulerConcurrent)
                ) && 
                (
                    Path == other.Path ||
                    Path != null &&
                    Path.Equals(other.Path)
                ) && 
                (
                    Workspace == other.Workspace ||
                    Workspace != null &&
                    Workspace.Equals(other.Workspace)
                ) && 
                (
                    KeywordsPath == other.KeywordsPath ||
                    KeywordsPath != null &&
                    KeywordsPath.Equals(other.KeywordsPath)
                ) && 
                (
                    AsyncEntries == other.AsyncEntries ||
                    AsyncEntries != null &&
                    AsyncEntries.Equals(other.AsyncEntries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SchedulerPeriod != null)
                    hashCode = hashCode * 59 + SchedulerPeriod.GetHashCode();
                    if (SchedulerConcurrent != null)
                    hashCode = hashCode * 59 + SchedulerConcurrent.GetHashCode();
                    if (Path != null)
                    hashCode = hashCode * 59 + Path.GetHashCode();
                    if (Workspace != null)
                    hashCode = hashCode * 59 + Workspace.GetHashCode();
                    if (KeywordsPath != null)
                    hashCode = hashCode * 59 + KeywordsPath.GetHashCode();
                    if (AsyncEntries != null)
                    hashCode = hashCode * 59 + AsyncEntries.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCqStatisticsImplStatisticsServiceImplProperties left, ComDayCqStatisticsImplStatisticsServiceImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCqStatisticsImplStatisticsServiceImplProperties left, ComDayCqStatisticsImplStatisticsServiceImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
