/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties {
  #[serde(rename = "service.max_links_per_host")]
  service_max_links_per_host: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "service.save_external_link_references")]
  service_save_external_link_references: Option<::models::ConfigNodePropertyBoolean>
}

impl ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties {
  pub fn new() -> ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties {
    ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties {
      service_max_links_per_host: None,
      service_save_external_link_references: None
    }
  }

  pub fn set_service_max_links_per_host(&mut self, service_max_links_per_host: ::models::ConfigNodePropertyInteger) {
    self.service_max_links_per_host = Some(service_max_links_per_host);
  }

  pub fn with_service_max_links_per_host(mut self, service_max_links_per_host: ::models::ConfigNodePropertyInteger) -> ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties {
    self.service_max_links_per_host = Some(service_max_links_per_host);
    self
  }

  pub fn service_max_links_per_host(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.service_max_links_per_host.as_ref()
  }

  pub fn reset_service_max_links_per_host(&mut self) {
    self.service_max_links_per_host = None;
  }

  pub fn set_service_save_external_link_references(&mut self, service_save_external_link_references: ::models::ConfigNodePropertyBoolean) {
    self.service_save_external_link_references = Some(service_save_external_link_references);
  }

  pub fn with_service_save_external_link_references(mut self, service_save_external_link_references: ::models::ConfigNodePropertyBoolean) -> ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties {
    self.service_save_external_link_references = Some(service_save_external_link_references);
    self
  }

  pub fn service_save_external_link_references(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.service_save_external_link_references.as_ref()
  }

  pub fn reset_service_save_external_link_references(&mut self) {
    self.service_save_external_link_references = None;
  }

}



