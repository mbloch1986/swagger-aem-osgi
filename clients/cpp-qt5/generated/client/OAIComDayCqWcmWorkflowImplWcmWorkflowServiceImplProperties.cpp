/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties() {
    init();
}

OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::~OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties() {
    this->cleanup();
}

void
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::init() {
    event_filter = new OAIConfigNodePropertyString();
    m_event_filter_isSet = false;
    min_thread_pool_size = new OAIConfigNodePropertyInteger();
    m_min_thread_pool_size_isSet = false;
    max_thread_pool_size = new OAIConfigNodePropertyInteger();
    m_max_thread_pool_size_isSet = false;
    cq_wcm_workflow_terminate_on_activate = new OAIConfigNodePropertyBoolean();
    m_cq_wcm_workflow_terminate_on_activate_isSet = false;
    cq_wcm_worklfow_terminate_exclusion_list = new OAIConfigNodePropertyArray();
    m_cq_wcm_worklfow_terminate_exclusion_list_isSet = false;
}

void
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::cleanup() {
    if(event_filter != nullptr) { 
        delete event_filter;
    }
    if(min_thread_pool_size != nullptr) { 
        delete min_thread_pool_size;
    }
    if(max_thread_pool_size != nullptr) { 
        delete max_thread_pool_size;
    }
    if(cq_wcm_workflow_terminate_on_activate != nullptr) { 
        delete cq_wcm_workflow_terminate_on_activate;
    }
    if(cq_wcm_worklfow_terminate_exclusion_list != nullptr) { 
        delete cq_wcm_worklfow_terminate_exclusion_list;
    }
}

OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties*
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&event_filter, pJson["event.filter"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&min_thread_pool_size, pJson["minThreadPoolSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&max_thread_pool_size, pJson["maxThreadPoolSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cq_wcm_workflow_terminate_on_activate, pJson["cq.wcm.workflow.terminate.on.activate"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&cq_wcm_worklfow_terminate_exclusion_list, pJson["cq.wcm.worklfow.terminate.exclusion.list"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::asJsonObject() {
    QJsonObject obj;
    if((event_filter != nullptr) && (event_filter->isSet())){
        toJsonValue(QString("event.filter"), event_filter, obj, QString("OAIConfigNodePropertyString"));
    }
    if((min_thread_pool_size != nullptr) && (min_thread_pool_size->isSet())){
        toJsonValue(QString("minThreadPoolSize"), min_thread_pool_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((max_thread_pool_size != nullptr) && (max_thread_pool_size->isSet())){
        toJsonValue(QString("maxThreadPoolSize"), max_thread_pool_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cq_wcm_workflow_terminate_on_activate != nullptr) && (cq_wcm_workflow_terminate_on_activate->isSet())){
        toJsonValue(QString("cq.wcm.workflow.terminate.on.activate"), cq_wcm_workflow_terminate_on_activate, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((cq_wcm_worklfow_terminate_exclusion_list != nullptr) && (cq_wcm_worklfow_terminate_exclusion_list->isSet())){
        toJsonValue(QString("cq.wcm.worklfow.terminate.exclusion.list"), cq_wcm_worklfow_terminate_exclusion_list, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::getEventFilter() {
    return event_filter;
}
void
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::setEventFilter(OAIConfigNodePropertyString* event_filter) {
    this->event_filter = event_filter;
    this->m_event_filter_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::getMinThreadPoolSize() {
    return min_thread_pool_size;
}
void
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::setMinThreadPoolSize(OAIConfigNodePropertyInteger* min_thread_pool_size) {
    this->min_thread_pool_size = min_thread_pool_size;
    this->m_min_thread_pool_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::getMaxThreadPoolSize() {
    return max_thread_pool_size;
}
void
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::setMaxThreadPoolSize(OAIConfigNodePropertyInteger* max_thread_pool_size) {
    this->max_thread_pool_size = max_thread_pool_size;
    this->m_max_thread_pool_size_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::getCqWcmWorkflowTerminateOnActivate() {
    return cq_wcm_workflow_terminate_on_activate;
}
void
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::setCqWcmWorkflowTerminateOnActivate(OAIConfigNodePropertyBoolean* cq_wcm_workflow_terminate_on_activate) {
    this->cq_wcm_workflow_terminate_on_activate = cq_wcm_workflow_terminate_on_activate;
    this->m_cq_wcm_workflow_terminate_on_activate_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::getCqWcmWorklfowTerminateExclusionList() {
    return cq_wcm_worklfow_terminate_exclusion_list;
}
void
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::setCqWcmWorklfowTerminateExclusionList(OAIConfigNodePropertyArray* cq_wcm_worklfow_terminate_exclusion_list) {
    this->cq_wcm_worklfow_terminate_exclusion_list = cq_wcm_worklfow_terminate_exclusion_list;
    this->m_cq_wcm_worklfow_terminate_exclusion_list_isSet = true;
}


bool
OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(event_filter != nullptr && event_filter->isSet()){ isObjectUpdated = true; break;}
        if(min_thread_pool_size != nullptr && min_thread_pool_size->isSet()){ isObjectUpdated = true; break;}
        if(max_thread_pool_size != nullptr && max_thread_pool_size->isSet()){ isObjectUpdated = true; break;}
        if(cq_wcm_workflow_terminate_on_activate != nullptr && cq_wcm_workflow_terminate_on_activate->isSet()){ isObjectUpdated = true; break;}
        if(cq_wcm_worklfow_terminate_exclusion_list != nullptr && cq_wcm_worklfow_terminate_exclusion_list->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

