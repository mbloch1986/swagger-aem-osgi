/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComDayCqDamIdsImplIDSPoolManagerImplProperties.h
 *
 * 
 */

#ifndef ComDayCqDamIdsImplIDSPoolManagerImplProperties_H_
#define ComDayCqDamIdsImplIDSPoolManagerImplProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqDamIdsImplIDSPoolManagerImplProperties
    : public ModelBase
{
public:
    ComDayCqDamIdsImplIDSPoolManagerImplProperties();
    virtual ~ComDayCqDamIdsImplIDSPoolManagerImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComDayCqDamIdsImplIDSPoolManagerImplProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMaxErrorsToBlacklist() const;
    void setMaxErrorsToBlacklist(ConfigNodePropertyInteger const& value);
    bool maxErrorsToBlacklistIsSet() const;
    void unsetMax_errors_to_blacklist();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getRetryIntervalToWhitelist() const;
    void setRetryIntervalToWhitelist(ConfigNodePropertyInteger const& value);
    bool retryIntervalToWhitelistIsSet() const;
    void unsetRetry_interval_to_whitelist();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getConnectTimeout() const;
    void setConnectTimeout(ConfigNodePropertyInteger const& value);
    bool connectTimeoutIsSet() const;
    void unsetConnect_timeout();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getSocketTimeout() const;
    void setSocketTimeout(ConfigNodePropertyInteger const& value);
    bool socketTimeoutIsSet() const;
    void unsetSocket_timeout();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getProcessLabel() const;
    void setProcessLabel(ConfigNodePropertyString const& value);
    bool processLabelIsSet() const;
    void unsetProcess_label();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getConnectionUseMax() const;
    void setConnectionUseMax(ConfigNodePropertyInteger const& value);
    bool connectionUseMaxIsSet() const;
    void unsetConnection_use_max();

protected:
    ConfigNodePropertyInteger m_Max_errors_to_blacklist;
    bool m_Max_errors_to_blacklistIsSet;
    ConfigNodePropertyInteger m_Retry_interval_to_whitelist;
    bool m_Retry_interval_to_whitelistIsSet;
    ConfigNodePropertyInteger m_Connect_timeout;
    bool m_Connect_timeoutIsSet;
    ConfigNodePropertyInteger m_Socket_timeout;
    bool m_Socket_timeoutIsSet;
    ConfigNodePropertyString m_Process_label;
    bool m_Process_labelIsSet;
    ConfigNodePropertyInteger m_Connection_use_max;
    bool m_Connection_use_maxIsSet;
};

}
}
}
}

#endif /* ComDayCqDamIdsImplIDSPoolManagerImplProperties_H_ */
