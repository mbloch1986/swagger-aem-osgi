/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties()
{
    m_Pattern_timeIsSet = false;
    m_Pattern_newlineIsSet = false;
    m_Pattern_dayOfMonthIsSet = false;
    m_Pattern_monthIsSet = false;
    m_Pattern_yearIsSet = false;
    m_Pattern_dateIsSet = false;
    m_Pattern_dateTimeIsSet = false;
    m_Pattern_emailIsSet = false;
    
}

ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::~ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties()
{
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Pattern_timeIsSet)
    {
        val["pattern.time"] = ModelBase::toJson(m_Pattern_time);
    }
    if(m_Pattern_newlineIsSet)
    {
        val["pattern.newline"] = ModelBase::toJson(m_Pattern_newline);
    }
    if(m_Pattern_dayOfMonthIsSet)
    {
        val["pattern.dayOfMonth"] = ModelBase::toJson(m_Pattern_dayOfMonth);
    }
    if(m_Pattern_monthIsSet)
    {
        val["pattern.month"] = ModelBase::toJson(m_Pattern_month);
    }
    if(m_Pattern_yearIsSet)
    {
        val["pattern.year"] = ModelBase::toJson(m_Pattern_year);
    }
    if(m_Pattern_dateIsSet)
    {
        val["pattern.date"] = ModelBase::toJson(m_Pattern_date);
    }
    if(m_Pattern_dateTimeIsSet)
    {
        val["pattern.dateTime"] = ModelBase::toJson(m_Pattern_dateTime);
    }
    if(m_Pattern_emailIsSet)
    {
        val["pattern.email"] = ModelBase::toJson(m_Pattern_email);
    }
    

    return val;
}

void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::fromJson(nlohmann::json& val)
{
    if(val.find("pattern.time") != val.end())
    {
        if(!val["pattern.time"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["pattern.time"]);
            setPatternTime( newItem );
        }
        
    }
    if(val.find("pattern.newline") != val.end())
    {
        if(!val["pattern.newline"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["pattern.newline"]);
            setPatternNewline( newItem );
        }
        
    }
    if(val.find("pattern.dayOfMonth") != val.end())
    {
        if(!val["pattern.dayOfMonth"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["pattern.dayOfMonth"]);
            setPatternDayOfMonth( newItem );
        }
        
    }
    if(val.find("pattern.month") != val.end())
    {
        if(!val["pattern.month"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["pattern.month"]);
            setPatternMonth( newItem );
        }
        
    }
    if(val.find("pattern.year") != val.end())
    {
        if(!val["pattern.year"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["pattern.year"]);
            setPatternYear( newItem );
        }
        
    }
    if(val.find("pattern.date") != val.end())
    {
        if(!val["pattern.date"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["pattern.date"]);
            setPatternDate( newItem );
        }
        
    }
    if(val.find("pattern.dateTime") != val.end())
    {
        if(!val["pattern.dateTime"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["pattern.dateTime"]);
            setPatternDateTime( newItem );
        }
        
    }
    if(val.find("pattern.email") != val.end())
    {
        if(!val["pattern.email"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["pattern.email"]);
            setPatternEmail( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::getPatternTime() const
{
    return m_Pattern_time;
}
void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::setPatternTime(ConfigNodePropertyString const& value)
{
    m_Pattern_time = value;
    m_Pattern_timeIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::patternTimeIsSet() const
{
    return m_Pattern_timeIsSet;
}
void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::unsetPattern_time()
{
    m_Pattern_timeIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::getPatternNewline() const
{
    return m_Pattern_newline;
}
void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::setPatternNewline(ConfigNodePropertyString const& value)
{
    m_Pattern_newline = value;
    m_Pattern_newlineIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::patternNewlineIsSet() const
{
    return m_Pattern_newlineIsSet;
}
void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::unsetPattern_newline()
{
    m_Pattern_newlineIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::getPatternDayOfMonth() const
{
    return m_Pattern_dayOfMonth;
}
void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::setPatternDayOfMonth(ConfigNodePropertyString const& value)
{
    m_Pattern_dayOfMonth = value;
    m_Pattern_dayOfMonthIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::patternDayOfMonthIsSet() const
{
    return m_Pattern_dayOfMonthIsSet;
}
void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::unsetPattern_dayOfMonth()
{
    m_Pattern_dayOfMonthIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::getPatternMonth() const
{
    return m_Pattern_month;
}
void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::setPatternMonth(ConfigNodePropertyString const& value)
{
    m_Pattern_month = value;
    m_Pattern_monthIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::patternMonthIsSet() const
{
    return m_Pattern_monthIsSet;
}
void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::unsetPattern_month()
{
    m_Pattern_monthIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::getPatternYear() const
{
    return m_Pattern_year;
}
void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::setPatternYear(ConfigNodePropertyString const& value)
{
    m_Pattern_year = value;
    m_Pattern_yearIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::patternYearIsSet() const
{
    return m_Pattern_yearIsSet;
}
void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::unsetPattern_year()
{
    m_Pattern_yearIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::getPatternDate() const
{
    return m_Pattern_date;
}
void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::setPatternDate(ConfigNodePropertyString const& value)
{
    m_Pattern_date = value;
    m_Pattern_dateIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::patternDateIsSet() const
{
    return m_Pattern_dateIsSet;
}
void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::unsetPattern_date()
{
    m_Pattern_dateIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::getPatternDateTime() const
{
    return m_Pattern_dateTime;
}
void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::setPatternDateTime(ConfigNodePropertyString const& value)
{
    m_Pattern_dateTime = value;
    m_Pattern_dateTimeIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::patternDateTimeIsSet() const
{
    return m_Pattern_dateTimeIsSet;
}
void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::unsetPattern_dateTime()
{
    m_Pattern_dateTimeIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::getPatternEmail() const
{
    return m_Pattern_email;
}
void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::setPatternEmail(ConfigNodePropertyString const& value)
{
    m_Pattern_email = value;
    m_Pattern_emailIsSet = true;
}
bool ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::patternEmailIsSet() const
{
    return m_Pattern_emailIsSet;
}
void ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties::unsetPattern_email()
{
    m_Pattern_emailIsSet = false;
}

}
}
}
}

