/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties()
{
    m_Preserve_hierarchy_nodesIsSet = false;
    m_Ignore_versioningIsSet = false;
    m_Import_aclIsSet = false;
    m_Save_thresholdIsSet = false;
    m_Preserve_user_pathsIsSet = false;
    m_Preserve_uuidIsSet = false;
    m_Preserve_uuid_nodetypesIsSet = false;
    m_Preserve_uuid_subtreesIsSet = false;
    m_Auto_commitIsSet = false;
    
}

ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::~ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties()
{
}

void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Preserve_hierarchy_nodesIsSet)
    {
        val["preserve.hierarchy.nodes"] = ModelBase::toJson(m_Preserve_hierarchy_nodes);
    }
    if(m_Ignore_versioningIsSet)
    {
        val["ignore.versioning"] = ModelBase::toJson(m_Ignore_versioning);
    }
    if(m_Import_aclIsSet)
    {
        val["import.acl"] = ModelBase::toJson(m_Import_acl);
    }
    if(m_Save_thresholdIsSet)
    {
        val["save.threshold"] = ModelBase::toJson(m_Save_threshold);
    }
    if(m_Preserve_user_pathsIsSet)
    {
        val["preserve.user.paths"] = ModelBase::toJson(m_Preserve_user_paths);
    }
    if(m_Preserve_uuidIsSet)
    {
        val["preserve.uuid"] = ModelBase::toJson(m_Preserve_uuid);
    }
    if(m_Preserve_uuid_nodetypesIsSet)
    {
        val["preserve.uuid.nodetypes"] = ModelBase::toJson(m_Preserve_uuid_nodetypes);
    }
    if(m_Preserve_uuid_subtreesIsSet)
    {
        val["preserve.uuid.subtrees"] = ModelBase::toJson(m_Preserve_uuid_subtrees);
    }
    if(m_Auto_commitIsSet)
    {
        val["auto.commit"] = ModelBase::toJson(m_Auto_commit);
    }
    

    return val;
}

void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::fromJson(nlohmann::json& val)
{
    if(val.find("preserve.hierarchy.nodes") != val.end())
    {
        if(!val["preserve.hierarchy.nodes"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["preserve.hierarchy.nodes"]);
            setPreserveHierarchyNodes( newItem );
        }
        
    }
    if(val.find("ignore.versioning") != val.end())
    {
        if(!val["ignore.versioning"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["ignore.versioning"]);
            setIgnoreVersioning( newItem );
        }
        
    }
    if(val.find("import.acl") != val.end())
    {
        if(!val["import.acl"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["import.acl"]);
            setImportAcl( newItem );
        }
        
    }
    if(val.find("save.threshold") != val.end())
    {
        if(!val["save.threshold"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["save.threshold"]);
            setSaveThreshold( newItem );
        }
        
    }
    if(val.find("preserve.user.paths") != val.end())
    {
        if(!val["preserve.user.paths"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["preserve.user.paths"]);
            setPreserveUserPaths( newItem );
        }
        
    }
    if(val.find("preserve.uuid") != val.end())
    {
        if(!val["preserve.uuid"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["preserve.uuid"]);
            setPreserveUuid( newItem );
        }
        
    }
    if(val.find("preserve.uuid.nodetypes") != val.end())
    {
        if(!val["preserve.uuid.nodetypes"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["preserve.uuid.nodetypes"]);
            setPreserveUuidNodetypes( newItem );
        }
        
    }
    if(val.find("preserve.uuid.subtrees") != val.end())
    {
        if(!val["preserve.uuid.subtrees"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["preserve.uuid.subtrees"]);
            setPreserveUuidSubtrees( newItem );
        }
        
    }
    if(val.find("auto.commit") != val.end())
    {
        if(!val["auto.commit"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["auto.commit"]);
            setAutoCommit( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getPreserveHierarchyNodes() const
{
    return m_Preserve_hierarchy_nodes;
}
void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setPreserveHierarchyNodes(ConfigNodePropertyBoolean const& value)
{
    m_Preserve_hierarchy_nodes = value;
    m_Preserve_hierarchy_nodesIsSet = true;
}
bool ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::preserveHierarchyNodesIsSet() const
{
    return m_Preserve_hierarchy_nodesIsSet;
}
void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::unsetPreserve_hierarchy_nodes()
{
    m_Preserve_hierarchy_nodesIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getIgnoreVersioning() const
{
    return m_Ignore_versioning;
}
void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setIgnoreVersioning(ConfigNodePropertyBoolean const& value)
{
    m_Ignore_versioning = value;
    m_Ignore_versioningIsSet = true;
}
bool ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::ignoreVersioningIsSet() const
{
    return m_Ignore_versioningIsSet;
}
void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::unsetIgnore_versioning()
{
    m_Ignore_versioningIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getImportAcl() const
{
    return m_Import_acl;
}
void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setImportAcl(ConfigNodePropertyBoolean const& value)
{
    m_Import_acl = value;
    m_Import_aclIsSet = true;
}
bool ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::importAclIsSet() const
{
    return m_Import_aclIsSet;
}
void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::unsetImport_acl()
{
    m_Import_aclIsSet = false;
}
ConfigNodePropertyInteger ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getSaveThreshold() const
{
    return m_Save_threshold;
}
void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setSaveThreshold(ConfigNodePropertyInteger const& value)
{
    m_Save_threshold = value;
    m_Save_thresholdIsSet = true;
}
bool ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::saveThresholdIsSet() const
{
    return m_Save_thresholdIsSet;
}
void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::unsetSave_threshold()
{
    m_Save_thresholdIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getPreserveUserPaths() const
{
    return m_Preserve_user_paths;
}
void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setPreserveUserPaths(ConfigNodePropertyBoolean const& value)
{
    m_Preserve_user_paths = value;
    m_Preserve_user_pathsIsSet = true;
}
bool ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::preserveUserPathsIsSet() const
{
    return m_Preserve_user_pathsIsSet;
}
void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::unsetPreserve_user_paths()
{
    m_Preserve_user_pathsIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getPreserveUuid() const
{
    return m_Preserve_uuid;
}
void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setPreserveUuid(ConfigNodePropertyBoolean const& value)
{
    m_Preserve_uuid = value;
    m_Preserve_uuidIsSet = true;
}
bool ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::preserveUuidIsSet() const
{
    return m_Preserve_uuidIsSet;
}
void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::unsetPreserve_uuid()
{
    m_Preserve_uuidIsSet = false;
}
ConfigNodePropertyArray ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getPreserveUuidNodetypes() const
{
    return m_Preserve_uuid_nodetypes;
}
void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setPreserveUuidNodetypes(ConfigNodePropertyArray const& value)
{
    m_Preserve_uuid_nodetypes = value;
    m_Preserve_uuid_nodetypesIsSet = true;
}
bool ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::preserveUuidNodetypesIsSet() const
{
    return m_Preserve_uuid_nodetypesIsSet;
}
void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::unsetPreserve_uuid_nodetypes()
{
    m_Preserve_uuid_nodetypesIsSet = false;
}
ConfigNodePropertyArray ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getPreserveUuidSubtrees() const
{
    return m_Preserve_uuid_subtrees;
}
void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setPreserveUuidSubtrees(ConfigNodePropertyArray const& value)
{
    m_Preserve_uuid_subtrees = value;
    m_Preserve_uuid_subtreesIsSet = true;
}
bool ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::preserveUuidSubtreesIsSet() const
{
    return m_Preserve_uuid_subtreesIsSet;
}
void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::unsetPreserve_uuid_subtrees()
{
    m_Preserve_uuid_subtreesIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getAutoCommit() const
{
    return m_Auto_commit;
}
void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setAutoCommit(ConfigNodePropertyBoolean const& value)
{
    m_Auto_commit = value;
    m_Auto_commitIsSet = true;
}
bool ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::autoCommitIsSet() const
{
    return m_Auto_commitIsSet;
}
void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::unsetAuto_commit()
{
    m_Auto_commitIsSet = false;
}

}
}
}
}

