/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties() {
    this->init();
}

OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::~OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties() {
    
}

void
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::init() {
    m_redirect_enabled_isSet = false;
    m_redirect_stats_enabled_isSet = false;
    m_redirect_extensions_isSet = false;
    m_redirect_paths_isSet = false;
}

void
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(redirect_enabled, json[QString("redirect.enabled")]);
    
    ::OpenAPI::fromJsonValue(redirect_stats_enabled, json[QString("redirect.stats.enabled")]);
    
    ::OpenAPI::fromJsonValue(redirect_extensions, json[QString("redirect.extensions")]);
    
    ::OpenAPI::fromJsonValue(redirect_paths, json[QString("redirect.paths")]);
    
}

QString
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::asJsonObject() const {
    QJsonObject obj;
	if(redirect_enabled.isSet()){
        obj.insert(QString("redirect.enabled"), ::OpenAPI::toJsonValue(redirect_enabled));
    }
	if(redirect_stats_enabled.isSet()){
        obj.insert(QString("redirect.stats.enabled"), ::OpenAPI::toJsonValue(redirect_stats_enabled));
    }
	if(redirect_extensions.isSet()){
        obj.insert(QString("redirect.extensions"), ::OpenAPI::toJsonValue(redirect_extensions));
    }
	if(redirect_paths.isSet()){
        obj.insert(QString("redirect.paths"), ::OpenAPI::toJsonValue(redirect_paths));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::getRedirectEnabled() const {
    return redirect_enabled;
}
void
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::setRedirectEnabled(const OAIConfigNodePropertyBoolean &redirect_enabled) {
    this->redirect_enabled = redirect_enabled;
    this->m_redirect_enabled_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::getRedirectStatsEnabled() const {
    return redirect_stats_enabled;
}
void
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::setRedirectStatsEnabled(const OAIConfigNodePropertyBoolean &redirect_stats_enabled) {
    this->redirect_stats_enabled = redirect_stats_enabled;
    this->m_redirect_stats_enabled_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::getRedirectExtensions() const {
    return redirect_extensions;
}
void
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::setRedirectExtensions(const OAIConfigNodePropertyArray &redirect_extensions) {
    this->redirect_extensions = redirect_extensions;
    this->m_redirect_extensions_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::getRedirectPaths() const {
    return redirect_paths;
}
void
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::setRedirectPaths(const OAIConfigNodePropertyArray &redirect_paths) {
    this->redirect_paths = redirect_paths;
    this->m_redirect_paths_isSet = true;
}


bool
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(redirect_enabled.isSet()){ isObjectUpdated = true; break;}
    
        if(redirect_stats_enabled.isSet()){ isObjectUpdated = true; break;}
    
        if(redirect_extensions.isSet()){ isObjectUpdated = true; break;}
    
        if(redirect_paths.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

