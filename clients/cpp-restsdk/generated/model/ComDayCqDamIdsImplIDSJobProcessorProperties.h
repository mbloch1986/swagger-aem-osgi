/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqDamIdsImplIDSJobProcessorProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqDamIdsImplIDSJobProcessorProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqDamIdsImplIDSJobProcessorProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqDamIdsImplIDSJobProcessorProperties
    : public ModelBase
{
public:
    ComDayCqDamIdsImplIDSJobProcessorProperties();
    virtual ~ComDayCqDamIdsImplIDSJobProcessorProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComDayCqDamIdsImplIDSJobProcessorProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableMultisession() const;
    bool enableMultisessionIsSet() const;
    void unsetEnable_multisession();
    void setEnableMultisession(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getIdsCcEnable() const;
    bool idsCcEnableIsSet() const;
    void unsetIds_cc_enable();
    void setIdsCcEnable(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableRetry() const;
    bool enableRetryIsSet() const;
    void unsetEnable_retry();
    void setEnableRetry(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableRetryScripterror() const;
    bool enableRetryScripterrorIsSet() const;
    void unsetEnable_retry_scripterror();
    void setEnableRetryScripterror(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getExternalizerDomainCqhost() const;
    bool externalizerDomainCqhostIsSet() const;
    void unsetExternalizer_domain_cqhost();
    void setExternalizerDomainCqhost(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getExternalizerDomainHttp() const;
    bool externalizerDomainHttpIsSet() const;
    void unsetExternalizer_domain_http();
    void setExternalizerDomainHttp(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyBoolean> m_Enable_multisession;
    bool m_Enable_multisessionIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Ids_cc_enable;
    bool m_Ids_cc_enableIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Enable_retry;
    bool m_Enable_retryIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Enable_retry_scripterror;
    bool m_Enable_retry_scripterrorIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Externalizer_domain_cqhost;
    bool m_Externalizer_domain_cqhostIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Externalizer_domain_http;
    bool m_Externalizer_domain_httpIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqDamIdsImplIDSJobProcessorProperties_H_ */
