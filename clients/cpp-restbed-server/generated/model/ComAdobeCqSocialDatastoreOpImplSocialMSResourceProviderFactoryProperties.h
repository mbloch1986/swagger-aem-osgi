/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties.h
 *
 * 
 */

#ifndef ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties_H_
#define ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties
{
public:
    ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties();
    virtual ~ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSolrZkTimeout() const;
    void setSolrZkTimeout(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSolrCommit() const;
    void setSolrCommit(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getCacheOn() const;
    void setCacheOn(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getConcurrencyLevel() const;
    void setConcurrencyLevel(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCacheStartSize() const;
    void setCacheStartSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCacheTtl() const;
    void setCacheTtl(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCacheSize() const;
    void setCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Solr_zk_timeout;
    std::shared_ptr<ConfigNodePropertyString> m_Solr_commit;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Cache_on;
    std::shared_ptr<ConfigNodePropertyInteger> m_Concurrency_level;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cache_start_size;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cache_ttl;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cache_size;
};

}
}
}
}

#endif /* ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties_H_ */
