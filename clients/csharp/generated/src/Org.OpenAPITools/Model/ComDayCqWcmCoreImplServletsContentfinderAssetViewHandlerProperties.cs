/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties :  IEquatable<ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties" /> class.
        /// </summary>
        /// <param name="damShowexpired">damShowexpired.</param>
        /// <param name="damShowhidden">damShowhidden.</param>
        /// <param name="tagTitleSearch">tagTitleSearch.</param>
        /// <param name="guessTotal">guessTotal.</param>
        /// <param name="damExpiryProperty">damExpiryProperty.</param>
        public ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties(ConfigNodePropertyBoolean damShowexpired = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean damShowhidden = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean tagTitleSearch = default(ConfigNodePropertyBoolean), ConfigNodePropertyString guessTotal = default(ConfigNodePropertyString), ConfigNodePropertyString damExpiryProperty = default(ConfigNodePropertyString))
        {
            this.DamShowexpired = damShowexpired;
            this.DamShowhidden = damShowhidden;
            this.TagTitleSearch = tagTitleSearch;
            this.GuessTotal = guessTotal;
            this.DamExpiryProperty = damExpiryProperty;
        }
        
        /// <summary>
        /// Gets or Sets DamShowexpired
        /// </summary>
        [DataMember(Name="dam.showexpired", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean DamShowexpired { get; set; }

        /// <summary>
        /// Gets or Sets DamShowhidden
        /// </summary>
        [DataMember(Name="dam.showhidden", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean DamShowhidden { get; set; }

        /// <summary>
        /// Gets or Sets TagTitleSearch
        /// </summary>
        [DataMember(Name="tagTitleSearch", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean TagTitleSearch { get; set; }

        /// <summary>
        /// Gets or Sets GuessTotal
        /// </summary>
        [DataMember(Name="guessTotal", EmitDefaultValue=false)]
        public ConfigNodePropertyString GuessTotal { get; set; }

        /// <summary>
        /// Gets or Sets DamExpiryProperty
        /// </summary>
        [DataMember(Name="dam.expiryProperty", EmitDefaultValue=false)]
        public ConfigNodePropertyString DamExpiryProperty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties {\n");
            sb.Append("  DamShowexpired: ").Append(DamShowexpired).Append("\n");
            sb.Append("  DamShowhidden: ").Append(DamShowhidden).Append("\n");
            sb.Append("  TagTitleSearch: ").Append(TagTitleSearch).Append("\n");
            sb.Append("  GuessTotal: ").Append(GuessTotal).Append("\n");
            sb.Append("  DamExpiryProperty: ").Append(DamExpiryProperty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DamShowexpired == input.DamShowexpired ||
                    (this.DamShowexpired != null &&
                    this.DamShowexpired.Equals(input.DamShowexpired))
                ) && 
                (
                    this.DamShowhidden == input.DamShowhidden ||
                    (this.DamShowhidden != null &&
                    this.DamShowhidden.Equals(input.DamShowhidden))
                ) && 
                (
                    this.TagTitleSearch == input.TagTitleSearch ||
                    (this.TagTitleSearch != null &&
                    this.TagTitleSearch.Equals(input.TagTitleSearch))
                ) && 
                (
                    this.GuessTotal == input.GuessTotal ||
                    (this.GuessTotal != null &&
                    this.GuessTotal.Equals(input.GuessTotal))
                ) && 
                (
                    this.DamExpiryProperty == input.DamExpiryProperty ||
                    (this.DamExpiryProperty != null &&
                    this.DamExpiryProperty.Equals(input.DamExpiryProperty))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DamShowexpired != null)
                    hashCode = hashCode * 59 + this.DamShowexpired.GetHashCode();
                if (this.DamShowhidden != null)
                    hashCode = hashCode * 59 + this.DamShowhidden.GetHashCode();
                if (this.TagTitleSearch != null)
                    hashCode = hashCode * 59 + this.TagTitleSearch.GetHashCode();
                if (this.GuessTotal != null)
                    hashCode = hashCode * 59 + this.GuessTotal.GetHashCode();
                if (this.DamExpiryProperty != null)
                    hashCode = hashCode * 59 + this.DamExpiryProperty.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
