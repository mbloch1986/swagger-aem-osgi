/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqAccountApiAccountManagementServiceProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqAccountApiAccountManagementServiceProperties::ComAdobeCqAccountApiAccountManagementServiceProperties()
{
    m_Cq_accountmanager_token_validity_periodIsSet = false;
    m_Cq_accountmanager_config_requestnewaccount_mailIsSet = false;
    m_Cq_accountmanager_config_requestnewpwd_mailIsSet = false;
}

ComAdobeCqAccountApiAccountManagementServiceProperties::~ComAdobeCqAccountApiAccountManagementServiceProperties()
{
}

void ComAdobeCqAccountApiAccountManagementServiceProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqAccountApiAccountManagementServiceProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_accountmanager_token_validity_periodIsSet)
    {
        val[utility::conversions::to_string_t("cq.accountmanager.token.validity.period")] = ModelBase::toJson(m_Cq_accountmanager_token_validity_period);
    }
    if(m_Cq_accountmanager_config_requestnewaccount_mailIsSet)
    {
        val[utility::conversions::to_string_t("cq.accountmanager.config.requestnewaccount.mail")] = ModelBase::toJson(m_Cq_accountmanager_config_requestnewaccount_mail);
    }
    if(m_Cq_accountmanager_config_requestnewpwd_mailIsSet)
    {
        val[utility::conversions::to_string_t("cq.accountmanager.config.requestnewpwd.mail")] = ModelBase::toJson(m_Cq_accountmanager_config_requestnewpwd_mail);
    }

    return val;
}

void ComAdobeCqAccountApiAccountManagementServiceProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.accountmanager.token.validity.period")))
    {
        if(!val[utility::conversions::to_string_t("cq.accountmanager.token.validity.period")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.accountmanager.token.validity.period")]);
            setCqAccountmanagerTokenValidityPeriod( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.accountmanager.config.requestnewaccount.mail")))
    {
        if(!val[utility::conversions::to_string_t("cq.accountmanager.config.requestnewaccount.mail")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.accountmanager.config.requestnewaccount.mail")]);
            setCqAccountmanagerConfigRequestnewaccountMail( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.accountmanager.config.requestnewpwd.mail")))
    {
        if(!val[utility::conversions::to_string_t("cq.accountmanager.config.requestnewpwd.mail")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.accountmanager.config.requestnewpwd.mail")]);
            setCqAccountmanagerConfigRequestnewpwdMail( newItem );
        }
    }
}

void ComAdobeCqAccountApiAccountManagementServiceProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_accountmanager_token_validity_periodIsSet)
    {
        if (m_Cq_accountmanager_token_validity_period.get())
        {
            m_Cq_accountmanager_token_validity_period->toMultipart(multipart, utility::conversions::to_string_t("cq.accountmanager.token.validity.period."));
        }
    }
    if(m_Cq_accountmanager_config_requestnewaccount_mailIsSet)
    {
        if (m_Cq_accountmanager_config_requestnewaccount_mail.get())
        {
            m_Cq_accountmanager_config_requestnewaccount_mail->toMultipart(multipart, utility::conversions::to_string_t("cq.accountmanager.config.requestnewaccount.mail."));
        }
    }
    if(m_Cq_accountmanager_config_requestnewpwd_mailIsSet)
    {
        if (m_Cq_accountmanager_config_requestnewpwd_mail.get())
        {
            m_Cq_accountmanager_config_requestnewpwd_mail->toMultipart(multipart, utility::conversions::to_string_t("cq.accountmanager.config.requestnewpwd.mail."));
        }
    }
}

void ComAdobeCqAccountApiAccountManagementServiceProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.accountmanager.token.validity.period")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.accountmanager.token.validity.period")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.accountmanager.token.validity.period."));
            setCqAccountmanagerTokenValidityPeriod( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.accountmanager.config.requestnewaccount.mail")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.accountmanager.config.requestnewaccount.mail")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.accountmanager.config.requestnewaccount.mail."));
            setCqAccountmanagerConfigRequestnewaccountMail( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.accountmanager.config.requestnewpwd.mail")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.accountmanager.config.requestnewpwd.mail")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.accountmanager.config.requestnewpwd.mail."));
            setCqAccountmanagerConfigRequestnewpwdMail( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqAccountApiAccountManagementServiceProperties::getCqAccountmanagerTokenValidityPeriod() const
{
    return m_Cq_accountmanager_token_validity_period;
}


void ComAdobeCqAccountApiAccountManagementServiceProperties::setCqAccountmanagerTokenValidityPeriod(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_accountmanager_token_validity_period = value;
    m_Cq_accountmanager_token_validity_periodIsSet = true;
}
bool ComAdobeCqAccountApiAccountManagementServiceProperties::cqAccountmanagerTokenValidityPeriodIsSet() const
{
    return m_Cq_accountmanager_token_validity_periodIsSet;
}

void ComAdobeCqAccountApiAccountManagementServiceProperties::unsetCq_accountmanager_token_validity_period()
{
    m_Cq_accountmanager_token_validity_periodIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqAccountApiAccountManagementServiceProperties::getCqAccountmanagerConfigRequestnewaccountMail() const
{
    return m_Cq_accountmanager_config_requestnewaccount_mail;
}


void ComAdobeCqAccountApiAccountManagementServiceProperties::setCqAccountmanagerConfigRequestnewaccountMail(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_accountmanager_config_requestnewaccount_mail = value;
    m_Cq_accountmanager_config_requestnewaccount_mailIsSet = true;
}
bool ComAdobeCqAccountApiAccountManagementServiceProperties::cqAccountmanagerConfigRequestnewaccountMailIsSet() const
{
    return m_Cq_accountmanager_config_requestnewaccount_mailIsSet;
}

void ComAdobeCqAccountApiAccountManagementServiceProperties::unsetCq_accountmanager_config_requestnewaccount_mail()
{
    m_Cq_accountmanager_config_requestnewaccount_mailIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqAccountApiAccountManagementServiceProperties::getCqAccountmanagerConfigRequestnewpwdMail() const
{
    return m_Cq_accountmanager_config_requestnewpwd_mail;
}


void ComAdobeCqAccountApiAccountManagementServiceProperties::setCqAccountmanagerConfigRequestnewpwdMail(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_accountmanager_config_requestnewpwd_mail = value;
    m_Cq_accountmanager_config_requestnewpwd_mailIsSet = true;
}
bool ComAdobeCqAccountApiAccountManagementServiceProperties::cqAccountmanagerConfigRequestnewpwdMailIsSet() const
{
    return m_Cq_accountmanager_config_requestnewpwd_mailIsSet;
}

void ComAdobeCqAccountApiAccountManagementServiceProperties::unsetCq_accountmanager_config_requestnewpwd_mail()
{
    m_Cq_accountmanager_config_requestnewpwd_mailIsSet = false;
}

}
}
}
}

