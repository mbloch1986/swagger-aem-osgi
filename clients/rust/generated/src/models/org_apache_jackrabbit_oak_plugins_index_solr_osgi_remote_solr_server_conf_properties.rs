/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties {
  #[serde(rename = "solr.http.url")]
  solr_http_url: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "solr.zk.host")]
  solr_zk_host: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "solr.collection")]
  solr_collection: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "solr.socket.timeout")]
  solr_socket_timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "solr.connection.timeout")]
  solr_connection_timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "solr.shards.no")]
  solr_shards_no: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "solr.replication.factor")]
  solr_replication_factor: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "solr.conf.dir")]
  solr_conf_dir: Option<::models::ConfigNodePropertyString>
}

impl OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties {
  pub fn new() -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties {
    OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties {
      solr_http_url: None,
      solr_zk_host: None,
      solr_collection: None,
      solr_socket_timeout: None,
      solr_connection_timeout: None,
      solr_shards_no: None,
      solr_replication_factor: None,
      solr_conf_dir: None
    }
  }

  pub fn set_solr_http_url(&mut self, solr_http_url: ::models::ConfigNodePropertyString) {
    self.solr_http_url = Some(solr_http_url);
  }

  pub fn with_solr_http_url(mut self, solr_http_url: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties {
    self.solr_http_url = Some(solr_http_url);
    self
  }

  pub fn solr_http_url(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.solr_http_url.as_ref()
  }

  pub fn reset_solr_http_url(&mut self) {
    self.solr_http_url = None;
  }

  pub fn set_solr_zk_host(&mut self, solr_zk_host: ::models::ConfigNodePropertyString) {
    self.solr_zk_host = Some(solr_zk_host);
  }

  pub fn with_solr_zk_host(mut self, solr_zk_host: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties {
    self.solr_zk_host = Some(solr_zk_host);
    self
  }

  pub fn solr_zk_host(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.solr_zk_host.as_ref()
  }

  pub fn reset_solr_zk_host(&mut self) {
    self.solr_zk_host = None;
  }

  pub fn set_solr_collection(&mut self, solr_collection: ::models::ConfigNodePropertyString) {
    self.solr_collection = Some(solr_collection);
  }

  pub fn with_solr_collection(mut self, solr_collection: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties {
    self.solr_collection = Some(solr_collection);
    self
  }

  pub fn solr_collection(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.solr_collection.as_ref()
  }

  pub fn reset_solr_collection(&mut self) {
    self.solr_collection = None;
  }

  pub fn set_solr_socket_timeout(&mut self, solr_socket_timeout: ::models::ConfigNodePropertyInteger) {
    self.solr_socket_timeout = Some(solr_socket_timeout);
  }

  pub fn with_solr_socket_timeout(mut self, solr_socket_timeout: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties {
    self.solr_socket_timeout = Some(solr_socket_timeout);
    self
  }

  pub fn solr_socket_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.solr_socket_timeout.as_ref()
  }

  pub fn reset_solr_socket_timeout(&mut self) {
    self.solr_socket_timeout = None;
  }

  pub fn set_solr_connection_timeout(&mut self, solr_connection_timeout: ::models::ConfigNodePropertyInteger) {
    self.solr_connection_timeout = Some(solr_connection_timeout);
  }

  pub fn with_solr_connection_timeout(mut self, solr_connection_timeout: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties {
    self.solr_connection_timeout = Some(solr_connection_timeout);
    self
  }

  pub fn solr_connection_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.solr_connection_timeout.as_ref()
  }

  pub fn reset_solr_connection_timeout(&mut self) {
    self.solr_connection_timeout = None;
  }

  pub fn set_solr_shards_no(&mut self, solr_shards_no: ::models::ConfigNodePropertyInteger) {
    self.solr_shards_no = Some(solr_shards_no);
  }

  pub fn with_solr_shards_no(mut self, solr_shards_no: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties {
    self.solr_shards_no = Some(solr_shards_no);
    self
  }

  pub fn solr_shards_no(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.solr_shards_no.as_ref()
  }

  pub fn reset_solr_shards_no(&mut self) {
    self.solr_shards_no = None;
  }

  pub fn set_solr_replication_factor(&mut self, solr_replication_factor: ::models::ConfigNodePropertyInteger) {
    self.solr_replication_factor = Some(solr_replication_factor);
  }

  pub fn with_solr_replication_factor(mut self, solr_replication_factor: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties {
    self.solr_replication_factor = Some(solr_replication_factor);
    self
  }

  pub fn solr_replication_factor(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.solr_replication_factor.as_ref()
  }

  pub fn reset_solr_replication_factor(&mut self) {
    self.solr_replication_factor = None;
  }

  pub fn set_solr_conf_dir(&mut self, solr_conf_dir: ::models::ConfigNodePropertyString) {
    self.solr_conf_dir = Some(solr_conf_dir);
  }

  pub fn with_solr_conf_dir(mut self, solr_conf_dir: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties {
    self.solr_conf_dir = Some(solr_conf_dir);
    self
  }

  pub fn solr_conf_dir(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.solr_conf_dir.as_ref()
  }

  pub fn reset_solr_conf_dir(&mut self) {
    self.solr_conf_dir = None;
  }

}



