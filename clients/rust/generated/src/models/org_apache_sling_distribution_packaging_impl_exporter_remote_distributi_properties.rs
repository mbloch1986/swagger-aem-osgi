/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties {
  #[serde(rename = "name")]
  name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "endpoints")]
  endpoints: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "pull.items")]
  pull_items: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "packageBuilder.target")]
  package_builder_target: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "transportSecretProvider.target")]
  transport_secret_provider_target: Option<::models::ConfigNodePropertyString>
}

impl OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties {
  pub fn new() -> OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties {
    OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties {
      name: None,
      endpoints: None,
      pull_items: None,
      package_builder_target: None,
      transport_secret_provider_target: None
    }
  }

  pub fn set_name(&mut self, name: ::models::ConfigNodePropertyString) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_endpoints(&mut self, endpoints: ::models::ConfigNodePropertyArray) {
    self.endpoints = Some(endpoints);
  }

  pub fn with_endpoints(mut self, endpoints: ::models::ConfigNodePropertyArray) -> OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties {
    self.endpoints = Some(endpoints);
    self
  }

  pub fn endpoints(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.endpoints.as_ref()
  }

  pub fn reset_endpoints(&mut self) {
    self.endpoints = None;
  }

  pub fn set_pull_items(&mut self, pull_items: ::models::ConfigNodePropertyInteger) {
    self.pull_items = Some(pull_items);
  }

  pub fn with_pull_items(mut self, pull_items: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties {
    self.pull_items = Some(pull_items);
    self
  }

  pub fn pull_items(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.pull_items.as_ref()
  }

  pub fn reset_pull_items(&mut self) {
    self.pull_items = None;
  }

  pub fn set_package_builder_target(&mut self, package_builder_target: ::models::ConfigNodePropertyString) {
    self.package_builder_target = Some(package_builder_target);
  }

  pub fn with_package_builder_target(mut self, package_builder_target: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties {
    self.package_builder_target = Some(package_builder_target);
    self
  }

  pub fn package_builder_target(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.package_builder_target.as_ref()
  }

  pub fn reset_package_builder_target(&mut self) {
    self.package_builder_target = None;
  }

  pub fn set_transport_secret_provider_target(&mut self, transport_secret_provider_target: ::models::ConfigNodePropertyString) {
    self.transport_secret_provider_target = Some(transport_secret_provider_target);
  }

  pub fn with_transport_secret_provider_target(mut self, transport_secret_provider_target: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties {
    self.transport_secret_provider_target = Some(transport_secret_provider_target);
    self
  }

  pub fn transport_secret_provider_target(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.transport_secret_provider_target.as_ref()
  }

  pub fn reset_transport_secret_provider_target(&mut self) {
    self.transport_secret_provider_target = None;
  }

}



