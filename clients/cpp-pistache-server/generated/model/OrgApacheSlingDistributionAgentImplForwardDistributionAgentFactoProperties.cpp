/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties()
{
    m_NameIsSet = false;
    m_TitleIsSet = false;
    m_DetailsIsSet = false;
    m_EnabledIsSet = false;
    m_ServiceNameIsSet = false;
    m_Log_levelIsSet = false;
    m_Allowed_rootsIsSet = false;
    m_Queue_processing_enabledIsSet = false;
    m_PackageImporter_endpointsIsSet = false;
    m_PassiveQueuesIsSet = false;
    m_PriorityQueuesIsSet = false;
    m_Retry_strategyIsSet = false;
    m_Retry_attemptsIsSet = false;
    m_RequestAuthorizationStrategy_targetIsSet = false;
    m_TransportSecretProvider_targetIsSet = false;
    m_PackageBuilder_targetIsSet = false;
    m_Triggers_targetIsSet = false;
    m_Queue_providerIsSet = false;
    m_Async_deliveryIsSet = false;
    m_Http_conn_timeoutIsSet = false;
    
}

OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::~OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties()
{
}

void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_TitleIsSet)
    {
        val["title"] = ModelBase::toJson(m_Title);
    }
    if(m_DetailsIsSet)
    {
        val["details"] = ModelBase::toJson(m_Details);
    }
    if(m_EnabledIsSet)
    {
        val["enabled"] = ModelBase::toJson(m_Enabled);
    }
    if(m_ServiceNameIsSet)
    {
        val["serviceName"] = ModelBase::toJson(m_ServiceName);
    }
    if(m_Log_levelIsSet)
    {
        val["log.level"] = ModelBase::toJson(m_Log_level);
    }
    if(m_Allowed_rootsIsSet)
    {
        val["allowed.roots"] = ModelBase::toJson(m_Allowed_roots);
    }
    if(m_Queue_processing_enabledIsSet)
    {
        val["queue.processing.enabled"] = ModelBase::toJson(m_Queue_processing_enabled);
    }
    if(m_PackageImporter_endpointsIsSet)
    {
        val["packageImporter.endpoints"] = ModelBase::toJson(m_PackageImporter_endpoints);
    }
    if(m_PassiveQueuesIsSet)
    {
        val["passiveQueues"] = ModelBase::toJson(m_PassiveQueues);
    }
    if(m_PriorityQueuesIsSet)
    {
        val["priorityQueues"] = ModelBase::toJson(m_PriorityQueues);
    }
    if(m_Retry_strategyIsSet)
    {
        val["retry.strategy"] = ModelBase::toJson(m_Retry_strategy);
    }
    if(m_Retry_attemptsIsSet)
    {
        val["retry.attempts"] = ModelBase::toJson(m_Retry_attempts);
    }
    if(m_RequestAuthorizationStrategy_targetIsSet)
    {
        val["requestAuthorizationStrategy.target"] = ModelBase::toJson(m_RequestAuthorizationStrategy_target);
    }
    if(m_TransportSecretProvider_targetIsSet)
    {
        val["transportSecretProvider.target"] = ModelBase::toJson(m_TransportSecretProvider_target);
    }
    if(m_PackageBuilder_targetIsSet)
    {
        val["packageBuilder.target"] = ModelBase::toJson(m_PackageBuilder_target);
    }
    if(m_Triggers_targetIsSet)
    {
        val["triggers.target"] = ModelBase::toJson(m_Triggers_target);
    }
    if(m_Queue_providerIsSet)
    {
        val["queue.provider"] = ModelBase::toJson(m_Queue_provider);
    }
    if(m_Async_deliveryIsSet)
    {
        val["async.delivery"] = ModelBase::toJson(m_Async_delivery);
    }
    if(m_Http_conn_timeoutIsSet)
    {
        val["http.conn.timeout"] = ModelBase::toJson(m_Http_conn_timeout);
    }
    

    return val;
}

void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::fromJson(nlohmann::json& val)
{
    if(val.find("name") != val.end())
    {
        if(!val["name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["name"]);
            setName( newItem );
        }
        
    }
    if(val.find("title") != val.end())
    {
        if(!val["title"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["title"]);
            setTitle( newItem );
        }
        
    }
    if(val.find("details") != val.end())
    {
        if(!val["details"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["details"]);
            setDetails( newItem );
        }
        
    }
    if(val.find("enabled") != val.end())
    {
        if(!val["enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enabled"]);
            setEnabled( newItem );
        }
        
    }
    if(val.find("serviceName") != val.end())
    {
        if(!val["serviceName"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["serviceName"]);
            setServiceName( newItem );
        }
        
    }
    if(val.find("log.level") != val.end())
    {
        if(!val["log.level"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["log.level"]);
            setLogLevel( newItem );
        }
        
    }
    if(val.find("allowed.roots") != val.end())
    {
        if(!val["allowed.roots"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["allowed.roots"]);
            setAllowedRoots( newItem );
        }
        
    }
    if(val.find("queue.processing.enabled") != val.end())
    {
        if(!val["queue.processing.enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["queue.processing.enabled"]);
            setQueueProcessingEnabled( newItem );
        }
        
    }
    if(val.find("packageImporter.endpoints") != val.end())
    {
        if(!val["packageImporter.endpoints"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["packageImporter.endpoints"]);
            setPackageImporterEndpoints( newItem );
        }
        
    }
    if(val.find("passiveQueues") != val.end())
    {
        if(!val["passiveQueues"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["passiveQueues"]);
            setPassiveQueues( newItem );
        }
        
    }
    if(val.find("priorityQueues") != val.end())
    {
        if(!val["priorityQueues"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["priorityQueues"]);
            setPriorityQueues( newItem );
        }
        
    }
    if(val.find("retry.strategy") != val.end())
    {
        if(!val["retry.strategy"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["retry.strategy"]);
            setRetryStrategy( newItem );
        }
        
    }
    if(val.find("retry.attempts") != val.end())
    {
        if(!val["retry.attempts"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["retry.attempts"]);
            setRetryAttempts( newItem );
        }
        
    }
    if(val.find("requestAuthorizationStrategy.target") != val.end())
    {
        if(!val["requestAuthorizationStrategy.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["requestAuthorizationStrategy.target"]);
            setRequestAuthorizationStrategyTarget( newItem );
        }
        
    }
    if(val.find("transportSecretProvider.target") != val.end())
    {
        if(!val["transportSecretProvider.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["transportSecretProvider.target"]);
            setTransportSecretProviderTarget( newItem );
        }
        
    }
    if(val.find("packageBuilder.target") != val.end())
    {
        if(!val["packageBuilder.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["packageBuilder.target"]);
            setPackageBuilderTarget( newItem );
        }
        
    }
    if(val.find("triggers.target") != val.end())
    {
        if(!val["triggers.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["triggers.target"]);
            setTriggersTarget( newItem );
        }
        
    }
    if(val.find("queue.provider") != val.end())
    {
        if(!val["queue.provider"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["queue.provider"]);
            setQueueProvider( newItem );
        }
        
    }
    if(val.find("async.delivery") != val.end())
    {
        if(!val["async.delivery"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["async.delivery"]);
            setAsyncDelivery( newItem );
        }
        
    }
    if(val.find("http.conn.timeout") != val.end())
    {
        if(!val["http.conn.timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["http.conn.timeout"]);
            setHttpConnTimeout( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::getName() const
{
    return m_Name;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::setName(ConfigNodePropertyString const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::nameIsSet() const
{
    return m_NameIsSet;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::unsetName()
{
    m_NameIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::getTitle() const
{
    return m_Title;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::setTitle(ConfigNodePropertyString const& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::titleIsSet() const
{
    return m_TitleIsSet;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::unsetTitle()
{
    m_TitleIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::getDetails() const
{
    return m_Details;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::setDetails(ConfigNodePropertyString const& value)
{
    m_Details = value;
    m_DetailsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::detailsIsSet() const
{
    return m_DetailsIsSet;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::unsetDetails()
{
    m_DetailsIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::getEnabled() const
{
    return m_Enabled;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::setEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::enabledIsSet() const
{
    return m_EnabledIsSet;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::unsetEnabled()
{
    m_EnabledIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::getServiceName() const
{
    return m_ServiceName;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::setServiceName(ConfigNodePropertyString const& value)
{
    m_ServiceName = value;
    m_ServiceNameIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::serviceNameIsSet() const
{
    return m_ServiceNameIsSet;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::unsetServiceName()
{
    m_ServiceNameIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::getLogLevel() const
{
    return m_Log_level;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::setLogLevel(ConfigNodePropertyDropDown const& value)
{
    m_Log_level = value;
    m_Log_levelIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::logLevelIsSet() const
{
    return m_Log_levelIsSet;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::unsetLog_level()
{
    m_Log_levelIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::getAllowedRoots() const
{
    return m_Allowed_roots;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::setAllowedRoots(ConfigNodePropertyArray const& value)
{
    m_Allowed_roots = value;
    m_Allowed_rootsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::allowedRootsIsSet() const
{
    return m_Allowed_rootsIsSet;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::unsetAllowed_roots()
{
    m_Allowed_rootsIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::getQueueProcessingEnabled() const
{
    return m_Queue_processing_enabled;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::setQueueProcessingEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Queue_processing_enabled = value;
    m_Queue_processing_enabledIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::queueProcessingEnabledIsSet() const
{
    return m_Queue_processing_enabledIsSet;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::unsetQueue_processing_enabled()
{
    m_Queue_processing_enabledIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::getPackageImporterEndpoints() const
{
    return m_PackageImporter_endpoints;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::setPackageImporterEndpoints(ConfigNodePropertyArray const& value)
{
    m_PackageImporter_endpoints = value;
    m_PackageImporter_endpointsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::packageImporterEndpointsIsSet() const
{
    return m_PackageImporter_endpointsIsSet;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::unsetPackageImporter_endpoints()
{
    m_PackageImporter_endpointsIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::getPassiveQueues() const
{
    return m_PassiveQueues;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::setPassiveQueues(ConfigNodePropertyArray const& value)
{
    m_PassiveQueues = value;
    m_PassiveQueuesIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::passiveQueuesIsSet() const
{
    return m_PassiveQueuesIsSet;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::unsetPassiveQueues()
{
    m_PassiveQueuesIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::getPriorityQueues() const
{
    return m_PriorityQueues;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::setPriorityQueues(ConfigNodePropertyArray const& value)
{
    m_PriorityQueues = value;
    m_PriorityQueuesIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::priorityQueuesIsSet() const
{
    return m_PriorityQueuesIsSet;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::unsetPriorityQueues()
{
    m_PriorityQueuesIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::getRetryStrategy() const
{
    return m_Retry_strategy;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::setRetryStrategy(ConfigNodePropertyDropDown const& value)
{
    m_Retry_strategy = value;
    m_Retry_strategyIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::retryStrategyIsSet() const
{
    return m_Retry_strategyIsSet;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::unsetRetry_strategy()
{
    m_Retry_strategyIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::getRetryAttempts() const
{
    return m_Retry_attempts;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::setRetryAttempts(ConfigNodePropertyInteger const& value)
{
    m_Retry_attempts = value;
    m_Retry_attemptsIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::retryAttemptsIsSet() const
{
    return m_Retry_attemptsIsSet;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::unsetRetry_attempts()
{
    m_Retry_attemptsIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::getRequestAuthorizationStrategyTarget() const
{
    return m_RequestAuthorizationStrategy_target;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::setRequestAuthorizationStrategyTarget(ConfigNodePropertyString const& value)
{
    m_RequestAuthorizationStrategy_target = value;
    m_RequestAuthorizationStrategy_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::requestAuthorizationStrategyTargetIsSet() const
{
    return m_RequestAuthorizationStrategy_targetIsSet;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::unsetRequestAuthorizationStrategy_target()
{
    m_RequestAuthorizationStrategy_targetIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::getTransportSecretProviderTarget() const
{
    return m_TransportSecretProvider_target;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::setTransportSecretProviderTarget(ConfigNodePropertyString const& value)
{
    m_TransportSecretProvider_target = value;
    m_TransportSecretProvider_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::transportSecretProviderTargetIsSet() const
{
    return m_TransportSecretProvider_targetIsSet;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::unsetTransportSecretProvider_target()
{
    m_TransportSecretProvider_targetIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::getPackageBuilderTarget() const
{
    return m_PackageBuilder_target;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::setPackageBuilderTarget(ConfigNodePropertyString const& value)
{
    m_PackageBuilder_target = value;
    m_PackageBuilder_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::packageBuilderTargetIsSet() const
{
    return m_PackageBuilder_targetIsSet;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::unsetPackageBuilder_target()
{
    m_PackageBuilder_targetIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::getTriggersTarget() const
{
    return m_Triggers_target;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::setTriggersTarget(ConfigNodePropertyString const& value)
{
    m_Triggers_target = value;
    m_Triggers_targetIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::triggersTargetIsSet() const
{
    return m_Triggers_targetIsSet;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::unsetTriggers_target()
{
    m_Triggers_targetIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::getQueueProvider() const
{
    return m_Queue_provider;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::setQueueProvider(ConfigNodePropertyDropDown const& value)
{
    m_Queue_provider = value;
    m_Queue_providerIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::queueProviderIsSet() const
{
    return m_Queue_providerIsSet;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::unsetQueue_provider()
{
    m_Queue_providerIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::getAsyncDelivery() const
{
    return m_Async_delivery;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::setAsyncDelivery(ConfigNodePropertyBoolean const& value)
{
    m_Async_delivery = value;
    m_Async_deliveryIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::asyncDeliveryIsSet() const
{
    return m_Async_deliveryIsSet;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::unsetAsync_delivery()
{
    m_Async_deliveryIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::getHttpConnTimeout() const
{
    return m_Http_conn_timeout;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::setHttpConnTimeout(ConfigNodePropertyInteger const& value)
{
    m_Http_conn_timeout = value;
    m_Http_conn_timeoutIsSet = true;
}
bool OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::httpConnTimeoutIsSet() const
{
    return m_Http_conn_timeoutIsSet;
}
void OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties::unsetHttp_conn_timeout()
{
    m_Http_conn_timeoutIsSet = false;
}

}
}
}
}

