/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties() {
    init();
}

OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::~OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties() {
    this->cleanup();
}

void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::init() {
    mongouri = new OAIConfigNodePropertyString();
    m_mongouri_isSet = false;
    db = new OAIConfigNodePropertyString();
    m_db_isSet = false;
    socket_keep_alive = new OAIConfigNodePropertyBoolean();
    m_socket_keep_alive_isSet = false;
    cache = new OAIConfigNodePropertyInteger();
    m_cache_isSet = false;
    node_cache_percentage = new OAIConfigNodePropertyInteger();
    m_node_cache_percentage_isSet = false;
    prev_doc_cache_percentage = new OAIConfigNodePropertyInteger();
    m_prev_doc_cache_percentage_isSet = false;
    children_cache_percentage = new OAIConfigNodePropertyInteger();
    m_children_cache_percentage_isSet = false;
    diff_cache_percentage = new OAIConfigNodePropertyInteger();
    m_diff_cache_percentage_isSet = false;
    cache_segment_count = new OAIConfigNodePropertyInteger();
    m_cache_segment_count_isSet = false;
    cache_stack_move_distance = new OAIConfigNodePropertyInteger();
    m_cache_stack_move_distance_isSet = false;
    blob_cache_size = new OAIConfigNodePropertyInteger();
    m_blob_cache_size_isSet = false;
    persistent_cache = new OAIConfigNodePropertyString();
    m_persistent_cache_isSet = false;
    journal_cache = new OAIConfigNodePropertyString();
    m_journal_cache_isSet = false;
    custom_blob_store = new OAIConfigNodePropertyBoolean();
    m_custom_blob_store_isSet = false;
    journal_gc_interval = new OAIConfigNodePropertyInteger();
    m_journal_gc_interval_isSet = false;
    journal_gc_max_age = new OAIConfigNodePropertyInteger();
    m_journal_gc_max_age_isSet = false;
    prefetch_external_changes = new OAIConfigNodePropertyBoolean();
    m_prefetch_external_changes_isSet = false;
    role = new OAIConfigNodePropertyString();
    m_role_isSet = false;
    version_gc_max_age_in_secs = new OAIConfigNodePropertyInteger();
    m_version_gc_max_age_in_secs_isSet = false;
    version_gc_expression = new OAIConfigNodePropertyString();
    m_version_gc_expression_isSet = false;
    version_gc_time_limit_in_secs = new OAIConfigNodePropertyInteger();
    m_version_gc_time_limit_in_secs_isSet = false;
    blob_gc_max_age_in_secs = new OAIConfigNodePropertyInteger();
    m_blob_gc_max_age_in_secs_isSet = false;
    blob_track_snapshot_interval_in_secs = new OAIConfigNodePropertyInteger();
    m_blob_track_snapshot_interval_in_secs_isSet = false;
    repository_home = new OAIConfigNodePropertyString();
    m_repository_home_isSet = false;
    max_replication_lag_in_secs = new OAIConfigNodePropertyInteger();
    m_max_replication_lag_in_secs_isSet = false;
    document_store_type = new OAIConfigNodePropertyDropDown();
    m_document_store_type_isSet = false;
    bundling_disabled = new OAIConfigNodePropertyBoolean();
    m_bundling_disabled_isSet = false;
    update_limit = new OAIConfigNodePropertyInteger();
    m_update_limit_isSet = false;
    persistent_cache_includes = new OAIConfigNodePropertyArray();
    m_persistent_cache_includes_isSet = false;
    lease_check_mode = new OAIConfigNodePropertyDropDown();
    m_lease_check_mode_isSet = false;
}

void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::cleanup() {
    if(mongouri != nullptr) { 
        delete mongouri;
    }
    if(db != nullptr) { 
        delete db;
    }
    if(socket_keep_alive != nullptr) { 
        delete socket_keep_alive;
    }
    if(cache != nullptr) { 
        delete cache;
    }
    if(node_cache_percentage != nullptr) { 
        delete node_cache_percentage;
    }
    if(prev_doc_cache_percentage != nullptr) { 
        delete prev_doc_cache_percentage;
    }
    if(children_cache_percentage != nullptr) { 
        delete children_cache_percentage;
    }
    if(diff_cache_percentage != nullptr) { 
        delete diff_cache_percentage;
    }
    if(cache_segment_count != nullptr) { 
        delete cache_segment_count;
    }
    if(cache_stack_move_distance != nullptr) { 
        delete cache_stack_move_distance;
    }
    if(blob_cache_size != nullptr) { 
        delete blob_cache_size;
    }
    if(persistent_cache != nullptr) { 
        delete persistent_cache;
    }
    if(journal_cache != nullptr) { 
        delete journal_cache;
    }
    if(custom_blob_store != nullptr) { 
        delete custom_blob_store;
    }
    if(journal_gc_interval != nullptr) { 
        delete journal_gc_interval;
    }
    if(journal_gc_max_age != nullptr) { 
        delete journal_gc_max_age;
    }
    if(prefetch_external_changes != nullptr) { 
        delete prefetch_external_changes;
    }
    if(role != nullptr) { 
        delete role;
    }
    if(version_gc_max_age_in_secs != nullptr) { 
        delete version_gc_max_age_in_secs;
    }
    if(version_gc_expression != nullptr) { 
        delete version_gc_expression;
    }
    if(version_gc_time_limit_in_secs != nullptr) { 
        delete version_gc_time_limit_in_secs;
    }
    if(blob_gc_max_age_in_secs != nullptr) { 
        delete blob_gc_max_age_in_secs;
    }
    if(blob_track_snapshot_interval_in_secs != nullptr) { 
        delete blob_track_snapshot_interval_in_secs;
    }
    if(repository_home != nullptr) { 
        delete repository_home;
    }
    if(max_replication_lag_in_secs != nullptr) { 
        delete max_replication_lag_in_secs;
    }
    if(document_store_type != nullptr) { 
        delete document_store_type;
    }
    if(bundling_disabled != nullptr) { 
        delete bundling_disabled;
    }
    if(update_limit != nullptr) { 
        delete update_limit;
    }
    if(persistent_cache_includes != nullptr) { 
        delete persistent_cache_includes;
    }
    if(lease_check_mode != nullptr) { 
        delete lease_check_mode;
    }
}

OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&mongouri, pJson["mongouri"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&db, pJson["db"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&socket_keep_alive, pJson["socketKeepAlive"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&cache, pJson["cache"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&node_cache_percentage, pJson["nodeCachePercentage"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&prev_doc_cache_percentage, pJson["prevDocCachePercentage"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&children_cache_percentage, pJson["childrenCachePercentage"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&diff_cache_percentage, pJson["diffCachePercentage"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cache_segment_count, pJson["cacheSegmentCount"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cache_stack_move_distance, pJson["cacheStackMoveDistance"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&blob_cache_size, pJson["blobCacheSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&persistent_cache, pJson["persistentCache"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&journal_cache, pJson["journalCache"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&custom_blob_store, pJson["customBlobStore"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&journal_gc_interval, pJson["journalGCInterval"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&journal_gc_max_age, pJson["journalGCMaxAge"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&prefetch_external_changes, pJson["prefetchExternalChanges"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&role, pJson["role"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&version_gc_max_age_in_secs, pJson["versionGcMaxAgeInSecs"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&version_gc_expression, pJson["versionGCExpression"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&version_gc_time_limit_in_secs, pJson["versionGCTimeLimitInSecs"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&blob_gc_max_age_in_secs, pJson["blobGcMaxAgeInSecs"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&blob_track_snapshot_interval_in_secs, pJson["blobTrackSnapshotIntervalInSecs"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&repository_home, pJson["repository.home"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&max_replication_lag_in_secs, pJson["maxReplicationLagInSecs"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&document_store_type, pJson["documentStoreType"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&bundling_disabled, pJson["bundlingDisabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&update_limit, pJson["updateLimit"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&persistent_cache_includes, pJson["persistentCacheIncludes"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&lease_check_mode, pJson["leaseCheckMode"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
}

QString
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::asJsonObject() {
    QJsonObject obj;
    if((mongouri != nullptr) && (mongouri->isSet())){
        toJsonValue(QString("mongouri"), mongouri, obj, QString("OAIConfigNodePropertyString"));
    }
    if((db != nullptr) && (db->isSet())){
        toJsonValue(QString("db"), db, obj, QString("OAIConfigNodePropertyString"));
    }
    if((socket_keep_alive != nullptr) && (socket_keep_alive->isSet())){
        toJsonValue(QString("socketKeepAlive"), socket_keep_alive, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((cache != nullptr) && (cache->isSet())){
        toJsonValue(QString("cache"), cache, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((node_cache_percentage != nullptr) && (node_cache_percentage->isSet())){
        toJsonValue(QString("nodeCachePercentage"), node_cache_percentage, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((prev_doc_cache_percentage != nullptr) && (prev_doc_cache_percentage->isSet())){
        toJsonValue(QString("prevDocCachePercentage"), prev_doc_cache_percentage, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((children_cache_percentage != nullptr) && (children_cache_percentage->isSet())){
        toJsonValue(QString("childrenCachePercentage"), children_cache_percentage, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((diff_cache_percentage != nullptr) && (diff_cache_percentage->isSet())){
        toJsonValue(QString("diffCachePercentage"), diff_cache_percentage, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cache_segment_count != nullptr) && (cache_segment_count->isSet())){
        toJsonValue(QString("cacheSegmentCount"), cache_segment_count, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cache_stack_move_distance != nullptr) && (cache_stack_move_distance->isSet())){
        toJsonValue(QString("cacheStackMoveDistance"), cache_stack_move_distance, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((blob_cache_size != nullptr) && (blob_cache_size->isSet())){
        toJsonValue(QString("blobCacheSize"), blob_cache_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((persistent_cache != nullptr) && (persistent_cache->isSet())){
        toJsonValue(QString("persistentCache"), persistent_cache, obj, QString("OAIConfigNodePropertyString"));
    }
    if((journal_cache != nullptr) && (journal_cache->isSet())){
        toJsonValue(QString("journalCache"), journal_cache, obj, QString("OAIConfigNodePropertyString"));
    }
    if((custom_blob_store != nullptr) && (custom_blob_store->isSet())){
        toJsonValue(QString("customBlobStore"), custom_blob_store, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((journal_gc_interval != nullptr) && (journal_gc_interval->isSet())){
        toJsonValue(QString("journalGCInterval"), journal_gc_interval, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((journal_gc_max_age != nullptr) && (journal_gc_max_age->isSet())){
        toJsonValue(QString("journalGCMaxAge"), journal_gc_max_age, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((prefetch_external_changes != nullptr) && (prefetch_external_changes->isSet())){
        toJsonValue(QString("prefetchExternalChanges"), prefetch_external_changes, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((role != nullptr) && (role->isSet())){
        toJsonValue(QString("role"), role, obj, QString("OAIConfigNodePropertyString"));
    }
    if((version_gc_max_age_in_secs != nullptr) && (version_gc_max_age_in_secs->isSet())){
        toJsonValue(QString("versionGcMaxAgeInSecs"), version_gc_max_age_in_secs, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((version_gc_expression != nullptr) && (version_gc_expression->isSet())){
        toJsonValue(QString("versionGCExpression"), version_gc_expression, obj, QString("OAIConfigNodePropertyString"));
    }
    if((version_gc_time_limit_in_secs != nullptr) && (version_gc_time_limit_in_secs->isSet())){
        toJsonValue(QString("versionGCTimeLimitInSecs"), version_gc_time_limit_in_secs, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((blob_gc_max_age_in_secs != nullptr) && (blob_gc_max_age_in_secs->isSet())){
        toJsonValue(QString("blobGcMaxAgeInSecs"), blob_gc_max_age_in_secs, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((blob_track_snapshot_interval_in_secs != nullptr) && (blob_track_snapshot_interval_in_secs->isSet())){
        toJsonValue(QString("blobTrackSnapshotIntervalInSecs"), blob_track_snapshot_interval_in_secs, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((repository_home != nullptr) && (repository_home->isSet())){
        toJsonValue(QString("repository.home"), repository_home, obj, QString("OAIConfigNodePropertyString"));
    }
    if((max_replication_lag_in_secs != nullptr) && (max_replication_lag_in_secs->isSet())){
        toJsonValue(QString("maxReplicationLagInSecs"), max_replication_lag_in_secs, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((document_store_type != nullptr) && (document_store_type->isSet())){
        toJsonValue(QString("documentStoreType"), document_store_type, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((bundling_disabled != nullptr) && (bundling_disabled->isSet())){
        toJsonValue(QString("bundlingDisabled"), bundling_disabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((update_limit != nullptr) && (update_limit->isSet())){
        toJsonValue(QString("updateLimit"), update_limit, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((persistent_cache_includes != nullptr) && (persistent_cache_includes->isSet())){
        toJsonValue(QString("persistentCacheIncludes"), persistent_cache_includes, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((lease_check_mode != nullptr) && (lease_check_mode->isSet())){
        toJsonValue(QString("leaseCheckMode"), lease_check_mode, obj, QString("OAIConfigNodePropertyDropDown"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getMongouri() {
    return mongouri;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setMongouri(OAIConfigNodePropertyString* mongouri) {
    this->mongouri = mongouri;
    this->m_mongouri_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getDb() {
    return db;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setDb(OAIConfigNodePropertyString* db) {
    this->db = db;
    this->m_db_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getSocketKeepAlive() {
    return socket_keep_alive;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setSocketKeepAlive(OAIConfigNodePropertyBoolean* socket_keep_alive) {
    this->socket_keep_alive = socket_keep_alive;
    this->m_socket_keep_alive_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getCache() {
    return cache;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setCache(OAIConfigNodePropertyInteger* cache) {
    this->cache = cache;
    this->m_cache_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getNodeCachePercentage() {
    return node_cache_percentage;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setNodeCachePercentage(OAIConfigNodePropertyInteger* node_cache_percentage) {
    this->node_cache_percentage = node_cache_percentage;
    this->m_node_cache_percentage_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getPrevDocCachePercentage() {
    return prev_doc_cache_percentage;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setPrevDocCachePercentage(OAIConfigNodePropertyInteger* prev_doc_cache_percentage) {
    this->prev_doc_cache_percentage = prev_doc_cache_percentage;
    this->m_prev_doc_cache_percentage_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getChildrenCachePercentage() {
    return children_cache_percentage;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setChildrenCachePercentage(OAIConfigNodePropertyInteger* children_cache_percentage) {
    this->children_cache_percentage = children_cache_percentage;
    this->m_children_cache_percentage_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getDiffCachePercentage() {
    return diff_cache_percentage;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setDiffCachePercentage(OAIConfigNodePropertyInteger* diff_cache_percentage) {
    this->diff_cache_percentage = diff_cache_percentage;
    this->m_diff_cache_percentage_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getCacheSegmentCount() {
    return cache_segment_count;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setCacheSegmentCount(OAIConfigNodePropertyInteger* cache_segment_count) {
    this->cache_segment_count = cache_segment_count;
    this->m_cache_segment_count_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getCacheStackMoveDistance() {
    return cache_stack_move_distance;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setCacheStackMoveDistance(OAIConfigNodePropertyInteger* cache_stack_move_distance) {
    this->cache_stack_move_distance = cache_stack_move_distance;
    this->m_cache_stack_move_distance_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getBlobCacheSize() {
    return blob_cache_size;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setBlobCacheSize(OAIConfigNodePropertyInteger* blob_cache_size) {
    this->blob_cache_size = blob_cache_size;
    this->m_blob_cache_size_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getPersistentCache() {
    return persistent_cache;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setPersistentCache(OAIConfigNodePropertyString* persistent_cache) {
    this->persistent_cache = persistent_cache;
    this->m_persistent_cache_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getJournalCache() {
    return journal_cache;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setJournalCache(OAIConfigNodePropertyString* journal_cache) {
    this->journal_cache = journal_cache;
    this->m_journal_cache_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getCustomBlobStore() {
    return custom_blob_store;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setCustomBlobStore(OAIConfigNodePropertyBoolean* custom_blob_store) {
    this->custom_blob_store = custom_blob_store;
    this->m_custom_blob_store_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getJournalGcInterval() {
    return journal_gc_interval;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setJournalGcInterval(OAIConfigNodePropertyInteger* journal_gc_interval) {
    this->journal_gc_interval = journal_gc_interval;
    this->m_journal_gc_interval_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getJournalGcMaxAge() {
    return journal_gc_max_age;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setJournalGcMaxAge(OAIConfigNodePropertyInteger* journal_gc_max_age) {
    this->journal_gc_max_age = journal_gc_max_age;
    this->m_journal_gc_max_age_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getPrefetchExternalChanges() {
    return prefetch_external_changes;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setPrefetchExternalChanges(OAIConfigNodePropertyBoolean* prefetch_external_changes) {
    this->prefetch_external_changes = prefetch_external_changes;
    this->m_prefetch_external_changes_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getRole() {
    return role;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setRole(OAIConfigNodePropertyString* role) {
    this->role = role;
    this->m_role_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getVersionGcMaxAgeInSecs() {
    return version_gc_max_age_in_secs;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setVersionGcMaxAgeInSecs(OAIConfigNodePropertyInteger* version_gc_max_age_in_secs) {
    this->version_gc_max_age_in_secs = version_gc_max_age_in_secs;
    this->m_version_gc_max_age_in_secs_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getVersionGcExpression() {
    return version_gc_expression;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setVersionGcExpression(OAIConfigNodePropertyString* version_gc_expression) {
    this->version_gc_expression = version_gc_expression;
    this->m_version_gc_expression_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getVersionGcTimeLimitInSecs() {
    return version_gc_time_limit_in_secs;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setVersionGcTimeLimitInSecs(OAIConfigNodePropertyInteger* version_gc_time_limit_in_secs) {
    this->version_gc_time_limit_in_secs = version_gc_time_limit_in_secs;
    this->m_version_gc_time_limit_in_secs_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getBlobGcMaxAgeInSecs() {
    return blob_gc_max_age_in_secs;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setBlobGcMaxAgeInSecs(OAIConfigNodePropertyInteger* blob_gc_max_age_in_secs) {
    this->blob_gc_max_age_in_secs = blob_gc_max_age_in_secs;
    this->m_blob_gc_max_age_in_secs_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getBlobTrackSnapshotIntervalInSecs() {
    return blob_track_snapshot_interval_in_secs;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setBlobTrackSnapshotIntervalInSecs(OAIConfigNodePropertyInteger* blob_track_snapshot_interval_in_secs) {
    this->blob_track_snapshot_interval_in_secs = blob_track_snapshot_interval_in_secs;
    this->m_blob_track_snapshot_interval_in_secs_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getRepositoryHome() {
    return repository_home;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setRepositoryHome(OAIConfigNodePropertyString* repository_home) {
    this->repository_home = repository_home;
    this->m_repository_home_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getMaxReplicationLagInSecs() {
    return max_replication_lag_in_secs;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setMaxReplicationLagInSecs(OAIConfigNodePropertyInteger* max_replication_lag_in_secs) {
    this->max_replication_lag_in_secs = max_replication_lag_in_secs;
    this->m_max_replication_lag_in_secs_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getDocumentStoreType() {
    return document_store_type;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setDocumentStoreType(OAIConfigNodePropertyDropDown* document_store_type) {
    this->document_store_type = document_store_type;
    this->m_document_store_type_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getBundlingDisabled() {
    return bundling_disabled;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setBundlingDisabled(OAIConfigNodePropertyBoolean* bundling_disabled) {
    this->bundling_disabled = bundling_disabled;
    this->m_bundling_disabled_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getUpdateLimit() {
    return update_limit;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setUpdateLimit(OAIConfigNodePropertyInteger* update_limit) {
    this->update_limit = update_limit;
    this->m_update_limit_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getPersistentCacheIncludes() {
    return persistent_cache_includes;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setPersistentCacheIncludes(OAIConfigNodePropertyArray* persistent_cache_includes) {
    this->persistent_cache_includes = persistent_cache_includes;
    this->m_persistent_cache_includes_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getLeaseCheckMode() {
    return lease_check_mode;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setLeaseCheckMode(OAIConfigNodePropertyDropDown* lease_check_mode) {
    this->lease_check_mode = lease_check_mode;
    this->m_lease_check_mode_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(mongouri != nullptr && mongouri->isSet()){ isObjectUpdated = true; break;}
        if(db != nullptr && db->isSet()){ isObjectUpdated = true; break;}
        if(socket_keep_alive != nullptr && socket_keep_alive->isSet()){ isObjectUpdated = true; break;}
        if(cache != nullptr && cache->isSet()){ isObjectUpdated = true; break;}
        if(node_cache_percentage != nullptr && node_cache_percentage->isSet()){ isObjectUpdated = true; break;}
        if(prev_doc_cache_percentage != nullptr && prev_doc_cache_percentage->isSet()){ isObjectUpdated = true; break;}
        if(children_cache_percentage != nullptr && children_cache_percentage->isSet()){ isObjectUpdated = true; break;}
        if(diff_cache_percentage != nullptr && diff_cache_percentage->isSet()){ isObjectUpdated = true; break;}
        if(cache_segment_count != nullptr && cache_segment_count->isSet()){ isObjectUpdated = true; break;}
        if(cache_stack_move_distance != nullptr && cache_stack_move_distance->isSet()){ isObjectUpdated = true; break;}
        if(blob_cache_size != nullptr && blob_cache_size->isSet()){ isObjectUpdated = true; break;}
        if(persistent_cache != nullptr && persistent_cache->isSet()){ isObjectUpdated = true; break;}
        if(journal_cache != nullptr && journal_cache->isSet()){ isObjectUpdated = true; break;}
        if(custom_blob_store != nullptr && custom_blob_store->isSet()){ isObjectUpdated = true; break;}
        if(journal_gc_interval != nullptr && journal_gc_interval->isSet()){ isObjectUpdated = true; break;}
        if(journal_gc_max_age != nullptr && journal_gc_max_age->isSet()){ isObjectUpdated = true; break;}
        if(prefetch_external_changes != nullptr && prefetch_external_changes->isSet()){ isObjectUpdated = true; break;}
        if(role != nullptr && role->isSet()){ isObjectUpdated = true; break;}
        if(version_gc_max_age_in_secs != nullptr && version_gc_max_age_in_secs->isSet()){ isObjectUpdated = true; break;}
        if(version_gc_expression != nullptr && version_gc_expression->isSet()){ isObjectUpdated = true; break;}
        if(version_gc_time_limit_in_secs != nullptr && version_gc_time_limit_in_secs->isSet()){ isObjectUpdated = true; break;}
        if(blob_gc_max_age_in_secs != nullptr && blob_gc_max_age_in_secs->isSet()){ isObjectUpdated = true; break;}
        if(blob_track_snapshot_interval_in_secs != nullptr && blob_track_snapshot_interval_in_secs->isSet()){ isObjectUpdated = true; break;}
        if(repository_home != nullptr && repository_home->isSet()){ isObjectUpdated = true; break;}
        if(max_replication_lag_in_secs != nullptr && max_replication_lag_in_secs->isSet()){ isObjectUpdated = true; break;}
        if(document_store_type != nullptr && document_store_type->isSet()){ isObjectUpdated = true; break;}
        if(bundling_disabled != nullptr && bundling_disabled->isSet()){ isObjectUpdated = true; break;}
        if(update_limit != nullptr && update_limit->isSet()){ isObjectUpdated = true; break;}
        if(persistent_cache_includes != nullptr && persistent_cache_includes->isSet()){ isObjectUpdated = true; break;}
        if(lease_check_mode != nullptr && lease_check_mode->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

