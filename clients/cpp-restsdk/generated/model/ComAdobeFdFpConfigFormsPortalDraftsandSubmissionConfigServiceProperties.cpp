/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties()
{
    m_Portal_outboxesIsSet = false;
    m_Draft_data_serviceIsSet = false;
    m_Draft_metadata_serviceIsSet = false;
    m_Submit_data_serviceIsSet = false;
    m_Submit_metadata_serviceIsSet = false;
    m_PendingSign_data_serviceIsSet = false;
    m_PendingSign_metadata_serviceIsSet = false;
}

ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::~ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties()
{
}

void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Portal_outboxesIsSet)
    {
        val[utility::conversions::to_string_t("portal.outboxes")] = ModelBase::toJson(m_Portal_outboxes);
    }
    if(m_Draft_data_serviceIsSet)
    {
        val[utility::conversions::to_string_t("draft.data.service")] = ModelBase::toJson(m_Draft_data_service);
    }
    if(m_Draft_metadata_serviceIsSet)
    {
        val[utility::conversions::to_string_t("draft.metadata.service")] = ModelBase::toJson(m_Draft_metadata_service);
    }
    if(m_Submit_data_serviceIsSet)
    {
        val[utility::conversions::to_string_t("submit.data.service")] = ModelBase::toJson(m_Submit_data_service);
    }
    if(m_Submit_metadata_serviceIsSet)
    {
        val[utility::conversions::to_string_t("submit.metadata.service")] = ModelBase::toJson(m_Submit_metadata_service);
    }
    if(m_PendingSign_data_serviceIsSet)
    {
        val[utility::conversions::to_string_t("pendingSign.data.service")] = ModelBase::toJson(m_PendingSign_data_service);
    }
    if(m_PendingSign_metadata_serviceIsSet)
    {
        val[utility::conversions::to_string_t("pendingSign.metadata.service")] = ModelBase::toJson(m_PendingSign_metadata_service);
    }

    return val;
}

void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("portal.outboxes")))
    {
        if(!val[utility::conversions::to_string_t("portal.outboxes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("portal.outboxes")]);
            setPortalOutboxes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("draft.data.service")))
    {
        if(!val[utility::conversions::to_string_t("draft.data.service")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("draft.data.service")]);
            setDraftDataService( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("draft.metadata.service")))
    {
        if(!val[utility::conversions::to_string_t("draft.metadata.service")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("draft.metadata.service")]);
            setDraftMetadataService( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("submit.data.service")))
    {
        if(!val[utility::conversions::to_string_t("submit.data.service")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("submit.data.service")]);
            setSubmitDataService( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("submit.metadata.service")))
    {
        if(!val[utility::conversions::to_string_t("submit.metadata.service")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("submit.metadata.service")]);
            setSubmitMetadataService( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pendingSign.data.service")))
    {
        if(!val[utility::conversions::to_string_t("pendingSign.data.service")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("pendingSign.data.service")]);
            setPendingSignDataService( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pendingSign.metadata.service")))
    {
        if(!val[utility::conversions::to_string_t("pendingSign.metadata.service")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("pendingSign.metadata.service")]);
            setPendingSignMetadataService( newItem );
        }
    }
}

void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Portal_outboxesIsSet)
    {
        if (m_Portal_outboxes.get())
        {
            m_Portal_outboxes->toMultipart(multipart, utility::conversions::to_string_t("portal.outboxes."));
        }
    }
    if(m_Draft_data_serviceIsSet)
    {
        if (m_Draft_data_service.get())
        {
            m_Draft_data_service->toMultipart(multipart, utility::conversions::to_string_t("draft.data.service."));
        }
    }
    if(m_Draft_metadata_serviceIsSet)
    {
        if (m_Draft_metadata_service.get())
        {
            m_Draft_metadata_service->toMultipart(multipart, utility::conversions::to_string_t("draft.metadata.service."));
        }
    }
    if(m_Submit_data_serviceIsSet)
    {
        if (m_Submit_data_service.get())
        {
            m_Submit_data_service->toMultipart(multipart, utility::conversions::to_string_t("submit.data.service."));
        }
    }
    if(m_Submit_metadata_serviceIsSet)
    {
        if (m_Submit_metadata_service.get())
        {
            m_Submit_metadata_service->toMultipart(multipart, utility::conversions::to_string_t("submit.metadata.service."));
        }
    }
    if(m_PendingSign_data_serviceIsSet)
    {
        if (m_PendingSign_data_service.get())
        {
            m_PendingSign_data_service->toMultipart(multipart, utility::conversions::to_string_t("pendingSign.data.service."));
        }
    }
    if(m_PendingSign_metadata_serviceIsSet)
    {
        if (m_PendingSign_metadata_service.get())
        {
            m_PendingSign_metadata_service->toMultipart(multipart, utility::conversions::to_string_t("pendingSign.metadata.service."));
        }
    }
}

void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("portal.outboxes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("portal.outboxes")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("portal.outboxes."));
            setPortalOutboxes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("draft.data.service")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("draft.data.service")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("draft.data.service."));
            setDraftDataService( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("draft.metadata.service")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("draft.metadata.service")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("draft.metadata.service."));
            setDraftMetadataService( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("submit.data.service")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("submit.data.service")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("submit.data.service."));
            setSubmitDataService( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("submit.metadata.service")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("submit.metadata.service")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("submit.metadata.service."));
            setSubmitMetadataService( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pendingSign.data.service")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("pendingSign.data.service")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("pendingSign.data.service."));
            setPendingSignDataService( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pendingSign.metadata.service")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("pendingSign.metadata.service")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("pendingSign.metadata.service."));
            setPendingSignMetadataService( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getPortalOutboxes() const
{
    return m_Portal_outboxes;
}


void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setPortalOutboxes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Portal_outboxes = value;
    m_Portal_outboxesIsSet = true;
}
bool ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::portalOutboxesIsSet() const
{
    return m_Portal_outboxesIsSet;
}

void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::unsetPortal_outboxes()
{
    m_Portal_outboxesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getDraftDataService() const
{
    return m_Draft_data_service;
}


void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setDraftDataService(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Draft_data_service = value;
    m_Draft_data_serviceIsSet = true;
}
bool ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::draftDataServiceIsSet() const
{
    return m_Draft_data_serviceIsSet;
}

void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::unsetDraft_data_service()
{
    m_Draft_data_serviceIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getDraftMetadataService() const
{
    return m_Draft_metadata_service;
}


void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setDraftMetadataService(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Draft_metadata_service = value;
    m_Draft_metadata_serviceIsSet = true;
}
bool ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::draftMetadataServiceIsSet() const
{
    return m_Draft_metadata_serviceIsSet;
}

void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::unsetDraft_metadata_service()
{
    m_Draft_metadata_serviceIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getSubmitDataService() const
{
    return m_Submit_data_service;
}


void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setSubmitDataService(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Submit_data_service = value;
    m_Submit_data_serviceIsSet = true;
}
bool ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::submitDataServiceIsSet() const
{
    return m_Submit_data_serviceIsSet;
}

void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::unsetSubmit_data_service()
{
    m_Submit_data_serviceIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getSubmitMetadataService() const
{
    return m_Submit_metadata_service;
}


void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setSubmitMetadataService(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Submit_metadata_service = value;
    m_Submit_metadata_serviceIsSet = true;
}
bool ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::submitMetadataServiceIsSet() const
{
    return m_Submit_metadata_serviceIsSet;
}

void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::unsetSubmit_metadata_service()
{
    m_Submit_metadata_serviceIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getPendingSignDataService() const
{
    return m_PendingSign_data_service;
}


void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setPendingSignDataService(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_PendingSign_data_service = value;
    m_PendingSign_data_serviceIsSet = true;
}
bool ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::pendingSignDataServiceIsSet() const
{
    return m_PendingSign_data_serviceIsSet;
}

void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::unsetPendingSign_data_service()
{
    m_PendingSign_data_serviceIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::getPendingSignMetadataService() const
{
    return m_PendingSign_metadata_service;
}


void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::setPendingSignMetadataService(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_PendingSign_metadata_service = value;
    m_PendingSign_metadata_serviceIsSet = true;
}
bool ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::pendingSignMetadataServiceIsSet() const
{
    return m_PendingSign_metadata_serviceIsSet;
}

void ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties::unsetPendingSign_metadata_service()
{
    m_PendingSign_metadata_serviceIsSet = false;
}

}
}
}
}

