/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ConfigNodePropertyArray', 'model/ConfigNodePropertyBoolean', 'model/ConfigNodePropertyDropDown', 'model/ConfigNodePropertyInteger', 'model/ConfigNodePropertyString'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ConfigNodePropertyArray'), require('./ConfigNodePropertyBoolean'), require('./ConfigNodePropertyDropDown'), require('./ConfigNodePropertyInteger'), require('./ConfigNodePropertyString'));
  } else {
    // Browser globals (root is window)
    if (!root.NodeSwaggerAemOsgi) {
      root.NodeSwaggerAemOsgi = {};
    }
    root.NodeSwaggerAemOsgi.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties = factory(root.NodeSwaggerAemOsgi.ApiClient, root.NodeSwaggerAemOsgi.ConfigNodePropertyArray, root.NodeSwaggerAemOsgi.ConfigNodePropertyBoolean, root.NodeSwaggerAemOsgi.ConfigNodePropertyDropDown, root.NodeSwaggerAemOsgi.ConfigNodePropertyInteger, root.NodeSwaggerAemOsgi.ConfigNodePropertyString);
  }
}(this, function(ApiClient, ConfigNodePropertyArray, ConfigNodePropertyBoolean, ConfigNodePropertyDropDown, ConfigNodePropertyInteger, ConfigNodePropertyString) {
  'use strict';




  /**
   * The OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties model module.
   * @module model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties</code>.
   * @alias module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties
   * @class
   */
  var exports = function() {
    var _this = this;


















  };

  /**
   * Constructs a <code>OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties} obj Optional instance to populate.
   * @return {module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties} The populated <code>OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('path.desc.field')) {
        obj['path.desc.field'] = ConfigNodePropertyString.constructFromObject(data['path.desc.field']);
      }
      if (data.hasOwnProperty('path.child.field')) {
        obj['path.child.field'] = ConfigNodePropertyString.constructFromObject(data['path.child.field']);
      }
      if (data.hasOwnProperty('path.parent.field')) {
        obj['path.parent.field'] = ConfigNodePropertyString.constructFromObject(data['path.parent.field']);
      }
      if (data.hasOwnProperty('path.exact.field')) {
        obj['path.exact.field'] = ConfigNodePropertyString.constructFromObject(data['path.exact.field']);
      }
      if (data.hasOwnProperty('catch.all.field')) {
        obj['catch.all.field'] = ConfigNodePropertyString.constructFromObject(data['catch.all.field']);
      }
      if (data.hasOwnProperty('collapsed.path.field')) {
        obj['collapsed.path.field'] = ConfigNodePropertyString.constructFromObject(data['collapsed.path.field']);
      }
      if (data.hasOwnProperty('path.depth.field')) {
        obj['path.depth.field'] = ConfigNodePropertyString.constructFromObject(data['path.depth.field']);
      }
      if (data.hasOwnProperty('commit.policy')) {
        obj['commit.policy'] = ConfigNodePropertyDropDown.constructFromObject(data['commit.policy']);
      }
      if (data.hasOwnProperty('rows')) {
        obj['rows'] = ConfigNodePropertyInteger.constructFromObject(data['rows']);
      }
      if (data.hasOwnProperty('path.restrictions')) {
        obj['path.restrictions'] = ConfigNodePropertyBoolean.constructFromObject(data['path.restrictions']);
      }
      if (data.hasOwnProperty('property.restrictions')) {
        obj['property.restrictions'] = ConfigNodePropertyBoolean.constructFromObject(data['property.restrictions']);
      }
      if (data.hasOwnProperty('primarytypes.restrictions')) {
        obj['primarytypes.restrictions'] = ConfigNodePropertyBoolean.constructFromObject(data['primarytypes.restrictions']);
      }
      if (data.hasOwnProperty('ignored.properties')) {
        obj['ignored.properties'] = ConfigNodePropertyArray.constructFromObject(data['ignored.properties']);
      }
      if (data.hasOwnProperty('used.properties')) {
        obj['used.properties'] = ConfigNodePropertyArray.constructFromObject(data['used.properties']);
      }
      if (data.hasOwnProperty('type.mappings')) {
        obj['type.mappings'] = ConfigNodePropertyArray.constructFromObject(data['type.mappings']);
      }
      if (data.hasOwnProperty('property.mappings')) {
        obj['property.mappings'] = ConfigNodePropertyArray.constructFromObject(data['property.mappings']);
      }
      if (data.hasOwnProperty('collapse.jcrcontent.nodes')) {
        obj['collapse.jcrcontent.nodes'] = ConfigNodePropertyBoolean.constructFromObject(data['collapse.jcrcontent.nodes']);
      }
    }
    return obj;
  }

  /**
   * @member {module:model/ConfigNodePropertyString} path.desc.field
   */
  exports.prototype['path.desc.field'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyString} path.child.field
   */
  exports.prototype['path.child.field'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyString} path.parent.field
   */
  exports.prototype['path.parent.field'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyString} path.exact.field
   */
  exports.prototype['path.exact.field'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyString} catch.all.field
   */
  exports.prototype['catch.all.field'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyString} collapsed.path.field
   */
  exports.prototype['collapsed.path.field'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyString} path.depth.field
   */
  exports.prototype['path.depth.field'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyDropDown} commit.policy
   */
  exports.prototype['commit.policy'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyInteger} rows
   */
  exports.prototype['rows'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyBoolean} path.restrictions
   */
  exports.prototype['path.restrictions'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyBoolean} property.restrictions
   */
  exports.prototype['property.restrictions'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyBoolean} primarytypes.restrictions
   */
  exports.prototype['primarytypes.restrictions'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyArray} ignored.properties
   */
  exports.prototype['ignored.properties'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyArray} used.properties
   */
  exports.prototype['used.properties'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyArray} type.mappings
   */
  exports.prototype['type.mappings'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyArray} property.mappings
   */
  exports.prototype['property.mappings'] = undefined;
  /**
   * @member {module:model/ConfigNodePropertyBoolean} collapse.jcrcontent.nodes
   */
  exports.prototype['collapse.jcrcontent.nodes'] = undefined;



  return exports;
}));


