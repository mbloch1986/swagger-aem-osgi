/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties() {
    this->init();
}

OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::~OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties() {
    
}

void
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::init() {
    m_include_paths_isSet = false;
    m_exporter_user_isSet = false;
}

void
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(include_paths, json[QString("include.paths")]);
    
    ::OpenAPI::fromJsonValue(exporter_user, json[QString("exporter.user")]);
    
}

QString
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(include_paths.isSet()){
        obj.insert(QString("include.paths"), ::OpenAPI::toJsonValue(include_paths));
    }
	if(exporter_user.isSet()){
        obj.insert(QString("exporter.user"), ::OpenAPI::toJsonValue(exporter_user));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::getIncludePaths() const {
    return include_paths;
}
void
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::setIncludePaths(const OAIConfigNodePropertyArray &include_paths) {
    this->include_paths = include_paths;
    this->m_include_paths_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::getExporterUser() const {
    return exporter_user;
}
void
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::setExporterUser(const OAIConfigNodePropertyString &exporter_user) {
    this->exporter_user = exporter_user;
    this->m_exporter_user_isSet = true;
}


bool
OAIComAdobeCqScheduledExporterImplScheduledExporterImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(include_paths.isSet()){ isObjectUpdated = true; break;}
    
        if(exporter_user.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

