/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties() {
    this->init();
}

OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::~OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties() {
    
}

void
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::init() {
    m_queue_priority_isSet = false;
    m_queue_retries_isSet = false;
    m_queue_retrydelay_isSet = false;
    m_queue_maxparallel_isSet = false;
}

void
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(queue_priority, json[QString("queue.priority")]);
    
    ::OpenAPI::fromJsonValue(queue_retries, json[QString("queue.retries")]);
    
    ::OpenAPI::fromJsonValue(queue_retrydelay, json[QString("queue.retrydelay")]);
    
    ::OpenAPI::fromJsonValue(queue_maxparallel, json[QString("queue.maxparallel")]);
    
}

QString
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::asJsonObject() const {
    QJsonObject obj;
	if(queue_priority.isSet()){
        obj.insert(QString("queue.priority"), ::OpenAPI::toJsonValue(queue_priority));
    }
	if(queue_retries.isSet()){
        obj.insert(QString("queue.retries"), ::OpenAPI::toJsonValue(queue_retries));
    }
	if(queue_retrydelay.isSet()){
        obj.insert(QString("queue.retrydelay"), ::OpenAPI::toJsonValue(queue_retrydelay));
    }
	if(queue_maxparallel.isSet()){
        obj.insert(QString("queue.maxparallel"), ::OpenAPI::toJsonValue(queue_maxparallel));
    }
    return obj;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::getQueuePriority() const {
    return queue_priority;
}
void
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::setQueuePriority(const OAIConfigNodePropertyDropDown &queue_priority) {
    this->queue_priority = queue_priority;
    this->m_queue_priority_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::getQueueRetries() const {
    return queue_retries;
}
void
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::setQueueRetries(const OAIConfigNodePropertyInteger &queue_retries) {
    this->queue_retries = queue_retries;
    this->m_queue_retries_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::getQueueRetrydelay() const {
    return queue_retrydelay;
}
void
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::setQueueRetrydelay(const OAIConfigNodePropertyInteger &queue_retrydelay) {
    this->queue_retrydelay = queue_retrydelay;
    this->m_queue_retrydelay_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::getQueueMaxparallel() const {
    return queue_maxparallel;
}
void
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::setQueueMaxparallel(const OAIConfigNodePropertyInteger &queue_maxparallel) {
    this->queue_maxparallel = queue_maxparallel;
    this->m_queue_maxparallel_isSet = true;
}


bool
OAIOrgApacheSlingEventImplJobsDefaultJobManagerProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(queue_priority.isSet()){ isObjectUpdated = true; break;}
    
        if(queue_retries.isSet()){ isObjectUpdated = true; break;}
    
        if(queue_retrydelay.isSet()){ isObjectUpdated = true; break;}
    
        if(queue_maxparallel.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

