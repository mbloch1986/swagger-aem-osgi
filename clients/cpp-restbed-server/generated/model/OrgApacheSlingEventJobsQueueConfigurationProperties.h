/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingEventJobsQueueConfigurationProperties.h
 *
 * 
 */

#ifndef OrgApacheSlingEventJobsQueueConfigurationProperties_H_
#define OrgApacheSlingEventJobsQueueConfigurationProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyFloat.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingEventJobsQueueConfigurationProperties
{
public:
    OrgApacheSlingEventJobsQueueConfigurationProperties();
    virtual ~OrgApacheSlingEventJobsQueueConfigurationProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// OrgApacheSlingEventJobsQueueConfigurationProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getQueueName() const;
    void setQueueName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getQueueTopics() const;
    void setQueueTopics(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getQueueType() const;
    void setQueueType(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getQueuePriority() const;
    void setQueuePriority(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getQueueRetries() const;
    void setQueueRetries(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getQueueRetrydelay() const;
    void setQueueRetrydelay(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyFloat> getQueueMaxparallel() const;
    void setQueueMaxparallel(std::shared_ptr<ConfigNodePropertyFloat> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getQueueKeepJobs() const;
    void setQueueKeepJobs(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getQueuePreferRunOnCreationInstance() const;
    void setQueuePreferRunOnCreationInstance(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getQueueThreadPoolSize() const;
    void setQueueThreadPoolSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getServiceRanking() const;
    void setServiceRanking(std::shared_ptr<ConfigNodePropertyInteger> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Queue_name;
    std::shared_ptr<ConfigNodePropertyArray> m_Queue_topics;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Queue_type;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Queue_priority;
    std::shared_ptr<ConfigNodePropertyInteger> m_Queue_retries;
    std::shared_ptr<ConfigNodePropertyInteger> m_Queue_retrydelay;
    std::shared_ptr<ConfigNodePropertyFloat> m_Queue_maxparallel;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Queue_keepJobs;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Queue_preferRunOnCreationInstance;
    std::shared_ptr<ConfigNodePropertyInteger> m_Queue_threadPoolSize;
    std::shared_ptr<ConfigNodePropertyInteger> m_Service_ranking;
};

}
}
}
}

#endif /* OrgApacheSlingEventJobsQueueConfigurationProperties_H_ */
