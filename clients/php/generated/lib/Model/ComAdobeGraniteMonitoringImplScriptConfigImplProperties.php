<?php
/**
 * ComAdobeGraniteMonitoringImplScriptConfigImplProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComAdobeGraniteMonitoringImplScriptConfigImplProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComAdobeGraniteMonitoringImplScriptConfigImplProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comAdobeGraniteMonitoringImplScriptConfigImplProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'script_filename' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'script_display' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'script_path' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'script_platform' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'interval' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'jmxdomain' => '\OpenAPI\Client\Model\ConfigNodePropertyString'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'script_filename' => null,
        'script_display' => null,
        'script_path' => null,
        'script_platform' => null,
        'interval' => null,
        'jmxdomain' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'script_filename' => 'script.filename',
        'script_display' => 'script.display',
        'script_path' => 'script.path',
        'script_platform' => 'script.platform',
        'interval' => 'interval',
        'jmxdomain' => 'jmxdomain'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'script_filename' => 'setScriptFilename',
        'script_display' => 'setScriptDisplay',
        'script_path' => 'setScriptPath',
        'script_platform' => 'setScriptPlatform',
        'interval' => 'setInterval',
        'jmxdomain' => 'setJmxdomain'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'script_filename' => 'getScriptFilename',
        'script_display' => 'getScriptDisplay',
        'script_path' => 'getScriptPath',
        'script_platform' => 'getScriptPlatform',
        'interval' => 'getInterval',
        'jmxdomain' => 'getJmxdomain'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['script_filename'] = isset($data['script_filename']) ? $data['script_filename'] : null;
        $this->container['script_display'] = isset($data['script_display']) ? $data['script_display'] : null;
        $this->container['script_path'] = isset($data['script_path']) ? $data['script_path'] : null;
        $this->container['script_platform'] = isset($data['script_platform']) ? $data['script_platform'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['jmxdomain'] = isset($data['jmxdomain']) ? $data['jmxdomain'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets script_filename
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getScriptFilename()
    {
        return $this->container['script_filename'];
    }

    /**
     * Sets script_filename
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $script_filename script_filename
     *
     * @return $this
     */
    public function setScriptFilename($script_filename)
    {
        $this->container['script_filename'] = $script_filename;

        return $this;
    }

    /**
     * Gets script_display
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getScriptDisplay()
    {
        return $this->container['script_display'];
    }

    /**
     * Sets script_display
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $script_display script_display
     *
     * @return $this
     */
    public function setScriptDisplay($script_display)
    {
        $this->container['script_display'] = $script_display;

        return $this;
    }

    /**
     * Gets script_path
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getScriptPath()
    {
        return $this->container['script_path'];
    }

    /**
     * Sets script_path
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $script_path script_path
     *
     * @return $this
     */
    public function setScriptPath($script_path)
    {
        $this->container['script_path'] = $script_path;

        return $this;
    }

    /**
     * Gets script_platform
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getScriptPlatform()
    {
        return $this->container['script_platform'];
    }

    /**
     * Sets script_platform
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $script_platform script_platform
     *
     * @return $this
     */
    public function setScriptPlatform($script_platform)
    {
        $this->container['script_platform'] = $script_platform;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $interval interval
     *
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets jmxdomain
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getJmxdomain()
    {
        return $this->container['jmxdomain'];
    }

    /**
     * Sets jmxdomain
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $jmxdomain jmxdomain
     *
     * @return $this
     */
    public function setJmxdomain($jmxdomain)
    {
        $this->container['jmxdomain'] = $jmxdomain;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


