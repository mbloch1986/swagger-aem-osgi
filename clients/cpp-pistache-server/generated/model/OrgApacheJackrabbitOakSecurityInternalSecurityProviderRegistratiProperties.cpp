/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties()
{
    m_RequiredServicePidsIsSet = false;
    m_AuthorizationCompositionTypeIsSet = false;
    
}

OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::~OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties()
{
}

void OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_RequiredServicePidsIsSet)
    {
        val["requiredServicePids"] = ModelBase::toJson(m_RequiredServicePids);
    }
    if(m_AuthorizationCompositionTypeIsSet)
    {
        val["authorizationCompositionType"] = ModelBase::toJson(m_AuthorizationCompositionType);
    }
    

    return val;
}

void OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::fromJson(nlohmann::json& val)
{
    if(val.find("requiredServicePids") != val.end())
    {
        if(!val["requiredServicePids"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["requiredServicePids"]);
            setRequiredServicePids( newItem );
        }
        
    }
    if(val.find("authorizationCompositionType") != val.end())
    {
        if(!val["authorizationCompositionType"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["authorizationCompositionType"]);
            setAuthorizationCompositionType( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::getRequiredServicePids() const
{
    return m_RequiredServicePids;
}
void OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::setRequiredServicePids(ConfigNodePropertyArray const& value)
{
    m_RequiredServicePids = value;
    m_RequiredServicePidsIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::requiredServicePidsIsSet() const
{
    return m_RequiredServicePidsIsSet;
}
void OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::unsetRequiredServicePids()
{
    m_RequiredServicePidsIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::getAuthorizationCompositionType() const
{
    return m_AuthorizationCompositionType;
}
void OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::setAuthorizationCompositionType(ConfigNodePropertyDropDown const& value)
{
    m_AuthorizationCompositionType = value;
    m_AuthorizationCompositionTypeIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::authorizationCompositionTypeIsSet() const
{
    return m_AuthorizationCompositionTypeIsSet;
}
void OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::unsetAuthorizationCompositionType()
{
    m_AuthorizationCompositionTypeIsSet = false;
}

}
}
}
}

