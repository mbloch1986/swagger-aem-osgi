/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties()
{
    m_Archiving_enabledIsSet = false;
    m_Scheduler_expressionIsSet = false;
    m_Archive_since_days_completedIsSet = false;
    
}

ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::~ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties()
{
}

void ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Archiving_enabledIsSet)
    {
        val["archiving.enabled"] = ModelBase::toJson(m_Archiving_enabled);
    }
    if(m_Scheduler_expressionIsSet)
    {
        val["scheduler.expression"] = ModelBase::toJson(m_Scheduler_expression);
    }
    if(m_Archive_since_days_completedIsSet)
    {
        val["archive.since.days.completed"] = ModelBase::toJson(m_Archive_since_days_completed);
    }
    

    return val;
}

void ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::fromJson(nlohmann::json& val)
{
    if(val.find("archiving.enabled") != val.end())
    {
        if(!val["archiving.enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["archiving.enabled"]);
            setArchivingEnabled( newItem );
        }
        
    }
    if(val.find("scheduler.expression") != val.end())
    {
        if(!val["scheduler.expression"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["scheduler.expression"]);
            setSchedulerExpression( newItem );
        }
        
    }
    if(val.find("archive.since.days.completed") != val.end())
    {
        if(!val["archive.since.days.completed"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["archive.since.days.completed"]);
            setArchiveSinceDaysCompleted( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::getArchivingEnabled() const
{
    return m_Archiving_enabled;
}
void ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::setArchivingEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Archiving_enabled = value;
    m_Archiving_enabledIsSet = true;
}
bool ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::archivingEnabledIsSet() const
{
    return m_Archiving_enabledIsSet;
}
void ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::unsetArchiving_enabled()
{
    m_Archiving_enabledIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::getSchedulerExpression() const
{
    return m_Scheduler_expression;
}
void ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::setSchedulerExpression(ConfigNodePropertyString const& value)
{
    m_Scheduler_expression = value;
    m_Scheduler_expressionIsSet = true;
}
bool ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::schedulerExpressionIsSet() const
{
    return m_Scheduler_expressionIsSet;
}
void ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::unsetScheduler_expression()
{
    m_Scheduler_expressionIsSet = false;
}
ConfigNodePropertyInteger ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::getArchiveSinceDaysCompleted() const
{
    return m_Archive_since_days_completed;
}
void ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::setArchiveSinceDaysCompleted(ConfigNodePropertyInteger const& value)
{
    m_Archive_since_days_completed = value;
    m_Archive_since_days_completedIsSet = true;
}
bool ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::archiveSinceDaysCompletedIsSet() const
{
    return m_Archive_since_days_completedIsSet;
}
void ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::unsetArchive_since_days_completed()
{
    m_Archive_since_days_completedIsSet = false;
}

}
}
}
}

