/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties
    : public ModelBase
{
public:
    OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties();
    virtual ~OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getHandlerName() const;
    bool handlerNameIsSet() const;
    void unsetHandler_name();
    void setHandlerName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getUserExpirationTime() const;
    bool userExpirationTimeIsSet() const;
    void unsetUser_expirationTime();
    void setUserExpirationTime(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getUserAutoMembership() const;
    bool userAutoMembershipIsSet() const;
    void unsetUser_autoMembership();
    void setUserAutoMembership(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getUserPropertyMapping() const;
    bool userPropertyMappingIsSet() const;
    void unsetUser_propertyMapping();
    void setUserPropertyMapping(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getUserPathPrefix() const;
    bool userPathPrefixIsSet() const;
    void unsetUser_pathPrefix();
    void setUserPathPrefix(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getUserMembershipExpTime() const;
    bool userMembershipExpTimeIsSet() const;
    void unsetUser_membershipExpTime();
    void setUserMembershipExpTime(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getUserMembershipNestingDepth() const;
    bool userMembershipNestingDepthIsSet() const;
    void unsetUser_membershipNestingDepth();
    void setUserMembershipNestingDepth(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getUserDynamicMembership() const;
    bool userDynamicMembershipIsSet() const;
    void unsetUser_dynamicMembership();
    void setUserDynamicMembership(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getUserDisableMissing() const;
    bool userDisableMissingIsSet() const;
    void unsetUser_disableMissing();
    void setUserDisableMissing(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getGroupExpirationTime() const;
    bool groupExpirationTimeIsSet() const;
    void unsetGroup_expirationTime();
    void setGroupExpirationTime(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getGroupAutoMembership() const;
    bool groupAutoMembershipIsSet() const;
    void unsetGroup_autoMembership();
    void setGroupAutoMembership(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getGroupPropertyMapping() const;
    bool groupPropertyMappingIsSet() const;
    void unsetGroup_propertyMapping();
    void setGroupPropertyMapping(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getGroupPathPrefix() const;
    bool groupPathPrefixIsSet() const;
    void unsetGroup_pathPrefix();
    void setGroupPathPrefix(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableRFC7613UsercaseMappedProfile() const;
    bool enableRFC7613UsercaseMappedProfileIsSet() const;
    void unsetEnableRFC7613UsercaseMappedProfile();
    void setEnableRFC7613UsercaseMappedProfile(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Handler_name;
    bool m_Handler_nameIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_User_expirationTime;
    bool m_User_expirationTimeIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_User_autoMembership;
    bool m_User_autoMembershipIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_User_propertyMapping;
    bool m_User_propertyMappingIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_User_pathPrefix;
    bool m_User_pathPrefixIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_User_membershipExpTime;
    bool m_User_membershipExpTimeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_User_membershipNestingDepth;
    bool m_User_membershipNestingDepthIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_User_dynamicMembership;
    bool m_User_dynamicMembershipIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_User_disableMissing;
    bool m_User_disableMissingIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Group_expirationTime;
    bool m_Group_expirationTimeIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Group_autoMembership;
    bool m_Group_autoMembershipIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Group_propertyMapping;
    bool m_Group_propertyMappingIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Group_pathPrefix;
    bool m_Group_pathPrefixIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_EnableRFC7613UsercaseMappedProfile;
    bool m_EnableRFC7613UsercaseMappedProfileIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties_H_ */
