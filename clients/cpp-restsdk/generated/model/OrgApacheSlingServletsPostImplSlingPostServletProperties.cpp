/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingServletsPostImplSlingPostServletProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingServletsPostImplSlingPostServletProperties::OrgApacheSlingServletsPostImplSlingPostServletProperties()
{
    m_Servlet_post_dateFormatsIsSet = false;
    m_Servlet_post_nodeNameHintsIsSet = false;
    m_Servlet_post_nodeNameMaxLengthIsSet = false;
    m_Servlet_post_checkinNewVersionableNodesIsSet = false;
    m_Servlet_post_autoCheckoutIsSet = false;
    m_Servlet_post_autoCheckinIsSet = false;
    m_Servlet_post_ignorePatternIsSet = false;
}

OrgApacheSlingServletsPostImplSlingPostServletProperties::~OrgApacheSlingServletsPostImplSlingPostServletProperties()
{
}

void OrgApacheSlingServletsPostImplSlingPostServletProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingServletsPostImplSlingPostServletProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Servlet_post_dateFormatsIsSet)
    {
        val[utility::conversions::to_string_t("servlet.post.dateFormats")] = ModelBase::toJson(m_Servlet_post_dateFormats);
    }
    if(m_Servlet_post_nodeNameHintsIsSet)
    {
        val[utility::conversions::to_string_t("servlet.post.nodeNameHints")] = ModelBase::toJson(m_Servlet_post_nodeNameHints);
    }
    if(m_Servlet_post_nodeNameMaxLengthIsSet)
    {
        val[utility::conversions::to_string_t("servlet.post.nodeNameMaxLength")] = ModelBase::toJson(m_Servlet_post_nodeNameMaxLength);
    }
    if(m_Servlet_post_checkinNewVersionableNodesIsSet)
    {
        val[utility::conversions::to_string_t("servlet.post.checkinNewVersionableNodes")] = ModelBase::toJson(m_Servlet_post_checkinNewVersionableNodes);
    }
    if(m_Servlet_post_autoCheckoutIsSet)
    {
        val[utility::conversions::to_string_t("servlet.post.autoCheckout")] = ModelBase::toJson(m_Servlet_post_autoCheckout);
    }
    if(m_Servlet_post_autoCheckinIsSet)
    {
        val[utility::conversions::to_string_t("servlet.post.autoCheckin")] = ModelBase::toJson(m_Servlet_post_autoCheckin);
    }
    if(m_Servlet_post_ignorePatternIsSet)
    {
        val[utility::conversions::to_string_t("servlet.post.ignorePattern")] = ModelBase::toJson(m_Servlet_post_ignorePattern);
    }

    return val;
}

void OrgApacheSlingServletsPostImplSlingPostServletProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("servlet.post.dateFormats")))
    {
        if(!val[utility::conversions::to_string_t("servlet.post.dateFormats")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("servlet.post.dateFormats")]);
            setServletPostDateFormats( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("servlet.post.nodeNameHints")))
    {
        if(!val[utility::conversions::to_string_t("servlet.post.nodeNameHints")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("servlet.post.nodeNameHints")]);
            setServletPostNodeNameHints( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("servlet.post.nodeNameMaxLength")))
    {
        if(!val[utility::conversions::to_string_t("servlet.post.nodeNameMaxLength")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("servlet.post.nodeNameMaxLength")]);
            setServletPostNodeNameMaxLength( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("servlet.post.checkinNewVersionableNodes")))
    {
        if(!val[utility::conversions::to_string_t("servlet.post.checkinNewVersionableNodes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("servlet.post.checkinNewVersionableNodes")]);
            setServletPostCheckinNewVersionableNodes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("servlet.post.autoCheckout")))
    {
        if(!val[utility::conversions::to_string_t("servlet.post.autoCheckout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("servlet.post.autoCheckout")]);
            setServletPostAutoCheckout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("servlet.post.autoCheckin")))
    {
        if(!val[utility::conversions::to_string_t("servlet.post.autoCheckin")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("servlet.post.autoCheckin")]);
            setServletPostAutoCheckin( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("servlet.post.ignorePattern")))
    {
        if(!val[utility::conversions::to_string_t("servlet.post.ignorePattern")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("servlet.post.ignorePattern")]);
            setServletPostIgnorePattern( newItem );
        }
    }
}

void OrgApacheSlingServletsPostImplSlingPostServletProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Servlet_post_dateFormatsIsSet)
    {
        if (m_Servlet_post_dateFormats.get())
        {
            m_Servlet_post_dateFormats->toMultipart(multipart, utility::conversions::to_string_t("servlet.post.dateFormats."));
        }
    }
    if(m_Servlet_post_nodeNameHintsIsSet)
    {
        if (m_Servlet_post_nodeNameHints.get())
        {
            m_Servlet_post_nodeNameHints->toMultipart(multipart, utility::conversions::to_string_t("servlet.post.nodeNameHints."));
        }
    }
    if(m_Servlet_post_nodeNameMaxLengthIsSet)
    {
        if (m_Servlet_post_nodeNameMaxLength.get())
        {
            m_Servlet_post_nodeNameMaxLength->toMultipart(multipart, utility::conversions::to_string_t("servlet.post.nodeNameMaxLength."));
        }
    }
    if(m_Servlet_post_checkinNewVersionableNodesIsSet)
    {
        if (m_Servlet_post_checkinNewVersionableNodes.get())
        {
            m_Servlet_post_checkinNewVersionableNodes->toMultipart(multipart, utility::conversions::to_string_t("servlet.post.checkinNewVersionableNodes."));
        }
    }
    if(m_Servlet_post_autoCheckoutIsSet)
    {
        if (m_Servlet_post_autoCheckout.get())
        {
            m_Servlet_post_autoCheckout->toMultipart(multipart, utility::conversions::to_string_t("servlet.post.autoCheckout."));
        }
    }
    if(m_Servlet_post_autoCheckinIsSet)
    {
        if (m_Servlet_post_autoCheckin.get())
        {
            m_Servlet_post_autoCheckin->toMultipart(multipart, utility::conversions::to_string_t("servlet.post.autoCheckin."));
        }
    }
    if(m_Servlet_post_ignorePatternIsSet)
    {
        if (m_Servlet_post_ignorePattern.get())
        {
            m_Servlet_post_ignorePattern->toMultipart(multipart, utility::conversions::to_string_t("servlet.post.ignorePattern."));
        }
    }
}

void OrgApacheSlingServletsPostImplSlingPostServletProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("servlet.post.dateFormats")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("servlet.post.dateFormats")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("servlet.post.dateFormats."));
            setServletPostDateFormats( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("servlet.post.nodeNameHints")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("servlet.post.nodeNameHints")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("servlet.post.nodeNameHints."));
            setServletPostNodeNameHints( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("servlet.post.nodeNameMaxLength")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("servlet.post.nodeNameMaxLength")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("servlet.post.nodeNameMaxLength."));
            setServletPostNodeNameMaxLength( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("servlet.post.checkinNewVersionableNodes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("servlet.post.checkinNewVersionableNodes")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("servlet.post.checkinNewVersionableNodes."));
            setServletPostCheckinNewVersionableNodes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("servlet.post.autoCheckout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("servlet.post.autoCheckout")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("servlet.post.autoCheckout."));
            setServletPostAutoCheckout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("servlet.post.autoCheckin")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("servlet.post.autoCheckin")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("servlet.post.autoCheckin."));
            setServletPostAutoCheckin( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("servlet.post.ignorePattern")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("servlet.post.ignorePattern")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("servlet.post.ignorePattern."));
            setServletPostIgnorePattern( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostDateFormats() const
{
    return m_Servlet_post_dateFormats;
}


void OrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostDateFormats(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Servlet_post_dateFormats = value;
    m_Servlet_post_dateFormatsIsSet = true;
}
bool OrgApacheSlingServletsPostImplSlingPostServletProperties::servletPostDateFormatsIsSet() const
{
    return m_Servlet_post_dateFormatsIsSet;
}

void OrgApacheSlingServletsPostImplSlingPostServletProperties::unsetServlet_post_dateFormats()
{
    m_Servlet_post_dateFormatsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostNodeNameHints() const
{
    return m_Servlet_post_nodeNameHints;
}


void OrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostNodeNameHints(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Servlet_post_nodeNameHints = value;
    m_Servlet_post_nodeNameHintsIsSet = true;
}
bool OrgApacheSlingServletsPostImplSlingPostServletProperties::servletPostNodeNameHintsIsSet() const
{
    return m_Servlet_post_nodeNameHintsIsSet;
}

void OrgApacheSlingServletsPostImplSlingPostServletProperties::unsetServlet_post_nodeNameHints()
{
    m_Servlet_post_nodeNameHintsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostNodeNameMaxLength() const
{
    return m_Servlet_post_nodeNameMaxLength;
}


void OrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostNodeNameMaxLength(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Servlet_post_nodeNameMaxLength = value;
    m_Servlet_post_nodeNameMaxLengthIsSet = true;
}
bool OrgApacheSlingServletsPostImplSlingPostServletProperties::servletPostNodeNameMaxLengthIsSet() const
{
    return m_Servlet_post_nodeNameMaxLengthIsSet;
}

void OrgApacheSlingServletsPostImplSlingPostServletProperties::unsetServlet_post_nodeNameMaxLength()
{
    m_Servlet_post_nodeNameMaxLengthIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostCheckinNewVersionableNodes() const
{
    return m_Servlet_post_checkinNewVersionableNodes;
}


void OrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostCheckinNewVersionableNodes(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Servlet_post_checkinNewVersionableNodes = value;
    m_Servlet_post_checkinNewVersionableNodesIsSet = true;
}
bool OrgApacheSlingServletsPostImplSlingPostServletProperties::servletPostCheckinNewVersionableNodesIsSet() const
{
    return m_Servlet_post_checkinNewVersionableNodesIsSet;
}

void OrgApacheSlingServletsPostImplSlingPostServletProperties::unsetServlet_post_checkinNewVersionableNodes()
{
    m_Servlet_post_checkinNewVersionableNodesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostAutoCheckout() const
{
    return m_Servlet_post_autoCheckout;
}


void OrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostAutoCheckout(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Servlet_post_autoCheckout = value;
    m_Servlet_post_autoCheckoutIsSet = true;
}
bool OrgApacheSlingServletsPostImplSlingPostServletProperties::servletPostAutoCheckoutIsSet() const
{
    return m_Servlet_post_autoCheckoutIsSet;
}

void OrgApacheSlingServletsPostImplSlingPostServletProperties::unsetServlet_post_autoCheckout()
{
    m_Servlet_post_autoCheckoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostAutoCheckin() const
{
    return m_Servlet_post_autoCheckin;
}


void OrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostAutoCheckin(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Servlet_post_autoCheckin = value;
    m_Servlet_post_autoCheckinIsSet = true;
}
bool OrgApacheSlingServletsPostImplSlingPostServletProperties::servletPostAutoCheckinIsSet() const
{
    return m_Servlet_post_autoCheckinIsSet;
}

void OrgApacheSlingServletsPostImplSlingPostServletProperties::unsetServlet_post_autoCheckin()
{
    m_Servlet_post_autoCheckinIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostIgnorePattern() const
{
    return m_Servlet_post_ignorePattern;
}


void OrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostIgnorePattern(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Servlet_post_ignorePattern = value;
    m_Servlet_post_ignorePatternIsSet = true;
}
bool OrgApacheSlingServletsPostImplSlingPostServletProperties::servletPostIgnorePatternIsSet() const
{
    return m_Servlet_post_ignorePatternIsSet;
}

void OrgApacheSlingServletsPostImplSlingPostServletProperties::unsetServlet_post_ignorePattern()
{
    m_Servlet_post_ignorePatternIsSet = false;
}

}
}
}
}

