// Models.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe OpenAPI spec file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            }

            // Decoder for ISOFullDate
            Decoders.addDecoder(clazz: ISOFullDate.self, decoder: { (source: AnyObject) -> ISOFullDate in
                if let string = source as? String,
                   let isoDate = ISOFullDate.from(string: string) {
                    return isoDate
                }
                fatalError("formatter failed to parse \(source)")
            }) 

            // Decoder for [AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo]
            Decoders.addDecoder(clazz: [AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo].self) { (source: AnyObject) -> [AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo] in
                return Decoders.decode(clazz: [AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo].self, source: source)
            }
            // Decoder for AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo
            Decoders.addDecoder(clazz: AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo.self) { (source: AnyObject) -> AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties]
            Decoders.addDecoder(clazz: [AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties].self) { (source: AnyObject) -> [AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties] in
                return Decoders.decode(clazz: [AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties].self, source: source)
            }
            // Decoder for AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties
            Decoders.addDecoder(clazz: AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties.self) { (source: AnyObject) -> AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties()
                instance.showPlaceholder = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["showPlaceholder"])
                instance.maximumCacheEntries = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maximumCacheEntries"])
                instance.afScriptingCompatversion = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["af.scripting.compatversion"])
                instance.makeFileNameUnique = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["makeFileNameUnique"])
                instance.generatingCompliantData = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["generatingCompliantData"])
                return instance
            }


            // Decoder for [AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo]
            Decoders.addDecoder(clazz: [AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo].self) { (source: AnyObject) -> [AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo] in
                return Decoders.decode(clazz: [AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo].self, source: source)
            }
            // Decoder for AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo
            Decoders.addDecoder(clazz: AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo.self) { (source: AnyObject) -> AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties]
            Decoders.addDecoder(clazz: [AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties].self) { (source: AnyObject) -> [AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties] in
                return Decoders.decode(clazz: [AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties].self, source: source)
            }
            // Decoder for AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties
            Decoders.addDecoder(clazz: AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties.self) { (source: AnyObject) -> AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties()
                instance.fontList = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fontList"])
                return instance
            }


            // Decoder for [AnalyticsComponentQueryCacheServiceInfo]
            Decoders.addDecoder(clazz: [AnalyticsComponentQueryCacheServiceInfo].self) { (source: AnyObject) -> [AnalyticsComponentQueryCacheServiceInfo] in
                return Decoders.decode(clazz: [AnalyticsComponentQueryCacheServiceInfo].self, source: source)
            }
            // Decoder for AnalyticsComponentQueryCacheServiceInfo
            Decoders.addDecoder(clazz: AnalyticsComponentQueryCacheServiceInfo.self) { (source: AnyObject) -> AnalyticsComponentQueryCacheServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AnalyticsComponentQueryCacheServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: AnalyticsComponentQueryCacheServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [AnalyticsComponentQueryCacheServiceProperties]
            Decoders.addDecoder(clazz: [AnalyticsComponentQueryCacheServiceProperties].self) { (source: AnyObject) -> [AnalyticsComponentQueryCacheServiceProperties] in
                return Decoders.decode(clazz: [AnalyticsComponentQueryCacheServiceProperties].self, source: source)
            }
            // Decoder for AnalyticsComponentQueryCacheServiceProperties
            Decoders.addDecoder(clazz: AnalyticsComponentQueryCacheServiceProperties.self) { (source: AnyObject) -> AnalyticsComponentQueryCacheServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AnalyticsComponentQueryCacheServiceProperties()
                instance.cqAnalyticsComponentQueryCacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.analytics.component.query.cache.size"])
                return instance
            }


            // Decoder for [ApacheSlingHealthCheckResultHTMLSerializerInfo]
            Decoders.addDecoder(clazz: [ApacheSlingHealthCheckResultHTMLSerializerInfo].self) { (source: AnyObject) -> [ApacheSlingHealthCheckResultHTMLSerializerInfo] in
                return Decoders.decode(clazz: [ApacheSlingHealthCheckResultHTMLSerializerInfo].self, source: source)
            }
            // Decoder for ApacheSlingHealthCheckResultHTMLSerializerInfo
            Decoders.addDecoder(clazz: ApacheSlingHealthCheckResultHTMLSerializerInfo.self) { (source: AnyObject) -> ApacheSlingHealthCheckResultHTMLSerializerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ApacheSlingHealthCheckResultHTMLSerializerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ApacheSlingHealthCheckResultHTMLSerializerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ApacheSlingHealthCheckResultHTMLSerializerProperties]
            Decoders.addDecoder(clazz: [ApacheSlingHealthCheckResultHTMLSerializerProperties].self) { (source: AnyObject) -> [ApacheSlingHealthCheckResultHTMLSerializerProperties] in
                return Decoders.decode(clazz: [ApacheSlingHealthCheckResultHTMLSerializerProperties].self, source: source)
            }
            // Decoder for ApacheSlingHealthCheckResultHTMLSerializerProperties
            Decoders.addDecoder(clazz: ApacheSlingHealthCheckResultHTMLSerializerProperties.self) { (source: AnyObject) -> ApacheSlingHealthCheckResultHTMLSerializerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ApacheSlingHealthCheckResultHTMLSerializerProperties()
                instance.styleString = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["styleString"])
                return instance
            }


            // Decoder for [ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo]
            Decoders.addDecoder(clazz: [ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo].self) { (source: AnyObject) -> [ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo] in
                return Decoders.decode(clazz: [ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo].self, source: source)
            }
            // Decoder for ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo
            Decoders.addDecoder(clazz: ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo.self) { (source: AnyObject) -> ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationProperties]
            Decoders.addDecoder(clazz: [ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationProperties].self) { (source: AnyObject) -> [ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationProperties] in
                return Decoders.decode(clazz: [ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationProperties].self, source: source)
            }
            // Decoder for ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationProperties
            Decoders.addDecoder(clazz: ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationProperties.self) { (source: AnyObject) -> ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationProperties()
                instance.formsManagerConfigIncludeOOTBTemplates = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["formsManagerConfig.includeOOTBTemplates"])
                instance.formsManagerConfigIncludeDeprecatedTemplates = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["formsManagerConfig.includeDeprecatedTemplates"])
                return instance
            }


            // Decoder for [ComAdobeAemTransactionCoreImplTransactionRecorderInfo]
            Decoders.addDecoder(clazz: [ComAdobeAemTransactionCoreImplTransactionRecorderInfo].self) { (source: AnyObject) -> [ComAdobeAemTransactionCoreImplTransactionRecorderInfo] in
                return Decoders.decode(clazz: [ComAdobeAemTransactionCoreImplTransactionRecorderInfo].self, source: source)
            }
            // Decoder for ComAdobeAemTransactionCoreImplTransactionRecorderInfo
            Decoders.addDecoder(clazz: ComAdobeAemTransactionCoreImplTransactionRecorderInfo.self) { (source: AnyObject) -> ComAdobeAemTransactionCoreImplTransactionRecorderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeAemTransactionCoreImplTransactionRecorderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeAemTransactionCoreImplTransactionRecorderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeAemTransactionCoreImplTransactionRecorderProperties]
            Decoders.addDecoder(clazz: [ComAdobeAemTransactionCoreImplTransactionRecorderProperties].self) { (source: AnyObject) -> [ComAdobeAemTransactionCoreImplTransactionRecorderProperties] in
                return Decoders.decode(clazz: [ComAdobeAemTransactionCoreImplTransactionRecorderProperties].self, source: source)
            }
            // Decoder for ComAdobeAemTransactionCoreImplTransactionRecorderProperties
            Decoders.addDecoder(clazz: ComAdobeAemTransactionCoreImplTransactionRecorderProperties.self) { (source: AnyObject) -> ComAdobeAemTransactionCoreImplTransactionRecorderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeAemTransactionCoreImplTransactionRecorderProperties()
                instance.isTransactionRecordingEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["isTransactionRecordingEnabled"])
                return instance
            }


            // Decoder for [ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo]
            Decoders.addDecoder(clazz: [ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo].self) { (source: AnyObject) -> [ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo] in
                return Decoders.decode(clazz: [ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo].self, source: source)
            }
            // Decoder for ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo
            Decoders.addDecoder(clazz: ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo.self) { (source: AnyObject) -> ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCProperties]
            Decoders.addDecoder(clazz: [ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCProperties].self) { (source: AnyObject) -> [ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCProperties] in
                return Decoders.decode(clazz: [ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCProperties].self, source: source)
            }
            // Decoder for ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCProperties
            Decoders.addDecoder(clazz: ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCProperties.self) { (source: AnyObject) -> ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCProperties()
                instance.hcName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.name"])
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                instance.hcMbeanName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.mbean.name"])
                return instance
            }


            // Decoder for [ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo]
            Decoders.addDecoder(clazz: [ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo].self) { (source: AnyObject) -> [ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo] in
                return Decoders.decode(clazz: [ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo].self, source: source)
            }
            // Decoder for ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo
            Decoders.addDecoder(clazz: ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo.self) { (source: AnyObject) -> ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCProperties]
            Decoders.addDecoder(clazz: [ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCProperties].self) { (source: AnyObject) -> [ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCProperties] in
                return Decoders.decode(clazz: [ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCProperties].self, source: source)
            }
            // Decoder for ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCProperties
            Decoders.addDecoder(clazz: ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCProperties.self) { (source: AnyObject) -> ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCProperties()
                instance.hcName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.name"])
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                instance.hcMbeanName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.mbean.name"])
                return instance
            }


            // Decoder for [ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo].self) { (source: AnyObject) -> [ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo] in
                return Decoders.decode(clazz: [ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo].self, source: source)
            }
            // Decoder for ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo
            Decoders.addDecoder(clazz: ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo.self) { (source: AnyObject) -> ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties].self) { (source: AnyObject) -> [ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties] in
                return Decoders.decode(clazz: [ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties].self, source: source)
            }
            // Decoder for ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties
            Decoders.addDecoder(clazz: ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties.self) { (source: AnyObject) -> ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties()
                instance.preUpgradeMaintenanceTasks = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["pre-upgrade.maintenance.tasks"])
                instance.preUpgradeHcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["pre-upgrade.hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo].self) { (source: AnyObject) -> [ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo] in
                return Decoders.decode(clazz: [ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo].self, source: source)
            }
            // Decoder for ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo
            Decoders.addDecoder(clazz: ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo.self) { (source: AnyObject) -> ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties].self) { (source: AnyObject) -> [ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties] in
                return Decoders.decode(clazz: [ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties].self, source: source)
            }
            // Decoder for ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties
            Decoders.addDecoder(clazz: ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties.self) { (source: AnyObject) -> ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties()
                instance.rootPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["root.path"])
                instance.fixInconsistencies = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["fix.inconsistencies"])
                return instance
            }


            // Decoder for [ComAdobeCqAccountApiAccountManagementServiceInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqAccountApiAccountManagementServiceInfo].self) { (source: AnyObject) -> [ComAdobeCqAccountApiAccountManagementServiceInfo] in
                return Decoders.decode(clazz: [ComAdobeCqAccountApiAccountManagementServiceInfo].self, source: source)
            }
            // Decoder for ComAdobeCqAccountApiAccountManagementServiceInfo
            Decoders.addDecoder(clazz: ComAdobeCqAccountApiAccountManagementServiceInfo.self) { (source: AnyObject) -> ComAdobeCqAccountApiAccountManagementServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqAccountApiAccountManagementServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqAccountApiAccountManagementServiceProperties.self, source: sourceDictionary["properties"])
                instance.additionalProperties = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeCqAccountApiAccountManagementServiceProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqAccountApiAccountManagementServiceProperties].self) { (source: AnyObject) -> [ComAdobeCqAccountApiAccountManagementServiceProperties] in
                return Decoders.decode(clazz: [ComAdobeCqAccountApiAccountManagementServiceProperties].self, source: source)
            }
            // Decoder for ComAdobeCqAccountApiAccountManagementServiceProperties
            Decoders.addDecoder(clazz: ComAdobeCqAccountApiAccountManagementServiceProperties.self) { (source: AnyObject) -> ComAdobeCqAccountApiAccountManagementServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqAccountApiAccountManagementServiceProperties()
                instance.cqAccountmanagerTokenValidityPeriod = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.accountmanager.token.validity.period"])
                instance.cqAccountmanagerConfigRequestnewaccountMail = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.accountmanager.config.requestnewaccount.mail"])
                instance.cqAccountmanagerConfigRequestnewpwdMail = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.accountmanager.config.requestnewpwd.mail"])
                return instance
            }


            // Decoder for [ComAdobeCqAccountImplAccountManagementServletInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqAccountImplAccountManagementServletInfo].self) { (source: AnyObject) -> [ComAdobeCqAccountImplAccountManagementServletInfo] in
                return Decoders.decode(clazz: [ComAdobeCqAccountImplAccountManagementServletInfo].self, source: source)
            }
            // Decoder for ComAdobeCqAccountImplAccountManagementServletInfo
            Decoders.addDecoder(clazz: ComAdobeCqAccountImplAccountManagementServletInfo.self) { (source: AnyObject) -> ComAdobeCqAccountImplAccountManagementServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqAccountImplAccountManagementServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqAccountImplAccountManagementServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqAccountImplAccountManagementServletProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqAccountImplAccountManagementServletProperties].self) { (source: AnyObject) -> [ComAdobeCqAccountImplAccountManagementServletProperties] in
                return Decoders.decode(clazz: [ComAdobeCqAccountImplAccountManagementServletProperties].self, source: source)
            }
            // Decoder for ComAdobeCqAccountImplAccountManagementServletProperties
            Decoders.addDecoder(clazz: ComAdobeCqAccountImplAccountManagementServletProperties.self) { (source: AnyObject) -> ComAdobeCqAccountImplAccountManagementServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqAccountImplAccountManagementServletProperties()
                instance.cqAccountmanagerConfigInformnewaccountMail = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.accountmanager.config.informnewaccount.mail"])
                instance.cqAccountmanagerConfigInformnewpwdMail = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.accountmanager.config.informnewpwd.mail"])
                return instance
            }


            // Decoder for [ComAdobeCqAddressImplLocationLocationListServletInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqAddressImplLocationLocationListServletInfo].self) { (source: AnyObject) -> [ComAdobeCqAddressImplLocationLocationListServletInfo] in
                return Decoders.decode(clazz: [ComAdobeCqAddressImplLocationLocationListServletInfo].self, source: source)
            }
            // Decoder for ComAdobeCqAddressImplLocationLocationListServletInfo
            Decoders.addDecoder(clazz: ComAdobeCqAddressImplLocationLocationListServletInfo.self) { (source: AnyObject) -> ComAdobeCqAddressImplLocationLocationListServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqAddressImplLocationLocationListServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqAddressImplLocationLocationListServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqAddressImplLocationLocationListServletProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqAddressImplLocationLocationListServletProperties].self) { (source: AnyObject) -> [ComAdobeCqAddressImplLocationLocationListServletProperties] in
                return Decoders.decode(clazz: [ComAdobeCqAddressImplLocationLocationListServletProperties].self, source: source)
            }
            // Decoder for ComAdobeCqAddressImplLocationLocationListServletProperties
            Decoders.addDecoder(clazz: ComAdobeCqAddressImplLocationLocationListServletProperties.self) { (source: AnyObject) -> ComAdobeCqAddressImplLocationLocationListServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqAddressImplLocationLocationListServletProperties()
                instance.cqAddressLocationDefaultMaxResults = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.address.location.default.maxResults"])
                return instance
            }


            // Decoder for [ComAdobeCqAuditPurgeDamInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqAuditPurgeDamInfo].self) { (source: AnyObject) -> [ComAdobeCqAuditPurgeDamInfo] in
                return Decoders.decode(clazz: [ComAdobeCqAuditPurgeDamInfo].self, source: source)
            }
            // Decoder for ComAdobeCqAuditPurgeDamInfo
            Decoders.addDecoder(clazz: ComAdobeCqAuditPurgeDamInfo.self) { (source: AnyObject) -> ComAdobeCqAuditPurgeDamInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqAuditPurgeDamInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqAuditPurgeDamProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqAuditPurgeDamProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqAuditPurgeDamProperties].self) { (source: AnyObject) -> [ComAdobeCqAuditPurgeDamProperties] in
                return Decoders.decode(clazz: [ComAdobeCqAuditPurgeDamProperties].self, source: source)
            }
            // Decoder for ComAdobeCqAuditPurgeDamProperties
            Decoders.addDecoder(clazz: ComAdobeCqAuditPurgeDamProperties.self) { (source: AnyObject) -> ComAdobeCqAuditPurgeDamProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqAuditPurgeDamProperties()
                instance.auditlogRuleName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auditlog.rule.name"])
                instance.auditlogRuleContentpath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auditlog.rule.contentpath"])
                instance.auditlogRuleMinimumage = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["auditlog.rule.minimumage"])
                instance.auditlogRuleTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["auditlog.rule.types"])
                return instance
            }


            // Decoder for [ComAdobeCqAuditPurgePagesInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqAuditPurgePagesInfo].self) { (source: AnyObject) -> [ComAdobeCqAuditPurgePagesInfo] in
                return Decoders.decode(clazz: [ComAdobeCqAuditPurgePagesInfo].self, source: source)
            }
            // Decoder for ComAdobeCqAuditPurgePagesInfo
            Decoders.addDecoder(clazz: ComAdobeCqAuditPurgePagesInfo.self) { (source: AnyObject) -> ComAdobeCqAuditPurgePagesInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqAuditPurgePagesInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqAuditPurgePagesProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqAuditPurgePagesProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqAuditPurgePagesProperties].self) { (source: AnyObject) -> [ComAdobeCqAuditPurgePagesProperties] in
                return Decoders.decode(clazz: [ComAdobeCqAuditPurgePagesProperties].self, source: source)
            }
            // Decoder for ComAdobeCqAuditPurgePagesProperties
            Decoders.addDecoder(clazz: ComAdobeCqAuditPurgePagesProperties.self) { (source: AnyObject) -> ComAdobeCqAuditPurgePagesProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqAuditPurgePagesProperties()
                instance.auditlogRuleName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auditlog.rule.name"])
                instance.auditlogRuleContentpath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auditlog.rule.contentpath"])
                instance.auditlogRuleMinimumage = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["auditlog.rule.minimumage"])
                instance.auditlogRuleTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["auditlog.rule.types"])
                return instance
            }


            // Decoder for [ComAdobeCqAuditPurgeReplicationInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqAuditPurgeReplicationInfo].self) { (source: AnyObject) -> [ComAdobeCqAuditPurgeReplicationInfo] in
                return Decoders.decode(clazz: [ComAdobeCqAuditPurgeReplicationInfo].self, source: source)
            }
            // Decoder for ComAdobeCqAuditPurgeReplicationInfo
            Decoders.addDecoder(clazz: ComAdobeCqAuditPurgeReplicationInfo.self) { (source: AnyObject) -> ComAdobeCqAuditPurgeReplicationInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqAuditPurgeReplicationInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqAuditPurgeReplicationProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqAuditPurgeReplicationProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqAuditPurgeReplicationProperties].self) { (source: AnyObject) -> [ComAdobeCqAuditPurgeReplicationProperties] in
                return Decoders.decode(clazz: [ComAdobeCqAuditPurgeReplicationProperties].self, source: source)
            }
            // Decoder for ComAdobeCqAuditPurgeReplicationProperties
            Decoders.addDecoder(clazz: ComAdobeCqAuditPurgeReplicationProperties.self) { (source: AnyObject) -> ComAdobeCqAuditPurgeReplicationProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqAuditPurgeReplicationProperties()
                instance.auditlogRuleName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auditlog.rule.name"])
                instance.auditlogRuleContentpath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auditlog.rule.contentpath"])
                instance.auditlogRuleMinimumage = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["auditlog.rule.minimumage"])
                instance.auditlogRuleTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["auditlog.rule.types"])
                return instance
            }


            // Decoder for [ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo].self) { (source: AnyObject) -> [ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo] in
                return Decoders.decode(clazz: [ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo].self, source: source)
            }
            // Decoder for ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo
            Decoders.addDecoder(clazz: ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo.self) { (source: AnyObject) -> ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties].self) { (source: AnyObject) -> [ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties] in
                return Decoders.decode(clazz: [ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties].self, source: source)
            }
            // Decoder for ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties
            Decoders.addDecoder(clazz: ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties.self) { (source: AnyObject) -> ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.keypairId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["keypair.id"])
                instance.keypairAlias = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["keypair.alias"])
                instance.cdnrewriterAttributes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cdnrewriter.attributes"])
                instance.cdnRewriterDistributionDomain = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cdn.rewriter.distribution.domain"])
                return instance
            }


            // Decoder for [ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo].self) { (source: AnyObject) -> [ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo.self) { (source: AnyObject) -> ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties].self) { (source: AnyObject) -> [ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties.self) { (source: AnyObject) -> ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCdnRewriterImplCDNConfigServiceImplProperties()
                instance.cdnConfigDistributionDomain = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cdn.config.distribution.domain"])
                instance.cdnConfigEnableRewriting = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cdn.config.enable.rewriting"])
                instance.cdnConfigPathPrefixes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cdn.config.path.prefixes"])
                instance.cdnConfigCdnttl = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cdn.config.cdnttl"])
                instance.cdnConfigApplicationProtocol = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cdn.config.application.protocol"])
                return instance
            }


            // Decoder for [ComAdobeCqCdnRewriterImplCDNRewriterInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqCdnRewriterImplCDNRewriterInfo].self) { (source: AnyObject) -> [ComAdobeCqCdnRewriterImplCDNRewriterInfo] in
                return Decoders.decode(clazz: [ComAdobeCqCdnRewriterImplCDNRewriterInfo].self, source: source)
            }
            // Decoder for ComAdobeCqCdnRewriterImplCDNRewriterInfo
            Decoders.addDecoder(clazz: ComAdobeCqCdnRewriterImplCDNRewriterInfo.self) { (source: AnyObject) -> ComAdobeCqCdnRewriterImplCDNRewriterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCdnRewriterImplCDNRewriterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqCdnRewriterImplCDNRewriterProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqCdnRewriterImplCDNRewriterProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqCdnRewriterImplCDNRewriterProperties].self) { (source: AnyObject) -> [ComAdobeCqCdnRewriterImplCDNRewriterProperties] in
                return Decoders.decode(clazz: [ComAdobeCqCdnRewriterImplCDNRewriterProperties].self, source: source)
            }
            // Decoder for ComAdobeCqCdnRewriterImplCDNRewriterProperties
            Decoders.addDecoder(clazz: ComAdobeCqCdnRewriterImplCDNRewriterProperties.self) { (source: AnyObject) -> ComAdobeCqCdnRewriterImplCDNRewriterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCdnRewriterImplCDNRewriterProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.cdnrewriterAttributes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cdnrewriter.attributes"])
                instance.cdnRewriterDistributionDomain = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cdn.rewriter.distribution.domain"])
                return instance
            }


            // Decoder for [ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo].self) { (source: AnyObject) -> [ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo] in
                return Decoders.decode(clazz: [ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo].self, source: source)
            }
            // Decoder for ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo
            Decoders.addDecoder(clazz: ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo.self) { (source: AnyObject) -> ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties].self) { (source: AnyObject) -> [ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties] in
                return Decoders.decode(clazz: [ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties].self, source: source)
            }
            // Decoder for ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties
            Decoders.addDecoder(clazz: ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties.self) { (source: AnyObject) -> ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties()
                instance.flushAgents = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["flush.agents"])
                return instance
            }


            // Decoder for [ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo].self) { (source: AnyObject) -> [ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo] in
                return Decoders.decode(clazz: [ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo].self, source: source)
            }
            // Decoder for ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo
            Decoders.addDecoder(clazz: ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo.self) { (source: AnyObject) -> ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties].self) { (source: AnyObject) -> [ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties] in
                return Decoders.decode(clazz: [ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties].self, source: source)
            }
            // Decoder for ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties
            Decoders.addDecoder(clazz: ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties.self) { (source: AnyObject) -> ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties()
                instance.cqCommerceAssetHandlerActive = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.commerce.asset.handler.active"])
                instance.cqCommerceAssetHandlerName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.commerce.asset.handler.name"])
                return instance
            }


            // Decoder for [ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo].self) { (source: AnyObject) -> [ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo.self) { (source: AnyObject) -> ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties].self) { (source: AnyObject) -> [ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties.self) { (source: AnyObject) -> ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties()
                instance.cqCommerceAssetHandlerFallback = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.commerce.asset.handler.fallback"])
                return instance
            }


            // Decoder for [ComAdobeCqCommerceImplAssetStaticImageHandlerInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqCommerceImplAssetStaticImageHandlerInfo].self) { (source: AnyObject) -> [ComAdobeCqCommerceImplAssetStaticImageHandlerInfo] in
                return Decoders.decode(clazz: [ComAdobeCqCommerceImplAssetStaticImageHandlerInfo].self, source: source)
            }
            // Decoder for ComAdobeCqCommerceImplAssetStaticImageHandlerInfo
            Decoders.addDecoder(clazz: ComAdobeCqCommerceImplAssetStaticImageHandlerInfo.self) { (source: AnyObject) -> ComAdobeCqCommerceImplAssetStaticImageHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCommerceImplAssetStaticImageHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqCommerceImplAssetStaticImageHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqCommerceImplAssetStaticImageHandlerProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqCommerceImplAssetStaticImageHandlerProperties].self) { (source: AnyObject) -> [ComAdobeCqCommerceImplAssetStaticImageHandlerProperties] in
                return Decoders.decode(clazz: [ComAdobeCqCommerceImplAssetStaticImageHandlerProperties].self, source: source)
            }
            // Decoder for ComAdobeCqCommerceImplAssetStaticImageHandlerProperties
            Decoders.addDecoder(clazz: ComAdobeCqCommerceImplAssetStaticImageHandlerProperties.self) { (source: AnyObject) -> ComAdobeCqCommerceImplAssetStaticImageHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCommerceImplAssetStaticImageHandlerProperties()
                instance.cqCommerceAssetHandlerActive = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.commerce.asset.handler.active"])
                instance.cqCommerceAssetHandlerName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.commerce.asset.handler.name"])
                return instance
            }


            // Decoder for [ComAdobeCqCommerceImplAssetVideoHandlerInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqCommerceImplAssetVideoHandlerInfo].self) { (source: AnyObject) -> [ComAdobeCqCommerceImplAssetVideoHandlerInfo] in
                return Decoders.decode(clazz: [ComAdobeCqCommerceImplAssetVideoHandlerInfo].self, source: source)
            }
            // Decoder for ComAdobeCqCommerceImplAssetVideoHandlerInfo
            Decoders.addDecoder(clazz: ComAdobeCqCommerceImplAssetVideoHandlerInfo.self) { (source: AnyObject) -> ComAdobeCqCommerceImplAssetVideoHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCommerceImplAssetVideoHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqCommerceImplAssetVideoHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqCommerceImplAssetVideoHandlerProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqCommerceImplAssetVideoHandlerProperties].self) { (source: AnyObject) -> [ComAdobeCqCommerceImplAssetVideoHandlerProperties] in
                return Decoders.decode(clazz: [ComAdobeCqCommerceImplAssetVideoHandlerProperties].self, source: source)
            }
            // Decoder for ComAdobeCqCommerceImplAssetVideoHandlerProperties
            Decoders.addDecoder(clazz: ComAdobeCqCommerceImplAssetVideoHandlerProperties.self) { (source: AnyObject) -> ComAdobeCqCommerceImplAssetVideoHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCommerceImplAssetVideoHandlerProperties()
                instance.cqCommerceAssetHandlerActive = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.commerce.asset.handler.active"])
                instance.cqCommerceAssetHandlerName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.commerce.asset.handler.name"])
                return instance
            }


            // Decoder for [ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo].self) { (source: AnyObject) -> [ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo.self) { (source: AnyObject) -> ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties].self) { (source: AnyObject) -> [ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties.self) { (source: AnyObject) -> ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties()
                instance.cqCommercePromotionRoot = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.commerce.promotion.root"])
                return instance
            }


            // Decoder for [ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo].self) { (source: AnyObject) -> [ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo.self) { (source: AnyObject) -> ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties].self) { (source: AnyObject) -> [ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties.self) { (source: AnyObject) -> ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties()
                instance.cqCommerceCataloggeneratorBucketsize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.commerce.cataloggenerator.bucketsize"])
                instance.cqCommerceCataloggeneratorBucketname = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.commerce.cataloggenerator.bucketname"])
                instance.cqCommerceCataloggeneratorExcludedtemplateproperties = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.commerce.cataloggenerator.excludedtemplateproperties"])
                return instance
            }


            // Decoder for [ComAdobeCqCommercePimImplPageEventListenerInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqCommercePimImplPageEventListenerInfo].self) { (source: AnyObject) -> [ComAdobeCqCommercePimImplPageEventListenerInfo] in
                return Decoders.decode(clazz: [ComAdobeCqCommercePimImplPageEventListenerInfo].self, source: source)
            }
            // Decoder for ComAdobeCqCommercePimImplPageEventListenerInfo
            Decoders.addDecoder(clazz: ComAdobeCqCommercePimImplPageEventListenerInfo.self) { (source: AnyObject) -> ComAdobeCqCommercePimImplPageEventListenerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCommercePimImplPageEventListenerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqCommercePimImplPageEventListenerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqCommercePimImplPageEventListenerProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqCommercePimImplPageEventListenerProperties].self) { (source: AnyObject) -> [ComAdobeCqCommercePimImplPageEventListenerProperties] in
                return Decoders.decode(clazz: [ComAdobeCqCommercePimImplPageEventListenerProperties].self, source: source)
            }
            // Decoder for ComAdobeCqCommercePimImplPageEventListenerProperties
            Decoders.addDecoder(clazz: ComAdobeCqCommercePimImplPageEventListenerProperties.self) { (source: AnyObject) -> ComAdobeCqCommercePimImplPageEventListenerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCommercePimImplPageEventListenerProperties()
                instance.cqCommercePageeventlistenerEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.commerce.pageeventlistener.enabled"])
                return instance
            }


            // Decoder for [ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo].self) { (source: AnyObject) -> [ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo.self) { (source: AnyObject) -> ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties].self) { (source: AnyObject) -> [ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties.self) { (source: AnyObject) -> ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties()
                instance.feedGeneratorAlgorithm = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["Feed generator algorithm"])
                return instance
            }


            // Decoder for [ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo].self) { (source: AnyObject) -> [ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo] in
                return Decoders.decode(clazz: [ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo].self, source: source)
            }
            // Decoder for ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo
            Decoders.addDecoder(clazz: ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo.self) { (source: AnyObject) -> ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties].self) { (source: AnyObject) -> [ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties] in
                return Decoders.decode(clazz: [ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties].self, source: source)
            }
            // Decoder for ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties
            Decoders.addDecoder(clazz: ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties.self) { (source: AnyObject) -> ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties()
                instance.reportingservicesUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["reportingservices.url"])
                return instance
            }


            // Decoder for [ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo].self) { (source: AnyObject) -> [ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo] in
                return Decoders.decode(clazz: [ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo].self, source: source)
            }
            // Decoder for ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo
            Decoders.addDecoder(clazz: ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo.self) { (source: AnyObject) -> ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties].self) { (source: AnyObject) -> [ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties] in
                return Decoders.decode(clazz: [ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties].self, source: source)
            }
            // Decoder for ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties
            Decoders.addDecoder(clazz: ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties.self) { (source: AnyObject) -> ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties()
                instance.brightedgeUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["brightedge.url"])
                return instance
            }


            // Decoder for [ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo].self) { (source: AnyObject) -> [ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo] in
                return Decoders.decode(clazz: [ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo].self, source: source)
            }
            // Decoder for ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo
            Decoders.addDecoder(clazz: ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo.self) { (source: AnyObject) -> ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties].self) { (source: AnyObject) -> [ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties] in
                return Decoders.decode(clazz: [ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties].self, source: source)
            }
            // Decoder for ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties
            Decoders.addDecoder(clazz: ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties.self) { (source: AnyObject) -> ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties()
                instance.reportingservicesProxyWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["reportingservices.proxy.whitelist"])
                return instance
            }


            // Decoder for [ComAdobeCqDamCfmImplComponentComponentConfigImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqDamCfmImplComponentComponentConfigImplInfo].self) { (source: AnyObject) -> [ComAdobeCqDamCfmImplComponentComponentConfigImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqDamCfmImplComponentComponentConfigImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqDamCfmImplComponentComponentConfigImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqDamCfmImplComponentComponentConfigImplInfo.self) { (source: AnyObject) -> ComAdobeCqDamCfmImplComponentComponentConfigImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamCfmImplComponentComponentConfigImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqDamCfmImplComponentComponentConfigImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqDamCfmImplComponentComponentConfigImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqDamCfmImplComponentComponentConfigImplProperties].self) { (source: AnyObject) -> [ComAdobeCqDamCfmImplComponentComponentConfigImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqDamCfmImplComponentComponentConfigImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqDamCfmImplComponentComponentConfigImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqDamCfmImplComponentComponentConfigImplProperties.self) { (source: AnyObject) -> ComAdobeCqDamCfmImplComponentComponentConfigImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamCfmImplComponentComponentConfigImplProperties()
                instance.damCfmComponentResourceType = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["dam.cfm.component.resourceType"])
                instance.damCfmComponentFileReferenceProp = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["dam.cfm.component.fileReferenceProp"])
                instance.damCfmComponentElementsProp = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["dam.cfm.component.elementsProp"])
                instance.damCfmComponentVariationProp = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["dam.cfm.component.variationProp"])
                return instance
            }


            // Decoder for [ComAdobeCqDamCfmImplConfFeatureConfigImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqDamCfmImplConfFeatureConfigImplInfo].self) { (source: AnyObject) -> [ComAdobeCqDamCfmImplConfFeatureConfigImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqDamCfmImplConfFeatureConfigImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqDamCfmImplConfFeatureConfigImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqDamCfmImplConfFeatureConfigImplInfo.self) { (source: AnyObject) -> ComAdobeCqDamCfmImplConfFeatureConfigImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamCfmImplConfFeatureConfigImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqDamCfmImplConfFeatureConfigImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqDamCfmImplConfFeatureConfigImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqDamCfmImplConfFeatureConfigImplProperties].self) { (source: AnyObject) -> [ComAdobeCqDamCfmImplConfFeatureConfigImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqDamCfmImplConfFeatureConfigImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqDamCfmImplConfFeatureConfigImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqDamCfmImplConfFeatureConfigImplProperties.self) { (source: AnyObject) -> ComAdobeCqDamCfmImplConfFeatureConfigImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamCfmImplConfFeatureConfigImplProperties()
                instance.damCfmResourceTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["dam.cfm.resourceTypes"])
                instance.damCfmReferenceProperties = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["dam.cfm.referenceProperties"])
                return instance
            }


            // Decoder for [ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo].self) { (source: AnyObject) -> [ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo] in
                return Decoders.decode(clazz: [ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo].self, source: source)
            }
            // Decoder for ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo
            Decoders.addDecoder(clazz: ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo.self) { (source: AnyObject) -> ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties].self) { (source: AnyObject) -> [ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties] in
                return Decoders.decode(clazz: [ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties].self, source: source)
            }
            // Decoder for ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties
            Decoders.addDecoder(clazz: ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties.self) { (source: AnyObject) -> ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties()
                instance.pipelineType = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pipeline.type"])
                return instance
            }


            // Decoder for [ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo].self) { (source: AnyObject) -> [ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo] in
                return Decoders.decode(clazz: [ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo].self, source: source)
            }
            // Decoder for ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo
            Decoders.addDecoder(clazz: ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo.self) { (source: AnyObject) -> ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties].self) { (source: AnyObject) -> [ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties] in
                return Decoders.decode(clazz: [ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties].self, source: source)
            }
            // Decoder for ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties
            Decoders.addDecoder(clazz: ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties.self) { (source: AnyObject) -> ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties()
                instance.pipelineType = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pipeline.type"])
                return instance
            }


            // Decoder for [ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo].self) { (source: AnyObject) -> [ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo] in
                return Decoders.decode(clazz: [ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo].self, source: source)
            }
            // Decoder for ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo
            Decoders.addDecoder(clazz: ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo.self) { (source: AnyObject) -> ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties].self) { (source: AnyObject) -> [ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties] in
                return Decoders.decode(clazz: [ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties].self, source: source)
            }
            // Decoder for ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties
            Decoders.addDecoder(clazz: ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties.self) { (source: AnyObject) -> ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties()
                instance.pipelineType = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pipeline.type"])
                return instance
            }


            // Decoder for [ComAdobeCqDamDmProcessImagePTiffManagerImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqDamDmProcessImagePTiffManagerImplInfo].self) { (source: AnyObject) -> [ComAdobeCqDamDmProcessImagePTiffManagerImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqDamDmProcessImagePTiffManagerImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqDamDmProcessImagePTiffManagerImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqDamDmProcessImagePTiffManagerImplInfo.self) { (source: AnyObject) -> ComAdobeCqDamDmProcessImagePTiffManagerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamDmProcessImagePTiffManagerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqDamDmProcessImagePTiffManagerImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqDamDmProcessImagePTiffManagerImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqDamDmProcessImagePTiffManagerImplProperties].self) { (source: AnyObject) -> [ComAdobeCqDamDmProcessImagePTiffManagerImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqDamDmProcessImagePTiffManagerImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqDamDmProcessImagePTiffManagerImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqDamDmProcessImagePTiffManagerImplProperties.self) { (source: AnyObject) -> ComAdobeCqDamDmProcessImagePTiffManagerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamDmProcessImagePTiffManagerImplProperties()
                instance.maxMemory = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxMemory"])
                return instance
            }


            // Decoder for [ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo].self) { (source: AnyObject) -> [ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo] in
                return Decoders.decode(clazz: [ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo].self, source: source)
            }
            // Decoder for ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo
            Decoders.addDecoder(clazz: ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo.self) { (source: AnyObject) -> ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties].self) { (source: AnyObject) -> [ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties] in
                return Decoders.decode(clazz: [ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties].self, source: source)
            }
            // Decoder for ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties
            Decoders.addDecoder(clazz: ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties.self) { (source: AnyObject) -> ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties()
                instance.dmreplicateonmodifyEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["dmreplicateonmodify.enabled"])
                instance.dmreplicateonmodifyForcesyncdeletes = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["dmreplicateonmodify.forcesyncdeletes"])
                return instance
            }


            // Decoder for [ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo].self) { (source: AnyObject) -> [ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo.self) { (source: AnyObject) -> ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqDamMacSyncHelperImplMACSyncClientImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqDamMacSyncHelperImplMACSyncClientImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqDamMacSyncHelperImplMACSyncClientImplProperties].self) { (source: AnyObject) -> [ComAdobeCqDamMacSyncHelperImplMACSyncClientImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqDamMacSyncHelperImplMACSyncClientImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqDamMacSyncHelperImplMACSyncClientImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqDamMacSyncHelperImplMACSyncClientImplProperties.self) { (source: AnyObject) -> ComAdobeCqDamMacSyncHelperImplMACSyncClientImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamMacSyncHelperImplMACSyncClientImplProperties()
                instance.comAdobeDamMacSyncClientSoTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.dam.mac.sync.client.so.timeout"])
                return instance
            }


            // Decoder for [ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo].self) { (source: AnyObject) -> [ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo.self) { (source: AnyObject) -> ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties].self) { (source: AnyObject) -> [ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties.self) { (source: AnyObject) -> ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties()
                instance.comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths"])
                instance.comAdobeCqDamMacSyncDamsyncserviceSyncRenditions = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions"])
                instance.comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms"])
                instance.comAdobeCqDamMacSyncDamsyncservicePlatform = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["com.adobe.cq.dam.mac.sync.damsyncservice.platform"])
                return instance
            }


            // Decoder for [ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo].self) { (source: AnyObject) -> [ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo] in
                return Decoders.decode(clazz: [ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo].self, source: source)
            }
            // Decoder for ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo
            Decoders.addDecoder(clazz: ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo.self) { (source: AnyObject) -> ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties].self) { (source: AnyObject) -> [ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties] in
                return Decoders.decode(clazz: [ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties].self, source: source)
            }
            // Decoder for ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties
            Decoders.addDecoder(clazz: ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties.self) { (source: AnyObject) -> ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties()
                instance.nuiEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["nuiEnabled"])
                instance.nuiServiceUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["nuiServiceUrl"])
                instance.nuiApiKey = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["nuiApiKey"])
                return instance
            }


            // Decoder for [ComAdobeCqDamS7imagingImplIsImageServerComponentInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqDamS7imagingImplIsImageServerComponentInfo].self) { (source: AnyObject) -> [ComAdobeCqDamS7imagingImplIsImageServerComponentInfo] in
                return Decoders.decode(clazz: [ComAdobeCqDamS7imagingImplIsImageServerComponentInfo].self, source: source)
            }
            // Decoder for ComAdobeCqDamS7imagingImplIsImageServerComponentInfo
            Decoders.addDecoder(clazz: ComAdobeCqDamS7imagingImplIsImageServerComponentInfo.self) { (source: AnyObject) -> ComAdobeCqDamS7imagingImplIsImageServerComponentInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamS7imagingImplIsImageServerComponentInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqDamS7imagingImplIsImageServerComponentProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqDamS7imagingImplIsImageServerComponentProperties].self) { (source: AnyObject) -> [ComAdobeCqDamS7imagingImplIsImageServerComponentProperties] in
                return Decoders.decode(clazz: [ComAdobeCqDamS7imagingImplIsImageServerComponentProperties].self, source: source)
            }
            // Decoder for ComAdobeCqDamS7imagingImplIsImageServerComponentProperties
            Decoders.addDecoder(clazz: ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.self) { (source: AnyObject) -> ComAdobeCqDamS7imagingImplIsImageServerComponentProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamS7imagingImplIsImageServerComponentProperties()
                instance.tcpPort = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["TcpPort"])
                instance.allowRemoteAccess = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["AllowRemoteAccess"])
                instance.maxRenderRgnPixels = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["MaxRenderRgnPixels"])
                instance.maxMessageSize = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["MaxMessageSize"])
                instance.randomAccessUrlTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["RandomAccessUrlTimeout"])
                instance.workerThreads = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["WorkerThreads"])
                return instance
            }


            // Decoder for [ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo].self) { (source: AnyObject) -> [ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo] in
                return Decoders.decode(clazz: [ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo].self, source: source)
            }
            // Decoder for ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo
            Decoders.addDecoder(clazz: ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo.self) { (source: AnyObject) -> ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties].self) { (source: AnyObject) -> [ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties] in
                return Decoders.decode(clazz: [ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties].self, source: source)
            }
            // Decoder for ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties
            Decoders.addDecoder(clazz: ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties.self) { (source: AnyObject) -> ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties()
                instance.cacheEnable = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cache.enable"])
                instance.cacheRootPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cache.rootPaths"])
                instance.cacheMaxSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.maxSize"])
                instance.cacheMaxEntries = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.maxEntries"])
                return instance
            }


            // Decoder for [ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo].self) { (source: AnyObject) -> [ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo] in
                return Decoders.decode(clazz: [ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo].self, source: source)
            }
            // Decoder for ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo
            Decoders.addDecoder(clazz: ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo.self) { (source: AnyObject) -> ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties].self) { (source: AnyObject) -> [ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties] in
                return Decoders.decode(clazz: [ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties].self, source: source)
            }
            // Decoder for ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties
            Decoders.addDecoder(clazz: ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties.self) { (source: AnyObject) -> ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamWebdavImplIoAssetIOHandlerProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.pathPrefix = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pathPrefix"])
                instance.createVersion = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["createVersion"])
                return instance
            }


            // Decoder for [ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo].self) { (source: AnyObject) -> [ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo] in
                return Decoders.decode(clazz: [ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo].self, source: source)
            }
            // Decoder for ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo
            Decoders.addDecoder(clazz: ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo.self) { (source: AnyObject) -> ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties].self) { (source: AnyObject) -> [ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties] in
                return Decoders.decode(clazz: [ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties].self, source: source)
            }
            // Decoder for ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties
            Decoders.addDecoder(clazz: ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties.self) { (source: AnyObject) -> ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties()
                instance.cqDamWebdavVersionLinkingEnable = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.webdav.version.linking.enable"])
                instance.cqDamWebdavVersionLinkingSchedulerPeriod = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.webdav.version.linking.scheduler.period"])
                instance.cqDamWebdavVersionLinkingStagingTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.webdav.version.linking.staging.timeout"])
                return instance
            }


            // Decoder for [ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo].self) { (source: AnyObject) -> [ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo] in
                return Decoders.decode(clazz: [ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo].self, source: source)
            }
            // Decoder for ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo
            Decoders.addDecoder(clazz: ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo.self) { (source: AnyObject) -> ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties].self) { (source: AnyObject) -> [ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties] in
                return Decoders.decode(clazz: [ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties].self, source: source)
            }
            // Decoder for ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties
            Decoders.addDecoder(clazz: ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties.self) { (source: AnyObject) -> ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties()
                instance.comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters"])
                return instance
            }


            // Decoder for [ComAdobeCqDeserfwImplDeserializationFirewallImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqDeserfwImplDeserializationFirewallImplInfo].self) { (source: AnyObject) -> [ComAdobeCqDeserfwImplDeserializationFirewallImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqDeserfwImplDeserializationFirewallImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqDeserfwImplDeserializationFirewallImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqDeserfwImplDeserializationFirewallImplInfo.self) { (source: AnyObject) -> ComAdobeCqDeserfwImplDeserializationFirewallImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDeserfwImplDeserializationFirewallImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqDeserfwImplDeserializationFirewallImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqDeserfwImplDeserializationFirewallImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqDeserfwImplDeserializationFirewallImplProperties].self) { (source: AnyObject) -> [ComAdobeCqDeserfwImplDeserializationFirewallImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqDeserfwImplDeserializationFirewallImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqDeserfwImplDeserializationFirewallImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqDeserfwImplDeserializationFirewallImplProperties.self) { (source: AnyObject) -> ComAdobeCqDeserfwImplDeserializationFirewallImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDeserfwImplDeserializationFirewallImplProperties()
                instance.firewallDeserializationWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["firewall.deserialization.whitelist"])
                instance.firewallDeserializationBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["firewall.deserialization.blacklist"])
                instance.firewallDeserializationDiagnostics = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["firewall.deserialization.diagnostics"])
                return instance
            }


            // Decoder for [ComAdobeCqDtmImplServiceDTMWebServiceImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqDtmImplServiceDTMWebServiceImplInfo].self) { (source: AnyObject) -> [ComAdobeCqDtmImplServiceDTMWebServiceImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqDtmImplServiceDTMWebServiceImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqDtmImplServiceDTMWebServiceImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqDtmImplServiceDTMWebServiceImplInfo.self) { (source: AnyObject) -> ComAdobeCqDtmImplServiceDTMWebServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDtmImplServiceDTMWebServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqDtmImplServiceDTMWebServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqDtmImplServiceDTMWebServiceImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqDtmImplServiceDTMWebServiceImplProperties].self) { (source: AnyObject) -> [ComAdobeCqDtmImplServiceDTMWebServiceImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqDtmImplServiceDTMWebServiceImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqDtmImplServiceDTMWebServiceImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqDtmImplServiceDTMWebServiceImplProperties.self) { (source: AnyObject) -> ComAdobeCqDtmImplServiceDTMWebServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDtmImplServiceDTMWebServiceImplProperties()
                instance.connectionTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["connection.timeout"])
                instance.socketTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["socket.timeout"])
                return instance
            }


            // Decoder for [ComAdobeCqDtmImplServletsDTMDeployHookServletInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqDtmImplServletsDTMDeployHookServletInfo].self) { (source: AnyObject) -> [ComAdobeCqDtmImplServletsDTMDeployHookServletInfo] in
                return Decoders.decode(clazz: [ComAdobeCqDtmImplServletsDTMDeployHookServletInfo].self, source: source)
            }
            // Decoder for ComAdobeCqDtmImplServletsDTMDeployHookServletInfo
            Decoders.addDecoder(clazz: ComAdobeCqDtmImplServletsDTMDeployHookServletInfo.self) { (source: AnyObject) -> ComAdobeCqDtmImplServletsDTMDeployHookServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDtmImplServletsDTMDeployHookServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqDtmImplServletsDTMDeployHookServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqDtmImplServletsDTMDeployHookServletProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqDtmImplServletsDTMDeployHookServletProperties].self) { (source: AnyObject) -> [ComAdobeCqDtmImplServletsDTMDeployHookServletProperties] in
                return Decoders.decode(clazz: [ComAdobeCqDtmImplServletsDTMDeployHookServletProperties].self, source: source)
            }
            // Decoder for ComAdobeCqDtmImplServletsDTMDeployHookServletProperties
            Decoders.addDecoder(clazz: ComAdobeCqDtmImplServletsDTMDeployHookServletProperties.self) { (source: AnyObject) -> ComAdobeCqDtmImplServletsDTMDeployHookServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDtmImplServletsDTMDeployHookServletProperties()
                instance.dtmStagingIpWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["dtm.staging.ip.whitelist"])
                instance.dtmProductionIpWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["dtm.production.ip.whitelist"])
                return instance
            }


            // Decoder for [ComAdobeCqDtmReactorImplServiceWebServiceImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqDtmReactorImplServiceWebServiceImplInfo].self) { (source: AnyObject) -> [ComAdobeCqDtmReactorImplServiceWebServiceImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqDtmReactorImplServiceWebServiceImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqDtmReactorImplServiceWebServiceImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqDtmReactorImplServiceWebServiceImplInfo.self) { (source: AnyObject) -> ComAdobeCqDtmReactorImplServiceWebServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDtmReactorImplServiceWebServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqDtmReactorImplServiceWebServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqDtmReactorImplServiceWebServiceImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqDtmReactorImplServiceWebServiceImplProperties].self) { (source: AnyObject) -> [ComAdobeCqDtmReactorImplServiceWebServiceImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqDtmReactorImplServiceWebServiceImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqDtmReactorImplServiceWebServiceImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqDtmReactorImplServiceWebServiceImplProperties.self) { (source: AnyObject) -> ComAdobeCqDtmReactorImplServiceWebServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqDtmReactorImplServiceWebServiceImplProperties()
                instance.endpointUri = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["endpointUri"])
                instance.connectionTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["connectionTimeout"])
                instance.socketTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["socketTimeout"])
                return instance
            }


            // Decoder for [ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo].self) { (source: AnyObject) -> [ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo] in
                return Decoders.decode(clazz: [ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo].self, source: source)
            }
            // Decoder for ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo
            Decoders.addDecoder(clazz: ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo.self) { (source: AnyObject) -> ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties.self, source: sourceDictionary["properties"])
                instance.additionalProperties = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties].self) { (source: AnyObject) -> [ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties] in
                return Decoders.decode(clazz: [ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties].self, source: source)
            }
            // Decoder for ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties
            Decoders.addDecoder(clazz: ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties.self) { (source: AnyObject) -> ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties()
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                instance.disabledForGroups = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["disabledForGroups"])
                return instance
            }


            // Decoder for [ComAdobeCqHcContentPackagesHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqHcContentPackagesHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeCqHcContentPackagesHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeCqHcContentPackagesHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeCqHcContentPackagesHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeCqHcContentPackagesHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeCqHcContentPackagesHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqHcContentPackagesHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqHcContentPackagesHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqHcContentPackagesHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqHcContentPackagesHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeCqHcContentPackagesHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeCqHcContentPackagesHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeCqHcContentPackagesHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeCqHcContentPackagesHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeCqHcContentPackagesHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqHcContentPackagesHealthCheckProperties()
                instance.hcName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.name"])
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                instance.hcMbeanName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.mbean.name"])
                instance.packageNames = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["package.names"])
                return instance
            }


            // Decoder for [ComAdobeCqHistoryImplHistoryRequestFilterInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqHistoryImplHistoryRequestFilterInfo].self) { (source: AnyObject) -> [ComAdobeCqHistoryImplHistoryRequestFilterInfo] in
                return Decoders.decode(clazz: [ComAdobeCqHistoryImplHistoryRequestFilterInfo].self, source: source)
            }
            // Decoder for ComAdobeCqHistoryImplHistoryRequestFilterInfo
            Decoders.addDecoder(clazz: ComAdobeCqHistoryImplHistoryRequestFilterInfo.self) { (source: AnyObject) -> ComAdobeCqHistoryImplHistoryRequestFilterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqHistoryImplHistoryRequestFilterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqHistoryImplHistoryRequestFilterProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeCqHistoryImplHistoryRequestFilterProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqHistoryImplHistoryRequestFilterProperties].self) { (source: AnyObject) -> [ComAdobeCqHistoryImplHistoryRequestFilterProperties] in
                return Decoders.decode(clazz: [ComAdobeCqHistoryImplHistoryRequestFilterProperties].self, source: source)
            }
            // Decoder for ComAdobeCqHistoryImplHistoryRequestFilterProperties
            Decoders.addDecoder(clazz: ComAdobeCqHistoryImplHistoryRequestFilterProperties.self) { (source: AnyObject) -> ComAdobeCqHistoryImplHistoryRequestFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqHistoryImplHistoryRequestFilterProperties()
                instance.historyRequestFilterExcludedSelectors = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["history.requestFilter.excludedSelectors"])
                instance.historyRequestFilterExcludedExtensions = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["history.requestFilter.excludedExtensions"])
                return instance
            }


            // Decoder for [ComAdobeCqHistoryImplHistoryServiceImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqHistoryImplHistoryServiceImplInfo].self) { (source: AnyObject) -> [ComAdobeCqHistoryImplHistoryServiceImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqHistoryImplHistoryServiceImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqHistoryImplHistoryServiceImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqHistoryImplHistoryServiceImplInfo.self) { (source: AnyObject) -> ComAdobeCqHistoryImplHistoryServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqHistoryImplHistoryServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqHistoryImplHistoryServiceImplProperties.self, source: sourceDictionary["properties"])
                instance.additionalProperties = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeCqHistoryImplHistoryServiceImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqHistoryImplHistoryServiceImplProperties].self) { (source: AnyObject) -> [ComAdobeCqHistoryImplHistoryServiceImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqHistoryImplHistoryServiceImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqHistoryImplHistoryServiceImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqHistoryImplHistoryServiceImplProperties.self) { (source: AnyObject) -> ComAdobeCqHistoryImplHistoryServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqHistoryImplHistoryServiceImplProperties()
                instance.historyServiceResourceTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["history.service.resourceTypes"])
                instance.historyServicePathFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["history.service.pathFilter"])
                return instance
            }


            // Decoder for [ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo].self) { (source: AnyObject) -> [ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo] in
                return Decoders.decode(clazz: [ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo].self, source: source)
            }
            // Decoder for ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo
            Decoders.addDecoder(clazz: ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo.self) { (source: AnyObject) -> ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties].self) { (source: AnyObject) -> [ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties] in
                return Decoders.decode(clazz: [ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties].self, source: source)
            }
            // Decoder for ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties
            Decoders.addDecoder(clazz: ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties.self) { (source: AnyObject) -> ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties()
                instance.inboxImplTypeproviderRegistrypaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["inbox.impl.typeprovider.registrypaths"])
                instance.inboxImplTypeproviderLegacypaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["inbox.impl.typeprovider.legacypaths"])
                instance.inboxImplTypeproviderDefaulturlFailureitem = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["inbox.impl.typeprovider.defaulturl.failureitem"])
                instance.inboxImplTypeproviderDefaulturlWorkitem = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["inbox.impl.typeprovider.defaulturl.workitem"])
                instance.inboxImplTypeproviderDefaulturlTask = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["inbox.impl.typeprovider.defaulturl.task"])
                return instance
            }


            // Decoder for [ComAdobeCqProjectsImplServletProjectImageServletInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqProjectsImplServletProjectImageServletInfo].self) { (source: AnyObject) -> [ComAdobeCqProjectsImplServletProjectImageServletInfo] in
                return Decoders.decode(clazz: [ComAdobeCqProjectsImplServletProjectImageServletInfo].self, source: source)
            }
            // Decoder for ComAdobeCqProjectsImplServletProjectImageServletInfo
            Decoders.addDecoder(clazz: ComAdobeCqProjectsImplServletProjectImageServletInfo.self) { (source: AnyObject) -> ComAdobeCqProjectsImplServletProjectImageServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqProjectsImplServletProjectImageServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqProjectsImplServletProjectImageServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqProjectsImplServletProjectImageServletProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqProjectsImplServletProjectImageServletProperties].self) { (source: AnyObject) -> [ComAdobeCqProjectsImplServletProjectImageServletProperties] in
                return Decoders.decode(clazz: [ComAdobeCqProjectsImplServletProjectImageServletProperties].self, source: source)
            }
            // Decoder for ComAdobeCqProjectsImplServletProjectImageServletProperties
            Decoders.addDecoder(clazz: ComAdobeCqProjectsImplServletProjectImageServletProperties.self) { (source: AnyObject) -> ComAdobeCqProjectsImplServletProjectImageServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqProjectsImplServletProjectImageServletProperties()
                instance.imageQuality = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["image.quality"])
                instance.imageSupportedResolutions = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["image.supported.resolutions"])
                return instance
            }


            // Decoder for [ComAdobeCqProjectsPurgeSchedulerInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqProjectsPurgeSchedulerInfo].self) { (source: AnyObject) -> [ComAdobeCqProjectsPurgeSchedulerInfo] in
                return Decoders.decode(clazz: [ComAdobeCqProjectsPurgeSchedulerInfo].self, source: source)
            }
            // Decoder for ComAdobeCqProjectsPurgeSchedulerInfo
            Decoders.addDecoder(clazz: ComAdobeCqProjectsPurgeSchedulerInfo.self) { (source: AnyObject) -> ComAdobeCqProjectsPurgeSchedulerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqProjectsPurgeSchedulerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqProjectsPurgeSchedulerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqProjectsPurgeSchedulerProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqProjectsPurgeSchedulerProperties].self) { (source: AnyObject) -> [ComAdobeCqProjectsPurgeSchedulerProperties] in
                return Decoders.decode(clazz: [ComAdobeCqProjectsPurgeSchedulerProperties].self, source: source)
            }
            // Decoder for ComAdobeCqProjectsPurgeSchedulerProperties
            Decoders.addDecoder(clazz: ComAdobeCqProjectsPurgeSchedulerProperties.self) { (source: AnyObject) -> ComAdobeCqProjectsPurgeSchedulerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqProjectsPurgeSchedulerProperties()
                instance.scheduledpurgeName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduledpurge.name"])
                instance.scheduledpurgePurgeActive = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["scheduledpurge.purgeActive"])
                instance.scheduledpurgeTemplates = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["scheduledpurge.templates"])
                instance.scheduledpurgePurgeGroups = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["scheduledpurge.purgeGroups"])
                instance.scheduledpurgePurgeAssets = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["scheduledpurge.purgeAssets"])
                instance.scheduledpurgeTerminateRunningWorkflows = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["scheduledpurge.terminateRunningWorkflows"])
                instance.scheduledpurgeDaysold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["scheduledpurge.daysold"])
                instance.scheduledpurgeSaveThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["scheduledpurge.saveThreshold"])
                return instance
            }


            // Decoder for [ComAdobeCqScheduledExporterImplScheduledExporterImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqScheduledExporterImplScheduledExporterImplInfo].self) { (source: AnyObject) -> [ComAdobeCqScheduledExporterImplScheduledExporterImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqScheduledExporterImplScheduledExporterImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqScheduledExporterImplScheduledExporterImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqScheduledExporterImplScheduledExporterImplInfo.self) { (source: AnyObject) -> ComAdobeCqScheduledExporterImplScheduledExporterImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScheduledExporterImplScheduledExporterImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqScheduledExporterImplScheduledExporterImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqScheduledExporterImplScheduledExporterImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqScheduledExporterImplScheduledExporterImplProperties].self) { (source: AnyObject) -> [ComAdobeCqScheduledExporterImplScheduledExporterImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqScheduledExporterImplScheduledExporterImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqScheduledExporterImplScheduledExporterImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqScheduledExporterImplScheduledExporterImplProperties.self) { (source: AnyObject) -> ComAdobeCqScheduledExporterImplScheduledExporterImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScheduledExporterImplScheduledExporterImplProperties()
                instance.includePaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["include.paths"])
                instance.exporterUser = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["exporter.user"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo].self) { (source: AnyObject) -> [ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo.self) { (source: AnyObject) -> ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties].self) { (source: AnyObject) -> [ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties.self) { (source: AnyObject) -> ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties()
                instance.comAdobeCqScreensAnalyticsImplUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.analytics.impl.url"])
                instance.comAdobeCqScreensAnalyticsImplApikey = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.analytics.impl.apikey"])
                instance.comAdobeCqScreensAnalyticsImplProject = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.analytics.impl.project"])
                instance.comAdobeCqScreensAnalyticsImplEnvironment = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["com.adobe.cq.screens.analytics.impl.environment"])
                instance.comAdobeCqScreensAnalyticsImplSendFrequency = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.cq.screens.analytics.impl.sendFrequency"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensDeviceImplDeviceServiceInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensDeviceImplDeviceServiceInfo].self) { (source: AnyObject) -> [ComAdobeCqScreensDeviceImplDeviceServiceInfo] in
                return Decoders.decode(clazz: [ComAdobeCqScreensDeviceImplDeviceServiceInfo].self, source: source)
            }
            // Decoder for ComAdobeCqScreensDeviceImplDeviceServiceInfo
            Decoders.addDecoder(clazz: ComAdobeCqScreensDeviceImplDeviceServiceInfo.self) { (source: AnyObject) -> ComAdobeCqScreensDeviceImplDeviceServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensDeviceImplDeviceServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqScreensDeviceImplDeviceServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensDeviceImplDeviceServiceProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensDeviceImplDeviceServiceProperties].self) { (source: AnyObject) -> [ComAdobeCqScreensDeviceImplDeviceServiceProperties] in
                return Decoders.decode(clazz: [ComAdobeCqScreensDeviceImplDeviceServiceProperties].self, source: source)
            }
            // Decoder for ComAdobeCqScreensDeviceImplDeviceServiceProperties
            Decoders.addDecoder(clazz: ComAdobeCqScreensDeviceImplDeviceServiceProperties.self) { (source: AnyObject) -> ComAdobeCqScreensDeviceImplDeviceServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensDeviceImplDeviceServiceProperties()
                instance.comAdobeAemScreensPlayerPingfrequency = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.aem.screens.player.pingfrequency"])
                instance.comAdobeAemScreensDevicePaswordSpecialchars = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.aem.screens.device.pasword.specialchars"])
                instance.comAdobeAemScreensDevicePaswordMinlowercasechars = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.aem.screens.device.pasword.minlowercasechars"])
                instance.comAdobeAemScreensDevicePaswordMinuppercasechars = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.aem.screens.device.pasword.minuppercasechars"])
                instance.comAdobeAemScreensDevicePaswordMinnumberchars = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.aem.screens.device.pasword.minnumberchars"])
                instance.comAdobeAemScreensDevicePaswordMinspecialchars = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.aem.screens.device.pasword.minspecialchars"])
                instance.comAdobeAemScreensDevicePaswordMinlength = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.aem.screens.device.pasword.minlength"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo].self) { (source: AnyObject) -> [ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo.self) { (source: AnyObject) -> ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties].self) { (source: AnyObject) -> [ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties.self) { (source: AnyObject) -> ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties()
                instance.deviceRegistrationTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["deviceRegistrationTimeout"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo].self) { (source: AnyObject) -> [ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo] in
                return Decoders.decode(clazz: [ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo].self, source: source)
            }
            // Decoder for ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo
            Decoders.addDecoder(clazz: ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo.self) { (source: AnyObject) -> ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties].self) { (source: AnyObject) -> [ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties] in
                return Decoders.decode(clazz: [ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties].self, source: source)
            }
            // Decoder for ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties
            Decoders.addDecoder(clazz: ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties.self) { (source: AnyObject) -> ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties()
                instance.cqPagesupdatehandlerImageresourcetypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.pagesupdatehandler.imageresourcetypes"])
                instance.cqPagesupdatehandlerProductresourcetypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.pagesupdatehandler.productresourcetypes"])
                instance.cqPagesupdatehandlerVideoresourcetypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.pagesupdatehandler.videoresourcetypes"])
                instance.cqPagesupdatehandlerDynamicsequenceresourcetypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.pagesupdatehandler.dynamicsequenceresourcetypes"])
                instance.cqPagesupdatehandlerPreviewmodepaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.pagesupdatehandler.previewmodepaths"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo].self) { (source: AnyObject) -> [ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo] in
                return Decoders.decode(clazz: [ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo].self, source: source)
            }
            // Decoder for ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo
            Decoders.addDecoder(clazz: ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo.self) { (source: AnyObject) -> ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties].self) { (source: AnyObject) -> [ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties] in
                return Decoders.decode(clazz: [ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties].self, source: source)
            }
            // Decoder for ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties
            Decoders.addDecoder(clazz: ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties.self) { (source: AnyObject) -> ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties()
                instance.schedulerExpression = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo].self) { (source: AnyObject) -> [ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo.self) { (source: AnyObject) -> ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties].self) { (source: AnyObject) -> [ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties.self) { (source: AnyObject) -> ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties()
                instance.comAdobeAemScreensImplRemoteRequestTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.aem.screens.impl.remote.request_timeout"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensImplScreensChannelPostProcessorInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensImplScreensChannelPostProcessorInfo].self) { (source: AnyObject) -> [ComAdobeCqScreensImplScreensChannelPostProcessorInfo] in
                return Decoders.decode(clazz: [ComAdobeCqScreensImplScreensChannelPostProcessorInfo].self, source: source)
            }
            // Decoder for ComAdobeCqScreensImplScreensChannelPostProcessorInfo
            Decoders.addDecoder(clazz: ComAdobeCqScreensImplScreensChannelPostProcessorInfo.self) { (source: AnyObject) -> ComAdobeCqScreensImplScreensChannelPostProcessorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensImplScreensChannelPostProcessorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqScreensImplScreensChannelPostProcessorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensImplScreensChannelPostProcessorProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensImplScreensChannelPostProcessorProperties].self) { (source: AnyObject) -> [ComAdobeCqScreensImplScreensChannelPostProcessorProperties] in
                return Decoders.decode(clazz: [ComAdobeCqScreensImplScreensChannelPostProcessorProperties].self, source: source)
            }
            // Decoder for ComAdobeCqScreensImplScreensChannelPostProcessorProperties
            Decoders.addDecoder(clazz: ComAdobeCqScreensImplScreensChannelPostProcessorProperties.self) { (source: AnyObject) -> ComAdobeCqScreensImplScreensChannelPostProcessorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensImplScreensChannelPostProcessorProperties()
                instance.screensChannelsPropertiesToRemove = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["screens.channels.properties.to.remove"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo].self) { (source: AnyObject) -> [ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo.self) { (source: AnyObject) -> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties].self) { (source: AnyObject) -> [ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties.self) { (source: AnyObject) -> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties()
                instance.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath"])
                instance.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency"])
                instance.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout"])
                instance.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients"])
                instance.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver"])
                instance.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport"])
                instance.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls"])
                instance.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username"])
                instance.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo].self) { (source: AnyObject) -> [ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo] in
                return Decoders.decode(clazz: [ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo].self, source: source)
            }
            // Decoder for ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo
            Decoders.addDecoder(clazz: ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo.self) { (source: AnyObject) -> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties].self) { (source: AnyObject) -> [ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties] in
                return Decoders.decode(clazz: [ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties].self, source: source)
            }
            // Decoder for ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties
            Decoders.addDecoder(clazz: ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.self) { (source: AnyObject) -> ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.globalSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["global.size"])
                instance.maxDiskUsage = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["max.disk.usage"])
                instance.persistenceEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["persistence.enabled"])
                instance.threadPoolMaxSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["thread.pool.max.size"])
                instance.scheduledThreadPoolMaxSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["scheduled.thread.pool.max.size"])
                instance.gracefulShutdownTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["graceful.shutdown.timeout"])
                instance.queues = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["queues"])
                instance.topics = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["topics"])
                instance.addressesMaxDeliveryAttempts = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["addresses.max.delivery.attempts"])
                instance.addressesExpiryDelay = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["addresses.expiry.delay"])
                instance.addressesAddressFullMessagePolicy = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["addresses.address.full.message.policy"])
                instance.addressesMaxSizeBytes = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["addresses.max.size.bytes"])
                instance.addressesPageSizeBytes = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["addresses.page.size.bytes"])
                instance.addressesPageCacheMaxSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["addresses.page.cache.max.size"])
                instance.clusterUser = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cluster.user"])
                instance.clusterPassword = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cluster.password"])
                instance.clusterCallTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.call.timeout"])
                instance.clusterCallFailoverTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.call.failover.timeout"])
                instance.clusterClientFailureCheckPeriod = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.client.failure.check.period"])
                instance.clusterNotificationAttempts = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.notification.attempts"])
                instance.clusterNotificationInterval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.notification.interval"])
                instance.idCacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["id.cache.size"])
                instance.clusterConfirmationWindowSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.confirmation.window.size"])
                instance.clusterConnectionTtl = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.connection.ttl"])
                instance.clusterDuplicateDetection = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cluster.duplicate.detection"])
                instance.clusterInitialConnectAttempts = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.initial.connect.attempts"])
                instance.clusterMaxRetryInterval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.max.retry.interval"])
                instance.clusterMinLargeMessageSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.min.large.message.size"])
                instance.clusterProducerWindowSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.producer.window.size"])
                instance.clusterReconnectAttempts = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.reconnect.attempts"])
                instance.clusterRetryInterval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.retry.interval"])
                instance.clusterRetryIntervalMultiplier = Decoders.decodeOptional(clazz: ConfigNodePropertyFloat.self, source: sourceDictionary["cluster.retry.interval.multiplier"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo].self) { (source: AnyObject) -> [ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo.self) { (source: AnyObject) -> ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties].self) { (source: AnyObject) -> [ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties.self) { (source: AnyObject) -> ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties()
                instance.comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath"])
                instance.comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo].self) { (source: AnyObject) -> [ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo.self) { (source: AnyObject) -> ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties].self) { (source: AnyObject) -> [ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties.self) { (source: AnyObject) -> ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties()
                instance.disableSmartSync = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["disableSmartSync"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo].self) { (source: AnyObject) -> [ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo] in
                return Decoders.decode(clazz: [ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo].self, source: source)
            }
            // Decoder for ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo
            Decoders.addDecoder(clazz: ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo.self) { (source: AnyObject) -> ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties].self) { (source: AnyObject) -> [ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties] in
                return Decoders.decode(clazz: [ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties].self, source: source)
            }
            // Decoder for ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties
            Decoders.addDecoder(clazz: ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties.self) { (source: AnyObject) -> ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties()
                instance.enableDataTriggeredContent = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableDataTriggeredContent"])
                return instance
            }


            // Decoder for [ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo].self) { (source: AnyObject) -> [ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo
            Decoders.addDecoder(clazz: ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo.self) { (source: AnyObject) -> ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties].self) { (source: AnyObject) -> [ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties
            Decoders.addDecoder(clazz: ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties.self) { (source: AnyObject) -> ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                instance.dispatcherAddress = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["dispatcher.address"])
                instance.dispatcherFilterAllowed = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["dispatcher.filter.allowed"])
                instance.dispatcherFilterBlocked = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["dispatcher.filter.blocked"])
                return instance
            }


            // Decoder for [ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties.self, source: sourceDictionary["properties"])
                instance.additionalProperties = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                instance.webserverAddress = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["webserver.address"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo.self) { (source: AnyObject) -> ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties.self) { (source: AnyObject) -> ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties()
                instance.enable = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable"])
                instance.ttl1 = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["ttl1"])
                instance.ttl2 = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["ttl2"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo.self) { (source: AnyObject) -> ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties.self) { (source: AnyObject) -> ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties()
                instance.priority = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priority"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo.self) { (source: AnyObject) -> ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties.self) { (source: AnyObject) -> ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties()
                instance.priority = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priority"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo.self) { (source: AnyObject) -> ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties.self) { (source: AnyObject) -> ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties()
                instance.eventTopics = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.topics"])
                instance.eventFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo.self) { (source: AnyObject) -> ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties.self) { (source: AnyObject) -> ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties()
                instance.accepted = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["accepted"])
                instance.ranked = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["ranked"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo.self) { (source: AnyObject) -> ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties.self) { (source: AnyObject) -> ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties()
                instance.ranking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["ranking"])
                instance.enable = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo.self) { (source: AnyObject) -> ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties.self) { (source: AnyObject) -> ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties()
                instance.streamPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["streamPath"])
                instance.streamName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["streamName"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties()
                instance.maxRetry = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["MaxRetry"])
                instance.fieldWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"])
                instance.attachmentTypeBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["attachmentTypeBlacklist"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties()
                instance.attachmentTypeBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["attachmentTypeBlacklist"])
                instance.extensionOrder = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["extension.order"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCalendarServletsTimeZoneServletInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCalendarServletsTimeZoneServletInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCalendarServletsTimeZoneServletInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCalendarServletsTimeZoneServletInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCalendarServletsTimeZoneServletInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCalendarServletsTimeZoneServletInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCalendarServletsTimeZoneServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCalendarServletsTimeZoneServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCalendarServletsTimeZoneServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCalendarServletsTimeZoneServletProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCalendarServletsTimeZoneServletProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCalendarServletsTimeZoneServletProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCalendarServletsTimeZoneServletProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCalendarServletsTimeZoneServletProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCalendarServletsTimeZoneServletProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCalendarServletsTimeZoneServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCalendarServletsTimeZoneServletProperties()
                instance.timezonesExpirytime = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["timezones.expirytime"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties()
                instance.ranking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["ranking"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties()
                instance.fieldWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"])
                instance.attachmentTypeBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["attachmentTypeBlacklist"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties()
                instance.fieldWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"])
                instance.attachmentTypeBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["attachmentTypeBlacklist"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties()
                instance.numUserLimit = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["numUserLimit"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties()
                instance.enableScheduledPostsSearch = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableScheduledPostsSearch"])
                instance.numberOfMinutes = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["numberOfMinutes"])
                instance.maxSearchLimit = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxSearchLimit"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterProperties()
                instance.corsEnabling = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cors.enabling"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties()
                instance.priorityOrder = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priorityOrder"])
                instance.replyEmailPatterns = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["replyEmailPatterns"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties()
                instance.contextPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["context.path"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties()
                instance.eventTopics = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.topics"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties()
                instance.priorityOrder = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priorityOrder"])
                instance.replyEmailPatterns = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["replyEmailPatterns"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties()
                instance.patternTime = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pattern.time"])
                instance.patternNewline = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pattern.newline"])
                instance.patternDayOfMonth = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pattern.dayOfMonth"])
                instance.patternMonth = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pattern.month"])
                instance.patternYear = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pattern.year"])
                instance.patternDate = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pattern.date"])
                instance.patternDateTime = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pattern.dateTime"])
                instance.patternEmail = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pattern.email"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties()
                instance.emailName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["email.name"])
                instance.emailCreatePostFromReply = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["email.createPostFromReply"])
                instance.emailAddCommentIdTo = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["email.addCommentIdTo"])
                instance.emailSubjectMaximumLength = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["email.subjectMaximumLength"])
                instance.emailReplyToAddress = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["email.replyToAddress"])
                instance.emailReplyToDelimiter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["email.replyToDelimiter"])
                instance.emailTrackerIdPrefixInSubject = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["email.trackerIdPrefixInSubject"])
                instance.emailTrackerIdPrefixInBody = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["email.trackerIdPrefixInBody"])
                instance.emailAsHTML = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["email.asHTML"])
                instance.emailDefaultUserName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["email.defaultUserName"])
                instance.emailTemplatesRootPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["email.templates.rootPath"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties()
                instance.connectProtocol = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["connectProtocol"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties()
                instance.priorityOrder = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priorityOrder"])
                instance.replyEmailPatterns = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["replyEmailPatterns"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderProperties()
                instance.priorityOrder = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priorityOrder"])
                instance.replyEmailPatterns = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["replyEmailPatterns"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties()
                instance.priorityOrder = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priorityOrder"])
                instance.replyEmailPatterns = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["replyEmailPatterns"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties()
                instance.priorityOrder = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priorityOrder"])
                instance.replyEmailPatterns = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["replyEmailPatterns"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties()
                instance.replyEmailPatterns = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["replyEmailPatterns"])
                instance.priorityOrder = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priorityOrder"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties()
                instance.priorityOrder = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priorityOrder"])
                instance.replyEmailPatterns = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["replyEmailPatterns"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadProperties()
                instance.numberOfDays = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["numberOfDays"])
                instance.ageOfFile = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["ageOfFile"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplProperties()
                instance.eventTopics = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.topics"])
                instance.eventFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"])
                instance.verbs = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["verbs"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties.self) { (source: AnyObject) -> ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitProperties()
                instance.enable = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable"])
                instance.uGCLimit = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["UGCLimit"])
                instance.ugcLimitDuration = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["ugcLimitDuration"])
                instance.domains = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["domains"])
                instance.toList = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["toList"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo.self) { (source: AnyObject) -> ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties.self) { (source: AnyObject) -> ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties()
                instance.oauthProviderId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.id"])
                instance.oauthCloudConfigRoot = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.cloud.config.root"])
                instance.providerConfigRoot = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["provider.config.root"])
                instance.providerConfigCreateTagsEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["provider.config.create.tags.enabled"])
                instance.providerConfigUserFolder = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["provider.config.user.folder"])
                instance.providerConfigFacebookFetchFields = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["provider.config.facebook.fetch.fields"])
                instance.providerConfigFacebookFields = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["provider.config.facebook.fields"])
                instance.providerConfigRefreshUserdataEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["provider.config.refresh.userdata.enabled"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo.self) { (source: AnyObject) -> ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties.self) { (source: AnyObject) -> ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties()
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["path"])
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo.self) { (source: AnyObject) -> ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties.self) { (source: AnyObject) -> ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties()
                instance.facebook = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["facebook"])
                instance.twitter = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["twitter"])
                instance.providerConfigUserFolder = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["provider.config.user.folder"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo.self) { (source: AnyObject) -> ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties.self) { (source: AnyObject) -> ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties()
                instance.oauthProviderId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.id"])
                instance.oauthCloudConfigRoot = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.cloud.config.root"])
                instance.providerConfigRoot = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["provider.config.root"])
                instance.providerConfigUserFolder = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["provider.config.user.folder"])
                instance.providerConfigTwitterEnableParams = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["provider.config.twitter.enable.params"])
                instance.providerConfigTwitterParams = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["provider.config.twitter.params"])
                instance.providerConfigRefreshUserdataEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["provider.config.refresh.userdata.enabled"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo.self) { (source: AnyObject) -> ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties.self) { (source: AnyObject) -> ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties()
                instance.cqSocialContentFragmentsServicesEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.social.content.fragments.services.enabled"])
                instance.cqSocialContentFragmentsServicesWaitTimeSeconds = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.social.content.fragments.services.waitTimeSeconds"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo.self) { (source: AnyObject) -> ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.self) { (source: AnyObject) -> ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties()
                instance.versionId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["version.id"])
                instance.cacheOn = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cache.on"])
                instance.concurrencyLevel = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["concurrency.level"])
                instance.cacheStartSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.start.size"])
                instance.cacheTtl = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.ttl"])
                instance.cacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.size"])
                instance.timeLimit = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["time.limit"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo.self) { (source: AnyObject) -> ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties.self) { (source: AnyObject) -> ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties()
                instance.solrZkTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["solr.zk.timeout"])
                instance.solrCommit = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["solr.commit"])
                instance.cacheOn = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cache.on"])
                instance.concurrencyLevel = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["concurrency.level"])
                instance.cacheStartSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.start.size"])
                instance.cacheTtl = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.ttl"])
                instance.cacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.size"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo.self) { (source: AnyObject) -> ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties.self) { (source: AnyObject) -> ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties()
                instance.solrZkTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["solr.zk.timeout"])
                instance.solrCommit = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["solr.commit"])
                instance.cacheOn = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cache.on"])
                instance.concurrencyLevel = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["concurrency.level"])
                instance.cacheStartSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.start.size"])
                instance.cacheTtl = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.ttl"])
                instance.cacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.size"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo.self) { (source: AnyObject) -> ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties.self) { (source: AnyObject) -> ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties()
                instance.isMemberCheck = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["isMemberCheck"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo.self) { (source: AnyObject) -> ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties.self) { (source: AnyObject) -> ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties()
                instance.isMemberCheck = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["isMemberCheck"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo.self) { (source: AnyObject) -> ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties.self) { (source: AnyObject) -> ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties()
                instance.fieldWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo.self) { (source: AnyObject) -> ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties.self) { (source: AnyObject) -> ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties()
                instance.fieldWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo.self) { (source: AnyObject) -> ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties.self) { (source: AnyObject) -> ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo.self) { (source: AnyObject) -> ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties.self) { (source: AnyObject) -> ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties()
                instance.slingServletSelectors = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.selectors"])
                instance.slingServletExtensions = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.extensions"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo.self) { (source: AnyObject) -> ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties.self) { (source: AnyObject) -> ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties()
                instance.fieldWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"])
                instance.attachmentTypeBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["attachmentTypeBlacklist"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo.self) { (source: AnyObject) -> ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties.self) { (source: AnyObject) -> ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties()
                instance.fieldWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"])
                instance.attachmentTypeBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["attachmentTypeBlacklist"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo.self) { (source: AnyObject) -> ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties.self) { (source: AnyObject) -> ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties()
                instance.extensionOrder = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["extension.order"])
                instance.flushForumontopic = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["flush.forumontopic"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo.self) { (source: AnyObject) -> ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties.self) { (source: AnyObject) -> ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties()
                instance.groupListingPaginationEnable = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["group.listing.pagination.enable"])
                instance.groupListingLazyloadingEnable = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["group.listing.lazyloading.enable"])
                instance.pageSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["page.size"])
                instance.priority = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priority"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialGroupImplGroupServiceImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialGroupImplGroupServiceImplInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialGroupImplGroupServiceImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialGroupImplGroupServiceImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialGroupImplGroupServiceImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialGroupImplGroupServiceImplInfo.self) { (source: AnyObject) -> ComAdobeCqSocialGroupImplGroupServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialGroupImplGroupServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialGroupImplGroupServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialGroupImplGroupServiceImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialGroupImplGroupServiceImplProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialGroupImplGroupServiceImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialGroupImplGroupServiceImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialGroupImplGroupServiceImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialGroupImplGroupServiceImplProperties.self) { (source: AnyObject) -> ComAdobeCqSocialGroupImplGroupServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialGroupImplGroupServiceImplProperties()
                instance.maxWaitTime = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxWaitTime"])
                instance.minWaitBetweenRetries = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minWaitBetweenRetries"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo.self) { (source: AnyObject) -> ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties.self) { (source: AnyObject) -> ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties()
                instance.parameterGuavaCacheEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["parameter.guava.cache.enabled"])
                instance.parameterGuavaCacheParams = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["parameter.guava.cache.params"])
                instance.parameterGuavaCacheReload = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["parameter.guava.cache.reload"])
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo.self) { (source: AnyObject) -> ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties.self) { (source: AnyObject) -> ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties()
                instance.fieldWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"])
                instance.attachmentTypeBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["attachmentTypeBlacklist"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo.self) { (source: AnyObject) -> ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties.self) { (source: AnyObject) -> ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties()
                instance.fieldWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"])
                instance.attachmentTypeBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["attachmentTypeBlacklist"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo.self) { (source: AnyObject) -> ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties.self) { (source: AnyObject) -> ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties()
                instance.fieldWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo.self) { (source: AnyObject) -> ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties.self) { (source: AnyObject) -> ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties()
                instance.fieldWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo.self) { (source: AnyObject) -> ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties.self) { (source: AnyObject) -> ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties()
                instance.everyoneLimit = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["everyoneLimit"])
                instance.priority = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priority"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo.self) { (source: AnyObject) -> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties.self) { (source: AnyObject) -> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties()
                instance.messageProperties = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["message.properties"])
                instance.messageBoxSizeLimit = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["messageBoxSizeLimit"])
                instance.messageCountLimit = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["messageCountLimit"])
                instance.notifyFailure = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["notifyFailure"])
                instance.failureMessageFrom = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["failureMessageFrom"])
                instance.failureTemplatePath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["failureTemplatePath"])
                instance.maxRetries = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxRetries"])
                instance.minWaitBetweenRetries = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minWaitBetweenRetries"])
                instance.countUpdatePoolSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["countUpdatePoolSize"])
                instance.inboxPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["inbox.path"])
                instance.sentitemsPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sentitems.path"])
                instance.supportAttachments = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["supportAttachments"])
                instance.supportGroupMessaging = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["supportGroupMessaging"])
                instance.maxTotalRecipients = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxTotalRecipients"])
                instance.batchSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["batchSize"])
                instance.maxTotalAttachmentSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxTotalAttachmentSize"])
                instance.attachmentTypeBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["attachmentTypeBlacklist"])
                instance.allowedAttachmentTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["allowedAttachmentTypes"])
                instance.serviceSelector = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceSelector"])
                instance.fieldWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo.self) { (source: AnyObject) -> ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties.self) { (source: AnyObject) -> ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties()
                instance.resourceTypeFilters = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resourceType.filters"])
                instance.priority = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priority"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo.self) { (source: AnyObject) -> ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties.self) { (source: AnyObject) -> ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties()
                instance.priority = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priority"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo.self) { (source: AnyObject) -> ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties.self) { (source: AnyObject) -> ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties()
                instance.priority = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priority"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo.self) { (source: AnyObject) -> ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties.self) { (source: AnyObject) -> ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties()
                instance.resourceTypeFilters = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resourceType.filters"])
                instance.priority = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priority"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialNotificationsImplMentionsRouterInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialNotificationsImplMentionsRouterInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialNotificationsImplMentionsRouterInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialNotificationsImplMentionsRouterInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialNotificationsImplMentionsRouterInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialNotificationsImplMentionsRouterInfo.self) { (source: AnyObject) -> ComAdobeCqSocialNotificationsImplMentionsRouterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialNotificationsImplMentionsRouterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialNotificationsImplMentionsRouterProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialNotificationsImplMentionsRouterProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialNotificationsImplMentionsRouterProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialNotificationsImplMentionsRouterProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialNotificationsImplMentionsRouterProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialNotificationsImplMentionsRouterProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialNotificationsImplMentionsRouterProperties.self) { (source: AnyObject) -> ComAdobeCqSocialNotificationsImplMentionsRouterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialNotificationsImplMentionsRouterProperties()
                instance.eventTopics = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.topics"])
                instance.eventFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo.self) { (source: AnyObject) -> ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties.self) { (source: AnyObject) -> ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties()
                instance.maxUnreadNotificationCount = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["max.unread.notification.count"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialNotificationsImplNotificationsRouterInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialNotificationsImplNotificationsRouterInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialNotificationsImplNotificationsRouterInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialNotificationsImplNotificationsRouterInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialNotificationsImplNotificationsRouterInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialNotificationsImplNotificationsRouterInfo.self) { (source: AnyObject) -> ComAdobeCqSocialNotificationsImplNotificationsRouterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialNotificationsImplNotificationsRouterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialNotificationsImplNotificationsRouterProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialNotificationsImplNotificationsRouterProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialNotificationsImplNotificationsRouterProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialNotificationsImplNotificationsRouterProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialNotificationsImplNotificationsRouterProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialNotificationsImplNotificationsRouterProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialNotificationsImplNotificationsRouterProperties.self) { (source: AnyObject) -> ComAdobeCqSocialNotificationsImplNotificationsRouterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialNotificationsImplNotificationsRouterProperties()
                instance.eventTopics = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.topics"])
                instance.eventFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo.self) { (source: AnyObject) -> ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties.self) { (source: AnyObject) -> ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties()
                instance.fieldWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"])
                instance.attachmentTypeBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["attachmentTypeBlacklist"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo.self) { (source: AnyObject) -> ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties.self) { (source: AnyObject) -> ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties()
                instance.cqSocialReportingAnalyticsPollingImporterInterval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.social.reporting.analytics.polling.importer.interval"])
                instance.cqSocialReportingAnalyticsPollingImporterPageSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.social.reporting.analytics.polling.importer.pageSize"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo.self) { (source: AnyObject) -> ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties.self) { (source: AnyObject) -> ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties()
                instance.reportFetchDelay = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["report.fetch.delay"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo.self) { (source: AnyObject) -> ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties.self) { (source: AnyObject) -> ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties()
                instance.cqSocialConsoleAnalyticsSitesMapping = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.social.console.analytics.sites.mapping"])
                instance.priority = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priority"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo.self) { (source: AnyObject) -> ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties.self) { (source: AnyObject) -> ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties()
                instance.fieldWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"])
                instance.attachmentTypeBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["attachmentTypeBlacklist"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo.self) { (source: AnyObject) -> ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties.self) { (source: AnyObject) -> ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties()
                instance.slingServletSelectors = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.selectors"])
                instance.slingServletExtensions = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.extensions"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo.self) { (source: AnyObject) -> ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties.self) { (source: AnyObject) -> ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties()
                instance.slingServletSelectors = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.servlet.selectors"])
                instance.slingServletExtensions = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.extensions"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialScoringImplScoringEventListenerInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialScoringImplScoringEventListenerInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialScoringImplScoringEventListenerInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialScoringImplScoringEventListenerInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialScoringImplScoringEventListenerInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialScoringImplScoringEventListenerInfo.self) { (source: AnyObject) -> ComAdobeCqSocialScoringImplScoringEventListenerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialScoringImplScoringEventListenerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialScoringImplScoringEventListenerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialScoringImplScoringEventListenerProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialScoringImplScoringEventListenerProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialScoringImplScoringEventListenerProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialScoringImplScoringEventListenerProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialScoringImplScoringEventListenerProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialScoringImplScoringEventListenerProperties.self) { (source: AnyObject) -> ComAdobeCqSocialScoringImplScoringEventListenerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialScoringImplScoringEventListenerProperties()
                instance.eventTopics = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.topics"])
                instance.eventFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo.self) { (source: AnyObject) -> ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties.self) { (source: AnyObject) -> ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties()
                instance.enableFallback = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableFallback"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo.self) { (source: AnyObject) -> ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties.self) { (source: AnyObject) -> ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties()
                instance.fieldWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fieldWhitelist"])
                instance.sitePathFilters = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sitePathFilters"])
                instance.sitePackageGroup = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sitePackageGroup"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo.self) { (source: AnyObject) -> ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties.self) { (source: AnyObject) -> ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties()
                instance.cqSocialConsoleAnalyticsComponents = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.social.console.analytics.components"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo.self) { (source: AnyObject) -> ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties.self) { (source: AnyObject) -> ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties()
                instance.componentsUsingTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["componentsUsingTags"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialSrpImplSocialSolrConnectorInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialSrpImplSocialSolrConnectorInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialSrpImplSocialSolrConnectorInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialSrpImplSocialSolrConnectorInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialSrpImplSocialSolrConnectorInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialSrpImplSocialSolrConnectorInfo.self) { (source: AnyObject) -> ComAdobeCqSocialSrpImplSocialSolrConnectorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialSrpImplSocialSolrConnectorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialSrpImplSocialSolrConnectorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialSrpImplSocialSolrConnectorProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialSrpImplSocialSolrConnectorProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialSrpImplSocialSolrConnectorProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialSrpImplSocialSolrConnectorProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialSrpImplSocialSolrConnectorProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialSrpImplSocialSolrConnectorProperties.self) { (source: AnyObject) -> ComAdobeCqSocialSrpImplSocialSolrConnectorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialSrpImplSocialSolrConnectorProperties()
                instance.srpType = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["srp.type"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialSyncImplDiffChangesObserverInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialSyncImplDiffChangesObserverInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialSyncImplDiffChangesObserverInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialSyncImplDiffChangesObserverInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialSyncImplDiffChangesObserverInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialSyncImplDiffChangesObserverInfo.self) { (source: AnyObject) -> ComAdobeCqSocialSyncImplDiffChangesObserverInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialSyncImplDiffChangesObserverInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialSyncImplDiffChangesObserverProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialSyncImplDiffChangesObserverProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialSyncImplDiffChangesObserverProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialSyncImplDiffChangesObserverProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialSyncImplDiffChangesObserverProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialSyncImplDiffChangesObserverProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialSyncImplDiffChangesObserverProperties.self) { (source: AnyObject) -> ComAdobeCqSocialSyncImplDiffChangesObserverProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialSyncImplDiffChangesObserverProperties()
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                instance.agentName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["agentName"])
                instance.diffPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["diffPath"])
                instance.propertyNames = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["propertyNames"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo.self) { (source: AnyObject) -> ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties.self) { (source: AnyObject) -> ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties()
                instance.nodetypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["nodetypes"])
                instance.ignorableprops = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["ignorableprops"])
                instance.ignorablenodes = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["ignorablenodes"])
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                instance.distfolders = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["distfolders"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo.self) { (source: AnyObject) -> ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties.self) { (source: AnyObject) -> ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties()
                instance.activeRunModes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["activeRunModes"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialSyncImplUserSyncListenerImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialSyncImplUserSyncListenerImplInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialSyncImplUserSyncListenerImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialSyncImplUserSyncListenerImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialSyncImplUserSyncListenerImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialSyncImplUserSyncListenerImplInfo.self) { (source: AnyObject) -> ComAdobeCqSocialSyncImplUserSyncListenerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialSyncImplUserSyncListenerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialSyncImplUserSyncListenerImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialSyncImplUserSyncListenerImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialSyncImplUserSyncListenerImplProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialSyncImplUserSyncListenerImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialSyncImplUserSyncListenerImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialSyncImplUserSyncListenerImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialSyncImplUserSyncListenerImplProperties.self) { (source: AnyObject) -> ComAdobeCqSocialSyncImplUserSyncListenerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialSyncImplUserSyncListenerImplProperties()
                instance.nodetypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["nodetypes"])
                instance.ignorableprops = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["ignorableprops"])
                instance.ignorablenodes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["ignorablenodes"])
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                instance.distfolders = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["distfolders"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo.self) { (source: AnyObject) -> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties.self) { (source: AnyObject) -> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties()
                instance.translateLanguage = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["translate.language"])
                instance.translateDisplay = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["translate.display"])
                instance.translateAttribution = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["translate.attribution"])
                instance.translateCaching = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["translate.caching"])
                instance.translateSmartRendering = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["translate.smart.rendering"])
                instance.translateCachingDuration = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["translate.caching.duration"])
                instance.translateSessionSaveInterval = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["translate.session.save.interval"])
                instance.translateSessionSaveBatchLimit = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["translate.session.save.batchLimit"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo.self) { (source: AnyObject) -> ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties.self) { (source: AnyObject) -> ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties()
                instance.eventTopics = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.topics"])
                instance.eventFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"])
                instance.translateListenerType = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["translate.listener.type"])
                instance.translatePropertyList = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["translate.property.list"])
                instance.poolSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["poolSize"])
                instance.maxPoolSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxPoolSize"])
                instance.queueSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queueSize"])
                instance.keepAliveTime = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["keepAliveTime"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo.self) { (source: AnyObject) -> ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties.self) { (source: AnyObject) -> ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties()
                instance.threadPoolSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["threadPoolSize"])
                instance.delayTime = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["delayTime"])
                instance.workerSleepTime = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["workerSleepTime"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo.self) { (source: AnyObject) -> ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties.self) { (source: AnyObject) -> ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties()
                instance.poolSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["poolSize"])
                instance.maxPoolSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxPoolSize"])
                instance.queueSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queueSize"])
                instance.keepAliveTime = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["keepAliveTime"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo.self) { (source: AnyObject) -> ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties.self) { (source: AnyObject) -> ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties()
                instance.isPrimaryPublisher = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["isPrimaryPublisher"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo.self) { (source: AnyObject) -> ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties.self) { (source: AnyObject) -> ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties()
                instance.legacyCloudUGCPathMapping = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["legacyCloudUGCPathMapping"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo.self) { (source: AnyObject) -> ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties.self) { (source: AnyObject) -> ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties()
                instance.automoderationSequence = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["automoderation.sequence"])
                instance.automoderationOnfailurestop = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["automoderation.onfailurestop"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo.self) { (source: AnyObject) -> ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.self) { (source: AnyObject) -> ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties()
                instance.watchwordsPositive = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["watchwords.positive"])
                instance.watchwordsNegative = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["watchwords.negative"])
                instance.watchwordsPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["watchwords.path"])
                instance.sentimentPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sentiment.path"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo.self) { (source: AnyObject) -> ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties.self) { (source: AnyObject) -> ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties()
                instance.defaultAttachmentTypeBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["default.attachment.type.blacklist"])
                instance.baselineAttachmentTypeBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["baseline.attachment.type.blacklist"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo.self) { (source: AnyObject) -> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties.self) { (source: AnyObject) -> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties()
                instance.parameterWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["parameter.whitelist"])
                instance.parameterWhitelistPrefixes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["parameter.whitelist.prefixes"])
                instance.binaryParameterWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["binary.parameter.whitelist"])
                instance.modifierWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["modifier.whitelist"])
                instance.operationWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["operation.whitelist"])
                instance.operationWhitelistPrefixes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["operation.whitelist.prefixes"])
                instance.typehintWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["typehint.whitelist"])
                instance.resourcetypeWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resourcetype.whitelist"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo.self) { (source: AnyObject) -> ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties.self) { (source: AnyObject) -> ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties()
                instance.slingServletExtensions = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.extensions"])
                instance.slingServletPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.paths"])
                instance.slingServletMethods = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.methods"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialUserImplTransportHttpToPublisherInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialUserImplTransportHttpToPublisherInfo].self) { (source: AnyObject) -> [ComAdobeCqSocialUserImplTransportHttpToPublisherInfo] in
                return Decoders.decode(clazz: [ComAdobeCqSocialUserImplTransportHttpToPublisherInfo].self, source: source)
            }
            // Decoder for ComAdobeCqSocialUserImplTransportHttpToPublisherInfo
            Decoders.addDecoder(clazz: ComAdobeCqSocialUserImplTransportHttpToPublisherInfo.self) { (source: AnyObject) -> ComAdobeCqSocialUserImplTransportHttpToPublisherInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialUserImplTransportHttpToPublisherInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqSocialUserImplTransportHttpToPublisherProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqSocialUserImplTransportHttpToPublisherProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqSocialUserImplTransportHttpToPublisherProperties].self) { (source: AnyObject) -> [ComAdobeCqSocialUserImplTransportHttpToPublisherProperties] in
                return Decoders.decode(clazz: [ComAdobeCqSocialUserImplTransportHttpToPublisherProperties].self, source: source)
            }
            // Decoder for ComAdobeCqSocialUserImplTransportHttpToPublisherProperties
            Decoders.addDecoder(clazz: ComAdobeCqSocialUserImplTransportHttpToPublisherProperties.self) { (source: AnyObject) -> ComAdobeCqSocialUserImplTransportHttpToPublisherProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqSocialUserImplTransportHttpToPublisherProperties()
                instance.enable = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable"])
                instance.agentConfiguration = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["agent.configuration"])
                instance.contextPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["context.path"])
                instance.disabledCipherSuites = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["disabled.cipher.suites"])
                instance.enabledCipherSuites = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["enabled.cipher.suites"])
                return instance
            }


            // Decoder for [ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo].self) { (source: AnyObject) -> [ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo] in
                return Decoders.decode(clazz: [ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo].self, source: source)
            }
            // Decoder for ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo
            Decoders.addDecoder(clazz: ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo.self) { (source: AnyObject) -> ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties].self) { (source: AnyObject) -> [ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties] in
                return Decoders.decode(clazz: [ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties].self, source: source)
            }
            // Decoder for ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties
            Decoders.addDecoder(clazz: ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties.self) { (source: AnyObject) -> ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactProperties()
                instance.resourceTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resource.types"])
                return instance
            }


            // Decoder for [ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo].self) { (source: AnyObject) -> [ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo] in
                return Decoders.decode(clazz: [ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo].self, source: source)
            }
            // Decoder for ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo
            Decoders.addDecoder(clazz: ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo.self) { (source: AnyObject) -> ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties].self) { (source: AnyObject) -> [ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties] in
                return Decoders.decode(clazz: [ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties].self, source: source)
            }
            // Decoder for ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties
            Decoders.addDecoder(clazz: ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties.self) { (source: AnyObject) -> ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties()
                instance.deletePathRegexps = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["delete.path.regexps"])
                instance.deleteSql2Query = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["delete.sql2.query"])
                return instance
            }


            // Decoder for [ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo].self) { (source: AnyObject) -> [ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo] in
                return Decoders.decode(clazz: [ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo].self, source: source)
            }
            // Decoder for ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo
            Decoders.addDecoder(clazz: ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo.self) { (source: AnyObject) -> ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties].self) { (source: AnyObject) -> [ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties] in
                return Decoders.decode(clazz: [ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties].self, source: source)
            }
            // Decoder for ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties
            Decoders.addDecoder(clazz: ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties.self) { (source: AnyObject) -> ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties()
                instance.deleteNameRegexps = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["delete.name.regexps"])
                return instance
            }


            // Decoder for [ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo].self) { (source: AnyObject) -> [ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo] in
                return Decoders.decode(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo].self, source: source)
            }
            // Decoder for ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo
            Decoders.addDecoder(clazz: ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo.self) { (source: AnyObject) -> ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties].self) { (source: AnyObject) -> [ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties] in
                return Decoders.decode(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties].self, source: source)
            }
            // Decoder for ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties
            Decoders.addDecoder(clazz: ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties.self) { (source: AnyObject) -> ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties()
                instance.threshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["threshold"])
                instance.jobTopicName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jobTopicName"])
                instance.emailEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["emailEnabled"])
                return instance
            }


            // Decoder for [ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo].self) { (source: AnyObject) -> [ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo] in
                return Decoders.decode(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo].self, source: source)
            }
            // Decoder for ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo
            Decoders.addDecoder(clazz: ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo.self) { (source: AnyObject) -> ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties].self) { (source: AnyObject) -> [ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties] in
                return Decoders.decode(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties].self, source: source)
            }
            // Decoder for ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties
            Decoders.addDecoder(clazz: ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties.self) { (source: AnyObject) -> ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties()
                instance.schedulerExpression = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"])
                instance.jobPurgeThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["job.purge.threshold"])
                instance.jobPurgeMaxJobs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["job.purge.max.jobs"])
                return instance
            }


            // Decoder for [ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo].self) { (source: AnyObject) -> [ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo] in
                return Decoders.decode(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo].self, source: source)
            }
            // Decoder for ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo
            Decoders.addDecoder(clazz: ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo.self) { (source: AnyObject) -> ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties].self) { (source: AnyObject) -> [ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties] in
                return Decoders.decode(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties].self, source: source)
            }
            // Decoder for ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties
            Decoders.addDecoder(clazz: ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties.self) { (source: AnyObject) -> ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties()
                instance.threshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["threshold"])
                instance.jobTopicName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jobTopicName"])
                instance.emailEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["emailEnabled"])
                return instance
            }


            // Decoder for [ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo].self) { (source: AnyObject) -> [ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo] in
                return Decoders.decode(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo].self, source: source)
            }
            // Decoder for ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo
            Decoders.addDecoder(clazz: ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo.self) { (source: AnyObject) -> ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties].self) { (source: AnyObject) -> [ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties] in
                return Decoders.decode(clazz: [ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties].self, source: source)
            }
            // Decoder for ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties
            Decoders.addDecoder(clazz: ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties.self) { (source: AnyObject) -> ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties()
                instance.threshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["threshold"])
                instance.jobTopicName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jobTopicName"])
                instance.emailEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["emailEnabled"])
                return instance
            }


            // Decoder for [ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo].self) { (source: AnyObject) -> [ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo] in
                return Decoders.decode(clazz: [ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo].self, source: source)
            }
            // Decoder for ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo
            Decoders.addDecoder(clazz: ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo.self) { (source: AnyObject) -> ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties].self) { (source: AnyObject) -> [ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties] in
                return Decoders.decode(clazz: [ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties].self, source: source)
            }
            // Decoder for ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties
            Decoders.addDecoder(clazz: ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties.self) { (source: AnyObject) -> ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties()
                instance.eventFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"])
                instance.launchesEventhandlerThreadpoolMaxsize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["launches.eventhandler.threadpool.maxsize"])
                instance.launchesEventhandlerThreadpoolPriority = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["launches.eventhandler.threadpool.priority"])
                instance.launchesEventhandlerUpdatelastmodification = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["launches.eventhandler.updatelastmodification"])
                return instance
            }


            // Decoder for [ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo].self) { (source: AnyObject) -> [ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo] in
                return Decoders.decode(clazz: [ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo].self, source: source)
            }
            // Decoder for ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo
            Decoders.addDecoder(clazz: ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo.self) { (source: AnyObject) -> ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorProperties].self) { (source: AnyObject) -> [ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorProperties] in
                return Decoders.decode(clazz: [ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorProperties].self, source: source)
            }
            // Decoder for ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorProperties
            Decoders.addDecoder(clazz: ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorProperties.self) { (source: AnyObject) -> ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorProperties()
                instance.cqWcmQrcodeServletWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.qrcode.servlet.whitelist"])
                return instance
            }


            // Decoder for [ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo].self) { (source: AnyObject) -> [ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo.self) { (source: AnyObject) -> ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties].self) { (source: AnyObject) -> [ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties.self) { (source: AnyObject) -> ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties()
                instance.size = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["size"])
                return instance
            }


            // Decoder for [ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo].self) { (source: AnyObject) -> [ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo] in
                return Decoders.decode(clazz: [ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo].self, source: source)
            }
            // Decoder for ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo
            Decoders.addDecoder(clazz: ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo.self) { (source: AnyObject) -> ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties].self) { (source: AnyObject) -> [ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties] in
                return Decoders.decode(clazz: [ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties].self, source: source)
            }
            // Decoder for ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties
            Decoders.addDecoder(clazz: ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties.self) { (source: AnyObject) -> ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties()
                instance.syncTranslationStateSchedulingFormat = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["syncTranslationState.schedulingFormat"])
                instance.schedulingRepeatTranslationSchedulingFormat = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["schedulingRepeatTranslation.schedulingFormat"])
                instance.syncTranslationStateLockTimeoutInMinutes = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["syncTranslationState.lockTimeoutInMinutes"])
                instance.exportFormat = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["export.format"])
                return instance
            }


            // Decoder for [ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo]
            Decoders.addDecoder(clazz: [ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo].self) { (source: AnyObject) -> [ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo] in
                return Decoders.decode(clazz: [ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo].self, source: source)
            }
            // Decoder for ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo
            Decoders.addDecoder(clazz: ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo.self) { (source: AnyObject) -> ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties]
            Decoders.addDecoder(clazz: [ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties].self) { (source: AnyObject) -> [ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties] in
                return Decoders.decode(clazz: [ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties].self, source: source)
            }
            // Decoder for ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties
            Decoders.addDecoder(clazz: ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties.self) { (source: AnyObject) -> ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties()
                instance.portalOutboxes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["portal.outboxes"])
                instance.draftDataService = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["draft.data.service"])
                instance.draftMetadataService = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["draft.metadata.service"])
                instance.submitDataService = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["submit.data.service"])
                instance.submitMetadataService = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["submit.metadata.service"])
                instance.pendingSignDataService = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pendingSign.data.service"])
                instance.pendingSignMetadataService = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pendingSign.metadata.service"])
                return instance
            }


            // Decoder for [ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo]
            Decoders.addDecoder(clazz: [ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo].self) { (source: AnyObject) -> [ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo] in
                return Decoders.decode(clazz: [ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo].self, source: source)
            }
            // Decoder for ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo
            Decoders.addDecoder(clazz: ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo.self) { (source: AnyObject) -> ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties]
            Decoders.addDecoder(clazz: [ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties].self) { (source: AnyObject) -> [ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties] in
                return Decoders.decode(clazz: [ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties].self, source: source)
            }
            // Decoder for ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties
            Decoders.addDecoder(clazz: ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties.self) { (source: AnyObject) -> ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties()
                instance.formportalInterval = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["formportal.interval"])
                return instance
            }


            // Decoder for [ComAdobeFormsCommonServiceImplDefaultDataProviderInfo]
            Decoders.addDecoder(clazz: [ComAdobeFormsCommonServiceImplDefaultDataProviderInfo].self) { (source: AnyObject) -> [ComAdobeFormsCommonServiceImplDefaultDataProviderInfo] in
                return Decoders.decode(clazz: [ComAdobeFormsCommonServiceImplDefaultDataProviderInfo].self, source: source)
            }
            // Decoder for ComAdobeFormsCommonServiceImplDefaultDataProviderInfo
            Decoders.addDecoder(clazz: ComAdobeFormsCommonServiceImplDefaultDataProviderInfo.self) { (source: AnyObject) -> ComAdobeFormsCommonServiceImplDefaultDataProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeFormsCommonServiceImplDefaultDataProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeFormsCommonServiceImplDefaultDataProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeFormsCommonServiceImplDefaultDataProviderProperties]
            Decoders.addDecoder(clazz: [ComAdobeFormsCommonServiceImplDefaultDataProviderProperties].self) { (source: AnyObject) -> [ComAdobeFormsCommonServiceImplDefaultDataProviderProperties] in
                return Decoders.decode(clazz: [ComAdobeFormsCommonServiceImplDefaultDataProviderProperties].self, source: source)
            }
            // Decoder for ComAdobeFormsCommonServiceImplDefaultDataProviderProperties
            Decoders.addDecoder(clazz: ComAdobeFormsCommonServiceImplDefaultDataProviderProperties.self) { (source: AnyObject) -> ComAdobeFormsCommonServiceImplDefaultDataProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeFormsCommonServiceImplDefaultDataProviderProperties()
                instance.alloweddataFileLocations = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["alloweddataFileLocations"])
                return instance
            }


            // Decoder for [ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo]
            Decoders.addDecoder(clazz: [ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo].self) { (source: AnyObject) -> [ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo] in
                return Decoders.decode(clazz: [ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo].self, source: source)
            }
            // Decoder for ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo
            Decoders.addDecoder(clazz: ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo.self) { (source: AnyObject) -> ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties]
            Decoders.addDecoder(clazz: [ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties].self) { (source: AnyObject) -> [ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties] in
                return Decoders.decode(clazz: [ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties].self, source: source)
            }
            // Decoder for ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties
            Decoders.addDecoder(clazz: ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties.self) { (source: AnyObject) -> ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties()
                instance.tempStorageConfig = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["tempStorageConfig"])
                return instance
            }


            // Decoder for [ComAdobeFormsCommonServletTempCleanUpTaskInfo]
            Decoders.addDecoder(clazz: [ComAdobeFormsCommonServletTempCleanUpTaskInfo].self) { (source: AnyObject) -> [ComAdobeFormsCommonServletTempCleanUpTaskInfo] in
                return Decoders.decode(clazz: [ComAdobeFormsCommonServletTempCleanUpTaskInfo].self, source: source)
            }
            // Decoder for ComAdobeFormsCommonServletTempCleanUpTaskInfo
            Decoders.addDecoder(clazz: ComAdobeFormsCommonServletTempCleanUpTaskInfo.self) { (source: AnyObject) -> ComAdobeFormsCommonServletTempCleanUpTaskInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeFormsCommonServletTempCleanUpTaskInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeFormsCommonServletTempCleanUpTaskProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeFormsCommonServletTempCleanUpTaskProperties]
            Decoders.addDecoder(clazz: [ComAdobeFormsCommonServletTempCleanUpTaskProperties].self) { (source: AnyObject) -> [ComAdobeFormsCommonServletTempCleanUpTaskProperties] in
                return Decoders.decode(clazz: [ComAdobeFormsCommonServletTempCleanUpTaskProperties].self, source: source)
            }
            // Decoder for ComAdobeFormsCommonServletTempCleanUpTaskProperties
            Decoders.addDecoder(clazz: ComAdobeFormsCommonServletTempCleanUpTaskProperties.self) { (source: AnyObject) -> ComAdobeFormsCommonServletTempCleanUpTaskProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeFormsCommonServletTempCleanUpTaskProperties()
                instance.schedulerExpression = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"])
                instance.durationForTemporaryStorage = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["Duration for Temporary Storage"])
                instance.durationForAnonymousStorage = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["Duration for Anonymous Storage"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAcpPlatformPlatformServletInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAcpPlatformPlatformServletInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAcpPlatformPlatformServletInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAcpPlatformPlatformServletInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAcpPlatformPlatformServletInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAcpPlatformPlatformServletInfo.self) { (source: AnyObject) -> ComAdobeGraniteAcpPlatformPlatformServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAcpPlatformPlatformServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAcpPlatformPlatformServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAcpPlatformPlatformServletProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAcpPlatformPlatformServletProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAcpPlatformPlatformServletProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAcpPlatformPlatformServletProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAcpPlatformPlatformServletProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAcpPlatformPlatformServletProperties.self) { (source: AnyObject) -> ComAdobeGraniteAcpPlatformPlatformServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAcpPlatformPlatformServletProperties()
                instance.queryLimit = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["query.limit"])
                instance.fileTypeExtensionMap = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["file.type.extension.map"])
                return instance
            }


            // Decoder for [ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties()
                instance.aggregateRelationships = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["aggregate.relationships"])
                instance.aggregateDescendVirtual = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["aggregate.descend.virtual"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo.self) { (source: AnyObject) -> ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties.self) { (source: AnyObject) -> ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties()
                instance.disabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["disabled"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo.self) { (source: AnyObject) -> ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties.self) { (source: AnyObject) -> ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties()
                instance.disabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["disabled"])
                return instance
            }


            // Decoder for [ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo].self) { (source: AnyObject) -> [ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo.self) { (source: AnyObject) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties].self) { (source: AnyObject) -> [ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties.self) { (source: AnyObject) -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties()
                instance.comAdobeCqCdnCdnRewriter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cdn.cdn-rewriter"])
                instance.comAdobeCqCloudConfigComponents = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cloud-config.components"])
                instance.comAdobeCqCloudConfigCore = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cloud-config.core"])
                instance.comAdobeCqCloudConfigUi = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cloud-config.ui"])
                instance.comAdobeCqComAdobeCqEditor = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.com.adobe.cq.editor"])
                instance.comAdobeCqComAdobeCqProjectsCore = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.com.adobe.cq.projects.core"])
                instance.comAdobeCqComAdobeCqProjectsWcmCore = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.com.adobe.cq.projects.wcm.core"])
                instance.comAdobeCqComAdobeCqUiCommons = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.com.adobe.cq.ui.commons"])
                instance.comAdobeCqComAdobeCqWcmStyle = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.com.adobe.cq.wcm.style"])
                instance.comAdobeCqCqActivitymapIntegration = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cq-activitymap-integration"])
                instance.comAdobeCqCqContexthubCommons = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cq-contexthub-commons"])
                instance.comAdobeCqCqDtm = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cq-dtm"])
                instance.comAdobeCqCqHealthcheck = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cq-healthcheck"])
                instance.comAdobeCqCqMultisiteTargeting = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cq-multisite-targeting"])
                instance.comAdobeCqCqPreUpgradeCleanup = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cq-pre-upgrade-cleanup"])
                instance.comAdobeCqCqProductInfoProvider = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cq-product-info-provider"])
                instance.comAdobeCqCqRestSites = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cq-rest-sites"])
                instance.comAdobeCqCqSecurityHc = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.cq-security-hc"])
                instance.comAdobeCqDamCqDamSvgHandler = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.dam.cq-dam-svg-handler"])
                instance.comAdobeCqDamCqScene7Imaging = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.dam.cq-scene7-imaging"])
                instance.comAdobeCqDtmReactorCore = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.dtm-reactor.core"])
                instance.comAdobeCqDtmReactorUi = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.dtm-reactor.ui"])
                instance.comAdobeCqExpJspelResolver = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.exp-jspel-resolver"])
                instance.comAdobeCqInboxCqInbox = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.inbox.cq-inbox"])
                instance.comAdobeCqJsonSchemaParser = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.json-schema-parser"])
                instance.comAdobeCqMediaCqMediaPublishingDpsFpCore = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.media.cq-media-publishing-dps-fp-core"])
                instance.comAdobeCqMobileCqMobileCaas = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.mobile.cq-mobile-caas"])
                instance.comAdobeCqMobileCqMobileIndexBuilder = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.mobile.cq-mobile-index-builder"])
                instance.comAdobeCqMobileCqMobilePhonegapBuild = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.mobile.cq-mobile-phonegap-build"])
                instance.comAdobeCqMyspell = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.myspell"])
                instance.comAdobeCqSampleWeRetailCore = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.sample.we.retail.core"])
                instance.comAdobeCqScreensComAdobeCqScreensDcc = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.com.adobe.cq.screens.dcc"])
                instance.comAdobeCqScreensComAdobeCqScreensMqCore = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.screens.com.adobe.cq.screens.mq.core"])
                instance.comAdobeCqSocialCqSocialAsProvider = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-as-provider"])
                instance.comAdobeCqSocialCqSocialBadgingBasicImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-badging-basic-impl"])
                instance.comAdobeCqSocialCqSocialBadgingImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-badging-impl"])
                instance.comAdobeCqSocialCqSocialCalendarImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-calendar-impl"])
                instance.comAdobeCqSocialCqSocialContentFragmentsImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-content-fragments-impl"])
                instance.comAdobeCqSocialCqSocialEnablementImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-enablement-impl"])
                instance.comAdobeCqSocialCqSocialGraphImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-graph-impl"])
                instance.comAdobeCqSocialCqSocialIdeationImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-ideation-impl"])
                instance.comAdobeCqSocialCqSocialJcrProvider = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-jcr-provider"])
                instance.comAdobeCqSocialCqSocialMembersImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-members-impl"])
                instance.comAdobeCqSocialCqSocialMsProvider = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-ms-provider"])
                instance.comAdobeCqSocialCqSocialNotificationsChannelsWeb = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-notifications-channels-web"])
                instance.comAdobeCqSocialCqSocialNotificationsImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-notifications-impl"])
                instance.comAdobeCqSocialCqSocialRdbProvider = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-rdb-provider"])
                instance.comAdobeCqSocialCqSocialScfImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-scf-impl"])
                instance.comAdobeCqSocialCqSocialScoringBasicImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-scoring-basic-impl"])
                instance.comAdobeCqSocialCqSocialScoringImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-scoring-impl"])
                instance.comAdobeCqSocialCqSocialServiceusersImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-serviceusers-impl"])
                instance.comAdobeCqSocialCqSocialSrpImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-srp-impl"])
                instance.comAdobeCqSocialCqSocialUgcbaseImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.cq.social.cq-social-ugcbase-impl"])
                instance.comAdobeDamCqDamCfmImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.dam.cq-dam-cfm-impl"])
                instance.comAdobeFormsFoundationFormsFoundationBase = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.forms.foundation-forms-foundation-base"])
                instance.comAdobeGraniteApicontroller = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.apicontroller"])
                instance.comAdobeGraniteAssetCore = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.asset.core"])
                instance.comAdobeGraniteAuthSso = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.auth.sso"])
                instance.comAdobeGraniteBundlesHcImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.bundles.hc.impl"])
                instance.comAdobeGraniteCompatRouter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.compat-router"])
                instance.comAdobeGraniteConf = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.conf"])
                instance.comAdobeGraniteConfUiCore = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.conf.ui.core"])
                instance.comAdobeGraniteCors = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.cors"])
                instance.comAdobeGraniteCrxExplorer = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.crx-explorer"])
                instance.comAdobeGraniteCrxdeLite = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.crxde-lite"])
                instance.comAdobeGraniteCryptoConfig = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.crypto.config"])
                instance.comAdobeGraniteCryptoExtension = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.crypto.extension"])
                instance.comAdobeGraniteCryptoFile = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.crypto.file"])
                instance.comAdobeGraniteCryptoJcr = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.crypto.jcr"])
                instance.comAdobeGraniteCsrf = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.csrf"])
                instance.comAdobeGraniteDistributionCore = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.distribution.core"])
                instance.comAdobeGraniteDropwizardMetrics = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.dropwizard.metrics"])
                instance.comAdobeGraniteFragsImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.frags.impl"])
                instance.comAdobeGraniteGibson = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.gibson"])
                instance.comAdobeGraniteInfocollector = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.infocollector"])
                instance.comAdobeGraniteInstallerFactoryPackages = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.installer.factory.packages"])
                instance.comAdobeGraniteJettySsl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.jetty.ssl"])
                instance.comAdobeGraniteJobsAsync = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.jobs.async"])
                instance.comAdobeGraniteMaintenanceOak = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.maintenance.oak"])
                instance.comAdobeGraniteMonitoringCore = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.monitoring.core"])
                instance.comAdobeGraniteQueries = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.queries"])
                instance.comAdobeGraniteReplicationHcImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.replication.hc.impl"])
                instance.comAdobeGraniteRepositoryChecker = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.repository.checker"])
                instance.comAdobeGraniteRepositoryHcImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.repository.hc.impl"])
                instance.comAdobeGraniteRestAssets = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.rest.assets"])
                instance.comAdobeGraniteSecurityUi = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.security.ui"])
                instance.comAdobeGraniteStartup = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.startup"])
                instance.comAdobeGraniteTagsoup = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.tagsoup"])
                instance.comAdobeGraniteTaskmanagementCore = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.taskmanagement.core"])
                instance.comAdobeGraniteTaskmanagementWorkflow = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.taskmanagement.workflow"])
                instance.comAdobeGraniteUiClientlibsCompilerLess = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.ui.clientlibs.compiler.less"])
                instance.comAdobeGraniteUiClientlibsProcessorGcc = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.ui.clientlibs.processor.gcc"])
                instance.comAdobeGraniteWebconsolePlugins = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.webconsole.plugins"])
                instance.comAdobeGraniteWorkflowConsole = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.workflow.console"])
                instance.comAdobeXmpWorkerFilesNativeFragmentLinux = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.xmp.worker.files.native.fragment.linux"])
                instance.comAdobeXmpWorkerFilesNativeFragmentMacosx = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.xmp.worker.files.native.fragment.macosx"])
                instance.comAdobeXmpWorkerFilesNativeFragmentWin = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.xmp.worker.files.native.fragment.win"])
                instance.comDayCommonsOsgiWrapperSimpleJndi = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.commons.osgi.wrapper.simple-jndi"])
                instance.comDayCqCqAuthhandler = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.cq-authhandler"])
                instance.comDayCqCqCompatConfigupdate = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.cq-compat-configupdate"])
                instance.comDayCqCqLicensebranding = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.cq-licensebranding"])
                instance.comDayCqCqNotifcationImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.cq-notifcation-impl"])
                instance.comDayCqCqReplicationAudit = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.cq-replication-audit"])
                instance.comDayCqCqSearchExt = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.cq-search-ext"])
                instance.comDayCqDamCqDamAnnotationPrint = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.dam.cq-dam-annotation-print"])
                instance.comDayCqDamCqDamAssetUsage = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.dam.cq-dam-asset-usage"])
                instance.comDayCqDamCqDamS7dam = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.dam.cq-dam-s7dam"])
                instance.comDayCqDamCqDamSimilaritysearch = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.dam.cq-dam-similaritysearch"])
                instance.comDayCqDamDamWebdavSupport = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.dam.dam-webdav-support"])
                instance.comDayCqPreUpgradeTasks = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.pre-upgrade-tasks"])
                instance.comDayCqReplicationExtensions = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.replication.extensions"])
                instance.comDayCqWcmCqMsmCore = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.wcm.cq-msm-core"])
                instance.comDayCqWcmCqWcmTranslation = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.day.cq.wcm.cq-wcm-translation"])
                instance.dayCommonsJrawio = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["day-commons-jrawio"])
                instance.orgApacheAriesJmxWhiteboard = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.aries.jmx.whiteboard"])
                instance.orgApacheFelixHttpSslfilter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.http.sslfilter"])
                instance.orgApacheFelixOrgApacheFelixThreaddump = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.org.apache.felix.threaddump"])
                instance.orgApacheFelixWebconsolePluginsDs = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.webconsole.plugins.ds"])
                instance.orgApacheFelixWebconsolePluginsEvent = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.webconsole.plugins.event"])
                instance.orgApacheFelixWebconsolePluginsMemoryusage = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.webconsole.plugins.memoryusage"])
                instance.orgApacheFelixWebconsolePluginsPackageadmin = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.webconsole.plugins.packageadmin"])
                instance.orgApacheJackrabbitOakAuthLdap = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.jackrabbit.oak-auth-ldap"])
                instance.orgApacheJackrabbitOakSegmentTar = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.jackrabbit.oak-segment-tar"])
                instance.orgApacheJackrabbitOakSolrOsgi = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.jackrabbit.oak-solr-osgi"])
                instance.orgApacheSlingBundleresourceImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.bundleresource.impl"])
                instance.orgApacheSlingCommonsFsclassloader = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.commons.fsclassloader"])
                instance.orgApacheSlingCommonsLogWebconsole = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.commons.log.webconsole"])
                instance.orgApacheSlingDatasource = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.datasource"])
                instance.orgApacheSlingDiscoveryBase = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.discovery.base"])
                instance.orgApacheSlingDiscoveryOak = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.discovery.oak"])
                instance.orgApacheSlingDiscoverySupport = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.discovery.support"])
                instance.orgApacheSlingDistributionApi = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.distribution.api"])
                instance.orgApacheSlingDistributionCore = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.distribution.core"])
                instance.orgApacheSlingExtensionsWebconsolesecurityprovider = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.extensions.webconsolesecurityprovider"])
                instance.orgApacheSlingHcWebconsole = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.hc.webconsole"])
                instance.orgApacheSlingInstallerConsole = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.installer.console"])
                instance.orgApacheSlingInstallerProviderFile = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.installer.provider.file"])
                instance.orgApacheSlingInstallerProviderJcr = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.installer.provider.jcr"])
                instance.orgApacheSlingJcrDavex = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.jcr.davex"])
                instance.orgApacheSlingJcrResourcesecurity = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.jcr.resourcesecurity"])
                instance.orgApacheSlingJmxProvider = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.jmx.provider"])
                instance.orgApacheSlingLaunchpadInstaller = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.launchpad.installer"])
                instance.orgApacheSlingModelsImpl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.models.impl"])
                instance.orgApacheSlingRepoinitParser = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.repoinit.parser"])
                instance.orgApacheSlingResourceInventory = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.resource.inventory"])
                instance.orgApacheSlingResourceresolver = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.resourceresolver"])
                instance.orgApacheSlingScriptingJavascript = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.scripting.javascript"])
                instance.orgApacheSlingScriptingJst = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.scripting.jst"])
                instance.orgApacheSlingScriptingSightlyJsProvider = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.scripting.sightly.js.provider"])
                instance.orgApacheSlingScriptingSightlyModelsProvider = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.scripting.sightly.models.provider"])
                instance.orgApacheSlingSecurity = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.security"])
                instance.orgApacheSlingServletsCompat = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.servlets.compat"])
                instance.orgApacheSlingServletsGet = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.servlets.get"])
                instance.orgApacheSlingStartupfilterDisabler = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.startupfilter.disabler"])
                instance.orgApacheSlingTracer = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.tracer"])
                instance.weRetailClientAppCore = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["we.retail.client.app.core"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties()
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"])
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties()
                instance.oauthProviderId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.id"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplProperties()
                instance.authImsClientSecret = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.ims.client.secret"])
                instance.customizerType = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["customizer.type"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorProperties()
                instance.oauthProviderId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.id"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthImsImplIMSProviderImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsImplIMSProviderImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthImsImplIMSProviderImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthImsImplIMSProviderImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthImsImplIMSProviderImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsImplIMSProviderImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthImsImplIMSProviderImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthImsImplIMSProviderImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthImsImplIMSProviderImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthImsImplIMSProviderImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsImplIMSProviderImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthImsImplIMSProviderImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthImsImplIMSProviderImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthImsImplIMSProviderImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsImplIMSProviderImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthImsImplIMSProviderImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthImsImplIMSProviderImplProperties()
                instance.oauthProviderId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.id"])
                instance.oauthProviderImsAuthorizationUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.ims.authorization.url"])
                instance.oauthProviderImsTokenUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.ims.token.url"])
                instance.oauthProviderImsProfileUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.ims.profile.url"])
                instance.oauthProviderImsExtendedDetailsUrls = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["oauth.provider.ims.extended.details.urls"])
                instance.oauthProviderImsValidateTokenUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.ims.validate.token.url"])
                instance.oauthProviderImsSessionProperty = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.ims.session.property"])
                instance.oauthProviderImsServiceTokenClientId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.ims.service.token.client.id"])
                instance.oauthProviderImsServiceTokenClientSecret = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.ims.service.token.client.secret"])
                instance.oauthProviderImsServiceToken = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.ims.service.token"])
                instance.imsOrgRef = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["ims.org.ref"])
                instance.imsGroupMapping = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["ims.group.mapping"])
                instance.oauthProviderImsOnlyLicenseGroup = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.provider.ims.only.license.group"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties()
                instance.oauthConfigmanagerImsConfigid = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.configmanager.ims.configid"])
                instance.imsOwningEntity = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["ims.owningEntity"])
                instance.aemInstanceId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["aem.instanceId"])
                instance.imsServiceCode = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["ims.serviceCode"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthImsInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthImsInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthImsInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthImsInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthImsInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthImsInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthImsProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthImsProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthImsProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthImsProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthImsProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthImsProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthImsProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthImsProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthImsProperties()
                instance.configid = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["configid"])
                instance.scope = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scope"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthAccesstokenProviderInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthAccesstokenProviderInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthAccesstokenProviderInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthAccesstokenProviderInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthAccesstokenProviderInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthAccesstokenProviderInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthAccesstokenProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthAccesstokenProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthAccesstokenProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthAccesstokenProviderProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthAccesstokenProviderProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthAccesstokenProviderProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthAccesstokenProviderProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthAccesstokenProviderProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthAccesstokenProviderProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthAccesstokenProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthAccesstokenProviderProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.authTokenProviderTitle = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.token.provider.title"])
                instance.authTokenProviderDefaultClaims = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["auth.token.provider.default.claims"])
                instance.authTokenProviderEndpoint = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.token.provider.endpoint"])
                instance.authAccessTokenRequest = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.access.token.request"])
                instance.authTokenProviderKeypairAlias = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.token.provider.keypair.alias"])
                instance.authTokenProviderConnTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["auth.token.provider.conn.timeout"])
                instance.authTokenProviderSoTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["auth.token.provider.so.timeout"])
                instance.authTokenProviderClientId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.token.provider.client.id"])
                instance.authTokenProviderScope = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.token.provider.scope"])
                instance.authTokenProviderReuseAccessToken = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["auth.token.provider.reuse.access.token"])
                instance.authTokenProviderRelaxedSsl = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["auth.token.provider.relaxed.ssl"])
                instance.tokenRequestCustomizerType = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["token.request.customizer.type"])
                instance.authTokenValidatorType = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.token.validator.type"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties()
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"])
                instance.oauthClientIdsAllowed = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["oauth.clientIds.allowed"])
                instance.authBearerSyncIms = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["auth.bearer.sync.ims"])
                instance.authTokenRequestParameter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.tokenRequestParameter"])
                instance.oauthBearerConfigid = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.bearer.configid"])
                instance.oauthJwtSupport = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.jwt.support"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties()
                instance.authTokenValidatorType = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.token.validator.type"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties()
                instance.oauthProviderId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.id"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthImplGithubProviderImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplGithubProviderImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthImplGithubProviderImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplGithubProviderImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthImplGithubProviderImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplGithubProviderImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthImplGithubProviderImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthImplGithubProviderImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthImplGithubProviderImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthImplGithubProviderImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplGithubProviderImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthImplGithubProviderImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplGithubProviderImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthImplGithubProviderImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplGithubProviderImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthImplGithubProviderImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthImplGithubProviderImplProperties()
                instance.oauthProviderId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.id"])
                instance.oauthProviderGithubAuthorizationUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.github.authorization.url"])
                instance.oauthProviderGithubTokenUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.github.token.url"])
                instance.oauthProviderGithubProfileUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.github.profile.url"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthImplGraniteProviderInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplGraniteProviderInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthImplGraniteProviderInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplGraniteProviderInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthImplGraniteProviderInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplGraniteProviderInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthImplGraniteProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthImplGraniteProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthImplGraniteProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthImplGraniteProviderProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplGraniteProviderProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthImplGraniteProviderProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplGraniteProviderProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthImplGraniteProviderProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplGraniteProviderProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthImplGraniteProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthImplGraniteProviderProperties()
                instance.oauthProviderId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.id"])
                instance.oauthProviderGraniteAuthorizationUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.granite.authorization.url"])
                instance.oauthProviderGraniteTokenUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.granite.token.url"])
                instance.oauthProviderGraniteProfileUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.granite.profile.url"])
                instance.oauthProviderGraniteExtendedDetailsUrls = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.granite.extended.details.urls"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties()
                instance.oauthCookieLoginTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.cookie.login.timeout"])
                instance.oauthCookieMaxAge = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.cookie.max.age"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties()
                instance.oauthCookieLoginTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.cookie.login.timeout"])
                instance.oauthCookieMaxAge = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.cookie.max.age"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties()
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties()
                instance.oauthProviderId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.provider.id"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthProviderInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthProviderInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthProviderInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthProviderInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthProviderInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthProviderInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthOauthProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthOauthProviderProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthOauthProviderProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthOauthProviderProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthOauthProviderProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthOauthProviderProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthOauthProviderProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthOauthProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthOauthProviderProperties()
                instance.oauthConfigId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.config.id"])
                instance.oauthClientId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.client.id"])
                instance.oauthClientSecret = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.client.secret"])
                instance.oauthScope = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["oauth.scope"])
                instance.oauthConfigProviderId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.config.provider.id"])
                instance.oauthCreateUsers = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.create.users"])
                instance.oauthUseridProperty = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.userid.property"])
                instance.forceStrictUsernameMatching = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["force.strict.username.matching"])
                instance.oauthEncodeUserids = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.encode.userids"])
                instance.oauthHashUserids = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.hash.userids"])
                instance.oauthCallBackUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.callBackUrl"])
                instance.oauthAccessTokenPersist = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.access.token.persist"])
                instance.oauthAccessTokenPersistCookie = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.access.token.persist.cookie"])
                instance.oauthCsrfStateProtection = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.csrf.state.protection"])
                instance.oauthRedirectRequestParams = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.redirect.request.params"])
                instance.oauthConfigSiblingsAllow = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.config.siblings.allow"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties()
                instance.supportedPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["supportedPaths"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties()
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["path"])
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.idpUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["idpUrl"])
                instance.idpCertAlias = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["idpCertAlias"])
                instance.idpHttpRedirect = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["idpHttpRedirect"])
                instance.serviceProviderEntityId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceProviderEntityId"])
                instance.assertionConsumerServiceURL = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["assertionConsumerServiceURL"])
                instance.spPrivateKeyAlias = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["spPrivateKeyAlias"])
                instance.keyStorePassword = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["keyStorePassword"])
                instance.defaultRedirectUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["defaultRedirectUrl"])
                instance.userIDAttribute = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["userIDAttribute"])
                instance.useEncryption = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["useEncryption"])
                instance.createUser = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["createUser"])
                instance.userIntermediatePath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["userIntermediatePath"])
                instance.addGroupMemberships = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["addGroupMemberships"])
                instance.groupMembershipAttribute = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["groupMembershipAttribute"])
                instance.defaultGroups = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["defaultGroups"])
                instance.nameIdFormat = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["nameIdFormat"])
                instance.synchronizeAttributes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["synchronizeAttributes"])
                instance.handleLogout = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["handleLogout"])
                instance.logoutUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["logoutUrl"])
                instance.clockTolerance = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["clockTolerance"])
                instance.digestMethod = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["digestMethod"])
                instance.signatureMethod = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["signatureMethod"])
                instance.identitySyncType = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["identitySyncType"])
                instance.idpIdentifier = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["idpIdentifier"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo].self) { (source: AnyObject) -> [ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo.self) { (source: AnyObject) -> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties].self) { (source: AnyObject) -> [ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties.self) { (source: AnyObject) -> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties()
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"])
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.jaasControlFlag = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jaas.controlFlag"])
                instance.jaasRealmName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jaas.realmName"])
                instance.jaasRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["jaas.ranking"])
                instance.headers = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["headers"])
                instance.cookies = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cookies"])
                instance.parameters = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["parameters"])
                instance.usermap = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["usermap"])
                instance.format = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["format"])
                instance.trustedCredentialsAttribute = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["trustedCredentialsAttribute"])
                return instance
            }


            // Decoder for [ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                instance.minimumCodeCacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minimum.code.cache.size"])
                return instance
            }


            // Decoder for [ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                instance.ignoredBundles = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["ignored.bundles"])
                return instance
            }


            // Decoder for [ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                instance.maxQueuedJobs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["max.queued.jobs"])
                return instance
            }


            // Decoder for [ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo].self) { (source: AnyObject) -> [ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo.self) { (source: AnyObject) -> ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties].self) { (source: AnyObject) -> [ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties.self) { (source: AnyObject) -> ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties()
                instance.replicateCommentResourceTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["replicate.comment.resourceTypes"])
                return instance
            }


            // Decoder for [ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties()
                instance.compatgroups = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["compatgroups"])
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                return instance
            }


            // Decoder for [ComAdobeGraniteCompatrouterImplRoutingConfigInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteCompatrouterImplRoutingConfigInfo].self) { (source: AnyObject) -> [ComAdobeGraniteCompatrouterImplRoutingConfigInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteCompatrouterImplRoutingConfigInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteCompatrouterImplRoutingConfigInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteCompatrouterImplRoutingConfigInfo.self) { (source: AnyObject) -> ComAdobeGraniteCompatrouterImplRoutingConfigInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteCompatrouterImplRoutingConfigInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteCompatrouterImplRoutingConfigProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteCompatrouterImplRoutingConfigProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteCompatrouterImplRoutingConfigProperties].self) { (source: AnyObject) -> [ComAdobeGraniteCompatrouterImplRoutingConfigProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteCompatrouterImplRoutingConfigProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteCompatrouterImplRoutingConfigProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteCompatrouterImplRoutingConfigProperties.self) { (source: AnyObject) -> ComAdobeGraniteCompatrouterImplRoutingConfigProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteCompatrouterImplRoutingConfigProperties()
                instance.id = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["id"])
                instance.compatPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["compatPath"])
                instance.newPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["newPath"])
                return instance
            }


            // Decoder for [ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo].self) { (source: AnyObject) -> [ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo.self) { (source: AnyObject) -> ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties].self) { (source: AnyObject) -> [ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties.self) { (source: AnyObject) -> ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties()
                instance.group = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["group"])
                instance.ids = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["ids"])
                return instance
            }


            // Decoder for [ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo].self) { (source: AnyObject) -> [ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo.self) { (source: AnyObject) -> ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties].self) { (source: AnyObject) -> [ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties.self) { (source: AnyObject) -> ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties()
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                instance.fallbackPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fallbackPaths"])
                return instance
            }


            // Decoder for [ComAdobeGraniteContexthubImplContextHubImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteContexthubImplContextHubImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteContexthubImplContextHubImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteContexthubImplContextHubImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteContexthubImplContextHubImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteContexthubImplContextHubImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteContexthubImplContextHubImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteContexthubImplContextHubImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteContexthubImplContextHubImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteContexthubImplContextHubImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteContexthubImplContextHubImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteContexthubImplContextHubImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteContexthubImplContextHubImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteContexthubImplContextHubImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteContexthubImplContextHubImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteContexthubImplContextHubImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteContexthubImplContextHubImplProperties()
                instance.comAdobeGraniteContexthubSilentMode = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["com.adobe.granite.contexthub.silent_mode"])
                instance.comAdobeGraniteContexthubShowUi = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["com.adobe.granite.contexthub.show_ui"])
                return instance
            }


            // Decoder for [ComAdobeGraniteCorsImplCORSPolicyImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteCorsImplCORSPolicyImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteCorsImplCORSPolicyImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteCorsImplCORSPolicyImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteCorsImplCORSPolicyImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteCorsImplCORSPolicyImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteCorsImplCORSPolicyImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteCorsImplCORSPolicyImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteCorsImplCORSPolicyImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteCorsImplCORSPolicyImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteCorsImplCORSPolicyImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteCorsImplCORSPolicyImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteCorsImplCORSPolicyImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteCorsImplCORSPolicyImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteCorsImplCORSPolicyImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteCorsImplCORSPolicyImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteCorsImplCORSPolicyImplProperties()
                instance.alloworigin = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["alloworigin"])
                instance.alloworiginregexp = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["alloworiginregexp"])
                instance.allowedpaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["allowedpaths"])
                instance.exposedheaders = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["exposedheaders"])
                instance.maxage = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxage"])
                instance.supportedheaders = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["supportedheaders"])
                instance.supportedmethods = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["supportedmethods"])
                instance.supportscredentials = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["supportscredentials"])
                return instance
            }


            // Decoder for [ComAdobeGraniteCsrfImplCSRFFilterInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteCsrfImplCSRFFilterInfo].self) { (source: AnyObject) -> [ComAdobeGraniteCsrfImplCSRFFilterInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteCsrfImplCSRFFilterInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteCsrfImplCSRFFilterInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteCsrfImplCSRFFilterInfo.self) { (source: AnyObject) -> ComAdobeGraniteCsrfImplCSRFFilterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteCsrfImplCSRFFilterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteCsrfImplCSRFFilterProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeGraniteCsrfImplCSRFFilterProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteCsrfImplCSRFFilterProperties].self) { (source: AnyObject) -> [ComAdobeGraniteCsrfImplCSRFFilterProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteCsrfImplCSRFFilterProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteCsrfImplCSRFFilterProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteCsrfImplCSRFFilterProperties.self) { (source: AnyObject) -> ComAdobeGraniteCsrfImplCSRFFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteCsrfImplCSRFFilterProperties()
                instance.filterMethods = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["filter.methods"])
                instance.filterEnableSafeUserAgents = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["filter.enable.safe.user.agents"])
                instance.filterSafeUserAgents = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["filter.safe.user.agents"])
                instance.filterExcludedPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["filter.excluded.paths"])
                return instance
            }


            // Decoder for [ComAdobeGraniteCsrfImplCSRFServletInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteCsrfImplCSRFServletInfo].self) { (source: AnyObject) -> [ComAdobeGraniteCsrfImplCSRFServletInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteCsrfImplCSRFServletInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteCsrfImplCSRFServletInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteCsrfImplCSRFServletInfo.self) { (source: AnyObject) -> ComAdobeGraniteCsrfImplCSRFServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteCsrfImplCSRFServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteCsrfImplCSRFServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteCsrfImplCSRFServletProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteCsrfImplCSRFServletProperties].self) { (source: AnyObject) -> [ComAdobeGraniteCsrfImplCSRFServletProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteCsrfImplCSRFServletProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteCsrfImplCSRFServletProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteCsrfImplCSRFServletProperties.self) { (source: AnyObject) -> ComAdobeGraniteCsrfImplCSRFServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteCsrfImplCSRFServletProperties()
                instance.csrfTokenExpiresIn = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["csrf.token.expires.in"])
                instance.slingAuthRequirements = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.auth.requirements"])
                return instance
            }


            // Decoder for [ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo].self) { (source: AnyObject) -> [ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo.self) { (source: AnyObject) -> ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties].self) { (source: AnyObject) -> [ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties.self) { (source: AnyObject) -> ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.username = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["username"])
                instance.encryptedPassword = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["encryptedPassword"])
                return instance
            }


            // Decoder for [ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo].self) { (source: AnyObject) -> [ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo.self) { (source: AnyObject) -> ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties].self) { (source: AnyObject) -> [ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties.self) { (source: AnyObject) -> ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties()
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                instance.agentName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["agentName"])
                instance.diffPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["diffPath"])
                instance.observedPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["observedPath"])
                instance.serviceName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"])
                instance.propertyNames = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["propertyNames"])
                instance.distributionDelay = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["distributionDelay"])
                instance.serviceUserTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceUser.target"])
                return instance
            }


            // Decoder for [ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo].self) { (source: AnyObject) -> [ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo.self) { (source: AnyObject) -> ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties].self) { (source: AnyObject) -> [ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties.self) { (source: AnyObject) -> ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties()
                instance.diffPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["diffPath"])
                instance.serviceName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"])
                instance.serviceUserTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceUser.target"])
                return instance
            }


            // Decoder for [ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo].self) { (source: AnyObject) -> [ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo.self) { (source: AnyObject) -> ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties].self) { (source: AnyObject) -> [ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties.self) { (source: AnyObject) -> ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties()
                instance.importerName = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["importer.name"])
                return instance
            }


            // Decoder for [ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo].self) { (source: AnyObject) -> [ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo.self) { (source: AnyObject) -> ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties].self) { (source: AnyObject) -> [ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties.self) { (source: AnyObject) -> ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties()
                instance.providerName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["providerName"])
                instance.forwardRequests = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["forward.requests"])
                return instance
            }


            // Decoder for [ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo].self) { (source: AnyObject) -> [ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo.self) { (source: AnyObject) -> ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties].self) { (source: AnyObject) -> [ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties.self) { (source: AnyObject) -> ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties()
                instance.forwardRequests = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["forward.requests"])
                return instance
            }


            // Decoder for [ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo].self) { (source: AnyObject) -> [ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo.self) { (source: AnyObject) -> ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties].self) { (source: AnyObject) -> [ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties.self) { (source: AnyObject) -> ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.serviceName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"])
                instance.userId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["userId"])
                instance.accessTokenProviderTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["accessTokenProvider.target"])
                return instance
            }


            // Decoder for [ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo].self) { (source: AnyObject) -> [ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo.self) { (source: AnyObject) -> ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties].self) { (source: AnyObject) -> [ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties.self) { (source: AnyObject) -> ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties()
                instance.featureName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["feature.name"])
                instance.featureDescription = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["feature.description"])
                instance.httpHeaderName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["http.header.name"])
                instance.httpHeaderValuepattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["http.header.valuepattern"])
                return instance
            }


            // Decoder for [ComAdobeGraniteFragsImplRandomFeatureInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteFragsImplRandomFeatureInfo].self) { (source: AnyObject) -> [ComAdobeGraniteFragsImplRandomFeatureInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteFragsImplRandomFeatureInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteFragsImplRandomFeatureInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteFragsImplRandomFeatureInfo.self) { (source: AnyObject) -> ComAdobeGraniteFragsImplRandomFeatureInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteFragsImplRandomFeatureInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteFragsImplRandomFeatureProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteFragsImplRandomFeatureProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteFragsImplRandomFeatureProperties].self) { (source: AnyObject) -> [ComAdobeGraniteFragsImplRandomFeatureProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteFragsImplRandomFeatureProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteFragsImplRandomFeatureProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteFragsImplRandomFeatureProperties.self) { (source: AnyObject) -> ComAdobeGraniteFragsImplRandomFeatureProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteFragsImplRandomFeatureProperties()
                instance.featureName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["feature.name"])
                instance.featureDescription = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["feature.description"])
                instance.activePercentage = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["active.percentage"])
                instance.cookieName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cookie.name"])
                instance.cookieMaxAge = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cookie.maxAge"])
                return instance
            }


            // Decoder for [ComAdobeGraniteHttpcacheFileFileCacheStoreInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteHttpcacheFileFileCacheStoreInfo].self) { (source: AnyObject) -> [ComAdobeGraniteHttpcacheFileFileCacheStoreInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteHttpcacheFileFileCacheStoreInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteHttpcacheFileFileCacheStoreInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteHttpcacheFileFileCacheStoreInfo.self) { (source: AnyObject) -> ComAdobeGraniteHttpcacheFileFileCacheStoreInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteHttpcacheFileFileCacheStoreInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteHttpcacheFileFileCacheStoreProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteHttpcacheFileFileCacheStoreProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteHttpcacheFileFileCacheStoreProperties].self) { (source: AnyObject) -> [ComAdobeGraniteHttpcacheFileFileCacheStoreProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteHttpcacheFileFileCacheStoreProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteHttpcacheFileFileCacheStoreProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteHttpcacheFileFileCacheStoreProperties.self) { (source: AnyObject) -> ComAdobeGraniteHttpcacheFileFileCacheStoreProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteHttpcacheFileFileCacheStoreProperties()
                instance.comAdobeGraniteHttpcacheFileDocumentRoot = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.httpcache.file.documentRoot"])
                instance.comAdobeGraniteHttpcacheFileIncludeHost = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.httpcache.file.includeHost"])
                return instance
            }


            // Decoder for [ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo].self) { (source: AnyObject) -> [ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo.self) { (source: AnyObject) -> ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties].self) { (source: AnyObject) -> [ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties.self) { (source: AnyObject) -> ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties()
                instance.comAdobeGraniteHttpcacheUrlPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["com.adobe.granite.httpcache.url.paths"])
                return instance
            }


            // Decoder for [ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo].self) { (source: AnyObject) -> [ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo.self) { (source: AnyObject) -> ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties].self) { (source: AnyObject) -> [ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties.self) { (source: AnyObject) -> ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties()
                instance.pseudoPatterns = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["pseudo.patterns"])
                return instance
            }


            // Decoder for [ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo].self) { (source: AnyObject) -> [ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo.self) { (source: AnyObject) -> ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties].self) { (source: AnyObject) -> [ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties.self) { (source: AnyObject) -> ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties()
                instance.securityPreferencesName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["security.preferences.name"])
                return instance
            }


            // Decoder for [ComAdobeGraniteInfocollectorInfoCollectorInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteInfocollectorInfoCollectorInfo].self) { (source: AnyObject) -> [ComAdobeGraniteInfocollectorInfoCollectorInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteInfocollectorInfoCollectorInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteInfocollectorInfoCollectorInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteInfocollectorInfoCollectorInfo.self) { (source: AnyObject) -> ComAdobeGraniteInfocollectorInfoCollectorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteInfocollectorInfoCollectorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteInfocollectorInfoCollectorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteInfocollectorInfoCollectorProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteInfocollectorInfoCollectorProperties].self) { (source: AnyObject) -> [ComAdobeGraniteInfocollectorInfoCollectorProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteInfocollectorInfoCollectorProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteInfocollectorInfoCollectorProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteInfocollectorInfoCollectorProperties.self) { (source: AnyObject) -> ComAdobeGraniteInfocollectorInfoCollectorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteInfocollectorInfoCollectorProperties()
                instance.graniteInfocollectorIncludeThreadDumps = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.infocollector.includeThreadDumps"])
                instance.graniteInfocollectorIncludeHeapDump = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.infocollector.includeHeapDump"])
                return instance
            }


            // Decoder for [ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo].self) { (source: AnyObject) -> [ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo.self) { (source: AnyObject) -> ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties.self, source: sourceDictionary["properties"])
                instance.additionalProperties = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties].self) { (source: AnyObject) -> [ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties.self) { (source: AnyObject) -> ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties()
                instance.comAdobeGraniteJettySslPort = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["com.adobe.granite.jetty.ssl.port"])
                instance.comAdobeGraniteJettySslKeystoreUser = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.jetty.ssl.keystore.user"])
                instance.comAdobeGraniteJettySslKeystorePassword = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["com.adobe.granite.jetty.ssl.keystore.password"])
                instance.comAdobeGraniteJettySslCiphersuitesExcluded = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["com.adobe.granite.jetty.ssl.ciphersuites.excluded"])
                instance.comAdobeGraniteJettySslCiphersuitesIncluded = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["com.adobe.granite.jetty.ssl.ciphersuites.included"])
                instance.comAdobeGraniteJettySslClientCertificate = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["com.adobe.granite.jetty.ssl.client.certificate"])
                return instance
            }


            // Decoder for [ComAdobeGraniteLicenseImplLicenseCheckFilterInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteLicenseImplLicenseCheckFilterInfo].self) { (source: AnyObject) -> [ComAdobeGraniteLicenseImplLicenseCheckFilterInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteLicenseImplLicenseCheckFilterInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteLicenseImplLicenseCheckFilterInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteLicenseImplLicenseCheckFilterInfo.self) { (source: AnyObject) -> ComAdobeGraniteLicenseImplLicenseCheckFilterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteLicenseImplLicenseCheckFilterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteLicenseImplLicenseCheckFilterProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteLicenseImplLicenseCheckFilterProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteLicenseImplLicenseCheckFilterProperties].self) { (source: AnyObject) -> [ComAdobeGraniteLicenseImplLicenseCheckFilterProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteLicenseImplLicenseCheckFilterProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteLicenseImplLicenseCheckFilterProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteLicenseImplLicenseCheckFilterProperties.self) { (source: AnyObject) -> ComAdobeGraniteLicenseImplLicenseCheckFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteLicenseImplLicenseCheckFilterProperties()
                instance.checkInternval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["checkInternval"])
                instance.excludeIds = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["excludeIds"])
                instance.encryptPing = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["encryptPing"])
                return instance
            }


            // Decoder for [ComAdobeGraniteLoggingImplLogAnalyserImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteLoggingImplLogAnalyserImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteLoggingImplLogAnalyserImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteLoggingImplLogAnalyserImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteLoggingImplLogAnalyserImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteLoggingImplLogAnalyserImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteLoggingImplLogAnalyserImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteLoggingImplLogAnalyserImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteLoggingImplLogAnalyserImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteLoggingImplLogAnalyserImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteLoggingImplLogAnalyserImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteLoggingImplLogAnalyserImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteLoggingImplLogAnalyserImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteLoggingImplLogAnalyserImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteLoggingImplLogAnalyserImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteLoggingImplLogAnalyserImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteLoggingImplLogAnalyserImplProperties()
                instance.messagesQueueSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["messages.queue.size"])
                instance.loggerConfig = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["logger.config"])
                instance.messagesSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["messages.size"])
                return instance
            }


            // Decoder for [ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo].self) { (source: AnyObject) -> [ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo.self) { (source: AnyObject) -> ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties].self) { (source: AnyObject) -> [ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties.self) { (source: AnyObject) -> ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties()
                instance.graniteMaintenanceMandatory = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.maintenance.mandatory"])
                instance.jobTopics = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["job.topics"])
                return instance
            }


            // Decoder for [ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo].self) { (source: AnyObject) -> [ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo.self) { (source: AnyObject) -> ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties].self) { (source: AnyObject) -> [ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties.self) { (source: AnyObject) -> ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties()
                instance.jobTopics = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["job.topics"])
                return instance
            }


            // Decoder for [ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo].self) { (source: AnyObject) -> [ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo.self) { (source: AnyObject) -> ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties].self) { (source: AnyObject) -> [ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties.self) { (source: AnyObject) -> ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties()
                instance.fullGcDays = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["full.gc.days"])
                return instance
            }


            // Decoder for [ComAdobeGraniteMonitoringImplScriptConfigImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteMonitoringImplScriptConfigImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteMonitoringImplScriptConfigImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteMonitoringImplScriptConfigImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteMonitoringImplScriptConfigImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteMonitoringImplScriptConfigImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteMonitoringImplScriptConfigImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteMonitoringImplScriptConfigImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteMonitoringImplScriptConfigImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteMonitoringImplScriptConfigImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteMonitoringImplScriptConfigImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteMonitoringImplScriptConfigImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteMonitoringImplScriptConfigImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteMonitoringImplScriptConfigImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteMonitoringImplScriptConfigImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteMonitoringImplScriptConfigImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteMonitoringImplScriptConfigImplProperties()
                instance.scriptFilename = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["script.filename"])
                instance.scriptDisplay = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["script.display"])
                instance.scriptPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["script.path"])
                instance.scriptPlatform = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["script.platform"])
                instance.interval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["interval"])
                instance.jmxdomain = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jmxdomain"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo].self) { (source: AnyObject) -> [ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo.self) { (source: AnyObject) -> ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties].self) { (source: AnyObject) -> [ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties.self) { (source: AnyObject) -> ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties()
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"])
                instance.jaasControlFlag = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jaas.controlFlag"])
                instance.jaasRealmName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jaas.realmName"])
                instance.jaasRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["jaas.ranking"])
                instance.oauthOfflineValidation = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.offline.validation"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo].self) { (source: AnyObject) -> [ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo.self) { (source: AnyObject) -> ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties].self) { (source: AnyObject) -> [ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties.self) { (source: AnyObject) -> ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties()
                instance.schedulerExpression = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo].self) { (source: AnyObject) -> [ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo.self) { (source: AnyObject) -> ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties].self) { (source: AnyObject) -> [ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties.self) { (source: AnyObject) -> ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties()
                instance.oauthClientRevocationActive = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.client.revocation.active"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo].self) { (source: AnyObject) -> [ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo.self) { (source: AnyObject) -> ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties].self) { (source: AnyObject) -> [ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties.self) { (source: AnyObject) -> ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties()
                instance.slingServletPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.paths"])
                instance.oauthRevocationActive = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.revocation.active"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo].self) { (source: AnyObject) -> [ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo.self) { (source: AnyObject) -> ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties].self) { (source: AnyObject) -> [ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties.self) { (source: AnyObject) -> ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties()
                instance.oauthIssuer = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.issuer"])
                instance.oauthAccessTokenExpiresIn = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["oauth.access.token.expires.in"])
                instance.osgiHttpWhiteboardServletPattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["osgi.http.whiteboard.servlet.pattern"])
                instance.osgiHttpWhiteboardContextSelect = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["osgi.http.whiteboard.context.select"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo].self) { (source: AnyObject) -> [ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo.self) { (source: AnyObject) -> ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties].self) { (source: AnyObject) -> [ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties.self) { (source: AnyObject) -> ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties()
                instance.oauthTokenRevocationActive = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["oauth.token.revocation.active"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo].self) { (source: AnyObject) -> [ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo.self) { (source: AnyObject) -> ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties].self) { (source: AnyObject) -> [ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties.self) { (source: AnyObject) -> ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties()
                instance.offloadingTransporter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["offloading.transporter"])
                instance.offloadingCleanupPayload = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["offloading.cleanup.payload"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo].self) { (source: AnyObject) -> [ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo.self) { (source: AnyObject) -> ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties].self) { (source: AnyObject) -> [ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties.self) { (source: AnyObject) -> ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties()
                instance.offloadingJobclonerEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["offloading.jobcloner.enabled"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo].self) { (source: AnyObject) -> [ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo.self) { (source: AnyObject) -> ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties].self) { (source: AnyObject) -> [ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties.self) { (source: AnyObject) -> ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties()
                instance.offloadingOffloaderEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["offloading.offloader.enabled"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo].self) { (source: AnyObject) -> [ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo.self) { (source: AnyObject) -> ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties].self) { (source: AnyObject) -> [ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties.self) { (source: AnyObject) -> ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties()
                instance.offloadingAgentmanagerEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["offloading.agentmanager.enabled"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo].self) { (source: AnyObject) -> [ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo.self) { (source: AnyObject) -> ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties].self) { (source: AnyObject) -> [ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.self) { (source: AnyObject) -> ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties()
                instance.defaultTransportAgentToWorkerPrefix = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["default.transport.agent-to-worker.prefix"])
                instance.defaultTransportAgentToMasterPrefix = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["default.transport.agent-to-master.prefix"])
                instance.defaultTransportInputPackage = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["default.transport.input.package"])
                instance.defaultTransportOutputPackage = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["default.transport.output.package"])
                instance.defaultTransportReplicationSynchronous = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["default.transport.replication.synchronous"])
                instance.defaultTransportContentpackage = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["default.transport.contentpackage"])
                instance.offloadingTransporterDefaultEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["offloading.transporter.default.enabled"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties()
                instance.omnisearchSuggestionRequiretextMin = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["omnisearch.suggestion.requiretext.min"])
                instance.omnisearchSuggestionSpellcheckRequire = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["omnisearch.suggestion.spellcheck.require"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOptoutImplOptOutServiceImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOptoutImplOptOutServiceImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteOptoutImplOptOutServiceImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteOptoutImplOptOutServiceImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteOptoutImplOptOutServiceImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteOptoutImplOptOutServiceImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteOptoutImplOptOutServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOptoutImplOptOutServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteOptoutImplOptOutServiceImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeGraniteOptoutImplOptOutServiceImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteOptoutImplOptOutServiceImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteOptoutImplOptOutServiceImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteOptoutImplOptOutServiceImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteOptoutImplOptOutServiceImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteOptoutImplOptOutServiceImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteOptoutImplOptOutServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteOptoutImplOptOutServiceImplProperties()
                instance.optoutCookies = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["optout.cookies"])
                instance.optoutHeaders = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["optout.headers"])
                instance.optoutWhitelistCookies = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["optout.whitelist.cookies"])
                return instance
            }


            // Decoder for [ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties()
                instance.indexingCriticalThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["indexing.critical.threshold"])
                instance.indexingWarnThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["indexing.warn.threshold"])
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties()
                instance.largeIndexCriticalThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["large.index.critical.threshold"])
                instance.largeIndexWarnThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["large.index.warn.threshold"])
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo].self) { (source: AnyObject) -> [ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo.self) { (source: AnyObject) -> ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties].self) { (source: AnyObject) -> [ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties.self) { (source: AnyObject) -> ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties()
                instance.getPeriod = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["getPeriod"])
                return instance
            }


            // Decoder for [ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties()
                instance.numberOfRetriesAllowed = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["number.of.retries.allowed"])
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo].self) { (source: AnyObject) -> [ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo.self) { (source: AnyObject) -> ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties].self) { (source: AnyObject) -> [ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties.self) { (source: AnyObject) -> ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo].self) { (source: AnyObject) -> [ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo.self) { (source: AnyObject) -> ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties].self) { (source: AnyObject) -> [ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties.self) { (source: AnyObject) -> ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                instance.excludeSearchPath = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["exclude.search.path"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo].self) { (source: AnyObject) -> [ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo.self) { (source: AnyObject) -> ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties].self) { (source: AnyObject) -> [ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties.self) { (source: AnyObject) -> ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                instance.accountLogins = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["account.logins"])
                instance.consoleLogins = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["console.logins"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                instance.diskSpaceWarnThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["disk.space.warn.threshold"])
                instance.diskSpaceErrorThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["disk.space.error.threshold"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo].self) { (source: AnyObject) -> [ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo.self) { (source: AnyObject) -> ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties].self) { (source: AnyObject) -> [ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties.self) { (source: AnyObject) -> ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRepositoryImplCommitStatsConfigInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryImplCommitStatsConfigInfo].self) { (source: AnyObject) -> [ComAdobeGraniteRepositoryImplCommitStatsConfigInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteRepositoryImplCommitStatsConfigInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteRepositoryImplCommitStatsConfigInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryImplCommitStatsConfigInfo.self) { (source: AnyObject) -> ComAdobeGraniteRepositoryImplCommitStatsConfigInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRepositoryImplCommitStatsConfigInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteRepositoryImplCommitStatsConfigProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRepositoryImplCommitStatsConfigProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryImplCommitStatsConfigProperties].self) { (source: AnyObject) -> [ComAdobeGraniteRepositoryImplCommitStatsConfigProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteRepositoryImplCommitStatsConfigProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteRepositoryImplCommitStatsConfigProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryImplCommitStatsConfigProperties.self) { (source: AnyObject) -> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRepositoryImplCommitStatsConfigProperties()
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                instance.intervalSeconds = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["intervalSeconds"])
                instance.commitsPerIntervalThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["commitsPerIntervalThreshold"])
                instance.maxLocationLength = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxLocationLength"])
                instance.maxDetailsShown = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxDetailsShown"])
                instance.minDetailsPercentage = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minDetailsPercentage"])
                instance.threadMatchers = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["threadMatchers"])
                instance.maxGreedyDepth = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxGreedyDepth"])
                instance.greedyStackMatchers = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["greedyStackMatchers"])
                instance.stackFilters = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["stackFilters"])
                instance.stackMatchers = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["stackMatchers"])
                instance.stackCategorizers = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["stackCategorizers"])
                instance.stackShorteners = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["stackShorteners"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRepositoryServiceUserConfigurationInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryServiceUserConfigurationInfo].self) { (source: AnyObject) -> [ComAdobeGraniteRepositoryServiceUserConfigurationInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteRepositoryServiceUserConfigurationInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteRepositoryServiceUserConfigurationInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryServiceUserConfigurationInfo.self) { (source: AnyObject) -> ComAdobeGraniteRepositoryServiceUserConfigurationInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRepositoryServiceUserConfigurationInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteRepositoryServiceUserConfigurationProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRepositoryServiceUserConfigurationProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRepositoryServiceUserConfigurationProperties].self) { (source: AnyObject) -> [ComAdobeGraniteRepositoryServiceUserConfigurationProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteRepositoryServiceUserConfigurationProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteRepositoryServiceUserConfigurationProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteRepositoryServiceUserConfigurationProperties.self) { (source: AnyObject) -> ComAdobeGraniteRepositoryServiceUserConfigurationProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRepositoryServiceUserConfigurationProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.serviceusersSimpleSubjectPopulation = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["serviceusers.simpleSubjectPopulation"])
                instance.serviceusersList = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["serviceusers.list"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo].self) { (source: AnyObject) -> [ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo.self) { (source: AnyObject) -> ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties].self) { (source: AnyObject) -> [ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties.self) { (source: AnyObject) -> ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo].self) { (source: AnyObject) -> [ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo.self) { (source: AnyObject) -> ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties].self) { (source: AnyObject) -> [ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties.self) { (source: AnyObject) -> ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.types = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["types"])
                return instance
            }


            // Decoder for [ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties()
                instance.providerRoot = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["provider.root"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo].self) { (source: AnyObject) -> [ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo.self) { (source: AnyObject) -> ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties].self) { (source: AnyObject) -> [ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties.self) { (source: AnyObject) -> ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties()
                instance.mimeAllowEmpty = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["mime.allowEmpty"])
                instance.mimeAllowed = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["mime.allowed"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties()
                instance.providerRoots = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["provider.roots"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRestImplServletDefaultGETServletInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRestImplServletDefaultGETServletInfo].self) { (source: AnyObject) -> [ComAdobeGraniteRestImplServletDefaultGETServletInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteRestImplServletDefaultGETServletInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteRestImplServletDefaultGETServletInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteRestImplServletDefaultGETServletInfo.self) { (source: AnyObject) -> ComAdobeGraniteRestImplServletDefaultGETServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRestImplServletDefaultGETServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteRestImplServletDefaultGETServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteRestImplServletDefaultGETServletProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteRestImplServletDefaultGETServletProperties].self) { (source: AnyObject) -> [ComAdobeGraniteRestImplServletDefaultGETServletProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteRestImplServletDefaultGETServletProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteRestImplServletDefaultGETServletProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteRestImplServletDefaultGETServletProperties.self) { (source: AnyObject) -> ComAdobeGraniteRestImplServletDefaultGETServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteRestImplServletDefaultGETServletProperties()
                instance.defaultLimit = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["default.limit"])
                instance.useAbsoluteUri = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["use.absolute.uri"])
                return instance
            }


            // Decoder for [ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo].self) { (source: AnyObject) -> [ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo.self) { (source: AnyObject) -> ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSProperties].self) { (source: AnyObject) -> [ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSProperties.self) { (source: AnyObject) -> ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSProperties()
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                return instance
            }


            // Decoder for [ComAdobeGraniteSecurityUserUserPropertiesServiceInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteSecurityUserUserPropertiesServiceInfo].self) { (source: AnyObject) -> [ComAdobeGraniteSecurityUserUserPropertiesServiceInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteSecurityUserUserPropertiesServiceInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteSecurityUserUserPropertiesServiceInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteSecurityUserUserPropertiesServiceInfo.self) { (source: AnyObject) -> ComAdobeGraniteSecurityUserUserPropertiesServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteSecurityUserUserPropertiesServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteSecurityUserUserPropertiesServiceProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeGraniteSecurityUserUserPropertiesServiceProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteSecurityUserUserPropertiesServiceProperties].self) { (source: AnyObject) -> [ComAdobeGraniteSecurityUserUserPropertiesServiceProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteSecurityUserUserPropertiesServiceProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteSecurityUserUserPropertiesServiceProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteSecurityUserUserPropertiesServiceProperties.self) { (source: AnyObject) -> ComAdobeGraniteSecurityUserUserPropertiesServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteSecurityUserUserPropertiesServiceProperties()
                instance.adapterCondition = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["adapter.condition"])
                instance.graniteUserpropertiesNodetypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["granite.userproperties.nodetypes"])
                instance.graniteUserpropertiesResourcetypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["granite.userproperties.resourcetypes"])
                return instance
            }


            // Decoder for [ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties()
                instance.group2memberRelationshipOutgoing = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["group2member.relationship.outgoing"])
                instance.group2memberExcludedOutgoing = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["group2member.excluded.outgoing"])
                instance.group2memberRelationshipIncoming = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["group2member.relationship.incoming"])
                instance.group2memberExcludedIncoming = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["group2member.excluded.incoming"])
                return instance
            }


            // Decoder for [ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties()
                instance.schedulerExpression = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"])
                instance.jmxObjectname = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jmx.objectname"])
                return instance
            }


            // Decoder for [ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo].self) { (source: AnyObject) -> [ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo.self) { (source: AnyObject) -> ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties].self) { (source: AnyObject) -> [ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties.self) { (source: AnyObject) -> ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties()
                instance.adapterCondition = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["adapter.condition"])
                return instance
            }


            // Decoder for [ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo].self) { (source: AnyObject) -> [ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo.self) { (source: AnyObject) -> ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties].self) { (source: AnyObject) -> [ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties.self) { (source: AnyObject) -> ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties()
                instance.archivingEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["archiving.enabled"])
                instance.schedulerExpression = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"])
                instance.archiveSinceDaysCompleted = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["archive.since.days.completed"])
                return instance
            }


            // Decoder for [ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo].self) { (source: AnyObject) -> [ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo.self) { (source: AnyObject) -> ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties].self) { (source: AnyObject) -> [ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties.self) { (source: AnyObject) -> ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties()
                instance.purgeCompleted = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["purgeCompleted"])
                instance.completedAge = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["completedAge"])
                instance.purgeActive = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["purgeActive"])
                instance.activeAge = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["activeAge"])
                instance.saveThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["saveThreshold"])
                return instance
            }


            // Decoder for [ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo].self) { (source: AnyObject) -> [ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo.self) { (source: AnyObject) -> ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties].self) { (source: AnyObject) -> [ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties.self) { (source: AnyObject) -> ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties()
                instance.adapterCondition = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["adapter.condition"])
                instance.taskmanagerAdmingroups = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["taskmanager.admingroups"])
                return instance
            }


            // Decoder for [ComAdobeGraniteThreaddumpThreadDumpCollectorInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteThreaddumpThreadDumpCollectorInfo].self) { (source: AnyObject) -> [ComAdobeGraniteThreaddumpThreadDumpCollectorInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteThreaddumpThreadDumpCollectorInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteThreaddumpThreadDumpCollectorInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteThreaddumpThreadDumpCollectorInfo.self) { (source: AnyObject) -> ComAdobeGraniteThreaddumpThreadDumpCollectorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteThreaddumpThreadDumpCollectorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteThreaddumpThreadDumpCollectorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteThreaddumpThreadDumpCollectorProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteThreaddumpThreadDumpCollectorProperties].self) { (source: AnyObject) -> [ComAdobeGraniteThreaddumpThreadDumpCollectorProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteThreaddumpThreadDumpCollectorProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteThreaddumpThreadDumpCollectorProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteThreaddumpThreadDumpCollectorProperties.self) { (source: AnyObject) -> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteThreaddumpThreadDumpCollectorProperties()
                instance.schedulerPeriod = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["scheduler.period"])
                instance.schedulerRunOn = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["scheduler.runOn"])
                instance.graniteThreaddumpEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.threaddump.enabled"])
                instance.graniteThreaddumpDumpsPerFile = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["granite.threaddump.dumpsPerFile"])
                instance.graniteThreaddumpEnableGzipCompression = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.threaddump.enableGzipCompression"])
                instance.graniteThreaddumpEnableDirectoriesCompression = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.threaddump.enableDirectoriesCompression"])
                instance.graniteThreaddumpEnableJStack = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.threaddump.enableJStack"])
                instance.graniteThreaddumpMaxBackupDays = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["granite.threaddump.maxBackupDays"])
                instance.graniteThreaddumpBackupCleanTrigger = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["granite.threaddump.backupCleanTrigger"])
                return instance
            }


            // Decoder for [ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo].self) { (source: AnyObject) -> [ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo.self) { (source: AnyObject) -> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties].self) { (source: AnyObject) -> [ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties.self) { (source: AnyObject) -> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties()
                instance.translationFactory = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["translationFactory"])
                instance.defaultConnectorLabel = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["defaultConnectorLabel"])
                instance.defaultConnectorAttribution = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["defaultConnectorAttribution"])
                instance.defaultConnectorWorkspaceId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["defaultConnectorWorkspaceId"])
                instance.defaultConnectorSubscriptionKey = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["defaultConnectorSubscriptionKey"])
                instance.languageMapLocation = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["languageMapLocation"])
                instance.categoryMapLocation = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["categoryMapLocation"])
                instance.retryAttempts = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["retryAttempts"])
                instance.timeoutCount = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["timeoutCount"])
                return instance
            }


            // Decoder for [ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties()
                instance.defaultConnectorName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["defaultConnectorName"])
                instance.defaultCategory = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["defaultCategory"])
                return instance
            }


            // Decoder for [ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo].self) { (source: AnyObject) -> [ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo.self) { (source: AnyObject) -> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties].self) { (source: AnyObject) -> [ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties.self) { (source: AnyObject) -> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties()
                instance.htmllibmanagerTiming = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.timing"])
                instance.htmllibmanagerDebugInitJs = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.debug.init.js"])
                instance.htmllibmanagerMinify = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.minify"])
                instance.htmllibmanagerDebug = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.debug"])
                instance.htmllibmanagerGzip = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.gzip"])
                instance.htmllibmanagerMaxDataUriSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["htmllibmanager.maxDataUriSize"])
                instance.htmllibmanagerMaxage = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["htmllibmanager.maxage"])
                instance.htmllibmanagerForceCQUrlInfo = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.forceCQUrlInfo"])
                instance.htmllibmanagerDefaultthemename = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.defaultthemename"])
                instance.htmllibmanagerDefaultuserthemename = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.defaultuserthemename"])
                instance.htmllibmanagerClientmanager = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.clientmanager"])
                instance.htmllibmanagerPathList = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["htmllibmanager.path.list"])
                instance.htmllibmanagerExcludedPathList = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["htmllibmanager.excluded.path.list"])
                instance.htmllibmanagerProcessorJs = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["htmllibmanager.processor.js"])
                instance.htmllibmanagerProcessorCss = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["htmllibmanager.processor.css"])
                instance.htmllibmanagerLongcachePatterns = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["htmllibmanager.longcache.patterns"])
                instance.htmllibmanagerLongcacheFormat = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.longcache.format"])
                instance.htmllibmanagerUseFileSystemOutputCache = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.useFileSystemOutputCache"])
                instance.htmllibmanagerFileSystemOutputCacheLocation = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.fileSystemOutputCacheLocation"])
                instance.htmllibmanagerDisableReplacement = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["htmllibmanager.disable.replacement"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties()
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties()
                instance.graniteWorkflowWorkflowPublishEventServiceEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.workflow.WorkflowPublishEventService.enabled"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties()
                instance.bucketSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["bucketSize"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties()
                instance.defaultTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["default.timeout"])
                instance.maxTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["max.timeout"])
                instance.defaultPeriod = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["default.period"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowCoreJobJobHandlerInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreJobJobHandlerInfo].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowCoreJobJobHandlerInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreJobJobHandlerInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowCoreJobJobHandlerInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreJobJobHandlerInfo.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowCoreJobJobHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowCoreJobJobHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowCoreJobJobHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowCoreJobJobHandlerProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreJobJobHandlerProperties].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowCoreJobJobHandlerProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreJobJobHandlerProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowCoreJobJobHandlerProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreJobJobHandlerProperties.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowCoreJobJobHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowCoreJobJobHandlerProperties()
                instance.jobTopics = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["job.topics"])
                instance.allowSelfProcessTermination = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["allow.self.process.termination"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties()
                instance.jobTopics = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["job.topics"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowCorePayloadMapCacheInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCorePayloadMapCacheInfo].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowCorePayloadMapCacheInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCorePayloadMapCacheInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowCorePayloadMapCacheInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCorePayloadMapCacheInfo.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowCorePayloadMapCacheInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowCorePayloadMapCacheInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowCorePayloadMapCacheProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowCorePayloadMapCacheProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCorePayloadMapCacheProperties].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowCorePayloadMapCacheProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCorePayloadMapCacheProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowCorePayloadMapCacheProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCorePayloadMapCacheProperties.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowCorePayloadMapCacheProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowCorePayloadMapCacheProperties()
                instance.getSystemWorkflowModels = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["getSystemWorkflowModels"])
                instance.getPackageRootPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["getPackageRootPath"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties()
                instance.payloadMoveWhiteList = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["payload.move.white.list"])
                instance.payloadMoveHandleFromWorkflowProcess = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["payload.move.handle.from.workflow.process"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowCoreWorkflowConfigInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreWorkflowConfigInfo].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowCoreWorkflowConfigInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreWorkflowConfigInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowCoreWorkflowConfigInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreWorkflowConfigInfo.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowCoreWorkflowConfigInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowCoreWorkflowConfigInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowCoreWorkflowConfigProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowCoreWorkflowConfigProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreWorkflowConfigProperties].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowCoreWorkflowConfigProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreWorkflowConfigProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowCoreWorkflowConfigProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreWorkflowConfigProperties.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowCoreWorkflowConfigProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowCoreWorkflowConfigProperties()
                instance.cqWorkflowConfigWorkflowPackagesRootPath = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.workflow.config.workflow.packages.root.path"])
                instance.cqWorkflowConfigWorkflowProcessLegacyMode = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.workflow.config.workflow.process.legacy.mode"])
                instance.cqWorkflowConfigAllowLocking = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.workflow.config.allow.locking"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties()
                instance.graniteWorkflowinboxSortPropertyName = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["granite.workflowinbox.sort.propertyName"])
                instance.graniteWorkflowinboxSortOrder = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["granite.workflowinbox.sort.order"])
                instance.cqWorkflowJobRetry = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.workflow.job.retry"])
                instance.cqWorkflowSuperuser = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.workflow.superuser"])
                instance.graniteWorkflowInboxQuerySize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["granite.workflow.inboxQuerySize"])
                instance.graniteWorkflowAdminUserGroupFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.workflow.adminUserGroupFilter"])
                instance.graniteWorkflowEnforceWorkitemAssigneePermissions = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.workflow.enforceWorkitemAssigneePermissions"])
                instance.graniteWorkflowEnforceWorkflowInitiatorPermissions = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.workflow.enforceWorkflowInitiatorPermissions"])
                instance.graniteWorkflowInjectTenantIdInJobTopics = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["granite.workflow.injectTenantIdInJobTopics"])
                instance.graniteWorkflowMaxPurgeSaveThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["granite.workflow.maxPurgeSaveThreshold"])
                instance.graniteWorkflowMaxPurgeQueryCount = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["granite.workflow.maxPurgeQueryCount"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowPurgeSchedulerInfo]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowPurgeSchedulerInfo].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowPurgeSchedulerInfo] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowPurgeSchedulerInfo].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowPurgeSchedulerInfo
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowPurgeSchedulerInfo.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowPurgeSchedulerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowPurgeSchedulerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeGraniteWorkflowPurgeSchedulerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeGraniteWorkflowPurgeSchedulerProperties]
            Decoders.addDecoder(clazz: [ComAdobeGraniteWorkflowPurgeSchedulerProperties].self) { (source: AnyObject) -> [ComAdobeGraniteWorkflowPurgeSchedulerProperties] in
                return Decoders.decode(clazz: [ComAdobeGraniteWorkflowPurgeSchedulerProperties].self, source: source)
            }
            // Decoder for ComAdobeGraniteWorkflowPurgeSchedulerProperties
            Decoders.addDecoder(clazz: ComAdobeGraniteWorkflowPurgeSchedulerProperties.self) { (source: AnyObject) -> ComAdobeGraniteWorkflowPurgeSchedulerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeGraniteWorkflowPurgeSchedulerProperties()
                instance.scheduledpurgeName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduledpurge.name"])
                instance.scheduledpurgeWorkflowStatus = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["scheduledpurge.workflowStatus"])
                instance.scheduledpurgeModelIds = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["scheduledpurge.modelIds"])
                instance.scheduledpurgeDaysold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["scheduledpurge.daysold"])
                return instance
            }


            // Decoder for [ComAdobeOctopusNcommBootstrapInfo]
            Decoders.addDecoder(clazz: [ComAdobeOctopusNcommBootstrapInfo].self) { (source: AnyObject) -> [ComAdobeOctopusNcommBootstrapInfo] in
                return Decoders.decode(clazz: [ComAdobeOctopusNcommBootstrapInfo].self, source: source)
            }
            // Decoder for ComAdobeOctopusNcommBootstrapInfo
            Decoders.addDecoder(clazz: ComAdobeOctopusNcommBootstrapInfo.self) { (source: AnyObject) -> ComAdobeOctopusNcommBootstrapInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeOctopusNcommBootstrapInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeOctopusNcommBootstrapProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeOctopusNcommBootstrapProperties]
            Decoders.addDecoder(clazz: [ComAdobeOctopusNcommBootstrapProperties].self) { (source: AnyObject) -> [ComAdobeOctopusNcommBootstrapProperties] in
                return Decoders.decode(clazz: [ComAdobeOctopusNcommBootstrapProperties].self, source: source)
            }
            // Decoder for ComAdobeOctopusNcommBootstrapProperties
            Decoders.addDecoder(clazz: ComAdobeOctopusNcommBootstrapProperties.self) { (source: AnyObject) -> ComAdobeOctopusNcommBootstrapProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeOctopusNcommBootstrapProperties()
                instance.maxConnections = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxConnections"])
                instance.maxRequests = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxRequests"])
                instance.requestTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["requestTimeout"])
                instance.requestRetries = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["requestRetries"])
                instance.launchTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["launchTimeout"])
                return instance
            }


            // Decoder for [ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo]
            Decoders.addDecoder(clazz: [ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo].self) { (source: AnyObject) -> [ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo] in
                return Decoders.decode(clazz: [ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo].self, source: source)
            }
            // Decoder for ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo
            Decoders.addDecoder(clazz: ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo.self) { (source: AnyObject) -> ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties]
            Decoders.addDecoder(clazz: [ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties].self) { (source: AnyObject) -> [ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties] in
                return Decoders.decode(clazz: [ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties].self, source: source)
            }
            // Decoder for ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties
            Decoders.addDecoder(clazz: ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties.self) { (source: AnyObject) -> ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties()
                instance.communitiesIntegrationLivefyreSlingEventFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["communities.integration.livefyre.sling.event.filter"])
                return instance
            }


            // Decoder for [ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo]
            Decoders.addDecoder(clazz: [ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo].self) { (source: AnyObject) -> [ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo] in
                return Decoders.decode(clazz: [ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo].self, source: source)
            }
            // Decoder for ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo
            Decoders.addDecoder(clazz: ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo.self) { (source: AnyObject) -> ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties]
            Decoders.addDecoder(clazz: [ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties].self) { (source: AnyObject) -> [ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties] in
                return Decoders.decode(clazz: [ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties].self, source: source)
            }
            // Decoder for ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties
            Decoders.addDecoder(clazz: ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties.self) { (source: AnyObject) -> ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComAdobeXmpWorkerFilesNcommXMPFilesNCommProperties()
                instance.maxConnections = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["maxConnections"])
                instance.maxRequests = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["maxRequests"])
                instance.requestTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["requestTimeout"])
                instance.logDir = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["logDir"])
                return instance
            }


            // Decoder for [ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo]
            Decoders.addDecoder(clazz: [ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo].self) { (source: AnyObject) -> [ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo] in
                return Decoders.decode(clazz: [ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo].self, source: source)
            }
            // Decoder for ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo
            Decoders.addDecoder(clazz: ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo.self) { (source: AnyObject) -> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties]
            Decoders.addDecoder(clazz: [ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties].self) { (source: AnyObject) -> [ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties] in
                return Decoders.decode(clazz: [ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties].self, source: source)
            }
            // Decoder for ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties
            Decoders.addDecoder(clazz: ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties.self) { (source: AnyObject) -> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties()
                instance.jdbcDriverClass = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jdbc.driver.class"])
                instance.jdbcConnectionUri = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jdbc.connection.uri"])
                instance.jdbcUsername = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jdbc.username"])
                instance.jdbcPassword = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jdbc.password"])
                instance.jdbcValidationQuery = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jdbc.validation.query"])
                instance.defaultReadonly = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["default.readonly"])
                instance.defaultAutocommit = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["default.autocommit"])
                instance.poolSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["pool.size"])
                instance.poolMaxWaitMsec = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["pool.max.wait.msec"])
                instance.datasourceName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["datasource.name"])
                instance.datasourceSvcProperties = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["datasource.svc.properties"])
                return instance
            }


            // Decoder for [ComDayCommonsHttpclientInfo]
            Decoders.addDecoder(clazz: [ComDayCommonsHttpclientInfo].self) { (source: AnyObject) -> [ComDayCommonsHttpclientInfo] in
                return Decoders.decode(clazz: [ComDayCommonsHttpclientInfo].self, source: source)
            }
            // Decoder for ComDayCommonsHttpclientInfo
            Decoders.addDecoder(clazz: ComDayCommonsHttpclientInfo.self) { (source: AnyObject) -> ComDayCommonsHttpclientInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCommonsHttpclientInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCommonsHttpclientProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCommonsHttpclientProperties]
            Decoders.addDecoder(clazz: [ComDayCommonsHttpclientProperties].self) { (source: AnyObject) -> [ComDayCommonsHttpclientProperties] in
                return Decoders.decode(clazz: [ComDayCommonsHttpclientProperties].self, source: source)
            }
            // Decoder for ComDayCommonsHttpclientProperties
            Decoders.addDecoder(clazz: ComDayCommonsHttpclientProperties.self) { (source: AnyObject) -> ComDayCommonsHttpclientProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCommonsHttpclientProperties()
                instance.proxyEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["proxy.enabled"])
                instance.proxyHost = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["proxy.host"])
                instance.proxyUser = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["proxy.user"])
                instance.proxyPassword = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["proxy.password"])
                instance.proxyNtlmHost = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["proxy.ntlm.host"])
                instance.proxyNtlmDomain = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["proxy.ntlm.domain"])
                instance.proxyExceptions = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["proxy.exceptions"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo].self) { (source: AnyObject) -> [ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo
            Decoders.addDecoder(clazz: ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo.self) { (source: AnyObject) -> ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties].self) { (source: AnyObject) -> [ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties
            Decoders.addDecoder(clazz: ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties.self) { (source: AnyObject) -> ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties()
                instance.cqStoreListenerAdditionalStorePaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.store.listener.additionalStorePaths"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo].self) { (source: AnyObject) -> [ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo
            Decoders.addDecoder(clazz: ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo.self) { (source: AnyObject) -> ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties].self) { (source: AnyObject) -> [ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties
            Decoders.addDecoder(clazz: ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties.self) { (source: AnyObject) -> ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties()
                instance.allowedPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["allowed.paths"])
                instance.cqAnalyticsSaintExporterPagesize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.analytics.saint.exporter.pagesize"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo].self) { (source: AnyObject) -> [ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo
            Decoders.addDecoder(clazz: ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo.self) { (source: AnyObject) -> ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties].self) { (source: AnyObject) -> [ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties
            Decoders.addDecoder(clazz: ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties.self) { (source: AnyObject) -> ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties()
                instance.reportFetchAttempts = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["report.fetch.attempts"])
                instance.reportFetchDelay = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["report.fetch.delay"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo].self) { (source: AnyObject) -> [ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo
            Decoders.addDecoder(clazz: ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo.self) { (source: AnyObject) -> ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties].self) { (source: AnyObject) -> [ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties
            Decoders.addDecoder(clazz: ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties.self) { (source: AnyObject) -> ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties()
                instance.cqAnalyticsAdapterfactoryContextstores = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.analytics.adapterfactory.contextstores"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo].self) { (source: AnyObject) -> [ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo
            Decoders.addDecoder(clazz: ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo.self) { (source: AnyObject) -> ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties.self, source: sourceDictionary["properties"])
                instance.additionalProperties = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties].self) { (source: AnyObject) -> [ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties
            Decoders.addDecoder(clazz: ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties.self) { (source: AnyObject) -> ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties()
                instance.cqAnalyticsSitecatalystServiceDatacenterUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.analytics.sitecatalyst.service.datacenter.url"])
                instance.devhostnamepatterns = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["devhostnamepatterns"])
                instance.connectionTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["connection.timeout"])
                instance.socketTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["socket.timeout"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo].self) { (source: AnyObject) -> [ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo
            Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo.self) { (source: AnyObject) -> ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties].self) { (source: AnyObject) -> [ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties
            Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties.self) { (source: AnyObject) -> ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties()
                instance.cqAnalyticsTestandtargetAccountoptionsupdaterEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.analytics.testandtarget.accountoptionsupdater.enabled"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo].self) { (source: AnyObject) -> [ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo
            Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo.self) { (source: AnyObject) -> ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties].self) { (source: AnyObject) -> [ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties
            Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties.self) { (source: AnyObject) -> ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties()
                instance.cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.analytics.testandtarget.deleteauthoractivitylistener.enabled"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo].self) { (source: AnyObject) -> [ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo
            Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo.self) { (source: AnyObject) -> ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties].self) { (source: AnyObject) -> [ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties
            Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties.self) { (source: AnyObject) -> ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties()
                instance.cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo].self) { (source: AnyObject) -> [ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo
            Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo.self) { (source: AnyObject) -> ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties].self) { (source: AnyObject) -> [ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties
            Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties.self) { (source: AnyObject) -> ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties()
                instance.cqAnalyticsTestandtargetSegmentimporterEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.analytics.testandtarget.segmentimporter.enabled"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo].self) { (source: AnyObject) -> [ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo
            Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo.self) { (source: AnyObject) -> ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties].self) { (source: AnyObject) -> [ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties
            Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties.self) { (source: AnyObject) -> ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties()
                instance.endpointUri = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["endpointUri"])
                instance.connectionTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["connectionTimeout"])
                instance.socketTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["socketTimeout"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo].self) { (source: AnyObject) -> [ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo
            Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo.self) { (source: AnyObject) -> ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties].self) { (source: AnyObject) -> [ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties
            Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties.self) { (source: AnyObject) -> ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties()
                instance.testandtargetEndpointUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["testandtarget.endpoint.url"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo].self) { (source: AnyObject) -> [ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo
            Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo.self) { (source: AnyObject) -> ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties].self) { (source: AnyObject) -> [ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties] in
                return Decoders.decode(clazz: [ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties].self, source: source)
            }
            // Decoder for ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties
            Decoders.addDecoder(clazz: ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties.self) { (source: AnyObject) -> ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties()
                instance.cqAnalyticsTestandtargetApiUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.analytics.testandtarget.api.url"])
                instance.cqAnalyticsTestandtargetTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.analytics.testandtarget.timeout"])
                instance.cqAnalyticsTestandtargetSockettimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.analytics.testandtarget.sockettimeout"])
                instance.cqAnalyticsTestandtargetRecommendationsUrlReplace = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.analytics.testandtarget.recommendations.url.replace"])
                instance.cqAnalyticsTestandtargetRecommendationsUrlReplacewith = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.analytics.testandtarget.recommendations.url.replacewith"])
                return instance
            }


            // Decoder for [ComDayCqAuthImplCugCugSupportImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqAuthImplCugCugSupportImplInfo].self) { (source: AnyObject) -> [ComDayCqAuthImplCugCugSupportImplInfo] in
                return Decoders.decode(clazz: [ComDayCqAuthImplCugCugSupportImplInfo].self, source: source)
            }
            // Decoder for ComDayCqAuthImplCugCugSupportImplInfo
            Decoders.addDecoder(clazz: ComDayCqAuthImplCugCugSupportImplInfo.self) { (source: AnyObject) -> ComDayCqAuthImplCugCugSupportImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAuthImplCugCugSupportImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqAuthImplCugCugSupportImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqAuthImplCugCugSupportImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqAuthImplCugCugSupportImplProperties].self) { (source: AnyObject) -> [ComDayCqAuthImplCugCugSupportImplProperties] in
                return Decoders.decode(clazz: [ComDayCqAuthImplCugCugSupportImplProperties].self, source: source)
            }
            // Decoder for ComDayCqAuthImplCugCugSupportImplProperties
            Decoders.addDecoder(clazz: ComDayCqAuthImplCugCugSupportImplProperties.self) { (source: AnyObject) -> ComDayCqAuthImplCugCugSupportImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAuthImplCugCugSupportImplProperties()
                instance.cugExemptedPrincipals = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cug.exempted.principals"])
                instance.cugEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cug.enabled"])
                instance.cugPrincipalsRegex = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cug.principals.regex"])
                instance.cugPrincipalsReplacement = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cug.principals.replacement"])
                return instance
            }


            // Decoder for [ComDayCqAuthImplLoginSelectorHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqAuthImplLoginSelectorHandlerInfo].self) { (source: AnyObject) -> [ComDayCqAuthImplLoginSelectorHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqAuthImplLoginSelectorHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqAuthImplLoginSelectorHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqAuthImplLoginSelectorHandlerInfo.self) { (source: AnyObject) -> ComDayCqAuthImplLoginSelectorHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAuthImplLoginSelectorHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqAuthImplLoginSelectorHandlerProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqAuthImplLoginSelectorHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqAuthImplLoginSelectorHandlerProperties].self) { (source: AnyObject) -> [ComDayCqAuthImplLoginSelectorHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqAuthImplLoginSelectorHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqAuthImplLoginSelectorHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqAuthImplLoginSelectorHandlerProperties.self) { (source: AnyObject) -> ComDayCqAuthImplLoginSelectorHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqAuthImplLoginSelectorHandlerProperties()
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"])
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.authLoginselectorMappings = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["auth.loginselector.mappings"])
                instance.authLoginselectorChangepwMappings = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["auth.loginselector.changepw.mappings"])
                instance.authLoginselectorDefaultloginpage = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.loginselector.defaultloginpage"])
                instance.authLoginselectorDefaultchangepwpage = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.loginselector.defaultchangepwpage"])
                instance.authLoginselectorHandle = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["auth.loginselector.handle"])
                instance.authLoginselectorHandleAllExtensions = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["auth.loginselector.handle.all.extensions"])
                return instance
            }


            // Decoder for [ComDayCqCommonsImplExternalizerImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqCommonsImplExternalizerImplInfo].self) { (source: AnyObject) -> [ComDayCqCommonsImplExternalizerImplInfo] in
                return Decoders.decode(clazz: [ComDayCqCommonsImplExternalizerImplInfo].self, source: source)
            }
            // Decoder for ComDayCqCommonsImplExternalizerImplInfo
            Decoders.addDecoder(clazz: ComDayCqCommonsImplExternalizerImplInfo.self) { (source: AnyObject) -> ComDayCqCommonsImplExternalizerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqCommonsImplExternalizerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqCommonsImplExternalizerImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqCommonsImplExternalizerImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqCommonsImplExternalizerImplProperties].self) { (source: AnyObject) -> [ComDayCqCommonsImplExternalizerImplProperties] in
                return Decoders.decode(clazz: [ComDayCqCommonsImplExternalizerImplProperties].self, source: source)
            }
            // Decoder for ComDayCqCommonsImplExternalizerImplProperties
            Decoders.addDecoder(clazz: ComDayCqCommonsImplExternalizerImplProperties.self) { (source: AnyObject) -> ComDayCqCommonsImplExternalizerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqCommonsImplExternalizerImplProperties()
                instance.externalizerDomains = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["externalizer.domains"])
                instance.externalizerHost = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["externalizer.host"])
                instance.externalizerContextpath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["externalizer.contextpath"])
                instance.externalizerEncodedpath = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["externalizer.encodedpath"])
                return instance
            }


            // Decoder for [ComDayCqCommonsServletsRootMappingServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqCommonsServletsRootMappingServletInfo].self) { (source: AnyObject) -> [ComDayCqCommonsServletsRootMappingServletInfo] in
                return Decoders.decode(clazz: [ComDayCqCommonsServletsRootMappingServletInfo].self, source: source)
            }
            // Decoder for ComDayCqCommonsServletsRootMappingServletInfo
            Decoders.addDecoder(clazz: ComDayCqCommonsServletsRootMappingServletInfo.self) { (source: AnyObject) -> ComDayCqCommonsServletsRootMappingServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqCommonsServletsRootMappingServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqCommonsServletsRootMappingServletProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqCommonsServletsRootMappingServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqCommonsServletsRootMappingServletProperties].self) { (source: AnyObject) -> [ComDayCqCommonsServletsRootMappingServletProperties] in
                return Decoders.decode(clazz: [ComDayCqCommonsServletsRootMappingServletProperties].self, source: source)
            }
            // Decoder for ComDayCqCommonsServletsRootMappingServletProperties
            Decoders.addDecoder(clazz: ComDayCqCommonsServletsRootMappingServletProperties.self) { (source: AnyObject) -> ComDayCqCommonsServletsRootMappingServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqCommonsServletsRootMappingServletProperties()
                instance.rootmappingTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["rootmapping.target"])
                return instance
            }


            // Decoder for [ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo]
            Decoders.addDecoder(clazz: [ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo].self) { (source: AnyObject) -> [ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo] in
                return Decoders.decode(clazz: [ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo].self, source: source)
            }
            // Decoder for ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo
            Decoders.addDecoder(clazz: ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo.self) { (source: AnyObject) -> ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties]
            Decoders.addDecoder(clazz: [ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties].self) { (source: AnyObject) -> [ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties] in
                return Decoders.decode(clazz: [ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties].self, source: source)
            }
            // Decoder for ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties
            Decoders.addDecoder(clazz: ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties.self) { (source: AnyObject) -> ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties()
                instance.codeupgradetasks = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["codeupgradetasks"])
                instance.codeupgradetaskfilters = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["codeupgradetaskfilters"])
                return instance
            }


            // Decoder for [ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo]
            Decoders.addDecoder(clazz: [ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo].self) { (source: AnyObject) -> [ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo] in
                return Decoders.decode(clazz: [ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo].self, source: source)
            }
            // Decoder for ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo
            Decoders.addDecoder(clazz: ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo.self) { (source: AnyObject) -> ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties]
            Decoders.addDecoder(clazz: [ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties].self) { (source: AnyObject) -> [ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties] in
                return Decoders.decode(clazz: [ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties].self, source: source)
            }
            // Decoder for ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties
            Decoders.addDecoder(clazz: ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties.self) { (source: AnyObject) -> ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties()
                instance.upgradeTaskIgnoreList = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["upgradeTaskIgnoreList"])
                return instance
            }


            // Decoder for [ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo]
            Decoders.addDecoder(clazz: [ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo].self) { (source: AnyObject) -> [ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo] in
                return Decoders.decode(clazz: [ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo].self, source: source)
            }
            // Decoder for ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo
            Decoders.addDecoder(clazz: ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo.self) { (source: AnyObject) -> ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties]
            Decoders.addDecoder(clazz: [ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties].self) { (source: AnyObject) -> [ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties] in
                return Decoders.decode(clazz: [ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties].self, source: source)
            }
            // Decoder for ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties
            Decoders.addDecoder(clazz: ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties.self) { (source: AnyObject) -> ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties()
                instance.effectiveBundleListPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["effectiveBundleListPath"])
                return instance
            }


            // Decoder for [ComDayCqContentsyncImplContentSyncManagerImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqContentsyncImplContentSyncManagerImplInfo].self) { (source: AnyObject) -> [ComDayCqContentsyncImplContentSyncManagerImplInfo] in
                return Decoders.decode(clazz: [ComDayCqContentsyncImplContentSyncManagerImplInfo].self, source: source)
            }
            // Decoder for ComDayCqContentsyncImplContentSyncManagerImplInfo
            Decoders.addDecoder(clazz: ComDayCqContentsyncImplContentSyncManagerImplInfo.self) { (source: AnyObject) -> ComDayCqContentsyncImplContentSyncManagerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqContentsyncImplContentSyncManagerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqContentsyncImplContentSyncManagerImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqContentsyncImplContentSyncManagerImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqContentsyncImplContentSyncManagerImplProperties].self) { (source: AnyObject) -> [ComDayCqContentsyncImplContentSyncManagerImplProperties] in
                return Decoders.decode(clazz: [ComDayCqContentsyncImplContentSyncManagerImplProperties].self, source: source)
            }
            // Decoder for ComDayCqContentsyncImplContentSyncManagerImplProperties
            Decoders.addDecoder(clazz: ComDayCqContentsyncImplContentSyncManagerImplProperties.self) { (source: AnyObject) -> ComDayCqContentsyncImplContentSyncManagerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqContentsyncImplContentSyncManagerImplProperties()
                instance.contentsyncFallbackAuthorizable = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["contentsync.fallback.authorizable"])
                instance.contentsyncFallbackUpdateuser = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["contentsync.fallback.updateuser"])
                return instance
            }


            // Decoder for [ComDayCqDamCommonsHandlerStandardImageHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCommonsHandlerStandardImageHandlerInfo].self) { (source: AnyObject) -> [ComDayCqDamCommonsHandlerStandardImageHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCommonsHandlerStandardImageHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCommonsHandlerStandardImageHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqDamCommonsHandlerStandardImageHandlerInfo.self) { (source: AnyObject) -> ComDayCqDamCommonsHandlerStandardImageHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCommonsHandlerStandardImageHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCommonsHandlerStandardImageHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCommonsHandlerStandardImageHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCommonsHandlerStandardImageHandlerProperties].self) { (source: AnyObject) -> [ComDayCqDamCommonsHandlerStandardImageHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCommonsHandlerStandardImageHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCommonsHandlerStandardImageHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqDamCommonsHandlerStandardImageHandlerProperties.self) { (source: AnyObject) -> ComDayCqDamCommonsHandlerStandardImageHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCommonsHandlerStandardImageHandlerProperties()
                instance.largeFileThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["large_file_threshold"])
                instance.largeCommentThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["large_comment_threshold"])
                instance.cqDamEnableExtMetaExtraction = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.enable.ext.meta.extraction"])
                return instance
            }


            // Decoder for [ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo].self) { (source: AnyObject) -> [ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo
            Decoders.addDecoder(clazz: ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo.self) { (source: AnyObject) -> ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties].self) { (source: AnyObject) -> [ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties
            Decoders.addDecoder(clazz: ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties.self) { (source: AnyObject) -> ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties()
                instance.xmpFilterApplyWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["xmp.filter.apply_whitelist"])
                instance.xmpFilterWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["xmp.filter.whitelist"])
                instance.xmpFilterApplyBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["xmp.filter.apply_blacklist"])
                instance.xmpFilterBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["xmp.filter.blacklist"])
                return instance
            }


            // Decoder for [ComDayCqDamCommonsUtilImplAssetCacheImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCommonsUtilImplAssetCacheImplInfo].self) { (source: AnyObject) -> [ComDayCqDamCommonsUtilImplAssetCacheImplInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCommonsUtilImplAssetCacheImplInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCommonsUtilImplAssetCacheImplInfo
            Decoders.addDecoder(clazz: ComDayCqDamCommonsUtilImplAssetCacheImplInfo.self) { (source: AnyObject) -> ComDayCqDamCommonsUtilImplAssetCacheImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCommonsUtilImplAssetCacheImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCommonsUtilImplAssetCacheImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCommonsUtilImplAssetCacheImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCommonsUtilImplAssetCacheImplProperties].self) { (source: AnyObject) -> [ComDayCqDamCommonsUtilImplAssetCacheImplProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCommonsUtilImplAssetCacheImplProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCommonsUtilImplAssetCacheImplProperties
            Decoders.addDecoder(clazz: ComDayCqDamCommonsUtilImplAssetCacheImplProperties.self) { (source: AnyObject) -> ComDayCqDamCommonsUtilImplAssetCacheImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCommonsUtilImplAssetCacheImplProperties()
                instance.largeFileMin = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["large.file.min"])
                instance.cacheApply = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cache.apply"])
                instance.mimeTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["mime.types"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties()
                instance.cqDamConfigAnnotationPdfDocumentWidth = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.annotation.pdf.document.width"])
                instance.cqDamConfigAnnotationPdfDocumentHeight = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.annotation.pdf.document.height"])
                instance.cqDamConfigAnnotationPdfDocumentPaddingHorizontal = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.annotation.pdf.document.padding.horizontal"])
                instance.cqDamConfigAnnotationPdfDocumentPaddingVertical = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.annotation.pdf.document.padding.vertical"])
                instance.cqDamConfigAnnotationPdfFontSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.annotation.pdf.font.size"])
                instance.cqDamConfigAnnotationPdfFontColor = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.config.annotation.pdf.font.color"])
                instance.cqDamConfigAnnotationPdfFontFamily = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.config.annotation.pdf.font.family"])
                instance.cqDamConfigAnnotationPdfFontLight = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.config.annotation.pdf.font.light"])
                instance.cqDamConfigAnnotationPdfMarginTextImage = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.annotation.pdf.marginTextImage"])
                instance.cqDamConfigAnnotationPdfMinImageHeight = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.annotation.pdf.minImageHeight"])
                instance.cqDamConfigAnnotationPdfReviewStatusWidth = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.annotation.pdf.reviewStatus.width"])
                instance.cqDamConfigAnnotationPdfReviewStatusColorApproved = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.config.annotation.pdf.reviewStatus.color.approved"])
                instance.cqDamConfigAnnotationPdfReviewStatusColorRejected = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.config.annotation.pdf.reviewStatus.color.rejected"])
                instance.cqDamConfigAnnotationPdfReviewStatusColorChangesRequested = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested"])
                instance.cqDamConfigAnnotationPdfAnnotationMarkerWidth = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.annotation.pdf.annotationMarker.width"])
                instance.cqDamConfigAnnotationPdfAssetMinheight = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.annotation.pdf.asset.minheight"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplAssetMoveListenerInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplAssetMoveListenerInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplAssetMoveListenerInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplAssetMoveListenerInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplAssetMoveListenerInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplAssetMoveListenerInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplAssetMoveListenerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplAssetMoveListenerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplAssetMoveListenerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplAssetMoveListenerProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplAssetMoveListenerProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplAssetMoveListenerProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplAssetMoveListenerProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplAssetMoveListenerProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplAssetMoveListenerProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplAssetMoveListenerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplAssetMoveListenerProperties()
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties()
                instance.isEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["isEnabled"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties()
                instance.cqDamAdhocAssetSharePrezipMaxcontentsize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.adhoc.asset.share.prezip.maxcontentsize"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplCacheCQBufferedImageCacheProperties()
                instance.cqDamImageCacheMaxMemory = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.image.cache.max.memory"])
                instance.cqDamImageCacheMaxAge = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.image.cache.max.age"])
                instance.cqDamImageCacheMaxDimension = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.image.cache.max.dimension"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplDamChangeEventListenerInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplDamChangeEventListenerInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplDamChangeEventListenerInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplDamChangeEventListenerInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplDamChangeEventListenerInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplDamChangeEventListenerInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplDamChangeEventListenerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplDamChangeEventListenerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplDamChangeEventListenerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplDamChangeEventListenerProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplDamChangeEventListenerProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplDamChangeEventListenerProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplDamChangeEventListenerProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplDamChangeEventListenerProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplDamChangeEventListenerProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplDamChangeEventListenerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplDamChangeEventListenerProperties()
                instance.changeeventlistenerObservedPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["changeeventlistener.observed.paths"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplDamEventPurgeServiceInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplDamEventPurgeServiceInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplDamEventPurgeServiceInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplDamEventPurgeServiceInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplDamEventPurgeServiceInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplDamEventPurgeServiceInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplDamEventPurgeServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplDamEventPurgeServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplDamEventPurgeServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplDamEventPurgeServiceProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplDamEventPurgeServiceProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplDamEventPurgeServiceProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplDamEventPurgeServiceProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplDamEventPurgeServiceProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplDamEventPurgeServiceProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplDamEventPurgeServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplDamEventPurgeServiceProperties()
                instance.schedulerExpression = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"])
                instance.maxSavedActivities = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxSavedActivities"])
                instance.saveInterval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["saveInterval"])
                instance.enableActivityPurge = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableActivityPurge"])
                instance.eventTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["eventTypes"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplDamEventRecorderImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplDamEventRecorderImplInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplDamEventRecorderImplInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplDamEventRecorderImplInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplDamEventRecorderImplInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplDamEventRecorderImplInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplDamEventRecorderImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplDamEventRecorderImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplDamEventRecorderImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplDamEventRecorderImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplDamEventRecorderImplProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplDamEventRecorderImplProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplDamEventRecorderImplProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplDamEventRecorderImplProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplDamEventRecorderImplProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplDamEventRecorderImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplDamEventRecorderImplProperties()
                instance.eventFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"])
                instance.eventQueueLength = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["event.queue.length"])
                instance.eventrecorderEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["eventrecorder.enabled"])
                instance.eventrecorderBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["eventrecorder.blacklist"])
                instance.eventrecorderEventtypes = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["eventrecorder.eventtypes"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplEventDamEventAuditListenerInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplEventDamEventAuditListenerInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplEventDamEventAuditListenerInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplEventDamEventAuditListenerInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplEventDamEventAuditListenerInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplEventDamEventAuditListenerInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplEventDamEventAuditListenerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplEventDamEventAuditListenerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplEventDamEventAuditListenerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplEventDamEventAuditListenerProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplEventDamEventAuditListenerProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplEventDamEventAuditListenerProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplEventDamEventAuditListenerProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplEventDamEventAuditListenerProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplEventDamEventAuditListenerProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplEventDamEventAuditListenerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplEventDamEventAuditListenerProperties()
                instance.eventFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"])
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplExpiryNotificationJobImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplExpiryNotificationJobImplInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplExpiryNotificationJobImplInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplExpiryNotificationJobImplInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplExpiryNotificationJobImplInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplExpiryNotificationJobImplInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplExpiryNotificationJobImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplExpiryNotificationJobImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplExpiryNotificationJobImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplExpiryNotificationJobImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplExpiryNotificationJobImplProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplExpiryNotificationJobImplProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplExpiryNotificationJobImplProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplExpiryNotificationJobImplProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplExpiryNotificationJobImplProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplExpiryNotificationJobImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplExpiryNotificationJobImplProperties()
                instance.cqDamExpiryNotificationSchedulerIstimebased = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.expiry.notification.scheduler.istimebased"])
                instance.cqDamExpiryNotificationSchedulerTimebasedRule = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.expiry.notification.scheduler.timebased.rule"])
                instance.cqDamExpiryNotificationSchedulerPeriodRule = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.expiry.notification.scheduler.period.rule"])
                instance.sendEmail = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["send_email"])
                instance.assetExpiredLimit = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["asset_expired_limit"])
                instance.priorNotificationSeconds = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["prior_notification_seconds"])
                instance.cqDamExpiryNotificationUrlProtocol = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.expiry.notification.url.protocol"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties()
                instance.isEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["isEnabled"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplGfxCommonsGfxRendererInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplGfxCommonsGfxRendererInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplGfxCommonsGfxRendererInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplGfxCommonsGfxRendererInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplGfxCommonsGfxRendererInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplGfxCommonsGfxRendererInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplGfxCommonsGfxRendererInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplGfxCommonsGfxRendererInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplGfxCommonsGfxRendererProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplGfxCommonsGfxRendererProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplGfxCommonsGfxRendererProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplGfxCommonsGfxRendererProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplGfxCommonsGfxRendererProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplGfxCommonsGfxRendererProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplGfxCommonsGfxRendererProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplGfxCommonsGfxRendererProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplGfxCommonsGfxRendererProperties()
                instance.skipBufferedcache = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["skip.bufferedcache"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplHandlerEPSFormatHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplHandlerEPSFormatHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplHandlerEPSFormatHandlerProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplHandlerEPSFormatHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplHandlerEPSFormatHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplHandlerEPSFormatHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplHandlerEPSFormatHandlerProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplHandlerEPSFormatHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplHandlerEPSFormatHandlerProperties()
                instance.mimetype = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["mimetype"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties()
                instance.mimetype = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["mimetype"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplHandlerJpegHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplHandlerJpegHandlerInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplHandlerJpegHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplHandlerJpegHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplHandlerJpegHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplHandlerJpegHandlerInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplHandlerJpegHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplHandlerJpegHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplHandlerJpegHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplHandlerJpegHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplHandlerJpegHandlerProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplHandlerJpegHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplHandlerJpegHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplHandlerJpegHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplHandlerJpegHandlerProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplHandlerJpegHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplHandlerJpegHandlerProperties()
                instance.cqDamEnableExtMetaExtraction = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.enable.ext.meta.extraction"])
                instance.largeFileThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["large_file_threshold"])
                instance.largeCommentThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["large_comment_threshold"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerProperties()
                instance.xmphandlerCqFormats = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["xmphandler.cq.formats"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties()
                instance.jmxObjectname = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jmx.objectname"])
                instance.propertyMeasureEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["property.measure.enabled"])
                instance.propertyName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["property.name"])
                instance.propertyMaxWaitMs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["property.max.wait.ms"])
                instance.propertyMaxRate = Decoders.decodeOptional(clazz: ConfigNodePropertyFloat.self, source: sourceDictionary["property.max.rate"])
                instance.fulltextMeasureEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["fulltext.measure.enabled"])
                instance.fulltextName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["fulltext.name"])
                instance.fulltextMaxWaitMs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["fulltext.max.wait.ms"])
                instance.fulltextMaxRate = Decoders.decodeOptional(clazz: ConfigNodePropertyFloat.self, source: sourceDictionary["fulltext.max.rate"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties()
                instance.jmxObjectname = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jmx.objectname"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties()
                instance.jmxObjectname = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jmx.objectname"])
                instance.active = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["active"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties()
                instance.operation = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["operation"])
                instance.emailEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["emailEnabled"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties()
                instance.operation = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["operation"])
                instance.operationIcon = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["operationIcon"])
                instance.topicName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["topicName"])
                instance.emailEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["emailEnabled"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplLightboxLightboxServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplLightboxLightboxServletInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplLightboxLightboxServletInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplLightboxLightboxServletInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplLightboxLightboxServletInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplLightboxLightboxServletInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplLightboxLightboxServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplLightboxLightboxServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplLightboxLightboxServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplLightboxLightboxServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplLightboxLightboxServletProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplLightboxLightboxServletProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplLightboxLightboxServletProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplLightboxLightboxServletProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplLightboxLightboxServletProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplLightboxLightboxServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplLightboxLightboxServletProperties()
                instance.slingServletPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.paths"])
                instance.slingServletMethods = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.servlet.methods"])
                instance.cqDamEnableAnonymous = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.enable.anonymous"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties()
                instance.granitedata = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["granite:data"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties()
                instance.cqDamAllowAllMime = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.allow.all.mime"])
                instance.cqDamAllowedAssetMimes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.dam.allowed.asset.mimes"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties()
                instance.cqDamDetectAssetMimeFromContent = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.detect.asset.mime.from.content"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplMissingMetadataNotificationJobInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplMissingMetadataNotificationJobInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplMissingMetadataNotificationJobInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplMissingMetadataNotificationJobInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplMissingMetadataNotificationJobInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplMissingMetadataNotificationJobInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplMissingMetadataNotificationJobInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplMissingMetadataNotificationJobInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplMissingMetadataNotificationJobProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplMissingMetadataNotificationJobProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplMissingMetadataNotificationJobProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplMissingMetadataNotificationJobProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplMissingMetadataNotificationJobProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplMissingMetadataNotificationJobProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplMissingMetadataNotificationJobProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplMissingMetadataNotificationJobProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplMissingMetadataNotificationJobProperties()
                instance.cqDamMissingmetadataNotificationSchedulerIstimebased = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.missingmetadata.notification.scheduler.istimebased"])
                instance.cqDamMissingmetadataNotificationSchedulerTimebasedRule = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.missingmetadata.notification.scheduler.timebased.rule"])
                instance.cqDamMissingmetadataNotificationSchedulerPeriodRule = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.missingmetadata.notification.scheduler.period.rule"])
                instance.cqDamMissingmetadataNotificationRecipient = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.missingmetadata.notification.recipient"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties()
                instance.processLabel = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["process.label"])
                instance.notifyOnComplete = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["Notify on Complete"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplProcessTextExtractionProcessInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplProcessTextExtractionProcessInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplProcessTextExtractionProcessInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplProcessTextExtractionProcessInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplProcessTextExtractionProcessInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplProcessTextExtractionProcessInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplProcessTextExtractionProcessInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplProcessTextExtractionProcessInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplProcessTextExtractionProcessProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplProcessTextExtractionProcessProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplProcessTextExtractionProcessProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplProcessTextExtractionProcessProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplProcessTextExtractionProcessProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplProcessTextExtractionProcessProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplProcessTextExtractionProcessProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplProcessTextExtractionProcessProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplProcessTextExtractionProcessProperties()
                instance.mimeTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["mimeTypes"])
                instance.maxExtract = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxExtract"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplRenditionMakerImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplRenditionMakerImplInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplRenditionMakerImplInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplRenditionMakerImplInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplRenditionMakerImplInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplRenditionMakerImplInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplRenditionMakerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplRenditionMakerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplRenditionMakerImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplRenditionMakerImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplRenditionMakerImplProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplRenditionMakerImplProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplRenditionMakerImplProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplRenditionMakerImplProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplRenditionMakerImplProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplRenditionMakerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplRenditionMakerImplProperties()
                instance.xmpPropagate = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["xmp.propagate"])
                instance.xmpExcludes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["xmp.excludes"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplReportsReportExportServiceInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplReportsReportExportServiceInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplReportsReportExportServiceInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplReportsReportExportServiceInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplReportsReportExportServiceInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplReportsReportExportServiceInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplReportsReportExportServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplReportsReportExportServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplReportsReportExportServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplReportsReportExportServiceProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplReportsReportExportServiceProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplReportsReportExportServiceProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplReportsReportExportServiceProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplReportsReportExportServiceProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplReportsReportExportServiceProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplReportsReportExportServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplReportsReportExportServiceProperties()
                instance.queryBatchSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queryBatchSize"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplReportsReportPurgeServiceInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplReportsReportPurgeServiceInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplReportsReportPurgeServiceInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplReportsReportPurgeServiceInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplReportsReportPurgeServiceInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplReportsReportPurgeServiceInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplReportsReportPurgeServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplReportsReportPurgeServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplReportsReportPurgeServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplReportsReportPurgeServiceProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplReportsReportPurgeServiceProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplReportsReportPurgeServiceProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplReportsReportPurgeServiceProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplReportsReportPurgeServiceProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplReportsReportPurgeServiceProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplReportsReportPurgeServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplReportsReportPurgeServiceProperties()
                instance.schedulerExpression = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"])
                instance.maxSavedReports = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxSavedReports"])
                instance.timeDuration = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["timeDuration"])
                instance.enableReportPurge = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableReportPurge"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletAssetDownloadServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletAssetDownloadServletInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletAssetDownloadServletInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletAssetDownloadServletInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletAssetDownloadServletInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletAssetDownloadServletInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletAssetDownloadServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletAssetDownloadServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletAssetDownloadServletProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletAssetDownloadServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletAssetDownloadServletProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletAssetDownloadServletProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletAssetDownloadServletProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletAssetDownloadServletProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletAssetDownloadServletProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletAssetDownloadServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletAssetDownloadServletProperties()
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletAssetStatusServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletAssetStatusServletInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletAssetStatusServletInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletAssetStatusServletInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletAssetStatusServletInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletAssetStatusServletInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletAssetStatusServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletAssetStatusServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletAssetStatusServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletAssetStatusServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletAssetStatusServletProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletAssetStatusServletProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletAssetStatusServletProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletAssetStatusServletProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletAssetStatusServletProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletAssetStatusServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletAssetStatusServletProperties()
                instance.cqDamBatchStatusMaxassets = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.batch.status.maxassets"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletAssetXMPSearchServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletAssetXMPSearchServletInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletAssetXMPSearchServletInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletAssetXMPSearchServletInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletAssetXMPSearchServletInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletAssetXMPSearchServletInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletAssetXMPSearchServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletAssetXMPSearchServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletAssetXMPSearchServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletAssetXMPSearchServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletAssetXMPSearchServletProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletAssetXMPSearchServletProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletAssetXMPSearchServletProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletAssetXMPSearchServletProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletAssetXMPSearchServletProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletAssetXMPSearchServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletAssetXMPSearchServletProperties()
                instance.cqDamBatchIndesignMaxassets = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.batch.indesign.maxassets"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletBatchMetadataServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletBatchMetadataServletInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletBatchMetadataServletInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletBatchMetadataServletInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletBatchMetadataServletInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletBatchMetadataServletInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletBatchMetadataServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletBatchMetadataServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletBatchMetadataServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletBatchMetadataServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletBatchMetadataServletProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletBatchMetadataServletProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletBatchMetadataServletProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletBatchMetadataServletProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletBatchMetadataServletProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletBatchMetadataServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletBatchMetadataServletProperties()
                instance.cqDamBatchMetadataAssetDefault = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.dam.batch.metadata.asset.default"])
                instance.cqDamBatchMetadataCollectionDefault = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.dam.batch.metadata.collection.default"])
                instance.cqDamBatchMetadataMaxresources = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.batch.metadata.maxresources"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletBinaryProviderServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletBinaryProviderServletInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletBinaryProviderServletInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletBinaryProviderServletInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletBinaryProviderServletInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletBinaryProviderServletInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletBinaryProviderServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletBinaryProviderServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletBinaryProviderServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletBinaryProviderServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletBinaryProviderServletProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletBinaryProviderServletProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletBinaryProviderServletProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletBinaryProviderServletProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletBinaryProviderServletProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletBinaryProviderServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletBinaryProviderServletProperties()
                instance.slingServletResourceTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.servlet.resourceTypes"])
                instance.slingServletMethods = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.servlet.methods"])
                instance.cqDamDrmEnable = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.drm.enable"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletCollectionServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletCollectionServletInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletCollectionServletInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletCollectionServletInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletCollectionServletInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletCollectionServletInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletCollectionServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletCollectionServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletCollectionServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletCollectionServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletCollectionServletProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletCollectionServletProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletCollectionServletProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletCollectionServletProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletCollectionServletProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletCollectionServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletCollectionServletProperties()
                instance.cqDamBatchCollectionProperties = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.dam.batch.collection.properties"])
                instance.cqDamBatchCollectionMaxcollections = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.batch.collection.maxcollections"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletCollectionsServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletCollectionsServletInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletCollectionsServletInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletCollectionsServletInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletCollectionsServletInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletCollectionsServletInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletCollectionsServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletCollectionsServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletCollectionsServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletCollectionsServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletCollectionsServletProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletCollectionsServletProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletCollectionsServletProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletCollectionsServletProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletCollectionsServletProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletCollectionsServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletCollectionsServletProperties()
                instance.cqDamBatchCollectionsProperties = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.dam.batch.collections.properties"])
                instance.cqDamBatchCollectionsLimit = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.batch.collections.limit"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletCompanionServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletCompanionServletInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletCompanionServletInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletCompanionServletInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletCompanionServletInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletCompanionServletInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletCompanionServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletCompanionServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletCompanionServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletCompanionServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletCompanionServletProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletCompanionServletProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletCompanionServletProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletCompanionServletProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletCompanionServletProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletCompanionServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletCompanionServletProperties()
                instance.moreInfo = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["More Info"])
                instance.mntoverlaydamguicontentassetsmoreinfoHtmlpath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletCreateAssetServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletCreateAssetServletInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletCreateAssetServletInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletCreateAssetServletInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletCreateAssetServletInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletCreateAssetServletInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletCreateAssetServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletCreateAssetServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletCreateAssetServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletCreateAssetServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletCreateAssetServletProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletCreateAssetServletProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletCreateAssetServletProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletCreateAssetServletProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletCreateAssetServletProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletCreateAssetServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletCreateAssetServletProperties()
                instance.detectDuplicate = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["detect_duplicate"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletDamContentDispositionFilterInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletDamContentDispositionFilterInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletDamContentDispositionFilterInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletDamContentDispositionFilterInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletDamContentDispositionFilterInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletDamContentDispositionFilterInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletDamContentDispositionFilterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletDamContentDispositionFilterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletDamContentDispositionFilterProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletDamContentDispositionFilterProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletDamContentDispositionFilterProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletDamContentDispositionFilterProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletDamContentDispositionFilterProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletDamContentDispositionFilterProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletDamContentDispositionFilterProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletDamContentDispositionFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletDamContentDispositionFilterProperties()
                instance.cqMimeTypeBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.mime.type.blacklist"])
                instance.cqDamEmptyMime = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.empty.mime"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletGuidLookupFilterInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletGuidLookupFilterInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletGuidLookupFilterInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletGuidLookupFilterInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletGuidLookupFilterInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletGuidLookupFilterInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletGuidLookupFilterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletGuidLookupFilterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletGuidLookupFilterProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletGuidLookupFilterProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletGuidLookupFilterProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletGuidLookupFilterProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletGuidLookupFilterProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletGuidLookupFilterProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletGuidLookupFilterProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletGuidLookupFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletGuidLookupFilterProperties()
                instance.cqDamCoreGuidlookupfilterEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.core.guidlookupfilter.enabled"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletHealthCheckServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletHealthCheckServletInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletHealthCheckServletInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletHealthCheckServletInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletHealthCheckServletInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletHealthCheckServletInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletHealthCheckServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletHealthCheckServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletHealthCheckServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletHealthCheckServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletHealthCheckServletProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletHealthCheckServletProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletHealthCheckServletProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletHealthCheckServletProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletHealthCheckServletProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletHealthCheckServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletHealthCheckServletProperties()
                instance.cqDamSyncWorkflowId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.sync.workflow.id"])
                instance.cqDamSyncFolderTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.dam.sync.folder.types"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletMetadataGetServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletMetadataGetServletInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletMetadataGetServletInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletMetadataGetServletInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletMetadataGetServletInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletMetadataGetServletInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletMetadataGetServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletMetadataGetServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletMetadataGetServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletMetadataGetServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletMetadataGetServletProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletMetadataGetServletProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletMetadataGetServletProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletMetadataGetServletProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletMetadataGetServletProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletMetadataGetServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletMetadataGetServletProperties()
                instance.slingServletResourceTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.resourceTypes"])
                instance.slingServletMethods = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.methods"])
                instance.slingServletExtensions = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.extensions"])
                instance.slingServletSelectors = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.selectors"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties()
                instance.cqDamDrmEnable = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.drm.enable"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletResourceCollectionServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletResourceCollectionServletInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletResourceCollectionServletInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletResourceCollectionServletInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletResourceCollectionServletInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletResourceCollectionServletInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletResourceCollectionServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletResourceCollectionServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplServletResourceCollectionServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplServletResourceCollectionServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplServletResourceCollectionServletProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplServletResourceCollectionServletProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplServletResourceCollectionServletProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplServletResourceCollectionServletProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplServletResourceCollectionServletProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplServletResourceCollectionServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplServletResourceCollectionServletProperties()
                instance.slingServletResourceTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.servlet.resourceTypes"])
                instance.slingServletMethods = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.methods"])
                instance.slingServletSelectors = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.selectors"])
                instance.downloadConfig = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["download.config"])
                instance.viewSelector = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["view.selector"])
                instance.sendEmail = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["send_email"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties()
                instance.createPreviewEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["createPreviewEnabled"])
                instance.updatePreviewEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["updatePreviewEnabled"])
                instance.queueSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queueSize"])
                instance.folderPreviewRenditionRegex = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["folderPreviewRenditionRegex"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplUnzipUnzipConfigInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplUnzipUnzipConfigInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreImplUnzipUnzipConfigInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplUnzipUnzipConfigInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplUnzipUnzipConfigInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplUnzipUnzipConfigInfo.self) { (source: AnyObject) -> ComDayCqDamCoreImplUnzipUnzipConfigInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplUnzipUnzipConfigInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreImplUnzipUnzipConfigProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreImplUnzipUnzipConfigProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreImplUnzipUnzipConfigProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreImplUnzipUnzipConfigProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreImplUnzipUnzipConfigProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreImplUnzipUnzipConfigProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreImplUnzipUnzipConfigProperties.self) { (source: AnyObject) -> ComDayCqDamCoreImplUnzipUnzipConfigProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreImplUnzipUnzipConfigProperties()
                instance.cqDamConfigUnzipMaxuncompressedsize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.config.unzip.maxuncompressedsize"])
                instance.cqDamConfigUnzipEncoding = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.config.unzip.encoding"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo.self) { (source: AnyObject) -> ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties.self) { (source: AnyObject) -> ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties()
                instance.processLabel = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["process.label"])
                instance.cqDamEnableSha1 = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.enable.sha1"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreProcessExtractMetadataProcessInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreProcessExtractMetadataProcessInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreProcessExtractMetadataProcessInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreProcessExtractMetadataProcessInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreProcessExtractMetadataProcessInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreProcessExtractMetadataProcessInfo.self) { (source: AnyObject) -> ComDayCqDamCoreProcessExtractMetadataProcessInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreProcessExtractMetadataProcessInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreProcessExtractMetadataProcessProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreProcessExtractMetadataProcessProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreProcessExtractMetadataProcessProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreProcessExtractMetadataProcessProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreProcessExtractMetadataProcessProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreProcessExtractMetadataProcessProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreProcessExtractMetadataProcessProperties.self) { (source: AnyObject) -> ComDayCqDamCoreProcessExtractMetadataProcessProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreProcessExtractMetadataProcessProperties()
                instance.processLabel = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["process.label"])
                instance.cqDamEnableSha1 = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.enable.sha1"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreProcessMetadataProcessorProcessInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreProcessMetadataProcessorProcessInfo].self) { (source: AnyObject) -> [ComDayCqDamCoreProcessMetadataProcessorProcessInfo] in
                return Decoders.decode(clazz: [ComDayCqDamCoreProcessMetadataProcessorProcessInfo].self, source: source)
            }
            // Decoder for ComDayCqDamCoreProcessMetadataProcessorProcessInfo
            Decoders.addDecoder(clazz: ComDayCqDamCoreProcessMetadataProcessorProcessInfo.self) { (source: AnyObject) -> ComDayCqDamCoreProcessMetadataProcessorProcessInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreProcessMetadataProcessorProcessInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamCoreProcessMetadataProcessorProcessProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamCoreProcessMetadataProcessorProcessProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamCoreProcessMetadataProcessorProcessProperties].self) { (source: AnyObject) -> [ComDayCqDamCoreProcessMetadataProcessorProcessProperties] in
                return Decoders.decode(clazz: [ComDayCqDamCoreProcessMetadataProcessorProcessProperties].self, source: source)
            }
            // Decoder for ComDayCqDamCoreProcessMetadataProcessorProcessProperties
            Decoders.addDecoder(clazz: ComDayCqDamCoreProcessMetadataProcessorProcessProperties.self) { (source: AnyObject) -> ComDayCqDamCoreProcessMetadataProcessorProcessProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamCoreProcessMetadataProcessorProcessProperties()
                instance.processLabel = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["process.label"])
                instance.cqDamEnableSha1 = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.enable.sha1"])
                instance.cqDamMetadataXssprotectedProperties = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.dam.metadata.xssprotected.properties"])
                return instance
            }


            // Decoder for [ComDayCqDamHandlerFfmpegLocatorImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamHandlerFfmpegLocatorImplInfo].self) { (source: AnyObject) -> [ComDayCqDamHandlerFfmpegLocatorImplInfo] in
                return Decoders.decode(clazz: [ComDayCqDamHandlerFfmpegLocatorImplInfo].self, source: source)
            }
            // Decoder for ComDayCqDamHandlerFfmpegLocatorImplInfo
            Decoders.addDecoder(clazz: ComDayCqDamHandlerFfmpegLocatorImplInfo.self) { (source: AnyObject) -> ComDayCqDamHandlerFfmpegLocatorImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamHandlerFfmpegLocatorImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamHandlerFfmpegLocatorImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamHandlerFfmpegLocatorImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamHandlerFfmpegLocatorImplProperties].self) { (source: AnyObject) -> [ComDayCqDamHandlerFfmpegLocatorImplProperties] in
                return Decoders.decode(clazz: [ComDayCqDamHandlerFfmpegLocatorImplProperties].self, source: source)
            }
            // Decoder for ComDayCqDamHandlerFfmpegLocatorImplProperties
            Decoders.addDecoder(clazz: ComDayCqDamHandlerFfmpegLocatorImplProperties.self) { (source: AnyObject) -> ComDayCqDamHandlerFfmpegLocatorImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamHandlerFfmpegLocatorImplProperties()
                instance.executableSearchpath = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["executable.searchpath"])
                return instance
            }


            // Decoder for [ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo].self) { (source: AnyObject) -> [ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo] in
                return Decoders.decode(clazz: [ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo].self, source: source)
            }
            // Decoder for ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo
            Decoders.addDecoder(clazz: ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo.self) { (source: AnyObject) -> ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties].self) { (source: AnyObject) -> [ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties] in
                return Decoders.decode(clazz: [ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties].self, source: source)
            }
            // Decoder for ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties
            Decoders.addDecoder(clazz: ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties.self) { (source: AnyObject) -> ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties()
                instance.eventFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"])
                instance.fontmgrSystemFontDir = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fontmgr.system.font.dir"])
                instance.fontmgrAdobeFontDir = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["fontmgr.adobe.font.dir"])
                instance.fontmgrCustomerFontDir = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["fontmgr.customer.font.dir"])
                return instance
            }


            // Decoder for [ComDayCqDamHandlerStandardPdfPdfHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamHandlerStandardPdfPdfHandlerInfo].self) { (source: AnyObject) -> [ComDayCqDamHandlerStandardPdfPdfHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqDamHandlerStandardPdfPdfHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqDamHandlerStandardPdfPdfHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqDamHandlerStandardPdfPdfHandlerInfo.self) { (source: AnyObject) -> ComDayCqDamHandlerStandardPdfPdfHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamHandlerStandardPdfPdfHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamHandlerStandardPdfPdfHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamHandlerStandardPdfPdfHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamHandlerStandardPdfPdfHandlerProperties].self) { (source: AnyObject) -> [ComDayCqDamHandlerStandardPdfPdfHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqDamHandlerStandardPdfPdfHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqDamHandlerStandardPdfPdfHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqDamHandlerStandardPdfPdfHandlerProperties.self) { (source: AnyObject) -> ComDayCqDamHandlerStandardPdfPdfHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamHandlerStandardPdfPdfHandlerProperties()
                instance.rasterAnnotation = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["raster.annotation"])
                return instance
            }


            // Decoder for [ComDayCqDamHandlerStandardPsPostScriptHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamHandlerStandardPsPostScriptHandlerInfo].self) { (source: AnyObject) -> [ComDayCqDamHandlerStandardPsPostScriptHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqDamHandlerStandardPsPostScriptHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqDamHandlerStandardPsPostScriptHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqDamHandlerStandardPsPostScriptHandlerInfo.self) { (source: AnyObject) -> ComDayCqDamHandlerStandardPsPostScriptHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamHandlerStandardPsPostScriptHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamHandlerStandardPsPostScriptHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamHandlerStandardPsPostScriptHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamHandlerStandardPsPostScriptHandlerProperties].self) { (source: AnyObject) -> [ComDayCqDamHandlerStandardPsPostScriptHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqDamHandlerStandardPsPostScriptHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqDamHandlerStandardPsPostScriptHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqDamHandlerStandardPsPostScriptHandlerProperties.self) { (source: AnyObject) -> ComDayCqDamHandlerStandardPsPostScriptHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamHandlerStandardPsPostScriptHandlerProperties()
                instance.rasterAnnotation = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["raster.annotation"])
                return instance
            }


            // Decoder for [ComDayCqDamHandlerStandardPsdPsdHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamHandlerStandardPsdPsdHandlerInfo].self) { (source: AnyObject) -> [ComDayCqDamHandlerStandardPsdPsdHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqDamHandlerStandardPsdPsdHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqDamHandlerStandardPsdPsdHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqDamHandlerStandardPsdPsdHandlerInfo.self) { (source: AnyObject) -> ComDayCqDamHandlerStandardPsdPsdHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamHandlerStandardPsdPsdHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamHandlerStandardPsdPsdHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamHandlerStandardPsdPsdHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamHandlerStandardPsdPsdHandlerProperties].self) { (source: AnyObject) -> [ComDayCqDamHandlerStandardPsdPsdHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqDamHandlerStandardPsdPsdHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqDamHandlerStandardPsdPsdHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqDamHandlerStandardPsdPsdHandlerProperties.self) { (source: AnyObject) -> ComDayCqDamHandlerStandardPsdPsdHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamHandlerStandardPsdPsdHandlerProperties()
                instance.largeFileThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["large_file_threshold"])
                return instance
            }


            // Decoder for [ComDayCqDamIdsImplIDSJobProcessorInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamIdsImplIDSJobProcessorInfo].self) { (source: AnyObject) -> [ComDayCqDamIdsImplIDSJobProcessorInfo] in
                return Decoders.decode(clazz: [ComDayCqDamIdsImplIDSJobProcessorInfo].self, source: source)
            }
            // Decoder for ComDayCqDamIdsImplIDSJobProcessorInfo
            Decoders.addDecoder(clazz: ComDayCqDamIdsImplIDSJobProcessorInfo.self) { (source: AnyObject) -> ComDayCqDamIdsImplIDSJobProcessorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamIdsImplIDSJobProcessorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamIdsImplIDSJobProcessorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamIdsImplIDSJobProcessorProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamIdsImplIDSJobProcessorProperties].self) { (source: AnyObject) -> [ComDayCqDamIdsImplIDSJobProcessorProperties] in
                return Decoders.decode(clazz: [ComDayCqDamIdsImplIDSJobProcessorProperties].self, source: source)
            }
            // Decoder for ComDayCqDamIdsImplIDSJobProcessorProperties
            Decoders.addDecoder(clazz: ComDayCqDamIdsImplIDSJobProcessorProperties.self) { (source: AnyObject) -> ComDayCqDamIdsImplIDSJobProcessorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamIdsImplIDSJobProcessorProperties()
                instance.enableMultisession = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable.multisession"])
                instance.idsCcEnable = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["ids.cc.enable"])
                instance.enableRetry = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable.retry"])
                instance.enableRetryScripterror = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable.retry.scripterror"])
                instance.externalizerDomainCqhost = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["externalizer.domain.cqhost"])
                instance.externalizerDomainHttp = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["externalizer.domain.http"])
                return instance
            }


            // Decoder for [ComDayCqDamIdsImplIDSPoolManagerImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamIdsImplIDSPoolManagerImplInfo].self) { (source: AnyObject) -> [ComDayCqDamIdsImplIDSPoolManagerImplInfo] in
                return Decoders.decode(clazz: [ComDayCqDamIdsImplIDSPoolManagerImplInfo].self, source: source)
            }
            // Decoder for ComDayCqDamIdsImplIDSPoolManagerImplInfo
            Decoders.addDecoder(clazz: ComDayCqDamIdsImplIDSPoolManagerImplInfo.self) { (source: AnyObject) -> ComDayCqDamIdsImplIDSPoolManagerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamIdsImplIDSPoolManagerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamIdsImplIDSPoolManagerImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamIdsImplIDSPoolManagerImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamIdsImplIDSPoolManagerImplProperties].self) { (source: AnyObject) -> [ComDayCqDamIdsImplIDSPoolManagerImplProperties] in
                return Decoders.decode(clazz: [ComDayCqDamIdsImplIDSPoolManagerImplProperties].self, source: source)
            }
            // Decoder for ComDayCqDamIdsImplIDSPoolManagerImplProperties
            Decoders.addDecoder(clazz: ComDayCqDamIdsImplIDSPoolManagerImplProperties.self) { (source: AnyObject) -> ComDayCqDamIdsImplIDSPoolManagerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamIdsImplIDSPoolManagerImplProperties()
                instance.maxErrorsToBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["max.errors.to.blacklist"])
                instance.retryIntervalToWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["retry.interval.to.whitelist"])
                instance.connectTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["connect.timeout"])
                instance.socketTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["socket.timeout"])
                instance.processLabel = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["process.label"])
                instance.connectionUseMax = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["connection.use.max"])
                return instance
            }


            // Decoder for [ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo].self) { (source: AnyObject) -> [ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo.self) { (source: AnyObject) -> ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamInddImplHandlerIndesignXMPHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamInddImplHandlerIndesignXMPHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamInddImplHandlerIndesignXMPHandlerProperties].self) { (source: AnyObject) -> [ComDayCqDamInddImplHandlerIndesignXMPHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqDamInddImplHandlerIndesignXMPHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqDamInddImplHandlerIndesignXMPHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqDamInddImplHandlerIndesignXMPHandlerProperties.self) { (source: AnyObject) -> ComDayCqDamInddImplHandlerIndesignXMPHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamInddImplHandlerIndesignXMPHandlerProperties()
                instance.processLabel = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["process.label"])
                instance.extractPages = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["extract.pages"])
                return instance
            }


            // Decoder for [ComDayCqDamInddImplServletSnippetCreationServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamInddImplServletSnippetCreationServletInfo].self) { (source: AnyObject) -> [ComDayCqDamInddImplServletSnippetCreationServletInfo] in
                return Decoders.decode(clazz: [ComDayCqDamInddImplServletSnippetCreationServletInfo].self, source: source)
            }
            // Decoder for ComDayCqDamInddImplServletSnippetCreationServletInfo
            Decoders.addDecoder(clazz: ComDayCqDamInddImplServletSnippetCreationServletInfo.self) { (source: AnyObject) -> ComDayCqDamInddImplServletSnippetCreationServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamInddImplServletSnippetCreationServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamInddImplServletSnippetCreationServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamInddImplServletSnippetCreationServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamInddImplServletSnippetCreationServletProperties].self) { (source: AnyObject) -> [ComDayCqDamInddImplServletSnippetCreationServletProperties] in
                return Decoders.decode(clazz: [ComDayCqDamInddImplServletSnippetCreationServletProperties].self, source: source)
            }
            // Decoder for ComDayCqDamInddImplServletSnippetCreationServletProperties
            Decoders.addDecoder(clazz: ComDayCqDamInddImplServletSnippetCreationServletProperties.self) { (source: AnyObject) -> ComDayCqDamInddImplServletSnippetCreationServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamInddImplServletSnippetCreationServletProperties()
                instance.snippetcreationMaxcollections = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["snippetcreation.maxcollections"])
                return instance
            }


            // Decoder for [ComDayCqDamInddProcessINDDMediaExtractProcessInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamInddProcessINDDMediaExtractProcessInfo].self) { (source: AnyObject) -> [ComDayCqDamInddProcessINDDMediaExtractProcessInfo] in
                return Decoders.decode(clazz: [ComDayCqDamInddProcessINDDMediaExtractProcessInfo].self, source: source)
            }
            // Decoder for ComDayCqDamInddProcessINDDMediaExtractProcessInfo
            Decoders.addDecoder(clazz: ComDayCqDamInddProcessINDDMediaExtractProcessInfo.self) { (source: AnyObject) -> ComDayCqDamInddProcessINDDMediaExtractProcessInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamInddProcessINDDMediaExtractProcessInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamInddProcessINDDMediaExtractProcessProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamInddProcessINDDMediaExtractProcessProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamInddProcessINDDMediaExtractProcessProperties].self) { (source: AnyObject) -> [ComDayCqDamInddProcessINDDMediaExtractProcessProperties] in
                return Decoders.decode(clazz: [ComDayCqDamInddProcessINDDMediaExtractProcessProperties].self, source: source)
            }
            // Decoder for ComDayCqDamInddProcessINDDMediaExtractProcessProperties
            Decoders.addDecoder(clazz: ComDayCqDamInddProcessINDDMediaExtractProcessProperties.self) { (source: AnyObject) -> ComDayCqDamInddProcessINDDMediaExtractProcessProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamInddProcessINDDMediaExtractProcessProperties()
                instance.processLabel = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["process.label"])
                instance.cqDamInddPagesRegex = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.dam.indd.pages.regex"])
                instance.idsJobDecoupled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["ids.job.decoupled"])
                instance.idsJobWorkflowModel = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["ids.job.workflow.model"])
                return instance
            }


            // Decoder for [ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo].self) { (source: AnyObject) -> [ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo] in
                return Decoders.decode(clazz: [ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo].self, source: source)
            }
            // Decoder for ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo
            Decoders.addDecoder(clazz: ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo.self) { (source: AnyObject) -> ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties].self) { (source: AnyObject) -> [ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties] in
                return Decoders.decode(clazz: [ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties].self, source: source)
            }
            // Decoder for ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties
            Decoders.addDecoder(clazz: ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties.self) { (source: AnyObject) -> ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties()
                instance.batchCommitSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["batch.commit.size"])
                return instance
            }


            // Decoder for [ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo].self) { (source: AnyObject) -> [ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo] in
                return Decoders.decode(clazz: [ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo].self, source: source)
            }
            // Decoder for ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo
            Decoders.addDecoder(clazz: ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo.self) { (source: AnyObject) -> ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties].self) { (source: AnyObject) -> [ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties] in
                return Decoders.decode(clazz: [ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties].self, source: source)
            }
            // Decoder for ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties
            Decoders.addDecoder(clazz: ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties.self) { (source: AnyObject) -> ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties()
                instance.schedulerExpression = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"])
                return instance
            }


            // Decoder for [ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo].self) { (source: AnyObject) -> [ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo] in
                return Decoders.decode(clazz: [ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo].self, source: source)
            }
            // Decoder for ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo
            Decoders.addDecoder(clazz: ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo.self) { (source: AnyObject) -> ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties].self) { (source: AnyObject) -> [ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties] in
                return Decoders.decode(clazz: [ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties].self, source: source)
            }
            // Decoder for ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties
            Decoders.addDecoder(clazz: ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties.self) { (source: AnyObject) -> ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties()
                instance.deleteZipFile = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["delete.zip.file"])
                return instance
            }


            // Decoder for [ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo].self) { (source: AnyObject) -> [ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo] in
                return Decoders.decode(clazz: [ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo].self, source: source)
            }
            // Decoder for ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo
            Decoders.addDecoder(clazz: ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo.self) { (source: AnyObject) -> ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties].self) { (source: AnyObject) -> [ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties] in
                return Decoders.decode(clazz: [ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties].self, source: source)
            }
            // Decoder for ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties
            Decoders.addDecoder(clazz: ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties.self) { (source: AnyObject) -> ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties()
                instance.cqDamS7damDynamicmediaconfigeventlistenerEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled"])
                return instance
            }


            // Decoder for [ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo].self) { (source: AnyObject) -> [ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo] in
                return Decoders.decode(clazz: [ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo].self, source: source)
            }
            // Decoder for ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo
            Decoders.addDecoder(clazz: ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo.self) { (source: AnyObject) -> ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties].self) { (source: AnyObject) -> [ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties] in
                return Decoders.decode(clazz: [ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties].self, source: source)
            }
            // Decoder for ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties
            Decoders.addDecoder(clazz: ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties.self) { (source: AnyObject) -> ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties()
                instance.schedulerExpression = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"])
                instance.schedulerConcurrent = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["scheduler.concurrent"])
                return instance
            }


            // Decoder for [ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo].self) { (source: AnyObject) -> [ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo.self) { (source: AnyObject) -> ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties].self) { (source: AnyObject) -> [ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties.self) { (source: AnyObject) -> ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties()
                instance.slingPostOperation = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.post.operation"])
                instance.slingServletMethods = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.methods"])
                return instance
            }


            // Decoder for [ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo].self) { (source: AnyObject) -> [ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo.self) { (source: AnyObject) -> ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties].self) { (source: AnyObject) -> [ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties.self) { (source: AnyObject) -> ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties()
                instance.slingPostOperation = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.post.operation"])
                instance.slingServletMethods = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.methods"])
                return instance
            }


            // Decoder for [ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo].self) { (source: AnyObject) -> [ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo] in
                return Decoders.decode(clazz: [ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo].self, source: source)
            }
            // Decoder for ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo
            Decoders.addDecoder(clazz: ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo.self) { (source: AnyObject) -> ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties].self) { (source: AnyObject) -> [ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties] in
                return Decoders.decode(clazz: [ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties].self, source: source)
            }
            // Decoder for ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties
            Decoders.addDecoder(clazz: ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties.self) { (source: AnyObject) -> ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties()
                instance.processLabel = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["process.label"])
                return instance
            }


            // Decoder for [ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo].self) { (source: AnyObject) -> [ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo] in
                return Decoders.decode(clazz: [ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo].self, source: source)
            }
            // Decoder for ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo
            Decoders.addDecoder(clazz: ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo.self) { (source: AnyObject) -> ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties].self) { (source: AnyObject) -> [ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties] in
                return Decoders.decode(clazz: [ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties].self, source: source)
            }
            // Decoder for ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties
            Decoders.addDecoder(clazz: ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties.self) { (source: AnyObject) -> ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties()
                instance.cqDamS7damDamchangeeventlistenerEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.s7dam.damchangeeventlistener.enabled"])
                return instance
            }


            // Decoder for [ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo].self) { (source: AnyObject) -> [ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo] in
                return Decoders.decode(clazz: [ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo].self, source: source)
            }
            // Decoder for ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo
            Decoders.addDecoder(clazz: ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo.self) { (source: AnyObject) -> ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties].self) { (source: AnyObject) -> [ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties] in
                return Decoders.decode(clazz: [ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties].self, source: source)
            }
            // Decoder for ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties
            Decoders.addDecoder(clazz: ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties.self) { (source: AnyObject) -> ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties()
                instance.slingServletPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.paths"])
                instance.slingServletMethods = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.methods"])
                return instance
            }


            // Decoder for [ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo].self) { (source: AnyObject) -> [ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo] in
                return Decoders.decode(clazz: [ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo].self, source: source)
            }
            // Decoder for ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo
            Decoders.addDecoder(clazz: ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo.self) { (source: AnyObject) -> ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties].self) { (source: AnyObject) -> [ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties] in
                return Decoders.decode(clazz: [ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties].self, source: source)
            }
            // Decoder for ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties
            Decoders.addDecoder(clazz: ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties.self) { (source: AnyObject) -> ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties()
                instance.cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name"])
                instance.cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name"])
                instance.cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name"])
                instance.cqDamS7damVideoproxyclientserviceHttpReadtimeoutName = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name"])
                instance.cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name"])
                instance.cqDamS7damVideoproxyclientserviceHttpMaxretrycountName = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name"])
                instance.cqDamS7damVideoproxyclientserviceUploadprogressIntervalName = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name"])
                return instance
            }


            // Decoder for [ComDayCqDamScene7ImplScene7APIClientImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7APIClientImplInfo].self) { (source: AnyObject) -> [ComDayCqDamScene7ImplScene7APIClientImplInfo] in
                return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7APIClientImplInfo].self, source: source)
            }
            // Decoder for ComDayCqDamScene7ImplScene7APIClientImplInfo
            Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7APIClientImplInfo.self) { (source: AnyObject) -> ComDayCqDamScene7ImplScene7APIClientImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamScene7ImplScene7APIClientImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamScene7ImplScene7APIClientImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamScene7ImplScene7APIClientImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7APIClientImplProperties].self) { (source: AnyObject) -> [ComDayCqDamScene7ImplScene7APIClientImplProperties] in
                return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7APIClientImplProperties].self, source: source)
            }
            // Decoder for ComDayCqDamScene7ImplScene7APIClientImplProperties
            Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7APIClientImplProperties.self) { (source: AnyObject) -> ComDayCqDamScene7ImplScene7APIClientImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamScene7ImplScene7APIClientImplProperties()
                instance.cqDamScene7ApiclientRecordsperpageNofilterName = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.scene7.apiclient.recordsperpage.nofilter.name"])
                instance.cqDamScene7ApiclientRecordsperpageWithfilterName = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.scene7.apiclient.recordsperpage.withfilter.name"])
                return instance
            }


            // Decoder for [ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo].self) { (source: AnyObject) -> [ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo] in
                return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo].self, source: source)
            }
            // Decoder for ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo
            Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo.self) { (source: AnyObject) -> ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties].self) { (source: AnyObject) -> [ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties] in
                return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties].self, source: source)
            }
            // Decoder for ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties
            Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties.self) { (source: AnyObject) -> ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties()
                instance.cqDamScene7AssetmimetypeserviceMapping = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.dam.scene7.assetmimetypeservice.mapping"])
                return instance
            }


            // Decoder for [ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo].self) { (source: AnyObject) -> [ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo] in
                return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo].self, source: source)
            }
            // Decoder for ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo
            Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo.self) { (source: AnyObject) -> ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties].self) { (source: AnyObject) -> [ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties] in
                return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties].self, source: source)
            }
            // Decoder for ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties
            Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties.self) { (source: AnyObject) -> ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties()
                instance.cqDamScene7ConfigurationeventlistenerEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.scene7.configurationeventlistener.enabled"])
                return instance
            }


            // Decoder for [ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo].self) { (source: AnyObject) -> [ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo] in
                return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo].self, source: source)
            }
            // Decoder for ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo
            Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo.self) { (source: AnyObject) -> ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties].self) { (source: AnyObject) -> [ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties] in
                return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties].self, source: source)
            }
            // Decoder for ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties
            Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties.self) { (source: AnyObject) -> ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties()
                instance.cqDamScene7DamchangeeventlistenerEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.dam.scene7.damchangeeventlistener.enabled"])
                instance.cqDamScene7DamchangeeventlistenerObservedPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.dam.scene7.damchangeeventlistener.observed.paths"])
                return instance
            }


            // Decoder for [ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo].self) { (source: AnyObject) -> [ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo] in
                return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo].self, source: source)
            }
            // Decoder for ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo
            Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo.self) { (source: AnyObject) -> ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties].self) { (source: AnyObject) -> [ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties] in
                return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties].self, source: source)
            }
            // Decoder for ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties
            Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties.self) { (source: AnyObject) -> ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties()
                instance.scene7FlashTemplatesRti = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scene7FlashTemplates.rti"])
                instance.scene7FlashTemplatesRsi = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scene7FlashTemplates.rsi"])
                instance.scene7FlashTemplatesRb = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scene7FlashTemplates.rb"])
                instance.scene7FlashTemplatesRurl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scene7FlashTemplates.rurl"])
                instance.scene7FlashTemplateUrlFormatParameter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scene7FlashTemplate.urlFormatParameter"])
                return instance
            }


            // Decoder for [ComDayCqDamScene7ImplScene7UploadServiceImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7UploadServiceImplInfo].self) { (source: AnyObject) -> [ComDayCqDamScene7ImplScene7UploadServiceImplInfo] in
                return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7UploadServiceImplInfo].self, source: source)
            }
            // Decoder for ComDayCqDamScene7ImplScene7UploadServiceImplInfo
            Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7UploadServiceImplInfo.self) { (source: AnyObject) -> ComDayCqDamScene7ImplScene7UploadServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamScene7ImplScene7UploadServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamScene7ImplScene7UploadServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamScene7ImplScene7UploadServiceImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamScene7ImplScene7UploadServiceImplProperties].self) { (source: AnyObject) -> [ComDayCqDamScene7ImplScene7UploadServiceImplProperties] in
                return Decoders.decode(clazz: [ComDayCqDamScene7ImplScene7UploadServiceImplProperties].self, source: source)
            }
            // Decoder for ComDayCqDamScene7ImplScene7UploadServiceImplProperties
            Decoders.addDecoder(clazz: ComDayCqDamScene7ImplScene7UploadServiceImplProperties.self) { (source: AnyObject) -> ComDayCqDamScene7ImplScene7UploadServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamScene7ImplScene7UploadServiceImplProperties()
                instance.cqDamScene7UploadserviceActivejobtimeoutLabel = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.scene7.uploadservice.activejobtimeout.label"])
                instance.cqDamScene7UploadserviceConnectionmaxperrouteLabel = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.dam.scene7.uploadservice.connectionmaxperroute.label"])
                return instance
            }


            // Decoder for [ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo].self) { (source: AnyObject) -> [ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo] in
                return Decoders.decode(clazz: [ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo].self, source: source)
            }
            // Decoder for ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo
            Decoders.addDecoder(clazz: ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo.self) { (source: AnyObject) -> ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties].self) { (source: AnyObject) -> [ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties] in
                return Decoders.decode(clazz: [ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties].self, source: source)
            }
            // Decoder for ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties
            Decoders.addDecoder(clazz: ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties.self) { (source: AnyObject) -> ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties()
                instance.getCacheExpirationUnit = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["getCacheExpirationUnit"])
                instance.getCacheExpirationValue = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["getCacheExpirationValue"])
                return instance
            }


            // Decoder for [ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo].self) { (source: AnyObject) -> [ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo] in
                return Decoders.decode(clazz: [ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo].self, source: source)
            }
            // Decoder for ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo
            Decoders.addDecoder(clazz: ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo.self) { (source: AnyObject) -> ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties].self) { (source: AnyObject) -> [ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties] in
                return Decoders.decode(clazz: [ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties].self, source: source)
            }
            // Decoder for ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties
            Decoders.addDecoder(clazz: ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties.self) { (source: AnyObject) -> ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.locale = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["locale"])
                instance.imsConfig = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["imsConfig"])
                return instance
            }


            // Decoder for [ComDayCqDamVideoImplServletVideoTestServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqDamVideoImplServletVideoTestServletInfo].self) { (source: AnyObject) -> [ComDayCqDamVideoImplServletVideoTestServletInfo] in
                return Decoders.decode(clazz: [ComDayCqDamVideoImplServletVideoTestServletInfo].self, source: source)
            }
            // Decoder for ComDayCqDamVideoImplServletVideoTestServletInfo
            Decoders.addDecoder(clazz: ComDayCqDamVideoImplServletVideoTestServletInfo.self) { (source: AnyObject) -> ComDayCqDamVideoImplServletVideoTestServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamVideoImplServletVideoTestServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqDamVideoImplServletVideoTestServletProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqDamVideoImplServletVideoTestServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqDamVideoImplServletVideoTestServletProperties].self) { (source: AnyObject) -> [ComDayCqDamVideoImplServletVideoTestServletProperties] in
                return Decoders.decode(clazz: [ComDayCqDamVideoImplServletVideoTestServletProperties].self, source: source)
            }
            // Decoder for ComDayCqDamVideoImplServletVideoTestServletProperties
            Decoders.addDecoder(clazz: ComDayCqDamVideoImplServletVideoTestServletProperties.self) { (source: AnyObject) -> ComDayCqDamVideoImplServletVideoTestServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqDamVideoImplServletVideoTestServletProperties()
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                return instance
            }


            // Decoder for [ComDayCqExtwidgetServletsImageSpriteServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqExtwidgetServletsImageSpriteServletInfo].self) { (source: AnyObject) -> [ComDayCqExtwidgetServletsImageSpriteServletInfo] in
                return Decoders.decode(clazz: [ComDayCqExtwidgetServletsImageSpriteServletInfo].self, source: source)
            }
            // Decoder for ComDayCqExtwidgetServletsImageSpriteServletInfo
            Decoders.addDecoder(clazz: ComDayCqExtwidgetServletsImageSpriteServletInfo.self) { (source: AnyObject) -> ComDayCqExtwidgetServletsImageSpriteServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqExtwidgetServletsImageSpriteServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqExtwidgetServletsImageSpriteServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqExtwidgetServletsImageSpriteServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqExtwidgetServletsImageSpriteServletProperties].self) { (source: AnyObject) -> [ComDayCqExtwidgetServletsImageSpriteServletProperties] in
                return Decoders.decode(clazz: [ComDayCqExtwidgetServletsImageSpriteServletProperties].self, source: source)
            }
            // Decoder for ComDayCqExtwidgetServletsImageSpriteServletProperties
            Decoders.addDecoder(clazz: ComDayCqExtwidgetServletsImageSpriteServletProperties.self) { (source: AnyObject) -> ComDayCqExtwidgetServletsImageSpriteServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqExtwidgetServletsImageSpriteServletProperties()
                instance.maxWidth = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxWidth"])
                instance.maxHeight = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxHeight"])
                return instance
            }


            // Decoder for [ComDayCqImageInternalFontFontHelperInfo]
            Decoders.addDecoder(clazz: [ComDayCqImageInternalFontFontHelperInfo].self) { (source: AnyObject) -> [ComDayCqImageInternalFontFontHelperInfo] in
                return Decoders.decode(clazz: [ComDayCqImageInternalFontFontHelperInfo].self, source: source)
            }
            // Decoder for ComDayCqImageInternalFontFontHelperInfo
            Decoders.addDecoder(clazz: ComDayCqImageInternalFontFontHelperInfo.self) { (source: AnyObject) -> ComDayCqImageInternalFontFontHelperInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqImageInternalFontFontHelperInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqImageInternalFontFontHelperProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqImageInternalFontFontHelperProperties]
            Decoders.addDecoder(clazz: [ComDayCqImageInternalFontFontHelperProperties].self) { (source: AnyObject) -> [ComDayCqImageInternalFontFontHelperProperties] in
                return Decoders.decode(clazz: [ComDayCqImageInternalFontFontHelperProperties].self, source: source)
            }
            // Decoder for ComDayCqImageInternalFontFontHelperProperties
            Decoders.addDecoder(clazz: ComDayCqImageInternalFontFontHelperProperties.self) { (source: AnyObject) -> ComDayCqImageInternalFontFontHelperProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqImageInternalFontFontHelperProperties()
                instance.fontpath = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fontpath"])
                instance.oversamplingFactor = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["oversamplingFactor"])
                return instance
            }


            // Decoder for [ComDayCqJcrclustersupportClusterStartLevelControllerInfo]
            Decoders.addDecoder(clazz: [ComDayCqJcrclustersupportClusterStartLevelControllerInfo].self) { (source: AnyObject) -> [ComDayCqJcrclustersupportClusterStartLevelControllerInfo] in
                return Decoders.decode(clazz: [ComDayCqJcrclustersupportClusterStartLevelControllerInfo].self, source: source)
            }
            // Decoder for ComDayCqJcrclustersupportClusterStartLevelControllerInfo
            Decoders.addDecoder(clazz: ComDayCqJcrclustersupportClusterStartLevelControllerInfo.self) { (source: AnyObject) -> ComDayCqJcrclustersupportClusterStartLevelControllerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqJcrclustersupportClusterStartLevelControllerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqJcrclustersupportClusterStartLevelControllerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqJcrclustersupportClusterStartLevelControllerProperties]
            Decoders.addDecoder(clazz: [ComDayCqJcrclustersupportClusterStartLevelControllerProperties].self) { (source: AnyObject) -> [ComDayCqJcrclustersupportClusterStartLevelControllerProperties] in
                return Decoders.decode(clazz: [ComDayCqJcrclustersupportClusterStartLevelControllerProperties].self, source: source)
            }
            // Decoder for ComDayCqJcrclustersupportClusterStartLevelControllerProperties
            Decoders.addDecoder(clazz: ComDayCqJcrclustersupportClusterStartLevelControllerProperties.self) { (source: AnyObject) -> ComDayCqJcrclustersupportClusterStartLevelControllerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqJcrclustersupportClusterStartLevelControllerProperties()
                instance.clusterLevelEnable = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cluster.level.enable"])
                instance.clusterMasterLevel = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.master.level"])
                instance.clusterSlaveLevel = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cluster.slave.level"])
                return instance
            }


            // Decoder for [ComDayCqMailerDefaultMailServiceInfo]
            Decoders.addDecoder(clazz: [ComDayCqMailerDefaultMailServiceInfo].self) { (source: AnyObject) -> [ComDayCqMailerDefaultMailServiceInfo] in
                return Decoders.decode(clazz: [ComDayCqMailerDefaultMailServiceInfo].self, source: source)
            }
            // Decoder for ComDayCqMailerDefaultMailServiceInfo
            Decoders.addDecoder(clazz: ComDayCqMailerDefaultMailServiceInfo.self) { (source: AnyObject) -> ComDayCqMailerDefaultMailServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMailerDefaultMailServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqMailerDefaultMailServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqMailerDefaultMailServiceProperties]
            Decoders.addDecoder(clazz: [ComDayCqMailerDefaultMailServiceProperties].self) { (source: AnyObject) -> [ComDayCqMailerDefaultMailServiceProperties] in
                return Decoders.decode(clazz: [ComDayCqMailerDefaultMailServiceProperties].self, source: source)
            }
            // Decoder for ComDayCqMailerDefaultMailServiceProperties
            Decoders.addDecoder(clazz: ComDayCqMailerDefaultMailServiceProperties.self) { (source: AnyObject) -> ComDayCqMailerDefaultMailServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMailerDefaultMailServiceProperties()
                instance.smtpHost = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["smtp.host"])
                instance.smtpPort = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["smtp.port"])
                instance.smtpUser = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["smtp.user"])
                instance.smtpPassword = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["smtp.password"])
                instance.fromAddress = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["from.address"])
                instance.smtpSsl = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["smtp.ssl"])
                instance.smtpStarttls = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["smtp.starttls"])
                instance.debugEmail = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["debug.email"])
                return instance
            }


            // Decoder for [ComDayCqMailerImplCqMailingServiceInfo]
            Decoders.addDecoder(clazz: [ComDayCqMailerImplCqMailingServiceInfo].self) { (source: AnyObject) -> [ComDayCqMailerImplCqMailingServiceInfo] in
                return Decoders.decode(clazz: [ComDayCqMailerImplCqMailingServiceInfo].self, source: source)
            }
            // Decoder for ComDayCqMailerImplCqMailingServiceInfo
            Decoders.addDecoder(clazz: ComDayCqMailerImplCqMailingServiceInfo.self) { (source: AnyObject) -> ComDayCqMailerImplCqMailingServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMailerImplCqMailingServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqMailerImplCqMailingServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqMailerImplCqMailingServiceProperties]
            Decoders.addDecoder(clazz: [ComDayCqMailerImplCqMailingServiceProperties].self) { (source: AnyObject) -> [ComDayCqMailerImplCqMailingServiceProperties] in
                return Decoders.decode(clazz: [ComDayCqMailerImplCqMailingServiceProperties].self, source: source)
            }
            // Decoder for ComDayCqMailerImplCqMailingServiceProperties
            Decoders.addDecoder(clazz: ComDayCqMailerImplCqMailingServiceProperties.self) { (source: AnyObject) -> ComDayCqMailerImplCqMailingServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMailerImplCqMailingServiceProperties()
                instance.maxRecipientCount = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["max.recipient.count"])
                return instance
            }


            // Decoder for [ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo]
            Decoders.addDecoder(clazz: [ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo].self) { (source: AnyObject) -> [ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo] in
                return Decoders.decode(clazz: [ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo].self, source: source)
            }
            // Decoder for ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo
            Decoders.addDecoder(clazz: ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo.self) { (source: AnyObject) -> ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties]
            Decoders.addDecoder(clazz: [ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties].self) { (source: AnyObject) -> [ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties] in
                return Decoders.decode(clazz: [ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties].self, source: source)
            }
            // Decoder for ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties
            Decoders.addDecoder(clazz: ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties.self) { (source: AnyObject) -> ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties()
                instance.mailerEmailCharset = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["mailer.email.charset"])
                return instance
            }


            // Decoder for [ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo]
            Decoders.addDecoder(clazz: [ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo].self) { (source: AnyObject) -> [ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo] in
                return Decoders.decode(clazz: [ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo].self, source: source)
            }
            // Decoder for ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo
            Decoders.addDecoder(clazz: ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo.self) { (source: AnyObject) -> ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties]
            Decoders.addDecoder(clazz: [ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties].self) { (source: AnyObject) -> [ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties] in
                return Decoders.decode(clazz: [ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties].self, source: source)
            }
            // Decoder for ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties
            Decoders.addDecoder(clazz: ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties.self) { (source: AnyObject) -> ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties()
                instance.mailerEmailEmbed = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["mailer.email.embed"])
                instance.mailerEmailCharset = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["mailer.email.charset"])
                instance.mailerEmailRetrieverUserID = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["mailer.email.retrieverUserID"])
                instance.mailerEmailRetrieverUserPWD = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["mailer.email.retrieverUserPWD"])
                return instance
            }


            // Decoder for [ComDayCqMcmCampaignImplIntegrationConfigImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqMcmCampaignImplIntegrationConfigImplInfo].self) { (source: AnyObject) -> [ComDayCqMcmCampaignImplIntegrationConfigImplInfo] in
                return Decoders.decode(clazz: [ComDayCqMcmCampaignImplIntegrationConfigImplInfo].self, source: source)
            }
            // Decoder for ComDayCqMcmCampaignImplIntegrationConfigImplInfo
            Decoders.addDecoder(clazz: ComDayCqMcmCampaignImplIntegrationConfigImplInfo.self) { (source: AnyObject) -> ComDayCqMcmCampaignImplIntegrationConfigImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMcmCampaignImplIntegrationConfigImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqMcmCampaignImplIntegrationConfigImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqMcmCampaignImplIntegrationConfigImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqMcmCampaignImplIntegrationConfigImplProperties].self) { (source: AnyObject) -> [ComDayCqMcmCampaignImplIntegrationConfigImplProperties] in
                return Decoders.decode(clazz: [ComDayCqMcmCampaignImplIntegrationConfigImplProperties].self, source: source)
            }
            // Decoder for ComDayCqMcmCampaignImplIntegrationConfigImplProperties
            Decoders.addDecoder(clazz: ComDayCqMcmCampaignImplIntegrationConfigImplProperties.self) { (source: AnyObject) -> ComDayCqMcmCampaignImplIntegrationConfigImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMcmCampaignImplIntegrationConfigImplProperties()
                instance.aemMcmCampaignFormConstraints = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["aem.mcm.campaign.formConstraints"])
                instance.aemMcmCampaignPublicUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["aem.mcm.campaign.publicUrl"])
                instance.aemMcmCampaignRelaxedSSL = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["aem.mcm.campaign.relaxedSSL"])
                return instance
            }


            // Decoder for [ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo]
            Decoders.addDecoder(clazz: [ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo].self) { (source: AnyObject) -> [ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo] in
                return Decoders.decode(clazz: [ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo].self, source: source)
            }
            // Decoder for ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo
            Decoders.addDecoder(clazz: ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo.self) { (source: AnyObject) -> ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties]
            Decoders.addDecoder(clazz: [ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties].self) { (source: AnyObject) -> [ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties] in
                return Decoders.decode(clazz: [ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties].self, source: source)
            }
            // Decoder for ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties
            Decoders.addDecoder(clazz: ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties.self) { (source: AnyObject) -> ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                return instance
            }


            // Decoder for [ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo].self) { (source: AnyObject) -> [ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo] in
                return Decoders.decode(clazz: [ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo].self, source: source)
            }
            // Decoder for ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo
            Decoders.addDecoder(clazz: ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo.self) { (source: AnyObject) -> ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties].self) { (source: AnyObject) -> [ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties] in
                return Decoders.decode(clazz: [ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties].self, source: source)
            }
            // Decoder for ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties
            Decoders.addDecoder(clazz: ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties.self) { (source: AnyObject) -> ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties()
                instance.fromAddress = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["from.address"])
                instance.senderHost = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sender.host"])
                instance.maxBounceCount = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["max.bounce.count"])
                return instance
            }


            // Decoder for [ComDayCqMcmImplMCMConfigurationInfo]
            Decoders.addDecoder(clazz: [ComDayCqMcmImplMCMConfigurationInfo].self) { (source: AnyObject) -> [ComDayCqMcmImplMCMConfigurationInfo] in
                return Decoders.decode(clazz: [ComDayCqMcmImplMCMConfigurationInfo].self, source: source)
            }
            // Decoder for ComDayCqMcmImplMCMConfigurationInfo
            Decoders.addDecoder(clazz: ComDayCqMcmImplMCMConfigurationInfo.self) { (source: AnyObject) -> ComDayCqMcmImplMCMConfigurationInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMcmImplMCMConfigurationInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqMcmImplMCMConfigurationProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqMcmImplMCMConfigurationProperties]
            Decoders.addDecoder(clazz: [ComDayCqMcmImplMCMConfigurationProperties].self) { (source: AnyObject) -> [ComDayCqMcmImplMCMConfigurationProperties] in
                return Decoders.decode(clazz: [ComDayCqMcmImplMCMConfigurationProperties].self, source: source)
            }
            // Decoder for ComDayCqMcmImplMCMConfigurationProperties
            Decoders.addDecoder(clazz: ComDayCqMcmImplMCMConfigurationProperties.self) { (source: AnyObject) -> ComDayCqMcmImplMCMConfigurationProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMcmImplMCMConfigurationProperties()
                instance.experienceIndirection = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["experience.indirection"])
                instance.touchpointIndirection = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["touchpoint.indirection"])
                return instance
            }


            // Decoder for [ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo]
            Decoders.addDecoder(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo].self) { (source: AnyObject) -> [ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo] in
                return Decoders.decode(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo].self, source: source)
            }
            // Decoder for ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo
            Decoders.addDecoder(clazz: ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo.self) { (source: AnyObject) -> ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties]
            Decoders.addDecoder(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties].self) { (source: AnyObject) -> [ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties] in
                return Decoders.decode(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties].self, source: source)
            }
            // Decoder for ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties
            Decoders.addDecoder(clazz: ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties.self) { (source: AnyObject) -> ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                instance.componentResourceType = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["component.resourceType"])
                return instance
            }


            // Decoder for [ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo]
            Decoders.addDecoder(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo].self) { (source: AnyObject) -> [ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo] in
                return Decoders.decode(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo].self, source: source)
            }
            // Decoder for ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo
            Decoders.addDecoder(clazz: ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo.self) { (source: AnyObject) -> ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties]
            Decoders.addDecoder(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties].self) { (source: AnyObject) -> [ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties] in
                return Decoders.decode(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties].self, source: source)
            }
            // Decoder for ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties
            Decoders.addDecoder(clazz: ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties.self) { (source: AnyObject) -> ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                instance.componentResourceType = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["component.resourceType"])
                return instance
            }


            // Decoder for [ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo]
            Decoders.addDecoder(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo].self) { (source: AnyObject) -> [ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo] in
                return Decoders.decode(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo].self, source: source)
            }
            // Decoder for ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo
            Decoders.addDecoder(clazz: ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo.self) { (source: AnyObject) -> ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentProperties]
            Decoders.addDecoder(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentProperties].self) { (source: AnyObject) -> [ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentProperties] in
                return Decoders.decode(clazz: [ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentProperties].self, source: source)
            }
            // Decoder for ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentProperties
            Decoders.addDecoder(clazz: ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentProperties.self) { (source: AnyObject) -> ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                return instance
            }


            // Decoder for [ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo]
            Decoders.addDecoder(clazz: [ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo].self) { (source: AnyObject) -> [ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo] in
                return Decoders.decode(clazz: [ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo].self, source: source)
            }
            // Decoder for ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo
            Decoders.addDecoder(clazz: ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo.self) { (source: AnyObject) -> ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties]
            Decoders.addDecoder(clazz: [ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties].self) { (source: AnyObject) -> [ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties] in
                return Decoders.decode(clazz: [ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties].self, source: source)
            }
            // Decoder for ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties
            Decoders.addDecoder(clazz: ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties.self) { (source: AnyObject) -> ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                return instance
            }


            // Decoder for [ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo]
            Decoders.addDecoder(clazz: [ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo].self) { (source: AnyObject) -> [ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo] in
                return Decoders.decode(clazz: [ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo].self, source: source)
            }
            // Decoder for ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo
            Decoders.addDecoder(clazz: ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo.self) { (source: AnyObject) -> ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties]
            Decoders.addDecoder(clazz: [ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties].self) { (source: AnyObject) -> [ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties] in
                return Decoders.decode(clazz: [ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties].self, source: source)
            }
            // Decoder for ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties
            Decoders.addDecoder(clazz: ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties.self) { (source: AnyObject) -> ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                instance.componentResourceType = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["component.resourceType"])
                return instance
            }


            // Decoder for [ComDayCqNotificationImplNotificationServiceImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqNotificationImplNotificationServiceImplInfo].self) { (source: AnyObject) -> [ComDayCqNotificationImplNotificationServiceImplInfo] in
                return Decoders.decode(clazz: [ComDayCqNotificationImplNotificationServiceImplInfo].self, source: source)
            }
            // Decoder for ComDayCqNotificationImplNotificationServiceImplInfo
            Decoders.addDecoder(clazz: ComDayCqNotificationImplNotificationServiceImplInfo.self) { (source: AnyObject) -> ComDayCqNotificationImplNotificationServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqNotificationImplNotificationServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqNotificationImplNotificationServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqNotificationImplNotificationServiceImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqNotificationImplNotificationServiceImplProperties].self) { (source: AnyObject) -> [ComDayCqNotificationImplNotificationServiceImplProperties] in
                return Decoders.decode(clazz: [ComDayCqNotificationImplNotificationServiceImplProperties].self, source: source)
            }
            // Decoder for ComDayCqNotificationImplNotificationServiceImplProperties
            Decoders.addDecoder(clazz: ComDayCqNotificationImplNotificationServiceImplProperties.self) { (source: AnyObject) -> ComDayCqNotificationImplNotificationServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqNotificationImplNotificationServiceImplProperties()
                instance.eventFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"])
                return instance
            }


            // Decoder for [ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo].self) { (source: AnyObject) -> [ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo] in
                return Decoders.decode(clazz: [ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo].self, source: source)
            }
            // Decoder for ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo
            Decoders.addDecoder(clazz: ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo.self) { (source: AnyObject) -> ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties].self) { (source: AnyObject) -> [ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties] in
                return Decoders.decode(clazz: [ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties].self, source: source)
            }
            // Decoder for ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties
            Decoders.addDecoder(clazz: ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties.self) { (source: AnyObject) -> ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties()
                instance.forcelocation = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["forcelocation"])
                return instance
            }


            // Decoder for [ComDayCqPollingImporterImplManagedPollConfigImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqPollingImporterImplManagedPollConfigImplInfo].self) { (source: AnyObject) -> [ComDayCqPollingImporterImplManagedPollConfigImplInfo] in
                return Decoders.decode(clazz: [ComDayCqPollingImporterImplManagedPollConfigImplInfo].self, source: source)
            }
            // Decoder for ComDayCqPollingImporterImplManagedPollConfigImplInfo
            Decoders.addDecoder(clazz: ComDayCqPollingImporterImplManagedPollConfigImplInfo.self) { (source: AnyObject) -> ComDayCqPollingImporterImplManagedPollConfigImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqPollingImporterImplManagedPollConfigImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqPollingImporterImplManagedPollConfigImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqPollingImporterImplManagedPollConfigImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqPollingImporterImplManagedPollConfigImplProperties].self) { (source: AnyObject) -> [ComDayCqPollingImporterImplManagedPollConfigImplProperties] in
                return Decoders.decode(clazz: [ComDayCqPollingImporterImplManagedPollConfigImplProperties].self, source: source)
            }
            // Decoder for ComDayCqPollingImporterImplManagedPollConfigImplProperties
            Decoders.addDecoder(clazz: ComDayCqPollingImporterImplManagedPollConfigImplProperties.self) { (source: AnyObject) -> ComDayCqPollingImporterImplManagedPollConfigImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqPollingImporterImplManagedPollConfigImplProperties()
                instance.id = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["id"])
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                instance.reference = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["reference"])
                instance.interval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["interval"])
                instance.expression = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["expression"])
                instance.source = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["source"])
                instance.target = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["target"])
                instance.login = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["login"])
                instance.password = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["password"])
                return instance
            }


            // Decoder for [ComDayCqPollingImporterImplManagedPollingImporterImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqPollingImporterImplManagedPollingImporterImplInfo].self) { (source: AnyObject) -> [ComDayCqPollingImporterImplManagedPollingImporterImplInfo] in
                return Decoders.decode(clazz: [ComDayCqPollingImporterImplManagedPollingImporterImplInfo].self, source: source)
            }
            // Decoder for ComDayCqPollingImporterImplManagedPollingImporterImplInfo
            Decoders.addDecoder(clazz: ComDayCqPollingImporterImplManagedPollingImporterImplInfo.self) { (source: AnyObject) -> ComDayCqPollingImporterImplManagedPollingImporterImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqPollingImporterImplManagedPollingImporterImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqPollingImporterImplManagedPollingImporterImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqPollingImporterImplManagedPollingImporterImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqPollingImporterImplManagedPollingImporterImplProperties].self) { (source: AnyObject) -> [ComDayCqPollingImporterImplManagedPollingImporterImplProperties] in
                return Decoders.decode(clazz: [ComDayCqPollingImporterImplManagedPollingImporterImplProperties].self, source: source)
            }
            // Decoder for ComDayCqPollingImporterImplManagedPollingImporterImplProperties
            Decoders.addDecoder(clazz: ComDayCqPollingImporterImplManagedPollingImporterImplProperties.self) { (source: AnyObject) -> ComDayCqPollingImporterImplManagedPollingImporterImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqPollingImporterImplManagedPollingImporterImplProperties()
                instance.importerUser = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["importer.user"])
                return instance
            }


            // Decoder for [ComDayCqPollingImporterImplPollingImporterImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqPollingImporterImplPollingImporterImplInfo].self) { (source: AnyObject) -> [ComDayCqPollingImporterImplPollingImporterImplInfo] in
                return Decoders.decode(clazz: [ComDayCqPollingImporterImplPollingImporterImplInfo].self, source: source)
            }
            // Decoder for ComDayCqPollingImporterImplPollingImporterImplInfo
            Decoders.addDecoder(clazz: ComDayCqPollingImporterImplPollingImporterImplInfo.self) { (source: AnyObject) -> ComDayCqPollingImporterImplPollingImporterImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqPollingImporterImplPollingImporterImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqPollingImporterImplPollingImporterImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqPollingImporterImplPollingImporterImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqPollingImporterImplPollingImporterImplProperties].self) { (source: AnyObject) -> [ComDayCqPollingImporterImplPollingImporterImplProperties] in
                return Decoders.decode(clazz: [ComDayCqPollingImporterImplPollingImporterImplProperties].self, source: source)
            }
            // Decoder for ComDayCqPollingImporterImplPollingImporterImplProperties
            Decoders.addDecoder(clazz: ComDayCqPollingImporterImplPollingImporterImplProperties.self) { (source: AnyObject) -> ComDayCqPollingImporterImplPollingImporterImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqPollingImporterImplPollingImporterImplProperties()
                instance.importerMinInterval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["importer.min.interval"])
                instance.importerUser = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["importer.user"])
                instance.excludePaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["exclude.paths"])
                instance.includePaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["include.paths"])
                return instance
            }


            // Decoder for [ComDayCqReplicationAuditReplicationEventListenerInfo]
            Decoders.addDecoder(clazz: [ComDayCqReplicationAuditReplicationEventListenerInfo].self) { (source: AnyObject) -> [ComDayCqReplicationAuditReplicationEventListenerInfo] in
                return Decoders.decode(clazz: [ComDayCqReplicationAuditReplicationEventListenerInfo].self, source: source)
            }
            // Decoder for ComDayCqReplicationAuditReplicationEventListenerInfo
            Decoders.addDecoder(clazz: ComDayCqReplicationAuditReplicationEventListenerInfo.self) { (source: AnyObject) -> ComDayCqReplicationAuditReplicationEventListenerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationAuditReplicationEventListenerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqReplicationAuditReplicationEventListenerProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqReplicationAuditReplicationEventListenerProperties]
            Decoders.addDecoder(clazz: [ComDayCqReplicationAuditReplicationEventListenerProperties].self) { (source: AnyObject) -> [ComDayCqReplicationAuditReplicationEventListenerProperties] in
                return Decoders.decode(clazz: [ComDayCqReplicationAuditReplicationEventListenerProperties].self, source: source)
            }
            // Decoder for ComDayCqReplicationAuditReplicationEventListenerProperties
            Decoders.addDecoder(clazz: ComDayCqReplicationAuditReplicationEventListenerProperties.self) { (source: AnyObject) -> ComDayCqReplicationAuditReplicationEventListenerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationAuditReplicationEventListenerProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                return instance
            }


            // Decoder for [ComDayCqReplicationContentStaticContentBuilderInfo]
            Decoders.addDecoder(clazz: [ComDayCqReplicationContentStaticContentBuilderInfo].self) { (source: AnyObject) -> [ComDayCqReplicationContentStaticContentBuilderInfo] in
                return Decoders.decode(clazz: [ComDayCqReplicationContentStaticContentBuilderInfo].self, source: source)
            }
            // Decoder for ComDayCqReplicationContentStaticContentBuilderInfo
            Decoders.addDecoder(clazz: ComDayCqReplicationContentStaticContentBuilderInfo.self) { (source: AnyObject) -> ComDayCqReplicationContentStaticContentBuilderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationContentStaticContentBuilderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqReplicationContentStaticContentBuilderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqReplicationContentStaticContentBuilderProperties]
            Decoders.addDecoder(clazz: [ComDayCqReplicationContentStaticContentBuilderProperties].self) { (source: AnyObject) -> [ComDayCqReplicationContentStaticContentBuilderProperties] in
                return Decoders.decode(clazz: [ComDayCqReplicationContentStaticContentBuilderProperties].self, source: source)
            }
            // Decoder for ComDayCqReplicationContentStaticContentBuilderProperties
            Decoders.addDecoder(clazz: ComDayCqReplicationContentStaticContentBuilderProperties.self) { (source: AnyObject) -> ComDayCqReplicationContentStaticContentBuilderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationContentStaticContentBuilderProperties()
                instance.host = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["host"])
                instance.port = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["port"])
                return instance
            }


            // Decoder for [ComDayCqReplicationImplAgentManagerImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqReplicationImplAgentManagerImplInfo].self) { (source: AnyObject) -> [ComDayCqReplicationImplAgentManagerImplInfo] in
                return Decoders.decode(clazz: [ComDayCqReplicationImplAgentManagerImplInfo].self, source: source)
            }
            // Decoder for ComDayCqReplicationImplAgentManagerImplInfo
            Decoders.addDecoder(clazz: ComDayCqReplicationImplAgentManagerImplInfo.self) { (source: AnyObject) -> ComDayCqReplicationImplAgentManagerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationImplAgentManagerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqReplicationImplAgentManagerImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqReplicationImplAgentManagerImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqReplicationImplAgentManagerImplProperties].self) { (source: AnyObject) -> [ComDayCqReplicationImplAgentManagerImplProperties] in
                return Decoders.decode(clazz: [ComDayCqReplicationImplAgentManagerImplProperties].self, source: source)
            }
            // Decoder for ComDayCqReplicationImplAgentManagerImplProperties
            Decoders.addDecoder(clazz: ComDayCqReplicationImplAgentManagerImplProperties.self) { (source: AnyObject) -> ComDayCqReplicationImplAgentManagerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationImplAgentManagerImplProperties()
                instance.jobTopics = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["job.topics"])
                instance.serviceUserTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceUser.target"])
                instance.agentProviderTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["agentProvider.target"])
                return instance
            }


            // Decoder for [ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo]
            Decoders.addDecoder(clazz: [ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo].self) { (source: AnyObject) -> [ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo] in
                return Decoders.decode(clazz: [ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo].self, source: source)
            }
            // Decoder for ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo
            Decoders.addDecoder(clazz: ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo.self) { (source: AnyObject) -> ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties]
            Decoders.addDecoder(clazz: [ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties].self) { (source: AnyObject) -> [ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties] in
                return Decoders.decode(clazz: [ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties].self, source: source)
            }
            // Decoder for ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties
            Decoders.addDecoder(clazz: ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties.self) { (source: AnyObject) -> ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties()
                instance.binaryThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["binary.threshold"])
                return instance
            }


            // Decoder for [ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo]
            Decoders.addDecoder(clazz: [ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo].self) { (source: AnyObject) -> [ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo] in
                return Decoders.decode(clazz: [ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo].self, source: source)
            }
            // Decoder for ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo
            Decoders.addDecoder(clazz: ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo.self) { (source: AnyObject) -> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties]
            Decoders.addDecoder(clazz: [ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties].self) { (source: AnyObject) -> [ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties] in
                return Decoders.decode(clazz: [ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties].self, source: source)
            }
            // Decoder for ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties
            Decoders.addDecoder(clazz: ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties.self) { (source: AnyObject) -> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties()
                instance.preserveHierarchyNodes = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["preserve.hierarchy.nodes"])
                instance.ignoreVersioning = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["ignore.versioning"])
                instance.importAcl = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["import.acl"])
                instance.saveThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["save.threshold"])
                instance.preserveUserPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["preserve.user.paths"])
                instance.preserveUuid = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["preserve.uuid"])
                instance.preserveUuidNodetypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["preserve.uuid.nodetypes"])
                instance.preserveUuidSubtrees = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["preserve.uuid.subtrees"])
                instance.autoCommit = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["auto.commit"])
                return instance
            }


            // Decoder for [ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo].self) { (source: AnyObject) -> [ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo] in
                return Decoders.decode(clazz: [ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo].self, source: source)
            }
            // Decoder for ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo
            Decoders.addDecoder(clazz: ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo.self) { (source: AnyObject) -> ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties].self) { (source: AnyObject) -> [ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties] in
                return Decoders.decode(clazz: [ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties].self, source: source)
            }
            // Decoder for ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties
            Decoders.addDecoder(clazz: ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties.self) { (source: AnyObject) -> ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties()
                instance.replicationContentUseFileStorage = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["replication.content.useFileStorage"])
                instance.replicationContentMaxCommitAttempts = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["replication.content.maxCommitAttempts"])
                return instance
            }


            // Decoder for [ComDayCqReplicationImplReplicationReceiverImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqReplicationImplReplicationReceiverImplInfo].self) { (source: AnyObject) -> [ComDayCqReplicationImplReplicationReceiverImplInfo] in
                return Decoders.decode(clazz: [ComDayCqReplicationImplReplicationReceiverImplInfo].self, source: source)
            }
            // Decoder for ComDayCqReplicationImplReplicationReceiverImplInfo
            Decoders.addDecoder(clazz: ComDayCqReplicationImplReplicationReceiverImplInfo.self) { (source: AnyObject) -> ComDayCqReplicationImplReplicationReceiverImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationImplReplicationReceiverImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqReplicationImplReplicationReceiverImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqReplicationImplReplicationReceiverImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqReplicationImplReplicationReceiverImplProperties].self) { (source: AnyObject) -> [ComDayCqReplicationImplReplicationReceiverImplProperties] in
                return Decoders.decode(clazz: [ComDayCqReplicationImplReplicationReceiverImplProperties].self, source: source)
            }
            // Decoder for ComDayCqReplicationImplReplicationReceiverImplProperties
            Decoders.addDecoder(clazz: ComDayCqReplicationImplReplicationReceiverImplProperties.self) { (source: AnyObject) -> ComDayCqReplicationImplReplicationReceiverImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationImplReplicationReceiverImplProperties()
                instance.receiverTmpfileThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["receiver.tmpfile.threshold"])
                instance.receiverPackagesUseInstall = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["receiver.packages.use.install"])
                return instance
            }


            // Decoder for [ComDayCqReplicationImplReplicatorImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqReplicationImplReplicatorImplInfo].self) { (source: AnyObject) -> [ComDayCqReplicationImplReplicatorImplInfo] in
                return Decoders.decode(clazz: [ComDayCqReplicationImplReplicatorImplInfo].self, source: source)
            }
            // Decoder for ComDayCqReplicationImplReplicatorImplInfo
            Decoders.addDecoder(clazz: ComDayCqReplicationImplReplicatorImplInfo.self) { (source: AnyObject) -> ComDayCqReplicationImplReplicatorImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationImplReplicatorImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqReplicationImplReplicatorImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqReplicationImplReplicatorImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqReplicationImplReplicatorImplProperties].self) { (source: AnyObject) -> [ComDayCqReplicationImplReplicatorImplProperties] in
                return Decoders.decode(clazz: [ComDayCqReplicationImplReplicatorImplProperties].self, source: source)
            }
            // Decoder for ComDayCqReplicationImplReplicatorImplProperties
            Decoders.addDecoder(clazz: ComDayCqReplicationImplReplicatorImplProperties.self) { (source: AnyObject) -> ComDayCqReplicationImplReplicatorImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationImplReplicatorImplProperties()
                instance.distributeEvents = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["distribute_events"])
                return instance
            }


            // Decoder for [ComDayCqReplicationImplReverseReplicatorInfo]
            Decoders.addDecoder(clazz: [ComDayCqReplicationImplReverseReplicatorInfo].self) { (source: AnyObject) -> [ComDayCqReplicationImplReverseReplicatorInfo] in
                return Decoders.decode(clazz: [ComDayCqReplicationImplReverseReplicatorInfo].self, source: source)
            }
            // Decoder for ComDayCqReplicationImplReverseReplicatorInfo
            Decoders.addDecoder(clazz: ComDayCqReplicationImplReverseReplicatorInfo.self) { (source: AnyObject) -> ComDayCqReplicationImplReverseReplicatorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationImplReverseReplicatorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqReplicationImplReverseReplicatorProperties.self, source: sourceDictionary["properties"])
                instance.additionalProperties = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqReplicationImplReverseReplicatorProperties]
            Decoders.addDecoder(clazz: [ComDayCqReplicationImplReverseReplicatorProperties].self) { (source: AnyObject) -> [ComDayCqReplicationImplReverseReplicatorProperties] in
                return Decoders.decode(clazz: [ComDayCqReplicationImplReverseReplicatorProperties].self, source: source)
            }
            // Decoder for ComDayCqReplicationImplReverseReplicatorProperties
            Decoders.addDecoder(clazz: ComDayCqReplicationImplReverseReplicatorProperties.self) { (source: AnyObject) -> ComDayCqReplicationImplReverseReplicatorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationImplReverseReplicatorProperties()
                instance.schedulerPeriod = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["scheduler.period"])
                return instance
            }


            // Decoder for [ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo].self) { (source: AnyObject) -> [ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo.self) { (source: AnyObject) -> ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties].self) { (source: AnyObject) -> [ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties.self) { (source: AnyObject) -> ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties()
                instance.disabledCipherSuites = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["disabled.cipher.suites"])
                instance.enabledCipherSuites = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["enabled.cipher.suites"])
                return instance
            }


            // Decoder for [ComDayCqReplicationImplTransportHttpInfo]
            Decoders.addDecoder(clazz: [ComDayCqReplicationImplTransportHttpInfo].self) { (source: AnyObject) -> [ComDayCqReplicationImplTransportHttpInfo] in
                return Decoders.decode(clazz: [ComDayCqReplicationImplTransportHttpInfo].self, source: source)
            }
            // Decoder for ComDayCqReplicationImplTransportHttpInfo
            Decoders.addDecoder(clazz: ComDayCqReplicationImplTransportHttpInfo.self) { (source: AnyObject) -> ComDayCqReplicationImplTransportHttpInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationImplTransportHttpInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqReplicationImplTransportHttpProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqReplicationImplTransportHttpProperties]
            Decoders.addDecoder(clazz: [ComDayCqReplicationImplTransportHttpProperties].self) { (source: AnyObject) -> [ComDayCqReplicationImplTransportHttpProperties] in
                return Decoders.decode(clazz: [ComDayCqReplicationImplTransportHttpProperties].self, source: source)
            }
            // Decoder for ComDayCqReplicationImplTransportHttpProperties
            Decoders.addDecoder(clazz: ComDayCqReplicationImplTransportHttpProperties.self) { (source: AnyObject) -> ComDayCqReplicationImplTransportHttpProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReplicationImplTransportHttpProperties()
                instance.disabledCipherSuites = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["disabled.cipher.suites"])
                instance.enabledCipherSuites = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["enabled.cipher.suites"])
                return instance
            }


            // Decoder for [ComDayCqReportingImplCacheCacheImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqReportingImplCacheCacheImplInfo].self) { (source: AnyObject) -> [ComDayCqReportingImplCacheCacheImplInfo] in
                return Decoders.decode(clazz: [ComDayCqReportingImplCacheCacheImplInfo].self, source: source)
            }
            // Decoder for ComDayCqReportingImplCacheCacheImplInfo
            Decoders.addDecoder(clazz: ComDayCqReportingImplCacheCacheImplInfo.self) { (source: AnyObject) -> ComDayCqReportingImplCacheCacheImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReportingImplCacheCacheImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqReportingImplCacheCacheImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqReportingImplCacheCacheImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqReportingImplCacheCacheImplProperties].self) { (source: AnyObject) -> [ComDayCqReportingImplCacheCacheImplProperties] in
                return Decoders.decode(clazz: [ComDayCqReportingImplCacheCacheImplProperties].self, source: source)
            }
            // Decoder for ComDayCqReportingImplCacheCacheImplProperties
            Decoders.addDecoder(clazz: ComDayCqReportingImplCacheCacheImplProperties.self) { (source: AnyObject) -> ComDayCqReportingImplCacheCacheImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReportingImplCacheCacheImplProperties()
                instance.repcacheEnable = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["repcache.enable"])
                instance.repcacheTtl = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["repcache.ttl"])
                instance.repcacheMax = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["repcache.max"])
                return instance
            }


            // Decoder for [ComDayCqReportingImplConfigServiceImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqReportingImplConfigServiceImplInfo].self) { (source: AnyObject) -> [ComDayCqReportingImplConfigServiceImplInfo] in
                return Decoders.decode(clazz: [ComDayCqReportingImplConfigServiceImplInfo].self, source: source)
            }
            // Decoder for ComDayCqReportingImplConfigServiceImplInfo
            Decoders.addDecoder(clazz: ComDayCqReportingImplConfigServiceImplInfo.self) { (source: AnyObject) -> ComDayCqReportingImplConfigServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReportingImplConfigServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqReportingImplConfigServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqReportingImplConfigServiceImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqReportingImplConfigServiceImplProperties].self) { (source: AnyObject) -> [ComDayCqReportingImplConfigServiceImplProperties] in
                return Decoders.decode(clazz: [ComDayCqReportingImplConfigServiceImplProperties].self, source: source)
            }
            // Decoder for ComDayCqReportingImplConfigServiceImplProperties
            Decoders.addDecoder(clazz: ComDayCqReportingImplConfigServiceImplProperties.self) { (source: AnyObject) -> ComDayCqReportingImplConfigServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReportingImplConfigServiceImplProperties()
                instance.repconfTimezone = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["repconf.timezone"])
                instance.repconfLocale = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["repconf.locale"])
                instance.repconfSnapshots = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["repconf.snapshots"])
                instance.repconfRepdir = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["repconf.repdir"])
                instance.repconfHourofday = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["repconf.hourofday"])
                instance.repconfMinofhour = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["repconf.minofhour"])
                instance.repconfMaxrows = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["repconf.maxrows"])
                instance.repconfFakedata = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["repconf.fakedata"])
                instance.repconfSnapshotuser = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["repconf.snapshotuser"])
                instance.repconfEnforcesnapshotuser = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["repconf.enforcesnapshotuser"])
                return instance
            }


            // Decoder for [ComDayCqReportingImplRLogAnalyzerInfo]
            Decoders.addDecoder(clazz: [ComDayCqReportingImplRLogAnalyzerInfo].self) { (source: AnyObject) -> [ComDayCqReportingImplRLogAnalyzerInfo] in
                return Decoders.decode(clazz: [ComDayCqReportingImplRLogAnalyzerInfo].self, source: source)
            }
            // Decoder for ComDayCqReportingImplRLogAnalyzerInfo
            Decoders.addDecoder(clazz: ComDayCqReportingImplRLogAnalyzerInfo.self) { (source: AnyObject) -> ComDayCqReportingImplRLogAnalyzerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReportingImplRLogAnalyzerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqReportingImplRLogAnalyzerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqReportingImplRLogAnalyzerProperties]
            Decoders.addDecoder(clazz: [ComDayCqReportingImplRLogAnalyzerProperties].self) { (source: AnyObject) -> [ComDayCqReportingImplRLogAnalyzerProperties] in
                return Decoders.decode(clazz: [ComDayCqReportingImplRLogAnalyzerProperties].self, source: source)
            }
            // Decoder for ComDayCqReportingImplRLogAnalyzerProperties
            Decoders.addDecoder(clazz: ComDayCqReportingImplRLogAnalyzerProperties.self) { (source: AnyObject) -> ComDayCqReportingImplRLogAnalyzerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqReportingImplRLogAnalyzerProperties()
                instance.requestLogOutput = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["request.log.output"])
                return instance
            }


            // Decoder for [ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo].self) { (source: AnyObject) -> [ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo] in
                return Decoders.decode(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo].self, source: source)
            }
            // Decoder for ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo
            Decoders.addDecoder(clazz: ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo.self) { (source: AnyObject) -> ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties].self) { (source: AnyObject) -> [ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties] in
                return Decoders.decode(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties].self, source: source)
            }
            // Decoder for ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties
            Decoders.addDecoder(clazz: ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties.self) { (source: AnyObject) -> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties()
                instance.schedulerPeriod = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["scheduler.period"])
                instance.schedulerConcurrent = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["scheduler.concurrent"])
                instance.serviceBadLinkToleranceInterval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.bad_link_tolerance_interval"])
                instance.serviceCheckOverridePatterns = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["service.check_override_patterns"])
                instance.serviceCacheBrokenInternalLinks = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["service.cache_broken_internal_links"])
                instance.serviceSpecialLinkPrefix = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["service.special_link_prefix"])
                instance.serviceSpecialLinkPatterns = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["service.special_link_patterns"])
                return instance
            }


            // Decoder for [ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo]
            Decoders.addDecoder(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo].self) { (source: AnyObject) -> [ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo] in
                return Decoders.decode(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo].self, source: source)
            }
            // Decoder for ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo
            Decoders.addDecoder(clazz: ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo.self) { (source: AnyObject) -> ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties]
            Decoders.addDecoder(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties].self) { (source: AnyObject) -> [ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties] in
                return Decoders.decode(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties].self, source: source)
            }
            // Decoder for ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties
            Decoders.addDecoder(clazz: ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.self) { (source: AnyObject) -> ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties()
                instance.schedulerPeriod = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["scheduler.period"])
                instance.schedulerConcurrent = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["scheduler.concurrent"])
                instance.goodLinkTestInterval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["good_link_test_interval"])
                instance.badLinkTestInterval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["bad_link_test_interval"])
                instance.linkUnusedInterval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["link_unused_interval"])
                instance.connectionTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["connection.timeout"])
                return instance
            }


            // Decoder for [ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo]
            Decoders.addDecoder(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo].self) { (source: AnyObject) -> [ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo] in
                return Decoders.decode(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo].self, source: source)
            }
            // Decoder for ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo
            Decoders.addDecoder(clazz: ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo.self) { (source: AnyObject) -> ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties]
            Decoders.addDecoder(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties].self) { (source: AnyObject) -> [ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties] in
                return Decoders.decode(clazz: [ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties].self, source: source)
            }
            // Decoder for ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties
            Decoders.addDecoder(clazz: ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties.self) { (source: AnyObject) -> ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties()
                instance.linkcheckertransformerDisableRewriting = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["linkcheckertransformer.disableRewriting"])
                instance.linkcheckertransformerDisableChecking = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["linkcheckertransformer.disableChecking"])
                instance.linkcheckertransformerMapCacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["linkcheckertransformer.mapCacheSize"])
                instance.linkcheckertransformerStrictExtensionCheck = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["linkcheckertransformer.strictExtensionCheck"])
                instance.linkcheckertransformerStripHtmltExtension = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["linkcheckertransformer.stripHtmltExtension"])
                instance.linkcheckertransformerRewriteElements = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["linkcheckertransformer.rewriteElements"])
                instance.linkcheckertransformerStripExtensionPathBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["linkcheckertransformer.stripExtensionPathBlacklist"])
                return instance
            }


            // Decoder for [ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo].self) { (source: AnyObject) -> [ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo] in
                return Decoders.decode(clazz: [ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo].self, source: source)
            }
            // Decoder for ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo
            Decoders.addDecoder(clazz: ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo.self) { (source: AnyObject) -> ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties].self) { (source: AnyObject) -> [ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties] in
                return Decoders.decode(clazz: [ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties].self, source: source)
            }
            // Decoder for ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties
            Decoders.addDecoder(clazz: ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties.self) { (source: AnyObject) -> ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties()
                instance.serviceMaxLinksPerHost = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.max_links_per_host"])
                instance.serviceSaveExternalLinkReferences = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["service.save_external_link_references"])
                return instance
            }


            // Decoder for [ComDayCqRewriterProcessorImplHtmlParserFactoryInfo]
            Decoders.addDecoder(clazz: [ComDayCqRewriterProcessorImplHtmlParserFactoryInfo].self) { (source: AnyObject) -> [ComDayCqRewriterProcessorImplHtmlParserFactoryInfo] in
                return Decoders.decode(clazz: [ComDayCqRewriterProcessorImplHtmlParserFactoryInfo].self, source: source)
            }
            // Decoder for ComDayCqRewriterProcessorImplHtmlParserFactoryInfo
            Decoders.addDecoder(clazz: ComDayCqRewriterProcessorImplHtmlParserFactoryInfo.self) { (source: AnyObject) -> ComDayCqRewriterProcessorImplHtmlParserFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqRewriterProcessorImplHtmlParserFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqRewriterProcessorImplHtmlParserFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqRewriterProcessorImplHtmlParserFactoryProperties]
            Decoders.addDecoder(clazz: [ComDayCqRewriterProcessorImplHtmlParserFactoryProperties].self) { (source: AnyObject) -> [ComDayCqRewriterProcessorImplHtmlParserFactoryProperties] in
                return Decoders.decode(clazz: [ComDayCqRewriterProcessorImplHtmlParserFactoryProperties].self, source: source)
            }
            // Decoder for ComDayCqRewriterProcessorImplHtmlParserFactoryProperties
            Decoders.addDecoder(clazz: ComDayCqRewriterProcessorImplHtmlParserFactoryProperties.self) { (source: AnyObject) -> ComDayCqRewriterProcessorImplHtmlParserFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqRewriterProcessorImplHtmlParserFactoryProperties()
                instance.htmlparserProcessTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["htmlparser.processTags"])
                instance.htmlparserPreserveCamelCase = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmlparser.preserveCamelCase"])
                return instance
            }


            // Decoder for [ComDayCqSearchImplBuilderQueryBuilderImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqSearchImplBuilderQueryBuilderImplInfo].self) { (source: AnyObject) -> [ComDayCqSearchImplBuilderQueryBuilderImplInfo] in
                return Decoders.decode(clazz: [ComDayCqSearchImplBuilderQueryBuilderImplInfo].self, source: source)
            }
            // Decoder for ComDayCqSearchImplBuilderQueryBuilderImplInfo
            Decoders.addDecoder(clazz: ComDayCqSearchImplBuilderQueryBuilderImplInfo.self) { (source: AnyObject) -> ComDayCqSearchImplBuilderQueryBuilderImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqSearchImplBuilderQueryBuilderImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqSearchImplBuilderQueryBuilderImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqSearchImplBuilderQueryBuilderImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqSearchImplBuilderQueryBuilderImplProperties].self) { (source: AnyObject) -> [ComDayCqSearchImplBuilderQueryBuilderImplProperties] in
                return Decoders.decode(clazz: [ComDayCqSearchImplBuilderQueryBuilderImplProperties].self, source: source)
            }
            // Decoder for ComDayCqSearchImplBuilderQueryBuilderImplProperties
            Decoders.addDecoder(clazz: ComDayCqSearchImplBuilderQueryBuilderImplProperties.self) { (source: AnyObject) -> ComDayCqSearchImplBuilderQueryBuilderImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqSearchImplBuilderQueryBuilderImplProperties()
                instance.excerptProperties = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["excerpt.properties"])
                instance.cacheMaxEntries = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.max.entries"])
                instance.cacheEntryLifetime = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache.entry.lifetime"])
                instance.xpathUnion = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["xpath.union"])
                return instance
            }


            // Decoder for [ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo].self) { (source: AnyObject) -> [ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo] in
                return Decoders.decode(clazz: [ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo].self, source: source)
            }
            // Decoder for ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo
            Decoders.addDecoder(clazz: ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo.self) { (source: AnyObject) -> ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties].self) { (source: AnyObject) -> [ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties] in
                return Decoders.decode(clazz: [ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties].self, source: source)
            }
            // Decoder for ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties
            Decoders.addDecoder(clazz: ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties.self) { (source: AnyObject) -> ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties()
                instance.pathBuilderTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pathBuilder.target"])
                instance.suggestBasepath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["suggest.basepath"])
                return instance
            }


            // Decoder for [ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo].self) { (source: AnyObject) -> [ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo.self) { (source: AnyObject) -> ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties].self) { (source: AnyObject) -> [ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties.self) { (source: AnyObject) -> ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties()
                instance.cqSearchpromoteConfighandlerEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.searchpromote.confighandler.enabled"])
                return instance
            }


            // Decoder for [ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo].self) { (source: AnyObject) -> [ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo] in
                return Decoders.decode(clazz: [ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo].self, source: source)
            }
            // Decoder for ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo
            Decoders.addDecoder(clazz: ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo.self) { (source: AnyObject) -> ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties].self) { (source: AnyObject) -> [ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties] in
                return Decoders.decode(clazz: [ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties].self, source: source)
            }
            // Decoder for ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties
            Decoders.addDecoder(clazz: ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties.self) { (source: AnyObject) -> ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties()
                instance.cqSearchpromoteConfigurationServerUri = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.searchpromote.configuration.server.uri"])
                instance.cqSearchpromoteConfigurationEnvironment = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.searchpromote.configuration.environment"])
                instance.connectionTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["connection.timeout"])
                instance.socketTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["socket.timeout"])
                return instance
            }


            // Decoder for [ComDayCqSecurityACLSetupInfo]
            Decoders.addDecoder(clazz: [ComDayCqSecurityACLSetupInfo].self) { (source: AnyObject) -> [ComDayCqSecurityACLSetupInfo] in
                return Decoders.decode(clazz: [ComDayCqSecurityACLSetupInfo].self, source: source)
            }
            // Decoder for ComDayCqSecurityACLSetupInfo
            Decoders.addDecoder(clazz: ComDayCqSecurityACLSetupInfo.self) { (source: AnyObject) -> ComDayCqSecurityACLSetupInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqSecurityACLSetupInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqSecurityACLSetupProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqSecurityACLSetupProperties]
            Decoders.addDecoder(clazz: [ComDayCqSecurityACLSetupProperties].self) { (source: AnyObject) -> [ComDayCqSecurityACLSetupProperties] in
                return Decoders.decode(clazz: [ComDayCqSecurityACLSetupProperties].self, source: source)
            }
            // Decoder for ComDayCqSecurityACLSetupProperties
            Decoders.addDecoder(clazz: ComDayCqSecurityACLSetupProperties.self) { (source: AnyObject) -> ComDayCqSecurityACLSetupProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqSecurityACLSetupProperties()
                instance.cqAclsetupRules = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.aclsetup.rules"])
                return instance
            }


            // Decoder for [ComDayCqStatisticsImplStatisticsServiceImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqStatisticsImplStatisticsServiceImplInfo].self) { (source: AnyObject) -> [ComDayCqStatisticsImplStatisticsServiceImplInfo] in
                return Decoders.decode(clazz: [ComDayCqStatisticsImplStatisticsServiceImplInfo].self, source: source)
            }
            // Decoder for ComDayCqStatisticsImplStatisticsServiceImplInfo
            Decoders.addDecoder(clazz: ComDayCqStatisticsImplStatisticsServiceImplInfo.self) { (source: AnyObject) -> ComDayCqStatisticsImplStatisticsServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqStatisticsImplStatisticsServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqStatisticsImplStatisticsServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqStatisticsImplStatisticsServiceImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqStatisticsImplStatisticsServiceImplProperties].self) { (source: AnyObject) -> [ComDayCqStatisticsImplStatisticsServiceImplProperties] in
                return Decoders.decode(clazz: [ComDayCqStatisticsImplStatisticsServiceImplProperties].self, source: source)
            }
            // Decoder for ComDayCqStatisticsImplStatisticsServiceImplProperties
            Decoders.addDecoder(clazz: ComDayCqStatisticsImplStatisticsServiceImplProperties.self) { (source: AnyObject) -> ComDayCqStatisticsImplStatisticsServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqStatisticsImplStatisticsServiceImplProperties()
                instance.schedulerPeriod = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["scheduler.period"])
                instance.schedulerConcurrent = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["scheduler.concurrent"])
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"])
                instance.workspace = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["workspace"])
                instance.keywordsPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["keywordsPath"])
                instance.asyncEntries = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["asyncEntries"])
                return instance
            }


            // Decoder for [ComDayCqTaggingImplJcrTagManagerFactoryImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqTaggingImplJcrTagManagerFactoryImplInfo].self) { (source: AnyObject) -> [ComDayCqTaggingImplJcrTagManagerFactoryImplInfo] in
                return Decoders.decode(clazz: [ComDayCqTaggingImplJcrTagManagerFactoryImplInfo].self, source: source)
            }
            // Decoder for ComDayCqTaggingImplJcrTagManagerFactoryImplInfo
            Decoders.addDecoder(clazz: ComDayCqTaggingImplJcrTagManagerFactoryImplInfo.self) { (source: AnyObject) -> ComDayCqTaggingImplJcrTagManagerFactoryImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqTaggingImplJcrTagManagerFactoryImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqTaggingImplJcrTagManagerFactoryImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqTaggingImplJcrTagManagerFactoryImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqTaggingImplJcrTagManagerFactoryImplProperties].self) { (source: AnyObject) -> [ComDayCqTaggingImplJcrTagManagerFactoryImplProperties] in
                return Decoders.decode(clazz: [ComDayCqTaggingImplJcrTagManagerFactoryImplProperties].self, source: source)
            }
            // Decoder for ComDayCqTaggingImplJcrTagManagerFactoryImplProperties
            Decoders.addDecoder(clazz: ComDayCqTaggingImplJcrTagManagerFactoryImplProperties.self) { (source: AnyObject) -> ComDayCqTaggingImplJcrTagManagerFactoryImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqTaggingImplJcrTagManagerFactoryImplProperties()
                instance.validationEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["validation.enabled"])
                return instance
            }


            // Decoder for [ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo]
            Decoders.addDecoder(clazz: [ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo].self) { (source: AnyObject) -> [ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo] in
                return Decoders.decode(clazz: [ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo].self, source: source)
            }
            // Decoder for ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo
            Decoders.addDecoder(clazz: ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo.self) { (source: AnyObject) -> ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties]
            Decoders.addDecoder(clazz: [ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties].self) { (source: AnyObject) -> [ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties] in
                return Decoders.decode(clazz: [ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties].self, source: source)
            }
            // Decoder for ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties
            Decoders.addDecoder(clazz: ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties.self) { (source: AnyObject) -> ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties()
                instance.ignorePath = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["ignore_path"])
                return instance
            }


            // Decoder for [ComDayCqTaggingImplTagGarbageCollectorInfo]
            Decoders.addDecoder(clazz: [ComDayCqTaggingImplTagGarbageCollectorInfo].self) { (source: AnyObject) -> [ComDayCqTaggingImplTagGarbageCollectorInfo] in
                return Decoders.decode(clazz: [ComDayCqTaggingImplTagGarbageCollectorInfo].self, source: source)
            }
            // Decoder for ComDayCqTaggingImplTagGarbageCollectorInfo
            Decoders.addDecoder(clazz: ComDayCqTaggingImplTagGarbageCollectorInfo.self) { (source: AnyObject) -> ComDayCqTaggingImplTagGarbageCollectorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqTaggingImplTagGarbageCollectorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqTaggingImplTagGarbageCollectorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqTaggingImplTagGarbageCollectorProperties]
            Decoders.addDecoder(clazz: [ComDayCqTaggingImplTagGarbageCollectorProperties].self) { (source: AnyObject) -> [ComDayCqTaggingImplTagGarbageCollectorProperties] in
                return Decoders.decode(clazz: [ComDayCqTaggingImplTagGarbageCollectorProperties].self, source: source)
            }
            // Decoder for ComDayCqTaggingImplTagGarbageCollectorProperties
            Decoders.addDecoder(clazz: ComDayCqTaggingImplTagGarbageCollectorProperties.self) { (source: AnyObject) -> ComDayCqTaggingImplTagGarbageCollectorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqTaggingImplTagGarbageCollectorProperties()
                instance.schedulerExpression = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"])
                return instance
            }


            // Decoder for [ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo].self) { (source: AnyObject) -> [ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo.self) { (source: AnyObject) -> ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties].self) { (source: AnyObject) -> [ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties.self) { (source: AnyObject) -> ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties()
                instance.cqPagesupdatehandlerImageresourcetypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.pagesupdatehandler.imageresourcetypes"])
                return instance
            }


            // Decoder for [ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo].self) { (source: AnyObject) -> [ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo
            Decoders.addDecoder(clazz: ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo.self) { (source: AnyObject) -> ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties].self) { (source: AnyObject) -> [ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties
            Decoders.addDecoder(clazz: ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties.self) { (source: AnyObject) -> ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties()
                instance.cqContentsyncPathrewritertransformerMappingLinks = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.contentsync.pathrewritertransformer.mapping.links"])
                instance.cqContentsyncPathrewritertransformerMappingClientlibs = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.contentsync.pathrewritertransformer.mapping.clientlibs"])
                instance.cqContentsyncPathrewritertransformerMappingImages = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.contentsync.pathrewritertransformer.mapping.images"])
                instance.cqContentsyncPathrewritertransformerAttributePattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.contentsync.pathrewritertransformer.attribute.pattern"])
                instance.cqContentsyncPathrewritertransformerClientlibraryPattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.contentsync.pathrewritertransformer.clientlibrary.pattern"])
                instance.cqContentsyncPathrewritertransformerClientlibraryReplace = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.contentsync.pathrewritertransformer.clientlibrary.replace"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplAuthoringUIModeServiceImplProperties.self, source: sourceDictionary["properties"])
                instance.additionalProperties = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplAuthoringUIModeServiceImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplAuthoringUIModeServiceImplProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplAuthoringUIModeServiceImplProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplAuthoringUIModeServiceImplProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplAuthoringUIModeServiceImplProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplAuthoringUIModeServiceImplProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplAuthoringUIModeServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplAuthoringUIModeServiceImplProperties()
                instance.authoringUIModeServiceDefault = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["authoringUIModeService.default"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplCommandsWCMCommandServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplCommandsWCMCommandServletInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplCommandsWCMCommandServletInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplCommandsWCMCommandServletInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplCommandsWCMCommandServletInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplCommandsWCMCommandServletInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplCommandsWCMCommandServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplCommandsWCMCommandServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplCommandsWCMCommandServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplCommandsWCMCommandServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplCommandsWCMCommandServletProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplCommandsWCMCommandServletProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplCommandsWCMCommandServletProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplCommandsWCMCommandServletProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplCommandsWCMCommandServletProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplCommandsWCMCommandServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplCommandsWCMCommandServletProperties()
                instance.wcmcommandservletDeleteWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["wcmcommandservlet.delete_whitelist"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties()
                instance.dimDefaultMode = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["dim.default.mode"])
                instance.dimAppcacheEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["dim.appcache.enabled"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplEventPageEventAuditListenerInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplEventPageEventAuditListenerInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplEventPageEventAuditListenerInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplEventPageEventAuditListenerInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplEventPageEventAuditListenerInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplEventPageEventAuditListenerInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplEventPageEventAuditListenerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplEventPageEventAuditListenerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplEventPageEventAuditListenerProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplEventPageEventAuditListenerProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplEventPageEventAuditListenerProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplEventPageEventAuditListenerProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplEventPageEventAuditListenerProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplEventPageEventAuditListenerProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplEventPageEventAuditListenerProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplEventPageEventAuditListenerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplEventPageEventAuditListenerProperties()
                instance.configured = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["configured"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplEventPagePostProcessorInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplEventPagePostProcessorInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplEventPagePostProcessorInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplEventPagePostProcessorInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplEventPagePostProcessorInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplEventPagePostProcessorInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplEventPagePostProcessorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplEventPagePostProcessorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplEventPagePostProcessorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplEventPagePostProcessorProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplEventPagePostProcessorProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplEventPagePostProcessorProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplEventPagePostProcessorProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplEventPagePostProcessorProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplEventPagePostProcessorProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplEventPagePostProcessorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplEventPagePostProcessorProperties()
                instance.paths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["paths"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties()
                instance.paths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["paths"])
                instance.excludedPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["excludedPaths"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplEventTemplatePostProcessorInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplEventTemplatePostProcessorInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplEventTemplatePostProcessorInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplEventTemplatePostProcessorInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplEventTemplatePostProcessorInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplEventTemplatePostProcessorInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplEventTemplatePostProcessorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplEventTemplatePostProcessorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplEventTemplatePostProcessorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplEventTemplatePostProcessorProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplEventTemplatePostProcessorProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplEventTemplatePostProcessorProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplEventTemplatePostProcessorProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplEventTemplatePostProcessorProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplEventTemplatePostProcessorProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplEventTemplatePostProcessorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplEventTemplatePostProcessorProperties()
                instance.paths = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["paths"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplLanguageManagerImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplLanguageManagerImplInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplLanguageManagerImplInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplLanguageManagerImplInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplLanguageManagerImplInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplLanguageManagerImplInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplLanguageManagerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplLanguageManagerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplLanguageManagerImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplLanguageManagerImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplLanguageManagerImplProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplLanguageManagerImplProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplLanguageManagerImplProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplLanguageManagerImplProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplLanguageManagerImplProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplLanguageManagerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplLanguageManagerImplProperties()
                instance.langmgrListPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["langmgr.list.path"])
                instance.langmgrCountryDefault = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["langmgr.country.default"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties()
                instance.linkExpiredPrefix = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["link.expired.prefix"])
                instance.linkExpiredRemove = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["link.expired.remove"])
                instance.linkExpiredSuffix = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["link.expired.suffix"])
                instance.linkInvalidPrefix = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["link.invalid.prefix"])
                instance.linkInvalidRemove = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["link.invalid.remove"])
                instance.linkInvalidSuffix = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["link.invalid.suffix"])
                instance.linkPredatedPrefix = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["link.predated.prefix"])
                instance.linkPredatedRemove = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["link.predated.remove"])
                instance.linkPredatedSuffix = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["link.predated.suffix"])
                instance.linkWcmmodes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["link.wcmmodes"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties()
                instance.pageInfoProviderPropertyRegexDefault = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["page.info.provider.property.regex.default"])
                instance.pageInfoProviderPropertyName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["page.info.provider.property.name"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties()
                instance.illegalCharMapping = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["illegalCharMapping"])
                instance.pageSubTreeActivationCheck = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["pageSubTreeActivationCheck"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties()
                instance.contentReferenceConfigResourceTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["contentReferenceConfig.resourceTypes"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties()
                instance.damShowexpired = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["dam.showexpired"])
                instance.damShowhidden = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["dam.showhidden"])
                instance.tagTitleSearch = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["tagTitleSearch"])
                instance.guessTotal = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["guessTotal"])
                instance.damExpiryProperty = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["dam.expiryProperty"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties()
                instance.itemResourceTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["item.resource.types"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties()
                instance.guessTotal = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["guessTotal"])
                instance.tagTitleSearch = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["tagTitleSearch"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplServletsFindReplaceServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsFindReplaceServletInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplServletsFindReplaceServletInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsFindReplaceServletInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplServletsFindReplaceServletInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsFindReplaceServletInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplServletsFindReplaceServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplServletsFindReplaceServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplServletsFindReplaceServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplServletsFindReplaceServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsFindReplaceServletProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplServletsFindReplaceServletProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsFindReplaceServletProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplServletsFindReplaceServletProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsFindReplaceServletProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplServletsFindReplaceServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplServletsFindReplaceServletProperties()
                instance.scope = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["scope"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplServletsReferenceSearchServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsReferenceSearchServletInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplServletsReferenceSearchServletInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsReferenceSearchServletInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplServletsReferenceSearchServletInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsReferenceSearchServletInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplServletsReferenceSearchServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplServletsReferenceSearchServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplServletsReferenceSearchServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplServletsReferenceSearchServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsReferenceSearchServletProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplServletsReferenceSearchServletProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsReferenceSearchServletProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplServletsReferenceSearchServletProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsReferenceSearchServletProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplServletsReferenceSearchServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplServletsReferenceSearchServletProperties()
                instance.referencesearchservletMaxReferencesPerPage = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["referencesearchservlet.maxReferencesPerPage"])
                instance.referencesearchservletMaxPages = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["referencesearchservlet.maxPages"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplServletsThumbnailServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsThumbnailServletInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplServletsThumbnailServletInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsThumbnailServletInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplServletsThumbnailServletInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsThumbnailServletInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplServletsThumbnailServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplServletsThumbnailServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplServletsThumbnailServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplServletsThumbnailServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplServletsThumbnailServletProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplServletsThumbnailServletProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplServletsThumbnailServletProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplServletsThumbnailServletProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplServletsThumbnailServletProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplServletsThumbnailServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplServletsThumbnailServletProperties()
                instance.workspace = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["workspace"])
                instance.dimensions = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["dimensions"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties()
                instance.nonValidChars = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["nonValidChars"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties()
                instance.defaultExternalizerDomain = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["default.externalizer.domain"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplVersionManagerImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplVersionManagerImplInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplVersionManagerImplInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplVersionManagerImplInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplVersionManagerImplInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplVersionManagerImplInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplVersionManagerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplVersionManagerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplVersionManagerImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplVersionManagerImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplVersionManagerImplProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplVersionManagerImplProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplVersionManagerImplProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplVersionManagerImplProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplVersionManagerImplProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplVersionManagerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplVersionManagerImplProperties()
                instance.versionmanagerCreateVersionOnActivation = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["versionmanager.createVersionOnActivation"])
                instance.versionmanagerPurgingEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["versionmanager.purgingEnabled"])
                instance.versionmanagerPurgePaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["versionmanager.purgePaths"])
                instance.versionmanagerIvPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["versionmanager.ivPaths"])
                instance.versionmanagerMaxAgeDays = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["versionmanager.maxAgeDays"])
                instance.versionmanagerMaxNumberVersions = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["versionmanager.maxNumberVersions"])
                instance.versionmanagerMinNumberVersions = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["versionmanager.minNumberVersions"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplVersionPurgeTaskInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplVersionPurgeTaskInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplVersionPurgeTaskInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplVersionPurgeTaskInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplVersionPurgeTaskInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplVersionPurgeTaskInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplVersionPurgeTaskInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplVersionPurgeTaskInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplVersionPurgeTaskProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplVersionPurgeTaskProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplVersionPurgeTaskProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplVersionPurgeTaskProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplVersionPurgeTaskProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplVersionPurgeTaskProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplVersionPurgeTaskProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplVersionPurgeTaskProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplVersionPurgeTaskProperties()
                instance.versionpurgePaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["versionpurge.paths"])
                instance.versionpurgeRecursive = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["versionpurge.recursive"])
                instance.versionpurgeMaxVersions = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["versionpurge.maxVersions"])
                instance.versionpurgeMinVersions = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["versionpurge.minVersions"])
                instance.versionpurgeMaxAgeDays = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["versionpurge.maxAgeDays"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplWCMDebugFilterInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplWCMDebugFilterInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplWCMDebugFilterInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplWCMDebugFilterInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplWCMDebugFilterInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplWCMDebugFilterInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplWCMDebugFilterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplWCMDebugFilterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplWCMDebugFilterProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplWCMDebugFilterProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplWCMDebugFilterProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplWCMDebugFilterProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplWCMDebugFilterProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplWCMDebugFilterProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplWCMDebugFilterProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplWCMDebugFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplWCMDebugFilterProperties()
                instance.wcmdbgfilterEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["wcmdbgfilter.enabled"])
                instance.wcmdbgfilterJspDebug = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["wcmdbgfilter.jspDebug"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplWCMDeveloperModeFilterProperties.self, source: sourceDictionary["properties"])
                instance.additionalProperties = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplWCMDeveloperModeFilterProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplWCMDeveloperModeFilterProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplWCMDeveloperModeFilterProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplWCMDeveloperModeFilterProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplWCMDeveloperModeFilterProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplWCMDeveloperModeFilterProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplWCMDeveloperModeFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplWCMDeveloperModeFilterProperties()
                instance.wcmdevmodefilterEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["wcmdevmodefilter.enabled"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplWarpTimeWarpFilterInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplWarpTimeWarpFilterInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplWarpTimeWarpFilterInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplWarpTimeWarpFilterInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplWarpTimeWarpFilterInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplWarpTimeWarpFilterInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreImplWarpTimeWarpFilterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplWarpTimeWarpFilterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreImplWarpTimeWarpFilterProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreImplWarpTimeWarpFilterProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreImplWarpTimeWarpFilterProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreImplWarpTimeWarpFilterProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreImplWarpTimeWarpFilterProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreImplWarpTimeWarpFilterProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreImplWarpTimeWarpFilterProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreImplWarpTimeWarpFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreImplWarpTimeWarpFilterProperties()
                instance.filterOrder = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["filter.order"])
                instance.filterScope = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["filter.scope"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreMvtMVTStatisticsImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreMvtMVTStatisticsImplInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreMvtMVTStatisticsImplInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreMvtMVTStatisticsImplInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreMvtMVTStatisticsImplInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreMvtMVTStatisticsImplInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreMvtMVTStatisticsImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreMvtMVTStatisticsImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreMvtMVTStatisticsImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreMvtMVTStatisticsImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreMvtMVTStatisticsImplProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreMvtMVTStatisticsImplProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreMvtMVTStatisticsImplProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreMvtMVTStatisticsImplProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreMvtMVTStatisticsImplProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreMvtMVTStatisticsImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreMvtMVTStatisticsImplProperties()
                instance.mvtstatisticsTrackingurl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["mvtstatistics.trackingurl"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreStatsPageViewStatisticsImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreStatsPageViewStatisticsImplInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreStatsPageViewStatisticsImplInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreStatsPageViewStatisticsImplInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreStatsPageViewStatisticsImplInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreStatsPageViewStatisticsImplInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreStatsPageViewStatisticsImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreStatsPageViewStatisticsImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreStatsPageViewStatisticsImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreStatsPageViewStatisticsImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreStatsPageViewStatisticsImplProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreStatsPageViewStatisticsImplProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreStatsPageViewStatisticsImplProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreStatsPageViewStatisticsImplProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreStatsPageViewStatisticsImplProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreStatsPageViewStatisticsImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreStatsPageViewStatisticsImplProperties()
                instance.pageviewstatisticsTrackingurl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pageviewstatistics.trackingurl"])
                instance.pageviewstatisticsTrackingscriptEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pageviewstatistics.trackingscript.enabled"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreWCMRequestFilterInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreWCMRequestFilterInfo].self) { (source: AnyObject) -> [ComDayCqWcmCoreWCMRequestFilterInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreWCMRequestFilterInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreWCMRequestFilterInfo
            Decoders.addDecoder(clazz: ComDayCqWcmCoreWCMRequestFilterInfo.self) { (source: AnyObject) -> ComDayCqWcmCoreWCMRequestFilterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreWCMRequestFilterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmCoreWCMRequestFilterProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmCoreWCMRequestFilterProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmCoreWCMRequestFilterProperties].self) { (source: AnyObject) -> [ComDayCqWcmCoreWCMRequestFilterProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmCoreWCMRequestFilterProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmCoreWCMRequestFilterProperties
            Decoders.addDecoder(clazz: ComDayCqWcmCoreWCMRequestFilterProperties.self) { (source: AnyObject) -> ComDayCqWcmCoreWCMRequestFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmCoreWCMRequestFilterProperties()
                instance.wcmfilterMode = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["wcmfilter.mode"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterDesignPackageImporterInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterDesignPackageImporterInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterDesignPackageImporterInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterDesignPackageImporterInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterDesignPackageImporterInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterDesignPackageImporterInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterDesignPackageImporterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterDesignPackageImporterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterDesignPackageImporterProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterDesignPackageImporterProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterDesignPackageImporterProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterDesignPackageImporterProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterDesignPackageImporterProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterDesignPackageImporterProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterDesignPackageImporterProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterDesignPackageImporterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterDesignPackageImporterProperties()
                instance.extractFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["extract.filter"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties()
                instance.filepattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["filepattern"])
                instance.buildPageNodes = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["build.page.nodes"])
                instance.buildClientLibs = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["build.client.libs"])
                instance.buildCanvasComponent = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["build.canvas.component"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties()
                instance.minThreadPoolSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minThreadPoolSize"])
                instance.maxThreadPoolSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxThreadPoolSize"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties()
                instance.searchPattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["search.pattern"])
                instance.replacePattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["replace.pattern"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties()
                instance.filepattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["filepattern"])
                instance.deviceGroups = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["device.groups"])
                instance.buildPageNodes = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["build.page.nodes"])
                instance.buildClientLibs = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["build.client.libs"])
                instance.buildCanvasComponent = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["build.canvas.component"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                instance.componentResourceType = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["component.resourceType"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                instance.componentResourceType = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["component.resourceType"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                instance.componentResourceType = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["component.resourceType"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                instance.componentResourceType = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["component.resourceType"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties].self) { (source: AnyObject) -> [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties
            Decoders.addDecoder(clazz: ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties.self) { (source: AnyObject) -> ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.tagpattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tagpattern"])
                return instance
            }


            // Decoder for [ComDayCqWcmFoundationFormsImplFormChooserServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmFoundationFormsImplFormChooserServletInfo].self) { (source: AnyObject) -> [ComDayCqWcmFoundationFormsImplFormChooserServletInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmFoundationFormsImplFormChooserServletInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmFoundationFormsImplFormChooserServletInfo
            Decoders.addDecoder(clazz: ComDayCqWcmFoundationFormsImplFormChooserServletInfo.self) { (source: AnyObject) -> ComDayCqWcmFoundationFormsImplFormChooserServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmFoundationFormsImplFormChooserServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmFoundationFormsImplFormChooserServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmFoundationFormsImplFormChooserServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmFoundationFormsImplFormChooserServletProperties].self) { (source: AnyObject) -> [ComDayCqWcmFoundationFormsImplFormChooserServletProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmFoundationFormsImplFormChooserServletProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmFoundationFormsImplFormChooserServletProperties
            Decoders.addDecoder(clazz: ComDayCqWcmFoundationFormsImplFormChooserServletProperties.self) { (source: AnyObject) -> ComDayCqWcmFoundationFormsImplFormChooserServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmFoundationFormsImplFormChooserServletProperties()
                instance.serviceName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["service.name"])
                instance.slingServletResourceTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.resourceTypes"])
                instance.slingServletSelectors = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.selectors"])
                instance.slingServletMethods = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.servlet.methods"])
                instance.formsFormchooserservletAdvansesearchRequire = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["forms.formchooserservlet.advansesearch.require"])
                return instance
            }


            // Decoder for [ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo].self) { (source: AnyObject) -> [ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo
            Decoders.addDecoder(clazz: ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo.self) { (source: AnyObject) -> ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties].self) { (source: AnyObject) -> [ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties
            Decoders.addDecoder(clazz: ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties.self) { (source: AnyObject) -> ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties()
                instance.formsFormparagraphpostprocessorEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["forms.formparagraphpostprocessor.enabled"])
                instance.formsFormparagraphpostprocessorFormresourcetypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["forms.formparagraphpostprocessor.formresourcetypes"])
                return instance
            }


            // Decoder for [ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo].self) { (source: AnyObject) -> [ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo
            Decoders.addDecoder(clazz: ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo.self) { (source: AnyObject) -> ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties].self) { (source: AnyObject) -> [ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties
            Decoders.addDecoder(clazz: ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties.self) { (source: AnyObject) -> ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties()
                instance.nameWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name.whitelist"])
                instance.allowExpressions = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["allow.expressions"])
                return instance
            }


            // Decoder for [ComDayCqWcmFoundationFormsImplMailServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmFoundationFormsImplMailServletInfo].self) { (source: AnyObject) -> [ComDayCqWcmFoundationFormsImplMailServletInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmFoundationFormsImplMailServletInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmFoundationFormsImplMailServletInfo
            Decoders.addDecoder(clazz: ComDayCqWcmFoundationFormsImplMailServletInfo.self) { (source: AnyObject) -> ComDayCqWcmFoundationFormsImplMailServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmFoundationFormsImplMailServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmFoundationFormsImplMailServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmFoundationFormsImplMailServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmFoundationFormsImplMailServletProperties].self) { (source: AnyObject) -> [ComDayCqWcmFoundationFormsImplMailServletProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmFoundationFormsImplMailServletProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmFoundationFormsImplMailServletProperties
            Decoders.addDecoder(clazz: ComDayCqWcmFoundationFormsImplMailServletProperties.self) { (source: AnyObject) -> ComDayCqWcmFoundationFormsImplMailServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmFoundationFormsImplMailServletProperties()
                instance.slingServletResourceTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.resourceTypes"])
                instance.slingServletSelectors = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.selectors"])
                instance.resourceWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resource.whitelist"])
                instance.resourceBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["resource.blacklist"])
                return instance
            }


            // Decoder for [ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo].self) { (source: AnyObject) -> [ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo
            Decoders.addDecoder(clazz: ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo.self) { (source: AnyObject) -> ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties].self) { (source: AnyObject) -> [ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties
            Decoders.addDecoder(clazz: ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties.self) { (source: AnyObject) -> ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties()
                instance.adaptSupportedWidths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["adapt.supported.widths"])
                return instance
            }


            // Decoder for [ComDayCqWcmFoundationImplHTTPAuthHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmFoundationImplHTTPAuthHandlerInfo].self) { (source: AnyObject) -> [ComDayCqWcmFoundationImplHTTPAuthHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmFoundationImplHTTPAuthHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmFoundationImplHTTPAuthHandlerInfo
            Decoders.addDecoder(clazz: ComDayCqWcmFoundationImplHTTPAuthHandlerInfo.self) { (source: AnyObject) -> ComDayCqWcmFoundationImplHTTPAuthHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmFoundationImplHTTPAuthHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmFoundationImplHTTPAuthHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmFoundationImplHTTPAuthHandlerProperties].self) { (source: AnyObject) -> [ComDayCqWcmFoundationImplHTTPAuthHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmFoundationImplHTTPAuthHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmFoundationImplHTTPAuthHandlerProperties
            Decoders.addDecoder(clazz: ComDayCqWcmFoundationImplHTTPAuthHandlerProperties.self) { (source: AnyObject) -> ComDayCqWcmFoundationImplHTTPAuthHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmFoundationImplHTTPAuthHandlerProperties()
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"])
                instance.authHttpNologin = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["auth.http.nologin"])
                instance.authHttpRealm = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.http.realm"])
                instance.authDefaultLoginpage = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.default.loginpage"])
                instance.authCredForm = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["auth.cred.form"])
                instance.authCredUtf8 = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["auth.cred.utf8"])
                return instance
            }


            // Decoder for [ComDayCqWcmFoundationImplPageImpressionsTrackerInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmFoundationImplPageImpressionsTrackerInfo].self) { (source: AnyObject) -> [ComDayCqWcmFoundationImplPageImpressionsTrackerInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmFoundationImplPageImpressionsTrackerInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmFoundationImplPageImpressionsTrackerInfo
            Decoders.addDecoder(clazz: ComDayCqWcmFoundationImplPageImpressionsTrackerInfo.self) { (source: AnyObject) -> ComDayCqWcmFoundationImplPageImpressionsTrackerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmFoundationImplPageImpressionsTrackerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmFoundationImplPageImpressionsTrackerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmFoundationImplPageImpressionsTrackerProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmFoundationImplPageImpressionsTrackerProperties].self) { (source: AnyObject) -> [ComDayCqWcmFoundationImplPageImpressionsTrackerProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmFoundationImplPageImpressionsTrackerProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmFoundationImplPageImpressionsTrackerProperties
            Decoders.addDecoder(clazz: ComDayCqWcmFoundationImplPageImpressionsTrackerProperties.self) { (source: AnyObject) -> ComDayCqWcmFoundationImplPageImpressionsTrackerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmFoundationImplPageImpressionsTrackerProperties()
                instance.slingAuthRequirements = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.auth.requirements"])
                return instance
            }


            // Decoder for [ComDayCqWcmFoundationImplPageRedirectServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmFoundationImplPageRedirectServletInfo].self) { (source: AnyObject) -> [ComDayCqWcmFoundationImplPageRedirectServletInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmFoundationImplPageRedirectServletInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmFoundationImplPageRedirectServletInfo
            Decoders.addDecoder(clazz: ComDayCqWcmFoundationImplPageRedirectServletInfo.self) { (source: AnyObject) -> ComDayCqWcmFoundationImplPageRedirectServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmFoundationImplPageRedirectServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmFoundationImplPageRedirectServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmFoundationImplPageRedirectServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmFoundationImplPageRedirectServletProperties].self) { (source: AnyObject) -> [ComDayCqWcmFoundationImplPageRedirectServletProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmFoundationImplPageRedirectServletProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmFoundationImplPageRedirectServletProperties
            Decoders.addDecoder(clazz: ComDayCqWcmFoundationImplPageRedirectServletProperties.self) { (source: AnyObject) -> ComDayCqWcmFoundationImplPageRedirectServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmFoundationImplPageRedirectServletProperties()
                instance.excludedResourceTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["excluded.resource.types"])
                return instance
            }


            // Decoder for [ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo].self) { (source: AnyObject) -> [ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo
            Decoders.addDecoder(clazz: ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo.self) { (source: AnyObject) -> ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties].self) { (source: AnyObject) -> [ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties
            Decoders.addDecoder(clazz: ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties.self) { (source: AnyObject) -> ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties()
                instance.defaultAttachmentTypeBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["default.attachment.type.blacklist"])
                instance.baselineAttachmentTypeBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["baseline.attachment.type.blacklist"])
                return instance
            }


            // Decoder for [ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo].self) { (source: AnyObject) -> [ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo
            Decoders.addDecoder(clazz: ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo.self) { (source: AnyObject) -> ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties].self) { (source: AnyObject) -> [ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties
            Decoders.addDecoder(clazz: ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties.self) { (source: AnyObject) -> ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties()
                instance.parameterWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["parameter.whitelist"])
                instance.parameterWhitelistPrefixes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["parameter.whitelist.prefixes"])
                instance.binaryParameterWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["binary.parameter.whitelist"])
                instance.modifierWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["modifier.whitelist"])
                instance.operationWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["operation.whitelist"])
                instance.operationWhitelistPrefixes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["operation.whitelist.prefixes"])
                instance.typehintWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["typehint.whitelist"])
                instance.resourcetypeWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resourcetype.whitelist"])
                return instance
            }


            // Decoder for [ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo].self) { (source: AnyObject) -> [ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo
            Decoders.addDecoder(clazz: ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo.self) { (source: AnyObject) -> ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties].self) { (source: AnyObject) -> [ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties
            Decoders.addDecoder(clazz: ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties.self) { (source: AnyObject) -> ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties()
                instance.deviceInfoTransformerEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["device.info.transformer.enabled"])
                instance.deviceInfoTransformerCssStyle = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["device.info.transformer.css.style"])
                return instance
            }


            // Decoder for [ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo].self) { (source: AnyObject) -> [ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo
            Decoders.addDecoder(clazz: ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo.self) { (source: AnyObject) -> ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties].self) { (source: AnyObject) -> [ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties
            Decoders.addDecoder(clazz: ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties.self) { (source: AnyObject) -> ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties()
                instance.redirectEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["redirect.enabled"])
                instance.redirectStatsEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["redirect.stats.enabled"])
                instance.redirectExtensions = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["redirect.extensions"])
                instance.redirectPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["redirect.paths"])
                return instance
            }


            // Decoder for [ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo].self) { (source: AnyObject) -> [ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo
            Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo.self) { (source: AnyObject) -> ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties].self) { (source: AnyObject) -> [ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties
            Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties.self) { (source: AnyObject) -> ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties()
                instance.cqWcmMsmActionExcludednodetypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludednodetypes"])
                instance.cqWcmMsmActionExcludedparagraphitems = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedparagraphitems"])
                instance.cqWcmMsmActionExcludedprops = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedprops"])
                instance.contentcopyactionOrderStyle = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["contentcopyaction.order.style"])
                return instance
            }


            // Decoder for [ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo].self) { (source: AnyObject) -> [ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo
            Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo.self) { (source: AnyObject) -> ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties].self) { (source: AnyObject) -> [ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties
            Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties.self) { (source: AnyObject) -> ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties()
                instance.cqWcmMsmActionExcludednodetypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludednodetypes"])
                instance.cqWcmMsmActionExcludedparagraphitems = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedparagraphitems"])
                instance.cqWcmMsmActionExcludedprops = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedprops"])
                return instance
            }


            // Decoder for [ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo].self) { (source: AnyObject) -> [ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo
            Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo.self) { (source: AnyObject) -> ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties].self) { (source: AnyObject) -> [ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties
            Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties.self) { (source: AnyObject) -> ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties()
                instance.cqWcmMsmActionExcludednodetypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludednodetypes"])
                instance.cqWcmMsmActionExcludedparagraphitems = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedparagraphitems"])
                instance.cqWcmMsmActionExcludedprops = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedprops"])
                instance.cqWcmMsmActionIgnoredMixin = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.ignoredMixin"])
                return instance
            }


            // Decoder for [ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo].self) { (source: AnyObject) -> [ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo
            Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo.self) { (source: AnyObject) -> ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties].self) { (source: AnyObject) -> [ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties
            Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties.self) { (source: AnyObject) -> ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties()
                instance.cqWcmMsmActionExcludednodetypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludednodetypes"])
                instance.cqWcmMsmActionExcludedparagraphitems = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedparagraphitems"])
                instance.cqWcmMsmActionExcludedprops = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedprops"])
                return instance
            }


            // Decoder for [ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo].self) { (source: AnyObject) -> [ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo
            Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo.self) { (source: AnyObject) -> ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties].self) { (source: AnyObject) -> [ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties
            Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties.self) { (source: AnyObject) -> ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties()
                instance.cqWcmMsmActionExcludednodetypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludednodetypes"])
                instance.cqWcmMsmActionExcludedparagraphitems = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedparagraphitems"])
                instance.cqWcmMsmActionExcludedprops = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedprops"])
                instance.cqWcmMsmImplActionsPagemovePropReferenceUpdate = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate"])
                return instance
            }


            // Decoder for [ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo].self) { (source: AnyObject) -> [ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo
            Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo.self) { (source: AnyObject) -> ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties].self) { (source: AnyObject) -> [ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties
            Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties.self) { (source: AnyObject) -> ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties()
                instance.cqWcmMsmActionExcludednodetypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludednodetypes"])
                instance.cqWcmMsmActionExcludedparagraphitems = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedparagraphitems"])
                instance.cqWcmMsmActionExcludedprops = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedprops"])
                instance.cqWcmMsmImplActionReferencesupdatePropUpdateNested = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.wcm.msm.impl.action.referencesupdate.prop_updateNested"])
                return instance
            }


            // Decoder for [ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo].self) { (source: AnyObject) -> [ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo
            Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo.self) { (source: AnyObject) -> ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties].self) { (source: AnyObject) -> [ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties
            Decoders.addDecoder(clazz: ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties.self) { (source: AnyObject) -> ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties()
                instance.cqWcmMsmActionExcludednodetypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludednodetypes"])
                instance.cqWcmMsmActionExcludedparagraphitems = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedparagraphitems"])
                instance.cqWcmMsmActionExcludedprops = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.msm.action.excludedprops"])
                return instance
            }


            // Decoder for [ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo].self) { (source: AnyObject) -> [ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo
            Decoders.addDecoder(clazz: ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo.self) { (source: AnyObject) -> ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties].self) { (source: AnyObject) -> [ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties
            Decoders.addDecoder(clazz: ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties.self) { (source: AnyObject) -> ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties()
                instance.liverelationshipmgrRelationsconfigDefault = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["liverelationshipmgr.relationsconfig.default"])
                return instance
            }


            // Decoder for [ComDayCqWcmMsmImplRolloutManagerImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplRolloutManagerImplInfo].self) { (source: AnyObject) -> [ComDayCqWcmMsmImplRolloutManagerImplInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmMsmImplRolloutManagerImplInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmMsmImplRolloutManagerImplInfo
            Decoders.addDecoder(clazz: ComDayCqWcmMsmImplRolloutManagerImplInfo.self) { (source: AnyObject) -> ComDayCqWcmMsmImplRolloutManagerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMsmImplRolloutManagerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmMsmImplRolloutManagerImplProperties.self, source: sourceDictionary["properties"])
                instance.additionalProperties = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmMsmImplRolloutManagerImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplRolloutManagerImplProperties].self) { (source: AnyObject) -> [ComDayCqWcmMsmImplRolloutManagerImplProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmMsmImplRolloutManagerImplProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmMsmImplRolloutManagerImplProperties
            Decoders.addDecoder(clazz: ComDayCqWcmMsmImplRolloutManagerImplProperties.self) { (source: AnyObject) -> ComDayCqWcmMsmImplRolloutManagerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMsmImplRolloutManagerImplProperties()
                instance.eventFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"])
                instance.rolloutmgrExcludedpropsDefault = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["rolloutmgr.excludedprops.default"])
                instance.rolloutmgrExcludedparagraphpropsDefault = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["rolloutmgr.excludedparagraphprops.default"])
                instance.rolloutmgrExcludednodetypesDefault = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["rolloutmgr.excludednodetypes.default"])
                instance.rolloutmgrThreadpoolMaxsize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["rolloutmgr.threadpool.maxsize"])
                instance.rolloutmgrThreadpoolMaxshutdowntime = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["rolloutmgr.threadpool.maxshutdowntime"])
                instance.rolloutmgrThreadpoolPriority = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["rolloutmgr.threadpool.priority"])
                instance.rolloutmgrCommitSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["rolloutmgr.commit.size"])
                instance.rolloutmgrConflicthandlingEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["rolloutmgr.conflicthandling.enabled"])
                return instance
            }


            // Decoder for [ComDayCqWcmMsmImplServletsAuditLogServletInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplServletsAuditLogServletInfo].self) { (source: AnyObject) -> [ComDayCqWcmMsmImplServletsAuditLogServletInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmMsmImplServletsAuditLogServletInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmMsmImplServletsAuditLogServletInfo
            Decoders.addDecoder(clazz: ComDayCqWcmMsmImplServletsAuditLogServletInfo.self) { (source: AnyObject) -> ComDayCqWcmMsmImplServletsAuditLogServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMsmImplServletsAuditLogServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmMsmImplServletsAuditLogServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmMsmImplServletsAuditLogServletProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmMsmImplServletsAuditLogServletProperties].self) { (source: AnyObject) -> [ComDayCqWcmMsmImplServletsAuditLogServletProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmMsmImplServletsAuditLogServletProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmMsmImplServletsAuditLogServletProperties
            Decoders.addDecoder(clazz: ComDayCqWcmMsmImplServletsAuditLogServletProperties.self) { (source: AnyObject) -> ComDayCqWcmMsmImplServletsAuditLogServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmMsmImplServletsAuditLogServletProperties()
                instance.auditlogservletDefaultEventsCount = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["auditlogservlet.default.events.count"])
                instance.auditlogservletDefaultPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auditlogservlet.default.path"])
                return instance
            }


            // Decoder for [ComDayCqWcmNotificationEmailImplEmailChannelInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmNotificationEmailImplEmailChannelInfo].self) { (source: AnyObject) -> [ComDayCqWcmNotificationEmailImplEmailChannelInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmNotificationEmailImplEmailChannelInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmNotificationEmailImplEmailChannelInfo
            Decoders.addDecoder(clazz: ComDayCqWcmNotificationEmailImplEmailChannelInfo.self) { (source: AnyObject) -> ComDayCqWcmNotificationEmailImplEmailChannelInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmNotificationEmailImplEmailChannelInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmNotificationEmailImplEmailChannelProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmNotificationEmailImplEmailChannelProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmNotificationEmailImplEmailChannelProperties].self) { (source: AnyObject) -> [ComDayCqWcmNotificationEmailImplEmailChannelProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmNotificationEmailImplEmailChannelProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmNotificationEmailImplEmailChannelProperties
            Decoders.addDecoder(clazz: ComDayCqWcmNotificationEmailImplEmailChannelProperties.self) { (source: AnyObject) -> ComDayCqWcmNotificationEmailImplEmailChannelProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmNotificationEmailImplEmailChannelProperties()
                instance.emailFrom = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["email.from"])
                return instance
            }


            // Decoder for [ComDayCqWcmNotificationImplNotificationManagerImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmNotificationImplNotificationManagerImplInfo].self) { (source: AnyObject) -> [ComDayCqWcmNotificationImplNotificationManagerImplInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmNotificationImplNotificationManagerImplInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmNotificationImplNotificationManagerImplInfo
            Decoders.addDecoder(clazz: ComDayCqWcmNotificationImplNotificationManagerImplInfo.self) { (source: AnyObject) -> ComDayCqWcmNotificationImplNotificationManagerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmNotificationImplNotificationManagerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmNotificationImplNotificationManagerImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmNotificationImplNotificationManagerImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmNotificationImplNotificationManagerImplProperties].self) { (source: AnyObject) -> [ComDayCqWcmNotificationImplNotificationManagerImplProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmNotificationImplNotificationManagerImplProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmNotificationImplNotificationManagerImplProperties
            Decoders.addDecoder(clazz: ComDayCqWcmNotificationImplNotificationManagerImplProperties.self) { (source: AnyObject) -> ComDayCqWcmNotificationImplNotificationManagerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmNotificationImplNotificationManagerImplProperties()
                instance.eventTopics = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["event.topics"])
                return instance
            }


            // Decoder for [ComDayCqWcmScriptingImplBVPManagerInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmScriptingImplBVPManagerInfo].self) { (source: AnyObject) -> [ComDayCqWcmScriptingImplBVPManagerInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmScriptingImplBVPManagerInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmScriptingImplBVPManagerInfo
            Decoders.addDecoder(clazz: ComDayCqWcmScriptingImplBVPManagerInfo.self) { (source: AnyObject) -> ComDayCqWcmScriptingImplBVPManagerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmScriptingImplBVPManagerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmScriptingImplBVPManagerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmScriptingImplBVPManagerProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmScriptingImplBVPManagerProperties].self) { (source: AnyObject) -> [ComDayCqWcmScriptingImplBVPManagerProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmScriptingImplBVPManagerProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmScriptingImplBVPManagerProperties
            Decoders.addDecoder(clazz: ComDayCqWcmScriptingImplBVPManagerProperties.self) { (source: AnyObject) -> ComDayCqWcmScriptingImplBVPManagerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmScriptingImplBVPManagerProperties()
                instance.comDayCqWcmScriptingBvpScriptEngines = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["com.day.cq.wcm.scripting.bvp.script.engines"])
                return instance
            }


            // Decoder for [ComDayCqWcmUndoUndoConfigInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmUndoUndoConfigInfo].self) { (source: AnyObject) -> [ComDayCqWcmUndoUndoConfigInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmUndoUndoConfigInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmUndoUndoConfigInfo
            Decoders.addDecoder(clazz: ComDayCqWcmUndoUndoConfigInfo.self) { (source: AnyObject) -> ComDayCqWcmUndoUndoConfigInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmUndoUndoConfigInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmUndoUndoConfigProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWcmUndoUndoConfigProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmUndoUndoConfigProperties].self) { (source: AnyObject) -> [ComDayCqWcmUndoUndoConfigProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmUndoUndoConfigProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmUndoUndoConfigProperties
            Decoders.addDecoder(clazz: ComDayCqWcmUndoUndoConfigProperties.self) { (source: AnyObject) -> ComDayCqWcmUndoUndoConfigProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmUndoUndoConfigProperties()
                instance.cqWcmUndoEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.wcm.undo.enabled"])
                instance.cqWcmUndoPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.wcm.undo.path"])
                instance.cqWcmUndoValidity = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.wcm.undo.validity"])
                instance.cqWcmUndoSteps = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cq.wcm.undo.steps"])
                instance.cqWcmUndoPersistence = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.wcm.undo.persistence"])
                instance.cqWcmUndoPersistenceMode = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.wcm.undo.persistence.mode"])
                instance.cqWcmUndoMarkermode = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cq.wcm.undo.markermode"])
                instance.cqWcmUndoWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.undo.whitelist"])
                instance.cqWcmUndoBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.undo.blacklist"])
                return instance
            }


            // Decoder for [ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo].self) { (source: AnyObject) -> [ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo
            Decoders.addDecoder(clazz: ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo.self) { (source: AnyObject) -> ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties].self) { (source: AnyObject) -> [ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties
            Decoders.addDecoder(clazz: ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties.self) { (source: AnyObject) -> ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties()
                instance.flushAgents = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["Flush agents"])
                return instance
            }


            // Decoder for [ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo].self) { (source: AnyObject) -> [ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo
            Decoders.addDecoder(clazz: ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo.self) { (source: AnyObject) -> ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties].self) { (source: AnyObject) -> [ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties
            Decoders.addDecoder(clazz: ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties.self) { (source: AnyObject) -> ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties()
                instance.eventFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["event.filter"])
                instance.minThreadPoolSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minThreadPoolSize"])
                instance.maxThreadPoolSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxThreadPoolSize"])
                instance.cqWcmWorkflowTerminateOnActivate = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cq.wcm.workflow.terminate.on.activate"])
                instance.cqWcmWorklfowTerminateExclusionList = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cq.wcm.worklfow.terminate.exclusion.list"])
                return instance
            }


            // Decoder for [ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo]
            Decoders.addDecoder(clazz: [ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo].self) { (source: AnyObject) -> [ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo] in
                return Decoders.decode(clazz: [ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo].self, source: source)
            }
            // Decoder for ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo
            Decoders.addDecoder(clazz: ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo.self) { (source: AnyObject) -> ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties]
            Decoders.addDecoder(clazz: [ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties].self) { (source: AnyObject) -> [ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties] in
                return Decoders.decode(clazz: [ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties].self, source: source)
            }
            // Decoder for ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties
            Decoders.addDecoder(clazz: ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties.self) { (source: AnyObject) -> ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties()
                instance.workflowpackageinfoproviderFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["workflowpackageinfoprovider.filter"])
                instance.workflowpackageinfoproviderFilterRootpath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["workflowpackageinfoprovider.filter.rootpath"])
                return instance
            }


            // Decoder for [ComDayCqWidgetImplHtmlLibraryManagerImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqWidgetImplHtmlLibraryManagerImplInfo].self) { (source: AnyObject) -> [ComDayCqWidgetImplHtmlLibraryManagerImplInfo] in
                return Decoders.decode(clazz: [ComDayCqWidgetImplHtmlLibraryManagerImplInfo].self, source: source)
            }
            // Decoder for ComDayCqWidgetImplHtmlLibraryManagerImplInfo
            Decoders.addDecoder(clazz: ComDayCqWidgetImplHtmlLibraryManagerImplInfo.self) { (source: AnyObject) -> ComDayCqWidgetImplHtmlLibraryManagerImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWidgetImplHtmlLibraryManagerImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWidgetImplHtmlLibraryManagerImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWidgetImplHtmlLibraryManagerImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqWidgetImplHtmlLibraryManagerImplProperties].self) { (source: AnyObject) -> [ComDayCqWidgetImplHtmlLibraryManagerImplProperties] in
                return Decoders.decode(clazz: [ComDayCqWidgetImplHtmlLibraryManagerImplProperties].self, source: source)
            }
            // Decoder for ComDayCqWidgetImplHtmlLibraryManagerImplProperties
            Decoders.addDecoder(clazz: ComDayCqWidgetImplHtmlLibraryManagerImplProperties.self) { (source: AnyObject) -> ComDayCqWidgetImplHtmlLibraryManagerImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWidgetImplHtmlLibraryManagerImplProperties()
                instance.htmllibmanagerClientmanager = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.clientmanager"])
                instance.htmllibmanagerDebug = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.debug"])
                instance.htmllibmanagerDebugConsole = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.debug.console"])
                instance.htmllibmanagerDebugInitJs = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.debug.init.js"])
                instance.htmllibmanagerDefaultthemename = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.defaultthemename"])
                instance.htmllibmanagerDefaultuserthemename = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.defaultuserthemename"])
                instance.htmllibmanagerFirebuglitePath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["htmllibmanager.firebuglite.path"])
                instance.htmllibmanagerForceCQUrlInfo = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.forceCQUrlInfo"])
                instance.htmllibmanagerGzip = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.gzip"])
                instance.htmllibmanagerMaxage = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["htmllibmanager.maxage"])
                instance.htmllibmanagerMaxDataUriSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["htmllibmanager.maxDataUriSize"])
                instance.htmllibmanagerMinify = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.minify"])
                instance.htmllibmanagerPathList = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["htmllibmanager.path.list"])
                instance.htmllibmanagerTiming = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["htmllibmanager.timing"])
                return instance
            }


            // Decoder for [ComDayCqWidgetImplWidgetExtensionProviderImplInfo]
            Decoders.addDecoder(clazz: [ComDayCqWidgetImplWidgetExtensionProviderImplInfo].self) { (source: AnyObject) -> [ComDayCqWidgetImplWidgetExtensionProviderImplInfo] in
                return Decoders.decode(clazz: [ComDayCqWidgetImplWidgetExtensionProviderImplInfo].self, source: source)
            }
            // Decoder for ComDayCqWidgetImplWidgetExtensionProviderImplInfo
            Decoders.addDecoder(clazz: ComDayCqWidgetImplWidgetExtensionProviderImplInfo.self) { (source: AnyObject) -> ComDayCqWidgetImplWidgetExtensionProviderImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWidgetImplWidgetExtensionProviderImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWidgetImplWidgetExtensionProviderImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCqWidgetImplWidgetExtensionProviderImplProperties]
            Decoders.addDecoder(clazz: [ComDayCqWidgetImplWidgetExtensionProviderImplProperties].self) { (source: AnyObject) -> [ComDayCqWidgetImplWidgetExtensionProviderImplProperties] in
                return Decoders.decode(clazz: [ComDayCqWidgetImplWidgetExtensionProviderImplProperties].self, source: source)
            }
            // Decoder for ComDayCqWidgetImplWidgetExtensionProviderImplProperties
            Decoders.addDecoder(clazz: ComDayCqWidgetImplWidgetExtensionProviderImplProperties.self) { (source: AnyObject) -> ComDayCqWidgetImplWidgetExtensionProviderImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWidgetImplWidgetExtensionProviderImplProperties()
                instance.extendableWidgets = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["extendable.widgets"])
                instance.widgetextensionproviderDebug = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["widgetextensionprovider.debug"])
                return instance
            }


            // Decoder for [ComDayCqWorkflowImplEmailEMailNotificationServiceInfo]
            Decoders.addDecoder(clazz: [ComDayCqWorkflowImplEmailEMailNotificationServiceInfo].self) { (source: AnyObject) -> [ComDayCqWorkflowImplEmailEMailNotificationServiceInfo] in
                return Decoders.decode(clazz: [ComDayCqWorkflowImplEmailEMailNotificationServiceInfo].self, source: source)
            }
            // Decoder for ComDayCqWorkflowImplEmailEMailNotificationServiceInfo
            Decoders.addDecoder(clazz: ComDayCqWorkflowImplEmailEMailNotificationServiceInfo.self) { (source: AnyObject) -> ComDayCqWorkflowImplEmailEMailNotificationServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWorkflowImplEmailEMailNotificationServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWorkflowImplEmailEMailNotificationServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWorkflowImplEmailEMailNotificationServiceProperties]
            Decoders.addDecoder(clazz: [ComDayCqWorkflowImplEmailEMailNotificationServiceProperties].self) { (source: AnyObject) -> [ComDayCqWorkflowImplEmailEMailNotificationServiceProperties] in
                return Decoders.decode(clazz: [ComDayCqWorkflowImplEmailEMailNotificationServiceProperties].self, source: source)
            }
            // Decoder for ComDayCqWorkflowImplEmailEMailNotificationServiceProperties
            Decoders.addDecoder(clazz: ComDayCqWorkflowImplEmailEMailNotificationServiceProperties.self) { (source: AnyObject) -> ComDayCqWorkflowImplEmailEMailNotificationServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWorkflowImplEmailEMailNotificationServiceProperties()
                instance.fromAddress = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["from.address"])
                instance.hostPrefix = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["host.prefix"])
                instance.notifyOnabort = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["notify.onabort"])
                instance.notifyOncomplete = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["notify.oncomplete"])
                instance.notifyOncontainercomplete = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["notify.oncontainercomplete"])
                instance.notifyUseronly = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["notify.useronly"])
                return instance
            }


            // Decoder for [ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo]
            Decoders.addDecoder(clazz: [ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo].self) { (source: AnyObject) -> [ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo] in
                return Decoders.decode(clazz: [ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo].self, source: source)
            }
            // Decoder for ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo
            Decoders.addDecoder(clazz: ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo.self) { (source: AnyObject) -> ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties]
            Decoders.addDecoder(clazz: [ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties].self) { (source: AnyObject) -> [ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties] in
                return Decoders.decode(clazz: [ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties].self, source: source)
            }
            // Decoder for ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties
            Decoders.addDecoder(clazz: ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties.self) { (source: AnyObject) -> ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties()
                instance.notifyOnupdate = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["notify.onupdate"])
                instance.notifyOncomplete = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["notify.oncomplete"])
                return instance
            }


            // Decoder for [ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo]
            Decoders.addDecoder(clazz: [ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo].self) { (source: AnyObject) -> [ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo] in
                return Decoders.decode(clazz: [ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo].self, source: source)
            }
            // Decoder for ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo
            Decoders.addDecoder(clazz: ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo.self) { (source: AnyObject) -> ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties]
            Decoders.addDecoder(clazz: [ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties].self) { (source: AnyObject) -> [ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties] in
                return Decoders.decode(clazz: [ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties].self, source: source)
            }
            // Decoder for ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties
            Decoders.addDecoder(clazz: ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.self) { (source: AnyObject) -> ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties()
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"])
                instance.tokenRequiredAttr = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["token.required.attr"])
                instance.tokenAlternateUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["token.alternate.url"])
                instance.tokenEncapsulated = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["token.encapsulated"])
                instance.skipTokenRefresh = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["skip.token.refresh"])
                return instance
            }


            // Decoder for [ComDayCrxSecurityTokenImplTokenCleanupTaskInfo]
            Decoders.addDecoder(clazz: [ComDayCrxSecurityTokenImplTokenCleanupTaskInfo].self) { (source: AnyObject) -> [ComDayCrxSecurityTokenImplTokenCleanupTaskInfo] in
                return Decoders.decode(clazz: [ComDayCrxSecurityTokenImplTokenCleanupTaskInfo].self, source: source)
            }
            // Decoder for ComDayCrxSecurityTokenImplTokenCleanupTaskInfo
            Decoders.addDecoder(clazz: ComDayCrxSecurityTokenImplTokenCleanupTaskInfo.self) { (source: AnyObject) -> ComDayCrxSecurityTokenImplTokenCleanupTaskInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCrxSecurityTokenImplTokenCleanupTaskInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: ComDayCrxSecurityTokenImplTokenCleanupTaskProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ComDayCrxSecurityTokenImplTokenCleanupTaskProperties]
            Decoders.addDecoder(clazz: [ComDayCrxSecurityTokenImplTokenCleanupTaskProperties].self) { (source: AnyObject) -> [ComDayCrxSecurityTokenImplTokenCleanupTaskProperties] in
                return Decoders.decode(clazz: [ComDayCrxSecurityTokenImplTokenCleanupTaskProperties].self, source: source)
            }
            // Decoder for ComDayCrxSecurityTokenImplTokenCleanupTaskProperties
            Decoders.addDecoder(clazz: ComDayCrxSecurityTokenImplTokenCleanupTaskProperties.self) { (source: AnyObject) -> ComDayCrxSecurityTokenImplTokenCleanupTaskProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComDayCrxSecurityTokenImplTokenCleanupTaskProperties()
                instance.enableTokenCleanupTask = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable.token.cleanup.task"])
                instance.schedulerExpression = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"])
                instance.batchSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["batch.size"])
                return instance
            }


            // Decoder for [ConfigNodePropertyArray]
            Decoders.addDecoder(clazz: [ConfigNodePropertyArray].self) { (source: AnyObject) -> [ConfigNodePropertyArray] in
                return Decoders.decode(clazz: [ConfigNodePropertyArray].self, source: source)
            }
            // Decoder for ConfigNodePropertyArray
            Decoders.addDecoder(clazz: ConfigNodePropertyArray.self) { (source: AnyObject) -> ConfigNodePropertyArray in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ConfigNodePropertyArray()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance._optional = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["optional"])
                instance.isSet = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_set"])
                instance.type = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type"])
                instance.values = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["values"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                return instance
            }


            // Decoder for [ConfigNodePropertyBoolean]
            Decoders.addDecoder(clazz: [ConfigNodePropertyBoolean].self) { (source: AnyObject) -> [ConfigNodePropertyBoolean] in
                return Decoders.decode(clazz: [ConfigNodePropertyBoolean].self, source: source)
            }
            // Decoder for ConfigNodePropertyBoolean
            Decoders.addDecoder(clazz: ConfigNodePropertyBoolean.self) { (source: AnyObject) -> ConfigNodePropertyBoolean in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ConfigNodePropertyBoolean()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance._optional = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["optional"])
                instance.isSet = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_set"])
                instance.type = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type"])
                instance.value = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["value"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                return instance
            }


            // Decoder for [ConfigNodePropertyDropDown]
            Decoders.addDecoder(clazz: [ConfigNodePropertyDropDown].self) { (source: AnyObject) -> [ConfigNodePropertyDropDown] in
                return Decoders.decode(clazz: [ConfigNodePropertyDropDown].self, source: source)
            }
            // Decoder for ConfigNodePropertyDropDown
            Decoders.addDecoder(clazz: ConfigNodePropertyDropDown.self) { (source: AnyObject) -> ConfigNodePropertyDropDown in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ConfigNodePropertyDropDown()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance._optional = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["optional"])
                instance.isSet = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_set"])
                instance.type = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDownType.self, source: sourceDictionary["type"])
                instance.value = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["value"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                return instance
            }


            // Decoder for [ConfigNodePropertyDropDownType]
            Decoders.addDecoder(clazz: [ConfigNodePropertyDropDownType].self) { (source: AnyObject) -> [ConfigNodePropertyDropDownType] in
                return Decoders.decode(clazz: [ConfigNodePropertyDropDownType].self, source: source)
            }
            // Decoder for ConfigNodePropertyDropDownType
            Decoders.addDecoder(clazz: ConfigNodePropertyDropDownType.self) { (source: AnyObject) -> ConfigNodePropertyDropDownType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ConfigNodePropertyDropDownType()
                instance.labels = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["labels"])
                instance.values = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["values"])
                return instance
            }


            // Decoder for [ConfigNodePropertyFloat]
            Decoders.addDecoder(clazz: [ConfigNodePropertyFloat].self) { (source: AnyObject) -> [ConfigNodePropertyFloat] in
                return Decoders.decode(clazz: [ConfigNodePropertyFloat].self, source: source)
            }
            // Decoder for ConfigNodePropertyFloat
            Decoders.addDecoder(clazz: ConfigNodePropertyFloat.self) { (source: AnyObject) -> ConfigNodePropertyFloat in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ConfigNodePropertyFloat()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance._optional = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["optional"])
                instance.isSet = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_set"])
                instance.type = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type"])
                instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                return instance
            }


            // Decoder for [ConfigNodePropertyInteger]
            Decoders.addDecoder(clazz: [ConfigNodePropertyInteger].self) { (source: AnyObject) -> [ConfigNodePropertyInteger] in
                return Decoders.decode(clazz: [ConfigNodePropertyInteger].self, source: source)
            }
            // Decoder for ConfigNodePropertyInteger
            Decoders.addDecoder(clazz: ConfigNodePropertyInteger.self) { (source: AnyObject) -> ConfigNodePropertyInteger in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ConfigNodePropertyInteger()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance._optional = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["optional"])
                instance.isSet = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_set"])
                instance.type = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type"])
                instance.value = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["value"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                return instance
            }


            // Decoder for [ConfigNodePropertyString]
            Decoders.addDecoder(clazz: [ConfigNodePropertyString].self) { (source: AnyObject) -> [ConfigNodePropertyString] in
                return Decoders.decode(clazz: [ConfigNodePropertyString].self, source: source)
            }
            // Decoder for ConfigNodePropertyString
            Decoders.addDecoder(clazz: ConfigNodePropertyString.self) { (source: AnyObject) -> ConfigNodePropertyString in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ConfigNodePropertyString()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance._optional = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["optional"])
                instance.isSet = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_set"])
                instance.type = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                return instance
            }


            // Decoder for [GuideLocalizationServiceInfo]
            Decoders.addDecoder(clazz: [GuideLocalizationServiceInfo].self) { (source: AnyObject) -> [GuideLocalizationServiceInfo] in
                return Decoders.decode(clazz: [GuideLocalizationServiceInfo].self, source: source)
            }
            // Decoder for GuideLocalizationServiceInfo
            Decoders.addDecoder(clazz: GuideLocalizationServiceInfo.self) { (source: AnyObject) -> GuideLocalizationServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GuideLocalizationServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: GuideLocalizationServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [GuideLocalizationServiceProperties]
            Decoders.addDecoder(clazz: [GuideLocalizationServiceProperties].self) { (source: AnyObject) -> [GuideLocalizationServiceProperties] in
                return Decoders.decode(clazz: [GuideLocalizationServiceProperties].self, source: source)
            }
            // Decoder for GuideLocalizationServiceProperties
            Decoders.addDecoder(clazz: GuideLocalizationServiceProperties.self) { (source: AnyObject) -> GuideLocalizationServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GuideLocalizationServiceProperties()
                instance.supportedLocales = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["supportedLocales"])
                instance.localizableProperties = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["Localizable Properties"])
                return instance
            }


            // Decoder for [MessagingUserComponentFactoryInfo]
            Decoders.addDecoder(clazz: [MessagingUserComponentFactoryInfo].self) { (source: AnyObject) -> [MessagingUserComponentFactoryInfo] in
                return Decoders.decode(clazz: [MessagingUserComponentFactoryInfo].self, source: source)
            }
            // Decoder for MessagingUserComponentFactoryInfo
            Decoders.addDecoder(clazz: MessagingUserComponentFactoryInfo.self) { (source: AnyObject) -> MessagingUserComponentFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MessagingUserComponentFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: MessagingUserComponentFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [MessagingUserComponentFactoryProperties]
            Decoders.addDecoder(clazz: [MessagingUserComponentFactoryProperties].self) { (source: AnyObject) -> [MessagingUserComponentFactoryProperties] in
                return Decoders.decode(clazz: [MessagingUserComponentFactoryProperties].self, source: source)
            }
            // Decoder for MessagingUserComponentFactoryProperties
            Decoders.addDecoder(clazz: MessagingUserComponentFactoryProperties.self) { (source: AnyObject) -> MessagingUserComponentFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MessagingUserComponentFactoryProperties()
                instance.priority = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["priority"])
                return instance
            }


            // Decoder for [OrgApacheAriesJmxFrameworkStateConfigInfo]
            Decoders.addDecoder(clazz: [OrgApacheAriesJmxFrameworkStateConfigInfo].self) { (source: AnyObject) -> [OrgApacheAriesJmxFrameworkStateConfigInfo] in
                return Decoders.decode(clazz: [OrgApacheAriesJmxFrameworkStateConfigInfo].self, source: source)
            }
            // Decoder for OrgApacheAriesJmxFrameworkStateConfigInfo
            Decoders.addDecoder(clazz: OrgApacheAriesJmxFrameworkStateConfigInfo.self) { (source: AnyObject) -> OrgApacheAriesJmxFrameworkStateConfigInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheAriesJmxFrameworkStateConfigInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheAriesJmxFrameworkStateConfigProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheAriesJmxFrameworkStateConfigProperties]
            Decoders.addDecoder(clazz: [OrgApacheAriesJmxFrameworkStateConfigProperties].self) { (source: AnyObject) -> [OrgApacheAriesJmxFrameworkStateConfigProperties] in
                return Decoders.decode(clazz: [OrgApacheAriesJmxFrameworkStateConfigProperties].self, source: source)
            }
            // Decoder for OrgApacheAriesJmxFrameworkStateConfigProperties
            Decoders.addDecoder(clazz: OrgApacheAriesJmxFrameworkStateConfigProperties.self) { (source: AnyObject) -> OrgApacheAriesJmxFrameworkStateConfigProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheAriesJmxFrameworkStateConfigProperties()
                instance.attributeChangeNotificationEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["attributeChangeNotificationEnabled"])
                return instance
            }


            // Decoder for [OrgApacheFelixEventadminImplEventAdminInfo]
            Decoders.addDecoder(clazz: [OrgApacheFelixEventadminImplEventAdminInfo].self) { (source: AnyObject) -> [OrgApacheFelixEventadminImplEventAdminInfo] in
                return Decoders.decode(clazz: [OrgApacheFelixEventadminImplEventAdminInfo].self, source: source)
            }
            // Decoder for OrgApacheFelixEventadminImplEventAdminInfo
            Decoders.addDecoder(clazz: OrgApacheFelixEventadminImplEventAdminInfo.self) { (source: AnyObject) -> OrgApacheFelixEventadminImplEventAdminInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixEventadminImplEventAdminInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheFelixEventadminImplEventAdminProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheFelixEventadminImplEventAdminProperties]
            Decoders.addDecoder(clazz: [OrgApacheFelixEventadminImplEventAdminProperties].self) { (source: AnyObject) -> [OrgApacheFelixEventadminImplEventAdminProperties] in
                return Decoders.decode(clazz: [OrgApacheFelixEventadminImplEventAdminProperties].self, source: source)
            }
            // Decoder for OrgApacheFelixEventadminImplEventAdminProperties
            Decoders.addDecoder(clazz: OrgApacheFelixEventadminImplEventAdminProperties.self) { (source: AnyObject) -> OrgApacheFelixEventadminImplEventAdminProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixEventadminImplEventAdminProperties()
                instance.orgApacheFelixEventadminThreadPoolSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.eventadmin.ThreadPoolSize"])
                instance.orgApacheFelixEventadminAsyncToSyncThreadRatio = Decoders.decodeOptional(clazz: ConfigNodePropertyFloat.self, source: sourceDictionary["org.apache.felix.eventadmin.AsyncToSyncThreadRatio"])
                instance.orgApacheFelixEventadminTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.eventadmin.Timeout"])
                instance.orgApacheFelixEventadminRequireTopic = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.eventadmin.RequireTopic"])
                instance.orgApacheFelixEventadminIgnoreTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.eventadmin.IgnoreTimeout"])
                instance.orgApacheFelixEventadminIgnoreTopic = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.eventadmin.IgnoreTopic"])
                return instance
            }


            // Decoder for [OrgApacheFelixHttpInfo]
            Decoders.addDecoder(clazz: [OrgApacheFelixHttpInfo].self) { (source: AnyObject) -> [OrgApacheFelixHttpInfo] in
                return Decoders.decode(clazz: [OrgApacheFelixHttpInfo].self, source: source)
            }
            // Decoder for OrgApacheFelixHttpInfo
            Decoders.addDecoder(clazz: OrgApacheFelixHttpInfo.self) { (source: AnyObject) -> OrgApacheFelixHttpInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixHttpInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheFelixHttpProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheFelixHttpProperties]
            Decoders.addDecoder(clazz: [OrgApacheFelixHttpProperties].self) { (source: AnyObject) -> [OrgApacheFelixHttpProperties] in
                return Decoders.decode(clazz: [OrgApacheFelixHttpProperties].self, source: source)
            }
            // Decoder for OrgApacheFelixHttpProperties
            Decoders.addDecoder(clazz: OrgApacheFelixHttpProperties.self) { (source: AnyObject) -> OrgApacheFelixHttpProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixHttpProperties()
                instance.orgApacheFelixHttpHost = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.http.host"])
                instance.orgApacheFelixHttpEnable = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.http.enable"])
                instance.orgOsgiServiceHttpPort = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.osgi.service.http.port"])
                instance.orgApacheFelixHttpTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.http.timeout"])
                instance.orgApacheFelixHttpsEnable = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.https.enable"])
                instance.orgOsgiServiceHttpPortSecure = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.osgi.service.http.port.secure"])
                instance.orgApacheFelixHttpsKeystore = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.https.keystore"])
                instance.orgApacheFelixHttpsKeystorePassword = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.https.keystore.password"])
                instance.orgApacheFelixHttpsKeystoreKeyPassword = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.https.keystore.key.password"])
                instance.orgApacheFelixHttpsTruststore = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.https.truststore"])
                instance.orgApacheFelixHttpsTruststorePassword = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.https.truststore.password"])
                instance.orgApacheFelixHttpsClientcertificate = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["org.apache.felix.https.clientcertificate"])
                instance.orgApacheFelixHttpContextPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.http.context_path"])
                instance.orgApacheFelixHttpMbeans = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.http.mbeans"])
                instance.orgApacheFelixHttpSessionTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.http.session.timeout"])
                instance.orgApacheFelixHttpJettyThreadpoolMax = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.http.jetty.threadpool.max"])
                instance.orgApacheFelixHttpJettyAcceptors = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.http.jetty.acceptors"])
                instance.orgApacheFelixHttpJettySelectors = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.http.jetty.selectors"])
                instance.orgApacheFelixHttpJettyHeaderBufferSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.http.jetty.headerBufferSize"])
                instance.orgApacheFelixHttpJettyRequestBufferSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.http.jetty.requestBufferSize"])
                instance.orgApacheFelixHttpJettyResponseBufferSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.http.jetty.responseBufferSize"])
                instance.orgApacheFelixHttpJettyMaxFormSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.http.jetty.maxFormSize"])
                instance.orgApacheFelixHttpPathExclusions = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.http.path_exclusions"])
                instance.orgApacheFelixHttpsJettyCiphersuitesExcluded = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.https.jetty.ciphersuites.excluded"])
                instance.orgApacheFelixHttpsJettyCiphersuitesIncluded = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.https.jetty.ciphersuites.included"])
                instance.orgApacheFelixHttpJettySendServerHeader = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.http.jetty.sendServerHeader"])
                instance.orgApacheFelixHttpsJettyProtocolsIncluded = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.https.jetty.protocols.included"])
                instance.orgApacheFelixHttpsJettyProtocolsExcluded = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.https.jetty.protocols.excluded"])
                instance.orgApacheFelixProxyLoadBalancerConnectionEnable = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.proxy.load.balancer.connection.enable"])
                instance.orgApacheFelixHttpsJettyRenegotiateAllowed = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.https.jetty.renegotiateAllowed"])
                instance.orgApacheFelixHttpsJettySessionCookieHttpOnly = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.https.jetty.session.cookie.httpOnly"])
                instance.orgApacheFelixHttpsJettySessionCookieSecure = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.https.jetty.session.cookie.secure"])
                instance.orgEclipseJettyServletSessionIdPathParameterName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.eclipse.jetty.servlet.SessionIdPathParameterName"])
                instance.orgEclipseJettyServletCheckingRemoteSessionIdEncoding = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding"])
                instance.orgEclipseJettyServletSessionCookie = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.eclipse.jetty.servlet.SessionCookie"])
                instance.orgEclipseJettyServletSessionDomain = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.eclipse.jetty.servlet.SessionDomain"])
                instance.orgEclipseJettyServletSessionPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.eclipse.jetty.servlet.SessionPath"])
                instance.orgEclipseJettyServletMaxAge = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.eclipse.jetty.servlet.MaxAge"])
                instance.orgApacheFelixHttpName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.felix.http.name"])
                instance.orgApacheFelixJettyGziphandlerEnable = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.jetty.gziphandler.enable"])
                instance.orgApacheFelixJettyGzipMinGzipSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.jetty.gzip.minGzipSize"])
                instance.orgApacheFelixJettyGzipCompressionLevel = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.jetty.gzip.compressionLevel"])
                instance.orgApacheFelixJettyGzipInflateBufferSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.felix.jetty.gzip.inflateBufferSize"])
                instance.orgApacheFelixJettyGzipSyncFlush = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.jetty.gzip.syncFlush"])
                instance.orgApacheFelixJettyGzipExcludedUserAgents = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.jetty.gzip.excludedUserAgents"])
                instance.orgApacheFelixJettyGzipIncludedMethods = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.jetty.gzip.includedMethods"])
                instance.orgApacheFelixJettyGzipExcludedMethods = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.jetty.gzip.excludedMethods"])
                instance.orgApacheFelixJettyGzipIncludedPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.jetty.gzip.includedPaths"])
                instance.orgApacheFelixJettyGzipExcludedPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.jetty.gzip.excludedPaths"])
                instance.orgApacheFelixJettyGzipIncludedMimeTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.jetty.gzip.includedMimeTypes"])
                instance.orgApacheFelixJettyGzipExcludedMimeTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.felix.jetty.gzip.excludedMimeTypes"])
                instance.orgApacheFelixHttpSessionInvalidate = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.http.session.invalidate"])
                instance.orgApacheFelixHttpSessionUniqueid = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.felix.http.session.uniqueid"])
                return instance
            }


            // Decoder for [OrgApacheFelixHttpSslfilterSslFilterInfo]
            Decoders.addDecoder(clazz: [OrgApacheFelixHttpSslfilterSslFilterInfo].self) { (source: AnyObject) -> [OrgApacheFelixHttpSslfilterSslFilterInfo] in
                return Decoders.decode(clazz: [OrgApacheFelixHttpSslfilterSslFilterInfo].self, source: source)
            }
            // Decoder for OrgApacheFelixHttpSslfilterSslFilterInfo
            Decoders.addDecoder(clazz: OrgApacheFelixHttpSslfilterSslFilterInfo.self) { (source: AnyObject) -> OrgApacheFelixHttpSslfilterSslFilterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixHttpSslfilterSslFilterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheFelixHttpSslfilterSslFilterProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheFelixHttpSslfilterSslFilterProperties]
            Decoders.addDecoder(clazz: [OrgApacheFelixHttpSslfilterSslFilterProperties].self) { (source: AnyObject) -> [OrgApacheFelixHttpSslfilterSslFilterProperties] in
                return Decoders.decode(clazz: [OrgApacheFelixHttpSslfilterSslFilterProperties].self, source: source)
            }
            // Decoder for OrgApacheFelixHttpSslfilterSslFilterProperties
            Decoders.addDecoder(clazz: OrgApacheFelixHttpSslfilterSslFilterProperties.self) { (source: AnyObject) -> OrgApacheFelixHttpSslfilterSslFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixHttpSslfilterSslFilterProperties()
                instance.sslForwardHeader = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["ssl-forward.header"])
                instance.sslForwardValue = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["ssl-forward.value"])
                instance.sslForwardCertHeader = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["ssl-forward-cert.header"])
                instance.rewriteAbsoluteUrls = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["rewrite.absolute.urls"])
                return instance
            }


            // Decoder for [OrgApacheFelixJaasConfigurationFactoryInfo]
            Decoders.addDecoder(clazz: [OrgApacheFelixJaasConfigurationFactoryInfo].self) { (source: AnyObject) -> [OrgApacheFelixJaasConfigurationFactoryInfo] in
                return Decoders.decode(clazz: [OrgApacheFelixJaasConfigurationFactoryInfo].self, source: source)
            }
            // Decoder for OrgApacheFelixJaasConfigurationFactoryInfo
            Decoders.addDecoder(clazz: OrgApacheFelixJaasConfigurationFactoryInfo.self) { (source: AnyObject) -> OrgApacheFelixJaasConfigurationFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixJaasConfigurationFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheFelixJaasConfigurationFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheFelixJaasConfigurationFactoryProperties]
            Decoders.addDecoder(clazz: [OrgApacheFelixJaasConfigurationFactoryProperties].self) { (source: AnyObject) -> [OrgApacheFelixJaasConfigurationFactoryProperties] in
                return Decoders.decode(clazz: [OrgApacheFelixJaasConfigurationFactoryProperties].self, source: source)
            }
            // Decoder for OrgApacheFelixJaasConfigurationFactoryProperties
            Decoders.addDecoder(clazz: OrgApacheFelixJaasConfigurationFactoryProperties.self) { (source: AnyObject) -> OrgApacheFelixJaasConfigurationFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixJaasConfigurationFactoryProperties()
                instance.jaasControlFlag = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["jaas.controlFlag"])
                instance.jaasRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["jaas.ranking"])
                instance.jaasRealmName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jaas.realmName"])
                instance.jaasClassname = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jaas.classname"])
                instance.jaasOptions = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["jaas.options"])
                return instance
            }


            // Decoder for [OrgApacheFelixJaasConfigurationSpiInfo]
            Decoders.addDecoder(clazz: [OrgApacheFelixJaasConfigurationSpiInfo].self) { (source: AnyObject) -> [OrgApacheFelixJaasConfigurationSpiInfo] in
                return Decoders.decode(clazz: [OrgApacheFelixJaasConfigurationSpiInfo].self, source: source)
            }
            // Decoder for OrgApacheFelixJaasConfigurationSpiInfo
            Decoders.addDecoder(clazz: OrgApacheFelixJaasConfigurationSpiInfo.self) { (source: AnyObject) -> OrgApacheFelixJaasConfigurationSpiInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixJaasConfigurationSpiInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheFelixJaasConfigurationSpiProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheFelixJaasConfigurationSpiProperties]
            Decoders.addDecoder(clazz: [OrgApacheFelixJaasConfigurationSpiProperties].self) { (source: AnyObject) -> [OrgApacheFelixJaasConfigurationSpiProperties] in
                return Decoders.decode(clazz: [OrgApacheFelixJaasConfigurationSpiProperties].self, source: source)
            }
            // Decoder for OrgApacheFelixJaasConfigurationSpiProperties
            Decoders.addDecoder(clazz: OrgApacheFelixJaasConfigurationSpiProperties.self) { (source: AnyObject) -> OrgApacheFelixJaasConfigurationSpiProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixJaasConfigurationSpiProperties()
                instance.jaasDefaultRealmName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jaas.defaultRealmName"])
                instance.jaasConfigProviderName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jaas.configProviderName"])
                instance.jaasGlobalConfigPolicy = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["jaas.globalConfigPolicy"])
                return instance
            }


            // Decoder for [OrgApacheFelixScrScrServiceInfo]
            Decoders.addDecoder(clazz: [OrgApacheFelixScrScrServiceInfo].self) { (source: AnyObject) -> [OrgApacheFelixScrScrServiceInfo] in
                return Decoders.decode(clazz: [OrgApacheFelixScrScrServiceInfo].self, source: source)
            }
            // Decoder for OrgApacheFelixScrScrServiceInfo
            Decoders.addDecoder(clazz: OrgApacheFelixScrScrServiceInfo.self) { (source: AnyObject) -> OrgApacheFelixScrScrServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixScrScrServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheFelixScrScrServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheFelixScrScrServiceProperties]
            Decoders.addDecoder(clazz: [OrgApacheFelixScrScrServiceProperties].self) { (source: AnyObject) -> [OrgApacheFelixScrScrServiceProperties] in
                return Decoders.decode(clazz: [OrgApacheFelixScrScrServiceProperties].self, source: source)
            }
            // Decoder for OrgApacheFelixScrScrServiceProperties
            Decoders.addDecoder(clazz: OrgApacheFelixScrScrServiceProperties.self) { (source: AnyObject) -> OrgApacheFelixScrScrServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixScrScrServiceProperties()
                instance.dsLoglevel = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["ds.loglevel"])
                instance.dsFactoryEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["ds.factory.enabled"])
                instance.dsDelayedKeepInstances = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["ds.delayed.keepInstances"])
                instance.dsLockTimeoutMilliseconds = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["ds.lock.timeout.milliseconds"])
                instance.dsStopTimeoutMilliseconds = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["ds.stop.timeout.milliseconds"])
                instance.dsGlobalExtender = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["ds.global.extender"])
                return instance
            }


            // Decoder for [OrgApacheFelixSystemreadyImplComponentsCheckInfo]
            Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadyImplComponentsCheckInfo].self) { (source: AnyObject) -> [OrgApacheFelixSystemreadyImplComponentsCheckInfo] in
                return Decoders.decode(clazz: [OrgApacheFelixSystemreadyImplComponentsCheckInfo].self, source: source)
            }
            // Decoder for OrgApacheFelixSystemreadyImplComponentsCheckInfo
            Decoders.addDecoder(clazz: OrgApacheFelixSystemreadyImplComponentsCheckInfo.self) { (source: AnyObject) -> OrgApacheFelixSystemreadyImplComponentsCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixSystemreadyImplComponentsCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheFelixSystemreadyImplComponentsCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheFelixSystemreadyImplComponentsCheckProperties]
            Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadyImplComponentsCheckProperties].self) { (source: AnyObject) -> [OrgApacheFelixSystemreadyImplComponentsCheckProperties] in
                return Decoders.decode(clazz: [OrgApacheFelixSystemreadyImplComponentsCheckProperties].self, source: source)
            }
            // Decoder for OrgApacheFelixSystemreadyImplComponentsCheckProperties
            Decoders.addDecoder(clazz: OrgApacheFelixSystemreadyImplComponentsCheckProperties.self) { (source: AnyObject) -> OrgApacheFelixSystemreadyImplComponentsCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixSystemreadyImplComponentsCheckProperties()
                instance.componentsList = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["components.list"])
                instance.type = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo]
            Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo].self) { (source: AnyObject) -> [OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo] in
                return Decoders.decode(clazz: [OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo].self, source: source)
            }
            // Decoder for OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo
            Decoders.addDecoder(clazz: OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo.self) { (source: AnyObject) -> OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties]
            Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties].self) { (source: AnyObject) -> [OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties] in
                return Decoders.decode(clazz: [OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties].self, source: source)
            }
            // Decoder for OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties
            Decoders.addDecoder(clazz: OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties.self) { (source: AnyObject) -> OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties()
                instance.timeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["timeout"])
                instance.targetStartLevel = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["target.start.level"])
                instance.targetStartLevelPropName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["target.start.level.prop.name"])
                instance.type = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [OrgApacheFelixSystemreadyImplServicesCheckInfo]
            Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadyImplServicesCheckInfo].self) { (source: AnyObject) -> [OrgApacheFelixSystemreadyImplServicesCheckInfo] in
                return Decoders.decode(clazz: [OrgApacheFelixSystemreadyImplServicesCheckInfo].self, source: source)
            }
            // Decoder for OrgApacheFelixSystemreadyImplServicesCheckInfo
            Decoders.addDecoder(clazz: OrgApacheFelixSystemreadyImplServicesCheckInfo.self) { (source: AnyObject) -> OrgApacheFelixSystemreadyImplServicesCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixSystemreadyImplServicesCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheFelixSystemreadyImplServicesCheckProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheFelixSystemreadyImplServicesCheckProperties]
            Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadyImplServicesCheckProperties].self) { (source: AnyObject) -> [OrgApacheFelixSystemreadyImplServicesCheckProperties] in
                return Decoders.decode(clazz: [OrgApacheFelixSystemreadyImplServicesCheckProperties].self, source: source)
            }
            // Decoder for OrgApacheFelixSystemreadyImplServicesCheckProperties
            Decoders.addDecoder(clazz: OrgApacheFelixSystemreadyImplServicesCheckProperties.self) { (source: AnyObject) -> OrgApacheFelixSystemreadyImplServicesCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixSystemreadyImplServicesCheckProperties()
                instance.servicesList = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["services.list"])
                instance.type = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo]
            Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo].self) { (source: AnyObject) -> [OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo] in
                return Decoders.decode(clazz: [OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo].self, source: source)
            }
            // Decoder for OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo
            Decoders.addDecoder(clazz: OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo.self) { (source: AnyObject) -> OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties]
            Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties].self) { (source: AnyObject) -> [OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties] in
                return Decoders.decode(clazz: [OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties].self, source: source)
            }
            // Decoder for OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties
            Decoders.addDecoder(clazz: OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties.self) { (source: AnyObject) -> OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties()
                instance.osgiHttpWhiteboardServletPattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["osgi.http.whiteboard.servlet.pattern"])
                instance.osgiHttpWhiteboardContextSelect = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["osgi.http.whiteboard.context.select"])
                return instance
            }


            // Decoder for [OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo]
            Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo].self) { (source: AnyObject) -> [OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo] in
                return Decoders.decode(clazz: [OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo].self, source: source)
            }
            // Decoder for OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo
            Decoders.addDecoder(clazz: OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo.self) { (source: AnyObject) -> OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties]
            Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties].self) { (source: AnyObject) -> [OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties] in
                return Decoders.decode(clazz: [OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties].self, source: source)
            }
            // Decoder for OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties
            Decoders.addDecoder(clazz: OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties.self) { (source: AnyObject) -> OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties()
                instance.osgiHttpWhiteboardServletPattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["osgi.http.whiteboard.servlet.pattern"])
                instance.osgiHttpWhiteboardContextSelect = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["osgi.http.whiteboard.context.select"])
                return instance
            }


            // Decoder for [OrgApacheFelixSystemreadySystemReadyMonitorInfo]
            Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadySystemReadyMonitorInfo].self) { (source: AnyObject) -> [OrgApacheFelixSystemreadySystemReadyMonitorInfo] in
                return Decoders.decode(clazz: [OrgApacheFelixSystemreadySystemReadyMonitorInfo].self, source: source)
            }
            // Decoder for OrgApacheFelixSystemreadySystemReadyMonitorInfo
            Decoders.addDecoder(clazz: OrgApacheFelixSystemreadySystemReadyMonitorInfo.self) { (source: AnyObject) -> OrgApacheFelixSystemreadySystemReadyMonitorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixSystemreadySystemReadyMonitorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheFelixSystemreadySystemReadyMonitorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheFelixSystemreadySystemReadyMonitorProperties]
            Decoders.addDecoder(clazz: [OrgApacheFelixSystemreadySystemReadyMonitorProperties].self) { (source: AnyObject) -> [OrgApacheFelixSystemreadySystemReadyMonitorProperties] in
                return Decoders.decode(clazz: [OrgApacheFelixSystemreadySystemReadyMonitorProperties].self, source: source)
            }
            // Decoder for OrgApacheFelixSystemreadySystemReadyMonitorProperties
            Decoders.addDecoder(clazz: OrgApacheFelixSystemreadySystemReadyMonitorProperties.self) { (source: AnyObject) -> OrgApacheFelixSystemreadySystemReadyMonitorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixSystemreadySystemReadyMonitorProperties()
                instance.pollInterval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["poll.interval"])
                return instance
            }


            // Decoder for [OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo]
            Decoders.addDecoder(clazz: [OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo].self) { (source: AnyObject) -> [OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo] in
                return Decoders.decode(clazz: [OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo].self, source: source)
            }
            // Decoder for OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo
            Decoders.addDecoder(clazz: OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo.self) { (source: AnyObject) -> OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties]
            Decoders.addDecoder(clazz: [OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties].self) { (source: AnyObject) -> [OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties] in
                return Decoders.decode(clazz: [OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties].self, source: source)
            }
            // Decoder for OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties
            Decoders.addDecoder(clazz: OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties.self) { (source: AnyObject) -> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties()
                instance.managerRoot = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["manager.root"])
                instance.httpServiceFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["http.service.filter"])
                instance.defaultRender = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["default.render"])
                instance.realm = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["realm"])
                instance.username = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["username"])
                instance.password = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["password"])
                instance.category = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["category"])
                instance.locale = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["locale"])
                instance.loglevel = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["loglevel"])
                instance.plugins = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["plugins"])
                return instance
            }


            // Decoder for [OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo]
            Decoders.addDecoder(clazz: [OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo].self) { (source: AnyObject) -> [OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo] in
                return Decoders.decode(clazz: [OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo].self, source: source)
            }
            // Decoder for OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo
            Decoders.addDecoder(clazz: OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo.self) { (source: AnyObject) -> OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties]
            Decoders.addDecoder(clazz: [OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties].self) { (source: AnyObject) -> [OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties] in
                return Decoders.decode(clazz: [OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties].self, source: source)
            }
            // Decoder for OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties
            Decoders.addDecoder(clazz: OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties.self) { (source: AnyObject) -> OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties()
                instance.maxSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["max.size"])
                return instance
            }


            // Decoder for [OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo]
            Decoders.addDecoder(clazz: [OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo].self) { (source: AnyObject) -> [OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo] in
                return Decoders.decode(clazz: [OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo].self, source: source)
            }
            // Decoder for OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo
            Decoders.addDecoder(clazz: OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo.self) { (source: AnyObject) -> OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties]
            Decoders.addDecoder(clazz: [OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties].self) { (source: AnyObject) -> [OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties] in
                return Decoders.decode(clazz: [OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties].self, source: source)
            }
            // Decoder for OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties
            Decoders.addDecoder(clazz: OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties.self) { (source: AnyObject) -> OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties()
                instance.felixMemoryusageDumpThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["felix.memoryusage.dump.threshold"])
                instance.felixMemoryusageDumpInterval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["felix.memoryusage.dump.interval"])
                instance.felixMemoryusageDumpLocation = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["felix.memoryusage.dump.location"])
                return instance
            }


            // Decoder for [OrgApacheHttpProxyconfiguratorInfo]
            Decoders.addDecoder(clazz: [OrgApacheHttpProxyconfiguratorInfo].self) { (source: AnyObject) -> [OrgApacheHttpProxyconfiguratorInfo] in
                return Decoders.decode(clazz: [OrgApacheHttpProxyconfiguratorInfo].self, source: source)
            }
            // Decoder for OrgApacheHttpProxyconfiguratorInfo
            Decoders.addDecoder(clazz: OrgApacheHttpProxyconfiguratorInfo.self) { (source: AnyObject) -> OrgApacheHttpProxyconfiguratorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheHttpProxyconfiguratorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheHttpProxyconfiguratorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheHttpProxyconfiguratorProperties]
            Decoders.addDecoder(clazz: [OrgApacheHttpProxyconfiguratorProperties].self) { (source: AnyObject) -> [OrgApacheHttpProxyconfiguratorProperties] in
                return Decoders.decode(clazz: [OrgApacheHttpProxyconfiguratorProperties].self, source: source)
            }
            // Decoder for OrgApacheHttpProxyconfiguratorProperties
            Decoders.addDecoder(clazz: OrgApacheHttpProxyconfiguratorProperties.self) { (source: AnyObject) -> OrgApacheHttpProxyconfiguratorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheHttpProxyconfiguratorProperties()
                instance.proxyEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["proxy.enabled"])
                instance.proxyHost = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["proxy.host"])
                instance.proxyPort = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["proxy.port"])
                instance.proxyUser = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["proxy.user"])
                instance.proxyPassword = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["proxy.password"])
                instance.proxyExceptions = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["proxy.exceptions"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties()
                instance.dir = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["dir"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties()
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties()
                instance.persistentCacheIncludes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["persistentCacheIncludes"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties()
                instance.mongouri = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["mongouri"])
                instance.db = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["db"])
                instance.socketKeepAlive = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["socketKeepAlive"])
                instance.cache = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cache"])
                instance.nodeCachePercentage = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["nodeCachePercentage"])
                instance.prevDocCachePercentage = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["prevDocCachePercentage"])
                instance.childrenCachePercentage = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["childrenCachePercentage"])
                instance.diffCachePercentage = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["diffCachePercentage"])
                instance.cacheSegmentCount = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cacheSegmentCount"])
                instance.cacheStackMoveDistance = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cacheStackMoveDistance"])
                instance.blobCacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["blobCacheSize"])
                instance.persistentCache = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["persistentCache"])
                instance.journalCache = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["journalCache"])
                instance.customBlobStore = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["customBlobStore"])
                instance.journalGCInterval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["journalGCInterval"])
                instance.journalGCMaxAge = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["journalGCMaxAge"])
                instance.prefetchExternalChanges = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["prefetchExternalChanges"])
                instance.role = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["role"])
                instance.versionGcMaxAgeInSecs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["versionGcMaxAgeInSecs"])
                instance.versionGCExpression = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["versionGCExpression"])
                instance.versionGCTimeLimitInSecs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["versionGCTimeLimitInSecs"])
                instance.blobGcMaxAgeInSecs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["blobGcMaxAgeInSecs"])
                instance.blobTrackSnapshotIntervalInSecs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["blobTrackSnapshotIntervalInSecs"])
                instance.repositoryHome = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["repository.home"])
                instance.maxReplicationLagInSecs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxReplicationLagInSecs"])
                instance.documentStoreType = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["documentStoreType"])
                instance.bundlingDisabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["bundlingDisabled"])
                instance.updateLimit = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["updateLimit"])
                instance.persistentCacheIncludes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["persistentCacheIncludes"])
                instance.leaseCheckMode = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["leaseCheckMode"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties()
                instance.includedPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["includedPaths"])
                instance.enableAsyncObserver = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableAsyncObserver"])
                instance.observerQueueSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["observerQueueSize"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties()
                instance.asyncConfigs = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["asyncConfigs"])
                instance.leaseTimeOutMinutes = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["leaseTimeOutMinutes"])
                instance.failingIndexTimeoutSeconds = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["failingIndexTimeoutSeconds"])
                instance.errorWarnIntervalSeconds = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["errorWarnIntervalSeconds"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties.self, source: sourceDictionary["properties"])
                instance.additionalProperties = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties()
                instance.disabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["disabled"])
                instance.debug = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["debug"])
                instance.localIndexDir = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["localIndexDir"])
                instance.enableOpenIndexAsync = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableOpenIndexAsync"])
                instance.threadPoolSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["threadPoolSize"])
                instance.prefetchIndexFiles = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["prefetchIndexFiles"])
                instance.extractedTextCacheSizeInMB = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["extractedTextCacheSizeInMB"])
                instance.extractedTextCacheExpiryInSecs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["extractedTextCacheExpiryInSecs"])
                instance.alwaysUsePreExtractedCache = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["alwaysUsePreExtractedCache"])
                instance.booleanClauseLimit = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["booleanClauseLimit"])
                instance.enableHybridIndexing = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableHybridIndexing"])
                instance.hybridQueueSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["hybridQueueSize"])
                instance.disableStoredIndexDefinition = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["disableStoredIndexDefinition"])
                instance.deletedBlobsCollectionEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["deletedBlobsCollectionEnabled"])
                instance.propIndexCleanerIntervalInSecs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["propIndexCleanerIntervalInSecs"])
                instance.enableSingleBlobIndexFiles = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableSingleBlobIndexFiles"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties()
                instance.solrHomePath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["solr.home.path"])
                instance.solrCoreName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["solr.core.name"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties()
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties()
                instance.pathDescField = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path.desc.field"])
                instance.pathChildField = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path.child.field"])
                instance.pathParentField = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path.parent.field"])
                instance.pathExactField = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path.exact.field"])
                instance.catchAllField = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["catch.all.field"])
                instance.collapsedPathField = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["collapsed.path.field"])
                instance.pathDepthField = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path.depth.field"])
                instance.commitPolicy = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["commit.policy"])
                instance.rows = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["rows"])
                instance.pathRestrictions = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["path.restrictions"])
                instance.propertyRestrictions = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["property.restrictions"])
                instance.primarytypesRestrictions = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["primarytypes.restrictions"])
                instance.ignoredProperties = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["ignored.properties"])
                instance.usedProperties = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["used.properties"])
                instance.typeMappings = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["type.mappings"])
                instance.propertyMappings = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["property.mappings"])
                instance.collapseJcrcontentNodes = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["collapse.jcrcontent.nodes"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties()
                instance.solrHttpUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["solr.http.url"])
                instance.solrZkHost = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["solr.zk.host"])
                instance.solrCollection = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["solr.collection"])
                instance.solrSocketTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["solr.socket.timeout"])
                instance.solrConnectionTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["solr.connection.timeout"])
                instance.solrShardsNo = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["solr.shards.no"])
                instance.solrReplicationFactor = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["solr.replication.factor"])
                instance.solrConfDir = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["solr.conf.dir"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties()
                instance.queryAggregation = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["query.aggregation"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties()
                instance.serverType = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["server.type"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties()
                instance.providerType = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["providerType"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties()
                instance.maxItems = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxItems"])
                instance.maxPathDepth = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxPathDepth"])
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties()
                instance.queryLimitInMemory = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queryLimitInMemory"])
                instance.queryLimitReads = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queryLimitReads"])
                instance.queryFailTraversal = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["queryFailTraversal"])
                instance.fastQuerySize = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["fastQuerySize"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties()
                instance.orgApacheJackrabbitOakAuthenticationAppName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.jackrabbit.oak.authentication.appName"])
                instance.orgApacheJackrabbitOakAuthenticationConfigSpiName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.jackrabbit.oak.authentication.configSpiName"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties()
                instance.providerName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["provider.name"])
                instance.hostName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["host.name"])
                instance.hostPort = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["host.port"])
                instance.hostSsl = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["host.ssl"])
                instance.hostTls = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["host.tls"])
                instance.hostNoCertCheck = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["host.noCertCheck"])
                instance.bindDn = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["bind.dn"])
                instance.bindPassword = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["bind.password"])
                instance.searchTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["searchTimeout"])
                instance.adminPoolMaxActive = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["adminPool.maxActive"])
                instance.adminPoolLookupOnValidate = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["adminPool.lookupOnValidate"])
                instance.userPoolMaxActive = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["userPool.maxActive"])
                instance.userPoolLookupOnValidate = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["userPool.lookupOnValidate"])
                instance.userBaseDN = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["user.baseDN"])
                instance.userObjectclass = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["user.objectclass"])
                instance.userIdAttribute = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["user.idAttribute"])
                instance.userExtraFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["user.extraFilter"])
                instance.userMakeDnPath = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["user.makeDnPath"])
                instance.groupBaseDN = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["group.baseDN"])
                instance.groupObjectclass = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["group.objectclass"])
                instance.groupNameAttribute = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["group.nameAttribute"])
                instance.groupExtraFilter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["group.extraFilter"])
                instance.groupMakeDnPath = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["group.makeDnPath"])
                instance.groupMemberAttribute = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["group.memberAttribute"])
                instance.useUidForExtId = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["useUidForExtId"])
                instance.customattributes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["customattributes"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties()
                instance.tokenExpiration = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tokenExpiration"])
                instance.tokenLength = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tokenLength"])
                instance.tokenRefresh = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["tokenRefresh"])
                instance.tokenCleanupThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["tokenCleanupThreshold"])
                instance.passwordHashAlgorithm = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["passwordHashAlgorithm"])
                instance.passwordHashIterations = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["passwordHashIterations"])
                instance.passwordSaltSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["passwordSaltSize"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties()
                instance.permissionsJr2 = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["permissionsJr2"])
                instance.importBehavior = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["importBehavior"])
                instance.readPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["readPaths"])
                instance.administrativePrincipals = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["administrativePrincipals"])
                instance.configurationRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["configurationRanking"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties()
                instance.requiredServicePids = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["requiredServicePids"])
                instance.authorizationCompositionType = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["authorizationCompositionType"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties()
                instance.length = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["length"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties()
                instance.usersPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["usersPath"])
                instance.groupsPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["groupsPath"])
                instance.systemRelativePath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["systemRelativePath"])
                instance.defaultDepth = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["defaultDepth"])
                instance.importBehavior = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["importBehavior"])
                instance.passwordHashAlgorithm = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["passwordHashAlgorithm"])
                instance.passwordHashIterations = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["passwordHashIterations"])
                instance.passwordSaltSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["passwordSaltSize"])
                instance.omitAdminPw = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["omitAdminPw"])
                instance.supportAutoSave = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["supportAutoSave"])
                instance.passwordMaxAge = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["passwordMaxAge"])
                instance.initialPasswordChange = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["initialPasswordChange"])
                instance.passwordHistorySize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["passwordHistorySize"])
                instance.passwordExpiryForAdmin = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["passwordExpiryForAdmin"])
                instance.cacheExpiration = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cacheExpiration"])
                instance.enableRFC7613UsercaseMappedProfile = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableRFC7613UsercaseMappedProfile"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties()
                instance.accountName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["accountName"])
                instance.containerName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["containerName"])
                instance.accessKey = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["accessKey"])
                instance.rootPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["rootPath"])
                instance.connectionURL = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["connectionURL"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties()
                instance.repositoryHome = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["repository.home"])
                instance.tarmkMode = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tarmk.mode"])
                instance.tarmkSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["tarmk.size"])
                instance.segmentCacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["segmentCache.size"])
                instance.stringCacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["stringCache.size"])
                instance.templateCacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["templateCache.size"])
                instance.stringDeduplicationCacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["stringDeduplicationCache.size"])
                instance.templateDeduplicationCacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["templateDeduplicationCache.size"])
                instance.nodeDeduplicationCacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["nodeDeduplicationCache.size"])
                instance.pauseCompaction = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["pauseCompaction"])
                instance.compactionRetryCount = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.retryCount"])
                instance.compactionForceTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.force.timeout"])
                instance.compactionSizeDeltaEstimation = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.sizeDeltaEstimation"])
                instance.compactionDisableEstimation = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["compaction.disableEstimation"])
                instance.compactionRetainedGenerations = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.retainedGenerations"])
                instance.compactionMemoryThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.memoryThreshold"])
                instance.compactionProgressLog = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.progressLog"])
                instance.standby = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["standby"])
                instance.customBlobStore = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["customBlobStore"])
                instance.customSegmentStore = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["customSegmentStore"])
                instance.splitPersistence = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["splitPersistence"])
                instance.repositoryBackupDir = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["repository.backup.dir"])
                instance.blobGcMaxAgeInSecs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["blobGcMaxAgeInSecs"])
                instance.blobTrackSnapshotIntervalInSecs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["blobTrackSnapshotIntervalInSecs"])
                instance.role = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["role"])
                instance.registerDescriptors = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["registerDescriptors"])
                instance.dispatchChanges = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["dispatchChanges"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties()
                instance.commitsTrackerWriterGroups = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["commitsTrackerWriterGroups"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties.self, source: sourceDictionary["properties"])
                instance.additionalProperties = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties()
                instance.repositoryHome = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["repository.home"])
                instance.tarmkMode = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tarmk.mode"])
                instance.tarmkSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["tarmk.size"])
                instance.segmentCacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["segmentCache.size"])
                instance.stringCacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["stringCache.size"])
                instance.templateCacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["templateCache.size"])
                instance.stringDeduplicationCacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["stringDeduplicationCache.size"])
                instance.templateDeduplicationCacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["templateDeduplicationCache.size"])
                instance.nodeDeduplicationCacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["nodeDeduplicationCache.size"])
                instance.pauseCompaction = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["pauseCompaction"])
                instance.compactionRetryCount = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.retryCount"])
                instance.compactionForceTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.force.timeout"])
                instance.compactionSizeDeltaEstimation = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.sizeDeltaEstimation"])
                instance.compactionDisableEstimation = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["compaction.disableEstimation"])
                instance.compactionRetainedGenerations = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.retainedGenerations"])
                instance.compactionMemoryThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.memoryThreshold"])
                instance.compactionProgressLog = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["compaction.progressLog"])
                instance.standby = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["standby"])
                instance.customBlobStore = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["customBlobStore"])
                instance.customSegmentStore = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["customSegmentStore"])
                instance.splitPersistence = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["splitPersistence"])
                instance.repositoryBackupDir = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["repository.backup.dir"])
                instance.blobGcMaxAgeInSecs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["blobGcMaxAgeInSecs"])
                instance.blobTrackSnapshotIntervalInSecs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["blobTrackSnapshotIntervalInSecs"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties()
                instance.orgApacheSlingInstallerConfigurationPersist = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.sling.installer.configuration.persist"])
                instance.mode = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["mode"])
                instance.port = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["port"])
                instance.primaryHost = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["primary.host"])
                instance.interval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["interval"])
                instance.primaryAllowedClientIpRanges = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["primary.allowed-client-ip-ranges"])
                instance.secure = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["secure"])
                instance.standbyReadtimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["standby.readtimeout"])
                instance.standbyAutoclean = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["standby.autoclean"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties()
                instance.handlerName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["handler.name"])
                instance.userExpirationTime = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["user.expirationTime"])
                instance.userAutoMembership = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["user.autoMembership"])
                instance.userPropertyMapping = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["user.propertyMapping"])
                instance.userPathPrefix = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["user.pathPrefix"])
                instance.userMembershipExpTime = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["user.membershipExpTime"])
                instance.userMembershipNestingDepth = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["user.membershipNestingDepth"])
                instance.userDynamicMembership = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["user.dynamicMembership"])
                instance.userDisableMissing = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["user.disableMissing"])
                instance.groupExpirationTime = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["group.expirationTime"])
                instance.groupAutoMembership = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["group.autoMembership"])
                instance.groupPropertyMapping = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["group.propertyMapping"])
                instance.groupPathPrefix = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["group.pathPrefix"])
                instance.enableRFC7613UsercaseMappedProfile = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableRFC7613UsercaseMappedProfile"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties()
                instance.jaasRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["jaas.ranking"])
                instance.jaasControlFlag = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jaas.controlFlag"])
                instance.jaasRealmName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jaas.realmName"])
                instance.idpName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["idp.name"])
                instance.syncHandlerName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sync.handlerName"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties()
                instance.protectExternalId = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["protectExternalId"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties()
                instance.cugSupportedPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["cugSupportedPaths"])
                instance.cugEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["cugEnabled"])
                instance.configurationRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["configurationRanking"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties()
                instance.principalNames = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["principalNames"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties()
                instance.enabledActions = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["enabledActions"])
                instance.userPrivilegeNames = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["userPrivilegeNames"])
                instance.groupPrivilegeNames = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["groupPrivilegeNames"])
                instance.constraint = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["constraint"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties()
                instance.packageRoots = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["packageRoots"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo].self) { (source: AnyObject) -> [OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo
            Decoders.addDecoder(clazz: OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo.self) { (source: AnyObject) -> OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryProperties]
            Decoders.addDecoder(clazz: [OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryProperties].self) { (source: AnyObject) -> [OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryProperties] in
                return Decoders.decode(clazz: [OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryProperties].self, source: source)
            }
            // Decoder for OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryProperties
            Decoders.addDecoder(clazz: OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryProperties.self) { (source: AnyObject) -> OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryProperties()
                instance.homePath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["homePath"])
                return instance
            }


            // Decoder for [OrgApacheSlingAuthCoreImplLogoutServletInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingAuthCoreImplLogoutServletInfo].self) { (source: AnyObject) -> [OrgApacheSlingAuthCoreImplLogoutServletInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingAuthCoreImplLogoutServletInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingAuthCoreImplLogoutServletInfo
            Decoders.addDecoder(clazz: OrgApacheSlingAuthCoreImplLogoutServletInfo.self) { (source: AnyObject) -> OrgApacheSlingAuthCoreImplLogoutServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingAuthCoreImplLogoutServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingAuthCoreImplLogoutServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingAuthCoreImplLogoutServletProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingAuthCoreImplLogoutServletProperties].self) { (source: AnyObject) -> [OrgApacheSlingAuthCoreImplLogoutServletProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingAuthCoreImplLogoutServletProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingAuthCoreImplLogoutServletProperties
            Decoders.addDecoder(clazz: OrgApacheSlingAuthCoreImplLogoutServletProperties.self) { (source: AnyObject) -> OrgApacheSlingAuthCoreImplLogoutServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingAuthCoreImplLogoutServletProperties()
                instance.slingServletMethods = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.servlet.methods"])
                instance.slingServletPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.servlet.paths"])
                return instance
            }


            // Decoder for [OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo].self) { (source: AnyObject) -> [OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo
            Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo.self) { (source: AnyObject) -> OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties].self) { (source: AnyObject) -> [OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties
            Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties.self) { (source: AnyObject) -> OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties()
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                return instance
            }


            // Decoder for [OrgApacheSlingCaconfigImplConfigurationResolverImplInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplConfigurationResolverImplInfo].self) { (source: AnyObject) -> [OrgApacheSlingCaconfigImplConfigurationResolverImplInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplConfigurationResolverImplInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingCaconfigImplConfigurationResolverImplInfo
            Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplConfigurationResolverImplInfo.self) { (source: AnyObject) -> OrgApacheSlingCaconfigImplConfigurationResolverImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCaconfigImplConfigurationResolverImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingCaconfigImplConfigurationResolverImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingCaconfigImplConfigurationResolverImplProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplConfigurationResolverImplProperties].self) { (source: AnyObject) -> [OrgApacheSlingCaconfigImplConfigurationResolverImplProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplConfigurationResolverImplProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingCaconfigImplConfigurationResolverImplProperties
            Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplConfigurationResolverImplProperties.self) { (source: AnyObject) -> OrgApacheSlingCaconfigImplConfigurationResolverImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCaconfigImplConfigurationResolverImplProperties()
                instance.configBucketNames = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["configBucketNames"])
                return instance
            }


            // Decoder for [OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo].self) { (source: AnyObject) -> [OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo
            Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo.self) { (source: AnyObject) -> OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties].self) { (source: AnyObject) -> [OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties
            Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties.self) { (source: AnyObject) -> OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties()
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                instance.configPropertyInheritancePropertyNames = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["configPropertyInheritancePropertyNames"])
                return instance
            }


            // Decoder for [OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo].self) { (source: AnyObject) -> [OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo
            Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo.self) { (source: AnyObject) -> OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties].self) { (source: AnyObject) -> [OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties
            Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties.self) { (source: AnyObject) -> OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties()
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                return instance
            }


            // Decoder for [OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo].self) { (source: AnyObject) -> [OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo
            Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo.self) { (source: AnyObject) -> OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties].self) { (source: AnyObject) -> [OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties
            Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties.self) { (source: AnyObject) -> OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties()
                instance.description = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["description"])
                instance.overrides = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["overrides"])
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                return instance
            }


            // Decoder for [OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo].self) { (source: AnyObject) -> [OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo
            Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo.self) { (source: AnyObject) -> OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties].self) { (source: AnyObject) -> [OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties
            Decoders.addDecoder(clazz: OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties.self) { (source: AnyObject) -> OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties()
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                return instance
            }


            // Decoder for [OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo].self) { (source: AnyObject) -> [OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo
            Decoders.addDecoder(clazz: OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo.self) { (source: AnyObject) -> OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties].self) { (source: AnyObject) -> [OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties
            Decoders.addDecoder(clazz: OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties.self) { (source: AnyObject) -> OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties()
                instance.ignorePropertyNameRegex = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["ignorePropertyNameRegex"])
                instance.configCollectionPropertiesResourceNames = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["configCollectionPropertiesResourceNames"])
                return instance
            }


            // Decoder for [OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo].self) { (source: AnyObject) -> [OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo
            Decoders.addDecoder(clazz: OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo.self) { (source: AnyObject) -> OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties].self) { (source: AnyObject) -> [OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties
            Decoders.addDecoder(clazz: OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties.self) { (source: AnyObject) -> OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties()
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                instance.configPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["configPath"])
                instance.fallbackPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["fallbackPaths"])
                instance.configCollectionInheritancePropertyNames = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["configCollectionInheritancePropertyNames"])
                return instance
            }


            // Decoder for [OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo].self) { (source: AnyObject) -> [OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo
            Decoders.addDecoder(clazz: OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo.self) { (source: AnyObject) -> OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties].self) { (source: AnyObject) -> [OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties
            Decoders.addDecoder(clazz: OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties.self) { (source: AnyObject) -> OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties()
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                instance.configRefResourceNames = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["configRefResourceNames"])
                instance.configRefPropertyNames = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["configRefPropertyNames"])
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                return instance
            }


            // Decoder for [OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo].self) { (source: AnyObject) -> [OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo
            Decoders.addDecoder(clazz: OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo.self) { (source: AnyObject) -> OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties].self) { (source: AnyObject) -> [OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties
            Decoders.addDecoder(clazz: OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties.self) { (source: AnyObject) -> OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties()
                instance.parserFeatures = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["parser.features"])
                return instance
            }


            // Decoder for [OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo].self) { (source: AnyObject) -> [OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo
            Decoders.addDecoder(clazz: OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo.self) { (source: AnyObject) -> OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties].self) { (source: AnyObject) -> [OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties
            Decoders.addDecoder(clazz: OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties.self) { (source: AnyObject) -> OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties()
                instance.orgApacheSlingCommonsLogLevel = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["org.apache.sling.commons.log.level"])
                instance.orgApacheSlingCommonsLogFile = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.commons.log.file"])
                instance.orgApacheSlingCommonsLogPattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.commons.log.pattern"])
                instance.orgApacheSlingCommonsLogNames = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.sling.commons.log.names"])
                instance.orgApacheSlingCommonsLogAdditiv = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.sling.commons.log.additiv"])
                return instance
            }


            // Decoder for [OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo].self) { (source: AnyObject) -> [OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo
            Decoders.addDecoder(clazz: OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo.self) { (source: AnyObject) -> OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties].self) { (source: AnyObject) -> [OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties
            Decoders.addDecoder(clazz: OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties.self) { (source: AnyObject) -> OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties()
                instance.orgApacheSlingCommonsLogFile = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.commons.log.file"])
                instance.orgApacheSlingCommonsLogFileNumber = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.sling.commons.log.file.number"])
                instance.orgApacheSlingCommonsLogFileSize = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.commons.log.file.size"])
                instance.orgApacheSlingCommonsLogFileBuffered = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.sling.commons.log.file.buffered"])
                return instance
            }


            // Decoder for [OrgApacheSlingCommonsLogLogManagerInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingCommonsLogLogManagerInfo].self) { (source: AnyObject) -> [OrgApacheSlingCommonsLogLogManagerInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingCommonsLogLogManagerInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingCommonsLogLogManagerInfo
            Decoders.addDecoder(clazz: OrgApacheSlingCommonsLogLogManagerInfo.self) { (source: AnyObject) -> OrgApacheSlingCommonsLogLogManagerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCommonsLogLogManagerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingCommonsLogLogManagerProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingCommonsLogLogManagerProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingCommonsLogLogManagerProperties].self) { (source: AnyObject) -> [OrgApacheSlingCommonsLogLogManagerProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingCommonsLogLogManagerProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingCommonsLogLogManagerProperties
            Decoders.addDecoder(clazz: OrgApacheSlingCommonsLogLogManagerProperties.self) { (source: AnyObject) -> OrgApacheSlingCommonsLogLogManagerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCommonsLogLogManagerProperties()
                instance.orgApacheSlingCommonsLogLevel = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["org.apache.sling.commons.log.level"])
                instance.orgApacheSlingCommonsLogFile = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.commons.log.file"])
                instance.orgApacheSlingCommonsLogFileNumber = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.sling.commons.log.file.number"])
                instance.orgApacheSlingCommonsLogFileSize = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.commons.log.file.size"])
                instance.orgApacheSlingCommonsLogPattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.commons.log.pattern"])
                instance.orgApacheSlingCommonsLogConfigurationFile = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.commons.log.configurationFile"])
                instance.orgApacheSlingCommonsLogPackagingDataEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.sling.commons.log.packagingDataEnabled"])
                instance.orgApacheSlingCommonsLogMaxCallerDataDepth = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.sling.commons.log.maxCallerDataDepth"])
                instance.orgApacheSlingCommonsLogMaxOldFileCountInDump = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.sling.commons.log.maxOldFileCountInDump"])
                instance.orgApacheSlingCommonsLogNumOfLines = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.sling.commons.log.numOfLines"])
                return instance
            }


            // Decoder for [OrgApacheSlingCommonsMetricsInternalLogReporterInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingCommonsMetricsInternalLogReporterInfo].self) { (source: AnyObject) -> [OrgApacheSlingCommonsMetricsInternalLogReporterInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingCommonsMetricsInternalLogReporterInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingCommonsMetricsInternalLogReporterInfo
            Decoders.addDecoder(clazz: OrgApacheSlingCommonsMetricsInternalLogReporterInfo.self) { (source: AnyObject) -> OrgApacheSlingCommonsMetricsInternalLogReporterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCommonsMetricsInternalLogReporterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingCommonsMetricsInternalLogReporterProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingCommonsMetricsInternalLogReporterProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingCommonsMetricsInternalLogReporterProperties].self) { (source: AnyObject) -> [OrgApacheSlingCommonsMetricsInternalLogReporterProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingCommonsMetricsInternalLogReporterProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingCommonsMetricsInternalLogReporterProperties
            Decoders.addDecoder(clazz: OrgApacheSlingCommonsMetricsInternalLogReporterProperties.self) { (source: AnyObject) -> OrgApacheSlingCommonsMetricsInternalLogReporterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCommonsMetricsInternalLogReporterProperties()
                instance.period = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["period"])
                instance.timeUnit = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["timeUnit"])
                instance.level = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["level"])
                instance.loggerName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["loggerName"])
                instance._prefix = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["prefix"])
                instance.pattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["pattern"])
                instance.registryName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["registryName"])
                return instance
            }


            // Decoder for [OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo].self) { (source: AnyObject) -> [OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo
            Decoders.addDecoder(clazz: OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo.self) { (source: AnyObject) -> OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties].self) { (source: AnyObject) -> [OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties
            Decoders.addDecoder(clazz: OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties.self) { (source: AnyObject) -> OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties()
                instance.datasources = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["datasources"])
                instance.step = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["step"])
                instance.archives = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["archives"])
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"])
                return instance
            }


            // Decoder for [OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo].self) { (source: AnyObject) -> [OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo
            Decoders.addDecoder(clazz: OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo.self) { (source: AnyObject) -> OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties].self) { (source: AnyObject) -> [OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties
            Decoders.addDecoder(clazz: OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties.self) { (source: AnyObject) -> OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties()
                instance.mimeTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["mime.types"])
                return instance
            }


            // Decoder for [OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo].self) { (source: AnyObject) -> [OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo
            Decoders.addDecoder(clazz: OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo.self) { (source: AnyObject) -> OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties].self) { (source: AnyObject) -> [OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties
            Decoders.addDecoder(clazz: OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties.self) { (source: AnyObject) -> OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties()
                instance.poolName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["poolName"])
                instance.allowedPoolNames = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["allowedPoolNames"])
                instance.schedulerUseleaderforsingle = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["scheduler.useleaderforsingle"])
                instance.metricsFilters = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["metrics.filters"])
                instance.slowThresholdMillis = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["slowThresholdMillis"])
                return instance
            }


            // Decoder for [OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo].self) { (source: AnyObject) -> [OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo
            Decoders.addDecoder(clazz: OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo.self) { (source: AnyObject) -> OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties].self) { (source: AnyObject) -> [OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties
            Decoders.addDecoder(clazz: OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties.self) { (source: AnyObject) -> OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties()
                instance.maxQuartzJobDurationAcceptable = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["max.quartzJob.duration.acceptable"])
                return instance
            }


            // Decoder for [OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo].self) { (source: AnyObject) -> [OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo
            Decoders.addDecoder(clazz: OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo.self) { (source: AnyObject) -> OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties].self) { (source: AnyObject) -> [OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties
            Decoders.addDecoder(clazz: OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.self) { (source: AnyObject) -> OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.minPoolSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minPoolSize"])
                instance.maxPoolSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxPoolSize"])
                instance.queueSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queueSize"])
                instance.maxThreadAge = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxThreadAge"])
                instance.keepAliveTime = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["keepAliveTime"])
                instance.blockPolicy = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["blockPolicy"])
                instance.shutdownGraceful = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["shutdownGraceful"])
                instance.daemon = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["daemon"])
                instance.shutdownWaitTime = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["shutdownWaitTime"])
                instance.priority = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["priority"])
                return instance
            }


            // Decoder for [OrgApacheSlingDatasourceDataSourceFactoryInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDatasourceDataSourceFactoryInfo].self) { (source: AnyObject) -> [OrgApacheSlingDatasourceDataSourceFactoryInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDatasourceDataSourceFactoryInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDatasourceDataSourceFactoryInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDatasourceDataSourceFactoryInfo.self) { (source: AnyObject) -> OrgApacheSlingDatasourceDataSourceFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDatasourceDataSourceFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDatasourceDataSourceFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDatasourceDataSourceFactoryProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDatasourceDataSourceFactoryProperties].self) { (source: AnyObject) -> [OrgApacheSlingDatasourceDataSourceFactoryProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDatasourceDataSourceFactoryProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDatasourceDataSourceFactoryProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDatasourceDataSourceFactoryProperties.self) { (source: AnyObject) -> OrgApacheSlingDatasourceDataSourceFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDatasourceDataSourceFactoryProperties()
                instance.datasourceName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["datasource.name"])
                instance.datasourceSvcPropName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["datasource.svc.prop.name"])
                instance.driverClassName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["driverClassName"])
                instance.url = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["url"])
                instance.username = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["username"])
                instance.password = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["password"])
                instance.defaultAutoCommit = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["defaultAutoCommit"])
                instance.defaultReadOnly = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["defaultReadOnly"])
                instance.defaultTransactionIsolation = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["defaultTransactionIsolation"])
                instance.defaultCatalog = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["defaultCatalog"])
                instance.maxActive = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxActive"])
                instance.maxIdle = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxIdle"])
                instance.minIdle = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minIdle"])
                instance.initialSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["initialSize"])
                instance.maxWait = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxWait"])
                instance.maxAge = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxAge"])
                instance.testOnBorrow = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["testOnBorrow"])
                instance.testOnReturn = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["testOnReturn"])
                instance.testWhileIdle = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["testWhileIdle"])
                instance.validationQuery = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["validationQuery"])
                instance.validationQueryTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["validationQueryTimeout"])
                instance.timeBetweenEvictionRunsMillis = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["timeBetweenEvictionRunsMillis"])
                instance.minEvictableIdleTimeMillis = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minEvictableIdleTimeMillis"])
                instance.connectionProperties = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["connectionProperties"])
                instance.initSQL = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["initSQL"])
                instance.jdbcInterceptors = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jdbcInterceptors"])
                instance.validationInterval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["validationInterval"])
                instance.logValidationErrors = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["logValidationErrors"])
                instance.datasourceSvcProperties = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["datasource.svc.properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo].self) { (source: AnyObject) -> [OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo.self) { (source: AnyObject) -> OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties].self) { (source: AnyObject) -> [OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties.self) { (source: AnyObject) -> OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties()
                instance.datasourceName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["datasource.name"])
                instance.datasourceSvcPropName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["datasource.svc.prop.name"])
                instance.datasourceJndiName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["datasource.jndi.name"])
                instance.jndiProperties = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["jndi.properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDiscoveryOakConfigInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDiscoveryOakConfigInfo].self) { (source: AnyObject) -> [OrgApacheSlingDiscoveryOakConfigInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDiscoveryOakConfigInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDiscoveryOakConfigInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDiscoveryOakConfigInfo.self) { (source: AnyObject) -> OrgApacheSlingDiscoveryOakConfigInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDiscoveryOakConfigInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDiscoveryOakConfigProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingDiscoveryOakConfigProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDiscoveryOakConfigProperties].self) { (source: AnyObject) -> [OrgApacheSlingDiscoveryOakConfigProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDiscoveryOakConfigProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDiscoveryOakConfigProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDiscoveryOakConfigProperties.self) { (source: AnyObject) -> OrgApacheSlingDiscoveryOakConfigProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDiscoveryOakConfigProperties()
                instance.connectorPingTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["connectorPingTimeout"])
                instance.connectorPingInterval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["connectorPingInterval"])
                instance.discoveryLiteCheckInterval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["discoveryLiteCheckInterval"])
                instance.clusterSyncServiceTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["clusterSyncServiceTimeout"])
                instance.clusterSyncServiceInterval = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["clusterSyncServiceInterval"])
                instance.enableSyncToken = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableSyncToken"])
                instance.minEventDelay = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minEventDelay"])
                instance.socketConnectTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["socketConnectTimeout"])
                instance.soTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["soTimeout"])
                instance.topologyConnectorUrls = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["topologyConnectorUrls"])
                instance.topologyConnectorWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["topologyConnectorWhitelist"])
                instance.autoStopLocalLoopEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["autoStopLocalLoopEnabled"])
                instance.gzipConnectorRequestsEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["gzipConnectorRequestsEnabled"])
                instance.hmacEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["hmacEnabled"])
                instance.enableEncryption = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enableEncryption"])
                instance.sharedKey = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sharedKey"])
                instance.hmacSharedKeyTTL = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["hmacSharedKeyTTL"])
                instance.backoffStandbyFactor = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["backoffStandbyFactor"])
                instance.backoffStableFactor = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["backoffStableFactor"])
                return instance
            }


            // Decoder for [OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo].self) { (source: AnyObject) -> [OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo.self) { (source: AnyObject) -> OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties].self) { (source: AnyObject) -> [OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties.self) { (source: AnyObject) -> OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties()
                instance.hcName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.name"])
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                instance.hcMbeanName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.mbean.name"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.title = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["title"])
                instance.details = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["details"])
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                instance.serviceName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"])
                instance.logLevel = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["log.level"])
                instance.allowedRoots = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["allowed.roots"])
                instance.queueProcessingEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["queue.processing.enabled"])
                instance.packageImporterEndpoints = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["packageImporter.endpoints"])
                instance.passiveQueues = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["passiveQueues"])
                instance.priorityQueues = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["priorityQueues"])
                instance.retryStrategy = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["retry.strategy"])
                instance.retryAttempts = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["retry.attempts"])
                instance.requestAuthorizationStrategyTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["requestAuthorizationStrategy.target"])
                instance.transportSecretProviderTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["transportSecretProvider.target"])
                instance.packageBuilderTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["packageBuilder.target"])
                instance.triggersTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["triggers.target"])
                instance.queueProvider = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["queue.provider"])
                instance.asyncDelivery = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["async.delivery"])
                instance.httpConnTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["http.conn.timeout"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.jcrPrivilege = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jcrPrivilege"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.title = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["title"])
                instance.details = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["details"])
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                instance.serviceName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"])
                instance.logLevel = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["log.level"])
                instance.allowedRoots = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["allowed.roots"])
                instance.requestAuthorizationStrategyTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["requestAuthorizationStrategy.target"])
                instance.queueProviderFactoryTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["queueProviderFactory.target"])
                instance.packageBuilderTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["packageBuilder.target"])
                instance.triggersTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["triggers.target"])
                instance.priorityQueues = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["priorityQueues"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.title = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["title"])
                instance.details = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["details"])
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                instance.serviceName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"])
                instance.logLevel = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["log.level"])
                instance.queueProcessingEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["queue.processing.enabled"])
                instance.packageExporterEndpoints = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["packageExporter.endpoints"])
                instance.pullItems = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["pull.items"])
                instance.httpConnTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["http.conn.timeout"])
                instance.requestAuthorizationStrategyTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["requestAuthorizationStrategy.target"])
                instance.transportSecretProviderTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["transportSecretProvider.target"])
                instance.packageBuilderTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["packageBuilder.target"])
                instance.triggersTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["triggers.target"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.title = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["title"])
                instance.details = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["details"])
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                instance.serviceName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"])
                instance.logLevel = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["log.level"])
                instance.queueProcessingEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["queue.processing.enabled"])
                instance.packageExporterTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["packageExporter.target"])
                instance.packageImporterTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["packageImporter.target"])
                instance.requestAuthorizationStrategyTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["requestAuthorizationStrategy.target"])
                instance.triggersTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["triggers.target"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.title = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["title"])
                instance.details = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["details"])
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                instance.serviceName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"])
                instance.logLevel = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["log.level"])
                instance.queueProcessingEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["queue.processing.enabled"])
                instance.passiveQueues = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["passiveQueues"])
                instance.packageExporterEndpoints = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["packageExporter.endpoints"])
                instance.packageImporterEndpoints = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["packageImporter.endpoints"])
                instance.retryStrategy = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["retry.strategy"])
                instance.retryAttempts = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["retry.attempts"])
                instance.pullItems = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["pull.items"])
                instance.httpConnTimeout = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["http.conn.timeout"])
                instance.requestAuthorizationStrategyTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["requestAuthorizationStrategy.target"])
                instance.transportSecretProviderTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["transportSecretProvider.target"])
                instance.packageBuilderTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["packageBuilder.target"])
                instance.triggersTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["triggers.target"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties()
                instance.hcName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.name"])
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                instance.hcMbeanName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.mbean.name"])
                instance.numberOfRetriesAllowed = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["numberOfRetriesAllowed"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.queue = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["queue"])
                instance.dropInvalidItems = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["drop.invalid.items"])
                instance.agentTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["agent.target"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.packageBuilderTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["packageBuilder.target"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.endpoints = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["endpoints"])
                instance.pullItems = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["pull.items"])
                instance.packageBuilderTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["packageBuilder.target"])
                instance.transportSecretProviderTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["transportSecretProvider.target"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.packageBuilderTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["packageBuilder.target"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.endpoints = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["endpoints"])
                instance.transportSecretProviderTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["transportSecretProvider.target"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.serviceName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["service.name"])
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"])
                instance.privilegeName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["privilege.name"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties()
                instance.providerRoots = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["provider.roots"])
                instance.kind = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["kind"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties()
                instance.providerRoots = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["provider.roots"])
                instance.kind = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["kind"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.type = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["type"])
                instance.formatTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["format.target"])
                instance.tempFsFolder = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tempFsFolder"])
                instance.fileThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["fileThreshold"])
                instance.memoryUnit = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["memoryUnit"])
                instance.useOffHeapMemory = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["useOffHeapMemory"])
                instance.digestAlgorithm = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["digestAlgorithm"])
                instance.monitoringQueueSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["monitoringQueueSize"])
                instance.cleanupDelay = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cleanupDelay"])
                instance.packageFilters = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["package.filters"])
                instance.propertyFilters = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["property.filters"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.type = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["type"])
                instance.importMode = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["importMode"])
                instance.aclHandling = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["aclHandling"])
                instance.packageRoots = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["package.roots"])
                instance.packageFilters = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["package.filters"])
                instance.propertyFilters = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["property.filters"])
                instance.tempFsFolder = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tempFsFolder"])
                instance.useBinaryReferences = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["useBinaryReferences"])
                instance.autoSaveThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["autoSaveThreshold"])
                instance.cleanupDelay = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cleanupDelay"])
                instance.fileThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["fileThreshold"])
                instance.MEGA_BYTES = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["MEGA_BYTES"])
                instance.useOffHeapMemory = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["useOffHeapMemory"])
                instance.digestAlgorithm = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["digestAlgorithm"])
                instance.monitoringQueueSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["monitoringQueueSize"])
                instance.pathsMapping = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["pathsMapping"])
                instance.strictImport = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["strictImport"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.username = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["username"])
                instance.password = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["password"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"])
                instance.ignoredPathsPatterns = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["ignoredPathsPatterns"])
                instance.serviceName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"])
                instance.deep = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["deep"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"])
                instance.serviceName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"])
                instance.nuggetsPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["nuggetsPath"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.endpoint = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["endpoint"])
                instance.transportSecretProviderTarget = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["transportSecretProvider.target"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo].self) { (source: AnyObject) -> [OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo.self) { (source: AnyObject) -> OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties].self) { (source: AnyObject) -> [OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties
            Decoders.addDecoder(clazz: OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties.self) { (source: AnyObject) -> OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"])
                instance.seconds = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["seconds"])
                instance.serviceName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["serviceName"])
                return instance
            }


            // Decoder for [OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo].self) { (source: AnyObject) -> [OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo
            Decoders.addDecoder(clazz: OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo.self) { (source: AnyObject) -> OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties].self) { (source: AnyObject) -> [OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties
            Decoders.addDecoder(clazz: OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties.self) { (source: AnyObject) -> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties()
                instance.osgiHttpWhiteboardContextSelect = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["osgi.http.whiteboard.context.select"])
                instance.osgiHttpWhiteboardListener = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["osgi.http.whiteboard.listener"])
                instance.authSudoCookie = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.sudo.cookie"])
                instance.authSudoParameter = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.sudo.parameter"])
                instance.authAnnonymous = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["auth.annonymous"])
                instance.slingAuthRequirements = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.auth.requirements"])
                instance.slingAuthAnonymousUser = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.auth.anonymous.user"])
                instance.slingAuthAnonymousPassword = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.auth.anonymous.password"])
                instance.authHttp = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["auth.http"])
                instance.authHttpRealm = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["auth.http.realm"])
                instance.authUriSuffix = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["auth.uri.suffix"])
                return instance
            }


            // Decoder for [OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo].self) { (source: AnyObject) -> [OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo
            Decoders.addDecoder(clazz: OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo.self) { (source: AnyObject) -> OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties].self) { (source: AnyObject) -> [OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties
            Decoders.addDecoder(clazz: OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties.self) { (source: AnyObject) -> OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties()
                instance.extensions = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["extensions"])
                instance.minDurationMs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minDurationMs"])
                instance.maxDurationMs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["maxDurationMs"])
                instance.compactLogFormat = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["compactLogFormat"])
                return instance
            }


            // Decoder for [OrgApacheSlingEngineImplLogRequestLoggerInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingEngineImplLogRequestLoggerInfo].self) { (source: AnyObject) -> [OrgApacheSlingEngineImplLogRequestLoggerInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingEngineImplLogRequestLoggerInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingEngineImplLogRequestLoggerInfo
            Decoders.addDecoder(clazz: OrgApacheSlingEngineImplLogRequestLoggerInfo.self) { (source: AnyObject) -> OrgApacheSlingEngineImplLogRequestLoggerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEngineImplLogRequestLoggerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingEngineImplLogRequestLoggerProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingEngineImplLogRequestLoggerProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingEngineImplLogRequestLoggerProperties].self) { (source: AnyObject) -> [OrgApacheSlingEngineImplLogRequestLoggerProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingEngineImplLogRequestLoggerProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingEngineImplLogRequestLoggerProperties
            Decoders.addDecoder(clazz: OrgApacheSlingEngineImplLogRequestLoggerProperties.self) { (source: AnyObject) -> OrgApacheSlingEngineImplLogRequestLoggerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEngineImplLogRequestLoggerProperties()
                instance.requestLogOutput = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["request.log.output"])
                instance.requestLogOutputtype = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["request.log.outputtype"])
                instance.requestLogEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["request.log.enabled"])
                instance.accessLogOutput = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["access.log.output"])
                instance.accessLogOutputtype = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["access.log.outputtype"])
                instance.accessLogEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["access.log.enabled"])
                return instance
            }


            // Decoder for [OrgApacheSlingEngineImplLogRequestLoggerServiceInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingEngineImplLogRequestLoggerServiceInfo].self) { (source: AnyObject) -> [OrgApacheSlingEngineImplLogRequestLoggerServiceInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingEngineImplLogRequestLoggerServiceInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingEngineImplLogRequestLoggerServiceInfo
            Decoders.addDecoder(clazz: OrgApacheSlingEngineImplLogRequestLoggerServiceInfo.self) { (source: AnyObject) -> OrgApacheSlingEngineImplLogRequestLoggerServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEngineImplLogRequestLoggerServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingEngineImplLogRequestLoggerServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingEngineImplLogRequestLoggerServiceProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingEngineImplLogRequestLoggerServiceProperties].self) { (source: AnyObject) -> [OrgApacheSlingEngineImplLogRequestLoggerServiceProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingEngineImplLogRequestLoggerServiceProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingEngineImplLogRequestLoggerServiceProperties
            Decoders.addDecoder(clazz: OrgApacheSlingEngineImplLogRequestLoggerServiceProperties.self) { (source: AnyObject) -> OrgApacheSlingEngineImplLogRequestLoggerServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEngineImplLogRequestLoggerServiceProperties()
                instance.requestLogServiceFormat = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["request.log.service.format"])
                instance.requestLogServiceOutput = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["request.log.service.output"])
                instance.requestLogServiceOutputtype = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["request.log.service.outputtype"])
                instance.requestLogServiceOnentry = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["request.log.service.onentry"])
                return instance
            }


            // Decoder for [OrgApacheSlingEngineImplSlingMainServletInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingEngineImplSlingMainServletInfo].self) { (source: AnyObject) -> [OrgApacheSlingEngineImplSlingMainServletInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingEngineImplSlingMainServletInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingEngineImplSlingMainServletInfo
            Decoders.addDecoder(clazz: OrgApacheSlingEngineImplSlingMainServletInfo.self) { (source: AnyObject) -> OrgApacheSlingEngineImplSlingMainServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEngineImplSlingMainServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingEngineImplSlingMainServletProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingEngineImplSlingMainServletProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingEngineImplSlingMainServletProperties].self) { (source: AnyObject) -> [OrgApacheSlingEngineImplSlingMainServletProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingEngineImplSlingMainServletProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingEngineImplSlingMainServletProperties
            Decoders.addDecoder(clazz: OrgApacheSlingEngineImplSlingMainServletProperties.self) { (source: AnyObject) -> OrgApacheSlingEngineImplSlingMainServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEngineImplSlingMainServletProperties()
                instance.slingMaxCalls = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["sling.max.calls"])
                instance.slingMaxInclusions = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["sling.max.inclusions"])
                instance.slingTraceAllow = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["sling.trace.allow"])
                instance.slingMaxRecordRequests = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["sling.max.record.requests"])
                instance.slingStorePatternRequests = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.store.pattern.requests"])
                instance.slingServerinfo = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.serverinfo"])
                instance.slingAdditionalResponseHeaders = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.additional.response.headers"])
                return instance
            }


            // Decoder for [OrgApacheSlingEngineParametersInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingEngineParametersInfo].self) { (source: AnyObject) -> [OrgApacheSlingEngineParametersInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingEngineParametersInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingEngineParametersInfo
            Decoders.addDecoder(clazz: OrgApacheSlingEngineParametersInfo.self) { (source: AnyObject) -> OrgApacheSlingEngineParametersInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEngineParametersInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingEngineParametersProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingEngineParametersProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingEngineParametersProperties].self) { (source: AnyObject) -> [OrgApacheSlingEngineParametersProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingEngineParametersProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingEngineParametersProperties
            Decoders.addDecoder(clazz: OrgApacheSlingEngineParametersProperties.self) { (source: AnyObject) -> OrgApacheSlingEngineParametersProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEngineParametersProperties()
                instance.slingDefaultParameterEncoding = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.default.parameter.encoding"])
                instance.slingDefaultMaxParameters = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["sling.default.max.parameters"])
                instance.fileLocation = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["file.location"])
                instance.fileThreshold = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["file.threshold"])
                instance.fileMax = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["file.max"])
                instance.requestMax = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["request.max"])
                instance.slingDefaultParameterCheckForAdditionalContainerParameters = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["sling.default.parameter.checkForAdditionalContainerParameters"])
                return instance
            }


            // Decoder for [OrgApacheSlingEventImplEventingThreadPoolInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingEventImplEventingThreadPoolInfo].self) { (source: AnyObject) -> [OrgApacheSlingEventImplEventingThreadPoolInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingEventImplEventingThreadPoolInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingEventImplEventingThreadPoolInfo
            Decoders.addDecoder(clazz: OrgApacheSlingEventImplEventingThreadPoolInfo.self) { (source: AnyObject) -> OrgApacheSlingEventImplEventingThreadPoolInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEventImplEventingThreadPoolInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingEventImplEventingThreadPoolProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingEventImplEventingThreadPoolProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingEventImplEventingThreadPoolProperties].self) { (source: AnyObject) -> [OrgApacheSlingEventImplEventingThreadPoolProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingEventImplEventingThreadPoolProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingEventImplEventingThreadPoolProperties
            Decoders.addDecoder(clazz: OrgApacheSlingEventImplEventingThreadPoolProperties.self) { (source: AnyObject) -> OrgApacheSlingEventImplEventingThreadPoolProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEventImplEventingThreadPoolProperties()
                instance.minPoolSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["minPoolSize"])
                return instance
            }


            // Decoder for [OrgApacheSlingEventImplJobsDefaultJobManagerInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingEventImplJobsDefaultJobManagerInfo].self) { (source: AnyObject) -> [OrgApacheSlingEventImplJobsDefaultJobManagerInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingEventImplJobsDefaultJobManagerInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingEventImplJobsDefaultJobManagerInfo
            Decoders.addDecoder(clazz: OrgApacheSlingEventImplJobsDefaultJobManagerInfo.self) { (source: AnyObject) -> OrgApacheSlingEventImplJobsDefaultJobManagerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEventImplJobsDefaultJobManagerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingEventImplJobsDefaultJobManagerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingEventImplJobsDefaultJobManagerProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingEventImplJobsDefaultJobManagerProperties].self) { (source: AnyObject) -> [OrgApacheSlingEventImplJobsDefaultJobManagerProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingEventImplJobsDefaultJobManagerProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingEventImplJobsDefaultJobManagerProperties
            Decoders.addDecoder(clazz: OrgApacheSlingEventImplJobsDefaultJobManagerProperties.self) { (source: AnyObject) -> OrgApacheSlingEventImplJobsDefaultJobManagerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEventImplJobsDefaultJobManagerProperties()
                instance.queuePriority = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["queue.priority"])
                instance.queueRetries = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queue.retries"])
                instance.queueRetrydelay = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queue.retrydelay"])
                instance.queueMaxparallel = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queue.maxparallel"])
                return instance
            }


            // Decoder for [OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo].self) { (source: AnyObject) -> [OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo
            Decoders.addDecoder(clazz: OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo.self) { (source: AnyObject) -> OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties].self) { (source: AnyObject) -> [OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties
            Decoders.addDecoder(clazz: OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties.self) { (source: AnyObject) -> OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties()
                instance.jobConsumermanagerDisableDistribution = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["job.consumermanager.disableDistribution"])
                instance.startupDelay = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["startup.delay"])
                instance.cleanupPeriod = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cleanup.period"])
                return instance
            }


            // Decoder for [OrgApacheSlingEventImplJobsJobConsumerManagerInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingEventImplJobsJobConsumerManagerInfo].self) { (source: AnyObject) -> [OrgApacheSlingEventImplJobsJobConsumerManagerInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingEventImplJobsJobConsumerManagerInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingEventImplJobsJobConsumerManagerInfo
            Decoders.addDecoder(clazz: OrgApacheSlingEventImplJobsJobConsumerManagerInfo.self) { (source: AnyObject) -> OrgApacheSlingEventImplJobsJobConsumerManagerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEventImplJobsJobConsumerManagerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingEventImplJobsJobConsumerManagerProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingEventImplJobsJobConsumerManagerProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingEventImplJobsJobConsumerManagerProperties].self) { (source: AnyObject) -> [OrgApacheSlingEventImplJobsJobConsumerManagerProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingEventImplJobsJobConsumerManagerProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingEventImplJobsJobConsumerManagerProperties
            Decoders.addDecoder(clazz: OrgApacheSlingEventImplJobsJobConsumerManagerProperties.self) { (source: AnyObject) -> OrgApacheSlingEventImplJobsJobConsumerManagerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEventImplJobsJobConsumerManagerProperties()
                instance.orgApacheSlingInstallerConfigurationPersist = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.sling.installer.configuration.persist"])
                instance.jobConsumermanagerWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["job.consumermanager.whitelist"])
                instance.jobConsumermanagerBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["job.consumermanager.blacklist"])
                return instance
            }


            // Decoder for [OrgApacheSlingEventJobsQueueConfigurationInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingEventJobsQueueConfigurationInfo].self) { (source: AnyObject) -> [OrgApacheSlingEventJobsQueueConfigurationInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingEventJobsQueueConfigurationInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingEventJobsQueueConfigurationInfo
            Decoders.addDecoder(clazz: OrgApacheSlingEventJobsQueueConfigurationInfo.self) { (source: AnyObject) -> OrgApacheSlingEventJobsQueueConfigurationInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEventJobsQueueConfigurationInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingEventJobsQueueConfigurationProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingEventJobsQueueConfigurationProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingEventJobsQueueConfigurationProperties].self) { (source: AnyObject) -> [OrgApacheSlingEventJobsQueueConfigurationProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingEventJobsQueueConfigurationProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingEventJobsQueueConfigurationProperties
            Decoders.addDecoder(clazz: OrgApacheSlingEventJobsQueueConfigurationProperties.self) { (source: AnyObject) -> OrgApacheSlingEventJobsQueueConfigurationProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingEventJobsQueueConfigurationProperties()
                instance.queueName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["queue.name"])
                instance.queueTopics = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["queue.topics"])
                instance.queueType = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["queue.type"])
                instance.queuePriority = Decoders.decodeOptional(clazz: ConfigNodePropertyDropDown.self, source: sourceDictionary["queue.priority"])
                instance.queueRetries = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queue.retries"])
                instance.queueRetrydelay = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queue.retrydelay"])
                instance.queueMaxparallel = Decoders.decodeOptional(clazz: ConfigNodePropertyFloat.self, source: sourceDictionary["queue.maxparallel"])
                instance.queueKeepJobs = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["queue.keepJobs"])
                instance.queuePreferRunOnCreationInstance = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["queue.preferRunOnCreationInstance"])
                instance.queueThreadPoolSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["queue.threadPoolSize"])
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                return instance
            }


            // Decoder for [OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo].self) { (source: AnyObject) -> [OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo
            Decoders.addDecoder(clazz: OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo.self) { (source: AnyObject) -> OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties].self) { (source: AnyObject) -> [OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties
            Decoders.addDecoder(clazz: OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties.self) { (source: AnyObject) -> OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties()
                instance.users = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["users"])
                instance.groups = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["groups"])
                return instance
            }


            // Decoder for [OrgApacheSlingFeatureflagsFeatureInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingFeatureflagsFeatureInfo].self) { (source: AnyObject) -> [OrgApacheSlingFeatureflagsFeatureInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingFeatureflagsFeatureInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingFeatureflagsFeatureInfo
            Decoders.addDecoder(clazz: OrgApacheSlingFeatureflagsFeatureInfo.self) { (source: AnyObject) -> OrgApacheSlingFeatureflagsFeatureInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingFeatureflagsFeatureInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingFeatureflagsFeatureProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingFeatureflagsFeatureProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingFeatureflagsFeatureProperties].self) { (source: AnyObject) -> [OrgApacheSlingFeatureflagsFeatureProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingFeatureflagsFeatureProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingFeatureflagsFeatureProperties
            Decoders.addDecoder(clazz: OrgApacheSlingFeatureflagsFeatureProperties.self) { (source: AnyObject) -> OrgApacheSlingFeatureflagsFeatureProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingFeatureflagsFeatureProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["description"])
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                return instance
            }


            // Decoder for [OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo].self) { (source: AnyObject) -> [OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo
            Decoders.addDecoder(clazz: OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo.self) { (source: AnyObject) -> OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties].self) { (source: AnyObject) -> [OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties
            Decoders.addDecoder(clazz: OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties.self) { (source: AnyObject) -> OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties()
                instance.name = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["description"])
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                return instance
            }


            // Decoder for [OrgApacheSlingHapiImplHApiUtilImplInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingHapiImplHApiUtilImplInfo].self) { (source: AnyObject) -> [OrgApacheSlingHapiImplHApiUtilImplInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingHapiImplHApiUtilImplInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingHapiImplHApiUtilImplInfo
            Decoders.addDecoder(clazz: OrgApacheSlingHapiImplHApiUtilImplInfo.self) { (source: AnyObject) -> OrgApacheSlingHapiImplHApiUtilImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingHapiImplHApiUtilImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingHapiImplHApiUtilImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingHapiImplHApiUtilImplProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingHapiImplHApiUtilImplProperties].self) { (source: AnyObject) -> [OrgApacheSlingHapiImplHApiUtilImplProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingHapiImplHApiUtilImplProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingHapiImplHApiUtilImplProperties
            Decoders.addDecoder(clazz: OrgApacheSlingHapiImplHApiUtilImplProperties.self) { (source: AnyObject) -> OrgApacheSlingHapiImplHApiUtilImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingHapiImplHApiUtilImplProperties()
                instance.orgApacheSlingHapiToolsResourcetype = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.hapi.tools.resourcetype"])
                instance.orgApacheSlingHapiToolsCollectionresourcetype = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.hapi.tools.collectionresourcetype"])
                instance.orgApacheSlingHapiToolsSearchpaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.sling.hapi.tools.searchpaths"])
                instance.orgApacheSlingHapiToolsExternalurl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["org.apache.sling.hapi.tools.externalurl"])
                instance.orgApacheSlingHapiToolsEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["org.apache.sling.hapi.tools.enabled"])
                return instance
            }


            // Decoder for [OrgApacheSlingHcCoreImplCompositeHealthCheckInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplCompositeHealthCheckInfo].self) { (source: AnyObject) -> [OrgApacheSlingHcCoreImplCompositeHealthCheckInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplCompositeHealthCheckInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingHcCoreImplCompositeHealthCheckInfo
            Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplCompositeHealthCheckInfo.self) { (source: AnyObject) -> OrgApacheSlingHcCoreImplCompositeHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingHcCoreImplCompositeHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingHcCoreImplCompositeHealthCheckProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplCompositeHealthCheckProperties].self) { (source: AnyObject) -> [OrgApacheSlingHcCoreImplCompositeHealthCheckProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplCompositeHealthCheckProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingHcCoreImplCompositeHealthCheckProperties
            Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplCompositeHealthCheckProperties.self) { (source: AnyObject) -> OrgApacheSlingHcCoreImplCompositeHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingHcCoreImplCompositeHealthCheckProperties()
                instance.hcName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.name"])
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                instance.hcMbeanName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.mbean.name"])
                instance.filterTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["filter.tags"])
                instance.filterCombineTagsWithOr = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["filter.combineTagsWithOr"])
                return instance
            }


            // Decoder for [OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo].self) { (source: AnyObject) -> [OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo
            Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo.self) { (source: AnyObject) -> OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties].self) { (source: AnyObject) -> [OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties
            Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties.self) { (source: AnyObject) -> OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties()
                instance.timeoutInMs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["timeoutInMs"])
                instance.longRunningFutureThresholdForCriticalMs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["longRunningFutureThresholdForCriticalMs"])
                instance.resultCacheTtlInMs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["resultCacheTtlInMs"])
                return instance
            }


            // Decoder for [OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo].self) { (source: AnyObject) -> [OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo
            Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo.self) { (source: AnyObject) -> OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties].self) { (source: AnyObject) -> [OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties
            Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties.self) { (source: AnyObject) -> OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties()
                instance.hcName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.name"])
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                instance.hcMbeanName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.mbean.name"])
                instance.mbeanName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["mbean.name"])
                instance.attributeName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["attribute.name"])
                instance.attributeValueConstraint = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["attribute.value.constraint"])
                return instance
            }


            // Decoder for [OrgApacheSlingHcCoreImplScriptableHealthCheckInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplScriptableHealthCheckInfo].self) { (source: AnyObject) -> [OrgApacheSlingHcCoreImplScriptableHealthCheckInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplScriptableHealthCheckInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingHcCoreImplScriptableHealthCheckInfo
            Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplScriptableHealthCheckInfo.self) { (source: AnyObject) -> OrgApacheSlingHcCoreImplScriptableHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingHcCoreImplScriptableHealthCheckInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingHcCoreImplScriptableHealthCheckProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingHcCoreImplScriptableHealthCheckProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplScriptableHealthCheckProperties].self) { (source: AnyObject) -> [OrgApacheSlingHcCoreImplScriptableHealthCheckProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplScriptableHealthCheckProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingHcCoreImplScriptableHealthCheckProperties
            Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplScriptableHealthCheckProperties.self) { (source: AnyObject) -> OrgApacheSlingHcCoreImplScriptableHealthCheckProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingHcCoreImplScriptableHealthCheckProperties()
                instance.hcName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.name"])
                instance.hcTags = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["hc.tags"])
                instance.hcMbeanName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["hc.mbean.name"])
                instance.expression = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["expression"])
                instance.languageExtension = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["language.extension"])
                return instance
            }


            // Decoder for [OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo].self) { (source: AnyObject) -> [OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo
            Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo.self) { (source: AnyObject) -> OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties].self) { (source: AnyObject) -> [OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties
            Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties.self) { (source: AnyObject) -> OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties()
                instance.servletPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["servletPath"])
                instance.disabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["disabled"])
                instance.corsAccessControlAllowOrigin = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["cors.accessControlAllowOrigin"])
                return instance
            }


            // Decoder for [OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo].self) { (source: AnyObject) -> [OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo
            Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo.self) { (source: AnyObject) -> OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties].self) { (source: AnyObject) -> [OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties
            Decoders.addDecoder(clazz: OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties.self) { (source: AnyObject) -> OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties()
                instance.totalWidth = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["totalWidth"])
                instance.colWidthName = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["colWidthName"])
                instance.colWidthResult = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["colWidthResult"])
                instance.colWidthTiming = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["colWidthTiming"])
                return instance
            }


            // Decoder for [OrgApacheSlingI18nImplI18NFilterInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingI18nImplI18NFilterInfo].self) { (source: AnyObject) -> [OrgApacheSlingI18nImplI18NFilterInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingI18nImplI18NFilterInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingI18nImplI18NFilterInfo
            Decoders.addDecoder(clazz: OrgApacheSlingI18nImplI18NFilterInfo.self) { (source: AnyObject) -> OrgApacheSlingI18nImplI18NFilterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingI18nImplI18NFilterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingI18nImplI18NFilterProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingI18nImplI18NFilterProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingI18nImplI18NFilterProperties].self) { (source: AnyObject) -> [OrgApacheSlingI18nImplI18NFilterProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingI18nImplI18NFilterProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingI18nImplI18NFilterProperties
            Decoders.addDecoder(clazz: OrgApacheSlingI18nImplI18NFilterProperties.self) { (source: AnyObject) -> OrgApacheSlingI18nImplI18NFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingI18nImplI18NFilterProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.slingFilterScope = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.filter.scope"])
                return instance
            }


            // Decoder for [OrgApacheSlingI18nImplJcrResourceBundleProviderInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingI18nImplJcrResourceBundleProviderInfo].self) { (source: AnyObject) -> [OrgApacheSlingI18nImplJcrResourceBundleProviderInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingI18nImplJcrResourceBundleProviderInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingI18nImplJcrResourceBundleProviderInfo
            Decoders.addDecoder(clazz: OrgApacheSlingI18nImplJcrResourceBundleProviderInfo.self) { (source: AnyObject) -> OrgApacheSlingI18nImplJcrResourceBundleProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingI18nImplJcrResourceBundleProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingI18nImplJcrResourceBundleProviderProperties.self, source: sourceDictionary["properties"])
                instance.additionalProperties = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingI18nImplJcrResourceBundleProviderProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingI18nImplJcrResourceBundleProviderProperties].self) { (source: AnyObject) -> [OrgApacheSlingI18nImplJcrResourceBundleProviderProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingI18nImplJcrResourceBundleProviderProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingI18nImplJcrResourceBundleProviderProperties
            Decoders.addDecoder(clazz: OrgApacheSlingI18nImplJcrResourceBundleProviderProperties.self) { (source: AnyObject) -> OrgApacheSlingI18nImplJcrResourceBundleProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingI18nImplJcrResourceBundleProviderProperties()
                instance.localeDefault = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["locale.default"])
                instance.preloadBundles = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["preload.bundles"])
                instance.invalidationDelay = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["invalidation.delay"])
                return instance
            }


            // Decoder for [OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo].self) { (source: AnyObject) -> [OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo
            Decoders.addDecoder(clazz: OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo.self) { (source: AnyObject) -> OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties].self) { (source: AnyObject) -> [OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties
            Decoders.addDecoder(clazz: OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties.self) { (source: AnyObject) -> OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties()
                instance.handlerSchemes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["handler.schemes"])
                instance.slingJcrinstallFolderNameRegexp = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.jcrinstall.folder.name.regexp"])
                instance.slingJcrinstallFolderMaxDepth = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["sling.jcrinstall.folder.max.depth"])
                instance.slingJcrinstallSearchPath = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.jcrinstall.search.path"])
                instance.slingJcrinstallNewConfigPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.jcrinstall.new.config.path"])
                instance.slingJcrinstallSignalPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.jcrinstall.signal.path"])
                instance.slingJcrinstallEnableWriteback = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["sling.jcrinstall.enable.writeback"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo].self) { (source: AnyObject) -> [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo
            Decoders.addDecoder(clazz: OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo.self) { (source: AnyObject) -> OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties].self) { (source: AnyObject) -> [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties
            Decoders.addDecoder(clazz: OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties.self) { (source: AnyObject) -> OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties()
                instance.whitelistName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["whitelist.name"])
                instance.whitelistBundles = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["whitelist.bundles"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo].self) { (source: AnyObject) -> [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo
            Decoders.addDecoder(clazz: OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo.self) { (source: AnyObject) -> OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties].self) { (source: AnyObject) -> [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties
            Decoders.addDecoder(clazz: OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties.self) { (source: AnyObject) -> OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties()
                instance.whitelistBypass = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["whitelist.bypass"])
                instance.whitelistBundlesRegexp = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["whitelist.bundles.regexp"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo].self) { (source: AnyObject) -> [OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo
            Decoders.addDecoder(clazz: OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo.self) { (source: AnyObject) -> OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties].self) { (source: AnyObject) -> [OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties
            Decoders.addDecoder(clazz: OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties.self) { (source: AnyObject) -> OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties()
                instance.alias = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["alias"])
                instance.davCreateAbsoluteUri = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["dav.create-absolute-uri"])
                instance.davProtectedhandlers = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["dav.protectedhandlers"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo].self) { (source: AnyObject) -> [OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo
            Decoders.addDecoder(clazz: OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo.self) { (source: AnyObject) -> OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties].self) { (source: AnyObject) -> [OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties
            Decoders.addDecoder(clazz: OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties.self) { (source: AnyObject) -> OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties()
                instance.javaNamingFactoryInitial = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["java.naming.factory.initial"])
                instance.javaNamingProviderUrl = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["java.naming.provider.url"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo].self) { (source: AnyObject) -> [OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo
            Decoders.addDecoder(clazz: OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo.self) { (source: AnyObject) -> OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties].self) { (source: AnyObject) -> [OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties
            Decoders.addDecoder(clazz: OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties.self) { (source: AnyObject) -> OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties()
                instance.port = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["port"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo].self) { (source: AnyObject) -> [OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo
            Decoders.addDecoder(clazz: OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo.self) { (source: AnyObject) -> OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties].self) { (source: AnyObject) -> [OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties
            Decoders.addDecoder(clazz: OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties.self) { (source: AnyObject) -> OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties()
                instance.references = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["references"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrRepoinitRepositoryInitializerInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrRepoinitRepositoryInitializerInfo].self) { (source: AnyObject) -> [OrgApacheSlingJcrRepoinitRepositoryInitializerInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrRepoinitRepositoryInitializerInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrRepoinitRepositoryInitializerInfo
            Decoders.addDecoder(clazz: OrgApacheSlingJcrRepoinitRepositoryInitializerInfo.self) { (source: AnyObject) -> OrgApacheSlingJcrRepoinitRepositoryInitializerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrRepoinitRepositoryInitializerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingJcrRepoinitRepositoryInitializerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrRepoinitRepositoryInitializerProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrRepoinitRepositoryInitializerProperties].self) { (source: AnyObject) -> [OrgApacheSlingJcrRepoinitRepositoryInitializerProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrRepoinitRepositoryInitializerProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrRepoinitRepositoryInitializerProperties
            Decoders.addDecoder(clazz: OrgApacheSlingJcrRepoinitRepositoryInitializerProperties.self) { (source: AnyObject) -> OrgApacheSlingJcrRepoinitRepositoryInitializerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrRepoinitRepositoryInitializerProperties()
                instance.references = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["references"])
                instance.scripts = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["scripts"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo].self) { (source: AnyObject) -> [OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo
            Decoders.addDecoder(clazz: OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo.self) { (source: AnyObject) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties].self) { (source: AnyObject) -> [OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties
            Decoders.addDecoder(clazz: OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.self) { (source: AnyObject) -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties()
                instance.resourceResolverSearchpath = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resource.resolver.searchpath"])
                instance.resourceResolverManglenamespaces = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["resource.resolver.manglenamespaces"])
                instance.resourceResolverAllowDirect = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["resource.resolver.allowDirect"])
                instance.resourceResolverRequiredProviders = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resource.resolver.required.providers"])
                instance.resourceResolverRequiredProvidernames = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resource.resolver.required.providernames"])
                instance.resourceResolverVirtual = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resource.resolver.virtual"])
                instance.resourceResolverMapping = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resource.resolver.mapping"])
                instance.resourceResolverMapLocation = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["resource.resolver.map.location"])
                instance.resourceResolverMapObservation = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resource.resolver.map.observation"])
                instance.resourceResolverDefaultVanityRedirectStatus = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["resource.resolver.default.vanity.redirect.status"])
                instance.resourceResolverEnableVanitypath = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["resource.resolver.enable.vanitypath"])
                instance.resourceResolverVanitypathMaxEntries = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["resource.resolver.vanitypath.maxEntries"])
                instance.resourceResolverVanitypathMaxEntriesStartup = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["resource.resolver.vanitypath.maxEntries.startup"])
                instance.resourceResolverVanitypathBloomfilterMaxBytes = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["resource.resolver.vanitypath.bloomfilter.maxBytes"])
                instance.resourceResolverOptimizeAliasResolution = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["resource.resolver.optimize.alias.resolution"])
                instance.resourceResolverVanitypathWhitelist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resource.resolver.vanitypath.whitelist"])
                instance.resourceResolverVanitypathBlacklist = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["resource.resolver.vanitypath.blacklist"])
                instance.resourceResolverVanityPrecedence = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["resource.resolver.vanity.precedence"])
                instance.resourceResolverProviderhandlingParanoid = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["resource.resolver.providerhandling.paranoid"])
                instance.resourceResolverLogClosing = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["resource.resolver.log.closing"])
                instance.resourceResolverLogUnclosed = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["resource.resolver.log.unclosed"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo].self) { (source: AnyObject) -> [OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo
            Decoders.addDecoder(clazz: OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo.self) { (source: AnyObject) -> OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties].self) { (source: AnyObject) -> [OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties
            Decoders.addDecoder(clazz: OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties.self) { (source: AnyObject) -> OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties()
                instance.allowOnlySystemUser = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["allow.only.system.user"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo].self) { (source: AnyObject) -> [OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo
            Decoders.addDecoder(clazz: OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo.self) { (source: AnyObject) -> OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties].self) { (source: AnyObject) -> [OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties
            Decoders.addDecoder(clazz: OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties.self) { (source: AnyObject) -> OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties()
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"])
                instance.checkpathPrefix = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["checkpath.prefix"])
                instance.jcrPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jcrPath"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo].self) { (source: AnyObject) -> [OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo
            Decoders.addDecoder(clazz: OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo.self) { (source: AnyObject) -> OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties].self) { (source: AnyObject) -> [OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties
            Decoders.addDecoder(clazz: OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties.self) { (source: AnyObject) -> OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.typeCollections = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["type.collections"])
                instance.typeNoncollections = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["type.noncollections"])
                instance.typeContent = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["type.content"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo].self) { (source: AnyObject) -> [OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo
            Decoders.addDecoder(clazz: OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo.self) { (source: AnyObject) -> OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties].self) { (source: AnyObject) -> [OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties
            Decoders.addDecoder(clazz: OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties.self) { (source: AnyObject) -> OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo].self) { (source: AnyObject) -> [OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo
            Decoders.addDecoder(clazz: OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo.self) { (source: AnyObject) -> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties].self) { (source: AnyObject) -> [OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties
            Decoders.addDecoder(clazz: OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties.self) { (source: AnyObject) -> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties()
                instance.davRoot = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["dav.root"])
                instance.davCreateAbsoluteUri = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["dav.create-absolute-uri"])
                instance.davRealm = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["dav.realm"])
                instance.collectionTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["collection.types"])
                instance.filterPrefixes = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["filter.prefixes"])
                instance.filterTypes = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["filter.types"])
                instance.filterUris = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["filter.uris"])
                instance.typeCollections = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["type.collections"])
                instance.typeNoncollections = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["type.noncollections"])
                instance.typeContent = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["type.content"])
                return instance
            }


            // Decoder for [OrgApacheSlingJmxProviderImplJMXResourceProviderInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingJmxProviderImplJMXResourceProviderInfo].self) { (source: AnyObject) -> [OrgApacheSlingJmxProviderImplJMXResourceProviderInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingJmxProviderImplJMXResourceProviderInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingJmxProviderImplJMXResourceProviderInfo
            Decoders.addDecoder(clazz: OrgApacheSlingJmxProviderImplJMXResourceProviderInfo.self) { (source: AnyObject) -> OrgApacheSlingJmxProviderImplJMXResourceProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJmxProviderImplJMXResourceProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingJmxProviderImplJMXResourceProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingJmxProviderImplJMXResourceProviderProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingJmxProviderImplJMXResourceProviderProperties].self) { (source: AnyObject) -> [OrgApacheSlingJmxProviderImplJMXResourceProviderProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingJmxProviderImplJMXResourceProviderProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingJmxProviderImplJMXResourceProviderProperties
            Decoders.addDecoder(clazz: OrgApacheSlingJmxProviderImplJMXResourceProviderProperties.self) { (source: AnyObject) -> OrgApacheSlingJmxProviderImplJMXResourceProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingJmxProviderImplJMXResourceProviderProperties()
                instance.providerRoots = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["provider.roots"])
                return instance
            }


            // Decoder for [OrgApacheSlingModelsImplModelAdapterFactoryInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingModelsImplModelAdapterFactoryInfo].self) { (source: AnyObject) -> [OrgApacheSlingModelsImplModelAdapterFactoryInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingModelsImplModelAdapterFactoryInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingModelsImplModelAdapterFactoryInfo
            Decoders.addDecoder(clazz: OrgApacheSlingModelsImplModelAdapterFactoryInfo.self) { (source: AnyObject) -> OrgApacheSlingModelsImplModelAdapterFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingModelsImplModelAdapterFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingModelsImplModelAdapterFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingModelsImplModelAdapterFactoryProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingModelsImplModelAdapterFactoryProperties].self) { (source: AnyObject) -> [OrgApacheSlingModelsImplModelAdapterFactoryProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingModelsImplModelAdapterFactoryProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingModelsImplModelAdapterFactoryProperties
            Decoders.addDecoder(clazz: OrgApacheSlingModelsImplModelAdapterFactoryProperties.self) { (source: AnyObject) -> OrgApacheSlingModelsImplModelAdapterFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingModelsImplModelAdapterFactoryProperties()
                instance.osgiHttpWhiteboardListener = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["osgi.http.whiteboard.listener"])
                instance.osgiHttpWhiteboardContextSelect = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["osgi.http.whiteboard.context.select"])
                instance.maxRecursionDepth = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["max.recursion.depth"])
                instance.cleanupJobPeriod = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["cleanup.job.period"])
                return instance
            }


            // Decoder for [OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo].self) { (source: AnyObject) -> [OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo
            Decoders.addDecoder(clazz: OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo.self) { (source: AnyObject) -> OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties].self) { (source: AnyObject) -> [OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties
            Decoders.addDecoder(clazz: OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties.self) { (source: AnyObject) -> OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties()
                instance.maxRecursionLevels = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["max.recursion.levels"])
                return instance
            }


            // Decoder for [OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo].self) { (source: AnyObject) -> [OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo
            Decoders.addDecoder(clazz: OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo.self) { (source: AnyObject) -> OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties].self) { (source: AnyObject) -> [OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties
            Decoders.addDecoder(clazz: OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties.self) { (source: AnyObject) -> OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties()
                instance.felixInventoryPrinterName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["felix.inventory.printer.name"])
                instance.felixInventoryPrinterTitle = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["felix.inventory.printer.title"])
                instance.path = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["path"])
                return instance
            }


            // Decoder for [OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo].self) { (source: AnyObject) -> [OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo
            Decoders.addDecoder(clazz: OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo.self) { (source: AnyObject) -> OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties].self) { (source: AnyObject) -> [OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties
            Decoders.addDecoder(clazz: OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties.self) { (source: AnyObject) -> OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties()
                instance.mergeRoot = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["merge.root"])
                instance.mergeReadOnly = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["merge.readOnly"])
                return instance
            }


            // Decoder for [OrgApacheSlingResourcemergerPickerOverridingInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingResourcemergerPickerOverridingInfo].self) { (source: AnyObject) -> [OrgApacheSlingResourcemergerPickerOverridingInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingResourcemergerPickerOverridingInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingResourcemergerPickerOverridingInfo
            Decoders.addDecoder(clazz: OrgApacheSlingResourcemergerPickerOverridingInfo.self) { (source: AnyObject) -> OrgApacheSlingResourcemergerPickerOverridingInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingResourcemergerPickerOverridingInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingResourcemergerPickerOverridingProperties.self, source: sourceDictionary["properties"])
                instance.additionalProperties = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalProperties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingResourcemergerPickerOverridingProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingResourcemergerPickerOverridingProperties].self) { (source: AnyObject) -> [OrgApacheSlingResourcemergerPickerOverridingProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingResourcemergerPickerOverridingProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingResourcemergerPickerOverridingProperties
            Decoders.addDecoder(clazz: OrgApacheSlingResourcemergerPickerOverridingProperties.self) { (source: AnyObject) -> OrgApacheSlingResourcemergerPickerOverridingProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingResourcemergerPickerOverridingProperties()
                instance.mergeRoot = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["merge.root"])
                instance.mergeReadOnly = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["merge.readOnly"])
                return instance
            }


            // Decoder for [OrgApacheSlingScriptingCoreImplScriptCacheImplInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingScriptingCoreImplScriptCacheImplInfo].self) { (source: AnyObject) -> [OrgApacheSlingScriptingCoreImplScriptCacheImplInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingScriptingCoreImplScriptCacheImplInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingScriptingCoreImplScriptCacheImplInfo
            Decoders.addDecoder(clazz: OrgApacheSlingScriptingCoreImplScriptCacheImplInfo.self) { (source: AnyObject) -> OrgApacheSlingScriptingCoreImplScriptCacheImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingScriptingCoreImplScriptCacheImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingScriptingCoreImplScriptCacheImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingScriptingCoreImplScriptCacheImplProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingScriptingCoreImplScriptCacheImplProperties].self) { (source: AnyObject) -> [OrgApacheSlingScriptingCoreImplScriptCacheImplProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingScriptingCoreImplScriptCacheImplProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingScriptingCoreImplScriptCacheImplProperties
            Decoders.addDecoder(clazz: OrgApacheSlingScriptingCoreImplScriptCacheImplProperties.self) { (source: AnyObject) -> OrgApacheSlingScriptingCoreImplScriptCacheImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingScriptingCoreImplScriptCacheImplProperties()
                instance.orgApacheSlingScriptingCacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.sling.scripting.cache.size"])
                instance.orgApacheSlingScriptingCacheAdditionalExtensions = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.sling.scripting.cache.additional_extensions"])
                return instance
            }


            // Decoder for [OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo].self) { (source: AnyObject) -> [OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo
            Decoders.addDecoder(clazz: OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo.self) { (source: AnyObject) -> OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties].self) { (source: AnyObject) -> [OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties
            Decoders.addDecoder(clazz: OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties.self) { (source: AnyObject) -> OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties()
                instance.logStacktraceOnclose = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["log.stacktrace.onclose"])
                return instance
            }


            // Decoder for [OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo].self) { (source: AnyObject) -> [OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo
            Decoders.addDecoder(clazz: OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo.self) { (source: AnyObject) -> OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties].self) { (source: AnyObject) -> [OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties
            Decoders.addDecoder(clazz: OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties.self) { (source: AnyObject) -> OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties()
                instance.javaClassdebuginfo = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["java.classdebuginfo"])
                instance.javaJavaEncoding = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["java.javaEncoding"])
                instance.javaCompilerSourceVM = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["java.compilerSourceVM"])
                instance.javaCompilerTargetVM = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["java.compilerTargetVM"])
                return instance
            }


            // Decoder for [OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo].self) { (source: AnyObject) -> [OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo
            Decoders.addDecoder(clazz: OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo.self) { (source: AnyObject) -> OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties].self) { (source: AnyObject) -> [OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties
            Decoders.addDecoder(clazz: OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties.self) { (source: AnyObject) -> OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties()
                instance.orgApacheSlingScriptingJavascriptRhinoOptLevel = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["org.apache.sling.scripting.javascript.rhino.optLevel"])
                return instance
            }


            // Decoder for [OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo].self) { (source: AnyObject) -> [OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo
            Decoders.addDecoder(clazz: OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo.self) { (source: AnyObject) -> OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties].self) { (source: AnyObject) -> [OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties
            Decoders.addDecoder(clazz: OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties.self) { (source: AnyObject) -> OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties()
                instance.jasperCompilerTargetVM = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jasper.compilerTargetVM"])
                instance.jasperCompilerSourceVM = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jasper.compilerSourceVM"])
                instance.jasperClassdebuginfo = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["jasper.classdebuginfo"])
                instance.jasperEnablePooling = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["jasper.enablePooling"])
                instance.jasperIeClassId = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["jasper.ieClassId"])
                instance.jasperGenStringAsCharArray = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["jasper.genStringAsCharArray"])
                instance.jasperKeepgenerated = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["jasper.keepgenerated"])
                instance.jasperMappedfile = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["jasper.mappedfile"])
                instance.jasperTrimSpaces = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["jasper.trimSpaces"])
                instance.jasperDisplaySourceFragments = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["jasper.displaySourceFragments"])
                instance.defaultIsSession = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["default.is.session"])
                return instance
            }


            // Decoder for [OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo].self) { (source: AnyObject) -> [OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo
            Decoders.addDecoder(clazz: OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo.self) { (source: AnyObject) -> OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties].self) { (source: AnyObject) -> [OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties
            Decoders.addDecoder(clazz: OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties.self) { (source: AnyObject) -> OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties()
                instance.orgApacheSlingScriptingSightlyJsBindings = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["org.apache.sling.scripting.sightly.js.bindings"])
                return instance
            }


            // Decoder for [OrgApacheSlingSecurityImplContentDispositionFilterInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingSecurityImplContentDispositionFilterInfo].self) { (source: AnyObject) -> [OrgApacheSlingSecurityImplContentDispositionFilterInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingSecurityImplContentDispositionFilterInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingSecurityImplContentDispositionFilterInfo
            Decoders.addDecoder(clazz: OrgApacheSlingSecurityImplContentDispositionFilterInfo.self) { (source: AnyObject) -> OrgApacheSlingSecurityImplContentDispositionFilterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingSecurityImplContentDispositionFilterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingSecurityImplContentDispositionFilterProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingSecurityImplContentDispositionFilterProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingSecurityImplContentDispositionFilterProperties].self) { (source: AnyObject) -> [OrgApacheSlingSecurityImplContentDispositionFilterProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingSecurityImplContentDispositionFilterProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingSecurityImplContentDispositionFilterProperties
            Decoders.addDecoder(clazz: OrgApacheSlingSecurityImplContentDispositionFilterProperties.self) { (source: AnyObject) -> OrgApacheSlingSecurityImplContentDispositionFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingSecurityImplContentDispositionFilterProperties()
                instance.slingContentDispositionPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.content.disposition.paths"])
                instance.slingContentDispositionExcludedPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.content.disposition.excluded.paths"])
                instance.slingContentDispositionAllPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["sling.content.disposition.all.paths"])
                return instance
            }


            // Decoder for [OrgApacheSlingSecurityImplReferrerFilterInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingSecurityImplReferrerFilterInfo].self) { (source: AnyObject) -> [OrgApacheSlingSecurityImplReferrerFilterInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingSecurityImplReferrerFilterInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingSecurityImplReferrerFilterInfo
            Decoders.addDecoder(clazz: OrgApacheSlingSecurityImplReferrerFilterInfo.self) { (source: AnyObject) -> OrgApacheSlingSecurityImplReferrerFilterInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingSecurityImplReferrerFilterInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingSecurityImplReferrerFilterProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingSecurityImplReferrerFilterProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingSecurityImplReferrerFilterProperties].self) { (source: AnyObject) -> [OrgApacheSlingSecurityImplReferrerFilterProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingSecurityImplReferrerFilterProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingSecurityImplReferrerFilterProperties
            Decoders.addDecoder(clazz: OrgApacheSlingSecurityImplReferrerFilterProperties.self) { (source: AnyObject) -> OrgApacheSlingSecurityImplReferrerFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingSecurityImplReferrerFilterProperties()
                instance.allowEmpty = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["allow.empty"])
                instance.allowHosts = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["allow.hosts"])
                instance.allowHostsRegexp = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["allow.hosts.regexp"])
                instance.filterMethods = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["filter.methods"])
                instance.excludeAgentsRegexp = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["exclude.agents.regexp"])
                return instance
            }


            // Decoder for [OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo].self) { (source: AnyObject) -> [OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo
            Decoders.addDecoder(clazz: OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo.self) { (source: AnyObject) -> OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties].self) { (source: AnyObject) -> [OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties
            Decoders.addDecoder(clazz: OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties.self) { (source: AnyObject) -> OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties()
                instance.serviceRanking = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["service.ranking"])
                instance.userMapping = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["user.mapping"])
                return instance
            }


            // Decoder for [OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo].self) { (source: AnyObject) -> [OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo
            Decoders.addDecoder(clazz: OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo.self) { (source: AnyObject) -> OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties].self) { (source: AnyObject) -> [OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties
            Decoders.addDecoder(clazz: OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties.self) { (source: AnyObject) -> OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties()
                instance.userMapping = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["user.mapping"])
                instance.userDefault = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["user.default"])
                instance.userEnableDefaultMapping = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["user.enable.default.mapping"])
                instance.requireValidation = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["require.validation"])
                return instance
            }


            // Decoder for [OrgApacheSlingServletsGetDefaultGetServletInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingServletsGetDefaultGetServletInfo].self) { (source: AnyObject) -> [OrgApacheSlingServletsGetDefaultGetServletInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingServletsGetDefaultGetServletInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingServletsGetDefaultGetServletInfo
            Decoders.addDecoder(clazz: OrgApacheSlingServletsGetDefaultGetServletInfo.self) { (source: AnyObject) -> OrgApacheSlingServletsGetDefaultGetServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingServletsGetDefaultGetServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingServletsGetDefaultGetServletProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingServletsGetDefaultGetServletProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingServletsGetDefaultGetServletProperties].self) { (source: AnyObject) -> [OrgApacheSlingServletsGetDefaultGetServletProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingServletsGetDefaultGetServletProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingServletsGetDefaultGetServletProperties
            Decoders.addDecoder(clazz: OrgApacheSlingServletsGetDefaultGetServletProperties.self) { (source: AnyObject) -> OrgApacheSlingServletsGetDefaultGetServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingServletsGetDefaultGetServletProperties()
                instance.aliases = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["aliases"])
                instance.index = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["index"])
                instance.indexFiles = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["index.files"])
                instance.enableHtml = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable.html"])
                instance.enableJson = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable.json"])
                instance.enableTxt = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable.txt"])
                instance.enableXml = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enable.xml"])
                instance.jsonMaximumresults = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["json.maximumresults"])
                instance.ecmaSuport = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["ecmaSuport"])
                return instance
            }


            // Decoder for [OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo].self) { (source: AnyObject) -> [OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo
            Decoders.addDecoder(clazz: OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo.self) { (source: AnyObject) -> OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties].self) { (source: AnyObject) -> [OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties
            Decoders.addDecoder(clazz: OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties.self) { (source: AnyObject) -> OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties()
                instance.slingServletSelectors = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["sling.servlet.selectors"])
                instance.ecmaSuport = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["ecmaSuport"])
                return instance
            }


            // Decoder for [OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo].self) { (source: AnyObject) -> [OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo
            Decoders.addDecoder(clazz: OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo.self) { (source: AnyObject) -> OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties].self) { (source: AnyObject) -> [OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties
            Decoders.addDecoder(clazz: OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties.self) { (source: AnyObject) -> OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties()
                instance.schedulerExpression = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["scheduler.expression"])
                instance.schedulerConcurrent = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["scheduler.concurrent"])
                instance.chunkCleanupAge = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["chunk.cleanup.age"])
                return instance
            }


            // Decoder for [OrgApacheSlingServletsPostImplSlingPostServletInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingServletsPostImplSlingPostServletInfo].self) { (source: AnyObject) -> [OrgApacheSlingServletsPostImplSlingPostServletInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingServletsPostImplSlingPostServletInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingServletsPostImplSlingPostServletInfo
            Decoders.addDecoder(clazz: OrgApacheSlingServletsPostImplSlingPostServletInfo.self) { (source: AnyObject) -> OrgApacheSlingServletsPostImplSlingPostServletInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingServletsPostImplSlingPostServletInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingServletsPostImplSlingPostServletProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingServletsPostImplSlingPostServletProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingServletsPostImplSlingPostServletProperties].self) { (source: AnyObject) -> [OrgApacheSlingServletsPostImplSlingPostServletProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingServletsPostImplSlingPostServletProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingServletsPostImplSlingPostServletProperties
            Decoders.addDecoder(clazz: OrgApacheSlingServletsPostImplSlingPostServletProperties.self) { (source: AnyObject) -> OrgApacheSlingServletsPostImplSlingPostServletProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingServletsPostImplSlingPostServletProperties()
                instance.servletPostDateFormats = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["servlet.post.dateFormats"])
                instance.servletPostNodeNameHints = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["servlet.post.nodeNameHints"])
                instance.servletPostNodeNameMaxLength = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["servlet.post.nodeNameMaxLength"])
                instance.servletPostCheckinNewVersionableNodes = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["servlet.post.checkinNewVersionableNodes"])
                instance.servletPostAutoCheckout = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["servlet.post.autoCheckout"])
                instance.servletPostAutoCheckin = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["servlet.post.autoCheckin"])
                instance.servletPostIgnorePattern = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["servlet.post.ignorePattern"])
                return instance
            }


            // Decoder for [OrgApacheSlingServletsResolverSlingServletResolverInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingServletsResolverSlingServletResolverInfo].self) { (source: AnyObject) -> [OrgApacheSlingServletsResolverSlingServletResolverInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingServletsResolverSlingServletResolverInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingServletsResolverSlingServletResolverInfo
            Decoders.addDecoder(clazz: OrgApacheSlingServletsResolverSlingServletResolverInfo.self) { (source: AnyObject) -> OrgApacheSlingServletsResolverSlingServletResolverInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingServletsResolverSlingServletResolverInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingServletsResolverSlingServletResolverProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingServletsResolverSlingServletResolverProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingServletsResolverSlingServletResolverProperties].self) { (source: AnyObject) -> [OrgApacheSlingServletsResolverSlingServletResolverProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingServletsResolverSlingServletResolverProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingServletsResolverSlingServletResolverProperties
            Decoders.addDecoder(clazz: OrgApacheSlingServletsResolverSlingServletResolverProperties.self) { (source: AnyObject) -> OrgApacheSlingServletsResolverSlingServletResolverProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingServletsResolverSlingServletResolverProperties()
                instance.servletresolverServletRoot = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["servletresolver.servletRoot"])
                instance.servletresolverCacheSize = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["servletresolver.cacheSize"])
                instance.servletresolverPaths = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["servletresolver.paths"])
                instance.servletresolverDefaultExtensions = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["servletresolver.defaultExtensions"])
                return instance
            }


            // Decoder for [OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo].self) { (source: AnyObject) -> [OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo
            Decoders.addDecoder(clazz: OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo.self) { (source: AnyObject) -> OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties].self) { (source: AnyObject) -> [OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties
            Decoders.addDecoder(clazz: OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties.self) { (source: AnyObject) -> OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties()
                instance.slingName = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.name"])
                instance.slingDescription = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["sling.description"])
                return instance
            }


            // Decoder for [OrgApacheSlingStartupfilterImplStartupFilterImplInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingStartupfilterImplStartupFilterImplInfo].self) { (source: AnyObject) -> [OrgApacheSlingStartupfilterImplStartupFilterImplInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingStartupfilterImplStartupFilterImplInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingStartupfilterImplStartupFilterImplInfo
            Decoders.addDecoder(clazz: OrgApacheSlingStartupfilterImplStartupFilterImplInfo.self) { (source: AnyObject) -> OrgApacheSlingStartupfilterImplStartupFilterImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingStartupfilterImplStartupFilterImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingStartupfilterImplStartupFilterImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingStartupfilterImplStartupFilterImplProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingStartupfilterImplStartupFilterImplProperties].self) { (source: AnyObject) -> [OrgApacheSlingStartupfilterImplStartupFilterImplProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingStartupfilterImplStartupFilterImplProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingStartupfilterImplStartupFilterImplProperties
            Decoders.addDecoder(clazz: OrgApacheSlingStartupfilterImplStartupFilterImplProperties.self) { (source: AnyObject) -> OrgApacheSlingStartupfilterImplStartupFilterImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingStartupfilterImplStartupFilterImplProperties()
                instance.activeByDefault = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["active.by.default"])
                instance.defaultMessage = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["default.message"])
                return instance
            }


            // Decoder for [OrgApacheSlingTenantInternalTenantProviderImplInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingTenantInternalTenantProviderImplInfo].self) { (source: AnyObject) -> [OrgApacheSlingTenantInternalTenantProviderImplInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingTenantInternalTenantProviderImplInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingTenantInternalTenantProviderImplInfo
            Decoders.addDecoder(clazz: OrgApacheSlingTenantInternalTenantProviderImplInfo.self) { (source: AnyObject) -> OrgApacheSlingTenantInternalTenantProviderImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingTenantInternalTenantProviderImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingTenantInternalTenantProviderImplProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingTenantInternalTenantProviderImplProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingTenantInternalTenantProviderImplProperties].self) { (source: AnyObject) -> [OrgApacheSlingTenantInternalTenantProviderImplProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingTenantInternalTenantProviderImplProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingTenantInternalTenantProviderImplProperties
            Decoders.addDecoder(clazz: OrgApacheSlingTenantInternalTenantProviderImplProperties.self) { (source: AnyObject) -> OrgApacheSlingTenantInternalTenantProviderImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingTenantInternalTenantProviderImplProperties()
                instance.tenantRoot = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["tenant.root"])
                instance.tenantPathMatcher = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["tenant.path.matcher"])
                return instance
            }


            // Decoder for [OrgApacheSlingTracerInternalLogTracerInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingTracerInternalLogTracerInfo].self) { (source: AnyObject) -> [OrgApacheSlingTracerInternalLogTracerInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingTracerInternalLogTracerInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingTracerInternalLogTracerInfo
            Decoders.addDecoder(clazz: OrgApacheSlingTracerInternalLogTracerInfo.self) { (source: AnyObject) -> OrgApacheSlingTracerInternalLogTracerInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingTracerInternalLogTracerInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingTracerInternalLogTracerProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OrgApacheSlingTracerInternalLogTracerProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingTracerInternalLogTracerProperties].self) { (source: AnyObject) -> [OrgApacheSlingTracerInternalLogTracerProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingTracerInternalLogTracerProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingTracerInternalLogTracerProperties
            Decoders.addDecoder(clazz: OrgApacheSlingTracerInternalLogTracerProperties.self) { (source: AnyObject) -> OrgApacheSlingTracerInternalLogTracerProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingTracerInternalLogTracerProperties()
                instance.tracerSets = Decoders.decodeOptional(clazz: ConfigNodePropertyArray.self, source: sourceDictionary["tracerSets"])
                instance.enabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["enabled"])
                instance.servletEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["servletEnabled"])
                instance.recordingCacheSizeInMB = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["recordingCacheSizeInMB"])
                instance.recordingCacheDurationInSecs = Decoders.decodeOptional(clazz: ConfigNodePropertyInteger.self, source: sourceDictionary["recordingCacheDurationInSecs"])
                instance.recordingCompressionEnabled = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["recordingCompressionEnabled"])
                instance.gzipResponse = Decoders.decodeOptional(clazz: ConfigNodePropertyBoolean.self, source: sourceDictionary["gzipResponse"])
                return instance
            }


            // Decoder for [OrgApacheSlingXssImplXSSFilterImplInfo]
            Decoders.addDecoder(clazz: [OrgApacheSlingXssImplXSSFilterImplInfo].self) { (source: AnyObject) -> [OrgApacheSlingXssImplXSSFilterImplInfo] in
                return Decoders.decode(clazz: [OrgApacheSlingXssImplXSSFilterImplInfo].self, source: source)
            }
            // Decoder for OrgApacheSlingXssImplXSSFilterImplInfo
            Decoders.addDecoder(clazz: OrgApacheSlingXssImplXSSFilterImplInfo.self) { (source: AnyObject) -> OrgApacheSlingXssImplXSSFilterImplInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingXssImplXSSFilterImplInfo()
                instance.pid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.properties = Decoders.decodeOptional(clazz: OrgApacheSlingXssImplXSSFilterImplProperties.self, source: sourceDictionary["properties"])
                instance.bundleLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"])
                instance.serviceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"])
                return instance
            }


            // Decoder for [OrgApacheSlingXssImplXSSFilterImplProperties]
            Decoders.addDecoder(clazz: [OrgApacheSlingXssImplXSSFilterImplProperties].self) { (source: AnyObject) -> [OrgApacheSlingXssImplXSSFilterImplProperties] in
                return Decoders.decode(clazz: [OrgApacheSlingXssImplXSSFilterImplProperties].self, source: source)
            }
            // Decoder for OrgApacheSlingXssImplXSSFilterImplProperties
            Decoders.addDecoder(clazz: OrgApacheSlingXssImplXSSFilterImplProperties.self) { (source: AnyObject) -> OrgApacheSlingXssImplXSSFilterImplProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrgApacheSlingXssImplXSSFilterImplProperties()
                instance.policyPath = Decoders.decodeOptional(clazz: ConfigNodePropertyString.self, source: sourceDictionary["policyPath"])
                return instance
            }
        }
    }
}
