/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteCompatrouterImplRoutingConfigProperties {
  #[serde(rename = "id")]
  id: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "compatPath")]
  compat_path: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "newPath")]
  new_path: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeGraniteCompatrouterImplRoutingConfigProperties {
  pub fn new() -> ComAdobeGraniteCompatrouterImplRoutingConfigProperties {
    ComAdobeGraniteCompatrouterImplRoutingConfigProperties {
      id: None,
      compat_path: None,
      new_path: None
    }
  }

  pub fn set_id(&mut self, id: ::models::ConfigNodePropertyString) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: ::models::ConfigNodePropertyString) -> ComAdobeGraniteCompatrouterImplRoutingConfigProperties {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_compat_path(&mut self, compat_path: ::models::ConfigNodePropertyString) {
    self.compat_path = Some(compat_path);
  }

  pub fn with_compat_path(mut self, compat_path: ::models::ConfigNodePropertyString) -> ComAdobeGraniteCompatrouterImplRoutingConfigProperties {
    self.compat_path = Some(compat_path);
    self
  }

  pub fn compat_path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.compat_path.as_ref()
  }

  pub fn reset_compat_path(&mut self) {
    self.compat_path = None;
  }

  pub fn set_new_path(&mut self, new_path: ::models::ConfigNodePropertyString) {
    self.new_path = Some(new_path);
  }

  pub fn with_new_path(mut self, new_path: ::models::ConfigNodePropertyString) -> ComAdobeGraniteCompatrouterImplRoutingConfigProperties {
    self.new_path = Some(new_path);
    self
  }

  pub fn new_path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.new_path.as_ref()
  }

  pub fn reset_new_path(&mut self) {
    self.new_path = None;
  }

}



