/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties() {
    init();
}

OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::~OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties() {
    this->cleanup();
}

void
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::init() {
    solr_zk_timeout = new OAIConfigNodePropertyString();
    m_solr_zk_timeout_isSet = false;
    solr_commit = new OAIConfigNodePropertyString();
    m_solr_commit_isSet = false;
    cache_on = new OAIConfigNodePropertyBoolean();
    m_cache_on_isSet = false;
    concurrency_level = new OAIConfigNodePropertyInteger();
    m_concurrency_level_isSet = false;
    cache_start_size = new OAIConfigNodePropertyInteger();
    m_cache_start_size_isSet = false;
    cache_ttl = new OAIConfigNodePropertyInteger();
    m_cache_ttl_isSet = false;
    cache_size = new OAIConfigNodePropertyInteger();
    m_cache_size_isSet = false;
}

void
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::cleanup() {
    if(solr_zk_timeout != nullptr) { 
        delete solr_zk_timeout;
    }
    if(solr_commit != nullptr) { 
        delete solr_commit;
    }
    if(cache_on != nullptr) { 
        delete cache_on;
    }
    if(concurrency_level != nullptr) { 
        delete concurrency_level;
    }
    if(cache_start_size != nullptr) { 
        delete cache_start_size;
    }
    if(cache_ttl != nullptr) { 
        delete cache_ttl;
    }
    if(cache_size != nullptr) { 
        delete cache_size;
    }
}

OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties*
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&solr_zk_timeout, pJson["solr.zk.timeout"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&solr_commit, pJson["solr.commit"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&cache_on, pJson["cache.on"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&concurrency_level, pJson["concurrency.level"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cache_start_size, pJson["cache.start.size"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cache_ttl, pJson["cache.ttl"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cache_size, pJson["cache.size"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::asJsonObject() {
    QJsonObject obj;
    if((solr_zk_timeout != nullptr) && (solr_zk_timeout->isSet())){
        toJsonValue(QString("solr.zk.timeout"), solr_zk_timeout, obj, QString("OAIConfigNodePropertyString"));
    }
    if((solr_commit != nullptr) && (solr_commit->isSet())){
        toJsonValue(QString("solr.commit"), solr_commit, obj, QString("OAIConfigNodePropertyString"));
    }
    if((cache_on != nullptr) && (cache_on->isSet())){
        toJsonValue(QString("cache.on"), cache_on, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((concurrency_level != nullptr) && (concurrency_level->isSet())){
        toJsonValue(QString("concurrency.level"), concurrency_level, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cache_start_size != nullptr) && (cache_start_size->isSet())){
        toJsonValue(QString("cache.start.size"), cache_start_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cache_ttl != nullptr) && (cache_ttl->isSet())){
        toJsonValue(QString("cache.ttl"), cache_ttl, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cache_size != nullptr) && (cache_size->isSet())){
        toJsonValue(QString("cache.size"), cache_size, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::getSolrZkTimeout() {
    return solr_zk_timeout;
}
void
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::setSolrZkTimeout(OAIConfigNodePropertyString* solr_zk_timeout) {
    this->solr_zk_timeout = solr_zk_timeout;
    this->m_solr_zk_timeout_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::getSolrCommit() {
    return solr_commit;
}
void
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::setSolrCommit(OAIConfigNodePropertyString* solr_commit) {
    this->solr_commit = solr_commit;
    this->m_solr_commit_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::getCacheOn() {
    return cache_on;
}
void
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::setCacheOn(OAIConfigNodePropertyBoolean* cache_on) {
    this->cache_on = cache_on;
    this->m_cache_on_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::getConcurrencyLevel() {
    return concurrency_level;
}
void
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::setConcurrencyLevel(OAIConfigNodePropertyInteger* concurrency_level) {
    this->concurrency_level = concurrency_level;
    this->m_concurrency_level_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::getCacheStartSize() {
    return cache_start_size;
}
void
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::setCacheStartSize(OAIConfigNodePropertyInteger* cache_start_size) {
    this->cache_start_size = cache_start_size;
    this->m_cache_start_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::getCacheTtl() {
    return cache_ttl;
}
void
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::setCacheTtl(OAIConfigNodePropertyInteger* cache_ttl) {
    this->cache_ttl = cache_ttl;
    this->m_cache_ttl_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::getCacheSize() {
    return cache_size;
}
void
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::setCacheSize(OAIConfigNodePropertyInteger* cache_size) {
    this->cache_size = cache_size;
    this->m_cache_size_isSet = true;
}


bool
OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(solr_zk_timeout != nullptr && solr_zk_timeout->isSet()){ isObjectUpdated = true; break;}
        if(solr_commit != nullptr && solr_commit->isSet()){ isObjectUpdated = true; break;}
        if(cache_on != nullptr && cache_on->isSet()){ isObjectUpdated = true; break;}
        if(concurrency_level != nullptr && concurrency_level->isSet()){ isObjectUpdated = true; break;}
        if(cache_start_size != nullptr && cache_start_size->isSet()){ isObjectUpdated = true; break;}
        if(cache_ttl != nullptr && cache_ttl->isSet()){ isObjectUpdated = true; break;}
        if(cache_size != nullptr && cache_size->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

