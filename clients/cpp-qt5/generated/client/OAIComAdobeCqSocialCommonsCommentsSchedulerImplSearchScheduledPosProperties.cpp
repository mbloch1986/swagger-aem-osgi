/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties() {
    init();
}

OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::~OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties() {
    this->cleanup();
}

void
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::init() {
    enable_scheduled_posts_search = new OAIConfigNodePropertyBoolean();
    m_enable_scheduled_posts_search_isSet = false;
    number_of_minutes = new OAIConfigNodePropertyInteger();
    m_number_of_minutes_isSet = false;
    max_search_limit = new OAIConfigNodePropertyInteger();
    m_max_search_limit_isSet = false;
}

void
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::cleanup() {
    if(enable_scheduled_posts_search != nullptr) { 
        delete enable_scheduled_posts_search;
    }
    if(number_of_minutes != nullptr) { 
        delete number_of_minutes;
    }
    if(max_search_limit != nullptr) { 
        delete max_search_limit;
    }
}

OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties*
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&enable_scheduled_posts_search, pJson["enableScheduledPostsSearch"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&number_of_minutes, pJson["numberOfMinutes"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&max_search_limit, pJson["maxSearchLimit"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::asJsonObject() {
    QJsonObject obj;
    if((enable_scheduled_posts_search != nullptr) && (enable_scheduled_posts_search->isSet())){
        toJsonValue(QString("enableScheduledPostsSearch"), enable_scheduled_posts_search, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((number_of_minutes != nullptr) && (number_of_minutes->isSet())){
        toJsonValue(QString("numberOfMinutes"), number_of_minutes, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((max_search_limit != nullptr) && (max_search_limit->isSet())){
        toJsonValue(QString("maxSearchLimit"), max_search_limit, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::getEnableScheduledPostsSearch() {
    return enable_scheduled_posts_search;
}
void
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::setEnableScheduledPostsSearch(OAIConfigNodePropertyBoolean* enable_scheduled_posts_search) {
    this->enable_scheduled_posts_search = enable_scheduled_posts_search;
    this->m_enable_scheduled_posts_search_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::getNumberOfMinutes() {
    return number_of_minutes;
}
void
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::setNumberOfMinutes(OAIConfigNodePropertyInteger* number_of_minutes) {
    this->number_of_minutes = number_of_minutes;
    this->m_number_of_minutes_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::getMaxSearchLimit() {
    return max_search_limit;
}
void
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::setMaxSearchLimit(OAIConfigNodePropertyInteger* max_search_limit) {
    this->max_search_limit = max_search_limit;
    this->m_max_search_limit_isSet = true;
}


bool
OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(enable_scheduled_posts_search != nullptr && enable_scheduled_posts_search->isSet()){ isObjectUpdated = true; break;}
        if(number_of_minutes != nullptr && number_of_minutes->isSet()){ isObjectUpdated = true; break;}
        if(max_search_limit != nullptr && max_search_limit->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

