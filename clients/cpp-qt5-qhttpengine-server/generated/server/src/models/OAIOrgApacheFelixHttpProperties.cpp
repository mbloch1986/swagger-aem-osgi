/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheFelixHttpProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheFelixHttpProperties::OAIOrgApacheFelixHttpProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheFelixHttpProperties::OAIOrgApacheFelixHttpProperties() {
    this->init();
}

OAIOrgApacheFelixHttpProperties::~OAIOrgApacheFelixHttpProperties() {
    
}

void
OAIOrgApacheFelixHttpProperties::init() {
    m_org_apache_felix_http_host_isSet = false;
    m_org_apache_felix_http_enable_isSet = false;
    m_org_osgi_service_http_port_isSet = false;
    m_org_apache_felix_http_timeout_isSet = false;
    m_org_apache_felix_https_enable_isSet = false;
    m_org_osgi_service_http_port_secure_isSet = false;
    m_org_apache_felix_https_keystore_isSet = false;
    m_org_apache_felix_https_keystore_password_isSet = false;
    m_org_apache_felix_https_keystore_key_password_isSet = false;
    m_org_apache_felix_https_truststore_isSet = false;
    m_org_apache_felix_https_truststore_password_isSet = false;
    m_org_apache_felix_https_clientcertificate_isSet = false;
    m_org_apache_felix_http_context_path_isSet = false;
    m_org_apache_felix_http_mbeans_isSet = false;
    m_org_apache_felix_http_session_timeout_isSet = false;
    m_org_apache_felix_http_jetty_threadpool_max_isSet = false;
    m_org_apache_felix_http_jetty_acceptors_isSet = false;
    m_org_apache_felix_http_jetty_selectors_isSet = false;
    m_org_apache_felix_http_jetty_header_buffer_size_isSet = false;
    m_org_apache_felix_http_jetty_request_buffer_size_isSet = false;
    m_org_apache_felix_http_jetty_response_buffer_size_isSet = false;
    m_org_apache_felix_http_jetty_max_form_size_isSet = false;
    m_org_apache_felix_http_path_exclusions_isSet = false;
    m_org_apache_felix_https_jetty_ciphersuites_excluded_isSet = false;
    m_org_apache_felix_https_jetty_ciphersuites_included_isSet = false;
    m_org_apache_felix_http_jetty_send_server_header_isSet = false;
    m_org_apache_felix_https_jetty_protocols_included_isSet = false;
    m_org_apache_felix_https_jetty_protocols_excluded_isSet = false;
    m_org_apache_felix_proxy_load_balancer_connection_enable_isSet = false;
    m_org_apache_felix_https_jetty_renegotiate_allowed_isSet = false;
    m_org_apache_felix_https_jetty_session_cookie_http_only_isSet = false;
    m_org_apache_felix_https_jetty_session_cookie_secure_isSet = false;
    m_org_eclipse_jetty_servlet_session_id_path_parameter_name_isSet = false;
    m_org_eclipse_jetty_servlet_checking_remote_session_id_encoding_isSet = false;
    m_org_eclipse_jetty_servlet_session_cookie_isSet = false;
    m_org_eclipse_jetty_servlet_session_domain_isSet = false;
    m_org_eclipse_jetty_servlet_session_path_isSet = false;
    m_org_eclipse_jetty_servlet_max_age_isSet = false;
    m_org_apache_felix_http_name_isSet = false;
    m_org_apache_felix_jetty_gziphandler_enable_isSet = false;
    m_org_apache_felix_jetty_gzip_min_gzip_size_isSet = false;
    m_org_apache_felix_jetty_gzip_compression_level_isSet = false;
    m_org_apache_felix_jetty_gzip_inflate_buffer_size_isSet = false;
    m_org_apache_felix_jetty_gzip_sync_flush_isSet = false;
    m_org_apache_felix_jetty_gzip_excluded_user_agents_isSet = false;
    m_org_apache_felix_jetty_gzip_included_methods_isSet = false;
    m_org_apache_felix_jetty_gzip_excluded_methods_isSet = false;
    m_org_apache_felix_jetty_gzip_included_paths_isSet = false;
    m_org_apache_felix_jetty_gzip_excluded_paths_isSet = false;
    m_org_apache_felix_jetty_gzip_included_mime_types_isSet = false;
    m_org_apache_felix_jetty_gzip_excluded_mime_types_isSet = false;
    m_org_apache_felix_http_session_invalidate_isSet = false;
    m_org_apache_felix_http_session_uniqueid_isSet = false;
}

void
OAIOrgApacheFelixHttpProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheFelixHttpProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(org_apache_felix_http_host, json[QString("org.apache.felix.http.host")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_http_enable, json[QString("org.apache.felix.http.enable")]);
    
    ::OpenAPI::fromJsonValue(org_osgi_service_http_port, json[QString("org.osgi.service.http.port")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_http_timeout, json[QString("org.apache.felix.http.timeout")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_https_enable, json[QString("org.apache.felix.https.enable")]);
    
    ::OpenAPI::fromJsonValue(org_osgi_service_http_port_secure, json[QString("org.osgi.service.http.port.secure")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_https_keystore, json[QString("org.apache.felix.https.keystore")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_https_keystore_password, json[QString("org.apache.felix.https.keystore.password")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_https_keystore_key_password, json[QString("org.apache.felix.https.keystore.key.password")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_https_truststore, json[QString("org.apache.felix.https.truststore")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_https_truststore_password, json[QString("org.apache.felix.https.truststore.password")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_https_clientcertificate, json[QString("org.apache.felix.https.clientcertificate")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_http_context_path, json[QString("org.apache.felix.http.context_path")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_http_mbeans, json[QString("org.apache.felix.http.mbeans")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_http_session_timeout, json[QString("org.apache.felix.http.session.timeout")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_http_jetty_threadpool_max, json[QString("org.apache.felix.http.jetty.threadpool.max")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_http_jetty_acceptors, json[QString("org.apache.felix.http.jetty.acceptors")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_http_jetty_selectors, json[QString("org.apache.felix.http.jetty.selectors")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_http_jetty_header_buffer_size, json[QString("org.apache.felix.http.jetty.headerBufferSize")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_http_jetty_request_buffer_size, json[QString("org.apache.felix.http.jetty.requestBufferSize")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_http_jetty_response_buffer_size, json[QString("org.apache.felix.http.jetty.responseBufferSize")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_http_jetty_max_form_size, json[QString("org.apache.felix.http.jetty.maxFormSize")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_http_path_exclusions, json[QString("org.apache.felix.http.path_exclusions")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_https_jetty_ciphersuites_excluded, json[QString("org.apache.felix.https.jetty.ciphersuites.excluded")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_https_jetty_ciphersuites_included, json[QString("org.apache.felix.https.jetty.ciphersuites.included")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_http_jetty_send_server_header, json[QString("org.apache.felix.http.jetty.sendServerHeader")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_https_jetty_protocols_included, json[QString("org.apache.felix.https.jetty.protocols.included")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_https_jetty_protocols_excluded, json[QString("org.apache.felix.https.jetty.protocols.excluded")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_proxy_load_balancer_connection_enable, json[QString("org.apache.felix.proxy.load.balancer.connection.enable")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_https_jetty_renegotiate_allowed, json[QString("org.apache.felix.https.jetty.renegotiateAllowed")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_https_jetty_session_cookie_http_only, json[QString("org.apache.felix.https.jetty.session.cookie.httpOnly")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_https_jetty_session_cookie_secure, json[QString("org.apache.felix.https.jetty.session.cookie.secure")]);
    
    ::OpenAPI::fromJsonValue(org_eclipse_jetty_servlet_session_id_path_parameter_name, json[QString("org.eclipse.jetty.servlet.SessionIdPathParameterName")]);
    
    ::OpenAPI::fromJsonValue(org_eclipse_jetty_servlet_checking_remote_session_id_encoding, json[QString("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding")]);
    
    ::OpenAPI::fromJsonValue(org_eclipse_jetty_servlet_session_cookie, json[QString("org.eclipse.jetty.servlet.SessionCookie")]);
    
    ::OpenAPI::fromJsonValue(org_eclipse_jetty_servlet_session_domain, json[QString("org.eclipse.jetty.servlet.SessionDomain")]);
    
    ::OpenAPI::fromJsonValue(org_eclipse_jetty_servlet_session_path, json[QString("org.eclipse.jetty.servlet.SessionPath")]);
    
    ::OpenAPI::fromJsonValue(org_eclipse_jetty_servlet_max_age, json[QString("org.eclipse.jetty.servlet.MaxAge")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_http_name, json[QString("org.apache.felix.http.name")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_jetty_gziphandler_enable, json[QString("org.apache.felix.jetty.gziphandler.enable")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_jetty_gzip_min_gzip_size, json[QString("org.apache.felix.jetty.gzip.minGzipSize")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_jetty_gzip_compression_level, json[QString("org.apache.felix.jetty.gzip.compressionLevel")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_jetty_gzip_inflate_buffer_size, json[QString("org.apache.felix.jetty.gzip.inflateBufferSize")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_jetty_gzip_sync_flush, json[QString("org.apache.felix.jetty.gzip.syncFlush")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_jetty_gzip_excluded_user_agents, json[QString("org.apache.felix.jetty.gzip.excludedUserAgents")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_jetty_gzip_included_methods, json[QString("org.apache.felix.jetty.gzip.includedMethods")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_jetty_gzip_excluded_methods, json[QString("org.apache.felix.jetty.gzip.excludedMethods")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_jetty_gzip_included_paths, json[QString("org.apache.felix.jetty.gzip.includedPaths")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_jetty_gzip_excluded_paths, json[QString("org.apache.felix.jetty.gzip.excludedPaths")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_jetty_gzip_included_mime_types, json[QString("org.apache.felix.jetty.gzip.includedMimeTypes")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_jetty_gzip_excluded_mime_types, json[QString("org.apache.felix.jetty.gzip.excludedMimeTypes")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_http_session_invalidate, json[QString("org.apache.felix.http.session.invalidate")]);
    
    ::OpenAPI::fromJsonValue(org_apache_felix_http_session_uniqueid, json[QString("org.apache.felix.http.session.uniqueid")]);
    
}

QString
OAIOrgApacheFelixHttpProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheFelixHttpProperties::asJsonObject() const {
    QJsonObject obj;
	if(org_apache_felix_http_host.isSet()){
        obj.insert(QString("org.apache.felix.http.host"), ::OpenAPI::toJsonValue(org_apache_felix_http_host));
    }
	if(org_apache_felix_http_enable.isSet()){
        obj.insert(QString("org.apache.felix.http.enable"), ::OpenAPI::toJsonValue(org_apache_felix_http_enable));
    }
	if(org_osgi_service_http_port.isSet()){
        obj.insert(QString("org.osgi.service.http.port"), ::OpenAPI::toJsonValue(org_osgi_service_http_port));
    }
	if(org_apache_felix_http_timeout.isSet()){
        obj.insert(QString("org.apache.felix.http.timeout"), ::OpenAPI::toJsonValue(org_apache_felix_http_timeout));
    }
	if(org_apache_felix_https_enable.isSet()){
        obj.insert(QString("org.apache.felix.https.enable"), ::OpenAPI::toJsonValue(org_apache_felix_https_enable));
    }
	if(org_osgi_service_http_port_secure.isSet()){
        obj.insert(QString("org.osgi.service.http.port.secure"), ::OpenAPI::toJsonValue(org_osgi_service_http_port_secure));
    }
	if(org_apache_felix_https_keystore.isSet()){
        obj.insert(QString("org.apache.felix.https.keystore"), ::OpenAPI::toJsonValue(org_apache_felix_https_keystore));
    }
	if(org_apache_felix_https_keystore_password.isSet()){
        obj.insert(QString("org.apache.felix.https.keystore.password"), ::OpenAPI::toJsonValue(org_apache_felix_https_keystore_password));
    }
	if(org_apache_felix_https_keystore_key_password.isSet()){
        obj.insert(QString("org.apache.felix.https.keystore.key.password"), ::OpenAPI::toJsonValue(org_apache_felix_https_keystore_key_password));
    }
	if(org_apache_felix_https_truststore.isSet()){
        obj.insert(QString("org.apache.felix.https.truststore"), ::OpenAPI::toJsonValue(org_apache_felix_https_truststore));
    }
	if(org_apache_felix_https_truststore_password.isSet()){
        obj.insert(QString("org.apache.felix.https.truststore.password"), ::OpenAPI::toJsonValue(org_apache_felix_https_truststore_password));
    }
	if(org_apache_felix_https_clientcertificate.isSet()){
        obj.insert(QString("org.apache.felix.https.clientcertificate"), ::OpenAPI::toJsonValue(org_apache_felix_https_clientcertificate));
    }
	if(org_apache_felix_http_context_path.isSet()){
        obj.insert(QString("org.apache.felix.http.context_path"), ::OpenAPI::toJsonValue(org_apache_felix_http_context_path));
    }
	if(org_apache_felix_http_mbeans.isSet()){
        obj.insert(QString("org.apache.felix.http.mbeans"), ::OpenAPI::toJsonValue(org_apache_felix_http_mbeans));
    }
	if(org_apache_felix_http_session_timeout.isSet()){
        obj.insert(QString("org.apache.felix.http.session.timeout"), ::OpenAPI::toJsonValue(org_apache_felix_http_session_timeout));
    }
	if(org_apache_felix_http_jetty_threadpool_max.isSet()){
        obj.insert(QString("org.apache.felix.http.jetty.threadpool.max"), ::OpenAPI::toJsonValue(org_apache_felix_http_jetty_threadpool_max));
    }
	if(org_apache_felix_http_jetty_acceptors.isSet()){
        obj.insert(QString("org.apache.felix.http.jetty.acceptors"), ::OpenAPI::toJsonValue(org_apache_felix_http_jetty_acceptors));
    }
	if(org_apache_felix_http_jetty_selectors.isSet()){
        obj.insert(QString("org.apache.felix.http.jetty.selectors"), ::OpenAPI::toJsonValue(org_apache_felix_http_jetty_selectors));
    }
	if(org_apache_felix_http_jetty_header_buffer_size.isSet()){
        obj.insert(QString("org.apache.felix.http.jetty.headerBufferSize"), ::OpenAPI::toJsonValue(org_apache_felix_http_jetty_header_buffer_size));
    }
	if(org_apache_felix_http_jetty_request_buffer_size.isSet()){
        obj.insert(QString("org.apache.felix.http.jetty.requestBufferSize"), ::OpenAPI::toJsonValue(org_apache_felix_http_jetty_request_buffer_size));
    }
	if(org_apache_felix_http_jetty_response_buffer_size.isSet()){
        obj.insert(QString("org.apache.felix.http.jetty.responseBufferSize"), ::OpenAPI::toJsonValue(org_apache_felix_http_jetty_response_buffer_size));
    }
	if(org_apache_felix_http_jetty_max_form_size.isSet()){
        obj.insert(QString("org.apache.felix.http.jetty.maxFormSize"), ::OpenAPI::toJsonValue(org_apache_felix_http_jetty_max_form_size));
    }
	if(org_apache_felix_http_path_exclusions.isSet()){
        obj.insert(QString("org.apache.felix.http.path_exclusions"), ::OpenAPI::toJsonValue(org_apache_felix_http_path_exclusions));
    }
	if(org_apache_felix_https_jetty_ciphersuites_excluded.isSet()){
        obj.insert(QString("org.apache.felix.https.jetty.ciphersuites.excluded"), ::OpenAPI::toJsonValue(org_apache_felix_https_jetty_ciphersuites_excluded));
    }
	if(org_apache_felix_https_jetty_ciphersuites_included.isSet()){
        obj.insert(QString("org.apache.felix.https.jetty.ciphersuites.included"), ::OpenAPI::toJsonValue(org_apache_felix_https_jetty_ciphersuites_included));
    }
	if(org_apache_felix_http_jetty_send_server_header.isSet()){
        obj.insert(QString("org.apache.felix.http.jetty.sendServerHeader"), ::OpenAPI::toJsonValue(org_apache_felix_http_jetty_send_server_header));
    }
	if(org_apache_felix_https_jetty_protocols_included.isSet()){
        obj.insert(QString("org.apache.felix.https.jetty.protocols.included"), ::OpenAPI::toJsonValue(org_apache_felix_https_jetty_protocols_included));
    }
	if(org_apache_felix_https_jetty_protocols_excluded.isSet()){
        obj.insert(QString("org.apache.felix.https.jetty.protocols.excluded"), ::OpenAPI::toJsonValue(org_apache_felix_https_jetty_protocols_excluded));
    }
	if(org_apache_felix_proxy_load_balancer_connection_enable.isSet()){
        obj.insert(QString("org.apache.felix.proxy.load.balancer.connection.enable"), ::OpenAPI::toJsonValue(org_apache_felix_proxy_load_balancer_connection_enable));
    }
	if(org_apache_felix_https_jetty_renegotiate_allowed.isSet()){
        obj.insert(QString("org.apache.felix.https.jetty.renegotiateAllowed"), ::OpenAPI::toJsonValue(org_apache_felix_https_jetty_renegotiate_allowed));
    }
	if(org_apache_felix_https_jetty_session_cookie_http_only.isSet()){
        obj.insert(QString("org.apache.felix.https.jetty.session.cookie.httpOnly"), ::OpenAPI::toJsonValue(org_apache_felix_https_jetty_session_cookie_http_only));
    }
	if(org_apache_felix_https_jetty_session_cookie_secure.isSet()){
        obj.insert(QString("org.apache.felix.https.jetty.session.cookie.secure"), ::OpenAPI::toJsonValue(org_apache_felix_https_jetty_session_cookie_secure));
    }
	if(org_eclipse_jetty_servlet_session_id_path_parameter_name.isSet()){
        obj.insert(QString("org.eclipse.jetty.servlet.SessionIdPathParameterName"), ::OpenAPI::toJsonValue(org_eclipse_jetty_servlet_session_id_path_parameter_name));
    }
	if(org_eclipse_jetty_servlet_checking_remote_session_id_encoding.isSet()){
        obj.insert(QString("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding"), ::OpenAPI::toJsonValue(org_eclipse_jetty_servlet_checking_remote_session_id_encoding));
    }
	if(org_eclipse_jetty_servlet_session_cookie.isSet()){
        obj.insert(QString("org.eclipse.jetty.servlet.SessionCookie"), ::OpenAPI::toJsonValue(org_eclipse_jetty_servlet_session_cookie));
    }
	if(org_eclipse_jetty_servlet_session_domain.isSet()){
        obj.insert(QString("org.eclipse.jetty.servlet.SessionDomain"), ::OpenAPI::toJsonValue(org_eclipse_jetty_servlet_session_domain));
    }
	if(org_eclipse_jetty_servlet_session_path.isSet()){
        obj.insert(QString("org.eclipse.jetty.servlet.SessionPath"), ::OpenAPI::toJsonValue(org_eclipse_jetty_servlet_session_path));
    }
	if(org_eclipse_jetty_servlet_max_age.isSet()){
        obj.insert(QString("org.eclipse.jetty.servlet.MaxAge"), ::OpenAPI::toJsonValue(org_eclipse_jetty_servlet_max_age));
    }
	if(org_apache_felix_http_name.isSet()){
        obj.insert(QString("org.apache.felix.http.name"), ::OpenAPI::toJsonValue(org_apache_felix_http_name));
    }
	if(org_apache_felix_jetty_gziphandler_enable.isSet()){
        obj.insert(QString("org.apache.felix.jetty.gziphandler.enable"), ::OpenAPI::toJsonValue(org_apache_felix_jetty_gziphandler_enable));
    }
	if(org_apache_felix_jetty_gzip_min_gzip_size.isSet()){
        obj.insert(QString("org.apache.felix.jetty.gzip.minGzipSize"), ::OpenAPI::toJsonValue(org_apache_felix_jetty_gzip_min_gzip_size));
    }
	if(org_apache_felix_jetty_gzip_compression_level.isSet()){
        obj.insert(QString("org.apache.felix.jetty.gzip.compressionLevel"), ::OpenAPI::toJsonValue(org_apache_felix_jetty_gzip_compression_level));
    }
	if(org_apache_felix_jetty_gzip_inflate_buffer_size.isSet()){
        obj.insert(QString("org.apache.felix.jetty.gzip.inflateBufferSize"), ::OpenAPI::toJsonValue(org_apache_felix_jetty_gzip_inflate_buffer_size));
    }
	if(org_apache_felix_jetty_gzip_sync_flush.isSet()){
        obj.insert(QString("org.apache.felix.jetty.gzip.syncFlush"), ::OpenAPI::toJsonValue(org_apache_felix_jetty_gzip_sync_flush));
    }
	if(org_apache_felix_jetty_gzip_excluded_user_agents.isSet()){
        obj.insert(QString("org.apache.felix.jetty.gzip.excludedUserAgents"), ::OpenAPI::toJsonValue(org_apache_felix_jetty_gzip_excluded_user_agents));
    }
	if(org_apache_felix_jetty_gzip_included_methods.isSet()){
        obj.insert(QString("org.apache.felix.jetty.gzip.includedMethods"), ::OpenAPI::toJsonValue(org_apache_felix_jetty_gzip_included_methods));
    }
	if(org_apache_felix_jetty_gzip_excluded_methods.isSet()){
        obj.insert(QString("org.apache.felix.jetty.gzip.excludedMethods"), ::OpenAPI::toJsonValue(org_apache_felix_jetty_gzip_excluded_methods));
    }
	if(org_apache_felix_jetty_gzip_included_paths.isSet()){
        obj.insert(QString("org.apache.felix.jetty.gzip.includedPaths"), ::OpenAPI::toJsonValue(org_apache_felix_jetty_gzip_included_paths));
    }
	if(org_apache_felix_jetty_gzip_excluded_paths.isSet()){
        obj.insert(QString("org.apache.felix.jetty.gzip.excludedPaths"), ::OpenAPI::toJsonValue(org_apache_felix_jetty_gzip_excluded_paths));
    }
	if(org_apache_felix_jetty_gzip_included_mime_types.isSet()){
        obj.insert(QString("org.apache.felix.jetty.gzip.includedMimeTypes"), ::OpenAPI::toJsonValue(org_apache_felix_jetty_gzip_included_mime_types));
    }
	if(org_apache_felix_jetty_gzip_excluded_mime_types.isSet()){
        obj.insert(QString("org.apache.felix.jetty.gzip.excludedMimeTypes"), ::OpenAPI::toJsonValue(org_apache_felix_jetty_gzip_excluded_mime_types));
    }
	if(org_apache_felix_http_session_invalidate.isSet()){
        obj.insert(QString("org.apache.felix.http.session.invalidate"), ::OpenAPI::toJsonValue(org_apache_felix_http_session_invalidate));
    }
	if(org_apache_felix_http_session_uniqueid.isSet()){
        obj.insert(QString("org.apache.felix.http.session.uniqueid"), ::OpenAPI::toJsonValue(org_apache_felix_http_session_uniqueid));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpHost() const {
    return org_apache_felix_http_host;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpHost(const OAIConfigNodePropertyString &org_apache_felix_http_host) {
    this->org_apache_felix_http_host = org_apache_felix_http_host;
    this->m_org_apache_felix_http_host_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpEnable() const {
    return org_apache_felix_http_enable;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpEnable(const OAIConfigNodePropertyBoolean &org_apache_felix_http_enable) {
    this->org_apache_felix_http_enable = org_apache_felix_http_enable;
    this->m_org_apache_felix_http_enable_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheFelixHttpProperties::getOrgOsgiServiceHttpPort() const {
    return org_osgi_service_http_port;
}
void
OAIOrgApacheFelixHttpProperties::setOrgOsgiServiceHttpPort(const OAIConfigNodePropertyInteger &org_osgi_service_http_port) {
    this->org_osgi_service_http_port = org_osgi_service_http_port;
    this->m_org_osgi_service_http_port_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpTimeout() const {
    return org_apache_felix_http_timeout;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpTimeout(const OAIConfigNodePropertyInteger &org_apache_felix_http_timeout) {
    this->org_apache_felix_http_timeout = org_apache_felix_http_timeout;
    this->m_org_apache_felix_http_timeout_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpsEnable() const {
    return org_apache_felix_https_enable;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpsEnable(const OAIConfigNodePropertyBoolean &org_apache_felix_https_enable) {
    this->org_apache_felix_https_enable = org_apache_felix_https_enable;
    this->m_org_apache_felix_https_enable_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheFelixHttpProperties::getOrgOsgiServiceHttpPortSecure() const {
    return org_osgi_service_http_port_secure;
}
void
OAIOrgApacheFelixHttpProperties::setOrgOsgiServiceHttpPortSecure(const OAIConfigNodePropertyInteger &org_osgi_service_http_port_secure) {
    this->org_osgi_service_http_port_secure = org_osgi_service_http_port_secure;
    this->m_org_osgi_service_http_port_secure_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpsKeystore() const {
    return org_apache_felix_https_keystore;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpsKeystore(const OAIConfigNodePropertyString &org_apache_felix_https_keystore) {
    this->org_apache_felix_https_keystore = org_apache_felix_https_keystore;
    this->m_org_apache_felix_https_keystore_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpsKeystorePassword() const {
    return org_apache_felix_https_keystore_password;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpsKeystorePassword(const OAIConfigNodePropertyString &org_apache_felix_https_keystore_password) {
    this->org_apache_felix_https_keystore_password = org_apache_felix_https_keystore_password;
    this->m_org_apache_felix_https_keystore_password_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpsKeystoreKeyPassword() const {
    return org_apache_felix_https_keystore_key_password;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpsKeystoreKeyPassword(const OAIConfigNodePropertyString &org_apache_felix_https_keystore_key_password) {
    this->org_apache_felix_https_keystore_key_password = org_apache_felix_https_keystore_key_password;
    this->m_org_apache_felix_https_keystore_key_password_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpsTruststore() const {
    return org_apache_felix_https_truststore;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpsTruststore(const OAIConfigNodePropertyString &org_apache_felix_https_truststore) {
    this->org_apache_felix_https_truststore = org_apache_felix_https_truststore;
    this->m_org_apache_felix_https_truststore_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpsTruststorePassword() const {
    return org_apache_felix_https_truststore_password;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpsTruststorePassword(const OAIConfigNodePropertyString &org_apache_felix_https_truststore_password) {
    this->org_apache_felix_https_truststore_password = org_apache_felix_https_truststore_password;
    this->m_org_apache_felix_https_truststore_password_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpsClientcertificate() const {
    return org_apache_felix_https_clientcertificate;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpsClientcertificate(const OAIConfigNodePropertyDropDown &org_apache_felix_https_clientcertificate) {
    this->org_apache_felix_https_clientcertificate = org_apache_felix_https_clientcertificate;
    this->m_org_apache_felix_https_clientcertificate_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpContextPath() const {
    return org_apache_felix_http_context_path;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpContextPath(const OAIConfigNodePropertyString &org_apache_felix_http_context_path) {
    this->org_apache_felix_http_context_path = org_apache_felix_http_context_path;
    this->m_org_apache_felix_http_context_path_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpMbeans() const {
    return org_apache_felix_http_mbeans;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpMbeans(const OAIConfigNodePropertyBoolean &org_apache_felix_http_mbeans) {
    this->org_apache_felix_http_mbeans = org_apache_felix_http_mbeans;
    this->m_org_apache_felix_http_mbeans_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpSessionTimeout() const {
    return org_apache_felix_http_session_timeout;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpSessionTimeout(const OAIConfigNodePropertyInteger &org_apache_felix_http_session_timeout) {
    this->org_apache_felix_http_session_timeout = org_apache_felix_http_session_timeout;
    this->m_org_apache_felix_http_session_timeout_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettyThreadpoolMax() const {
    return org_apache_felix_http_jetty_threadpool_max;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettyThreadpoolMax(const OAIConfigNodePropertyInteger &org_apache_felix_http_jetty_threadpool_max) {
    this->org_apache_felix_http_jetty_threadpool_max = org_apache_felix_http_jetty_threadpool_max;
    this->m_org_apache_felix_http_jetty_threadpool_max_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettyAcceptors() const {
    return org_apache_felix_http_jetty_acceptors;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettyAcceptors(const OAIConfigNodePropertyInteger &org_apache_felix_http_jetty_acceptors) {
    this->org_apache_felix_http_jetty_acceptors = org_apache_felix_http_jetty_acceptors;
    this->m_org_apache_felix_http_jetty_acceptors_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettySelectors() const {
    return org_apache_felix_http_jetty_selectors;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettySelectors(const OAIConfigNodePropertyInteger &org_apache_felix_http_jetty_selectors) {
    this->org_apache_felix_http_jetty_selectors = org_apache_felix_http_jetty_selectors;
    this->m_org_apache_felix_http_jetty_selectors_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettyHeaderBufferSize() const {
    return org_apache_felix_http_jetty_header_buffer_size;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettyHeaderBufferSize(const OAIConfigNodePropertyInteger &org_apache_felix_http_jetty_header_buffer_size) {
    this->org_apache_felix_http_jetty_header_buffer_size = org_apache_felix_http_jetty_header_buffer_size;
    this->m_org_apache_felix_http_jetty_header_buffer_size_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettyRequestBufferSize() const {
    return org_apache_felix_http_jetty_request_buffer_size;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettyRequestBufferSize(const OAIConfigNodePropertyInteger &org_apache_felix_http_jetty_request_buffer_size) {
    this->org_apache_felix_http_jetty_request_buffer_size = org_apache_felix_http_jetty_request_buffer_size;
    this->m_org_apache_felix_http_jetty_request_buffer_size_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettyResponseBufferSize() const {
    return org_apache_felix_http_jetty_response_buffer_size;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettyResponseBufferSize(const OAIConfigNodePropertyInteger &org_apache_felix_http_jetty_response_buffer_size) {
    this->org_apache_felix_http_jetty_response_buffer_size = org_apache_felix_http_jetty_response_buffer_size;
    this->m_org_apache_felix_http_jetty_response_buffer_size_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettyMaxFormSize() const {
    return org_apache_felix_http_jetty_max_form_size;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettyMaxFormSize(const OAIConfigNodePropertyInteger &org_apache_felix_http_jetty_max_form_size) {
    this->org_apache_felix_http_jetty_max_form_size = org_apache_felix_http_jetty_max_form_size;
    this->m_org_apache_felix_http_jetty_max_form_size_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpPathExclusions() const {
    return org_apache_felix_http_path_exclusions;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpPathExclusions(const OAIConfigNodePropertyArray &org_apache_felix_http_path_exclusions) {
    this->org_apache_felix_http_path_exclusions = org_apache_felix_http_path_exclusions;
    this->m_org_apache_felix_http_path_exclusions_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettyCiphersuitesExcluded() const {
    return org_apache_felix_https_jetty_ciphersuites_excluded;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettyCiphersuitesExcluded(const OAIConfigNodePropertyArray &org_apache_felix_https_jetty_ciphersuites_excluded) {
    this->org_apache_felix_https_jetty_ciphersuites_excluded = org_apache_felix_https_jetty_ciphersuites_excluded;
    this->m_org_apache_felix_https_jetty_ciphersuites_excluded_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettyCiphersuitesIncluded() const {
    return org_apache_felix_https_jetty_ciphersuites_included;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettyCiphersuitesIncluded(const OAIConfigNodePropertyArray &org_apache_felix_https_jetty_ciphersuites_included) {
    this->org_apache_felix_https_jetty_ciphersuites_included = org_apache_felix_https_jetty_ciphersuites_included;
    this->m_org_apache_felix_https_jetty_ciphersuites_included_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpJettySendServerHeader() const {
    return org_apache_felix_http_jetty_send_server_header;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpJettySendServerHeader(const OAIConfigNodePropertyBoolean &org_apache_felix_http_jetty_send_server_header) {
    this->org_apache_felix_http_jetty_send_server_header = org_apache_felix_http_jetty_send_server_header;
    this->m_org_apache_felix_http_jetty_send_server_header_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettyProtocolsIncluded() const {
    return org_apache_felix_https_jetty_protocols_included;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettyProtocolsIncluded(const OAIConfigNodePropertyArray &org_apache_felix_https_jetty_protocols_included) {
    this->org_apache_felix_https_jetty_protocols_included = org_apache_felix_https_jetty_protocols_included;
    this->m_org_apache_felix_https_jetty_protocols_included_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettyProtocolsExcluded() const {
    return org_apache_felix_https_jetty_protocols_excluded;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettyProtocolsExcluded(const OAIConfigNodePropertyArray &org_apache_felix_https_jetty_protocols_excluded) {
    this->org_apache_felix_https_jetty_protocols_excluded = org_apache_felix_https_jetty_protocols_excluded;
    this->m_org_apache_felix_https_jetty_protocols_excluded_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixProxyLoadBalancerConnectionEnable() const {
    return org_apache_felix_proxy_load_balancer_connection_enable;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixProxyLoadBalancerConnectionEnable(const OAIConfigNodePropertyBoolean &org_apache_felix_proxy_load_balancer_connection_enable) {
    this->org_apache_felix_proxy_load_balancer_connection_enable = org_apache_felix_proxy_load_balancer_connection_enable;
    this->m_org_apache_felix_proxy_load_balancer_connection_enable_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettyRenegotiateAllowed() const {
    return org_apache_felix_https_jetty_renegotiate_allowed;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettyRenegotiateAllowed(const OAIConfigNodePropertyBoolean &org_apache_felix_https_jetty_renegotiate_allowed) {
    this->org_apache_felix_https_jetty_renegotiate_allowed = org_apache_felix_https_jetty_renegotiate_allowed;
    this->m_org_apache_felix_https_jetty_renegotiate_allowed_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettySessionCookieHttpOnly() const {
    return org_apache_felix_https_jetty_session_cookie_http_only;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettySessionCookieHttpOnly(const OAIConfigNodePropertyBoolean &org_apache_felix_https_jetty_session_cookie_http_only) {
    this->org_apache_felix_https_jetty_session_cookie_http_only = org_apache_felix_https_jetty_session_cookie_http_only;
    this->m_org_apache_felix_https_jetty_session_cookie_http_only_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpsJettySessionCookieSecure() const {
    return org_apache_felix_https_jetty_session_cookie_secure;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpsJettySessionCookieSecure(const OAIConfigNodePropertyBoolean &org_apache_felix_https_jetty_session_cookie_secure) {
    this->org_apache_felix_https_jetty_session_cookie_secure = org_apache_felix_https_jetty_session_cookie_secure;
    this->m_org_apache_felix_https_jetty_session_cookie_secure_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixHttpProperties::getOrgEclipseJettyServletSessionIdPathParameterName() const {
    return org_eclipse_jetty_servlet_session_id_path_parameter_name;
}
void
OAIOrgApacheFelixHttpProperties::setOrgEclipseJettyServletSessionIdPathParameterName(const OAIConfigNodePropertyString &org_eclipse_jetty_servlet_session_id_path_parameter_name) {
    this->org_eclipse_jetty_servlet_session_id_path_parameter_name = org_eclipse_jetty_servlet_session_id_path_parameter_name;
    this->m_org_eclipse_jetty_servlet_session_id_path_parameter_name_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheFelixHttpProperties::getOrgEclipseJettyServletCheckingRemoteSessionIdEncoding() const {
    return org_eclipse_jetty_servlet_checking_remote_session_id_encoding;
}
void
OAIOrgApacheFelixHttpProperties::setOrgEclipseJettyServletCheckingRemoteSessionIdEncoding(const OAIConfigNodePropertyBoolean &org_eclipse_jetty_servlet_checking_remote_session_id_encoding) {
    this->org_eclipse_jetty_servlet_checking_remote_session_id_encoding = org_eclipse_jetty_servlet_checking_remote_session_id_encoding;
    this->m_org_eclipse_jetty_servlet_checking_remote_session_id_encoding_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixHttpProperties::getOrgEclipseJettyServletSessionCookie() const {
    return org_eclipse_jetty_servlet_session_cookie;
}
void
OAIOrgApacheFelixHttpProperties::setOrgEclipseJettyServletSessionCookie(const OAIConfigNodePropertyString &org_eclipse_jetty_servlet_session_cookie) {
    this->org_eclipse_jetty_servlet_session_cookie = org_eclipse_jetty_servlet_session_cookie;
    this->m_org_eclipse_jetty_servlet_session_cookie_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixHttpProperties::getOrgEclipseJettyServletSessionDomain() const {
    return org_eclipse_jetty_servlet_session_domain;
}
void
OAIOrgApacheFelixHttpProperties::setOrgEclipseJettyServletSessionDomain(const OAIConfigNodePropertyString &org_eclipse_jetty_servlet_session_domain) {
    this->org_eclipse_jetty_servlet_session_domain = org_eclipse_jetty_servlet_session_domain;
    this->m_org_eclipse_jetty_servlet_session_domain_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixHttpProperties::getOrgEclipseJettyServletSessionPath() const {
    return org_eclipse_jetty_servlet_session_path;
}
void
OAIOrgApacheFelixHttpProperties::setOrgEclipseJettyServletSessionPath(const OAIConfigNodePropertyString &org_eclipse_jetty_servlet_session_path) {
    this->org_eclipse_jetty_servlet_session_path = org_eclipse_jetty_servlet_session_path;
    this->m_org_eclipse_jetty_servlet_session_path_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheFelixHttpProperties::getOrgEclipseJettyServletMaxAge() const {
    return org_eclipse_jetty_servlet_max_age;
}
void
OAIOrgApacheFelixHttpProperties::setOrgEclipseJettyServletMaxAge(const OAIConfigNodePropertyInteger &org_eclipse_jetty_servlet_max_age) {
    this->org_eclipse_jetty_servlet_max_age = org_eclipse_jetty_servlet_max_age;
    this->m_org_eclipse_jetty_servlet_max_age_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpName() const {
    return org_apache_felix_http_name;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpName(const OAIConfigNodePropertyString &org_apache_felix_http_name) {
    this->org_apache_felix_http_name = org_apache_felix_http_name;
    this->m_org_apache_felix_http_name_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixJettyGziphandlerEnable() const {
    return org_apache_felix_jetty_gziphandler_enable;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixJettyGziphandlerEnable(const OAIConfigNodePropertyBoolean &org_apache_felix_jetty_gziphandler_enable) {
    this->org_apache_felix_jetty_gziphandler_enable = org_apache_felix_jetty_gziphandler_enable;
    this->m_org_apache_felix_jetty_gziphandler_enable_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipMinGzipSize() const {
    return org_apache_felix_jetty_gzip_min_gzip_size;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipMinGzipSize(const OAIConfigNodePropertyInteger &org_apache_felix_jetty_gzip_min_gzip_size) {
    this->org_apache_felix_jetty_gzip_min_gzip_size = org_apache_felix_jetty_gzip_min_gzip_size;
    this->m_org_apache_felix_jetty_gzip_min_gzip_size_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipCompressionLevel() const {
    return org_apache_felix_jetty_gzip_compression_level;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipCompressionLevel(const OAIConfigNodePropertyInteger &org_apache_felix_jetty_gzip_compression_level) {
    this->org_apache_felix_jetty_gzip_compression_level = org_apache_felix_jetty_gzip_compression_level;
    this->m_org_apache_felix_jetty_gzip_compression_level_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipInflateBufferSize() const {
    return org_apache_felix_jetty_gzip_inflate_buffer_size;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipInflateBufferSize(const OAIConfigNodePropertyInteger &org_apache_felix_jetty_gzip_inflate_buffer_size) {
    this->org_apache_felix_jetty_gzip_inflate_buffer_size = org_apache_felix_jetty_gzip_inflate_buffer_size;
    this->m_org_apache_felix_jetty_gzip_inflate_buffer_size_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipSyncFlush() const {
    return org_apache_felix_jetty_gzip_sync_flush;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipSyncFlush(const OAIConfigNodePropertyBoolean &org_apache_felix_jetty_gzip_sync_flush) {
    this->org_apache_felix_jetty_gzip_sync_flush = org_apache_felix_jetty_gzip_sync_flush;
    this->m_org_apache_felix_jetty_gzip_sync_flush_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipExcludedUserAgents() const {
    return org_apache_felix_jetty_gzip_excluded_user_agents;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipExcludedUserAgents(const OAIConfigNodePropertyArray &org_apache_felix_jetty_gzip_excluded_user_agents) {
    this->org_apache_felix_jetty_gzip_excluded_user_agents = org_apache_felix_jetty_gzip_excluded_user_agents;
    this->m_org_apache_felix_jetty_gzip_excluded_user_agents_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipIncludedMethods() const {
    return org_apache_felix_jetty_gzip_included_methods;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipIncludedMethods(const OAIConfigNodePropertyArray &org_apache_felix_jetty_gzip_included_methods) {
    this->org_apache_felix_jetty_gzip_included_methods = org_apache_felix_jetty_gzip_included_methods;
    this->m_org_apache_felix_jetty_gzip_included_methods_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipExcludedMethods() const {
    return org_apache_felix_jetty_gzip_excluded_methods;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipExcludedMethods(const OAIConfigNodePropertyArray &org_apache_felix_jetty_gzip_excluded_methods) {
    this->org_apache_felix_jetty_gzip_excluded_methods = org_apache_felix_jetty_gzip_excluded_methods;
    this->m_org_apache_felix_jetty_gzip_excluded_methods_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipIncludedPaths() const {
    return org_apache_felix_jetty_gzip_included_paths;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipIncludedPaths(const OAIConfigNodePropertyArray &org_apache_felix_jetty_gzip_included_paths) {
    this->org_apache_felix_jetty_gzip_included_paths = org_apache_felix_jetty_gzip_included_paths;
    this->m_org_apache_felix_jetty_gzip_included_paths_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipExcludedPaths() const {
    return org_apache_felix_jetty_gzip_excluded_paths;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipExcludedPaths(const OAIConfigNodePropertyArray &org_apache_felix_jetty_gzip_excluded_paths) {
    this->org_apache_felix_jetty_gzip_excluded_paths = org_apache_felix_jetty_gzip_excluded_paths;
    this->m_org_apache_felix_jetty_gzip_excluded_paths_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipIncludedMimeTypes() const {
    return org_apache_felix_jetty_gzip_included_mime_types;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipIncludedMimeTypes(const OAIConfigNodePropertyArray &org_apache_felix_jetty_gzip_included_mime_types) {
    this->org_apache_felix_jetty_gzip_included_mime_types = org_apache_felix_jetty_gzip_included_mime_types;
    this->m_org_apache_felix_jetty_gzip_included_mime_types_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixJettyGzipExcludedMimeTypes() const {
    return org_apache_felix_jetty_gzip_excluded_mime_types;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixJettyGzipExcludedMimeTypes(const OAIConfigNodePropertyArray &org_apache_felix_jetty_gzip_excluded_mime_types) {
    this->org_apache_felix_jetty_gzip_excluded_mime_types = org_apache_felix_jetty_gzip_excluded_mime_types;
    this->m_org_apache_felix_jetty_gzip_excluded_mime_types_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpSessionInvalidate() const {
    return org_apache_felix_http_session_invalidate;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpSessionInvalidate(const OAIConfigNodePropertyBoolean &org_apache_felix_http_session_invalidate) {
    this->org_apache_felix_http_session_invalidate = org_apache_felix_http_session_invalidate;
    this->m_org_apache_felix_http_session_invalidate_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheFelixHttpProperties::getOrgApacheFelixHttpSessionUniqueid() const {
    return org_apache_felix_http_session_uniqueid;
}
void
OAIOrgApacheFelixHttpProperties::setOrgApacheFelixHttpSessionUniqueid(const OAIConfigNodePropertyBoolean &org_apache_felix_http_session_uniqueid) {
    this->org_apache_felix_http_session_uniqueid = org_apache_felix_http_session_uniqueid;
    this->m_org_apache_felix_http_session_uniqueid_isSet = true;
}


bool
OAIOrgApacheFelixHttpProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(org_apache_felix_http_host.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_http_enable.isSet()){ isObjectUpdated = true; break;}
    
        if(org_osgi_service_http_port.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_http_timeout.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_https_enable.isSet()){ isObjectUpdated = true; break;}
    
        if(org_osgi_service_http_port_secure.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_https_keystore.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_https_keystore_password.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_https_keystore_key_password.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_https_truststore.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_https_truststore_password.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_https_clientcertificate.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_http_context_path.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_http_mbeans.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_http_session_timeout.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_http_jetty_threadpool_max.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_http_jetty_acceptors.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_http_jetty_selectors.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_http_jetty_header_buffer_size.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_http_jetty_request_buffer_size.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_http_jetty_response_buffer_size.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_http_jetty_max_form_size.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_http_path_exclusions.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_https_jetty_ciphersuites_excluded.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_https_jetty_ciphersuites_included.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_http_jetty_send_server_header.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_https_jetty_protocols_included.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_https_jetty_protocols_excluded.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_proxy_load_balancer_connection_enable.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_https_jetty_renegotiate_allowed.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_https_jetty_session_cookie_http_only.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_https_jetty_session_cookie_secure.isSet()){ isObjectUpdated = true; break;}
    
        if(org_eclipse_jetty_servlet_session_id_path_parameter_name.isSet()){ isObjectUpdated = true; break;}
    
        if(org_eclipse_jetty_servlet_checking_remote_session_id_encoding.isSet()){ isObjectUpdated = true; break;}
    
        if(org_eclipse_jetty_servlet_session_cookie.isSet()){ isObjectUpdated = true; break;}
    
        if(org_eclipse_jetty_servlet_session_domain.isSet()){ isObjectUpdated = true; break;}
    
        if(org_eclipse_jetty_servlet_session_path.isSet()){ isObjectUpdated = true; break;}
    
        if(org_eclipse_jetty_servlet_max_age.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_http_name.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_jetty_gziphandler_enable.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_jetty_gzip_min_gzip_size.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_jetty_gzip_compression_level.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_jetty_gzip_inflate_buffer_size.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_jetty_gzip_sync_flush.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_jetty_gzip_excluded_user_agents.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_jetty_gzip_included_methods.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_jetty_gzip_excluded_methods.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_jetty_gzip_included_paths.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_jetty_gzip_excluded_paths.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_jetty_gzip_included_mime_types.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_jetty_gzip_excluded_mime_types.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_http_session_invalidate.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_felix_http_session_uniqueid.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

