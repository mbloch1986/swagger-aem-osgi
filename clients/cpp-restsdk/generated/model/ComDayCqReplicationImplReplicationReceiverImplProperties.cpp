/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqReplicationImplReplicationReceiverImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqReplicationImplReplicationReceiverImplProperties::ComDayCqReplicationImplReplicationReceiverImplProperties()
{
    m_Receiver_tmpfile_thresholdIsSet = false;
    m_Receiver_packages_use_installIsSet = false;
}

ComDayCqReplicationImplReplicationReceiverImplProperties::~ComDayCqReplicationImplReplicationReceiverImplProperties()
{
}

void ComDayCqReplicationImplReplicationReceiverImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqReplicationImplReplicationReceiverImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Receiver_tmpfile_thresholdIsSet)
    {
        val[utility::conversions::to_string_t("receiver.tmpfile.threshold")] = ModelBase::toJson(m_Receiver_tmpfile_threshold);
    }
    if(m_Receiver_packages_use_installIsSet)
    {
        val[utility::conversions::to_string_t("receiver.packages.use.install")] = ModelBase::toJson(m_Receiver_packages_use_install);
    }

    return val;
}

void ComDayCqReplicationImplReplicationReceiverImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("receiver.tmpfile.threshold")))
    {
        if(!val[utility::conversions::to_string_t("receiver.tmpfile.threshold")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("receiver.tmpfile.threshold")]);
            setReceiverTmpfileThreshold( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("receiver.packages.use.install")))
    {
        if(!val[utility::conversions::to_string_t("receiver.packages.use.install")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("receiver.packages.use.install")]);
            setReceiverPackagesUseInstall( newItem );
        }
    }
}

void ComDayCqReplicationImplReplicationReceiverImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Receiver_tmpfile_thresholdIsSet)
    {
        if (m_Receiver_tmpfile_threshold.get())
        {
            m_Receiver_tmpfile_threshold->toMultipart(multipart, utility::conversions::to_string_t("receiver.tmpfile.threshold."));
        }
    }
    if(m_Receiver_packages_use_installIsSet)
    {
        if (m_Receiver_packages_use_install.get())
        {
            m_Receiver_packages_use_install->toMultipart(multipart, utility::conversions::to_string_t("receiver.packages.use.install."));
        }
    }
}

void ComDayCqReplicationImplReplicationReceiverImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("receiver.tmpfile.threshold")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("receiver.tmpfile.threshold")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("receiver.tmpfile.threshold."));
            setReceiverTmpfileThreshold( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("receiver.packages.use.install")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("receiver.packages.use.install")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("receiver.packages.use.install."));
            setReceiverPackagesUseInstall( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqReplicationImplReplicationReceiverImplProperties::getReceiverTmpfileThreshold() const
{
    return m_Receiver_tmpfile_threshold;
}


void ComDayCqReplicationImplReplicationReceiverImplProperties::setReceiverTmpfileThreshold(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Receiver_tmpfile_threshold = value;
    m_Receiver_tmpfile_thresholdIsSet = true;
}
bool ComDayCqReplicationImplReplicationReceiverImplProperties::receiverTmpfileThresholdIsSet() const
{
    return m_Receiver_tmpfile_thresholdIsSet;
}

void ComDayCqReplicationImplReplicationReceiverImplProperties::unsetReceiver_tmpfile_threshold()
{
    m_Receiver_tmpfile_thresholdIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqReplicationImplReplicationReceiverImplProperties::getReceiverPackagesUseInstall() const
{
    return m_Receiver_packages_use_install;
}


void ComDayCqReplicationImplReplicationReceiverImplProperties::setReceiverPackagesUseInstall(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Receiver_packages_use_install = value;
    m_Receiver_packages_use_installIsSet = true;
}
bool ComDayCqReplicationImplReplicationReceiverImplProperties::receiverPackagesUseInstallIsSet() const
{
    return m_Receiver_packages_use_installIsSet;
}

void ComDayCqReplicationImplReplicationReceiverImplProperties::unsetReceiver_packages_use_install()
{
    m_Receiver_packages_use_installIsSet = false;
}

}
}
}
}

