/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingSecurityImplReferrerFilterProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingSecurityImplReferrerFilterProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingSecurityImplReferrerFilterProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyArray.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingSecurityImplReferrerFilterProperties
    : public ModelBase
{
public:
    OrgApacheSlingSecurityImplReferrerFilterProperties();
    virtual ~OrgApacheSlingSecurityImplReferrerFilterProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingSecurityImplReferrerFilterProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getAllowEmpty() const;
    bool allowEmptyIsSet() const;
    void unsetAllow_empty();
    void setAllowEmpty(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getAllowHosts() const;
    bool allowHostsIsSet() const;
    void unsetAllow_hosts();
    void setAllowHosts(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getAllowHostsRegexp() const;
    bool allowHostsRegexpIsSet() const;
    void unsetAllow_hosts_regexp();
    void setAllowHostsRegexp(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getFilterMethods() const;
    bool filterMethodsIsSet() const;
    void unsetFilter_methods();
    void setFilterMethods(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getExcludeAgentsRegexp() const;
    bool excludeAgentsRegexpIsSet() const;
    void unsetExclude_agents_regexp();
    void setExcludeAgentsRegexp(std::shared_ptr<ConfigNodePropertyArray> value);

protected:
    std::shared_ptr<ConfigNodePropertyBoolean> m_Allow_empty;
    bool m_Allow_emptyIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Allow_hosts;
    bool m_Allow_hostsIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Allow_hosts_regexp;
    bool m_Allow_hosts_regexpIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Filter_methods;
    bool m_Filter_methodsIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Exclude_agents_regexp;
    bool m_Exclude_agents_regexpIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingSecurityImplReferrerFilterProperties_H_ */
