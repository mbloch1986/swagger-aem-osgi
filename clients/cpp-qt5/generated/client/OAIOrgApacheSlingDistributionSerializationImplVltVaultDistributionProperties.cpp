/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties() {
    init();
}

OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::~OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::init() {
    name = new OAIConfigNodePropertyString();
    m_name_isSet = false;
    type = new OAIConfigNodePropertyDropDown();
    m_type_isSet = false;
    import_mode = new OAIConfigNodePropertyString();
    m_import_mode_isSet = false;
    acl_handling = new OAIConfigNodePropertyString();
    m_acl_handling_isSet = false;
    package_roots = new OAIConfigNodePropertyString();
    m_package_roots_isSet = false;
    package_filters = new OAIConfigNodePropertyArray();
    m_package_filters_isSet = false;
    property_filters = new OAIConfigNodePropertyArray();
    m_property_filters_isSet = false;
    temp_fs_folder = new OAIConfigNodePropertyString();
    m_temp_fs_folder_isSet = false;
    use_binary_references = new OAIConfigNodePropertyBoolean();
    m_use_binary_references_isSet = false;
    auto_save_threshold = new OAIConfigNodePropertyInteger();
    m_auto_save_threshold_isSet = false;
    cleanup_delay = new OAIConfigNodePropertyInteger();
    m_cleanup_delay_isSet = false;
    file_threshold = new OAIConfigNodePropertyInteger();
    m_file_threshold_isSet = false;
    mega_bytes = new OAIConfigNodePropertyDropDown();
    m_mega_bytes_isSet = false;
    use_off_heap_memory = new OAIConfigNodePropertyBoolean();
    m_use_off_heap_memory_isSet = false;
    digest_algorithm = new OAIConfigNodePropertyDropDown();
    m_digest_algorithm_isSet = false;
    monitoring_queue_size = new OAIConfigNodePropertyInteger();
    m_monitoring_queue_size_isSet = false;
    paths_mapping = new OAIConfigNodePropertyArray();
    m_paths_mapping_isSet = false;
    strict_import = new OAIConfigNodePropertyBoolean();
    m_strict_import_isSet = false;
}

void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::cleanup() {
    if(name != nullptr) { 
        delete name;
    }
    if(type != nullptr) { 
        delete type;
    }
    if(import_mode != nullptr) { 
        delete import_mode;
    }
    if(acl_handling != nullptr) { 
        delete acl_handling;
    }
    if(package_roots != nullptr) { 
        delete package_roots;
    }
    if(package_filters != nullptr) { 
        delete package_filters;
    }
    if(property_filters != nullptr) { 
        delete property_filters;
    }
    if(temp_fs_folder != nullptr) { 
        delete temp_fs_folder;
    }
    if(use_binary_references != nullptr) { 
        delete use_binary_references;
    }
    if(auto_save_threshold != nullptr) { 
        delete auto_save_threshold;
    }
    if(cleanup_delay != nullptr) { 
        delete cleanup_delay;
    }
    if(file_threshold != nullptr) { 
        delete file_threshold;
    }
    if(mega_bytes != nullptr) { 
        delete mega_bytes;
    }
    if(use_off_heap_memory != nullptr) { 
        delete use_off_heap_memory;
    }
    if(digest_algorithm != nullptr) { 
        delete digest_algorithm;
    }
    if(monitoring_queue_size != nullptr) { 
        delete monitoring_queue_size;
    }
    if(paths_mapping != nullptr) { 
        delete paths_mapping;
    }
    if(strict_import != nullptr) { 
        delete strict_import;
    }
}

OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties*
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&name, pJson["name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&type, pJson["type"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&import_mode, pJson["importMode"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&acl_handling, pJson["aclHandling"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&package_roots, pJson["package.roots"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&package_filters, pJson["package.filters"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&property_filters, pJson["property.filters"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&temp_fs_folder, pJson["tempFsFolder"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&use_binary_references, pJson["useBinaryReferences"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&auto_save_threshold, pJson["autoSaveThreshold"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cleanup_delay, pJson["cleanupDelay"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&file_threshold, pJson["fileThreshold"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&mega_bytes, pJson["MEGA_BYTES"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&use_off_heap_memory, pJson["useOffHeapMemory"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&digest_algorithm, pJson["digestAlgorithm"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&monitoring_queue_size, pJson["monitoringQueueSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&paths_mapping, pJson["pathsMapping"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&strict_import, pJson["strictImport"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::asJsonObject() {
    QJsonObject obj;
    if((name != nullptr) && (name->isSet())){
        toJsonValue(QString("name"), name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((type != nullptr) && (type->isSet())){
        toJsonValue(QString("type"), type, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((import_mode != nullptr) && (import_mode->isSet())){
        toJsonValue(QString("importMode"), import_mode, obj, QString("OAIConfigNodePropertyString"));
    }
    if((acl_handling != nullptr) && (acl_handling->isSet())){
        toJsonValue(QString("aclHandling"), acl_handling, obj, QString("OAIConfigNodePropertyString"));
    }
    if((package_roots != nullptr) && (package_roots->isSet())){
        toJsonValue(QString("package.roots"), package_roots, obj, QString("OAIConfigNodePropertyString"));
    }
    if((package_filters != nullptr) && (package_filters->isSet())){
        toJsonValue(QString("package.filters"), package_filters, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((property_filters != nullptr) && (property_filters->isSet())){
        toJsonValue(QString("property.filters"), property_filters, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((temp_fs_folder != nullptr) && (temp_fs_folder->isSet())){
        toJsonValue(QString("tempFsFolder"), temp_fs_folder, obj, QString("OAIConfigNodePropertyString"));
    }
    if((use_binary_references != nullptr) && (use_binary_references->isSet())){
        toJsonValue(QString("useBinaryReferences"), use_binary_references, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((auto_save_threshold != nullptr) && (auto_save_threshold->isSet())){
        toJsonValue(QString("autoSaveThreshold"), auto_save_threshold, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cleanup_delay != nullptr) && (cleanup_delay->isSet())){
        toJsonValue(QString("cleanupDelay"), cleanup_delay, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((file_threshold != nullptr) && (file_threshold->isSet())){
        toJsonValue(QString("fileThreshold"), file_threshold, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((mega_bytes != nullptr) && (mega_bytes->isSet())){
        toJsonValue(QString("MEGA_BYTES"), mega_bytes, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((use_off_heap_memory != nullptr) && (use_off_heap_memory->isSet())){
        toJsonValue(QString("useOffHeapMemory"), use_off_heap_memory, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((digest_algorithm != nullptr) && (digest_algorithm->isSet())){
        toJsonValue(QString("digestAlgorithm"), digest_algorithm, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((monitoring_queue_size != nullptr) && (monitoring_queue_size->isSet())){
        toJsonValue(QString("monitoringQueueSize"), monitoring_queue_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((paths_mapping != nullptr) && (paths_mapping->isSet())){
        toJsonValue(QString("pathsMapping"), paths_mapping, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((strict_import != nullptr) && (strict_import->isSet())){
        toJsonValue(QString("strictImport"), strict_import, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getName() {
    return name;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setName(OAIConfigNodePropertyString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getType() {
    return type;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setType(OAIConfigNodePropertyDropDown* type) {
    this->type = type;
    this->m_type_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getImportMode() {
    return import_mode;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setImportMode(OAIConfigNodePropertyString* import_mode) {
    this->import_mode = import_mode;
    this->m_import_mode_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getAclHandling() {
    return acl_handling;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setAclHandling(OAIConfigNodePropertyString* acl_handling) {
    this->acl_handling = acl_handling;
    this->m_acl_handling_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getPackageRoots() {
    return package_roots;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setPackageRoots(OAIConfigNodePropertyString* package_roots) {
    this->package_roots = package_roots;
    this->m_package_roots_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getPackageFilters() {
    return package_filters;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setPackageFilters(OAIConfigNodePropertyArray* package_filters) {
    this->package_filters = package_filters;
    this->m_package_filters_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getPropertyFilters() {
    return property_filters;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setPropertyFilters(OAIConfigNodePropertyArray* property_filters) {
    this->property_filters = property_filters;
    this->m_property_filters_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getTempFsFolder() {
    return temp_fs_folder;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setTempFsFolder(OAIConfigNodePropertyString* temp_fs_folder) {
    this->temp_fs_folder = temp_fs_folder;
    this->m_temp_fs_folder_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getUseBinaryReferences() {
    return use_binary_references;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setUseBinaryReferences(OAIConfigNodePropertyBoolean* use_binary_references) {
    this->use_binary_references = use_binary_references;
    this->m_use_binary_references_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getAutoSaveThreshold() {
    return auto_save_threshold;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setAutoSaveThreshold(OAIConfigNodePropertyInteger* auto_save_threshold) {
    this->auto_save_threshold = auto_save_threshold;
    this->m_auto_save_threshold_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getCleanupDelay() {
    return cleanup_delay;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setCleanupDelay(OAIConfigNodePropertyInteger* cleanup_delay) {
    this->cleanup_delay = cleanup_delay;
    this->m_cleanup_delay_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getFileThreshold() {
    return file_threshold;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setFileThreshold(OAIConfigNodePropertyInteger* file_threshold) {
    this->file_threshold = file_threshold;
    this->m_file_threshold_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getMegaBytes() {
    return mega_bytes;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setMegaBytes(OAIConfigNodePropertyDropDown* mega_bytes) {
    this->mega_bytes = mega_bytes;
    this->m_mega_bytes_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getUseOffHeapMemory() {
    return use_off_heap_memory;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setUseOffHeapMemory(OAIConfigNodePropertyBoolean* use_off_heap_memory) {
    this->use_off_heap_memory = use_off_heap_memory;
    this->m_use_off_heap_memory_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getDigestAlgorithm() {
    return digest_algorithm;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setDigestAlgorithm(OAIConfigNodePropertyDropDown* digest_algorithm) {
    this->digest_algorithm = digest_algorithm;
    this->m_digest_algorithm_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getMonitoringQueueSize() {
    return monitoring_queue_size;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setMonitoringQueueSize(OAIConfigNodePropertyInteger* monitoring_queue_size) {
    this->monitoring_queue_size = monitoring_queue_size;
    this->m_monitoring_queue_size_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getPathsMapping() {
    return paths_mapping;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setPathsMapping(OAIConfigNodePropertyArray* paths_mapping) {
    this->paths_mapping = paths_mapping;
    this->m_paths_mapping_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getStrictImport() {
    return strict_import;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setStrictImport(OAIConfigNodePropertyBoolean* strict_import) {
    this->strict_import = strict_import;
    this->m_strict_import_isSet = true;
}


bool
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(name != nullptr && name->isSet()){ isObjectUpdated = true; break;}
        if(type != nullptr && type->isSet()){ isObjectUpdated = true; break;}
        if(import_mode != nullptr && import_mode->isSet()){ isObjectUpdated = true; break;}
        if(acl_handling != nullptr && acl_handling->isSet()){ isObjectUpdated = true; break;}
        if(package_roots != nullptr && package_roots->isSet()){ isObjectUpdated = true; break;}
        if(package_filters != nullptr && package_filters->isSet()){ isObjectUpdated = true; break;}
        if(property_filters != nullptr && property_filters->isSet()){ isObjectUpdated = true; break;}
        if(temp_fs_folder != nullptr && temp_fs_folder->isSet()){ isObjectUpdated = true; break;}
        if(use_binary_references != nullptr && use_binary_references->isSet()){ isObjectUpdated = true; break;}
        if(auto_save_threshold != nullptr && auto_save_threshold->isSet()){ isObjectUpdated = true; break;}
        if(cleanup_delay != nullptr && cleanup_delay->isSet()){ isObjectUpdated = true; break;}
        if(file_threshold != nullptr && file_threshold->isSet()){ isObjectUpdated = true; break;}
        if(mega_bytes != nullptr && mega_bytes->isSet()){ isObjectUpdated = true; break;}
        if(use_off_heap_memory != nullptr && use_off_heap_memory->isSet()){ isObjectUpdated = true; break;}
        if(digest_algorithm != nullptr && digest_algorithm->isSet()){ isObjectUpdated = true; break;}
        if(monitoring_queue_size != nullptr && monitoring_queue_size->isSet()){ isObjectUpdated = true; break;}
        if(paths_mapping != nullptr && paths_mapping->isSet()){ isObjectUpdated = true; break;}
        if(strict_import != nullptr && strict_import->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

