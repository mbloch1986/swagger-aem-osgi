/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties()
{
    m_Scheduler_expressionIsSet = false;
    m_Scheduler_concurrentIsSet = false;
    m_Chunk_cleanup_ageIsSet = false;
}

OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::~OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties()
{
}

void OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Scheduler_expressionIsSet)
    {
        val[utility::conversions::to_string_t("scheduler.expression")] = ModelBase::toJson(m_Scheduler_expression);
    }
    if(m_Scheduler_concurrentIsSet)
    {
        val[utility::conversions::to_string_t("scheduler.concurrent")] = ModelBase::toJson(m_Scheduler_concurrent);
    }
    if(m_Chunk_cleanup_ageIsSet)
    {
        val[utility::conversions::to_string_t("chunk.cleanup.age")] = ModelBase::toJson(m_Chunk_cleanup_age);
    }

    return val;
}

void OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("scheduler.expression")))
    {
        if(!val[utility::conversions::to_string_t("scheduler.expression")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduler.expression")]);
            setSchedulerExpression( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scheduler.concurrent")))
    {
        if(!val[utility::conversions::to_string_t("scheduler.concurrent")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduler.concurrent")]);
            setSchedulerConcurrent( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("chunk.cleanup.age")))
    {
        if(!val[utility::conversions::to_string_t("chunk.cleanup.age")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("chunk.cleanup.age")]);
            setChunkCleanupAge( newItem );
        }
    }
}

void OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Scheduler_expressionIsSet)
    {
        if (m_Scheduler_expression.get())
        {
            m_Scheduler_expression->toMultipart(multipart, utility::conversions::to_string_t("scheduler.expression."));
        }
    }
    if(m_Scheduler_concurrentIsSet)
    {
        if (m_Scheduler_concurrent.get())
        {
            m_Scheduler_concurrent->toMultipart(multipart, utility::conversions::to_string_t("scheduler.concurrent."));
        }
    }
    if(m_Chunk_cleanup_ageIsSet)
    {
        if (m_Chunk_cleanup_age.get())
        {
            m_Chunk_cleanup_age->toMultipart(multipart, utility::conversions::to_string_t("chunk.cleanup.age."));
        }
    }
}

void OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("scheduler.expression")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduler.expression")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduler.expression."));
            setSchedulerExpression( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scheduler.concurrent")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduler.concurrent")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduler.concurrent."));
            setSchedulerConcurrent( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("chunk.cleanup.age")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("chunk.cleanup.age")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("chunk.cleanup.age."));
            setChunkCleanupAge( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::getSchedulerExpression() const
{
    return m_Scheduler_expression;
}


void OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::setSchedulerExpression(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Scheduler_expression = value;
    m_Scheduler_expressionIsSet = true;
}
bool OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::schedulerExpressionIsSet() const
{
    return m_Scheduler_expressionIsSet;
}

void OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::unsetScheduler_expression()
{
    m_Scheduler_expressionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::getSchedulerConcurrent() const
{
    return m_Scheduler_concurrent;
}


void OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::setSchedulerConcurrent(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Scheduler_concurrent = value;
    m_Scheduler_concurrentIsSet = true;
}
bool OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::schedulerConcurrentIsSet() const
{
    return m_Scheduler_concurrentIsSet;
}

void OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::unsetScheduler_concurrent()
{
    m_Scheduler_concurrentIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::getChunkCleanupAge() const
{
    return m_Chunk_cleanup_age;
}


void OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::setChunkCleanupAge(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Chunk_cleanup_age = value;
    m_Chunk_cleanup_ageIsSet = true;
}
bool OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::chunkCleanupAgeIsSet() const
{
    return m_Chunk_cleanup_ageIsSet;
}

void OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties::unsetChunk_cleanup_age()
{
    m_Chunk_cleanup_ageIsSet = false;
}

}
}
}
}

