/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqPollingImporterImplManagedPollConfigImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqPollingImporterImplManagedPollConfigImplProperties::ComDayCqPollingImporterImplManagedPollConfigImplProperties()
{
    m_IdIsSet = false;
    m_EnabledIsSet = false;
    m_ReferenceIsSet = false;
    m_IntervalIsSet = false;
    m_ExpressionIsSet = false;
    m_SourceIsSet = false;
    m_TargetIsSet = false;
    m_LoginIsSet = false;
    m_PasswordIsSet = false;
}

ComDayCqPollingImporterImplManagedPollConfigImplProperties::~ComDayCqPollingImporterImplManagedPollConfigImplProperties()
{
}

void ComDayCqPollingImporterImplManagedPollConfigImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqPollingImporterImplManagedPollConfigImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t("enabled")] = ModelBase::toJson(m_Enabled);
    }
    if(m_ReferenceIsSet)
    {
        val[utility::conversions::to_string_t("reference")] = ModelBase::toJson(m_Reference);
    }
    if(m_IntervalIsSet)
    {
        val[utility::conversions::to_string_t("interval")] = ModelBase::toJson(m_Interval);
    }
    if(m_ExpressionIsSet)
    {
        val[utility::conversions::to_string_t("expression")] = ModelBase::toJson(m_Expression);
    }
    if(m_SourceIsSet)
    {
        val[utility::conversions::to_string_t("source")] = ModelBase::toJson(m_Source);
    }
    if(m_TargetIsSet)
    {
        val[utility::conversions::to_string_t("target")] = ModelBase::toJson(m_Target);
    }
    if(m_LoginIsSet)
    {
        val[utility::conversions::to_string_t("login")] = ModelBase::toJson(m_Login);
    }
    if(m_PasswordIsSet)
    {
        val[utility::conversions::to_string_t("password")] = ModelBase::toJson(m_Password);
    }

    return val;
}

void ComDayCqPollingImporterImplManagedPollConfigImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        if(!val[utility::conversions::to_string_t("id")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("id")]);
            setId( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enabled")))
    {
        if(!val[utility::conversions::to_string_t("enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enabled")]);
            setEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reference")))
    {
        if(!val[utility::conversions::to_string_t("reference")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("reference")]);
            setReference( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("interval")))
    {
        if(!val[utility::conversions::to_string_t("interval")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("interval")]);
            setInterval( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("expression")))
    {
        if(!val[utility::conversions::to_string_t("expression")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("expression")]);
            setExpression( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("source")))
    {
        if(!val[utility::conversions::to_string_t("source")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("source")]);
            setSource( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("target")))
    {
        if(!val[utility::conversions::to_string_t("target")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("target")]);
            setTarget( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("login")))
    {
        if(!val[utility::conversions::to_string_t("login")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("login")]);
            setLogin( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("password")))
    {
        if(!val[utility::conversions::to_string_t("password")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("password")]);
            setPassword( newItem );
        }
    }
}

void ComDayCqPollingImporterImplManagedPollConfigImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        if (m_Id.get())
        {
            m_Id->toMultipart(multipart, utility::conversions::to_string_t("id."));
        }
    }
    if(m_EnabledIsSet)
    {
        if (m_Enabled.get())
        {
            m_Enabled->toMultipart(multipart, utility::conversions::to_string_t("enabled."));
        }
    }
    if(m_ReferenceIsSet)
    {
        if (m_Reference.get())
        {
            m_Reference->toMultipart(multipart, utility::conversions::to_string_t("reference."));
        }
    }
    if(m_IntervalIsSet)
    {
        if (m_Interval.get())
        {
            m_Interval->toMultipart(multipart, utility::conversions::to_string_t("interval."));
        }
    }
    if(m_ExpressionIsSet)
    {
        if (m_Expression.get())
        {
            m_Expression->toMultipart(multipart, utility::conversions::to_string_t("expression."));
        }
    }
    if(m_SourceIsSet)
    {
        if (m_Source.get())
        {
            m_Source->toMultipart(multipart, utility::conversions::to_string_t("source."));
        }
    }
    if(m_TargetIsSet)
    {
        if (m_Target.get())
        {
            m_Target->toMultipart(multipart, utility::conversions::to_string_t("target."));
        }
    }
    if(m_LoginIsSet)
    {
        if (m_Login.get())
        {
            m_Login->toMultipart(multipart, utility::conversions::to_string_t("login."));
        }
    }
    if(m_PasswordIsSet)
    {
        if (m_Password.get())
        {
            m_Password->toMultipart(multipart, utility::conversions::to_string_t("password."));
        }
    }
}

void ComDayCqPollingImporterImplManagedPollConfigImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("id")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("id."));
            setId( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enabled."));
            setEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reference")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("reference")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("reference."));
            setReference( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("interval")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("interval")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("interval."));
            setInterval( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expression")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("expression")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("expression."));
            setExpression( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("source")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("source")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("source."));
            setSource( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("target")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("target")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("target."));
            setTarget( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("login")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("login")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("login."));
            setLogin( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("password")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("password")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("password."));
            setPassword( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqPollingImporterImplManagedPollConfigImplProperties::getId() const
{
    return m_Id;
}


void ComDayCqPollingImporterImplManagedPollConfigImplProperties::setId(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool ComDayCqPollingImporterImplManagedPollConfigImplProperties::idIsSet() const
{
    return m_IdIsSet;
}

void ComDayCqPollingImporterImplManagedPollConfigImplProperties::unsetId()
{
    m_IdIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqPollingImporterImplManagedPollConfigImplProperties::getEnabled() const
{
    return m_Enabled;
}


void ComDayCqPollingImporterImplManagedPollConfigImplProperties::setEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool ComDayCqPollingImporterImplManagedPollConfigImplProperties::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void ComDayCqPollingImporterImplManagedPollConfigImplProperties::unsetEnabled()
{
    m_EnabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqPollingImporterImplManagedPollConfigImplProperties::getReference() const
{
    return m_Reference;
}


void ComDayCqPollingImporterImplManagedPollConfigImplProperties::setReference(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Reference = value;
    m_ReferenceIsSet = true;
}
bool ComDayCqPollingImporterImplManagedPollConfigImplProperties::referenceIsSet() const
{
    return m_ReferenceIsSet;
}

void ComDayCqPollingImporterImplManagedPollConfigImplProperties::unsetReference()
{
    m_ReferenceIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqPollingImporterImplManagedPollConfigImplProperties::getInterval() const
{
    return m_Interval;
}


void ComDayCqPollingImporterImplManagedPollConfigImplProperties::setInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Interval = value;
    m_IntervalIsSet = true;
}
bool ComDayCqPollingImporterImplManagedPollConfigImplProperties::intervalIsSet() const
{
    return m_IntervalIsSet;
}

void ComDayCqPollingImporterImplManagedPollConfigImplProperties::unsetInterval()
{
    m_IntervalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqPollingImporterImplManagedPollConfigImplProperties::getExpression() const
{
    return m_Expression;
}


void ComDayCqPollingImporterImplManagedPollConfigImplProperties::setExpression(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Expression = value;
    m_ExpressionIsSet = true;
}
bool ComDayCqPollingImporterImplManagedPollConfigImplProperties::expressionIsSet() const
{
    return m_ExpressionIsSet;
}

void ComDayCqPollingImporterImplManagedPollConfigImplProperties::unsetExpression()
{
    m_ExpressionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqPollingImporterImplManagedPollConfigImplProperties::getSource() const
{
    return m_Source;
}


void ComDayCqPollingImporterImplManagedPollConfigImplProperties::setSource(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Source = value;
    m_SourceIsSet = true;
}
bool ComDayCqPollingImporterImplManagedPollConfigImplProperties::sourceIsSet() const
{
    return m_SourceIsSet;
}

void ComDayCqPollingImporterImplManagedPollConfigImplProperties::unsetSource()
{
    m_SourceIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqPollingImporterImplManagedPollConfigImplProperties::getTarget() const
{
    return m_Target;
}


void ComDayCqPollingImporterImplManagedPollConfigImplProperties::setTarget(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Target = value;
    m_TargetIsSet = true;
}
bool ComDayCqPollingImporterImplManagedPollConfigImplProperties::targetIsSet() const
{
    return m_TargetIsSet;
}

void ComDayCqPollingImporterImplManagedPollConfigImplProperties::unsetTarget()
{
    m_TargetIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqPollingImporterImplManagedPollConfigImplProperties::getLogin() const
{
    return m_Login;
}


void ComDayCqPollingImporterImplManagedPollConfigImplProperties::setLogin(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Login = value;
    m_LoginIsSet = true;
}
bool ComDayCqPollingImporterImplManagedPollConfigImplProperties::loginIsSet() const
{
    return m_LoginIsSet;
}

void ComDayCqPollingImporterImplManagedPollConfigImplProperties::unsetLogin()
{
    m_LoginIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqPollingImporterImplManagedPollConfigImplProperties::getPassword() const
{
    return m_Password;
}


void ComDayCqPollingImporterImplManagedPollConfigImplProperties::setPassword(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}
bool ComDayCqPollingImporterImplManagedPollConfigImplProperties::passwordIsSet() const
{
    return m_PasswordIsSet;
}

void ComDayCqPollingImporterImplManagedPollConfigImplProperties::unsetPassword()
{
    m_PasswordIsSet = false;
}

}
}
}
}

