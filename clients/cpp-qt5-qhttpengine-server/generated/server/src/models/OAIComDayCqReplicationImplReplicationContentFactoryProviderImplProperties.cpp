/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties() {
    this->init();
}

OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::~OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties() {
    
}

void
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::init() {
    m_replication_content_use_file_storage_isSet = false;
    m_replication_content_max_commit_attempts_isSet = false;
}

void
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(replication_content_use_file_storage, json[QString("replication.content.useFileStorage")]);
    
    ::OpenAPI::fromJsonValue(replication_content_max_commit_attempts, json[QString("replication.content.maxCommitAttempts")]);
    
}

QString
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(replication_content_use_file_storage.isSet()){
        obj.insert(QString("replication.content.useFileStorage"), ::OpenAPI::toJsonValue(replication_content_use_file_storage));
    }
	if(replication_content_max_commit_attempts.isSet()){
        obj.insert(QString("replication.content.maxCommitAttempts"), ::OpenAPI::toJsonValue(replication_content_max_commit_attempts));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::getReplicationContentUseFileStorage() const {
    return replication_content_use_file_storage;
}
void
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::setReplicationContentUseFileStorage(const OAIConfigNodePropertyBoolean &replication_content_use_file_storage) {
    this->replication_content_use_file_storage = replication_content_use_file_storage;
    this->m_replication_content_use_file_storage_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::getReplicationContentMaxCommitAttempts() const {
    return replication_content_max_commit_attempts;
}
void
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::setReplicationContentMaxCommitAttempts(const OAIConfigNodePropertyInteger &replication_content_max_commit_attempts) {
    this->replication_content_max_commit_attempts = replication_content_max_commit_attempts;
    this->m_replication_content_max_commit_attempts_isSet = true;
}


bool
OAIComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(replication_content_use_file_storage.isSet()){ isObjectUpdated = true; break;}
    
        if(replication_content_max_commit_attempts.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

