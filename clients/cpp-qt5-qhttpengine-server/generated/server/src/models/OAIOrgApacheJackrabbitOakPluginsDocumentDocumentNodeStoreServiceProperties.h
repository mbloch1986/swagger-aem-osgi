/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.h
 *
 * 
 */

#ifndef OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties_H
#define OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties_H

#include <QJsonObject>


#include "OAIConfigNodePropertyArray.h"
#include "OAIConfigNodePropertyBoolean.h"
#include "OAIConfigNodePropertyDropDown.h"
#include "OAIConfigNodePropertyInteger.h"
#include "OAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties: public OAIObject {
public:
    OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties();
    OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties(QString json);
    ~OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties() override;
    void init();

    QString asJson () const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConfigNodePropertyString getMongouri() const;
    void setMongouri(const OAIConfigNodePropertyString &mongouri);

    OAIConfigNodePropertyString getDb() const;
    void setDb(const OAIConfigNodePropertyString &db);

    OAIConfigNodePropertyBoolean getSocketKeepAlive() const;
    void setSocketKeepAlive(const OAIConfigNodePropertyBoolean &socket_keep_alive);

    OAIConfigNodePropertyInteger getCache() const;
    void setCache(const OAIConfigNodePropertyInteger &cache);

    OAIConfigNodePropertyInteger getNodeCachePercentage() const;
    void setNodeCachePercentage(const OAIConfigNodePropertyInteger &node_cache_percentage);

    OAIConfigNodePropertyInteger getPrevDocCachePercentage() const;
    void setPrevDocCachePercentage(const OAIConfigNodePropertyInteger &prev_doc_cache_percentage);

    OAIConfigNodePropertyInteger getChildrenCachePercentage() const;
    void setChildrenCachePercentage(const OAIConfigNodePropertyInteger &children_cache_percentage);

    OAIConfigNodePropertyInteger getDiffCachePercentage() const;
    void setDiffCachePercentage(const OAIConfigNodePropertyInteger &diff_cache_percentage);

    OAIConfigNodePropertyInteger getCacheSegmentCount() const;
    void setCacheSegmentCount(const OAIConfigNodePropertyInteger &cache_segment_count);

    OAIConfigNodePropertyInteger getCacheStackMoveDistance() const;
    void setCacheStackMoveDistance(const OAIConfigNodePropertyInteger &cache_stack_move_distance);

    OAIConfigNodePropertyInteger getBlobCacheSize() const;
    void setBlobCacheSize(const OAIConfigNodePropertyInteger &blob_cache_size);

    OAIConfigNodePropertyString getPersistentCache() const;
    void setPersistentCache(const OAIConfigNodePropertyString &persistent_cache);

    OAIConfigNodePropertyString getJournalCache() const;
    void setJournalCache(const OAIConfigNodePropertyString &journal_cache);

    OAIConfigNodePropertyBoolean getCustomBlobStore() const;
    void setCustomBlobStore(const OAIConfigNodePropertyBoolean &custom_blob_store);

    OAIConfigNodePropertyInteger getJournalGcInterval() const;
    void setJournalGcInterval(const OAIConfigNodePropertyInteger &journal_gc_interval);

    OAIConfigNodePropertyInteger getJournalGcMaxAge() const;
    void setJournalGcMaxAge(const OAIConfigNodePropertyInteger &journal_gc_max_age);

    OAIConfigNodePropertyBoolean getPrefetchExternalChanges() const;
    void setPrefetchExternalChanges(const OAIConfigNodePropertyBoolean &prefetch_external_changes);

    OAIConfigNodePropertyString getRole() const;
    void setRole(const OAIConfigNodePropertyString &role);

    OAIConfigNodePropertyInteger getVersionGcMaxAgeInSecs() const;
    void setVersionGcMaxAgeInSecs(const OAIConfigNodePropertyInteger &version_gc_max_age_in_secs);

    OAIConfigNodePropertyString getVersionGcExpression() const;
    void setVersionGcExpression(const OAIConfigNodePropertyString &version_gc_expression);

    OAIConfigNodePropertyInteger getVersionGcTimeLimitInSecs() const;
    void setVersionGcTimeLimitInSecs(const OAIConfigNodePropertyInteger &version_gc_time_limit_in_secs);

    OAIConfigNodePropertyInteger getBlobGcMaxAgeInSecs() const;
    void setBlobGcMaxAgeInSecs(const OAIConfigNodePropertyInteger &blob_gc_max_age_in_secs);

    OAIConfigNodePropertyInteger getBlobTrackSnapshotIntervalInSecs() const;
    void setBlobTrackSnapshotIntervalInSecs(const OAIConfigNodePropertyInteger &blob_track_snapshot_interval_in_secs);

    OAIConfigNodePropertyString getRepositoryHome() const;
    void setRepositoryHome(const OAIConfigNodePropertyString &repository_home);

    OAIConfigNodePropertyInteger getMaxReplicationLagInSecs() const;
    void setMaxReplicationLagInSecs(const OAIConfigNodePropertyInteger &max_replication_lag_in_secs);

    OAIConfigNodePropertyDropDown getDocumentStoreType() const;
    void setDocumentStoreType(const OAIConfigNodePropertyDropDown &document_store_type);

    OAIConfigNodePropertyBoolean getBundlingDisabled() const;
    void setBundlingDisabled(const OAIConfigNodePropertyBoolean &bundling_disabled);

    OAIConfigNodePropertyInteger getUpdateLimit() const;
    void setUpdateLimit(const OAIConfigNodePropertyInteger &update_limit);

    OAIConfigNodePropertyArray getPersistentCacheIncludes() const;
    void setPersistentCacheIncludes(const OAIConfigNodePropertyArray &persistent_cache_includes);

    OAIConfigNodePropertyDropDown getLeaseCheckMode() const;
    void setLeaseCheckMode(const OAIConfigNodePropertyDropDown &lease_check_mode);

    virtual bool isSet() const override;

private:
    OAIConfigNodePropertyString mongouri;
    bool m_mongouri_isSet;

    OAIConfigNodePropertyString db;
    bool m_db_isSet;

    OAIConfigNodePropertyBoolean socket_keep_alive;
    bool m_socket_keep_alive_isSet;

    OAIConfigNodePropertyInteger cache;
    bool m_cache_isSet;

    OAIConfigNodePropertyInteger node_cache_percentage;
    bool m_node_cache_percentage_isSet;

    OAIConfigNodePropertyInteger prev_doc_cache_percentage;
    bool m_prev_doc_cache_percentage_isSet;

    OAIConfigNodePropertyInteger children_cache_percentage;
    bool m_children_cache_percentage_isSet;

    OAIConfigNodePropertyInteger diff_cache_percentage;
    bool m_diff_cache_percentage_isSet;

    OAIConfigNodePropertyInteger cache_segment_count;
    bool m_cache_segment_count_isSet;

    OAIConfigNodePropertyInteger cache_stack_move_distance;
    bool m_cache_stack_move_distance_isSet;

    OAIConfigNodePropertyInteger blob_cache_size;
    bool m_blob_cache_size_isSet;

    OAIConfigNodePropertyString persistent_cache;
    bool m_persistent_cache_isSet;

    OAIConfigNodePropertyString journal_cache;
    bool m_journal_cache_isSet;

    OAIConfigNodePropertyBoolean custom_blob_store;
    bool m_custom_blob_store_isSet;

    OAIConfigNodePropertyInteger journal_gc_interval;
    bool m_journal_gc_interval_isSet;

    OAIConfigNodePropertyInteger journal_gc_max_age;
    bool m_journal_gc_max_age_isSet;

    OAIConfigNodePropertyBoolean prefetch_external_changes;
    bool m_prefetch_external_changes_isSet;

    OAIConfigNodePropertyString role;
    bool m_role_isSet;

    OAIConfigNodePropertyInteger version_gc_max_age_in_secs;
    bool m_version_gc_max_age_in_secs_isSet;

    OAIConfigNodePropertyString version_gc_expression;
    bool m_version_gc_expression_isSet;

    OAIConfigNodePropertyInteger version_gc_time_limit_in_secs;
    bool m_version_gc_time_limit_in_secs_isSet;

    OAIConfigNodePropertyInteger blob_gc_max_age_in_secs;
    bool m_blob_gc_max_age_in_secs_isSet;

    OAIConfigNodePropertyInteger blob_track_snapshot_interval_in_secs;
    bool m_blob_track_snapshot_interval_in_secs_isSet;

    OAIConfigNodePropertyString repository_home;
    bool m_repository_home_isSet;

    OAIConfigNodePropertyInteger max_replication_lag_in_secs;
    bool m_max_replication_lag_in_secs_isSet;

    OAIConfigNodePropertyDropDown document_store_type;
    bool m_document_store_type_isSet;

    OAIConfigNodePropertyBoolean bundling_disabled;
    bool m_bundling_disabled_isSet;

    OAIConfigNodePropertyInteger update_limit;
    bool m_update_limit_isSet;

    OAIConfigNodePropertyArray persistent_cache_includes;
    bool m_persistent_cache_includes_isSet;

    OAIConfigNodePropertyDropDown lease_check_mode;
    bool m_lease_check_mode_isSet;

};

}

#endif // OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties_H
