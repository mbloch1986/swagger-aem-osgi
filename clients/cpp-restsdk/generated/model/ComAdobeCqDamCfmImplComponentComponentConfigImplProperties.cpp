/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqDamCfmImplComponentComponentConfigImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::ComAdobeCqDamCfmImplComponentComponentConfigImplProperties()
{
    m_Dam_cfm_component_resourceTypeIsSet = false;
    m_Dam_cfm_component_fileReferencePropIsSet = false;
    m_Dam_cfm_component_elementsPropIsSet = false;
    m_Dam_cfm_component_variationPropIsSet = false;
}

ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::~ComAdobeCqDamCfmImplComponentComponentConfigImplProperties()
{
}

void ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Dam_cfm_component_resourceTypeIsSet)
    {
        val[utility::conversions::to_string_t("dam.cfm.component.resourceType")] = ModelBase::toJson(m_Dam_cfm_component_resourceType);
    }
    if(m_Dam_cfm_component_fileReferencePropIsSet)
    {
        val[utility::conversions::to_string_t("dam.cfm.component.fileReferenceProp")] = ModelBase::toJson(m_Dam_cfm_component_fileReferenceProp);
    }
    if(m_Dam_cfm_component_elementsPropIsSet)
    {
        val[utility::conversions::to_string_t("dam.cfm.component.elementsProp")] = ModelBase::toJson(m_Dam_cfm_component_elementsProp);
    }
    if(m_Dam_cfm_component_variationPropIsSet)
    {
        val[utility::conversions::to_string_t("dam.cfm.component.variationProp")] = ModelBase::toJson(m_Dam_cfm_component_variationProp);
    }

    return val;
}

void ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("dam.cfm.component.resourceType")))
    {
        if(!val[utility::conversions::to_string_t("dam.cfm.component.resourceType")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("dam.cfm.component.resourceType")]);
            setDamCfmComponentResourceType( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dam.cfm.component.fileReferenceProp")))
    {
        if(!val[utility::conversions::to_string_t("dam.cfm.component.fileReferenceProp")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("dam.cfm.component.fileReferenceProp")]);
            setDamCfmComponentFileReferenceProp( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dam.cfm.component.elementsProp")))
    {
        if(!val[utility::conversions::to_string_t("dam.cfm.component.elementsProp")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("dam.cfm.component.elementsProp")]);
            setDamCfmComponentElementsProp( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dam.cfm.component.variationProp")))
    {
        if(!val[utility::conversions::to_string_t("dam.cfm.component.variationProp")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("dam.cfm.component.variationProp")]);
            setDamCfmComponentVariationProp( newItem );
        }
    }
}

void ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Dam_cfm_component_resourceTypeIsSet)
    {
        if (m_Dam_cfm_component_resourceType.get())
        {
            m_Dam_cfm_component_resourceType->toMultipart(multipart, utility::conversions::to_string_t("dam.cfm.component.resourceType."));
        }
    }
    if(m_Dam_cfm_component_fileReferencePropIsSet)
    {
        if (m_Dam_cfm_component_fileReferenceProp.get())
        {
            m_Dam_cfm_component_fileReferenceProp->toMultipart(multipart, utility::conversions::to_string_t("dam.cfm.component.fileReferenceProp."));
        }
    }
    if(m_Dam_cfm_component_elementsPropIsSet)
    {
        if (m_Dam_cfm_component_elementsProp.get())
        {
            m_Dam_cfm_component_elementsProp->toMultipart(multipart, utility::conversions::to_string_t("dam.cfm.component.elementsProp."));
        }
    }
    if(m_Dam_cfm_component_variationPropIsSet)
    {
        if (m_Dam_cfm_component_variationProp.get())
        {
            m_Dam_cfm_component_variationProp->toMultipart(multipart, utility::conversions::to_string_t("dam.cfm.component.variationProp."));
        }
    }
}

void ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("dam.cfm.component.resourceType")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dam.cfm.component.resourceType")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dam.cfm.component.resourceType."));
            setDamCfmComponentResourceType( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dam.cfm.component.fileReferenceProp")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dam.cfm.component.fileReferenceProp")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dam.cfm.component.fileReferenceProp."));
            setDamCfmComponentFileReferenceProp( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dam.cfm.component.elementsProp")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dam.cfm.component.elementsProp")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dam.cfm.component.elementsProp."));
            setDamCfmComponentElementsProp( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dam.cfm.component.variationProp")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dam.cfm.component.variationProp")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dam.cfm.component.variationProp."));
            setDamCfmComponentVariationProp( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::getDamCfmComponentResourceType() const
{
    return m_Dam_cfm_component_resourceType;
}


void ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::setDamCfmComponentResourceType(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Dam_cfm_component_resourceType = value;
    m_Dam_cfm_component_resourceTypeIsSet = true;
}
bool ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::damCfmComponentResourceTypeIsSet() const
{
    return m_Dam_cfm_component_resourceTypeIsSet;
}

void ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::unsetDam_cfm_component_resourceType()
{
    m_Dam_cfm_component_resourceTypeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::getDamCfmComponentFileReferenceProp() const
{
    return m_Dam_cfm_component_fileReferenceProp;
}


void ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::setDamCfmComponentFileReferenceProp(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Dam_cfm_component_fileReferenceProp = value;
    m_Dam_cfm_component_fileReferencePropIsSet = true;
}
bool ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::damCfmComponentFileReferencePropIsSet() const
{
    return m_Dam_cfm_component_fileReferencePropIsSet;
}

void ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::unsetDam_cfm_component_fileReferenceProp()
{
    m_Dam_cfm_component_fileReferencePropIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::getDamCfmComponentElementsProp() const
{
    return m_Dam_cfm_component_elementsProp;
}


void ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::setDamCfmComponentElementsProp(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Dam_cfm_component_elementsProp = value;
    m_Dam_cfm_component_elementsPropIsSet = true;
}
bool ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::damCfmComponentElementsPropIsSet() const
{
    return m_Dam_cfm_component_elementsPropIsSet;
}

void ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::unsetDam_cfm_component_elementsProp()
{
    m_Dam_cfm_component_elementsPropIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::getDamCfmComponentVariationProp() const
{
    return m_Dam_cfm_component_variationProp;
}


void ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::setDamCfmComponentVariationProp(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Dam_cfm_component_variationProp = value;
    m_Dam_cfm_component_variationPropIsSet = true;
}
bool ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::damCfmComponentVariationPropIsSet() const
{
    return m_Dam_cfm_component_variationPropIsSet;
}

void ComAdobeCqDamCfmImplComponentComponentConfigImplProperties::unsetDam_cfm_component_variationProp()
{
    m_Dam_cfm_component_variationPropIsSet = false;
}

}
}
}
}

