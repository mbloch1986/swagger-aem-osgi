/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamCoreImplDamEventRecorderImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamCoreImplDamEventRecorderImplProperties::ComDayCqDamCoreImplDamEventRecorderImplProperties()
{
    m_Event_filterIsSet = false;
    m_Event_queue_lengthIsSet = false;
    m_Eventrecorder_enabledIsSet = false;
    m_Eventrecorder_blacklistIsSet = false;
    m_Eventrecorder_eventtypesIsSet = false;
}

ComDayCqDamCoreImplDamEventRecorderImplProperties::~ComDayCqDamCoreImplDamEventRecorderImplProperties()
{
}

void ComDayCqDamCoreImplDamEventRecorderImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamCoreImplDamEventRecorderImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Event_filterIsSet)
    {
        val[utility::conversions::to_string_t("event.filter")] = ModelBase::toJson(m_Event_filter);
    }
    if(m_Event_queue_lengthIsSet)
    {
        val[utility::conversions::to_string_t("event.queue.length")] = ModelBase::toJson(m_Event_queue_length);
    }
    if(m_Eventrecorder_enabledIsSet)
    {
        val[utility::conversions::to_string_t("eventrecorder.enabled")] = ModelBase::toJson(m_Eventrecorder_enabled);
    }
    if(m_Eventrecorder_blacklistIsSet)
    {
        val[utility::conversions::to_string_t("eventrecorder.blacklist")] = ModelBase::toJson(m_Eventrecorder_blacklist);
    }
    if(m_Eventrecorder_eventtypesIsSet)
    {
        val[utility::conversions::to_string_t("eventrecorder.eventtypes")] = ModelBase::toJson(m_Eventrecorder_eventtypes);
    }

    return val;
}

void ComDayCqDamCoreImplDamEventRecorderImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("event.filter")))
    {
        if(!val[utility::conversions::to_string_t("event.filter")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("event.filter")]);
            setEventFilter( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("event.queue.length")))
    {
        if(!val[utility::conversions::to_string_t("event.queue.length")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("event.queue.length")]);
            setEventQueueLength( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("eventrecorder.enabled")))
    {
        if(!val[utility::conversions::to_string_t("eventrecorder.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("eventrecorder.enabled")]);
            setEventrecorderEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("eventrecorder.blacklist")))
    {
        if(!val[utility::conversions::to_string_t("eventrecorder.blacklist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("eventrecorder.blacklist")]);
            setEventrecorderBlacklist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("eventrecorder.eventtypes")))
    {
        if(!val[utility::conversions::to_string_t("eventrecorder.eventtypes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("eventrecorder.eventtypes")]);
            setEventrecorderEventtypes( newItem );
        }
    }
}

void ComDayCqDamCoreImplDamEventRecorderImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Event_filterIsSet)
    {
        if (m_Event_filter.get())
        {
            m_Event_filter->toMultipart(multipart, utility::conversions::to_string_t("event.filter."));
        }
    }
    if(m_Event_queue_lengthIsSet)
    {
        if (m_Event_queue_length.get())
        {
            m_Event_queue_length->toMultipart(multipart, utility::conversions::to_string_t("event.queue.length."));
        }
    }
    if(m_Eventrecorder_enabledIsSet)
    {
        if (m_Eventrecorder_enabled.get())
        {
            m_Eventrecorder_enabled->toMultipart(multipart, utility::conversions::to_string_t("eventrecorder.enabled."));
        }
    }
    if(m_Eventrecorder_blacklistIsSet)
    {
        if (m_Eventrecorder_blacklist.get())
        {
            m_Eventrecorder_blacklist->toMultipart(multipart, utility::conversions::to_string_t("eventrecorder.blacklist."));
        }
    }
    if(m_Eventrecorder_eventtypesIsSet)
    {
        if (m_Eventrecorder_eventtypes.get())
        {
            m_Eventrecorder_eventtypes->toMultipart(multipart, utility::conversions::to_string_t("eventrecorder.eventtypes."));
        }
    }
}

void ComDayCqDamCoreImplDamEventRecorderImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("event.filter")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("event.filter")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("event.filter."));
            setEventFilter( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("event.queue.length")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("event.queue.length")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("event.queue.length."));
            setEventQueueLength( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("eventrecorder.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("eventrecorder.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("eventrecorder.enabled."));
            setEventrecorderEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("eventrecorder.blacklist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("eventrecorder.blacklist")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("eventrecorder.blacklist."));
            setEventrecorderBlacklist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("eventrecorder.eventtypes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("eventrecorder.eventtypes")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("eventrecorder.eventtypes."));
            setEventrecorderEventtypes( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplDamEventRecorderImplProperties::getEventFilter() const
{
    return m_Event_filter;
}


void ComDayCqDamCoreImplDamEventRecorderImplProperties::setEventFilter(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Event_filter = value;
    m_Event_filterIsSet = true;
}
bool ComDayCqDamCoreImplDamEventRecorderImplProperties::eventFilterIsSet() const
{
    return m_Event_filterIsSet;
}

void ComDayCqDamCoreImplDamEventRecorderImplProperties::unsetEvent_filter()
{
    m_Event_filterIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplDamEventRecorderImplProperties::getEventQueueLength() const
{
    return m_Event_queue_length;
}


void ComDayCqDamCoreImplDamEventRecorderImplProperties::setEventQueueLength(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Event_queue_length = value;
    m_Event_queue_lengthIsSet = true;
}
bool ComDayCqDamCoreImplDamEventRecorderImplProperties::eventQueueLengthIsSet() const
{
    return m_Event_queue_lengthIsSet;
}

void ComDayCqDamCoreImplDamEventRecorderImplProperties::unsetEvent_queue_length()
{
    m_Event_queue_lengthIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqDamCoreImplDamEventRecorderImplProperties::getEventrecorderEnabled() const
{
    return m_Eventrecorder_enabled;
}


void ComDayCqDamCoreImplDamEventRecorderImplProperties::setEventrecorderEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Eventrecorder_enabled = value;
    m_Eventrecorder_enabledIsSet = true;
}
bool ComDayCqDamCoreImplDamEventRecorderImplProperties::eventrecorderEnabledIsSet() const
{
    return m_Eventrecorder_enabledIsSet;
}

void ComDayCqDamCoreImplDamEventRecorderImplProperties::unsetEventrecorder_enabled()
{
    m_Eventrecorder_enabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqDamCoreImplDamEventRecorderImplProperties::getEventrecorderBlacklist() const
{
    return m_Eventrecorder_blacklist;
}


void ComDayCqDamCoreImplDamEventRecorderImplProperties::setEventrecorderBlacklist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Eventrecorder_blacklist = value;
    m_Eventrecorder_blacklistIsSet = true;
}
bool ComDayCqDamCoreImplDamEventRecorderImplProperties::eventrecorderBlacklistIsSet() const
{
    return m_Eventrecorder_blacklistIsSet;
}

void ComDayCqDamCoreImplDamEventRecorderImplProperties::unsetEventrecorder_blacklist()
{
    m_Eventrecorder_blacklistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> ComDayCqDamCoreImplDamEventRecorderImplProperties::getEventrecorderEventtypes() const
{
    return m_Eventrecorder_eventtypes;
}


void ComDayCqDamCoreImplDamEventRecorderImplProperties::setEventrecorderEventtypes(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Eventrecorder_eventtypes = value;
    m_Eventrecorder_eventtypesIsSet = true;
}
bool ComDayCqDamCoreImplDamEventRecorderImplProperties::eventrecorderEventtypesIsSet() const
{
    return m_Eventrecorder_eventtypesIsSet;
}

void ComDayCqDamCoreImplDamEventRecorderImplProperties::unsetEventrecorder_eventtypes()
{
    m_Eventrecorder_eventtypesIsSet = false;
}

}
}
}
}

