/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqAuthImplLoginSelectorHandlerProperties {
  #[serde(rename = "path")]
  path: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "service.ranking")]
  service_ranking: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "auth.loginselector.mappings")]
  auth_loginselector_mappings: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "auth.loginselector.changepw.mappings")]
  auth_loginselector_changepw_mappings: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "auth.loginselector.defaultloginpage")]
  auth_loginselector_defaultloginpage: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "auth.loginselector.defaultchangepwpage")]
  auth_loginselector_defaultchangepwpage: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "auth.loginselector.handle")]
  auth_loginselector_handle: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "auth.loginselector.handle.all.extensions")]
  auth_loginselector_handle_all_extensions: Option<::models::ConfigNodePropertyBoolean>
}

impl ComDayCqAuthImplLoginSelectorHandlerProperties {
  pub fn new() -> ComDayCqAuthImplLoginSelectorHandlerProperties {
    ComDayCqAuthImplLoginSelectorHandlerProperties {
      path: None,
      service_ranking: None,
      auth_loginselector_mappings: None,
      auth_loginselector_changepw_mappings: None,
      auth_loginselector_defaultloginpage: None,
      auth_loginselector_defaultchangepwpage: None,
      auth_loginselector_handle: None,
      auth_loginselector_handle_all_extensions: None
    }
  }

  pub fn set_path(&mut self, path: ::models::ConfigNodePropertyString) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: ::models::ConfigNodePropertyString) -> ComDayCqAuthImplLoginSelectorHandlerProperties {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_service_ranking(&mut self, service_ranking: ::models::ConfigNodePropertyInteger) {
    self.service_ranking = Some(service_ranking);
  }

  pub fn with_service_ranking(mut self, service_ranking: ::models::ConfigNodePropertyInteger) -> ComDayCqAuthImplLoginSelectorHandlerProperties {
    self.service_ranking = Some(service_ranking);
    self
  }

  pub fn service_ranking(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.service_ranking.as_ref()
  }

  pub fn reset_service_ranking(&mut self) {
    self.service_ranking = None;
  }

  pub fn set_auth_loginselector_mappings(&mut self, auth_loginselector_mappings: ::models::ConfigNodePropertyArray) {
    self.auth_loginselector_mappings = Some(auth_loginselector_mappings);
  }

  pub fn with_auth_loginselector_mappings(mut self, auth_loginselector_mappings: ::models::ConfigNodePropertyArray) -> ComDayCqAuthImplLoginSelectorHandlerProperties {
    self.auth_loginselector_mappings = Some(auth_loginselector_mappings);
    self
  }

  pub fn auth_loginselector_mappings(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.auth_loginselector_mappings.as_ref()
  }

  pub fn reset_auth_loginselector_mappings(&mut self) {
    self.auth_loginselector_mappings = None;
  }

  pub fn set_auth_loginselector_changepw_mappings(&mut self, auth_loginselector_changepw_mappings: ::models::ConfigNodePropertyArray) {
    self.auth_loginselector_changepw_mappings = Some(auth_loginselector_changepw_mappings);
  }

  pub fn with_auth_loginselector_changepw_mappings(mut self, auth_loginselector_changepw_mappings: ::models::ConfigNodePropertyArray) -> ComDayCqAuthImplLoginSelectorHandlerProperties {
    self.auth_loginselector_changepw_mappings = Some(auth_loginselector_changepw_mappings);
    self
  }

  pub fn auth_loginselector_changepw_mappings(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.auth_loginselector_changepw_mappings.as_ref()
  }

  pub fn reset_auth_loginselector_changepw_mappings(&mut self) {
    self.auth_loginselector_changepw_mappings = None;
  }

  pub fn set_auth_loginselector_defaultloginpage(&mut self, auth_loginselector_defaultloginpage: ::models::ConfigNodePropertyString) {
    self.auth_loginselector_defaultloginpage = Some(auth_loginselector_defaultloginpage);
  }

  pub fn with_auth_loginselector_defaultloginpage(mut self, auth_loginselector_defaultloginpage: ::models::ConfigNodePropertyString) -> ComDayCqAuthImplLoginSelectorHandlerProperties {
    self.auth_loginselector_defaultloginpage = Some(auth_loginselector_defaultloginpage);
    self
  }

  pub fn auth_loginselector_defaultloginpage(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.auth_loginselector_defaultloginpage.as_ref()
  }

  pub fn reset_auth_loginselector_defaultloginpage(&mut self) {
    self.auth_loginselector_defaultloginpage = None;
  }

  pub fn set_auth_loginselector_defaultchangepwpage(&mut self, auth_loginselector_defaultchangepwpage: ::models::ConfigNodePropertyString) {
    self.auth_loginselector_defaultchangepwpage = Some(auth_loginselector_defaultchangepwpage);
  }

  pub fn with_auth_loginselector_defaultchangepwpage(mut self, auth_loginselector_defaultchangepwpage: ::models::ConfigNodePropertyString) -> ComDayCqAuthImplLoginSelectorHandlerProperties {
    self.auth_loginselector_defaultchangepwpage = Some(auth_loginselector_defaultchangepwpage);
    self
  }

  pub fn auth_loginselector_defaultchangepwpage(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.auth_loginselector_defaultchangepwpage.as_ref()
  }

  pub fn reset_auth_loginselector_defaultchangepwpage(&mut self) {
    self.auth_loginselector_defaultchangepwpage = None;
  }

  pub fn set_auth_loginselector_handle(&mut self, auth_loginselector_handle: ::models::ConfigNodePropertyArray) {
    self.auth_loginselector_handle = Some(auth_loginselector_handle);
  }

  pub fn with_auth_loginselector_handle(mut self, auth_loginselector_handle: ::models::ConfigNodePropertyArray) -> ComDayCqAuthImplLoginSelectorHandlerProperties {
    self.auth_loginselector_handle = Some(auth_loginselector_handle);
    self
  }

  pub fn auth_loginselector_handle(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.auth_loginselector_handle.as_ref()
  }

  pub fn reset_auth_loginselector_handle(&mut self) {
    self.auth_loginselector_handle = None;
  }

  pub fn set_auth_loginselector_handle_all_extensions(&mut self, auth_loginselector_handle_all_extensions: ::models::ConfigNodePropertyBoolean) {
    self.auth_loginselector_handle_all_extensions = Some(auth_loginselector_handle_all_extensions);
  }

  pub fn with_auth_loginselector_handle_all_extensions(mut self, auth_loginselector_handle_all_extensions: ::models::ConfigNodePropertyBoolean) -> ComDayCqAuthImplLoginSelectorHandlerProperties {
    self.auth_loginselector_handle_all_extensions = Some(auth_loginselector_handle_all_extensions);
    self
  }

  pub fn auth_loginselector_handle_all_extensions(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.auth_loginselector_handle_all_extensions.as_ref()
  }

  pub fn reset_auth_loginselector_handle_all_extensions(&mut self) {
    self.auth_loginselector_handle_all_extensions = None;
  }

}



