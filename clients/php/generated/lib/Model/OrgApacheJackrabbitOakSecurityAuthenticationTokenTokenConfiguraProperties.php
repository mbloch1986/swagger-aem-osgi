<?php
/**
 * OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'token_expiration' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'token_length' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'token_refresh' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'token_cleanup_threshold' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'password_hash_algorithm' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'password_hash_iterations' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'password_salt_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'token_expiration' => null,
        'token_length' => null,
        'token_refresh' => null,
        'token_cleanup_threshold' => null,
        'password_hash_algorithm' => null,
        'password_hash_iterations' => null,
        'password_salt_size' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'token_expiration' => 'tokenExpiration',
        'token_length' => 'tokenLength',
        'token_refresh' => 'tokenRefresh',
        'token_cleanup_threshold' => 'tokenCleanupThreshold',
        'password_hash_algorithm' => 'passwordHashAlgorithm',
        'password_hash_iterations' => 'passwordHashIterations',
        'password_salt_size' => 'passwordSaltSize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'token_expiration' => 'setTokenExpiration',
        'token_length' => 'setTokenLength',
        'token_refresh' => 'setTokenRefresh',
        'token_cleanup_threshold' => 'setTokenCleanupThreshold',
        'password_hash_algorithm' => 'setPasswordHashAlgorithm',
        'password_hash_iterations' => 'setPasswordHashIterations',
        'password_salt_size' => 'setPasswordSaltSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'token_expiration' => 'getTokenExpiration',
        'token_length' => 'getTokenLength',
        'token_refresh' => 'getTokenRefresh',
        'token_cleanup_threshold' => 'getTokenCleanupThreshold',
        'password_hash_algorithm' => 'getPasswordHashAlgorithm',
        'password_hash_iterations' => 'getPasswordHashIterations',
        'password_salt_size' => 'getPasswordSaltSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['token_expiration'] = isset($data['token_expiration']) ? $data['token_expiration'] : null;
        $this->container['token_length'] = isset($data['token_length']) ? $data['token_length'] : null;
        $this->container['token_refresh'] = isset($data['token_refresh']) ? $data['token_refresh'] : null;
        $this->container['token_cleanup_threshold'] = isset($data['token_cleanup_threshold']) ? $data['token_cleanup_threshold'] : null;
        $this->container['password_hash_algorithm'] = isset($data['password_hash_algorithm']) ? $data['password_hash_algorithm'] : null;
        $this->container['password_hash_iterations'] = isset($data['password_hash_iterations']) ? $data['password_hash_iterations'] : null;
        $this->container['password_salt_size'] = isset($data['password_salt_size']) ? $data['password_salt_size'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets token_expiration
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getTokenExpiration()
    {
        return $this->container['token_expiration'];
    }

    /**
     * Sets token_expiration
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $token_expiration token_expiration
     *
     * @return $this
     */
    public function setTokenExpiration($token_expiration)
    {
        $this->container['token_expiration'] = $token_expiration;

        return $this;
    }

    /**
     * Gets token_length
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getTokenLength()
    {
        return $this->container['token_length'];
    }

    /**
     * Sets token_length
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $token_length token_length
     *
     * @return $this
     */
    public function setTokenLength($token_length)
    {
        $this->container['token_length'] = $token_length;

        return $this;
    }

    /**
     * Gets token_refresh
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getTokenRefresh()
    {
        return $this->container['token_refresh'];
    }

    /**
     * Sets token_refresh
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $token_refresh token_refresh
     *
     * @return $this
     */
    public function setTokenRefresh($token_refresh)
    {
        $this->container['token_refresh'] = $token_refresh;

        return $this;
    }

    /**
     * Gets token_cleanup_threshold
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getTokenCleanupThreshold()
    {
        return $this->container['token_cleanup_threshold'];
    }

    /**
     * Sets token_cleanup_threshold
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $token_cleanup_threshold token_cleanup_threshold
     *
     * @return $this
     */
    public function setTokenCleanupThreshold($token_cleanup_threshold)
    {
        $this->container['token_cleanup_threshold'] = $token_cleanup_threshold;

        return $this;
    }

    /**
     * Gets password_hash_algorithm
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getPasswordHashAlgorithm()
    {
        return $this->container['password_hash_algorithm'];
    }

    /**
     * Sets password_hash_algorithm
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $password_hash_algorithm password_hash_algorithm
     *
     * @return $this
     */
    public function setPasswordHashAlgorithm($password_hash_algorithm)
    {
        $this->container['password_hash_algorithm'] = $password_hash_algorithm;

        return $this;
    }

    /**
     * Gets password_hash_iterations
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getPasswordHashIterations()
    {
        return $this->container['password_hash_iterations'];
    }

    /**
     * Sets password_hash_iterations
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $password_hash_iterations password_hash_iterations
     *
     * @return $this
     */
    public function setPasswordHashIterations($password_hash_iterations)
    {
        $this->container['password_hash_iterations'] = $password_hash_iterations;

        return $this;
    }

    /**
     * Gets password_salt_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getPasswordSaltSize()
    {
        return $this->container['password_salt_size'];
    }

    /**
     * Sets password_salt_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $password_salt_size password_salt_size
     *
     * @return $this
     */
    public function setPasswordSaltSize($password_salt_size)
    {
        $this->container['password_salt_size'] = $password_salt_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


