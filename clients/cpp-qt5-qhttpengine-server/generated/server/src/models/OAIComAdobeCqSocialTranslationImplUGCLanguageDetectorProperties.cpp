/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties() {
    this->init();
}

OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::~OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties() {
    
}

void
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::init() {
    m_event_topics_isSet = false;
    m_event_filter_isSet = false;
    m_translate_listener_type_isSet = false;
    m_translate_property_list_isSet = false;
    m_pool_size_isSet = false;
    m_max_pool_size_isSet = false;
    m_queue_size_isSet = false;
    m_keep_alive_time_isSet = false;
}

void
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(event_topics, json[QString("event.topics")]);
    
    ::OpenAPI::fromJsonValue(event_filter, json[QString("event.filter")]);
    
    ::OpenAPI::fromJsonValue(translate_listener_type, json[QString("translate.listener.type")]);
    
    ::OpenAPI::fromJsonValue(translate_property_list, json[QString("translate.property.list")]);
    
    ::OpenAPI::fromJsonValue(pool_size, json[QString("poolSize")]);
    
    ::OpenAPI::fromJsonValue(max_pool_size, json[QString("maxPoolSize")]);
    
    ::OpenAPI::fromJsonValue(queue_size, json[QString("queueSize")]);
    
    ::OpenAPI::fromJsonValue(keep_alive_time, json[QString("keepAliveTime")]);
    
}

QString
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::asJsonObject() const {
    QJsonObject obj;
	if(event_topics.isSet()){
        obj.insert(QString("event.topics"), ::OpenAPI::toJsonValue(event_topics));
    }
	if(event_filter.isSet()){
        obj.insert(QString("event.filter"), ::OpenAPI::toJsonValue(event_filter));
    }
	if(translate_listener_type.isSet()){
        obj.insert(QString("translate.listener.type"), ::OpenAPI::toJsonValue(translate_listener_type));
    }
	if(translate_property_list.isSet()){
        obj.insert(QString("translate.property.list"), ::OpenAPI::toJsonValue(translate_property_list));
    }
	if(pool_size.isSet()){
        obj.insert(QString("poolSize"), ::OpenAPI::toJsonValue(pool_size));
    }
	if(max_pool_size.isSet()){
        obj.insert(QString("maxPoolSize"), ::OpenAPI::toJsonValue(max_pool_size));
    }
	if(queue_size.isSet()){
        obj.insert(QString("queueSize"), ::OpenAPI::toJsonValue(queue_size));
    }
	if(keep_alive_time.isSet()){
        obj.insert(QString("keepAliveTime"), ::OpenAPI::toJsonValue(keep_alive_time));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getEventTopics() const {
    return event_topics;
}
void
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setEventTopics(const OAIConfigNodePropertyString &event_topics) {
    this->event_topics = event_topics;
    this->m_event_topics_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getEventFilter() const {
    return event_filter;
}
void
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setEventFilter(const OAIConfigNodePropertyString &event_filter) {
    this->event_filter = event_filter;
    this->m_event_filter_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getTranslateListenerType() const {
    return translate_listener_type;
}
void
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setTranslateListenerType(const OAIConfigNodePropertyArray &translate_listener_type) {
    this->translate_listener_type = translate_listener_type;
    this->m_translate_listener_type_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getTranslatePropertyList() const {
    return translate_property_list;
}
void
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setTranslatePropertyList(const OAIConfigNodePropertyArray &translate_property_list) {
    this->translate_property_list = translate_property_list;
    this->m_translate_property_list_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getPoolSize() const {
    return pool_size;
}
void
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setPoolSize(const OAIConfigNodePropertyInteger &pool_size) {
    this->pool_size = pool_size;
    this->m_pool_size_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getMaxPoolSize() const {
    return max_pool_size;
}
void
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setMaxPoolSize(const OAIConfigNodePropertyInteger &max_pool_size) {
    this->max_pool_size = max_pool_size;
    this->m_max_pool_size_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getQueueSize() const {
    return queue_size;
}
void
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setQueueSize(const OAIConfigNodePropertyInteger &queue_size) {
    this->queue_size = queue_size;
    this->m_queue_size_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getKeepAliveTime() const {
    return keep_alive_time;
}
void
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setKeepAliveTime(const OAIConfigNodePropertyInteger &keep_alive_time) {
    this->keep_alive_time = keep_alive_time;
    this->m_keep_alive_time_isSet = true;
}


bool
OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(event_topics.isSet()){ isObjectUpdated = true; break;}
    
        if(event_filter.isSet()){ isObjectUpdated = true; break;}
    
        if(translate_listener_type.isSet()){ isObjectUpdated = true; break;}
    
        if(translate_property_list.isSet()){ isObjectUpdated = true; break;}
    
        if(pool_size.isSet()){ isObjectUpdated = true; break;}
    
        if(max_pool_size.isSet()){ isObjectUpdated = true; break;}
    
        if(queue_size.isSet()){ isObjectUpdated = true; break;}
    
        if(keep_alive_time.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

