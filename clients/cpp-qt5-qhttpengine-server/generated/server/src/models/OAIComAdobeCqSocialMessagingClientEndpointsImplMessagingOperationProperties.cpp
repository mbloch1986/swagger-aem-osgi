/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties() {
    this->init();
}

OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::~OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties() {
    
}

void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::init() {
    m_message_properties_isSet = false;
    m_message_box_size_limit_isSet = false;
    m_message_count_limit_isSet = false;
    m_notify_failure_isSet = false;
    m_failure_message_from_isSet = false;
    m_failure_template_path_isSet = false;
    m_max_retries_isSet = false;
    m_min_wait_between_retries_isSet = false;
    m_count_update_pool_size_isSet = false;
    m_inbox_path_isSet = false;
    m_sentitems_path_isSet = false;
    m_support_attachments_isSet = false;
    m_support_group_messaging_isSet = false;
    m_max_total_recipients_isSet = false;
    m_batch_size_isSet = false;
    m_max_total_attachment_size_isSet = false;
    m_attachment_type_blacklist_isSet = false;
    m_allowed_attachment_types_isSet = false;
    m_service_selector_isSet = false;
    m_field_whitelist_isSet = false;
}

void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(message_properties, json[QString("message.properties")]);
    
    ::OpenAPI::fromJsonValue(message_box_size_limit, json[QString("messageBoxSizeLimit")]);
    
    ::OpenAPI::fromJsonValue(message_count_limit, json[QString("messageCountLimit")]);
    
    ::OpenAPI::fromJsonValue(notify_failure, json[QString("notifyFailure")]);
    
    ::OpenAPI::fromJsonValue(failure_message_from, json[QString("failureMessageFrom")]);
    
    ::OpenAPI::fromJsonValue(failure_template_path, json[QString("failureTemplatePath")]);
    
    ::OpenAPI::fromJsonValue(max_retries, json[QString("maxRetries")]);
    
    ::OpenAPI::fromJsonValue(min_wait_between_retries, json[QString("minWaitBetweenRetries")]);
    
    ::OpenAPI::fromJsonValue(count_update_pool_size, json[QString("countUpdatePoolSize")]);
    
    ::OpenAPI::fromJsonValue(inbox_path, json[QString("inbox.path")]);
    
    ::OpenAPI::fromJsonValue(sentitems_path, json[QString("sentitems.path")]);
    
    ::OpenAPI::fromJsonValue(support_attachments, json[QString("supportAttachments")]);
    
    ::OpenAPI::fromJsonValue(support_group_messaging, json[QString("supportGroupMessaging")]);
    
    ::OpenAPI::fromJsonValue(max_total_recipients, json[QString("maxTotalRecipients")]);
    
    ::OpenAPI::fromJsonValue(batch_size, json[QString("batchSize")]);
    
    ::OpenAPI::fromJsonValue(max_total_attachment_size, json[QString("maxTotalAttachmentSize")]);
    
    ::OpenAPI::fromJsonValue(attachment_type_blacklist, json[QString("attachmentTypeBlacklist")]);
    
    ::OpenAPI::fromJsonValue(allowed_attachment_types, json[QString("allowedAttachmentTypes")]);
    
    ::OpenAPI::fromJsonValue(service_selector, json[QString("serviceSelector")]);
    
    ::OpenAPI::fromJsonValue(field_whitelist, json[QString("fieldWhitelist")]);
    
}

QString
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::asJsonObject() const {
    QJsonObject obj;
	if(message_properties.isSet()){
        obj.insert(QString("message.properties"), ::OpenAPI::toJsonValue(message_properties));
    }
	if(message_box_size_limit.isSet()){
        obj.insert(QString("messageBoxSizeLimit"), ::OpenAPI::toJsonValue(message_box_size_limit));
    }
	if(message_count_limit.isSet()){
        obj.insert(QString("messageCountLimit"), ::OpenAPI::toJsonValue(message_count_limit));
    }
	if(notify_failure.isSet()){
        obj.insert(QString("notifyFailure"), ::OpenAPI::toJsonValue(notify_failure));
    }
	if(failure_message_from.isSet()){
        obj.insert(QString("failureMessageFrom"), ::OpenAPI::toJsonValue(failure_message_from));
    }
	if(failure_template_path.isSet()){
        obj.insert(QString("failureTemplatePath"), ::OpenAPI::toJsonValue(failure_template_path));
    }
	if(max_retries.isSet()){
        obj.insert(QString("maxRetries"), ::OpenAPI::toJsonValue(max_retries));
    }
	if(min_wait_between_retries.isSet()){
        obj.insert(QString("minWaitBetweenRetries"), ::OpenAPI::toJsonValue(min_wait_between_retries));
    }
	if(count_update_pool_size.isSet()){
        obj.insert(QString("countUpdatePoolSize"), ::OpenAPI::toJsonValue(count_update_pool_size));
    }
	if(inbox_path.isSet()){
        obj.insert(QString("inbox.path"), ::OpenAPI::toJsonValue(inbox_path));
    }
	if(sentitems_path.isSet()){
        obj.insert(QString("sentitems.path"), ::OpenAPI::toJsonValue(sentitems_path));
    }
	if(support_attachments.isSet()){
        obj.insert(QString("supportAttachments"), ::OpenAPI::toJsonValue(support_attachments));
    }
	if(support_group_messaging.isSet()){
        obj.insert(QString("supportGroupMessaging"), ::OpenAPI::toJsonValue(support_group_messaging));
    }
	if(max_total_recipients.isSet()){
        obj.insert(QString("maxTotalRecipients"), ::OpenAPI::toJsonValue(max_total_recipients));
    }
	if(batch_size.isSet()){
        obj.insert(QString("batchSize"), ::OpenAPI::toJsonValue(batch_size));
    }
	if(max_total_attachment_size.isSet()){
        obj.insert(QString("maxTotalAttachmentSize"), ::OpenAPI::toJsonValue(max_total_attachment_size));
    }
	if(attachment_type_blacklist.isSet()){
        obj.insert(QString("attachmentTypeBlacklist"), ::OpenAPI::toJsonValue(attachment_type_blacklist));
    }
	if(allowed_attachment_types.isSet()){
        obj.insert(QString("allowedAttachmentTypes"), ::OpenAPI::toJsonValue(allowed_attachment_types));
    }
	if(service_selector.isSet()){
        obj.insert(QString("serviceSelector"), ::OpenAPI::toJsonValue(service_selector));
    }
	if(field_whitelist.isSet()){
        obj.insert(QString("fieldWhitelist"), ::OpenAPI::toJsonValue(field_whitelist));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMessageProperties() const {
    return message_properties;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMessageProperties(const OAIConfigNodePropertyArray &message_properties) {
    this->message_properties = message_properties;
    this->m_message_properties_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMessageBoxSizeLimit() const {
    return message_box_size_limit;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMessageBoxSizeLimit(const OAIConfigNodePropertyInteger &message_box_size_limit) {
    this->message_box_size_limit = message_box_size_limit;
    this->m_message_box_size_limit_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMessageCountLimit() const {
    return message_count_limit;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMessageCountLimit(const OAIConfigNodePropertyInteger &message_count_limit) {
    this->message_count_limit = message_count_limit;
    this->m_message_count_limit_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getNotifyFailure() const {
    return notify_failure;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setNotifyFailure(const OAIConfigNodePropertyBoolean &notify_failure) {
    this->notify_failure = notify_failure;
    this->m_notify_failure_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getFailureMessageFrom() const {
    return failure_message_from;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setFailureMessageFrom(const OAIConfigNodePropertyString &failure_message_from) {
    this->failure_message_from = failure_message_from;
    this->m_failure_message_from_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getFailureTemplatePath() const {
    return failure_template_path;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setFailureTemplatePath(const OAIConfigNodePropertyString &failure_template_path) {
    this->failure_template_path = failure_template_path;
    this->m_failure_template_path_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMaxRetries() const {
    return max_retries;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMaxRetries(const OAIConfigNodePropertyInteger &max_retries) {
    this->max_retries = max_retries;
    this->m_max_retries_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMinWaitBetweenRetries() const {
    return min_wait_between_retries;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMinWaitBetweenRetries(const OAIConfigNodePropertyInteger &min_wait_between_retries) {
    this->min_wait_between_retries = min_wait_between_retries;
    this->m_min_wait_between_retries_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getCountUpdatePoolSize() const {
    return count_update_pool_size;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setCountUpdatePoolSize(const OAIConfigNodePropertyInteger &count_update_pool_size) {
    this->count_update_pool_size = count_update_pool_size;
    this->m_count_update_pool_size_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getInboxPath() const {
    return inbox_path;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setInboxPath(const OAIConfigNodePropertyString &inbox_path) {
    this->inbox_path = inbox_path;
    this->m_inbox_path_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getSentitemsPath() const {
    return sentitems_path;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setSentitemsPath(const OAIConfigNodePropertyString &sentitems_path) {
    this->sentitems_path = sentitems_path;
    this->m_sentitems_path_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getSupportAttachments() const {
    return support_attachments;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setSupportAttachments(const OAIConfigNodePropertyBoolean &support_attachments) {
    this->support_attachments = support_attachments;
    this->m_support_attachments_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getSupportGroupMessaging() const {
    return support_group_messaging;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setSupportGroupMessaging(const OAIConfigNodePropertyBoolean &support_group_messaging) {
    this->support_group_messaging = support_group_messaging;
    this->m_support_group_messaging_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMaxTotalRecipients() const {
    return max_total_recipients;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMaxTotalRecipients(const OAIConfigNodePropertyInteger &max_total_recipients) {
    this->max_total_recipients = max_total_recipients;
    this->m_max_total_recipients_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getBatchSize() const {
    return batch_size;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setBatchSize(const OAIConfigNodePropertyInteger &batch_size) {
    this->batch_size = batch_size;
    this->m_batch_size_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getMaxTotalAttachmentSize() const {
    return max_total_attachment_size;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setMaxTotalAttachmentSize(const OAIConfigNodePropertyInteger &max_total_attachment_size) {
    this->max_total_attachment_size = max_total_attachment_size;
    this->m_max_total_attachment_size_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getAttachmentTypeBlacklist() const {
    return attachment_type_blacklist;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setAttachmentTypeBlacklist(const OAIConfigNodePropertyArray &attachment_type_blacklist) {
    this->attachment_type_blacklist = attachment_type_blacklist;
    this->m_attachment_type_blacklist_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getAllowedAttachmentTypes() const {
    return allowed_attachment_types;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setAllowedAttachmentTypes(const OAIConfigNodePropertyArray &allowed_attachment_types) {
    this->allowed_attachment_types = allowed_attachment_types;
    this->m_allowed_attachment_types_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getServiceSelector() const {
    return service_selector;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setServiceSelector(const OAIConfigNodePropertyString &service_selector) {
    this->service_selector = service_selector;
    this->m_service_selector_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::getFieldWhitelist() const {
    return field_whitelist;
}
void
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::setFieldWhitelist(const OAIConfigNodePropertyArray &field_whitelist) {
    this->field_whitelist = field_whitelist;
    this->m_field_whitelist_isSet = true;
}


bool
OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(message_properties.isSet()){ isObjectUpdated = true; break;}
    
        if(message_box_size_limit.isSet()){ isObjectUpdated = true; break;}
    
        if(message_count_limit.isSet()){ isObjectUpdated = true; break;}
    
        if(notify_failure.isSet()){ isObjectUpdated = true; break;}
    
        if(failure_message_from.isSet()){ isObjectUpdated = true; break;}
    
        if(failure_template_path.isSet()){ isObjectUpdated = true; break;}
    
        if(max_retries.isSet()){ isObjectUpdated = true; break;}
    
        if(min_wait_between_retries.isSet()){ isObjectUpdated = true; break;}
    
        if(count_update_pool_size.isSet()){ isObjectUpdated = true; break;}
    
        if(inbox_path.isSet()){ isObjectUpdated = true; break;}
    
        if(sentitems_path.isSet()){ isObjectUpdated = true; break;}
    
        if(support_attachments.isSet()){ isObjectUpdated = true; break;}
    
        if(support_group_messaging.isSet()){ isObjectUpdated = true; break;}
    
        if(max_total_recipients.isSet()){ isObjectUpdated = true; break;}
    
        if(batch_size.isSet()){ isObjectUpdated = true; break;}
    
        if(max_total_attachment_size.isSet()){ isObjectUpdated = true; break;}
    
        if(attachment_type_blacklist.isSet()){ isObjectUpdated = true; break;}
    
        if(allowed_attachment_types.isSet()){ isObjectUpdated = true; break;}
    
        if(service_selector.isSet()){ isObjectUpdated = true; break;}
    
        if(field_whitelist.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

