/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteFragsImplRandomFeatureProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteFragsImplRandomFeatureProperties::OAIComAdobeGraniteFragsImplRandomFeatureProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteFragsImplRandomFeatureProperties::OAIComAdobeGraniteFragsImplRandomFeatureProperties() {
    init();
}

OAIComAdobeGraniteFragsImplRandomFeatureProperties::~OAIComAdobeGraniteFragsImplRandomFeatureProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteFragsImplRandomFeatureProperties::init() {
    feature_name = new OAIConfigNodePropertyString();
    m_feature_name_isSet = false;
    feature_description = new OAIConfigNodePropertyString();
    m_feature_description_isSet = false;
    active_percentage = new OAIConfigNodePropertyString();
    m_active_percentage_isSet = false;
    cookie_name = new OAIConfigNodePropertyString();
    m_cookie_name_isSet = false;
    cookie_max_age = new OAIConfigNodePropertyInteger();
    m_cookie_max_age_isSet = false;
}

void
OAIComAdobeGraniteFragsImplRandomFeatureProperties::cleanup() {
    if(feature_name != nullptr) { 
        delete feature_name;
    }
    if(feature_description != nullptr) { 
        delete feature_description;
    }
    if(active_percentage != nullptr) { 
        delete active_percentage;
    }
    if(cookie_name != nullptr) { 
        delete cookie_name;
    }
    if(cookie_max_age != nullptr) { 
        delete cookie_max_age;
    }
}

OAIComAdobeGraniteFragsImplRandomFeatureProperties*
OAIComAdobeGraniteFragsImplRandomFeatureProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteFragsImplRandomFeatureProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&feature_name, pJson["feature.name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&feature_description, pJson["feature.description"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&active_percentage, pJson["active.percentage"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&cookie_name, pJson["cookie.name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&cookie_max_age, pJson["cookie.maxAge"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComAdobeGraniteFragsImplRandomFeatureProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteFragsImplRandomFeatureProperties::asJsonObject() {
    QJsonObject obj;
    if((feature_name != nullptr) && (feature_name->isSet())){
        toJsonValue(QString("feature.name"), feature_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((feature_description != nullptr) && (feature_description->isSet())){
        toJsonValue(QString("feature.description"), feature_description, obj, QString("OAIConfigNodePropertyString"));
    }
    if((active_percentage != nullptr) && (active_percentage->isSet())){
        toJsonValue(QString("active.percentage"), active_percentage, obj, QString("OAIConfigNodePropertyString"));
    }
    if((cookie_name != nullptr) && (cookie_name->isSet())){
        toJsonValue(QString("cookie.name"), cookie_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((cookie_max_age != nullptr) && (cookie_max_age->isSet())){
        toJsonValue(QString("cookie.maxAge"), cookie_max_age, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteFragsImplRandomFeatureProperties::getFeatureName() {
    return feature_name;
}
void
OAIComAdobeGraniteFragsImplRandomFeatureProperties::setFeatureName(OAIConfigNodePropertyString* feature_name) {
    this->feature_name = feature_name;
    this->m_feature_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteFragsImplRandomFeatureProperties::getFeatureDescription() {
    return feature_description;
}
void
OAIComAdobeGraniteFragsImplRandomFeatureProperties::setFeatureDescription(OAIConfigNodePropertyString* feature_description) {
    this->feature_description = feature_description;
    this->m_feature_description_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteFragsImplRandomFeatureProperties::getActivePercentage() {
    return active_percentage;
}
void
OAIComAdobeGraniteFragsImplRandomFeatureProperties::setActivePercentage(OAIConfigNodePropertyString* active_percentage) {
    this->active_percentage = active_percentage;
    this->m_active_percentage_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteFragsImplRandomFeatureProperties::getCookieName() {
    return cookie_name;
}
void
OAIComAdobeGraniteFragsImplRandomFeatureProperties::setCookieName(OAIConfigNodePropertyString* cookie_name) {
    this->cookie_name = cookie_name;
    this->m_cookie_name_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteFragsImplRandomFeatureProperties::getCookieMaxAge() {
    return cookie_max_age;
}
void
OAIComAdobeGraniteFragsImplRandomFeatureProperties::setCookieMaxAge(OAIConfigNodePropertyInteger* cookie_max_age) {
    this->cookie_max_age = cookie_max_age;
    this->m_cookie_max_age_isSet = true;
}


bool
OAIComAdobeGraniteFragsImplRandomFeatureProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(feature_name != nullptr && feature_name->isSet()){ isObjectUpdated = true; break;}
        if(feature_description != nullptr && feature_description->isSet()){ isObjectUpdated = true; break;}
        if(active_percentage != nullptr && active_percentage->isSet()){ isObjectUpdated = true; break;}
        if(cookie_name != nullptr && cookie_name->isSet()){ isObjectUpdated = true; break;}
        if(cookie_max_age != nullptr && cookie_max_age->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

