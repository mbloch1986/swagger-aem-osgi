/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties :  IEquatable<OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties" /> class.
        /// </summary>
        /// <param name="orgApacheSlingCommonsLogFile">orgApacheSlingCommonsLogFile.</param>
        /// <param name="orgApacheSlingCommonsLogFileNumber">orgApacheSlingCommonsLogFileNumber.</param>
        /// <param name="orgApacheSlingCommonsLogFileSize">orgApacheSlingCommonsLogFileSize.</param>
        /// <param name="orgApacheSlingCommonsLogFileBuffered">orgApacheSlingCommonsLogFileBuffered.</param>
        public OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties(ConfigNodePropertyString orgApacheSlingCommonsLogFile = default(ConfigNodePropertyString), ConfigNodePropertyInteger orgApacheSlingCommonsLogFileNumber = default(ConfigNodePropertyInteger), ConfigNodePropertyString orgApacheSlingCommonsLogFileSize = default(ConfigNodePropertyString), ConfigNodePropertyBoolean orgApacheSlingCommonsLogFileBuffered = default(ConfigNodePropertyBoolean))
        {
            this.OrgApacheSlingCommonsLogFile = orgApacheSlingCommonsLogFile;
            this.OrgApacheSlingCommonsLogFileNumber = orgApacheSlingCommonsLogFileNumber;
            this.OrgApacheSlingCommonsLogFileSize = orgApacheSlingCommonsLogFileSize;
            this.OrgApacheSlingCommonsLogFileBuffered = orgApacheSlingCommonsLogFileBuffered;
        }
        
        /// <summary>
        /// Gets or Sets OrgApacheSlingCommonsLogFile
        /// </summary>
        [DataMember(Name="org.apache.sling.commons.log.file", EmitDefaultValue=false)]
        public ConfigNodePropertyString OrgApacheSlingCommonsLogFile { get; set; }

        /// <summary>
        /// Gets or Sets OrgApacheSlingCommonsLogFileNumber
        /// </summary>
        [DataMember(Name="org.apache.sling.commons.log.file.number", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger OrgApacheSlingCommonsLogFileNumber { get; set; }

        /// <summary>
        /// Gets or Sets OrgApacheSlingCommonsLogFileSize
        /// </summary>
        [DataMember(Name="org.apache.sling.commons.log.file.size", EmitDefaultValue=false)]
        public ConfigNodePropertyString OrgApacheSlingCommonsLogFileSize { get; set; }

        /// <summary>
        /// Gets or Sets OrgApacheSlingCommonsLogFileBuffered
        /// </summary>
        [DataMember(Name="org.apache.sling.commons.log.file.buffered", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean OrgApacheSlingCommonsLogFileBuffered { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties {\n");
            sb.Append("  OrgApacheSlingCommonsLogFile: ").Append(OrgApacheSlingCommonsLogFile).Append("\n");
            sb.Append("  OrgApacheSlingCommonsLogFileNumber: ").Append(OrgApacheSlingCommonsLogFileNumber).Append("\n");
            sb.Append("  OrgApacheSlingCommonsLogFileSize: ").Append(OrgApacheSlingCommonsLogFileSize).Append("\n");
            sb.Append("  OrgApacheSlingCommonsLogFileBuffered: ").Append(OrgApacheSlingCommonsLogFileBuffered).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrgApacheSlingCommonsLogFile == input.OrgApacheSlingCommonsLogFile ||
                    (this.OrgApacheSlingCommonsLogFile != null &&
                    this.OrgApacheSlingCommonsLogFile.Equals(input.OrgApacheSlingCommonsLogFile))
                ) && 
                (
                    this.OrgApacheSlingCommonsLogFileNumber == input.OrgApacheSlingCommonsLogFileNumber ||
                    (this.OrgApacheSlingCommonsLogFileNumber != null &&
                    this.OrgApacheSlingCommonsLogFileNumber.Equals(input.OrgApacheSlingCommonsLogFileNumber))
                ) && 
                (
                    this.OrgApacheSlingCommonsLogFileSize == input.OrgApacheSlingCommonsLogFileSize ||
                    (this.OrgApacheSlingCommonsLogFileSize != null &&
                    this.OrgApacheSlingCommonsLogFileSize.Equals(input.OrgApacheSlingCommonsLogFileSize))
                ) && 
                (
                    this.OrgApacheSlingCommonsLogFileBuffered == input.OrgApacheSlingCommonsLogFileBuffered ||
                    (this.OrgApacheSlingCommonsLogFileBuffered != null &&
                    this.OrgApacheSlingCommonsLogFileBuffered.Equals(input.OrgApacheSlingCommonsLogFileBuffered))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrgApacheSlingCommonsLogFile != null)
                    hashCode = hashCode * 59 + this.OrgApacheSlingCommonsLogFile.GetHashCode();
                if (this.OrgApacheSlingCommonsLogFileNumber != null)
                    hashCode = hashCode * 59 + this.OrgApacheSlingCommonsLogFileNumber.GetHashCode();
                if (this.OrgApacheSlingCommonsLogFileSize != null)
                    hashCode = hashCode * 59 + this.OrgApacheSlingCommonsLogFileSize.GetHashCode();
                if (this.OrgApacheSlingCommonsLogFileBuffered != null)
                    hashCode = hashCode * 59 + this.OrgApacheSlingCommonsLogFileBuffered.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
