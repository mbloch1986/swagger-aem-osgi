/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties() {
    this->init();
}

OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::~OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties() {
    
}

void
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::init() {
    m_default_transport_agent_to_worker_prefix_isSet = false;
    m_default_transport_agent_to_master_prefix_isSet = false;
    m_default_transport_input_package_isSet = false;
    m_default_transport_output_package_isSet = false;
    m_default_transport_replication_synchronous_isSet = false;
    m_default_transport_contentpackage_isSet = false;
    m_offloading_transporter_default_enabled_isSet = false;
}

void
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(default_transport_agent_to_worker_prefix, json[QString("default.transport.agent-to-worker.prefix")]);
    
    ::OpenAPI::fromJsonValue(default_transport_agent_to_master_prefix, json[QString("default.transport.agent-to-master.prefix")]);
    
    ::OpenAPI::fromJsonValue(default_transport_input_package, json[QString("default.transport.input.package")]);
    
    ::OpenAPI::fromJsonValue(default_transport_output_package, json[QString("default.transport.output.package")]);
    
    ::OpenAPI::fromJsonValue(default_transport_replication_synchronous, json[QString("default.transport.replication.synchronous")]);
    
    ::OpenAPI::fromJsonValue(default_transport_contentpackage, json[QString("default.transport.contentpackage")]);
    
    ::OpenAPI::fromJsonValue(offloading_transporter_default_enabled, json[QString("offloading.transporter.default.enabled")]);
    
}

QString
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::asJsonObject() const {
    QJsonObject obj;
	if(default_transport_agent_to_worker_prefix.isSet()){
        obj.insert(QString("default.transport.agent-to-worker.prefix"), ::OpenAPI::toJsonValue(default_transport_agent_to_worker_prefix));
    }
	if(default_transport_agent_to_master_prefix.isSet()){
        obj.insert(QString("default.transport.agent-to-master.prefix"), ::OpenAPI::toJsonValue(default_transport_agent_to_master_prefix));
    }
	if(default_transport_input_package.isSet()){
        obj.insert(QString("default.transport.input.package"), ::OpenAPI::toJsonValue(default_transport_input_package));
    }
	if(default_transport_output_package.isSet()){
        obj.insert(QString("default.transport.output.package"), ::OpenAPI::toJsonValue(default_transport_output_package));
    }
	if(default_transport_replication_synchronous.isSet()){
        obj.insert(QString("default.transport.replication.synchronous"), ::OpenAPI::toJsonValue(default_transport_replication_synchronous));
    }
	if(default_transport_contentpackage.isSet()){
        obj.insert(QString("default.transport.contentpackage"), ::OpenAPI::toJsonValue(default_transport_contentpackage));
    }
	if(offloading_transporter_default_enabled.isSet()){
        obj.insert(QString("offloading.transporter.default.enabled"), ::OpenAPI::toJsonValue(offloading_transporter_default_enabled));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getDefaultTransportAgentToWorkerPrefix() const {
    return default_transport_agent_to_worker_prefix;
}
void
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setDefaultTransportAgentToWorkerPrefix(const OAIConfigNodePropertyString &default_transport_agent_to_worker_prefix) {
    this->default_transport_agent_to_worker_prefix = default_transport_agent_to_worker_prefix;
    this->m_default_transport_agent_to_worker_prefix_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getDefaultTransportAgentToMasterPrefix() const {
    return default_transport_agent_to_master_prefix;
}
void
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setDefaultTransportAgentToMasterPrefix(const OAIConfigNodePropertyString &default_transport_agent_to_master_prefix) {
    this->default_transport_agent_to_master_prefix = default_transport_agent_to_master_prefix;
    this->m_default_transport_agent_to_master_prefix_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getDefaultTransportInputPackage() const {
    return default_transport_input_package;
}
void
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setDefaultTransportInputPackage(const OAIConfigNodePropertyString &default_transport_input_package) {
    this->default_transport_input_package = default_transport_input_package;
    this->m_default_transport_input_package_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getDefaultTransportOutputPackage() const {
    return default_transport_output_package;
}
void
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setDefaultTransportOutputPackage(const OAIConfigNodePropertyString &default_transport_output_package) {
    this->default_transport_output_package = default_transport_output_package;
    this->m_default_transport_output_package_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getDefaultTransportReplicationSynchronous() const {
    return default_transport_replication_synchronous;
}
void
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setDefaultTransportReplicationSynchronous(const OAIConfigNodePropertyBoolean &default_transport_replication_synchronous) {
    this->default_transport_replication_synchronous = default_transport_replication_synchronous;
    this->m_default_transport_replication_synchronous_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getDefaultTransportContentpackage() const {
    return default_transport_contentpackage;
}
void
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setDefaultTransportContentpackage(const OAIConfigNodePropertyBoolean &default_transport_contentpackage) {
    this->default_transport_contentpackage = default_transport_contentpackage;
    this->m_default_transport_contentpackage_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getOffloadingTransporterDefaultEnabled() const {
    return offloading_transporter_default_enabled;
}
void
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setOffloadingTransporterDefaultEnabled(const OAIConfigNodePropertyBoolean &offloading_transporter_default_enabled) {
    this->offloading_transporter_default_enabled = offloading_transporter_default_enabled;
    this->m_offloading_transporter_default_enabled_isSet = true;
}


bool
OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(default_transport_agent_to_worker_prefix.isSet()){ isObjectUpdated = true; break;}
    
        if(default_transport_agent_to_master_prefix.isSet()){ isObjectUpdated = true; break;}
    
        if(default_transport_input_package.isSet()){ isObjectUpdated = true; break;}
    
        if(default_transport_output_package.isSet()){ isObjectUpdated = true; break;}
    
        if(default_transport_replication_synchronous.isSet()){ isObjectUpdated = true; break;}
    
        if(default_transport_contentpackage.isSet()){ isObjectUpdated = true; break;}
    
        if(offloading_transporter_default_enabled.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

