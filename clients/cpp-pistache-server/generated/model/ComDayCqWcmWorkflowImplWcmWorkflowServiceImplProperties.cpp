/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties()
{
    m_Event_filterIsSet = false;
    m_MinThreadPoolSizeIsSet = false;
    m_MaxThreadPoolSizeIsSet = false;
    m_Cq_wcm_workflow_terminate_on_activateIsSet = false;
    m_Cq_wcm_worklfow_terminate_exclusion_listIsSet = false;
    
}

ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::~ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties()
{
}

void ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Event_filterIsSet)
    {
        val["event.filter"] = ModelBase::toJson(m_Event_filter);
    }
    if(m_MinThreadPoolSizeIsSet)
    {
        val["minThreadPoolSize"] = ModelBase::toJson(m_MinThreadPoolSize);
    }
    if(m_MaxThreadPoolSizeIsSet)
    {
        val["maxThreadPoolSize"] = ModelBase::toJson(m_MaxThreadPoolSize);
    }
    if(m_Cq_wcm_workflow_terminate_on_activateIsSet)
    {
        val["cq.wcm.workflow.terminate.on.activate"] = ModelBase::toJson(m_Cq_wcm_workflow_terminate_on_activate);
    }
    if(m_Cq_wcm_worklfow_terminate_exclusion_listIsSet)
    {
        val["cq.wcm.worklfow.terminate.exclusion.list"] = ModelBase::toJson(m_Cq_wcm_worklfow_terminate_exclusion_list);
    }
    

    return val;
}

void ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("event.filter") != val.end())
    {
        if(!val["event.filter"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["event.filter"]);
            setEventFilter( newItem );
        }
        
    }
    if(val.find("minThreadPoolSize") != val.end())
    {
        if(!val["minThreadPoolSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["minThreadPoolSize"]);
            setMinThreadPoolSize( newItem );
        }
        
    }
    if(val.find("maxThreadPoolSize") != val.end())
    {
        if(!val["maxThreadPoolSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["maxThreadPoolSize"]);
            setMaxThreadPoolSize( newItem );
        }
        
    }
    if(val.find("cq.wcm.workflow.terminate.on.activate") != val.end())
    {
        if(!val["cq.wcm.workflow.terminate.on.activate"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["cq.wcm.workflow.terminate.on.activate"]);
            setCqWcmWorkflowTerminateOnActivate( newItem );
        }
        
    }
    if(val.find("cq.wcm.worklfow.terminate.exclusion.list") != val.end())
    {
        if(!val["cq.wcm.worklfow.terminate.exclusion.list"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["cq.wcm.worklfow.terminate.exclusion.list"]);
            setCqWcmWorklfowTerminateExclusionList( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::getEventFilter() const
{
    return m_Event_filter;
}
void ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::setEventFilter(ConfigNodePropertyString const& value)
{
    m_Event_filter = value;
    m_Event_filterIsSet = true;
}
bool ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::eventFilterIsSet() const
{
    return m_Event_filterIsSet;
}
void ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::unsetEvent_filter()
{
    m_Event_filterIsSet = false;
}
ConfigNodePropertyInteger ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::getMinThreadPoolSize() const
{
    return m_MinThreadPoolSize;
}
void ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::setMinThreadPoolSize(ConfigNodePropertyInteger const& value)
{
    m_MinThreadPoolSize = value;
    m_MinThreadPoolSizeIsSet = true;
}
bool ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::minThreadPoolSizeIsSet() const
{
    return m_MinThreadPoolSizeIsSet;
}
void ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::unsetMinThreadPoolSize()
{
    m_MinThreadPoolSizeIsSet = false;
}
ConfigNodePropertyInteger ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::getMaxThreadPoolSize() const
{
    return m_MaxThreadPoolSize;
}
void ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::setMaxThreadPoolSize(ConfigNodePropertyInteger const& value)
{
    m_MaxThreadPoolSize = value;
    m_MaxThreadPoolSizeIsSet = true;
}
bool ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::maxThreadPoolSizeIsSet() const
{
    return m_MaxThreadPoolSizeIsSet;
}
void ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::unsetMaxThreadPoolSize()
{
    m_MaxThreadPoolSizeIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::getCqWcmWorkflowTerminateOnActivate() const
{
    return m_Cq_wcm_workflow_terminate_on_activate;
}
void ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::setCqWcmWorkflowTerminateOnActivate(ConfigNodePropertyBoolean const& value)
{
    m_Cq_wcm_workflow_terminate_on_activate = value;
    m_Cq_wcm_workflow_terminate_on_activateIsSet = true;
}
bool ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::cqWcmWorkflowTerminateOnActivateIsSet() const
{
    return m_Cq_wcm_workflow_terminate_on_activateIsSet;
}
void ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::unsetCq_wcm_workflow_terminate_on_activate()
{
    m_Cq_wcm_workflow_terminate_on_activateIsSet = false;
}
ConfigNodePropertyArray ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::getCqWcmWorklfowTerminateExclusionList() const
{
    return m_Cq_wcm_worklfow_terminate_exclusion_list;
}
void ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::setCqWcmWorklfowTerminateExclusionList(ConfigNodePropertyArray const& value)
{
    m_Cq_wcm_worklfow_terminate_exclusion_list = value;
    m_Cq_wcm_worklfow_terminate_exclusion_listIsSet = true;
}
bool ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::cqWcmWorklfowTerminateExclusionListIsSet() const
{
    return m_Cq_wcm_worklfow_terminate_exclusion_listIsSet;
}
void ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties::unsetCq_wcm_worklfow_terminate_exclusion_list()
{
    m_Cq_wcm_worklfow_terminate_exclusion_listIsSet = false;
}

}
}
}
}

