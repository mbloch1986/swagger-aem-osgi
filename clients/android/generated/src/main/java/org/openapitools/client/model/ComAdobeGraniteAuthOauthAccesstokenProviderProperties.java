/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.openapitools.client.model.ConfigNodePropertyArray;
import org.openapitools.client.model.ConfigNodePropertyBoolean;
import org.openapitools.client.model.ConfigNodePropertyInteger;
import org.openapitools.client.model.ConfigNodePropertyString;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
  
  @SerializedName("name")
  private ConfigNodePropertyString name = null;
  @SerializedName("auth.token.provider.title")
  private ConfigNodePropertyString authTokenProviderTitle = null;
  @SerializedName("auth.token.provider.default.claims")
  private ConfigNodePropertyArray authTokenProviderDefaultClaims = null;
  @SerializedName("auth.token.provider.endpoint")
  private ConfigNodePropertyString authTokenProviderEndpoint = null;
  @SerializedName("auth.access.token.request")
  private ConfigNodePropertyString authAccessTokenRequest = null;
  @SerializedName("auth.token.provider.keypair.alias")
  private ConfigNodePropertyString authTokenProviderKeypairAlias = null;
  @SerializedName("auth.token.provider.conn.timeout")
  private ConfigNodePropertyInteger authTokenProviderConnTimeout = null;
  @SerializedName("auth.token.provider.so.timeout")
  private ConfigNodePropertyInteger authTokenProviderSoTimeout = null;
  @SerializedName("auth.token.provider.client.id")
  private ConfigNodePropertyString authTokenProviderClientId = null;
  @SerializedName("auth.token.provider.scope")
  private ConfigNodePropertyString authTokenProviderScope = null;
  @SerializedName("auth.token.provider.reuse.access.token")
  private ConfigNodePropertyBoolean authTokenProviderReuseAccessToken = null;
  @SerializedName("auth.token.provider.relaxed.ssl")
  private ConfigNodePropertyBoolean authTokenProviderRelaxedSsl = null;
  @SerializedName("token.request.customizer.type")
  private ConfigNodePropertyString tokenRequestCustomizerType = null;
  @SerializedName("auth.token.validator.type")
  private ConfigNodePropertyString authTokenValidatorType = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getName() {
    return name;
  }
  public void setName(ConfigNodePropertyString name) {
    this.name = name;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getAuthTokenProviderTitle() {
    return authTokenProviderTitle;
  }
  public void setAuthTokenProviderTitle(ConfigNodePropertyString authTokenProviderTitle) {
    this.authTokenProviderTitle = authTokenProviderTitle;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyArray getAuthTokenProviderDefaultClaims() {
    return authTokenProviderDefaultClaims;
  }
  public void setAuthTokenProviderDefaultClaims(ConfigNodePropertyArray authTokenProviderDefaultClaims) {
    this.authTokenProviderDefaultClaims = authTokenProviderDefaultClaims;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getAuthTokenProviderEndpoint() {
    return authTokenProviderEndpoint;
  }
  public void setAuthTokenProviderEndpoint(ConfigNodePropertyString authTokenProviderEndpoint) {
    this.authTokenProviderEndpoint = authTokenProviderEndpoint;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getAuthAccessTokenRequest() {
    return authAccessTokenRequest;
  }
  public void setAuthAccessTokenRequest(ConfigNodePropertyString authAccessTokenRequest) {
    this.authAccessTokenRequest = authAccessTokenRequest;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getAuthTokenProviderKeypairAlias() {
    return authTokenProviderKeypairAlias;
  }
  public void setAuthTokenProviderKeypairAlias(ConfigNodePropertyString authTokenProviderKeypairAlias) {
    this.authTokenProviderKeypairAlias = authTokenProviderKeypairAlias;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getAuthTokenProviderConnTimeout() {
    return authTokenProviderConnTimeout;
  }
  public void setAuthTokenProviderConnTimeout(ConfigNodePropertyInteger authTokenProviderConnTimeout) {
    this.authTokenProviderConnTimeout = authTokenProviderConnTimeout;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getAuthTokenProviderSoTimeout() {
    return authTokenProviderSoTimeout;
  }
  public void setAuthTokenProviderSoTimeout(ConfigNodePropertyInteger authTokenProviderSoTimeout) {
    this.authTokenProviderSoTimeout = authTokenProviderSoTimeout;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getAuthTokenProviderClientId() {
    return authTokenProviderClientId;
  }
  public void setAuthTokenProviderClientId(ConfigNodePropertyString authTokenProviderClientId) {
    this.authTokenProviderClientId = authTokenProviderClientId;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getAuthTokenProviderScope() {
    return authTokenProviderScope;
  }
  public void setAuthTokenProviderScope(ConfigNodePropertyString authTokenProviderScope) {
    this.authTokenProviderScope = authTokenProviderScope;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getAuthTokenProviderReuseAccessToken() {
    return authTokenProviderReuseAccessToken;
  }
  public void setAuthTokenProviderReuseAccessToken(ConfigNodePropertyBoolean authTokenProviderReuseAccessToken) {
    this.authTokenProviderReuseAccessToken = authTokenProviderReuseAccessToken;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getAuthTokenProviderRelaxedSsl() {
    return authTokenProviderRelaxedSsl;
  }
  public void setAuthTokenProviderRelaxedSsl(ConfigNodePropertyBoolean authTokenProviderRelaxedSsl) {
    this.authTokenProviderRelaxedSsl = authTokenProviderRelaxedSsl;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getTokenRequestCustomizerType() {
    return tokenRequestCustomizerType;
  }
  public void setTokenRequestCustomizerType(ConfigNodePropertyString tokenRequestCustomizerType) {
    this.tokenRequestCustomizerType = tokenRequestCustomizerType;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getAuthTokenValidatorType() {
    return authTokenValidatorType;
  }
  public void setAuthTokenValidatorType(ConfigNodePropertyString authTokenValidatorType) {
    this.authTokenValidatorType = authTokenValidatorType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComAdobeGraniteAuthOauthAccesstokenProviderProperties comAdobeGraniteAuthOauthAccesstokenProviderProperties = (ComAdobeGraniteAuthOauthAccesstokenProviderProperties) o;
    return (this.name == null ? comAdobeGraniteAuthOauthAccesstokenProviderProperties.name == null : this.name.equals(comAdobeGraniteAuthOauthAccesstokenProviderProperties.name)) &&
        (this.authTokenProviderTitle == null ? comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderTitle == null : this.authTokenProviderTitle.equals(comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderTitle)) &&
        (this.authTokenProviderDefaultClaims == null ? comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderDefaultClaims == null : this.authTokenProviderDefaultClaims.equals(comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderDefaultClaims)) &&
        (this.authTokenProviderEndpoint == null ? comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderEndpoint == null : this.authTokenProviderEndpoint.equals(comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderEndpoint)) &&
        (this.authAccessTokenRequest == null ? comAdobeGraniteAuthOauthAccesstokenProviderProperties.authAccessTokenRequest == null : this.authAccessTokenRequest.equals(comAdobeGraniteAuthOauthAccesstokenProviderProperties.authAccessTokenRequest)) &&
        (this.authTokenProviderKeypairAlias == null ? comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderKeypairAlias == null : this.authTokenProviderKeypairAlias.equals(comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderKeypairAlias)) &&
        (this.authTokenProviderConnTimeout == null ? comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderConnTimeout == null : this.authTokenProviderConnTimeout.equals(comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderConnTimeout)) &&
        (this.authTokenProviderSoTimeout == null ? comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderSoTimeout == null : this.authTokenProviderSoTimeout.equals(comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderSoTimeout)) &&
        (this.authTokenProviderClientId == null ? comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderClientId == null : this.authTokenProviderClientId.equals(comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderClientId)) &&
        (this.authTokenProviderScope == null ? comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderScope == null : this.authTokenProviderScope.equals(comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderScope)) &&
        (this.authTokenProviderReuseAccessToken == null ? comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderReuseAccessToken == null : this.authTokenProviderReuseAccessToken.equals(comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderReuseAccessToken)) &&
        (this.authTokenProviderRelaxedSsl == null ? comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderRelaxedSsl == null : this.authTokenProviderRelaxedSsl.equals(comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenProviderRelaxedSsl)) &&
        (this.tokenRequestCustomizerType == null ? comAdobeGraniteAuthOauthAccesstokenProviderProperties.tokenRequestCustomizerType == null : this.tokenRequestCustomizerType.equals(comAdobeGraniteAuthOauthAccesstokenProviderProperties.tokenRequestCustomizerType)) &&
        (this.authTokenValidatorType == null ? comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenValidatorType == null : this.authTokenValidatorType.equals(comAdobeGraniteAuthOauthAccesstokenProviderProperties.authTokenValidatorType));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.authTokenProviderTitle == null ? 0: this.authTokenProviderTitle.hashCode());
    result = 31 * result + (this.authTokenProviderDefaultClaims == null ? 0: this.authTokenProviderDefaultClaims.hashCode());
    result = 31 * result + (this.authTokenProviderEndpoint == null ? 0: this.authTokenProviderEndpoint.hashCode());
    result = 31 * result + (this.authAccessTokenRequest == null ? 0: this.authAccessTokenRequest.hashCode());
    result = 31 * result + (this.authTokenProviderKeypairAlias == null ? 0: this.authTokenProviderKeypairAlias.hashCode());
    result = 31 * result + (this.authTokenProviderConnTimeout == null ? 0: this.authTokenProviderConnTimeout.hashCode());
    result = 31 * result + (this.authTokenProviderSoTimeout == null ? 0: this.authTokenProviderSoTimeout.hashCode());
    result = 31 * result + (this.authTokenProviderClientId == null ? 0: this.authTokenProviderClientId.hashCode());
    result = 31 * result + (this.authTokenProviderScope == null ? 0: this.authTokenProviderScope.hashCode());
    result = 31 * result + (this.authTokenProviderReuseAccessToken == null ? 0: this.authTokenProviderReuseAccessToken.hashCode());
    result = 31 * result + (this.authTokenProviderRelaxedSsl == null ? 0: this.authTokenProviderRelaxedSsl.hashCode());
    result = 31 * result + (this.tokenRequestCustomizerType == null ? 0: this.tokenRequestCustomizerType.hashCode());
    result = 31 * result + (this.authTokenValidatorType == null ? 0: this.authTokenValidatorType.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComAdobeGraniteAuthOauthAccesstokenProviderProperties {\n");
    
    sb.append("  name: ").append(name).append("\n");
    sb.append("  authTokenProviderTitle: ").append(authTokenProviderTitle).append("\n");
    sb.append("  authTokenProviderDefaultClaims: ").append(authTokenProviderDefaultClaims).append("\n");
    sb.append("  authTokenProviderEndpoint: ").append(authTokenProviderEndpoint).append("\n");
    sb.append("  authAccessTokenRequest: ").append(authAccessTokenRequest).append("\n");
    sb.append("  authTokenProviderKeypairAlias: ").append(authTokenProviderKeypairAlias).append("\n");
    sb.append("  authTokenProviderConnTimeout: ").append(authTokenProviderConnTimeout).append("\n");
    sb.append("  authTokenProviderSoTimeout: ").append(authTokenProviderSoTimeout).append("\n");
    sb.append("  authTokenProviderClientId: ").append(authTokenProviderClientId).append("\n");
    sb.append("  authTokenProviderScope: ").append(authTokenProviderScope).append("\n");
    sb.append("  authTokenProviderReuseAccessToken: ").append(authTokenProviderReuseAccessToken).append("\n");
    sb.append("  authTokenProviderRelaxedSsl: ").append(authTokenProviderRelaxedSsl).append("\n");
    sb.append("  tokenRequestCustomizerType: ").append(tokenRequestCustomizerType).append("\n");
    sb.append("  authTokenValidatorType: ").append(authTokenValidatorType).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
