/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties
    : public ModelBase
{
public:
    OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties();
    virtual ~OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getHandlerSchemes() const;
    bool handlerSchemesIsSet() const;
    void unsetHandler_schemes();
    void setHandlerSchemes(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSlingJcrinstallFolderNameRegexp() const;
    bool slingJcrinstallFolderNameRegexpIsSet() const;
    void unsetSling_jcrinstall_folder_name_regexp();
    void setSlingJcrinstallFolderNameRegexp(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getSlingJcrinstallFolderMaxDepth() const;
    bool slingJcrinstallFolderMaxDepthIsSet() const;
    void unsetSling_jcrinstall_folder_max_depth();
    void setSlingJcrinstallFolderMaxDepth(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getSlingJcrinstallSearchPath() const;
    bool slingJcrinstallSearchPathIsSet() const;
    void unsetSling_jcrinstall_search_path();
    void setSlingJcrinstallSearchPath(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSlingJcrinstallNewConfigPath() const;
    bool slingJcrinstallNewConfigPathIsSet() const;
    void unsetSling_jcrinstall_new_config_path();
    void setSlingJcrinstallNewConfigPath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getSlingJcrinstallSignalPath() const;
    bool slingJcrinstallSignalPathIsSet() const;
    void unsetSling_jcrinstall_signal_path();
    void setSlingJcrinstallSignalPath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getSlingJcrinstallEnableWriteback() const;
    bool slingJcrinstallEnableWritebackIsSet() const;
    void unsetSling_jcrinstall_enable_writeback();
    void setSlingJcrinstallEnableWriteback(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyArray> m_Handler_schemes;
    bool m_Handler_schemesIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Sling_jcrinstall_folder_name_regexp;
    bool m_Sling_jcrinstall_folder_name_regexpIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Sling_jcrinstall_folder_max_depth;
    bool m_Sling_jcrinstall_folder_max_depthIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Sling_jcrinstall_search_path;
    bool m_Sling_jcrinstall_search_pathIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Sling_jcrinstall_new_config_path;
    bool m_Sling_jcrinstall_new_config_pathIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Sling_jcrinstall_signal_path;
    bool m_Sling_jcrinstall_signal_pathIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Sling_jcrinstall_enable_writeback;
    bool m_Sling_jcrinstall_enable_writebackIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties_H_ */
