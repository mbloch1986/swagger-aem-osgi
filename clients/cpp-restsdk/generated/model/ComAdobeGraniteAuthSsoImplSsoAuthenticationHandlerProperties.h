/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties
    : public ModelBase
{
public:
    ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties();
    virtual ~ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPath() const;
    bool pathIsSet() const;
    void unsetPath();
    void setPath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getServiceRanking() const;
    bool serviceRankingIsSet() const;
    void unsetService_ranking();
    void setServiceRanking(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getJaasControlFlag() const;
    bool jaasControlFlagIsSet() const;
    void unsetJaas_controlFlag();
    void setJaasControlFlag(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getJaasRealmName() const;
    bool jaasRealmNameIsSet() const;
    void unsetJaas_realmName();
    void setJaasRealmName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getJaasRanking() const;
    bool jaasRankingIsSet() const;
    void unsetJaas_ranking();
    void setJaasRanking(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getHeaders() const;
    bool headersIsSet() const;
    void unsetHeaders();
    void setHeaders(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getCookies() const;
    bool cookiesIsSet() const;
    void unsetCookies();
    void setCookies(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getParameters() const;
    bool parametersIsSet() const;
    void unsetParameters();
    void setParameters(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getUsermap() const;
    bool usermapIsSet() const;
    void unsetUsermap();
    void setUsermap(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getFormat() const;
    bool formatIsSet() const;
    void unsetFormat();
    void setFormat(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTrustedCredentialsAttribute() const;
    bool trustedCredentialsAttributeIsSet() const;
    void unsetTrustedCredentialsAttribute();
    void setTrustedCredentialsAttribute(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Path;
    bool m_PathIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Service_ranking;
    bool m_Service_rankingIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Jaas_controlFlag;
    bool m_Jaas_controlFlagIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Jaas_realmName;
    bool m_Jaas_realmNameIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Jaas_ranking;
    bool m_Jaas_rankingIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Headers;
    bool m_HeadersIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Cookies;
    bool m_CookiesIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Parameters;
    bool m_ParametersIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Usermap;
    bool m_UsermapIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Format;
    bool m_FormatIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_TrustedCredentialsAttribute;
    bool m_TrustedCredentialsAttributeIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties_H_ */
