/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties {
  #[serde(rename = "hc.tags")]
  hc_tags: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "dispatcher.address")]
  dispatcher_address: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "dispatcher.filter.allowed")]
  dispatcher_filter_allowed: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "dispatcher.filter.blocked")]
  dispatcher_filter_blocked: Option<::models::ConfigNodePropertyArray>
}

impl ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties {
  pub fn new() -> ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties {
    ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties {
      hc_tags: None,
      dispatcher_address: None,
      dispatcher_filter_allowed: None,
      dispatcher_filter_blocked: None
    }
  }

  pub fn set_hc_tags(&mut self, hc_tags: ::models::ConfigNodePropertyArray) {
    self.hc_tags = Some(hc_tags);
  }

  pub fn with_hc_tags(mut self, hc_tags: ::models::ConfigNodePropertyArray) -> ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties {
    self.hc_tags = Some(hc_tags);
    self
  }

  pub fn hc_tags(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.hc_tags.as_ref()
  }

  pub fn reset_hc_tags(&mut self) {
    self.hc_tags = None;
  }

  pub fn set_dispatcher_address(&mut self, dispatcher_address: ::models::ConfigNodePropertyString) {
    self.dispatcher_address = Some(dispatcher_address);
  }

  pub fn with_dispatcher_address(mut self, dispatcher_address: ::models::ConfigNodePropertyString) -> ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties {
    self.dispatcher_address = Some(dispatcher_address);
    self
  }

  pub fn dispatcher_address(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.dispatcher_address.as_ref()
  }

  pub fn reset_dispatcher_address(&mut self) {
    self.dispatcher_address = None;
  }

  pub fn set_dispatcher_filter_allowed(&mut self, dispatcher_filter_allowed: ::models::ConfigNodePropertyArray) {
    self.dispatcher_filter_allowed = Some(dispatcher_filter_allowed);
  }

  pub fn with_dispatcher_filter_allowed(mut self, dispatcher_filter_allowed: ::models::ConfigNodePropertyArray) -> ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties {
    self.dispatcher_filter_allowed = Some(dispatcher_filter_allowed);
    self
  }

  pub fn dispatcher_filter_allowed(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.dispatcher_filter_allowed.as_ref()
  }

  pub fn reset_dispatcher_filter_allowed(&mut self) {
    self.dispatcher_filter_allowed = None;
  }

  pub fn set_dispatcher_filter_blocked(&mut self, dispatcher_filter_blocked: ::models::ConfigNodePropertyArray) {
    self.dispatcher_filter_blocked = Some(dispatcher_filter_blocked);
  }

  pub fn with_dispatcher_filter_blocked(mut self, dispatcher_filter_blocked: ::models::ConfigNodePropertyArray) -> ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties {
    self.dispatcher_filter_blocked = Some(dispatcher_filter_blocked);
    self
  }

  pub fn dispatcher_filter_blocked(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.dispatcher_filter_blocked.as_ref()
  }

  pub fn reset_dispatcher_filter_blocked(&mut self) {
    self.dispatcher_filter_blocked = None;
  }

}



