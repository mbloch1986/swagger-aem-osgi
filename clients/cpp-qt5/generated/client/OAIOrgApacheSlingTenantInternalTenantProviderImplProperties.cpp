/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingTenantInternalTenantProviderImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::OAIOrgApacheSlingTenantInternalTenantProviderImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::OAIOrgApacheSlingTenantInternalTenantProviderImplProperties() {
    init();
}

OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::~OAIOrgApacheSlingTenantInternalTenantProviderImplProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::init() {
    tenant_root = new OAIConfigNodePropertyString();
    m_tenant_root_isSet = false;
    tenant_path_matcher = new OAIConfigNodePropertyArray();
    m_tenant_path_matcher_isSet = false;
}

void
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::cleanup() {
    if(tenant_root != nullptr) { 
        delete tenant_root;
    }
    if(tenant_path_matcher != nullptr) { 
        delete tenant_path_matcher;
    }
}

OAIOrgApacheSlingTenantInternalTenantProviderImplProperties*
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&tenant_root, pJson["tenant.root"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&tenant_path_matcher, pJson["tenant.path.matcher"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::asJsonObject() {
    QJsonObject obj;
    if((tenant_root != nullptr) && (tenant_root->isSet())){
        toJsonValue(QString("tenant.root"), tenant_root, obj, QString("OAIConfigNodePropertyString"));
    }
    if((tenant_path_matcher != nullptr) && (tenant_path_matcher->isSet())){
        toJsonValue(QString("tenant.path.matcher"), tenant_path_matcher, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::getTenantRoot() {
    return tenant_root;
}
void
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::setTenantRoot(OAIConfigNodePropertyString* tenant_root) {
    this->tenant_root = tenant_root;
    this->m_tenant_root_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::getTenantPathMatcher() {
    return tenant_path_matcher;
}
void
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::setTenantPathMatcher(OAIConfigNodePropertyArray* tenant_path_matcher) {
    this->tenant_path_matcher = tenant_path_matcher;
    this->m_tenant_path_matcher_isSet = true;
}


bool
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(tenant_root != nullptr && tenant_root->isSet()){ isObjectUpdated = true; break;}
        if(tenant_path_matcher != nullptr && tenant_path_matcher->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

