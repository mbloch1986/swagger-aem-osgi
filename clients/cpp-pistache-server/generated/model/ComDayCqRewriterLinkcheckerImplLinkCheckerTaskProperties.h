/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.h
 *
 * 
 */

#ifndef ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties_H_
#define ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties
    : public ModelBase
{
public:
    ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties();
    virtual ~ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getSchedulerPeriod() const;
    void setSchedulerPeriod(ConfigNodePropertyInteger const& value);
    bool schedulerPeriodIsSet() const;
    void unsetScheduler_period();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getSchedulerConcurrent() const;
    void setSchedulerConcurrent(ConfigNodePropertyBoolean const& value);
    bool schedulerConcurrentIsSet() const;
    void unsetScheduler_concurrent();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getGoodLinkTestInterval() const;
    void setGoodLinkTestInterval(ConfigNodePropertyInteger const& value);
    bool goodLinkTestIntervalIsSet() const;
    void unsetGood_link_test_interval();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getBadLinkTestInterval() const;
    void setBadLinkTestInterval(ConfigNodePropertyInteger const& value);
    bool badLinkTestIntervalIsSet() const;
    void unsetBad_link_test_interval();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getLinkUnusedInterval() const;
    void setLinkUnusedInterval(ConfigNodePropertyInteger const& value);
    bool linkUnusedIntervalIsSet() const;
    void unsetLink_unused_interval();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getConnectionTimeout() const;
    void setConnectionTimeout(ConfigNodePropertyInteger const& value);
    bool connectionTimeoutIsSet() const;
    void unsetConnection_timeout();

protected:
    ConfigNodePropertyInteger m_Scheduler_period;
    bool m_Scheduler_periodIsSet;
    ConfigNodePropertyBoolean m_Scheduler_concurrent;
    bool m_Scheduler_concurrentIsSet;
    ConfigNodePropertyInteger m_Good_link_test_interval;
    bool m_Good_link_test_intervalIsSet;
    ConfigNodePropertyInteger m_Bad_link_test_interval;
    bool m_Bad_link_test_intervalIsSet;
    ConfigNodePropertyInteger m_Link_unused_interval;
    bool m_Link_unused_intervalIsSet;
    ConfigNodePropertyInteger m_Connection_timeout;
    bool m_Connection_timeoutIsSet;
};

}
}
}
}

#endif /* ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties_H_ */
