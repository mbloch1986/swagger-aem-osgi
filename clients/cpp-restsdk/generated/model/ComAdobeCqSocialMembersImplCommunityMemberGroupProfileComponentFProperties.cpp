/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties::ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties()
{
    m_EveryoneLimitIsSet = false;
    m_PriorityIsSet = false;
}

ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties::~ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties()
{
}

void ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EveryoneLimitIsSet)
    {
        val[utility::conversions::to_string_t("everyoneLimit")] = ModelBase::toJson(m_EveryoneLimit);
    }
    if(m_PriorityIsSet)
    {
        val[utility::conversions::to_string_t("priority")] = ModelBase::toJson(m_Priority);
    }

    return val;
}

void ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("everyoneLimit")))
    {
        if(!val[utility::conversions::to_string_t("everyoneLimit")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("everyoneLimit")]);
            setEveryoneLimit( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("priority")))
    {
        if(!val[utility::conversions::to_string_t("priority")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("priority")]);
            setPriority( newItem );
        }
    }
}

void ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_EveryoneLimitIsSet)
    {
        if (m_EveryoneLimit.get())
        {
            m_EveryoneLimit->toMultipart(multipart, utility::conversions::to_string_t("everyoneLimit."));
        }
    }
    if(m_PriorityIsSet)
    {
        if (m_Priority.get())
        {
            m_Priority->toMultipart(multipart, utility::conversions::to_string_t("priority."));
        }
    }
}

void ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("everyoneLimit")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("everyoneLimit")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("everyoneLimit."));
            setEveryoneLimit( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("priority")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("priority")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("priority."));
            setPriority( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties::getEveryoneLimit() const
{
    return m_EveryoneLimit;
}


void ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties::setEveryoneLimit(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_EveryoneLimit = value;
    m_EveryoneLimitIsSet = true;
}
bool ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties::everyoneLimitIsSet() const
{
    return m_EveryoneLimitIsSet;
}

void ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties::unsetEveryoneLimit()
{
    m_EveryoneLimitIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties::getPriority() const
{
    return m_Priority;
}


void ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties::setPriority(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Priority = value;
    m_PriorityIsSet = true;
}
bool ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties::priorityIsSet() const
{
    return m_PriorityIsSet;
}

void ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties::unsetPriority()
{
    m_PriorityIsSet = false;
}

}
}
}
}

