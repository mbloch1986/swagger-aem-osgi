/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties.h
 *
 * 
 */

#ifndef ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties_H_
#define ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties
    : public ModelBase
{
public:
    ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties();
    virtual ~ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getComAdobeCqScreensAnalyticsImplUrl() const;
    void setComAdobeCqScreensAnalyticsImplUrl(ConfigNodePropertyString const& value);
    bool comAdobeCqScreensAnalyticsImplUrlIsSet() const;
    void unsetCom_adobe_cq_screens_analytics_impl_url();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getComAdobeCqScreensAnalyticsImplApikey() const;
    void setComAdobeCqScreensAnalyticsImplApikey(ConfigNodePropertyString const& value);
    bool comAdobeCqScreensAnalyticsImplApikeyIsSet() const;
    void unsetCom_adobe_cq_screens_analytics_impl_apikey();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getComAdobeCqScreensAnalyticsImplProject() const;
    void setComAdobeCqScreensAnalyticsImplProject(ConfigNodePropertyString const& value);
    bool comAdobeCqScreensAnalyticsImplProjectIsSet() const;
    void unsetCom_adobe_cq_screens_analytics_impl_project();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyDropDown getComAdobeCqScreensAnalyticsImplEnvironment() const;
    void setComAdobeCqScreensAnalyticsImplEnvironment(ConfigNodePropertyDropDown const& value);
    bool comAdobeCqScreensAnalyticsImplEnvironmentIsSet() const;
    void unsetCom_adobe_cq_screens_analytics_impl_environment();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getComAdobeCqScreensAnalyticsImplSendFrequency() const;
    void setComAdobeCqScreensAnalyticsImplSendFrequency(ConfigNodePropertyInteger const& value);
    bool comAdobeCqScreensAnalyticsImplSendFrequencyIsSet() const;
    void unsetCom_adobe_cq_screens_analytics_impl_sendFrequency();

protected:
    ConfigNodePropertyString m_Com_adobe_cq_screens_analytics_impl_url;
    bool m_Com_adobe_cq_screens_analytics_impl_urlIsSet;
    ConfigNodePropertyString m_Com_adobe_cq_screens_analytics_impl_apikey;
    bool m_Com_adobe_cq_screens_analytics_impl_apikeyIsSet;
    ConfigNodePropertyString m_Com_adobe_cq_screens_analytics_impl_project;
    bool m_Com_adobe_cq_screens_analytics_impl_projectIsSet;
    ConfigNodePropertyDropDown m_Com_adobe_cq_screens_analytics_impl_environment;
    bool m_Com_adobe_cq_screens_analytics_impl_environmentIsSet;
    ConfigNodePropertyInteger m_Com_adobe_cq_screens_analytics_impl_sendFrequency;
    bool m_Com_adobe_cq_screens_analytics_impl_sendFrequencyIsSet;
};

}
}
}
}

#endif /* ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties_H_ */
