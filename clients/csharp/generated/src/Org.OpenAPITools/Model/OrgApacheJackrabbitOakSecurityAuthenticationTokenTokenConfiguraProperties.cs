/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties :  IEquatable<OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties" /> class.
        /// </summary>
        /// <param name="tokenExpiration">tokenExpiration.</param>
        /// <param name="tokenLength">tokenLength.</param>
        /// <param name="tokenRefresh">tokenRefresh.</param>
        /// <param name="tokenCleanupThreshold">tokenCleanupThreshold.</param>
        /// <param name="passwordHashAlgorithm">passwordHashAlgorithm.</param>
        /// <param name="passwordHashIterations">passwordHashIterations.</param>
        /// <param name="passwordSaltSize">passwordSaltSize.</param>
        public OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties(ConfigNodePropertyString tokenExpiration = default(ConfigNodePropertyString), ConfigNodePropertyString tokenLength = default(ConfigNodePropertyString), ConfigNodePropertyBoolean tokenRefresh = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger tokenCleanupThreshold = default(ConfigNodePropertyInteger), ConfigNodePropertyString passwordHashAlgorithm = default(ConfigNodePropertyString), ConfigNodePropertyInteger passwordHashIterations = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger passwordSaltSize = default(ConfigNodePropertyInteger))
        {
            this.TokenExpiration = tokenExpiration;
            this.TokenLength = tokenLength;
            this.TokenRefresh = tokenRefresh;
            this.TokenCleanupThreshold = tokenCleanupThreshold;
            this.PasswordHashAlgorithm = passwordHashAlgorithm;
            this.PasswordHashIterations = passwordHashIterations;
            this.PasswordSaltSize = passwordSaltSize;
        }
        
        /// <summary>
        /// Gets or Sets TokenExpiration
        /// </summary>
        [DataMember(Name="tokenExpiration", EmitDefaultValue=false)]
        public ConfigNodePropertyString TokenExpiration { get; set; }

        /// <summary>
        /// Gets or Sets TokenLength
        /// </summary>
        [DataMember(Name="tokenLength", EmitDefaultValue=false)]
        public ConfigNodePropertyString TokenLength { get; set; }

        /// <summary>
        /// Gets or Sets TokenRefresh
        /// </summary>
        [DataMember(Name="tokenRefresh", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean TokenRefresh { get; set; }

        /// <summary>
        /// Gets or Sets TokenCleanupThreshold
        /// </summary>
        [DataMember(Name="tokenCleanupThreshold", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger TokenCleanupThreshold { get; set; }

        /// <summary>
        /// Gets or Sets PasswordHashAlgorithm
        /// </summary>
        [DataMember(Name="passwordHashAlgorithm", EmitDefaultValue=false)]
        public ConfigNodePropertyString PasswordHashAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets PasswordHashIterations
        /// </summary>
        [DataMember(Name="passwordHashIterations", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger PasswordHashIterations { get; set; }

        /// <summary>
        /// Gets or Sets PasswordSaltSize
        /// </summary>
        [DataMember(Name="passwordSaltSize", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger PasswordSaltSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties {\n");
            sb.Append("  TokenExpiration: ").Append(TokenExpiration).Append("\n");
            sb.Append("  TokenLength: ").Append(TokenLength).Append("\n");
            sb.Append("  TokenRefresh: ").Append(TokenRefresh).Append("\n");
            sb.Append("  TokenCleanupThreshold: ").Append(TokenCleanupThreshold).Append("\n");
            sb.Append("  PasswordHashAlgorithm: ").Append(PasswordHashAlgorithm).Append("\n");
            sb.Append("  PasswordHashIterations: ").Append(PasswordHashIterations).Append("\n");
            sb.Append("  PasswordSaltSize: ").Append(PasswordSaltSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TokenExpiration == input.TokenExpiration ||
                    (this.TokenExpiration != null &&
                    this.TokenExpiration.Equals(input.TokenExpiration))
                ) && 
                (
                    this.TokenLength == input.TokenLength ||
                    (this.TokenLength != null &&
                    this.TokenLength.Equals(input.TokenLength))
                ) && 
                (
                    this.TokenRefresh == input.TokenRefresh ||
                    (this.TokenRefresh != null &&
                    this.TokenRefresh.Equals(input.TokenRefresh))
                ) && 
                (
                    this.TokenCleanupThreshold == input.TokenCleanupThreshold ||
                    (this.TokenCleanupThreshold != null &&
                    this.TokenCleanupThreshold.Equals(input.TokenCleanupThreshold))
                ) && 
                (
                    this.PasswordHashAlgorithm == input.PasswordHashAlgorithm ||
                    (this.PasswordHashAlgorithm != null &&
                    this.PasswordHashAlgorithm.Equals(input.PasswordHashAlgorithm))
                ) && 
                (
                    this.PasswordHashIterations == input.PasswordHashIterations ||
                    (this.PasswordHashIterations != null &&
                    this.PasswordHashIterations.Equals(input.PasswordHashIterations))
                ) && 
                (
                    this.PasswordSaltSize == input.PasswordSaltSize ||
                    (this.PasswordSaltSize != null &&
                    this.PasswordSaltSize.Equals(input.PasswordSaltSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenExpiration != null)
                    hashCode = hashCode * 59 + this.TokenExpiration.GetHashCode();
                if (this.TokenLength != null)
                    hashCode = hashCode * 59 + this.TokenLength.GetHashCode();
                if (this.TokenRefresh != null)
                    hashCode = hashCode * 59 + this.TokenRefresh.GetHashCode();
                if (this.TokenCleanupThreshold != null)
                    hashCode = hashCode * 59 + this.TokenCleanupThreshold.GetHashCode();
                if (this.PasswordHashAlgorithm != null)
                    hashCode = hashCode * 59 + this.PasswordHashAlgorithm.GetHashCode();
                if (this.PasswordHashIterations != null)
                    hashCode = hashCode * 59 + this.PasswordHashIterations.GetHashCode();
                if (this.PasswordSaltSize != null)
                    hashCode = hashCode * 59 + this.PasswordSaltSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
