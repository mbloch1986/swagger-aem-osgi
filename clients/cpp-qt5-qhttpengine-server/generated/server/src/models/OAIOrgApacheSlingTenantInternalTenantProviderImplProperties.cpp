/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingTenantInternalTenantProviderImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::OAIOrgApacheSlingTenantInternalTenantProviderImplProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::OAIOrgApacheSlingTenantInternalTenantProviderImplProperties() {
    this->init();
}

OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::~OAIOrgApacheSlingTenantInternalTenantProviderImplProperties() {
    
}

void
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::init() {
    m_tenant_root_isSet = false;
    m_tenant_path_matcher_isSet = false;
}

void
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(tenant_root, json[QString("tenant.root")]);
    
    ::OpenAPI::fromJsonValue(tenant_path_matcher, json[QString("tenant.path.matcher")]);
    
}

QString
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(tenant_root.isSet()){
        obj.insert(QString("tenant.root"), ::OpenAPI::toJsonValue(tenant_root));
    }
	if(tenant_path_matcher.isSet()){
        obj.insert(QString("tenant.path.matcher"), ::OpenAPI::toJsonValue(tenant_path_matcher));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::getTenantRoot() const {
    return tenant_root;
}
void
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::setTenantRoot(const OAIConfigNodePropertyString &tenant_root) {
    this->tenant_root = tenant_root;
    this->m_tenant_root_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::getTenantPathMatcher() const {
    return tenant_path_matcher;
}
void
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::setTenantPathMatcher(const OAIConfigNodePropertyArray &tenant_path_matcher) {
    this->tenant_path_matcher = tenant_path_matcher;
    this->m_tenant_path_matcher_isSet = true;
}


bool
OAIOrgApacheSlingTenantInternalTenantProviderImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(tenant_root.isSet()){ isObjectUpdated = true; break;}
    
        if(tenant_path_matcher.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

