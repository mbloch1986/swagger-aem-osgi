/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialGroupImplGroupServiceImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::OAIComAdobeCqSocialGroupImplGroupServiceImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::OAIComAdobeCqSocialGroupImplGroupServiceImplProperties() {
    init();
}

OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::~OAIComAdobeCqSocialGroupImplGroupServiceImplProperties() {
    this->cleanup();
}

void
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::init() {
    max_wait_time = new OAIConfigNodePropertyInteger();
    m_max_wait_time_isSet = false;
    min_wait_between_retries = new OAIConfigNodePropertyInteger();
    m_min_wait_between_retries_isSet = false;
}

void
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::cleanup() {
    if(max_wait_time != nullptr) { 
        delete max_wait_time;
    }
    if(min_wait_between_retries != nullptr) { 
        delete min_wait_between_retries;
    }
}

OAIComAdobeCqSocialGroupImplGroupServiceImplProperties*
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&max_wait_time, pJson["maxWaitTime"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&min_wait_between_retries, pJson["minWaitBetweenRetries"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::asJsonObject() {
    QJsonObject obj;
    if((max_wait_time != nullptr) && (max_wait_time->isSet())){
        toJsonValue(QString("maxWaitTime"), max_wait_time, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((min_wait_between_retries != nullptr) && (min_wait_between_retries->isSet())){
        toJsonValue(QString("minWaitBetweenRetries"), min_wait_between_retries, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::getMaxWaitTime() {
    return max_wait_time;
}
void
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::setMaxWaitTime(OAIConfigNodePropertyInteger* max_wait_time) {
    this->max_wait_time = max_wait_time;
    this->m_max_wait_time_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::getMinWaitBetweenRetries() {
    return min_wait_between_retries;
}
void
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::setMinWaitBetweenRetries(OAIConfigNodePropertyInteger* min_wait_between_retries) {
    this->min_wait_between_retries = min_wait_between_retries;
    this->m_min_wait_between_retries_isSet = true;
}


bool
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(max_wait_time != nullptr && max_wait_time->isSet()){ isObjectUpdated = true; break;}
        if(min_wait_between_retries != nullptr && min_wait_between_retries->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

