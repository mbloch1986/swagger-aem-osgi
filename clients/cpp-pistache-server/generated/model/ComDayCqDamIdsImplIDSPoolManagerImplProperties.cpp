/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqDamIdsImplIDSPoolManagerImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqDamIdsImplIDSPoolManagerImplProperties::ComDayCqDamIdsImplIDSPoolManagerImplProperties()
{
    m_Max_errors_to_blacklistIsSet = false;
    m_Retry_interval_to_whitelistIsSet = false;
    m_Connect_timeoutIsSet = false;
    m_Socket_timeoutIsSet = false;
    m_Process_labelIsSet = false;
    m_Connection_use_maxIsSet = false;
    
}

ComDayCqDamIdsImplIDSPoolManagerImplProperties::~ComDayCqDamIdsImplIDSPoolManagerImplProperties()
{
}

void ComDayCqDamIdsImplIDSPoolManagerImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqDamIdsImplIDSPoolManagerImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Max_errors_to_blacklistIsSet)
    {
        val["max.errors.to.blacklist"] = ModelBase::toJson(m_Max_errors_to_blacklist);
    }
    if(m_Retry_interval_to_whitelistIsSet)
    {
        val["retry.interval.to.whitelist"] = ModelBase::toJson(m_Retry_interval_to_whitelist);
    }
    if(m_Connect_timeoutIsSet)
    {
        val["connect.timeout"] = ModelBase::toJson(m_Connect_timeout);
    }
    if(m_Socket_timeoutIsSet)
    {
        val["socket.timeout"] = ModelBase::toJson(m_Socket_timeout);
    }
    if(m_Process_labelIsSet)
    {
        val["process.label"] = ModelBase::toJson(m_Process_label);
    }
    if(m_Connection_use_maxIsSet)
    {
        val["connection.use.max"] = ModelBase::toJson(m_Connection_use_max);
    }
    

    return val;
}

void ComDayCqDamIdsImplIDSPoolManagerImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("max.errors.to.blacklist") != val.end())
    {
        if(!val["max.errors.to.blacklist"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["max.errors.to.blacklist"]);
            setMaxErrorsToBlacklist( newItem );
        }
        
    }
    if(val.find("retry.interval.to.whitelist") != val.end())
    {
        if(!val["retry.interval.to.whitelist"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["retry.interval.to.whitelist"]);
            setRetryIntervalToWhitelist( newItem );
        }
        
    }
    if(val.find("connect.timeout") != val.end())
    {
        if(!val["connect.timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["connect.timeout"]);
            setConnectTimeout( newItem );
        }
        
    }
    if(val.find("socket.timeout") != val.end())
    {
        if(!val["socket.timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["socket.timeout"]);
            setSocketTimeout( newItem );
        }
        
    }
    if(val.find("process.label") != val.end())
    {
        if(!val["process.label"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["process.label"]);
            setProcessLabel( newItem );
        }
        
    }
    if(val.find("connection.use.max") != val.end())
    {
        if(!val["connection.use.max"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["connection.use.max"]);
            setConnectionUseMax( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger ComDayCqDamIdsImplIDSPoolManagerImplProperties::getMaxErrorsToBlacklist() const
{
    return m_Max_errors_to_blacklist;
}
void ComDayCqDamIdsImplIDSPoolManagerImplProperties::setMaxErrorsToBlacklist(ConfigNodePropertyInteger const& value)
{
    m_Max_errors_to_blacklist = value;
    m_Max_errors_to_blacklistIsSet = true;
}
bool ComDayCqDamIdsImplIDSPoolManagerImplProperties::maxErrorsToBlacklistIsSet() const
{
    return m_Max_errors_to_blacklistIsSet;
}
void ComDayCqDamIdsImplIDSPoolManagerImplProperties::unsetMax_errors_to_blacklist()
{
    m_Max_errors_to_blacklistIsSet = false;
}
ConfigNodePropertyInteger ComDayCqDamIdsImplIDSPoolManagerImplProperties::getRetryIntervalToWhitelist() const
{
    return m_Retry_interval_to_whitelist;
}
void ComDayCqDamIdsImplIDSPoolManagerImplProperties::setRetryIntervalToWhitelist(ConfigNodePropertyInteger const& value)
{
    m_Retry_interval_to_whitelist = value;
    m_Retry_interval_to_whitelistIsSet = true;
}
bool ComDayCqDamIdsImplIDSPoolManagerImplProperties::retryIntervalToWhitelistIsSet() const
{
    return m_Retry_interval_to_whitelistIsSet;
}
void ComDayCqDamIdsImplIDSPoolManagerImplProperties::unsetRetry_interval_to_whitelist()
{
    m_Retry_interval_to_whitelistIsSet = false;
}
ConfigNodePropertyInteger ComDayCqDamIdsImplIDSPoolManagerImplProperties::getConnectTimeout() const
{
    return m_Connect_timeout;
}
void ComDayCqDamIdsImplIDSPoolManagerImplProperties::setConnectTimeout(ConfigNodePropertyInteger const& value)
{
    m_Connect_timeout = value;
    m_Connect_timeoutIsSet = true;
}
bool ComDayCqDamIdsImplIDSPoolManagerImplProperties::connectTimeoutIsSet() const
{
    return m_Connect_timeoutIsSet;
}
void ComDayCqDamIdsImplIDSPoolManagerImplProperties::unsetConnect_timeout()
{
    m_Connect_timeoutIsSet = false;
}
ConfigNodePropertyInteger ComDayCqDamIdsImplIDSPoolManagerImplProperties::getSocketTimeout() const
{
    return m_Socket_timeout;
}
void ComDayCqDamIdsImplIDSPoolManagerImplProperties::setSocketTimeout(ConfigNodePropertyInteger const& value)
{
    m_Socket_timeout = value;
    m_Socket_timeoutIsSet = true;
}
bool ComDayCqDamIdsImplIDSPoolManagerImplProperties::socketTimeoutIsSet() const
{
    return m_Socket_timeoutIsSet;
}
void ComDayCqDamIdsImplIDSPoolManagerImplProperties::unsetSocket_timeout()
{
    m_Socket_timeoutIsSet = false;
}
ConfigNodePropertyString ComDayCqDamIdsImplIDSPoolManagerImplProperties::getProcessLabel() const
{
    return m_Process_label;
}
void ComDayCqDamIdsImplIDSPoolManagerImplProperties::setProcessLabel(ConfigNodePropertyString const& value)
{
    m_Process_label = value;
    m_Process_labelIsSet = true;
}
bool ComDayCqDamIdsImplIDSPoolManagerImplProperties::processLabelIsSet() const
{
    return m_Process_labelIsSet;
}
void ComDayCqDamIdsImplIDSPoolManagerImplProperties::unsetProcess_label()
{
    m_Process_labelIsSet = false;
}
ConfigNodePropertyInteger ComDayCqDamIdsImplIDSPoolManagerImplProperties::getConnectionUseMax() const
{
    return m_Connection_use_max;
}
void ComDayCqDamIdsImplIDSPoolManagerImplProperties::setConnectionUseMax(ConfigNodePropertyInteger const& value)
{
    m_Connection_use_max = value;
    m_Connection_use_maxIsSet = true;
}
bool ComDayCqDamIdsImplIDSPoolManagerImplProperties::connectionUseMaxIsSet() const
{
    return m_Connection_use_maxIsSet;
}
void ComDayCqDamIdsImplIDSPoolManagerImplProperties::unsetConnection_use_max()
{
    m_Connection_use_maxIsSet = false;
}

}
}
}
}

