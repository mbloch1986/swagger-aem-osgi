/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties() {
    init();
}

OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::~OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties() {
    this->cleanup();
}

void
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::init() {
    show_placeholder = new OAIConfigNodePropertyBoolean();
    m_show_placeholder_isSet = false;
    maximum_cache_entries = new OAIConfigNodePropertyInteger();
    m_maximum_cache_entries_isSet = false;
    af_scripting_compatversion = new OAIConfigNodePropertyDropDown();
    m_af_scripting_compatversion_isSet = false;
    make_file_name_unique = new OAIConfigNodePropertyBoolean();
    m_make_file_name_unique_isSet = false;
    generating_compliant_data = new OAIConfigNodePropertyBoolean();
    m_generating_compliant_data_isSet = false;
}

void
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::cleanup() {
    if(show_placeholder != nullptr) { 
        delete show_placeholder;
    }
    if(maximum_cache_entries != nullptr) { 
        delete maximum_cache_entries;
    }
    if(af_scripting_compatversion != nullptr) { 
        delete af_scripting_compatversion;
    }
    if(make_file_name_unique != nullptr) { 
        delete make_file_name_unique;
    }
    if(generating_compliant_data != nullptr) { 
        delete generating_compliant_data;
    }
}

OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties*
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&show_placeholder, pJson["showPlaceholder"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&maximum_cache_entries, pJson["maximumCacheEntries"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&af_scripting_compatversion, pJson["af.scripting.compatversion"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&make_file_name_unique, pJson["makeFileNameUnique"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&generating_compliant_data, pJson["generatingCompliantData"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::asJsonObject() {
    QJsonObject obj;
    if((show_placeholder != nullptr) && (show_placeholder->isSet())){
        toJsonValue(QString("showPlaceholder"), show_placeholder, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((maximum_cache_entries != nullptr) && (maximum_cache_entries->isSet())){
        toJsonValue(QString("maximumCacheEntries"), maximum_cache_entries, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((af_scripting_compatversion != nullptr) && (af_scripting_compatversion->isSet())){
        toJsonValue(QString("af.scripting.compatversion"), af_scripting_compatversion, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((make_file_name_unique != nullptr) && (make_file_name_unique->isSet())){
        toJsonValue(QString("makeFileNameUnique"), make_file_name_unique, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((generating_compliant_data != nullptr) && (generating_compliant_data->isSet())){
        toJsonValue(QString("generatingCompliantData"), generating_compliant_data, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::getShowPlaceholder() {
    return show_placeholder;
}
void
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::setShowPlaceholder(OAIConfigNodePropertyBoolean* show_placeholder) {
    this->show_placeholder = show_placeholder;
    this->m_show_placeholder_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::getMaximumCacheEntries() {
    return maximum_cache_entries;
}
void
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::setMaximumCacheEntries(OAIConfigNodePropertyInteger* maximum_cache_entries) {
    this->maximum_cache_entries = maximum_cache_entries;
    this->m_maximum_cache_entries_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::getAfScriptingCompatversion() {
    return af_scripting_compatversion;
}
void
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::setAfScriptingCompatversion(OAIConfigNodePropertyDropDown* af_scripting_compatversion) {
    this->af_scripting_compatversion = af_scripting_compatversion;
    this->m_af_scripting_compatversion_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::getMakeFileNameUnique() {
    return make_file_name_unique;
}
void
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::setMakeFileNameUnique(OAIConfigNodePropertyBoolean* make_file_name_unique) {
    this->make_file_name_unique = make_file_name_unique;
    this->m_make_file_name_unique_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::getGeneratingCompliantData() {
    return generating_compliant_data;
}
void
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::setGeneratingCompliantData(OAIConfigNodePropertyBoolean* generating_compliant_data) {
    this->generating_compliant_data = generating_compliant_data;
    this->m_generating_compliant_data_isSet = true;
}


bool
OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(show_placeholder != nullptr && show_placeholder->isSet()){ isObjectUpdated = true; break;}
        if(maximum_cache_entries != nullptr && maximum_cache_entries->isSet()){ isObjectUpdated = true; break;}
        if(af_scripting_compatversion != nullptr && af_scripting_compatversion->isSet()){ isObjectUpdated = true; break;}
        if(make_file_name_unique != nullptr && make_file_name_unique->isSet()){ isObjectUpdated = true; break;}
        if(generating_compliant_data != nullptr && generating_compliant_data->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

