/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingCommonsMetricsInternalLogReporterProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingCommonsMetricsInternalLogReporterProperties::OrgApacheSlingCommonsMetricsInternalLogReporterProperties()
{
    m_PeriodIsSet = false;
    m_TimeUnitIsSet = false;
    m_LevelIsSet = false;
    m_LoggerNameIsSet = false;
    m_PrefixIsSet = false;
    m_PatternIsSet = false;
    m_RegistryNameIsSet = false;
}

OrgApacheSlingCommonsMetricsInternalLogReporterProperties::~OrgApacheSlingCommonsMetricsInternalLogReporterProperties()
{
}

void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingCommonsMetricsInternalLogReporterProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PeriodIsSet)
    {
        val[utility::conversions::to_string_t("period")] = ModelBase::toJson(m_Period);
    }
    if(m_TimeUnitIsSet)
    {
        val[utility::conversions::to_string_t("timeUnit")] = ModelBase::toJson(m_TimeUnit);
    }
    if(m_LevelIsSet)
    {
        val[utility::conversions::to_string_t("level")] = ModelBase::toJson(m_Level);
    }
    if(m_LoggerNameIsSet)
    {
        val[utility::conversions::to_string_t("loggerName")] = ModelBase::toJson(m_LoggerName);
    }
    if(m_PrefixIsSet)
    {
        val[utility::conversions::to_string_t("prefix")] = ModelBase::toJson(m_Prefix);
    }
    if(m_PatternIsSet)
    {
        val[utility::conversions::to_string_t("pattern")] = ModelBase::toJson(m_Pattern);
    }
    if(m_RegistryNameIsSet)
    {
        val[utility::conversions::to_string_t("registryName")] = ModelBase::toJson(m_RegistryName);
    }

    return val;
}

void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("period")))
    {
        if(!val[utility::conversions::to_string_t("period")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("period")]);
            setPeriod( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timeUnit")))
    {
        if(!val[utility::conversions::to_string_t("timeUnit")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("timeUnit")]);
            setTimeUnit( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("level")))
    {
        if(!val[utility::conversions::to_string_t("level")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("level")]);
            setLevel( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("loggerName")))
    {
        if(!val[utility::conversions::to_string_t("loggerName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("loggerName")]);
            setLoggerName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("prefix")))
    {
        if(!val[utility::conversions::to_string_t("prefix")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("prefix")]);
            setPrefix( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pattern")))
    {
        if(!val[utility::conversions::to_string_t("pattern")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("pattern")]);
            setPattern( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("registryName")))
    {
        if(!val[utility::conversions::to_string_t("registryName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("registryName")]);
            setRegistryName( newItem );
        }
    }
}

void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_PeriodIsSet)
    {
        if (m_Period.get())
        {
            m_Period->toMultipart(multipart, utility::conversions::to_string_t("period."));
        }
    }
    if(m_TimeUnitIsSet)
    {
        if (m_TimeUnit.get())
        {
            m_TimeUnit->toMultipart(multipart, utility::conversions::to_string_t("timeUnit."));
        }
    }
    if(m_LevelIsSet)
    {
        if (m_Level.get())
        {
            m_Level->toMultipart(multipart, utility::conversions::to_string_t("level."));
        }
    }
    if(m_LoggerNameIsSet)
    {
        if (m_LoggerName.get())
        {
            m_LoggerName->toMultipart(multipart, utility::conversions::to_string_t("loggerName."));
        }
    }
    if(m_PrefixIsSet)
    {
        if (m_Prefix.get())
        {
            m_Prefix->toMultipart(multipart, utility::conversions::to_string_t("prefix."));
        }
    }
    if(m_PatternIsSet)
    {
        if (m_Pattern.get())
        {
            m_Pattern->toMultipart(multipart, utility::conversions::to_string_t("pattern."));
        }
    }
    if(m_RegistryNameIsSet)
    {
        if (m_RegistryName.get())
        {
            m_RegistryName->toMultipart(multipart, utility::conversions::to_string_t("registryName."));
        }
    }
}

void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("period")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("period")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("period."));
            setPeriod( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timeUnit")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("timeUnit")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("timeUnit."));
            setTimeUnit( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("level")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("level")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("level."));
            setLevel( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("loggerName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("loggerName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("loggerName."));
            setLoggerName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("prefix")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("prefix")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("prefix."));
            setPrefix( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pattern")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("pattern")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("pattern."));
            setPattern( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("registryName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("registryName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("registryName."));
            setRegistryName( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingCommonsMetricsInternalLogReporterProperties::getPeriod() const
{
    return m_Period;
}


void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::setPeriod(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Period = value;
    m_PeriodIsSet = true;
}
bool OrgApacheSlingCommonsMetricsInternalLogReporterProperties::periodIsSet() const
{
    return m_PeriodIsSet;
}

void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::unsetPeriod()
{
    m_PeriodIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingCommonsMetricsInternalLogReporterProperties::getTimeUnit() const
{
    return m_TimeUnit;
}


void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::setTimeUnit(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_TimeUnit = value;
    m_TimeUnitIsSet = true;
}
bool OrgApacheSlingCommonsMetricsInternalLogReporterProperties::timeUnitIsSet() const
{
    return m_TimeUnitIsSet;
}

void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::unsetTimeUnit()
{
    m_TimeUnitIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingCommonsMetricsInternalLogReporterProperties::getLevel() const
{
    return m_Level;
}


void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::setLevel(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Level = value;
    m_LevelIsSet = true;
}
bool OrgApacheSlingCommonsMetricsInternalLogReporterProperties::levelIsSet() const
{
    return m_LevelIsSet;
}

void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::unsetLevel()
{
    m_LevelIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingCommonsMetricsInternalLogReporterProperties::getLoggerName() const
{
    return m_LoggerName;
}


void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::setLoggerName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_LoggerName = value;
    m_LoggerNameIsSet = true;
}
bool OrgApacheSlingCommonsMetricsInternalLogReporterProperties::loggerNameIsSet() const
{
    return m_LoggerNameIsSet;
}

void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::unsetLoggerName()
{
    m_LoggerNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingCommonsMetricsInternalLogReporterProperties::getPrefix() const
{
    return m_Prefix;
}


void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::setPrefix(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Prefix = value;
    m_PrefixIsSet = true;
}
bool OrgApacheSlingCommonsMetricsInternalLogReporterProperties::prefixIsSet() const
{
    return m_PrefixIsSet;
}

void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::unsetPrefix()
{
    m_PrefixIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingCommonsMetricsInternalLogReporterProperties::getPattern() const
{
    return m_Pattern;
}


void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::setPattern(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Pattern = value;
    m_PatternIsSet = true;
}
bool OrgApacheSlingCommonsMetricsInternalLogReporterProperties::patternIsSet() const
{
    return m_PatternIsSet;
}

void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::unsetPattern()
{
    m_PatternIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingCommonsMetricsInternalLogReporterProperties::getRegistryName() const
{
    return m_RegistryName;
}


void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::setRegistryName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_RegistryName = value;
    m_RegistryNameIsSet = true;
}
bool OrgApacheSlingCommonsMetricsInternalLogReporterProperties::registryNameIsSet() const
{
    return m_RegistryNameIsSet;
}

void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::unsetRegistryName()
{
    m_RegistryNameIsSet = false;
}

}
}
}
}

