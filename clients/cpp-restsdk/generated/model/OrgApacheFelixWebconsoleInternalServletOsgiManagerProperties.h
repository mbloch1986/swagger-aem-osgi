/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties
    : public ModelBase
{
public:
    OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties();
    virtual ~OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getManagerRoot() const;
    bool managerRootIsSet() const;
    void unsetManager_root();
    void setManagerRoot(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getHttpServiceFilter() const;
    bool httpServiceFilterIsSet() const;
    void unsetHttp_service_filter();
    void setHttpServiceFilter(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDefaultRender() const;
    bool defaultRenderIsSet() const;
    void unsetDefault_render();
    void setDefaultRender(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRealm() const;
    bool realmIsSet() const;
    void unsetRealm();
    void setRealm(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getUsername() const;
    bool usernameIsSet() const;
    void unsetUsername();
    void setUsername(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPassword() const;
    bool passwordIsSet() const;
    void unsetPassword();
    void setPassword(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getCategory() const;
    bool categoryIsSet() const;
    void unsetCategory();
    void setCategory(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getLocale() const;
    bool localeIsSet() const;
    void unsetLocale();
    void setLocale(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getLoglevel() const;
    bool loglevelIsSet() const;
    void unsetLoglevel();
    void setLoglevel(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getPlugins() const;
    bool pluginsIsSet() const;
    void unsetPlugins();
    void setPlugins(std::shared_ptr<ConfigNodePropertyDropDown> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Manager_root;
    bool m_Manager_rootIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Http_service_filter;
    bool m_Http_service_filterIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Default_render;
    bool m_Default_renderIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Realm;
    bool m_RealmIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Username;
    bool m_UsernameIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Password;
    bool m_PasswordIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Category;
    bool m_CategoryIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Locale;
    bool m_LocaleIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Loglevel;
    bool m_LoglevelIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Plugins;
    bool m_PluginsIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties_H_ */
