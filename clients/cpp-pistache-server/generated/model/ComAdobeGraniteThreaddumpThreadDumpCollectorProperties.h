/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComAdobeGraniteThreaddumpThreadDumpCollectorProperties.h
 *
 * 
 */

#ifndef ComAdobeGraniteThreaddumpThreadDumpCollectorProperties_H_
#define ComAdobeGraniteThreaddumpThreadDumpCollectorProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteThreaddumpThreadDumpCollectorProperties
    : public ModelBase
{
public:
    ComAdobeGraniteThreaddumpThreadDumpCollectorProperties();
    virtual ~ComAdobeGraniteThreaddumpThreadDumpCollectorProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComAdobeGraniteThreaddumpThreadDumpCollectorProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getSchedulerPeriod() const;
    void setSchedulerPeriod(ConfigNodePropertyInteger const& value);
    bool schedulerPeriodIsSet() const;
    void unsetScheduler_period();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyDropDown getSchedulerRunOn() const;
    void setSchedulerRunOn(ConfigNodePropertyDropDown const& value);
    bool schedulerRunOnIsSet() const;
    void unsetScheduler_runOn();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getGraniteThreaddumpEnabled() const;
    void setGraniteThreaddumpEnabled(ConfigNodePropertyBoolean const& value);
    bool graniteThreaddumpEnabledIsSet() const;
    void unsetGranite_threaddump_enabled();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getGraniteThreaddumpDumpsPerFile() const;
    void setGraniteThreaddumpDumpsPerFile(ConfigNodePropertyInteger const& value);
    bool graniteThreaddumpDumpsPerFileIsSet() const;
    void unsetGranite_threaddump_dumpsPerFile();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getGraniteThreaddumpEnableGzipCompression() const;
    void setGraniteThreaddumpEnableGzipCompression(ConfigNodePropertyBoolean const& value);
    bool graniteThreaddumpEnableGzipCompressionIsSet() const;
    void unsetGranite_threaddump_enableGzipCompression();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getGraniteThreaddumpEnableDirectoriesCompression() const;
    void setGraniteThreaddumpEnableDirectoriesCompression(ConfigNodePropertyBoolean const& value);
    bool graniteThreaddumpEnableDirectoriesCompressionIsSet() const;
    void unsetGranite_threaddump_enableDirectoriesCompression();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getGraniteThreaddumpEnableJStack() const;
    void setGraniteThreaddumpEnableJStack(ConfigNodePropertyBoolean const& value);
    bool graniteThreaddumpEnableJStackIsSet() const;
    void unsetGranite_threaddump_enableJStack();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getGraniteThreaddumpMaxBackupDays() const;
    void setGraniteThreaddumpMaxBackupDays(ConfigNodePropertyInteger const& value);
    bool graniteThreaddumpMaxBackupDaysIsSet() const;
    void unsetGranite_threaddump_maxBackupDays();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getGraniteThreaddumpBackupCleanTrigger() const;
    void setGraniteThreaddumpBackupCleanTrigger(ConfigNodePropertyString const& value);
    bool graniteThreaddumpBackupCleanTriggerIsSet() const;
    void unsetGranite_threaddump_backupCleanTrigger();

protected:
    ConfigNodePropertyInteger m_Scheduler_period;
    bool m_Scheduler_periodIsSet;
    ConfigNodePropertyDropDown m_Scheduler_runOn;
    bool m_Scheduler_runOnIsSet;
    ConfigNodePropertyBoolean m_Granite_threaddump_enabled;
    bool m_Granite_threaddump_enabledIsSet;
    ConfigNodePropertyInteger m_Granite_threaddump_dumpsPerFile;
    bool m_Granite_threaddump_dumpsPerFileIsSet;
    ConfigNodePropertyBoolean m_Granite_threaddump_enableGzipCompression;
    bool m_Granite_threaddump_enableGzipCompressionIsSet;
    ConfigNodePropertyBoolean m_Granite_threaddump_enableDirectoriesCompression;
    bool m_Granite_threaddump_enableDirectoriesCompressionIsSet;
    ConfigNodePropertyBoolean m_Granite_threaddump_enableJStack;
    bool m_Granite_threaddump_enableJStackIsSet;
    ConfigNodePropertyInteger m_Granite_threaddump_maxBackupDays;
    bool m_Granite_threaddump_maxBackupDaysIsSet;
    ConfigNodePropertyString m_Granite_threaddump_backupCleanTrigger;
    bool m_Granite_threaddump_backupCleanTriggerIsSet;
};

}
}
}
}

#endif /* ComAdobeGraniteThreaddumpThreadDumpCollectorProperties_H_ */
