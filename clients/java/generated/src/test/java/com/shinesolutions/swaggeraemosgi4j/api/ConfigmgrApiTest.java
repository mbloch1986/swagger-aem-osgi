/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.shinesolutions.swaggeraemosgi4j.api;

import com.shinesolutions.swaggeraemosgi4j.ApiException;
import com.shinesolutions.swaggeraemosgi4j.model.AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo;
import com.shinesolutions.swaggeraemosgi4j.model.AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurationInfo;
import com.shinesolutions.swaggeraemosgi4j.model.AnalyticsComponentQueryCacheServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ApacheSlingHealthCheckResultHTMLSerializerInfo;
import java.math.BigDecimal;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeAemTransactionCoreImplTransactionRecorderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqAccountApiAccountManagementServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqAccountImplAccountManagementServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqAddressImplLocationLocationListServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqAuditPurgeDamInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqAuditPurgePagesInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqAuditPurgeReplicationInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqCdnRewriterImplCDNRewriterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqCommerceImplAssetStaticImageHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqCommerceImplAssetVideoHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqCommercePimImplPageEventListenerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqContentinsightImplServletsReportingServicesProxyServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqDamCfmImplComponentComponentConfigImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqDamCfmImplConfFeatureConfigImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqDamDmProcessImagePTiffManagerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqDamS7imagingImplIsImageServerComponentInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqDeserfwImplDeserializationFirewallImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqDtmImplServiceDTMWebServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqDtmImplServletsDTMDeployHookServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqDtmReactorImplServiceWebServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqHcContentPackagesHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqHistoryImplHistoryRequestFilterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqHistoryImplHistoryServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqProjectsImplServletProjectImageServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqProjectsPurgeSchedulerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqScheduledExporterImplScheduledExporterImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqScreensDeviceImplDeviceServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqScreensImplScreensChannelPostProcessorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialAccountverificationImplAccountManagementConfigImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponentFactoryImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamComponentFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtensionInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySuppressorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreamProviderFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmentInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCalendarServletsTimeZoneServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventActivitySuppressorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperationServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialComponentListProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPostsInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadsInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitsConfigImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmentCreationServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLearningPathModelOperationServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResourceModelOperationServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGetServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperationsServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponentFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialGroupImplGroupServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileOperationServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOperationServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponentFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialComponentFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponentFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSocialComponentFactoryV2Info;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialNotificationsImplMentionsRouterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialNotificationsImplNotificationsRouterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportImporterServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportManagementServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSocialComponentFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialScoringImplScoringEventListenerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialSrpImplSocialSolrConnectorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialSyncImplDiffChangesObserverInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialSyncImplUserSyncListenerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlacklistServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqSocialUserImplTransportHttpToPublisherInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactoryAmendedInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeFormsCommonServiceImplDefaultDataProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeFormsCommonServletTempCleanUpTaskInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAcpPlatformPlatformServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthImsImplIMSProviderImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthImsInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthOauthAccesstokenProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthOauthImplGithubProviderImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthOauthImplGraniteProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthOauthProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteCompatrouterImplRoutingConfigInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingStrategyInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteContexthubImplContextHubImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteCorsImplCORSPolicyImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteCsrfImplCSRFFilterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteCsrfImplCSRFServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSecretProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteDistributionCoreImplDistributionToReplicationEventTransformerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicationAgentProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteDistributionCoreImplReplicationDistributionTransportHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistributionTransportSecretProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteFragsImplRandomFeatureInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteHttpcacheFileFileCacheStoreInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteInfocollectorInfoCollectorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteLicenseImplLicenseCheckFilterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteLoggingImplLogAnalyserImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteMonitoringImplScriptConfigImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTransporterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteOptoutImplOptOutServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteRepositoryImplCommitStatsConfigInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteRepositoryServiceUserConfigurationInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteRestImplServletDefaultGETServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteSecurityUserUserPropertiesServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteThreaddumpThreadDumpCollectorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslationServiceFactoryImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteWorkflowCoreJobJobHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteWorkflowCorePayloadMapCacheInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteWorkflowCoreWorkflowConfigInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeGraniteWorkflowPurgeSchedulerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeOctopusNcommBootstrapInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCommonsHttpclientInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqAuthImplCugCugSupportImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqAuthImplLoginSelectorHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqCommonsImplExternalizerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqCommonsServletsRootMappingServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqContentsyncImplContentSyncManagerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCommonsHandlerStandardImageHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCommonsUtilImplAssetCacheImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplAssetMoveListenerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplDamChangeEventListenerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplDamEventPurgeServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplDamEventRecorderImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplEventDamEventAuditListenerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplExpiryNotificationJobImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatureFlagInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplGfxCommonsGfxRendererInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplHandlerJpegHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProviderServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProviderServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplLightboxLightboxServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplMissingMetadataNotificationJobInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailProcessInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplProcessTextExtractionProcessInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplRenditionMakerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplReportsReportExportServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplReportsReportPurgeServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplServletAssetDownloadServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplServletAssetStatusServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplServletAssetXMPSearchServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplServletBatchMetadataServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplServletBinaryProviderServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplServletCollectionServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplServletCollectionsServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplServletCompanionServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplServletCreateAssetServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplServletDamContentDispositionFilterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplServletGuidLookupFilterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplServletHealthCheckServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplServletMetadataGetServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplServletResourceCollectionServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreImplUnzipUnzipConfigInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreProcessExtractMetadataProcessInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamCoreProcessMetadataProcessorProcessInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamHandlerFfmpegLocatorImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamHandlerStandardPdfPdfHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamHandlerStandardPsPostScriptHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamHandlerStandardPsdPsdHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamIdsImplIDSJobProcessorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamIdsImplIDSPoolManagerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamInddImplServletSnippetCreationServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamInddProcessINDDMediaExtractProcessInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProcessInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEventListenerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamScene7ImplScene7APIClientImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamScene7ImplScene7UploadServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamStockIntegrationImplConfigurationStockConfigurationImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqDamVideoImplServletVideoTestServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqExtwidgetServletsImageSpriteServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqImageInternalFontFontHelperInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqJcrclustersupportClusterStartLevelControllerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqMailerDefaultMailServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqMailerImplCqMailingServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqMcmCampaignImplIntegrationConfigImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqMcmImplMCMConfigurationInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponentTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroughComponentTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqNotificationImplNotificationServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqPollingImporterImplManagedPollConfigImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqPollingImporterImplManagedPollingImporterImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqPollingImporterImplPollingImporterImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqReplicationAuditReplicationEventListenerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqReplicationContentStaticContentBuilderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqReplicationImplAgentManagerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqReplicationImplContentDurboDurboImportConfigurationProviderServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqReplicationImplReplicationReceiverImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqReplicationImplReplicatorImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqReplicationImplReverseReplicatorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqReplicationImplTransportHttpInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqReportingImplCacheCacheImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqReportingImplConfigServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqReportingImplRLogAnalyzerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqRewriterProcessorImplHtmlParserFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqSearchImplBuilderQueryBuilderImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqSecurityACLSetupInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqStatisticsImplStatisticsServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqTaggingImplJcrTagManagerFactoryImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqTaggingImplTagGarbageCollectorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplCommandsWCMCommandServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplEventPageEventAuditListenerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplEventPagePostProcessorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplEventTemplatePostProcessorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplLanguageManagerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorViewHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplServletsFindReplaceServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplServletsReferenceSearchServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplServletsThumbnailServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplVersionManagerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplVersionPurgeTaskInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplWCMDebugFilterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreImplWarpTimeWarpFilterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreMvtMVTStatisticsImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreStatsPageViewStatisticsImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmCoreWCMRequestFilterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterDesignPackageImporterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponentTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponentTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponentTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponentTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponentTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmFoundationFormsImplFormChooserServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmFoundationFormsImplMailServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmFoundationImplHTTPAuthHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmFoundationImplPageImpressionsTrackerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmFoundationImplPageRedirectServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmMsmImplRolloutManagerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmMsmImplServletsAuditLogServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmNotificationEmailImplEmailChannelInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmNotificationImplNotificationManagerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmScriptingImplBVPManagerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmUndoUndoConfigInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWidgetImplHtmlLibraryManagerImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWidgetImplWidgetExtensionProviderImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWorkflowImplEmailEMailNotificationServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.ComDayCrxSecurityTokenImplTokenCleanupTaskInfo;
import com.shinesolutions.swaggeraemosgi4j.model.GuideLocalizationServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.MessagingUserComponentFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheAriesJmxFrameworkStateConfigInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheFelixEventadminImplEventAdminInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheFelixHttpInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheFelixHttpSslfilterSslFilterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheFelixJaasConfigurationFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheFelixJaasConfigurationSpiInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheFelixScrScrServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheFelixSystemreadyImplComponentsCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheFelixSystemreadyImplServicesCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheFelixSystemreadySystemReadyMonitorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageConfiguratorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheHttpProxyconfiguratorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePresetInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacheServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerConfigurationProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersObserverServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProviderServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfigurationProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProviderServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigurationImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentityProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigurationImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurationImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrationInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDefaultSyncHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExternalLoginModuleFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrincipalExternalPrincipalConfigurationInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfigurationInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcludeImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableActionProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingAuthCoreImplLogoutServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingCaconfigImplConfigurationResolverImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStrategyInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStrategyInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOverrideProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingCaconfigManagementImplConfigurationManagementSettingsImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourceResolvingStrategyInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingCommonsLogLogManagerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingCommonsMetricsInternalLogReporterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDatasourceDataSourceFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDiscoveryOakConfigInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAuthorizationStrategyFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionPackagingImplExporterAgentDistributionPackageExporterFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionPackagingImplExporterLocalDistributionPackageExporterFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionPackagingImplExporterRemoteDistributionPackageExporterFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionPackagingImplImporterLocalDistributionPackageImporterFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionPackagingImplImporterRemoteDistributionPackageImporterFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionPackagingImplImporterRepositoryDistributionPackageImporterFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionResourcesImplDistributionConfigurationResourceProviderFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionResourcesImplDistributionServiceResourceProviderFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionSerializationImplDistributionPackageBuilderFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionSerializationImplVltVaultDistributionPackageBuilderFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionTransportImplUserCredentialsDistributionTransportSecretProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionTriggerImplDistributionEventDistributeDistributionTriggerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributionTriggerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTriggerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionTriggerImplResourceEventDistributionTriggerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggerFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingEngineImplLogRequestLoggerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingEngineImplLogRequestLoggerServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingEngineImplSlingMainServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingEngineParametersInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingEventImplEventingThreadPoolInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingEventImplJobsDefaultJobManagerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingEventImplJobsJobConsumerManagerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingEventJobsQueueConfigurationInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWebConsoleSecurityProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingFeatureflagsFeatureInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingHapiImplHApiUtilImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingHcCoreImplCompositeHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingHcCoreImplScriptableHealthCheckInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingI18nImplI18NFilterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingI18nImplJcrResourceBundleProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingJcrRepoinitRepositoryInitializerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServiceInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingJmxProviderImplJMXResourceProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingModelsImplModelAdapterFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingResourcemergerPickerOverridingInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingScriptingCoreImplScriptCacheImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProviderInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingSecurityImplContentDispositionFilterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingSecurityImplReferrerFilterInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingServletsGetDefaultGetServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingServletsPostImplSlingPostServletInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingServletsResolverSlingServletResolverInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingStartupfilterImplStartupFilterImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingTenantInternalTenantProviderImplInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingTracerInternalLogTracerInfo;
import com.shinesolutions.swaggeraemosgi4j.model.OrgApacheSlingXssImplXSSFilterImplInfo;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConfigmgrApi
 */
@Ignore
public class ConfigmgrApiTest {

    private final ConfigmgrApi api = new ConfigmgrApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adaptiveFormAndInteractiveCommunicationWebChannelConfigurationTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean showPlaceholder = null;
        Integer maximumCacheEntries = null;
        String afScriptingCompatversion = null;
        Boolean makeFileNameUnique = null;
        Boolean generatingCompliantData = null;
        AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo response = api.adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(post, apply, delete, action, $location, propertylist, showPlaceholder, maximumCacheEntries, afScriptingCompatversion, makeFileNameUnique, generatingCompliantData);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurationTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fontList = null;
        AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurationInfo response = api.adaptiveFormAndInteractiveCommunicationWebChannelThemeConfiguration(post, apply, delete, action, $location, propertylist, fontList);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyticsComponentQueryCacheServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqAnalyticsComponentQueryCacheSize = null;
        AnalyticsComponentQueryCacheServiceInfo response = api.analyticsComponentQueryCacheService(post, apply, delete, action, $location, propertylist, cqAnalyticsComponentQueryCacheSize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apacheSlingHealthCheckResultHTMLSerializerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String styleString = null;
        ApacheSlingHealthCheckResultHTMLSerializerInfo response = api.apacheSlingHealthCheckResultHTMLSerializer(post, apply, delete, action, $location, propertylist, styleString);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean formsManagerConfigIncludeOOTBTemplates = null;
        Boolean formsManagerConfigIncludeDeprecatedTemplates = null;
        ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo response = api.comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(post, apply, delete, action, $location, propertylist, formsManagerConfigIncludeOOTBTemplates, formsManagerConfigIncludeDeprecatedTemplates);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeAemTransactionCoreImplTransactionRecorderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean isTransactionRecordingEnabled = null;
        ComAdobeAemTransactionCoreImplTransactionRecorderInfo response = api.comAdobeAemTransactionCoreImplTransactionRecorder(post, apply, delete, action, $location, propertylist, isTransactionRecordingEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo response = api.comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo response = api.comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> preUpgradeMaintenanceTasks = null;
        List<String> preUpgradeHcTags = null;
        ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo response = api.comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(post, apply, delete, action, $location, propertylist, preUpgradeMaintenanceTasks, preUpgradeHcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String rootPath = null;
        Boolean fixInconsistencies = null;
        ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo response = api.comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(post, apply, delete, action, $location, propertylist, rootPath, fixInconsistencies);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqAccountApiAccountManagementServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqAccountmanagerTokenValidityPeriod = null;
        String cqAccountmanagerConfigRequestnewaccountMail = null;
        String cqAccountmanagerConfigRequestnewpwdMail = null;
        ComAdobeCqAccountApiAccountManagementServiceInfo response = api.comAdobeCqAccountApiAccountManagementService(post, apply, delete, action, $location, propertylist, cqAccountmanagerTokenValidityPeriod, cqAccountmanagerConfigRequestnewaccountMail, cqAccountmanagerConfigRequestnewpwdMail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqAccountImplAccountManagementServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cqAccountmanagerConfigInformnewaccountMail = null;
        String cqAccountmanagerConfigInformnewpwdMail = null;
        ComAdobeCqAccountImplAccountManagementServletInfo response = api.comAdobeCqAccountImplAccountManagementServlet(post, apply, delete, action, $location, propertylist, cqAccountmanagerConfigInformnewaccountMail, cqAccountmanagerConfigInformnewpwdMail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqAddressImplLocationLocationListServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqAddressLocationDefaultMaxResults = null;
        ComAdobeCqAddressImplLocationLocationListServletInfo response = api.comAdobeCqAddressImplLocationLocationListServlet(post, apply, delete, action, $location, propertylist, cqAddressLocationDefaultMaxResults);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqAuditPurgeDamTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String auditlogRuleName = null;
        String auditlogRuleContentpath = null;
        Integer auditlogRuleMinimumage = null;
        String auditlogRuleTypes = null;
        ComAdobeCqAuditPurgeDamInfo response = api.comAdobeCqAuditPurgeDam(post, apply, delete, action, $location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqAuditPurgePagesTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String auditlogRuleName = null;
        String auditlogRuleContentpath = null;
        Integer auditlogRuleMinimumage = null;
        String auditlogRuleTypes = null;
        ComAdobeCqAuditPurgePagesInfo response = api.comAdobeCqAuditPurgePages(post, apply, delete, action, $location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqAuditPurgeReplicationTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String auditlogRuleName = null;
        String auditlogRuleContentpath = null;
        Integer auditlogRuleMinimumage = null;
        String auditlogRuleTypes = null;
        ComAdobeCqAuditPurgeReplicationInfo response = api.comAdobeCqAuditPurgeReplication(post, apply, delete, action, $location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCdnRewriterImplAWSCloudFrontRewriterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String keypairId = null;
        String keypairAlias = null;
        List<String> cdnrewriterAttributes = null;
        String cdnRewriterDistributionDomain = null;
        ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo response = api.comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(post, apply, delete, action, $location, propertylist, serviceRanking, keypairId, keypairAlias, cdnrewriterAttributes, cdnRewriterDistributionDomain);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCdnRewriterImplCDNConfigServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cdnConfigDistributionDomain = null;
        Boolean cdnConfigEnableRewriting = null;
        List<String> cdnConfigPathPrefixes = null;
        Integer cdnConfigCdnttl = null;
        String cdnConfigApplicationProtocol = null;
        ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo response = api.comAdobeCqCdnRewriterImplCDNConfigServiceImpl(post, apply, delete, action, $location, propertylist, cdnConfigDistributionDomain, cdnConfigEnableRewriting, cdnConfigPathPrefixes, cdnConfigCdnttl, cdnConfigApplicationProtocol);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCdnRewriterImplCDNRewriterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        List<String> cdnrewriterAttributes = null;
        String cdnRewriterDistributionDomain = null;
        ComAdobeCqCdnRewriterImplCDNRewriterInfo response = api.comAdobeCqCdnRewriterImplCDNRewriter(post, apply, delete, action, $location, propertylist, serviceRanking, cdnrewriterAttributes, cdnRewriterDistributionDomain);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> flushAgents = null;
        ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandlerInfo response = api.comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandler(post, apply, delete, action, $location, propertylist, flushAgents);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommerceImplAssetDynamicImageHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqCommerceAssetHandlerActive = null;
        String cqCommerceAssetHandlerName = null;
        ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo response = api.comAdobeCqCommerceImplAssetDynamicImageHandler(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cqCommerceAssetHandlerFallback = null;
        ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo response = api.comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerFallback);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommerceImplAssetStaticImageHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqCommerceAssetHandlerActive = null;
        String cqCommerceAssetHandlerName = null;
        ComAdobeCqCommerceImplAssetStaticImageHandlerInfo response = api.comAdobeCqCommerceImplAssetStaticImageHandler(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommerceImplAssetVideoHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqCommerceAssetHandlerActive = null;
        String cqCommerceAssetHandlerName = null;
        ComAdobeCqCommerceImplAssetVideoHandlerInfo response = api.comAdobeCqCommerceImplAssetVideoHandler(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommerceImplPromotionPromotionManagerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cqCommercePromotionRoot = null;
        ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo response = api.comAdobeCqCommerceImplPromotionPromotionManagerImpl(post, apply, delete, action, $location, propertylist, cqCommercePromotionRoot);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqCommerceCataloggeneratorBucketsize = null;
        String cqCommerceCataloggeneratorBucketname = null;
        List<String> cqCommerceCataloggeneratorExcludedtemplateproperties = null;
        ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo response = api.comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(post, apply, delete, action, $location, propertylist, cqCommerceCataloggeneratorBucketsize, cqCommerceCataloggeneratorBucketname, cqCommerceCataloggeneratorExcludedtemplateproperties);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommercePimImplPageEventListenerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqCommercePageeventlistenerEnabled = null;
        ComAdobeCqCommercePimImplPageEventListenerInfo response = api.comAdobeCqCommercePimImplPageEventListener(post, apply, delete, action, $location, propertylist, cqCommercePageeventlistenerEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqCommercePimImplProductfeedProductFeedServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String feedGeneratorAlgorithm = null;
        ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo response = api.comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(post, apply, delete, action, $location, propertylist, feedGeneratorAlgorithm);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqContentinsightImplReportingServicesSettingsProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String reportingservicesUrl = null;
        ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo response = api.comAdobeCqContentinsightImplReportingServicesSettingsProvider(post, apply, delete, action, $location, propertylist, reportingservicesUrl);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqContentinsightImplServletsBrightEdgeProxyServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String brightedgeUrl = null;
        ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo response = api.comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(post, apply, delete, action, $location, propertylist, brightedgeUrl);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqContentinsightImplServletsReportingServicesProxyServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> reportingservicesProxyWhitelist = null;
        ComAdobeCqContentinsightImplServletsReportingServicesProxyServletInfo response = api.comAdobeCqContentinsightImplServletsReportingServicesProxyServlet(post, apply, delete, action, $location, propertylist, reportingservicesProxyWhitelist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamCfmImplComponentComponentConfigImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String damCfmComponentResourceType = null;
        String damCfmComponentFileReferenceProp = null;
        String damCfmComponentElementsProp = null;
        String damCfmComponentVariationProp = null;
        ComAdobeCqDamCfmImplComponentComponentConfigImplInfo response = api.comAdobeCqDamCfmImplComponentComponentConfigImpl(post, apply, delete, action, $location, propertylist, damCfmComponentResourceType, damCfmComponentFileReferenceProp, damCfmComponentElementsProp, damCfmComponentVariationProp);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamCfmImplConfFeatureConfigImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> damCfmResourceTypes = null;
        List<String> damCfmReferenceProperties = null;
        ComAdobeCqDamCfmImplConfFeatureConfigImplInfo response = api.comAdobeCqDamCfmImplConfFeatureConfigImpl(post, apply, delete, action, $location, propertylist, damCfmResourceTypes, damCfmReferenceProperties);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamCfmImplContentRewriterAssetProcessorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pipelineType = null;
        ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo response = api.comAdobeCqDamCfmImplContentRewriterAssetProcessor(post, apply, delete, action, $location, propertylist, pipelineType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamCfmImplContentRewriterParRangeFilterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pipelineType = null;
        ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo response = api.comAdobeCqDamCfmImplContentRewriterParRangeFilter(post, apply, delete, action, $location, propertylist, pipelineType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamCfmImplContentRewriterPayloadFilterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pipelineType = null;
        ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo response = api.comAdobeCqDamCfmImplContentRewriterPayloadFilter(post, apply, delete, action, $location, propertylist, pipelineType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamDmProcessImagePTiffManagerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxMemory = null;
        ComAdobeCqDamDmProcessImagePTiffManagerImplInfo response = api.comAdobeCqDamDmProcessImagePTiffManagerImpl(post, apply, delete, action, $location, propertylist, maxMemory);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean dmreplicateonmodifyEnabled = null;
        Boolean dmreplicateonmodifyForcesyncdeletes = null;
        ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo response = api.comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(post, apply, delete, action, $location, propertylist, dmreplicateonmodifyEnabled, dmreplicateonmodifyForcesyncdeletes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamMacSyncHelperImplMACSyncClientImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer comAdobeDamMacSyncClientSoTimeout = null;
        ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo response = api.comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(post, apply, delete, action, $location, propertylist, comAdobeDamMacSyncClientSoTimeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamMacSyncImplDAMSyncServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths = null;
        Boolean comAdobeCqDamMacSyncDamsyncserviceSyncRenditions = null;
        Integer comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs = null;
        String comAdobeCqDamMacSyncDamsyncservicePlatform = null;
        ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo response = api.comAdobeCqDamMacSyncImplDAMSyncServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths, comAdobeCqDamMacSyncDamsyncserviceSyncRenditions, comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs, comAdobeCqDamMacSyncDamsyncservicePlatform);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamProcessorNuiImplNuiAssetProcessorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean nuiEnabled = null;
        String nuiServiceUrl = null;
        String nuiApiKey = null;
        ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo response = api.comAdobeCqDamProcessorNuiImplNuiAssetProcessor(post, apply, delete, action, $location, propertylist, nuiEnabled, nuiServiceUrl, nuiApiKey);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamS7imagingImplIsImageServerComponentTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String tcpPort = null;
        Boolean allowRemoteAccess = null;
        String maxRenderRgnPixels = null;
        String maxMessageSize = null;
        Integer randomAccessUrlTimeout = null;
        Integer workerThreads = null;
        ComAdobeCqDamS7imagingImplIsImageServerComponentInfo response = api.comAdobeCqDamS7imagingImplIsImageServerComponent(post, apply, delete, action, $location, propertylist, tcpPort, allowRemoteAccess, maxRenderRgnPixels, maxMessageSize, randomAccessUrlTimeout, workerThreads);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamS7imagingImplPsPlatformServerServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cacheEnable = null;
        List<String> cacheRootPaths = null;
        Integer cacheMaxSize = null;
        Integer cacheMaxEntries = null;
        ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo response = api.comAdobeCqDamS7imagingImplPsPlatformServerServlet(post, apply, delete, action, $location, propertylist, cacheEnable, cacheRootPaths, cacheMaxSize, cacheMaxEntries);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamWebdavImplIoAssetIOHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String pathPrefix = null;
        Boolean createVersion = null;
        ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo response = api.comAdobeCqDamWebdavImplIoAssetIOHandler(post, apply, delete, action, $location, propertylist, serviceRanking, pathPrefix, createVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamWebdavVersionLinkingEnable = null;
        Integer cqDamWebdavVersionLinkingSchedulerPeriod = null;
        Integer cqDamWebdavVersionLinkingStagingTimeout = null;
        ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo response = api.comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(post, apply, delete, action, $location, propertylist, cqDamWebdavVersionLinkingEnable, cqDamWebdavVersionLinkingSchedulerPeriod, cqDamWebdavVersionLinkingStagingTimeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDamWebdavImplIoSpecialFilesHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters = null;
        ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo response = api.comAdobeCqDamWebdavImplIoSpecialFilesHandler(post, apply, delete, action, $location, propertylist, comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDeserfwImplDeserializationFirewallImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> firewallDeserializationWhitelist = null;
        List<String> firewallDeserializationBlacklist = null;
        String firewallDeserializationDiagnostics = null;
        ComAdobeCqDeserfwImplDeserializationFirewallImplInfo response = api.comAdobeCqDeserfwImplDeserializationFirewallImpl(post, apply, delete, action, $location, propertylist, firewallDeserializationWhitelist, firewallDeserializationBlacklist, firewallDeserializationDiagnostics);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDtmImplServiceDTMWebServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer connectionTimeout = null;
        Integer socketTimeout = null;
        ComAdobeCqDtmImplServiceDTMWebServiceImplInfo response = api.comAdobeCqDtmImplServiceDTMWebServiceImpl(post, apply, delete, action, $location, propertylist, connectionTimeout, socketTimeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDtmImplServletsDTMDeployHookServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> dtmStagingIpWhitelist = null;
        List<String> dtmProductionIpWhitelist = null;
        ComAdobeCqDtmImplServletsDTMDeployHookServletInfo response = api.comAdobeCqDtmImplServletsDTMDeployHookServlet(post, apply, delete, action, $location, propertylist, dtmStagingIpWhitelist, dtmProductionIpWhitelist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqDtmReactorImplServiceWebServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String endpointUri = null;
        Integer connectionTimeout = null;
        Integer socketTimeout = null;
        ComAdobeCqDtmReactorImplServiceWebServiceImplInfo response = api.comAdobeCqDtmReactorImplServiceWebServiceImpl(post, apply, delete, action, $location, propertylist, endpointUri, connectionTimeout, socketTimeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqExperiencelogImplExperienceLogConfigServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        List<String> disabledForGroups = null;
        ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo response = api.comAdobeCqExperiencelogImplExperienceLogConfigServlet(post, apply, delete, action, $location, propertylist, enabled, disabledForGroups);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqHcContentPackagesHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        List<String> packageNames = null;
        ComAdobeCqHcContentPackagesHealthCheckInfo response = api.comAdobeCqHcContentPackagesHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, packageNames);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqHistoryImplHistoryRequestFilterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> historyRequestFilterExcludedSelectors = null;
        List<String> historyRequestFilterExcludedExtensions = null;
        ComAdobeCqHistoryImplHistoryRequestFilterInfo response = api.comAdobeCqHistoryImplHistoryRequestFilter(post, apply, delete, action, $location, propertylist, historyRequestFilterExcludedSelectors, historyRequestFilterExcludedExtensions);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqHistoryImplHistoryServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> historyServiceResourceTypes = null;
        List<String> historyServicePathFilter = null;
        ComAdobeCqHistoryImplHistoryServiceImplInfo response = api.comAdobeCqHistoryImplHistoryServiceImpl(post, apply, delete, action, $location, propertylist, historyServiceResourceTypes, historyServicePathFilter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqInboxImplTypeproviderItemTypeProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> inboxImplTypeproviderRegistrypaths = null;
        List<String> inboxImplTypeproviderLegacypaths = null;
        String inboxImplTypeproviderDefaulturlFailureitem = null;
        String inboxImplTypeproviderDefaulturlWorkitem = null;
        String inboxImplTypeproviderDefaulturlTask = null;
        ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo response = api.comAdobeCqInboxImplTypeproviderItemTypeProvider(post, apply, delete, action, $location, propertylist, inboxImplTypeproviderRegistrypaths, inboxImplTypeproviderLegacypaths, inboxImplTypeproviderDefaulturlFailureitem, inboxImplTypeproviderDefaulturlWorkitem, inboxImplTypeproviderDefaulturlTask);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqProjectsImplServletProjectImageServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String imageQuality = null;
        String imageSupportedResolutions = null;
        ComAdobeCqProjectsImplServletProjectImageServletInfo response = api.comAdobeCqProjectsImplServletProjectImageServlet(post, apply, delete, action, $location, propertylist, imageQuality, imageSupportedResolutions);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqProjectsPurgeSchedulerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String scheduledpurgeName = null;
        Boolean scheduledpurgePurgeActive = null;
        List<String> scheduledpurgeTemplates = null;
        Boolean scheduledpurgePurgeGroups = null;
        Boolean scheduledpurgePurgeAssets = null;
        Boolean scheduledpurgeTerminateRunningWorkflows = null;
        Integer scheduledpurgeDaysold = null;
        Integer scheduledpurgeSaveThreshold = null;
        ComAdobeCqProjectsPurgeSchedulerInfo response = api.comAdobeCqProjectsPurgeScheduler(post, apply, delete, action, $location, propertylist, scheduledpurgeName, scheduledpurgePurgeActive, scheduledpurgeTemplates, scheduledpurgePurgeGroups, scheduledpurgePurgeAssets, scheduledpurgeTerminateRunningWorkflows, scheduledpurgeDaysold, scheduledpurgeSaveThreshold);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScheduledExporterImplScheduledExporterImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> includePaths = null;
        String exporterUser = null;
        ComAdobeCqScheduledExporterImplScheduledExporterImplInfo response = api.comAdobeCqScheduledExporterImplScheduledExporterImpl(post, apply, delete, action, $location, propertylist, includePaths, exporterUser);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String comAdobeCqScreensAnalyticsImplUrl = null;
        String comAdobeCqScreensAnalyticsImplApikey = null;
        String comAdobeCqScreensAnalyticsImplProject = null;
        String comAdobeCqScreensAnalyticsImplEnvironment = null;
        Integer comAdobeCqScreensAnalyticsImplSendFrequency = null;
        ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo response = api.comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqScreensAnalyticsImplUrl, comAdobeCqScreensAnalyticsImplApikey, comAdobeCqScreensAnalyticsImplProject, comAdobeCqScreensAnalyticsImplEnvironment, comAdobeCqScreensAnalyticsImplSendFrequency);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensDeviceImplDeviceServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer comAdobeAemScreensPlayerPingfrequency = null;
        String comAdobeAemScreensDevicePaswordSpecialchars = null;
        Integer comAdobeAemScreensDevicePaswordMinlowercasechars = null;
        Integer comAdobeAemScreensDevicePaswordMinuppercasechars = null;
        Integer comAdobeAemScreensDevicePaswordMinnumberchars = null;
        Integer comAdobeAemScreensDevicePaswordMinspecialchars = null;
        Integer comAdobeAemScreensDevicePaswordMinlength = null;
        ComAdobeCqScreensDeviceImplDeviceServiceInfo response = api.comAdobeCqScreensDeviceImplDeviceService(post, apply, delete, action, $location, propertylist, comAdobeAemScreensPlayerPingfrequency, comAdobeAemScreensDevicePaswordSpecialchars, comAdobeAemScreensDevicePaswordMinlowercasechars, comAdobeAemScreensDevicePaswordMinuppercasechars, comAdobeAemScreensDevicePaswordMinnumberchars, comAdobeAemScreensDevicePaswordMinspecialchars, comAdobeAemScreensDevicePaswordMinlength);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer deviceRegistrationTimeout = null;
        ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo response = api.comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(post, apply, delete, action, $location, propertylist, deviceRegistrationTimeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensImplHandlerChannelsUpdateHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqPagesupdatehandlerImageresourcetypes = null;
        List<String> cqPagesupdatehandlerProductresourcetypes = null;
        List<String> cqPagesupdatehandlerVideoresourcetypes = null;
        List<String> cqPagesupdatehandlerDynamicsequenceresourcetypes = null;
        List<String> cqPagesupdatehandlerPreviewmodepaths = null;
        ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo response = api.comAdobeCqScreensImplHandlerChannelsUpdateHandler(post, apply, delete, action, $location, propertylist, cqPagesupdatehandlerImageresourcetypes, cqPagesupdatehandlerProductresourcetypes, cqPagesupdatehandlerVideoresourcetypes, cqPagesupdatehandlerDynamicsequenceresourcetypes, cqPagesupdatehandlerPreviewmodepaths);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo response = api.comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(post, apply, delete, action, $location, propertylist, schedulerExpression);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensImplRemoteImplDistributedHttpClientImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer comAdobeAemScreensImplRemoteRequestTimeout = null;
        ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo response = api.comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(post, apply, delete, action, $location, propertylist, comAdobeAemScreensImplRemoteRequestTimeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensImplScreensChannelPostProcessorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> screensChannelsPropertiesToRemove = null;
        ComAdobeCqScreensImplScreensChannelPostProcessorInfo response = api.comAdobeCqScreensImplScreensChannelPostProcessor(post, apply, delete, action, $location, propertylist, screensChannelsPropertiesToRemove);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath = null;
        String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency = null;
        Integer comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout = null;
        String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients = null;
        String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver = null;
        Integer comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport = null;
        Boolean comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls = null;
        String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername = null;
        String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword = null;
        ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo response = api.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensMqActivemqImplArtemisJMSProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        Integer globalSize = null;
        Integer maxDiskUsage = null;
        Boolean persistenceEnabled = null;
        Integer threadPoolMaxSize = null;
        Integer scheduledThreadPoolMaxSize = null;
        Integer gracefulShutdownTimeout = null;
        List<String> queues = null;
        List<String> topics = null;
        Integer addressesMaxDeliveryAttempts = null;
        Integer addressesExpiryDelay = null;
        String addressesAddressFullMessagePolicy = null;
        Integer addressesMaxSizeBytes = null;
        Integer addressesPageSizeBytes = null;
        Integer addressesPageCacheMaxSize = null;
        String clusterUser = null;
        String clusterPassword = null;
        Integer clusterCallTimeout = null;
        Integer clusterCallFailoverTimeout = null;
        Integer clusterClientFailureCheckPeriod = null;
        Integer clusterNotificationAttempts = null;
        Integer clusterNotificationInterval = null;
        Integer idCacheSize = null;
        Integer clusterConfirmationWindowSize = null;
        Integer clusterConnectionTtl = null;
        Boolean clusterDuplicateDetection = null;
        Integer clusterInitialConnectAttempts = null;
        Integer clusterMaxRetryInterval = null;
        Integer clusterMinLargeMessageSize = null;
        Integer clusterProducerWindowSize = null;
        Integer clusterReconnectAttempts = null;
        Integer clusterRetryInterval = null;
        BigDecimal clusterRetryIntervalMultiplier = null;
        ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo response = api.comAdobeCqScreensMqActivemqImplArtemisJMSProvider(post, apply, delete, action, $location, propertylist, serviceRanking, globalSize, maxDiskUsage, persistenceEnabled, threadPoolMaxSize, scheduledThreadPoolMaxSize, gracefulShutdownTimeout, queues, topics, addressesMaxDeliveryAttempts, addressesExpiryDelay, addressesAddressFullMessagePolicy, addressesMaxSizeBytes, addressesPageSizeBytes, addressesPageCacheMaxSize, clusterUser, clusterPassword, clusterCallTimeout, clusterCallFailoverTimeout, clusterClientFailureCheckPeriod, clusterNotificationAttempts, clusterNotificationInterval, idCacheSize, clusterConfirmationWindowSize, clusterConnectionTtl, clusterDuplicateDetection, clusterInitialConnectAttempts, clusterMaxRetryInterval, clusterMinLargeMessageSize, clusterProducerWindowSize, clusterReconnectAttempts, clusterRetryInterval, clusterRetryIntervalMultiplier);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath = null;
        String comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency = null;
        ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo response = api.comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean disableSmartSync = null;
        ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo response = api.comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(post, apply, delete, action, $location, propertylist, disableSmartSync);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqScreensSegmentationImplSegmentationFeatureFlagTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enableDataTriggeredContent = null;
        ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo response = api.comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(post, apply, delete, action, $location, propertylist, enableDataTriggeredContent);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCheckInfo response = api.comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo response = api.comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        String dispatcherAddress = null;
        List<String> dispatcherFilterAllowed = null;
        List<String> dispatcherFilterBlocked = null;
        ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo response = api.comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, dispatcherAddress, dispatcherFilterAllowed, dispatcherFilterBlocked);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo response = api.comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        String webserverAddress = null;
        ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo response = api.comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, webserverAddress);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialAccountverificationImplAccountManagementConfigImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enable = null;
        Integer ttl1 = null;
        Integer ttl2 = null;
        ComAdobeCqSocialAccountverificationImplAccountManagementConfigImplInfo response = api.comAdobeCqSocialAccountverificationImplAccountManagementConfigImpl(post, apply, delete, action, $location, propertylist, enable, ttl1, ttl2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialActivitystreamsClientImplSocialActivityComponentFactoryImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priority = null;
        ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponentFactoryImplInfo response = api.comAdobeCqSocialActivitystreamsClientImplSocialActivityComponentFactoryImpl(post, apply, delete, action, $location, propertylist, priority);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamComponentFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priority = null;
        ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamComponentFactoryInfo response = api.comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamComponentFactory(post, apply, delete, action, $location, propertylist, priority);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
        String eventFilter = null;
        ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo response = api.comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialActivitystreamsListenerImplModerationEventExtensionTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean accepted = null;
        Integer ranked = null;
        ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtensionInfo response = api.comAdobeCqSocialActivitystreamsListenerImplModerationEventExtension(post, apply, delete, action, $location, propertylist, accepted, ranked);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySuppressorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer ranking = null;
        Boolean enable = null;
        ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySuppressorInfo response = api.comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySuppressor(post, apply, delete, action, $location, propertylist, ranking, enable);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreamProviderFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String streamPath = null;
        String streamName = null;
        ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreamProviderFactoryInfo response = api.comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreamProviderFactory(post, apply, delete, action, $location, propertylist, streamPath, streamName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxRetry = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
        ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsImplInfo response = api.comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsImpl(post, apply, delete, action, $location, propertylist, maxRetry, fieldWhitelist, attachmentTypeBlacklist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCalendarClientOperationextensionsEventAttachmentTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String attachmentTypeBlacklist = null;
        Integer extensionOrder = null;
        ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmentInfo response = api.comAdobeCqSocialCalendarClientOperationextensionsEventAttachment(post, apply, delete, action, $location, propertylist, attachmentTypeBlacklist, extensionOrder);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCalendarServletsTimeZoneServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer timezonesExpirytime = null;
        ComAdobeCqSocialCalendarServletsTimeZoneServletInfo response = api.comAdobeCqSocialCalendarServletsTimeZoneServlet(post, apply, delete, action, $location, propertylist, timezonesExpirytime);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventActivitySuppressorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer ranking = null;
        ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventActivitySuppressorInfo response = api.comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventActivitySuppressor(post, apply, delete, action, $location, propertylist, ranking);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
        ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationServiceInfo response = api.comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationService(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperationServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
        ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperationServiceInfo response = api.comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperationService(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialComponentListProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer numUserLimit = null;
        ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialComponentListProviderInfo response = api.comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialComponentListProvider(post, apply, delete, action, $location, propertylist, numUserLimit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPostsTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enableScheduledPostsSearch = null;
        Integer numberOfMinutes = null;
        Integer maxSearchLimit = null;
        ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPostsInfo response = api.comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosts(post, apply, delete, action, $location, propertylist, enableScheduledPostsSearch, numberOfMinutes, maxSearchLimit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsCorsCORSAuthenticationFilterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean corsEnabling = null;
        ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo response = api.comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(post, apply, delete, action, $location, propertylist, corsEnabling);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
        ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo response = api.comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String contextPath = null;
        ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo response = api.comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(post, apply, delete, action, $location, propertylist, contextPath);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
        ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo response = api.comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(post, apply, delete, action, $location, propertylist, eventTopics);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
        ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo response = api.comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String patternTime = null;
        String patternNewline = null;
        String patternDayOfMonth = null;
        String patternMonth = null;
        String patternYear = null;
        String patternDate = null;
        String patternDateTime = null;
        String patternEmail = null;
        ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImplInfo response = api.comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpl(post, apply, delete, action, $location, propertylist, patternTime, patternNewline, patternDayOfMonth, patternMonth, patternYear, patternDate, patternDateTime, patternEmail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String emailName = null;
        Boolean emailCreatePostFromReply = null;
        String emailAddCommentIdTo = null;
        Integer emailSubjectMaximumLength = null;
        String emailReplyToAddress = null;
        String emailReplyToDelimiter = null;
        String emailTrackerIdPrefixInSubject = null;
        String emailTrackerIdPrefixInBody = null;
        Boolean emailAsHTML = null;
        String emailDefaultUserName = null;
        String emailTemplatesRootPath = null;
        ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImplInfo response = api.comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpl(post, apply, delete, action, $location, propertylist, emailName, emailCreatePostFromReply, emailAddCommentIdTo, emailSubjectMaximumLength, emailReplyToAddress, emailReplyToDelimiter, emailTrackerIdPrefixInSubject, emailTrackerIdPrefixInBody, emailAsHTML, emailDefaultUserName, emailTemplatesRootPath);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String connectProtocol = null;
        ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo response = api.comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(post, apply, delete, action, $location, propertylist, connectProtocol);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
        ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo response = api.comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
        ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo response = api.comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
        ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo response = api.comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
        ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo response = api.comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> replyEmailPatterns = null;
        Integer priorityOrder = null;
        ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo response = api.comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(post, apply, delete, action, $location, propertylist, replyEmailPatterns, priorityOrder);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priorityOrder = null;
        List<String> replyEmailPatterns = null;
        ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo response = api.comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadsTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer numberOfDays = null;
        Integer ageOfFile = null;
        ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadsInfo response = api.comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploads(post, apply, delete, action, $location, propertylist, numberOfDays, ageOfFile);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
        String eventFilter = null;
        List<String> verbs = null;
        ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo response = api.comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter, verbs);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitsConfigImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enable = null;
        Integer ugCLimit = null;
        Integer ugcLimitDuration = null;
        List<String> domains = null;
        List<String> toList = null;
        ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitsConfigImplInfo response = api.comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitsConfigImpl(post, apply, delete, action, $location, propertylist, enable, ugCLimit, ugcLimitDuration, domains, toList);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialConnectOauthImplFacebookProviderImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        String oauthCloudConfigRoot = null;
        String providerConfigRoot = null;
        Boolean providerConfigCreateTagsEnabled = null;
        String providerConfigUserFolder = null;
        Boolean providerConfigFacebookFetchFields = null;
        List<String> providerConfigFacebookFields = null;
        Boolean providerConfigRefreshUserdataEnabled = null;
        ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo response = api.comAdobeCqSocialConnectOauthImplFacebookProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthCloudConfigRoot, providerConfigRoot, providerConfigCreateTagsEnabled, providerConfigUserFolder, providerConfigFacebookFetchFields, providerConfigFacebookFields, providerConfigRefreshUserdataEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> path = null;
        Integer serviceRanking = null;
        ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandlerInfo response = api.comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> facebook = null;
        List<String> twitter = null;
        String providerConfigUserFolder = null;
        ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo response = api.comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(post, apply, delete, action, $location, propertylist, facebook, twitter, providerConfigUserFolder);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialConnectOauthImplTwitterProviderImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        String oauthCloudConfigRoot = null;
        String providerConfigRoot = null;
        String providerConfigUserFolder = null;
        Boolean providerConfigTwitterEnableParams = null;
        List<String> providerConfigTwitterParams = null;
        Boolean providerConfigRefreshUserdataEnabled = null;
        ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo response = api.comAdobeCqSocialConnectOauthImplTwitterProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthCloudConfigRoot, providerConfigRoot, providerConfigUserFolder, providerConfigTwitterEnableParams, providerConfigTwitterParams, providerConfigRefreshUserdataEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmentCreationServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqSocialContentFragmentsServicesEnabled = null;
        Integer cqSocialContentFragmentsServicesWaitTimeSeconds = null;
        ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmentCreationServiceImplInfo response = api.comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmentCreationServiceImpl(post, apply, delete, action, $location, propertylist, cqSocialContentFragmentsServicesEnabled, cqSocialContentFragmentsServicesWaitTimeSeconds);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String versionId = null;
        Boolean cacheOn = null;
        Integer concurrencyLevel = null;
        Integer cacheStartSize = null;
        Integer cacheTtl = null;
        Integer cacheSize = null;
        Integer timeLimit = null;
        ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo response = api.comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(post, apply, delete, action, $location, propertylist, versionId, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize, timeLimit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String solrZkTimeout = null;
        String solrCommit = null;
        Boolean cacheOn = null;
        Integer concurrencyLevel = null;
        Integer cacheStartSize = null;
        Integer cacheTtl = null;
        Integer cacheSize = null;
        ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo response = api.comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(post, apply, delete, action, $location, propertylist, solrZkTimeout, solrCommit, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String solrZkTimeout = null;
        String solrCommit = null;
        Boolean cacheOn = null;
        Integer concurrencyLevel = null;
        Integer cacheStartSize = null;
        Integer cacheTtl = null;
        Integer cacheSize = null;
        ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactoryInfo response = api.comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactory(post, apply, delete, action, $location, propertylist, solrZkTimeout, solrCommit, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean isMemberCheck = null;
        ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFactoryInfo response = api.comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFactory(post, apply, delete, action, $location, propertylist, isMemberCheck);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean isMemberCheck = null;
        ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoryInfo response = api.comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactory(post, apply, delete, action, $location, propertylist, isMemberCheck);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLearningPathModelOperationServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLearningPathModelOperationServiceInfo response = api.comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLearningPathModelOperationService(post, apply, delete, action, $location, propertylist, fieldWhitelist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialEnablementResourceEndpointsImplEnablementResourceModelOperationServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResourceModelOperationServiceInfo response = api.comAdobeCqSocialEnablementResourceEndpointsImplEnablementResourceModelOperationService(post, apply, delete, action, $location, propertylist, fieldWhitelist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialEnablementServicesImplAuthorMarkerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo response = api.comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(post, apply, delete, action, $location, propertylist, serviceRanking);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGetServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletSelectors = null;
        String slingServletExtensions = null;
        ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGetServletInfo response = api.comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGetServlet(post, apply, delete, action, $location, propertylist, slingServletSelectors, slingServletExtensions);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperationsServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
        ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperationsServiceInfo response = api.comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperationsService(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
        ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo response = api.comAdobeCqSocialForumClientEndpointsImplForumOperationsService(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialForumDispatcherImplFlushOperationsTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer extensionOrder = null;
        Boolean flushForumontopic = null;
        ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo response = api.comAdobeCqSocialForumDispatcherImplFlushOperations(post, apply, delete, action, $location, propertylist, extensionOrder, flushForumontopic);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponentFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean groupListingPaginationEnable = null;
        Boolean groupListingLazyloadingEnable = null;
        Integer pageSize = null;
        Integer priority = null;
        ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponentFactoryInfo response = api.comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponentFactory(post, apply, delete, action, $location, propertylist, groupListingPaginationEnable, groupListingLazyloadingEnable, pageSize, priority);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialGroupImplGroupServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxWaitTime = null;
        Integer minWaitBetweenRetries = null;
        ComAdobeCqSocialGroupImplGroupServiceImplInfo response = api.comAdobeCqSocialGroupImplGroupServiceImpl(post, apply, delete, action, $location, propertylist, maxWaitTime, minWaitBetweenRetries);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialHandlebarsGuavaTemplateCacheImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean parameterGuavaCacheEnabled = null;
        String parameterGuavaCacheParams = null;
        Boolean parameterGuavaCacheReload = null;
        Integer serviceRanking = null;
        ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo response = api.comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(post, apply, delete, action, $location, propertylist, parameterGuavaCacheEnabled, parameterGuavaCacheParams, parameterGuavaCacheReload, serviceRanking);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
        ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsServiceInfo response = api.comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsService(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialJournalClientEndpointsImplJournalOperationsServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
        ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsServiceInfo response = api.comAdobeCqSocialJournalClientEndpointsImplJournalOperationsService(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileOperationServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileOperationServiceInfo response = api.comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileOperationService(post, apply, delete, action, $location, propertylist, fieldWhitelist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOperationServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOperationServiceInfo response = api.comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOperationService(post, apply, delete, action, $location, propertylist, fieldWhitelist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer everyoneLimit = null;
        Integer priority = null;
        ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFactoryInfo response = api.comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFactory(post, apply, delete, action, $location, propertylist, everyoneLimit, priority);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> messageProperties = null;
        Integer messageBoxSizeLimit = null;
        Integer messageCountLimit = null;
        Boolean notifyFailure = null;
        String failureMessageFrom = null;
        String failureTemplatePath = null;
        Integer maxRetries = null;
        Integer minWaitBetweenRetries = null;
        Integer countUpdatePoolSize = null;
        String inboxPath = null;
        String sentitemsPath = null;
        Boolean supportAttachments = null;
        Boolean supportGroupMessaging = null;
        Integer maxTotalRecipients = null;
        Integer batchSize = null;
        Integer maxTotalAttachmentSize = null;
        List<String> attachmentTypeBlacklist = null;
        List<String> allowedAttachmentTypes = null;
        String serviceSelector = null;
        List<String> fieldWhitelist = null;
        ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplInfo response = api.comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImpl(post, apply, delete, action, $location, propertylist, messageProperties, messageBoxSizeLimit, messageCountLimit, notifyFailure, failureMessageFrom, failureTemplatePath, maxRetries, minWaitBetweenRetries, countUpdatePoolSize, inboxPath, sentitemsPath, supportAttachments, supportGroupMessaging, maxTotalRecipients, batchSize, maxTotalAttachmentSize, attachmentTypeBlacklist, allowedAttachmentTypes, serviceSelector, fieldWhitelist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponentFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> resourceTypeFilters = null;
        Integer priority = null;
        ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponentFactoryInfo response = api.comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponentFactory(post, apply, delete, action, $location, propertylist, resourceTypeFilters, priority);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialModerationDashboardApiModerationDashboardSocialComponentFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priority = null;
        ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialComponentFactoryInfo response = api.comAdobeCqSocialModerationDashboardApiModerationDashboardSocialComponentFactory(post, apply, delete, action, $location, propertylist, priority);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponentFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priority = null;
        ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponentFactoryInfo response = api.comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponentFactory(post, apply, delete, action, $location, propertylist, priority);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialModerationDashboardInternalImplFilterGroupSocialComponentFactoryV2Test() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> resourceTypeFilters = null;
        Integer priority = null;
        ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSocialComponentFactoryV2Info response = api.comAdobeCqSocialModerationDashboardInternalImplFilterGroupSocialComponentFactoryV2(post, apply, delete, action, $location, propertylist, resourceTypeFilters, priority);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialNotificationsImplMentionsRouterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
        String eventFilter = null;
        ComAdobeCqSocialNotificationsImplMentionsRouterInfo response = api.comAdobeCqSocialNotificationsImplMentionsRouter(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialNotificationsImplNotificationManagerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxUnreadNotificationCount = null;
        ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo response = api.comAdobeCqSocialNotificationsImplNotificationManagerImpl(post, apply, delete, action, $location, propertylist, maxUnreadNotificationCount);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialNotificationsImplNotificationsRouterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
        String eventFilter = null;
        ComAdobeCqSocialNotificationsImplNotificationsRouterInfo response = api.comAdobeCqSocialNotificationsImplNotificationsRouter(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
        ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServiceInfo response = api.comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsService(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportImporterServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqSocialReportingAnalyticsPollingImporterInterval = null;
        Integer cqSocialReportingAnalyticsPollingImporterPageSize = null;
        ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportImporterServiceImplInfo response = api.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportImporterServiceImpl(post, apply, delete, action, $location, propertylist, cqSocialReportingAnalyticsPollingImporterInterval, cqSocialReportingAnalyticsPollingImporterPageSize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportManagementServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer reportFetchDelay = null;
        ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportManagementServiceImplInfo response = api.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportManagementServiceImpl(post, apply, delete, action, $location, propertylist, reportFetchDelay);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSocialComponentFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqSocialConsoleAnalyticsSitesMapping = null;
        Integer priority = null;
        ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSocialComponentFactoryInfo response = api.comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSocialComponentFactory(post, apply, delete, action, $location, propertylist, cqSocialConsoleAnalyticsSitesMapping, priority);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> attachmentTypeBlacklist = null;
        ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiceInfo response = api.comAdobeCqSocialReviewClientEndpointsImplReviewOperationsService(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletSelectors = null;
        String slingServletExtensions = null;
        ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo response = api.comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(post, apply, delete, action, $location, propertylist, slingServletSelectors, slingServletExtensions);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> slingServletSelectors = null;
        String slingServletExtensions = null;
        ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo response = api.comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(post, apply, delete, action, $location, propertylist, slingServletSelectors, slingServletExtensions);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialScoringImplScoringEventListenerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
        String eventFilter = null;
        ComAdobeCqSocialScoringImplScoringEventListenerInfo response = api.comAdobeCqSocialScoringImplScoringEventListener(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enableFallback = null;
        ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo response = api.comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(post, apply, delete, action, $location, propertylist, enableFallback);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSiteEndpointsImplSiteOperationServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fieldWhitelist = null;
        List<String> sitePathFilters = null;
        String sitePackageGroup = null;
        ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo response = api.comAdobeCqSocialSiteEndpointsImplSiteOperationService(post, apply, delete, action, $location, propertylist, fieldWhitelist, sitePathFilters, sitePackageGroup);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqSocialConsoleAnalyticsComponents = null;
        ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImplInfo response = api.comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImpl(post, apply, delete, action, $location, propertylist, cqSocialConsoleAnalyticsComponents);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSiteImplSiteConfiguratorImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> componentsUsingTags = null;
        ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo response = api.comAdobeCqSocialSiteImplSiteConfiguratorImpl(post, apply, delete, action, $location, propertylist, componentsUsingTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSrpImplSocialSolrConnectorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String srpType = null;
        ComAdobeCqSocialSrpImplSocialSolrConnectorInfo response = api.comAdobeCqSocialSrpImplSocialSolrConnector(post, apply, delete, action, $location, propertylist, srpType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSyncImplDiffChangesObserverTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        String agentName = null;
        String diffPath = null;
        String propertyNames = null;
        ComAdobeCqSocialSyncImplDiffChangesObserverInfo response = api.comAdobeCqSocialSyncImplDiffChangesObserver(post, apply, delete, action, $location, propertylist, enabled, agentName, diffPath, propertyNames);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSyncImplGroupSyncListenerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> nodetypes = null;
        List<String> ignorableprops = null;
        String ignorablenodes = null;
        Boolean enabled = null;
        String distfolders = null;
        ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo response = api.comAdobeCqSocialSyncImplGroupSyncListenerImpl(post, apply, delete, action, $location, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSyncImplPublisherSyncServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> activeRunModes = null;
        ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo response = api.comAdobeCqSocialSyncImplPublisherSyncServiceImpl(post, apply, delete, action, $location, propertylist, activeRunModes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialSyncImplUserSyncListenerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> nodetypes = null;
        List<String> ignorableprops = null;
        List<String> ignorablenodes = null;
        Boolean enabled = null;
        List<String> distfolders = null;
        ComAdobeCqSocialSyncImplUserSyncListenerImplInfo response = api.comAdobeCqSocialSyncImplUserSyncListenerImpl(post, apply, delete, action, $location, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialTranslationImplTranslationServiceConfigManagerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String translateLanguage = null;
        String translateDisplay = null;
        Boolean translateAttribution = null;
        String translateCaching = null;
        String translateSmartRendering = null;
        String translateCachingDuration = null;
        String translateSessionSaveInterval = null;
        String translateSessionSaveBatchLimit = null;
        ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo response = api.comAdobeCqSocialTranslationImplTranslationServiceConfigManager(post, apply, delete, action, $location, propertylist, translateLanguage, translateDisplay, translateAttribution, translateCaching, translateSmartRendering, translateCachingDuration, translateSessionSaveInterval, translateSessionSaveBatchLimit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialTranslationImplUGCLanguageDetectorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventTopics = null;
        String eventFilter = null;
        List<String> translateListenerType = null;
        List<String> translatePropertyList = null;
        Integer poolSize = null;
        Integer maxPoolSize = null;
        Integer queueSize = null;
        Integer keepAliveTime = null;
        ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo response = api.comAdobeCqSocialTranslationImplUGCLanguageDetector(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter, translateListenerType, translatePropertyList, poolSize, maxPoolSize, queueSize, keepAliveTime);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer threadPoolSize = null;
        Integer delayTime = null;
        Integer workerSleepTime = null;
        ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo response = api.comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(post, apply, delete, action, $location, propertylist, threadPoolSize, delayTime, workerSleepTime);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer poolSize = null;
        Integer maxPoolSize = null;
        Integer queueSize = null;
        Integer keepAliveTime = null;
        ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo response = api.comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(post, apply, delete, action, $location, propertylist, poolSize, maxPoolSize, queueSize, keepAliveTime);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseImplPublisherConfigurationImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean isPrimaryPublisher = null;
        ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo response = api.comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(post, apply, delete, action, $location, propertylist, isPrimaryPublisher);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseImplSocialUtilsImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean legacyCloudUGCPathMapping = null;
        ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo response = api.comAdobeCqSocialUgcbaseImplSocialUtilsImpl(post, apply, delete, action, $location, propertylist, legacyCloudUGCPathMapping);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseModerationImplAutoModerationImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> automoderationSequence = null;
        Boolean automoderationOnfailurestop = null;
        ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo response = api.comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(post, apply, delete, action, $location, propertylist, automoderationSequence, automoderationOnfailurestop);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseModerationImplSentimentProcessTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> watchwordsPositive = null;
        List<String> watchwordsNegative = null;
        String watchwordsPath = null;
        String sentimentPath = null;
        ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo response = api.comAdobeCqSocialUgcbaseModerationImplSentimentProcess(post, apply, delete, action, $location, propertylist, watchwordsPositive, watchwordsNegative, watchwordsPath, sentimentPath);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlacklistServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> defaultAttachmentTypeBlacklist = null;
        List<String> baselineAttachmentTypeBlacklist = null;
        ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlacklistServiceInfo response = api.comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlacklistService(post, apply, delete, action, $location, propertylist, defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> parameterWhitelist = null;
        List<String> parameterWhitelistPrefixes = null;
        List<String> binaryParameterWhitelist = null;
        List<String> modifierWhitelist = null;
        List<String> operationWhitelist = null;
        List<String> operationWhitelistPrefixes = null;
        List<String> typehintWhitelist = null;
        List<String> resourcetypeWhitelist = null;
        ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo response = api.comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(post, apply, delete, action, $location, propertylist, parameterWhitelist, parameterWhitelistPrefixes, binaryParameterWhitelist, modifierWhitelist, operationWhitelist, operationWhitelistPrefixes, typehintWhitelist, resourcetypeWhitelist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletExtensions = null;
        String slingServletPaths = null;
        String slingServletMethods = null;
        ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo response = api.comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(post, apply, delete, action, $location, propertylist, slingServletExtensions, slingServletPaths, slingServletMethods);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqSocialUserImplTransportHttpToPublisherTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enable = null;
        List<String> agentConfiguration = null;
        String contextPath = null;
        List<String> disabledCipherSuites = null;
        List<String> enabledCipherSuites = null;
        ComAdobeCqSocialUserImplTransportHttpToPublisherInfo response = api.comAdobeCqSocialUserImplTransportHttpToPublisher(post, apply, delete, action, $location, propertylist, enable, agentConfiguration, contextPath, disabledCipherSuites, enabledCipherSuites);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactoryAmendedTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> resourceTypes = null;
        ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactoryAmendedInfo response = api.comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactoryAmended(post, apply, delete, action, $location, propertylist, resourceTypes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqUpgradesCleanupImplUpgradeContentCleanupTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> deletePathRegexps = null;
        String deleteSql2Query = null;
        ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo response = api.comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(post, apply, delete, action, $location, propertylist, deletePathRegexps, deleteSql2Query);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> deleteNameRegexps = null;
        ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo response = api.comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(post, apply, delete, action, $location, propertylist, deleteNameRegexps);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer threshold = null;
        String jobTopicName = null;
        Boolean emailEnabled = null;
        ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo response = api.comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(post, apply, delete, action, $location, propertylist, threshold, jobTopicName, emailEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        Integer jobPurgeThreshold = null;
        Integer jobPurgeMaxJobs = null;
        ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo response = api.comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(post, apply, delete, action, $location, propertylist, schedulerExpression, jobPurgeThreshold, jobPurgeMaxJobs);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer threshold = null;
        String jobTopicName = null;
        Boolean emailEnabled = null;
        ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo response = api.comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(post, apply, delete, action, $location, propertylist, threshold, jobTopicName, emailEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer threshold = null;
        String jobTopicName = null;
        Boolean emailEnabled = null;
        ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo response = api.comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(post, apply, delete, action, $location, propertylist, threshold, jobTopicName, emailEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmLaunchesImplLaunchesEventHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
        Integer launchesEventhandlerThreadpoolMaxsize = null;
        String launchesEventhandlerThreadpoolPriority = null;
        Boolean launchesEventhandlerUpdatelastmodification = null;
        ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo response = api.comAdobeCqWcmLaunchesImplLaunchesEventHandler(post, apply, delete, action, $location, propertylist, eventFilter, launchesEventhandlerThreadpoolMaxsize, launchesEventhandlerThreadpoolPriority, launchesEventhandlerUpdatelastmodification);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmQrcodeServletWhitelist = null;
        ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo response = api.comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(post, apply, delete, action, $location, propertylist, cqWcmQrcodeServletWhitelist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer size = null;
        ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo response = api.comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(post, apply, delete, action, $location, propertylist, size);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String syncTranslationStateSchedulingFormat = null;
        String schedulingRepeatTranslationSchedulingFormat = null;
        String syncTranslationStateLockTimeoutInMinutes = null;
        String exportFormat = null;
        ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo response = api.comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(post, apply, delete, action, $location, propertylist, syncTranslationStateSchedulingFormat, schedulingRepeatTranslationSchedulingFormat, syncTranslationStateLockTimeoutInMinutes, exportFormat);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> portalOutboxes = null;
        String draftDataService = null;
        String draftMetadataService = null;
        String submitDataService = null;
        String submitMetadataService = null;
        String pendingSignDataService = null;
        String pendingSignMetadataService = null;
        ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo response = api.comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(post, apply, delete, action, $location, propertylist, portalOutboxes, draftDataService, draftMetadataService, submitDataService, submitMetadataService, pendingSignDataService, pendingSignMetadataService);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeFdFpConfigFormsPortalSchedulerServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String formportalInterval = null;
        ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo response = api.comAdobeFdFpConfigFormsPortalSchedulerService(post, apply, delete, action, $location, propertylist, formportalInterval);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeFormsCommonServiceImplDefaultDataProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> alloweddataFileLocations = null;
        ComAdobeFormsCommonServiceImplDefaultDataProviderInfo response = api.comAdobeFormsCommonServiceImplDefaultDataProvider(post, apply, delete, action, $location, propertylist, alloweddataFileLocations);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String tempStorageConfig = null;
        ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImplInfo response = api.comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpl(post, apply, delete, action, $location, propertylist, tempStorageConfig);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeFormsCommonServletTempCleanUpTaskTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        String durationForTemporaryStorage = null;
        String durationForAnonymousStorage = null;
        ComAdobeFormsCommonServletTempCleanUpTaskInfo response = api.comAdobeFormsCommonServletTempCleanUpTask(post, apply, delete, action, $location, propertylist, schedulerExpression, durationForTemporaryStorage, durationForAnonymousStorage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAcpPlatformPlatformServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer queryLimit = null;
        List<String> fileTypeExtensionMap = null;
        ComAdobeGraniteAcpPlatformPlatformServletInfo response = api.comAdobeGraniteAcpPlatformPlatformServlet(post, apply, delete, action, $location, propertylist, queryLimit, fileTypeExtensionMap);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteActivitystreamsImplActivityManagerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> aggregateRelationships = null;
        Boolean aggregateDescendVirtual = null;
        ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo response = api.comAdobeGraniteActivitystreamsImplActivityManagerImpl(post, apply, delete, action, $location, propertylist, aggregateRelationships, aggregateDescendVirtual);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAnalyzerBaseSystemStatusServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean disabled = null;
        ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo response = api.comAdobeGraniteAnalyzerBaseSystemStatusServlet(post, apply, delete, action, $location, propertylist, disabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean disabled = null;
        ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo response = api.comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(post, apply, delete, action, $location, propertylist, disabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteApicontrollerFilterResolverHookFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String comAdobeCqCdnCdnRewriter = null;
        String comAdobeCqCloudConfigComponents = null;
        String comAdobeCqCloudConfigCore = null;
        String comAdobeCqCloudConfigUi = null;
        String comAdobeCqComAdobeCqEditor = null;
        String comAdobeCqComAdobeCqProjectsCore = null;
        String comAdobeCqComAdobeCqProjectsWcmCore = null;
        String comAdobeCqComAdobeCqUiCommons = null;
        String comAdobeCqComAdobeCqWcmStyle = null;
        String comAdobeCqCqActivitymapIntegration = null;
        String comAdobeCqCqContexthubCommons = null;
        String comAdobeCqCqDtm = null;
        String comAdobeCqCqHealthcheck = null;
        String comAdobeCqCqMultisiteTargeting = null;
        String comAdobeCqCqPreUpgradeCleanup = null;
        String comAdobeCqCqProductInfoProvider = null;
        String comAdobeCqCqRestSites = null;
        String comAdobeCqCqSecurityHc = null;
        String comAdobeCqDamCqDamSvgHandler = null;
        String comAdobeCqDamCqScene7Imaging = null;
        String comAdobeCqDtmReactorCore = null;
        String comAdobeCqDtmReactorUi = null;
        String comAdobeCqExpJspelResolver = null;
        String comAdobeCqInboxCqInbox = null;
        String comAdobeCqJsonSchemaParser = null;
        String comAdobeCqMediaCqMediaPublishingDpsFpCore = null;
        String comAdobeCqMobileCqMobileCaas = null;
        String comAdobeCqMobileCqMobileIndexBuilder = null;
        String comAdobeCqMobileCqMobilePhonegapBuild = null;
        String comAdobeCqMyspell = null;
        String comAdobeCqSampleWeRetailCore = null;
        String comAdobeCqScreensComAdobeCqScreensDcc = null;
        String comAdobeCqScreensComAdobeCqScreensMqCore = null;
        String comAdobeCqSocialCqSocialAsProvider = null;
        String comAdobeCqSocialCqSocialBadgingBasicImpl = null;
        String comAdobeCqSocialCqSocialBadgingImpl = null;
        String comAdobeCqSocialCqSocialCalendarImpl = null;
        String comAdobeCqSocialCqSocialContentFragmentsImpl = null;
        String comAdobeCqSocialCqSocialEnablementImpl = null;
        String comAdobeCqSocialCqSocialGraphImpl = null;
        String comAdobeCqSocialCqSocialIdeationImpl = null;
        String comAdobeCqSocialCqSocialJcrProvider = null;
        String comAdobeCqSocialCqSocialMembersImpl = null;
        String comAdobeCqSocialCqSocialMsProvider = null;
        String comAdobeCqSocialCqSocialNotificationsChannelsWeb = null;
        String comAdobeCqSocialCqSocialNotificationsImpl = null;
        String comAdobeCqSocialCqSocialRdbProvider = null;
        String comAdobeCqSocialCqSocialScfImpl = null;
        String comAdobeCqSocialCqSocialScoringBasicImpl = null;
        String comAdobeCqSocialCqSocialScoringImpl = null;
        String comAdobeCqSocialCqSocialServiceusersImpl = null;
        String comAdobeCqSocialCqSocialSrpImpl = null;
        String comAdobeCqSocialCqSocialUgcbaseImpl = null;
        String comAdobeDamCqDamCfmImpl = null;
        String comAdobeFormsFoundationFormsFoundationBase = null;
        String comAdobeGraniteApicontroller = null;
        String comAdobeGraniteAssetCore = null;
        String comAdobeGraniteAuthSso = null;
        String comAdobeGraniteBundlesHcImpl = null;
        String comAdobeGraniteCompatRouter = null;
        String comAdobeGraniteConf = null;
        String comAdobeGraniteConfUiCore = null;
        String comAdobeGraniteCors = null;
        String comAdobeGraniteCrxExplorer = null;
        String comAdobeGraniteCrxdeLite = null;
        String comAdobeGraniteCryptoConfig = null;
        String comAdobeGraniteCryptoExtension = null;
        String comAdobeGraniteCryptoFile = null;
        String comAdobeGraniteCryptoJcr = null;
        String comAdobeGraniteCsrf = null;
        String comAdobeGraniteDistributionCore = null;
        String comAdobeGraniteDropwizardMetrics = null;
        String comAdobeGraniteFragsImpl = null;
        String comAdobeGraniteGibson = null;
        String comAdobeGraniteInfocollector = null;
        String comAdobeGraniteInstallerFactoryPackages = null;
        String comAdobeGraniteJettySsl = null;
        String comAdobeGraniteJobsAsync = null;
        String comAdobeGraniteMaintenanceOak = null;
        String comAdobeGraniteMonitoringCore = null;
        String comAdobeGraniteQueries = null;
        String comAdobeGraniteReplicationHcImpl = null;
        String comAdobeGraniteRepositoryChecker = null;
        String comAdobeGraniteRepositoryHcImpl = null;
        String comAdobeGraniteRestAssets = null;
        String comAdobeGraniteSecurityUi = null;
        String comAdobeGraniteStartup = null;
        String comAdobeGraniteTagsoup = null;
        String comAdobeGraniteTaskmanagementCore = null;
        String comAdobeGraniteTaskmanagementWorkflow = null;
        String comAdobeGraniteUiClientlibsCompilerLess = null;
        String comAdobeGraniteUiClientlibsProcessorGcc = null;
        String comAdobeGraniteWebconsolePlugins = null;
        String comAdobeGraniteWorkflowConsole = null;
        String comAdobeXmpWorkerFilesNativeFragmentLinux = null;
        String comAdobeXmpWorkerFilesNativeFragmentMacosx = null;
        String comAdobeXmpWorkerFilesNativeFragmentWin = null;
        String comDayCommonsOsgiWrapperSimpleJndi = null;
        String comDayCqCqAuthhandler = null;
        String comDayCqCqCompatConfigupdate = null;
        String comDayCqCqLicensebranding = null;
        String comDayCqCqNotifcationImpl = null;
        String comDayCqCqReplicationAudit = null;
        String comDayCqCqSearchExt = null;
        String comDayCqDamCqDamAnnotationPrint = null;
        String comDayCqDamCqDamAssetUsage = null;
        String comDayCqDamCqDamS7dam = null;
        String comDayCqDamCqDamSimilaritysearch = null;
        String comDayCqDamDamWebdavSupport = null;
        String comDayCqPreUpgradeTasks = null;
        String comDayCqReplicationExtensions = null;
        String comDayCqWcmCqMsmCore = null;
        String comDayCqWcmCqWcmTranslation = null;
        String dayCommonsJrawio = null;
        String orgApacheAriesJmxWhiteboard = null;
        String orgApacheFelixHttpSslfilter = null;
        String orgApacheFelixOrgApacheFelixThreaddump = null;
        String orgApacheFelixWebconsolePluginsDs = null;
        String orgApacheFelixWebconsolePluginsEvent = null;
        String orgApacheFelixWebconsolePluginsMemoryusage = null;
        String orgApacheFelixWebconsolePluginsPackageadmin = null;
        String orgApacheJackrabbitOakAuthLdap = null;
        String orgApacheJackrabbitOakSegmentTar = null;
        String orgApacheJackrabbitOakSolrOsgi = null;
        String orgApacheSlingBundleresourceImpl = null;
        String orgApacheSlingCommonsFsclassloader = null;
        String orgApacheSlingCommonsLogWebconsole = null;
        String orgApacheSlingDatasource = null;
        String orgApacheSlingDiscoveryBase = null;
        String orgApacheSlingDiscoveryOak = null;
        String orgApacheSlingDiscoverySupport = null;
        String orgApacheSlingDistributionApi = null;
        String orgApacheSlingDistributionCore = null;
        String orgApacheSlingExtensionsWebconsolesecurityprovider = null;
        String orgApacheSlingHcWebconsole = null;
        String orgApacheSlingInstallerConsole = null;
        String orgApacheSlingInstallerProviderFile = null;
        String orgApacheSlingInstallerProviderJcr = null;
        String orgApacheSlingJcrDavex = null;
        String orgApacheSlingJcrResourcesecurity = null;
        String orgApacheSlingJmxProvider = null;
        String orgApacheSlingLaunchpadInstaller = null;
        String orgApacheSlingModelsImpl = null;
        String orgApacheSlingRepoinitParser = null;
        String orgApacheSlingResourceInventory = null;
        String orgApacheSlingResourceresolver = null;
        String orgApacheSlingScriptingJavascript = null;
        String orgApacheSlingScriptingJst = null;
        String orgApacheSlingScriptingSightlyJsProvider = null;
        String orgApacheSlingScriptingSightlyModelsProvider = null;
        String orgApacheSlingSecurity = null;
        String orgApacheSlingServletsCompat = null;
        String orgApacheSlingServletsGet = null;
        String orgApacheSlingStartupfilterDisabler = null;
        String orgApacheSlingTracer = null;
        String weRetailClientAppCore = null;
        ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo response = api.comAdobeGraniteApicontrollerFilterResolverHookFactory(post, apply, delete, action, $location, propertylist, comAdobeCqCdnCdnRewriter, comAdobeCqCloudConfigComponents, comAdobeCqCloudConfigCore, comAdobeCqCloudConfigUi, comAdobeCqComAdobeCqEditor, comAdobeCqComAdobeCqProjectsCore, comAdobeCqComAdobeCqProjectsWcmCore, comAdobeCqComAdobeCqUiCommons, comAdobeCqComAdobeCqWcmStyle, comAdobeCqCqActivitymapIntegration, comAdobeCqCqContexthubCommons, comAdobeCqCqDtm, comAdobeCqCqHealthcheck, comAdobeCqCqMultisiteTargeting, comAdobeCqCqPreUpgradeCleanup, comAdobeCqCqProductInfoProvider, comAdobeCqCqRestSites, comAdobeCqCqSecurityHc, comAdobeCqDamCqDamSvgHandler, comAdobeCqDamCqScene7Imaging, comAdobeCqDtmReactorCore, comAdobeCqDtmReactorUi, comAdobeCqExpJspelResolver, comAdobeCqInboxCqInbox, comAdobeCqJsonSchemaParser, comAdobeCqMediaCqMediaPublishingDpsFpCore, comAdobeCqMobileCqMobileCaas, comAdobeCqMobileCqMobileIndexBuilder, comAdobeCqMobileCqMobilePhonegapBuild, comAdobeCqMyspell, comAdobeCqSampleWeRetailCore, comAdobeCqScreensComAdobeCqScreensDcc, comAdobeCqScreensComAdobeCqScreensMqCore, comAdobeCqSocialCqSocialAsProvider, comAdobeCqSocialCqSocialBadgingBasicImpl, comAdobeCqSocialCqSocialBadgingImpl, comAdobeCqSocialCqSocialCalendarImpl, comAdobeCqSocialCqSocialContentFragmentsImpl, comAdobeCqSocialCqSocialEnablementImpl, comAdobeCqSocialCqSocialGraphImpl, comAdobeCqSocialCqSocialIdeationImpl, comAdobeCqSocialCqSocialJcrProvider, comAdobeCqSocialCqSocialMembersImpl, comAdobeCqSocialCqSocialMsProvider, comAdobeCqSocialCqSocialNotificationsChannelsWeb, comAdobeCqSocialCqSocialNotificationsImpl, comAdobeCqSocialCqSocialRdbProvider, comAdobeCqSocialCqSocialScfImpl, comAdobeCqSocialCqSocialScoringBasicImpl, comAdobeCqSocialCqSocialScoringImpl, comAdobeCqSocialCqSocialServiceusersImpl, comAdobeCqSocialCqSocialSrpImpl, comAdobeCqSocialCqSocialUgcbaseImpl, comAdobeDamCqDamCfmImpl, comAdobeFormsFoundationFormsFoundationBase, comAdobeGraniteApicontroller, comAdobeGraniteAssetCore, comAdobeGraniteAuthSso, comAdobeGraniteBundlesHcImpl, comAdobeGraniteCompatRouter, comAdobeGraniteConf, comAdobeGraniteConfUiCore, comAdobeGraniteCors, comAdobeGraniteCrxExplorer, comAdobeGraniteCrxdeLite, comAdobeGraniteCryptoConfig, comAdobeGraniteCryptoExtension, comAdobeGraniteCryptoFile, comAdobeGraniteCryptoJcr, comAdobeGraniteCsrf, comAdobeGraniteDistributionCore, comAdobeGraniteDropwizardMetrics, comAdobeGraniteFragsImpl, comAdobeGraniteGibson, comAdobeGraniteInfocollector, comAdobeGraniteInstallerFactoryPackages, comAdobeGraniteJettySsl, comAdobeGraniteJobsAsync, comAdobeGraniteMaintenanceOak, comAdobeGraniteMonitoringCore, comAdobeGraniteQueries, comAdobeGraniteReplicationHcImpl, comAdobeGraniteRepositoryChecker, comAdobeGraniteRepositoryHcImpl, comAdobeGraniteRestAssets, comAdobeGraniteSecurityUi, comAdobeGraniteStartup, comAdobeGraniteTagsoup, comAdobeGraniteTaskmanagementCore, comAdobeGraniteTaskmanagementWorkflow, comAdobeGraniteUiClientlibsCompilerLess, comAdobeGraniteUiClientlibsProcessorGcc, comAdobeGraniteWebconsolePlugins, comAdobeGraniteWorkflowConsole, comAdobeXmpWorkerFilesNativeFragmentLinux, comAdobeXmpWorkerFilesNativeFragmentMacosx, comAdobeXmpWorkerFilesNativeFragmentWin, comDayCommonsOsgiWrapperSimpleJndi, comDayCqCqAuthhandler, comDayCqCqCompatConfigupdate, comDayCqCqLicensebranding, comDayCqCqNotifcationImpl, comDayCqCqReplicationAudit, comDayCqCqSearchExt, comDayCqDamCqDamAnnotationPrint, comDayCqDamCqDamAssetUsage, comDayCqDamCqDamS7dam, comDayCqDamCqDamSimilaritysearch, comDayCqDamDamWebdavSupport, comDayCqPreUpgradeTasks, comDayCqReplicationExtensions, comDayCqWcmCqMsmCore, comDayCqWcmCqWcmTranslation, dayCommonsJrawio, orgApacheAriesJmxWhiteboard, orgApacheFelixHttpSslfilter, orgApacheFelixOrgApacheFelixThreaddump, orgApacheFelixWebconsolePluginsDs, orgApacheFelixWebconsolePluginsEvent, orgApacheFelixWebconsolePluginsMemoryusage, orgApacheFelixWebconsolePluginsPackageadmin, orgApacheJackrabbitOakAuthLdap, orgApacheJackrabbitOakSegmentTar, orgApacheJackrabbitOakSolrOsgi, orgApacheSlingBundleresourceImpl, orgApacheSlingCommonsFsclassloader, orgApacheSlingCommonsLogWebconsole, orgApacheSlingDatasource, orgApacheSlingDiscoveryBase, orgApacheSlingDiscoveryOak, orgApacheSlingDiscoverySupport, orgApacheSlingDistributionApi, orgApacheSlingDistributionCore, orgApacheSlingExtensionsWebconsolesecurityprovider, orgApacheSlingHcWebconsole, orgApacheSlingInstallerConsole, orgApacheSlingInstallerProviderFile, orgApacheSlingInstallerProviderJcr, orgApacheSlingJcrDavex, orgApacheSlingJcrResourcesecurity, orgApacheSlingJmxProvider, orgApacheSlingLaunchpadInstaller, orgApacheSlingModelsImpl, orgApacheSlingRepoinitParser, orgApacheSlingResourceInventory, orgApacheSlingResourceresolver, orgApacheSlingScriptingJavascript, orgApacheSlingScriptingJst, orgApacheSlingScriptingSightlyJsProvider, orgApacheSlingScriptingSightlyModelsProvider, orgApacheSlingSecurity, orgApacheSlingServletsCompat, orgApacheSlingServletsGet, orgApacheSlingStartupfilterDisabler, orgApacheSlingTracer, weRetailClientAppCore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthCertImplClientCertAuthHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        Integer serviceRanking = null;
        ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo response = api.comAdobeGraniteAuthCertImplClientCertAuthHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthImsTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String configid = null;
        String scope = null;
        ComAdobeGraniteAuthImsInfo response = api.comAdobeGraniteAuthIms(post, apply, delete, action, $location, propertylist, configid, scope);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo response = api.comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(post, apply, delete, action, $location, propertylist, oauthProviderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String authImsClientSecret = null;
        String customizerType = null;
        ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo response = api.comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(post, apply, delete, action, $location, propertylist, authImsClientSecret, customizerType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo response = api.comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(post, apply, delete, action, $location, propertylist, oauthProviderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthImsImplIMSProviderImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        String oauthProviderImsAuthorizationUrl = null;
        String oauthProviderImsTokenUrl = null;
        String oauthProviderImsProfileUrl = null;
        List<String> oauthProviderImsExtendedDetailsUrls = null;
        String oauthProviderImsValidateTokenUrl = null;
        String oauthProviderImsSessionProperty = null;
        String oauthProviderImsServiceTokenClientId = null;
        String oauthProviderImsServiceTokenClientSecret = null;
        String oauthProviderImsServiceToken = null;
        String imsOrgRef = null;
        List<String> imsGroupMapping = null;
        Boolean oauthProviderImsOnlyLicenseGroup = null;
        ComAdobeGraniteAuthImsImplIMSProviderImplInfo response = api.comAdobeGraniteAuthImsImplIMSProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthProviderImsAuthorizationUrl, oauthProviderImsTokenUrl, oauthProviderImsProfileUrl, oauthProviderImsExtendedDetailsUrls, oauthProviderImsValidateTokenUrl, oauthProviderImsSessionProperty, oauthProviderImsServiceTokenClientId, oauthProviderImsServiceTokenClientSecret, oauthProviderImsServiceToken, imsOrgRef, imsGroupMapping, oauthProviderImsOnlyLicenseGroup);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthImsImplImsConfigProviderImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthConfigmanagerImsConfigid = null;
        String imsOwningEntity = null;
        String aemInstanceId = null;
        String imsServiceCode = null;
        ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo response = api.comAdobeGraniteAuthImsImplImsConfigProviderImpl(post, apply, delete, action, $location, propertylist, oauthConfigmanagerImsConfigid, imsOwningEntity, aemInstanceId, imsServiceCode);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthAccesstokenProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String authTokenProviderTitle = null;
        List<String> authTokenProviderDefaultClaims = null;
        String authTokenProviderEndpoint = null;
        String authAccessTokenRequest = null;
        String authTokenProviderKeypairAlias = null;
        Integer authTokenProviderConnTimeout = null;
        Integer authTokenProviderSoTimeout = null;
        String authTokenProviderClientId = null;
        String authTokenProviderScope = null;
        Boolean authTokenProviderReuseAccessToken = null;
        Boolean authTokenProviderRelaxedSsl = null;
        String tokenRequestCustomizerType = null;
        String authTokenValidatorType = null;
        ComAdobeGraniteAuthOauthAccesstokenProviderInfo response = api.comAdobeGraniteAuthOauthAccesstokenProvider(post, apply, delete, action, $location, propertylist, name, authTokenProviderTitle, authTokenProviderDefaultClaims, authTokenProviderEndpoint, authAccessTokenRequest, authTokenProviderKeypairAlias, authTokenProviderConnTimeout, authTokenProviderSoTimeout, authTokenProviderClientId, authTokenProviderScope, authTokenProviderReuseAccessToken, authTokenProviderRelaxedSsl, tokenRequestCustomizerType, authTokenValidatorType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        List<String> oauthClientIdsAllowed = null;
        Boolean authBearerSyncIms = null;
        String authTokenRequestParameter = null;
        String oauthBearerConfigid = null;
        Boolean oauthJwtSupport = null;
        ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo response = api.comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, oauthClientIdsAllowed, authBearerSyncIms, authTokenRequestParameter, oauthBearerConfigid, oauthJwtSupport);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String authTokenValidatorType = null;
        ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo response = api.comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(post, apply, delete, action, $location, propertylist, authTokenValidatorType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplFacebookProviderImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo response = api.comAdobeGraniteAuthOauthImplFacebookProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplGithubProviderImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        String oauthProviderGithubAuthorizationUrl = null;
        String oauthProviderGithubTokenUrl = null;
        String oauthProviderGithubProfileUrl = null;
        ComAdobeGraniteAuthOauthImplGithubProviderImplInfo response = api.comAdobeGraniteAuthOauthImplGithubProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthProviderGithubAuthorizationUrl, oauthProviderGithubTokenUrl, oauthProviderGithubProfileUrl);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplGraniteProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        String oauthProviderGraniteAuthorizationUrl = null;
        String oauthProviderGraniteTokenUrl = null;
        String oauthProviderGraniteProfileUrl = null;
        String oauthProviderGraniteExtendedDetailsUrls = null;
        ComAdobeGraniteAuthOauthImplGraniteProviderInfo response = api.comAdobeGraniteAuthOauthImplGraniteProvider(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthProviderGraniteAuthorizationUrl, oauthProviderGraniteTokenUrl, oauthProviderGraniteProfileUrl, oauthProviderGraniteExtendedDetailsUrls);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplHelperProviderConfigManagerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthCookieLoginTimeout = null;
        String oauthCookieMaxAge = null;
        ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo response = api.comAdobeGraniteAuthOauthImplHelperProviderConfigManager(post, apply, delete, action, $location, propertylist, oauthCookieLoginTimeout, oauthCookieMaxAge);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthCookieLoginTimeout = null;
        String oauthCookieMaxAge = null;
        ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo response = api.comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(post, apply, delete, action, $location, propertylist, oauthCookieLoginTimeout, oauthCookieMaxAge);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo response = api.comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(post, apply, delete, action, $location, propertylist, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthImplTwitterProviderImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthProviderId = null;
        ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo response = api.comAdobeGraniteAuthOauthImplTwitterProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthOauthProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthConfigId = null;
        String oauthClientId = null;
        String oauthClientSecret = null;
        List<String> oauthScope = null;
        String oauthConfigProviderId = null;
        Boolean oauthCreateUsers = null;
        String oauthUseridProperty = null;
        Boolean forceStrictUsernameMatching = null;
        Boolean oauthEncodeUserids = null;
        Boolean oauthHashUserids = null;
        String oauthCallBackUrl = null;
        Boolean oauthAccessTokenPersist = null;
        Boolean oauthAccessTokenPersistCookie = null;
        Boolean oauthCsrfStateProtection = null;
        Boolean oauthRedirectRequestParams = null;
        Boolean oauthConfigSiblingsAllow = null;
        ComAdobeGraniteAuthOauthProviderInfo response = api.comAdobeGraniteAuthOauthProvider(post, apply, delete, action, $location, propertylist, oauthConfigId, oauthClientId, oauthClientSecret, oauthScope, oauthConfigProviderId, oauthCreateUsers, oauthUseridProperty, forceStrictUsernameMatching, oauthEncodeUserids, oauthHashUserids, oauthCallBackUrl, oauthAccessTokenPersist, oauthAccessTokenPersistCookie, oauthCsrfStateProtection, oauthRedirectRequestParams, oauthConfigSiblingsAllow);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> supportedPaths = null;
        ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo response = api.comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(post, apply, delete, action, $location, propertylist, supportedPaths);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthSamlSamlAuthenticationHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> path = null;
        Integer serviceRanking = null;
        String idpUrl = null;
        String idpCertAlias = null;
        Boolean idpHttpRedirect = null;
        String serviceProviderEntityId = null;
        String assertionConsumerServiceURL = null;
        String spPrivateKeyAlias = null;
        String keyStorePassword = null;
        String defaultRedirectUrl = null;
        String userIDAttribute = null;
        Boolean useEncryption = null;
        Boolean createUser = null;
        String userIntermediatePath = null;
        Boolean addGroupMemberships = null;
        String groupMembershipAttribute = null;
        List<String> defaultGroups = null;
        String nameIdFormat = null;
        List<String> synchronizeAttributes = null;
        Boolean handleLogout = null;
        String logoutUrl = null;
        Integer clockTolerance = null;
        String digestMethod = null;
        String signatureMethod = null;
        String identitySyncType = null;
        String idpIdentifier = null;
        ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo response = api.comAdobeGraniteAuthSamlSamlAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, userIntermediatePath, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, identitySyncType, idpIdentifier);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        Integer serviceRanking = null;
        String jaasControlFlag = null;
        String jaasRealmName = null;
        Integer jaasRanking = null;
        List<String> headers = null;
        List<String> cookies = null;
        List<String> parameters = null;
        List<String> usermap = null;
        String format = null;
        String trustedCredentialsAttribute = null;
        ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo response = api.comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking, jaasControlFlag, jaasRealmName, jaasRanking, headers, cookies, parameters, usermap, format, trustedCredentialsAttribute);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplCodeCacheHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        Integer minimumCodeCacheSize = null;
        ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo response = api.comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, minimumCodeCacheSize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo response = api.comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplDavExBundleHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo response = api.comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        List<String> ignoredBundles = null;
        ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo response = api.comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, ignoredBundles);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplJobsHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        Integer maxQueuedJobs = null;
        ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo response = api.comAdobeGraniteBundlesHcImplJobsHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, maxQueuedJobs);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo response = api.comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo response = api.comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo response = api.comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo response = api.comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo response = api.comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCommentsInternalCommentReplicationContentFilterFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> replicateCommentResourceTypes = null;
        ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFactoryInfo response = api.comAdobeGraniteCommentsInternalCommentReplicationContentFilterFactory(post, apply, delete, action, $location, propertylist, replicateCommentResourceTypes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> compatgroups = null;
        Boolean enabled = null;
        ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo response = api.comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(post, apply, delete, action, $location, propertylist, compatgroups, enabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCompatrouterImplRoutingConfigTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String id = null;
        String compatPath = null;
        String newPath = null;
        ComAdobeGraniteCompatrouterImplRoutingConfigInfo response = api.comAdobeGraniteCompatrouterImplRoutingConfig(post, apply, delete, action, $location, propertylist, id, compatPath, newPath);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCompatrouterImplSwitchMappingConfigTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String group = null;
        List<String> ids = null;
        ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo response = api.comAdobeGraniteCompatrouterImplSwitchMappingConfig(post, apply, delete, action, $location, propertylist, group, ids);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingStrategyTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        List<String> fallbackPaths = null;
        ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingStrategyInfo response = api.comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingStrategy(post, apply, delete, action, $location, propertylist, enabled, fallbackPaths);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteContexthubImplContextHubImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean comAdobeGraniteContexthubSilentMode = null;
        Boolean comAdobeGraniteContexthubShowUi = null;
        ComAdobeGraniteContexthubImplContextHubImplInfo response = api.comAdobeGraniteContexthubImplContextHubImpl(post, apply, delete, action, $location, propertylist, comAdobeGraniteContexthubSilentMode, comAdobeGraniteContexthubShowUi);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCorsImplCORSPolicyImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> alloworigin = null;
        List<String> alloworiginregexp = null;
        List<String> allowedpaths = null;
        List<String> exposedheaders = null;
        Integer maxage = null;
        List<String> supportedheaders = null;
        List<String> supportedmethods = null;
        Boolean supportscredentials = null;
        ComAdobeGraniteCorsImplCORSPolicyImplInfo response = api.comAdobeGraniteCorsImplCORSPolicyImpl(post, apply, delete, action, $location, propertylist, alloworigin, alloworiginregexp, allowedpaths, exposedheaders, maxage, supportedheaders, supportedmethods, supportscredentials);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCsrfImplCSRFFilterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> filterMethods = null;
        Boolean filterEnableSafeUserAgents = null;
        List<String> filterSafeUserAgents = null;
        List<String> filterExcludedPaths = null;
        ComAdobeGraniteCsrfImplCSRFFilterInfo response = api.comAdobeGraniteCsrfImplCSRFFilter(post, apply, delete, action, $location, propertylist, filterMethods, filterEnableSafeUserAgents, filterSafeUserAgents, filterExcludedPaths);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteCsrfImplCSRFServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer csrfTokenExpiresIn = null;
        String slingAuthRequirements = null;
        ComAdobeGraniteCsrfImplCSRFServletInfo response = api.comAdobeGraniteCsrfImplCSRFServlet(post, apply, delete, action, $location, propertylist, csrfTokenExpiresIn, slingAuthRequirements);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSecretProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String username = null;
        String encryptedPassword = null;
        ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSecretProviderInfo response = api.comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSecretProvider(post, apply, delete, action, $location, propertylist, name, username, encryptedPassword);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        String agentName = null;
        String diffPath = null;
        String observedPath = null;
        String serviceName = null;
        String propertyNames = null;
        Integer distributionDelay = null;
        String serviceUserTarget = null;
        ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo response = api.comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(post, apply, delete, action, $location, propertylist, enabled, agentName, diffPath, observedPath, serviceName, propertyNames, distributionDelay, serviceUserTarget);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplDiffDiffEventListenerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String diffPath = null;
        String serviceName = null;
        String serviceUserTarget = null;
        ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo response = api.comAdobeGraniteDistributionCoreImplDiffDiffEventListener(post, apply, delete, action, $location, propertylist, diffPath, serviceName, serviceUserTarget);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplDistributionToReplicationEventTransformerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> importerName = null;
        ComAdobeGraniteDistributionCoreImplDistributionToReplicationEventTransformerInfo response = api.comAdobeGraniteDistributionCoreImplDistributionToReplicationEventTransformer(post, apply, delete, action, $location, propertylist, importerName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicationAgentProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerName = null;
        Boolean forwardRequests = null;
        ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicationAgentProviderInfo response = api.comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicationAgentProvider(post, apply, delete, action, $location, propertylist, providerName, forwardRequests);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplReplicationDistributionTransportHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean forwardRequests = null;
        ComAdobeGraniteDistributionCoreImplReplicationDistributionTransportHandlerInfo response = api.comAdobeGraniteDistributionCoreImplReplicationDistributionTransportHandler(post, apply, delete, action, $location, propertylist, forwardRequests);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteDistributionCoreImplTransportAccessTokenDistributionTransportSecretProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String serviceName = null;
        String userId = null;
        String accessTokenProviderTarget = null;
        ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistributionTransportSecretProviderInfo response = api.comAdobeGraniteDistributionCoreImplTransportAccessTokenDistributionTransportSecretProvider(post, apply, delete, action, $location, propertylist, name, serviceName, userId, accessTokenProviderTarget);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteFragsImplCheckHttpHeaderFlagTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String featureName = null;
        String featureDescription = null;
        String httpHeaderName = null;
        String httpHeaderValuepattern = null;
        ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo response = api.comAdobeGraniteFragsImplCheckHttpHeaderFlag(post, apply, delete, action, $location, propertylist, featureName, featureDescription, httpHeaderName, httpHeaderValuepattern);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteFragsImplRandomFeatureTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String featureName = null;
        String featureDescription = null;
        String activePercentage = null;
        String cookieName = null;
        Integer cookieMaxAge = null;
        ComAdobeGraniteFragsImplRandomFeatureInfo response = api.comAdobeGraniteFragsImplRandomFeature(post, apply, delete, action, $location, propertylist, featureName, featureDescription, activePercentage, cookieName, cookieMaxAge);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteHttpcacheFileFileCacheStoreTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String comAdobeGraniteHttpcacheFileDocumentRoot = null;
        String comAdobeGraniteHttpcacheFileIncludeHost = null;
        ComAdobeGraniteHttpcacheFileFileCacheStoreInfo response = api.comAdobeGraniteHttpcacheFileFileCacheStore(post, apply, delete, action, $location, propertylist, comAdobeGraniteHttpcacheFileDocumentRoot, comAdobeGraniteHttpcacheFileIncludeHost);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteHttpcacheImplOuterCacheFilterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> comAdobeGraniteHttpcacheUrlPaths = null;
        ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo response = api.comAdobeGraniteHttpcacheImplOuterCacheFilter(post, apply, delete, action, $location, propertylist, comAdobeGraniteHttpcacheUrlPaths);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteI18nImplBundlePseudoTranslationsTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> pseudoPatterns = null;
        ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo response = api.comAdobeGraniteI18nImplBundlePseudoTranslations(post, apply, delete, action, $location, propertylist, pseudoPatterns);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteI18nImplPreferencesLocaleResolverServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String securityPreferencesName = null;
        ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo response = api.comAdobeGraniteI18nImplPreferencesLocaleResolverService(post, apply, delete, action, $location, propertylist, securityPreferencesName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteInfocollectorInfoCollectorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean graniteInfocollectorIncludeThreadDumps = null;
        Boolean graniteInfocollectorIncludeHeapDump = null;
        ComAdobeGraniteInfocollectorInfoCollectorInfo response = api.comAdobeGraniteInfocollectorInfoCollector(post, apply, delete, action, $location, propertylist, graniteInfocollectorIncludeThreadDumps, graniteInfocollectorIncludeHeapDump);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer comAdobeGraniteJettySslPort = null;
        String comAdobeGraniteJettySslKeystoreUser = null;
        String comAdobeGraniteJettySslKeystorePassword = null;
        List<String> comAdobeGraniteJettySslCiphersuitesExcluded = null;
        List<String> comAdobeGraniteJettySslCiphersuitesIncluded = null;
        String comAdobeGraniteJettySslClientCertificate = null;
        ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo response = api.comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(post, apply, delete, action, $location, propertylist, comAdobeGraniteJettySslPort, comAdobeGraniteJettySslKeystoreUser, comAdobeGraniteJettySslKeystorePassword, comAdobeGraniteJettySslCiphersuitesExcluded, comAdobeGraniteJettySslCiphersuitesIncluded, comAdobeGraniteJettySslClientCertificate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteLicenseImplLicenseCheckFilterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer checkInternval = null;
        List<String> excludeIds = null;
        Boolean encryptPing = null;
        ComAdobeGraniteLicenseImplLicenseCheckFilterInfo response = api.comAdobeGraniteLicenseImplLicenseCheckFilter(post, apply, delete, action, $location, propertylist, checkInternval, excludeIds, encryptPing);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteLoggingImplLogAnalyserImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer messagesQueueSize = null;
        List<String> loggerConfig = null;
        Integer messagesSize = null;
        ComAdobeGraniteLoggingImplLogAnalyserImplInfo response = api.comAdobeGraniteLoggingImplLogAnalyserImpl(post, apply, delete, action, $location, propertylist, messagesQueueSize, loggerConfig, messagesSize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteLoggingImplLogErrorHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo response = api.comAdobeGraniteLoggingImplLogErrorHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean graniteMaintenanceMandatory = null;
        String jobTopics = null;
        ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo response = api.comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(post, apply, delete, action, $location, propertylist, graniteMaintenanceMandatory, jobTopics);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jobTopics = null;
        ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo response = api.comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(post, apply, delete, action, $location, propertylist, jobTopics);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fullGcDays = null;
        ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo response = api.comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(post, apply, delete, action, $location, propertylist, fullGcDays);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteMonitoringImplScriptConfigImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String scriptFilename = null;
        String scriptDisplay = null;
        String scriptPath = null;
        List<String> scriptPlatform = null;
        Integer interval = null;
        String jmxdomain = null;
        ComAdobeGraniteMonitoringImplScriptConfigImplInfo response = api.comAdobeGraniteMonitoringImplScriptConfigImpl(post, apply, delete, action, $location, propertylist, scriptFilename, scriptDisplay, scriptPath, scriptPlatform, interval, jmxdomain);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        String jaasControlFlag = null;
        String jaasRealmName = null;
        Integer jaasRanking = null;
        Boolean oauthOfflineValidation = null;
        ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHandlerInfo response = api.comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, jaasControlFlag, jaasRealmName, jaasRanking, oauthOfflineValidation);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOauthServerImplAccessTokenCleanupTaskTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo response = api.comAdobeGraniteOauthServerImplAccessTokenCleanupTask(post, apply, delete, action, $location, propertylist, schedulerExpression);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean oauthClientRevocationActive = null;
        ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo response = api.comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(post, apply, delete, action, $location, propertylist, oauthClientRevocationActive);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletPaths = null;
        Boolean oauthRevocationActive = null;
        ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo response = api.comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(post, apply, delete, action, $location, propertylist, slingServletPaths, oauthRevocationActive);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String oauthIssuer = null;
        String oauthAccessTokenExpiresIn = null;
        String osgiHttpWhiteboardServletPattern = null;
        String osgiHttpWhiteboardContextSelect = null;
        ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo response = api.comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(post, apply, delete, action, $location, propertylist, oauthIssuer, oauthAccessTokenExpiresIn, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean oauthTokenRevocationActive = null;
        ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo response = api.comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(post, apply, delete, action, $location, propertylist, oauthTokenRevocationActive);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOffloadingImplOffloadingConfiguratorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String offloadingTransporter = null;
        Boolean offloadingCleanupPayload = null;
        ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo response = api.comAdobeGraniteOffloadingImplOffloadingConfigurator(post, apply, delete, action, $location, propertylist, offloadingTransporter, offloadingCleanupPayload);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOffloadingImplOffloadingJobClonerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean offloadingJobclonerEnabled = null;
        ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo response = api.comAdobeGraniteOffloadingImplOffloadingJobCloner(post, apply, delete, action, $location, propertylist, offloadingJobclonerEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOffloadingImplOffloadingJobOffloaderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean offloadingOffloaderEnabled = null;
        ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo response = api.comAdobeGraniteOffloadingImplOffloadingJobOffloader(post, apply, delete, action, $location, propertylist, offloadingOffloaderEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean offloadingAgentmanagerEnabled = null;
        ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo response = api.comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(post, apply, delete, action, $location, propertylist, offloadingAgentmanagerEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTransporterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String defaultTransportAgentToWorkerPrefix = null;
        String defaultTransportAgentToMasterPrefix = null;
        String defaultTransportInputPackage = null;
        String defaultTransportOutputPackage = null;
        Boolean defaultTransportReplicationSynchronous = null;
        Boolean defaultTransportContentpackage = null;
        Boolean offloadingTransporterDefaultEnabled = null;
        ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTransporterInfo response = api.comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTransporter(post, apply, delete, action, $location, propertylist, defaultTransportAgentToWorkerPrefix, defaultTransportAgentToMasterPrefix, defaultTransportInputPackage, defaultTransportOutputPackage, defaultTransportReplicationSynchronous, defaultTransportContentpackage, offloadingTransporterDefaultEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer omnisearchSuggestionRequiretextMin = null;
        Boolean omnisearchSuggestionSpellcheckRequire = null;
        ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo response = api.comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(post, apply, delete, action, $location, propertylist, omnisearchSuggestionRequiretextMin, omnisearchSuggestionSpellcheckRequire);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteOptoutImplOptOutServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> optoutCookies = null;
        List<String> optoutHeaders = null;
        List<String> optoutWhitelistCookies = null;
        ComAdobeGraniteOptoutImplOptOutServiceImplInfo response = api.comAdobeGraniteOptoutImplOptOutServiceImpl(post, apply, delete, action, $location, propertylist, optoutCookies, optoutHeaders, optoutWhitelistCookies);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer indexingCriticalThreshold = null;
        Integer indexingWarnThreshold = null;
        List<String> hcTags = null;
        ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo response = api.comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(post, apply, delete, action, $location, propertylist, indexingCriticalThreshold, indexingWarnThreshold, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteQueriesImplHcLargeIndexHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer largeIndexCriticalThreshold = null;
        Integer largeIndexWarnThreshold = null;
        List<String> hcTags = null;
        ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo response = api.comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(post, apply, delete, action, $location, propertylist, largeIndexCriticalThreshold, largeIndexWarnThreshold, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo response = api.comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer getPeriod = null;
        ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo response = api.comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(post, apply, delete, action, $location, propertylist, getPeriod);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo response = api.comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer numberOfRetriesAllowed = null;
        List<String> hcTags = null;
        ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo response = api.comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(post, apply, delete, action, $location, propertylist, numberOfRetriesAllowed, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCheckInfo response = api.comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo response = api.comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        List<String> excludeSearchPath = null;
        ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCheckInfo response = api.comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, excludeSearchPath);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo response = api.comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheckInfo response = api.comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        List<String> accountLogins = null;
        List<String> consoleLogins = null;
        ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo response = api.comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, accountLogins, consoleLogins);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        Integer diskSpaceWarnThreshold = null;
        Integer diskSpaceErrorThreshold = null;
        ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo response = api.comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, diskSpaceWarnThreshold, diskSpaceErrorThreshold);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo response = api.comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryImplCommitStatsConfigTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        Integer intervalSeconds = null;
        Integer commitsPerIntervalThreshold = null;
        Integer maxLocationLength = null;
        Integer maxDetailsShown = null;
        Integer minDetailsPercentage = null;
        List<String> threadMatchers = null;
        Integer maxGreedyDepth = null;
        String greedyStackMatchers = null;
        List<String> stackFilters = null;
        List<String> stackMatchers = null;
        List<String> stackCategorizers = null;
        List<String> stackShorteners = null;
        ComAdobeGraniteRepositoryImplCommitStatsConfigInfo response = api.comAdobeGraniteRepositoryImplCommitStatsConfig(post, apply, delete, action, $location, propertylist, enabled, intervalSeconds, commitsPerIntervalThreshold, maxLocationLength, maxDetailsShown, minDetailsPercentage, threadMatchers, maxGreedyDepth, greedyStackMatchers, stackFilters, stackMatchers, stackCategorizers, stackShorteners);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRepositoryServiceUserConfigurationTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        Boolean serviceusersSimpleSubjectPopulation = null;
        List<String> serviceusersList = null;
        ComAdobeGraniteRepositoryServiceUserConfigurationInfo response = api.comAdobeGraniteRepositoryServiceUserConfiguration(post, apply, delete, action, $location, propertylist, serviceRanking, serviceusersSimpleSubjectPopulation, serviceusersList);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImplInfo response = api.comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImpl(post, apply, delete, action, $location, propertylist, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteResourcestatusImplCompositeStatusTypeTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        List<String> types = null;
        ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo response = api.comAdobeGraniteResourcestatusImplCompositeStatusType(post, apply, delete, action, $location, propertylist, name, types);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteResourcestatusImplStatusResourceProviderImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerRoot = null;
        ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo response = api.comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(post, apply, delete, action, $location, propertylist, providerRoot);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRestAssetsImplAssetContentDispositionFilterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean mimeAllowEmpty = null;
        List<String> mimeAllowed = null;
        ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo response = api.comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(post, apply, delete, action, $location, propertylist, mimeAllowEmpty, mimeAllowed);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerRoots = null;
        ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo response = api.comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(post, apply, delete, action, $location, propertylist, providerRoots);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteRestImplServletDefaultGETServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer defaultLimit = null;
        Boolean useAbsoluteUri = null;
        ComAdobeGraniteRestImplServletDefaultGETServletInfo response = api.comAdobeGraniteRestImplServletDefaultGETServlet(post, apply, delete, action, $location, propertylist, defaultLimit, useAbsoluteUri);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> hcTags = null;
        ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationServletInfo response = api.comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationServlet(post, apply, delete, action, $location, propertylist, hcTags);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteSecurityUserUserPropertiesServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String adapterCondition = null;
        List<String> graniteUserpropertiesNodetypes = null;
        List<String> graniteUserpropertiesResourcetypes = null;
        ComAdobeGraniteSecurityUserUserPropertiesServiceInfo response = api.comAdobeGraniteSecurityUserUserPropertiesService(post, apply, delete, action, $location, propertylist, adapterCondition, graniteUserpropertiesNodetypes, graniteUserpropertiesResourcetypes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteSocialgraphImplSocialGraphFactoryImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String group2memberRelationshipOutgoing = null;
        List<String> group2memberExcludedOutgoing = null;
        String group2memberRelationshipIncoming = null;
        List<String> group2memberExcludedIncoming = null;
        ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo response = api.comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(post, apply, delete, action, $location, propertylist, group2memberRelationshipOutgoing, group2memberExcludedOutgoing, group2memberRelationshipIncoming, group2memberExcludedIncoming);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        String jmxObjectname = null;
        ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo response = api.comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(post, apply, delete, action, $location, propertylist, schedulerExpression, jmxObjectname);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String adapterCondition = null;
        ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo response = api.comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(post, apply, delete, action, $location, propertylist, adapterCondition);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean archivingEnabled = null;
        String schedulerExpression = null;
        Integer archiveSinceDaysCompleted = null;
        ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo response = api.comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(post, apply, delete, action, $location, propertylist, archivingEnabled, schedulerExpression, archiveSinceDaysCompleted);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean purgeCompleted = null;
        Integer completedAge = null;
        Boolean purgeActive = null;
        Integer activeAge = null;
        Integer saveThreshold = null;
        ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo response = api.comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(post, apply, delete, action, $location, propertylist, purgeCompleted, completedAge, purgeActive, activeAge, saveThreshold);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String adapterCondition = null;
        List<String> taskmanagerAdmingroups = null;
        ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactoryInfo response = api.comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactory(post, apply, delete, action, $location, propertylist, adapterCondition, taskmanagerAdmingroups);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteThreaddumpThreadDumpCollectorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer schedulerPeriod = null;
        String schedulerRunOn = null;
        Boolean graniteThreaddumpEnabled = null;
        Integer graniteThreaddumpDumpsPerFile = null;
        Boolean graniteThreaddumpEnableGzipCompression = null;
        Boolean graniteThreaddumpEnableDirectoriesCompression = null;
        Boolean graniteThreaddumpEnableJStack = null;
        Integer graniteThreaddumpMaxBackupDays = null;
        String graniteThreaddumpBackupCleanTrigger = null;
        ComAdobeGraniteThreaddumpThreadDumpCollectorInfo response = api.comAdobeGraniteThreaddumpThreadDumpCollector(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerRunOn, graniteThreaddumpEnabled, graniteThreaddumpDumpsPerFile, graniteThreaddumpEnableGzipCompression, graniteThreaddumpEnableDirectoriesCompression, graniteThreaddumpEnableJStack, graniteThreaddumpMaxBackupDays, graniteThreaddumpBackupCleanTrigger);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslationServiceFactoryImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String translationFactory = null;
        String defaultConnectorLabel = null;
        String defaultConnectorAttribution = null;
        String defaultConnectorWorkspaceId = null;
        String defaultConnectorSubscriptionKey = null;
        String languageMapLocation = null;
        String categoryMapLocation = null;
        Integer retryAttempts = null;
        Integer timeoutCount = null;
        ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslationServiceFactoryImplInfo response = api.comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslationServiceFactoryImpl(post, apply, delete, action, $location, propertylist, translationFactory, defaultConnectorLabel, defaultConnectorAttribution, defaultConnectorWorkspaceId, defaultConnectorSubscriptionKey, languageMapLocation, categoryMapLocation, retryAttempts, timeoutCount);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteTranslationCoreImplTranslationManagerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String defaultConnectorName = null;
        String defaultCategory = null;
        ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo response = api.comAdobeGraniteTranslationCoreImplTranslationManagerImpl(post, apply, delete, action, $location, propertylist, defaultConnectorName, defaultCategory);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean htmllibmanagerTiming = null;
        String htmllibmanagerDebugInitJs = null;
        Boolean htmllibmanagerMinify = null;
        Boolean htmllibmanagerDebug = null;
        Boolean htmllibmanagerGzip = null;
        Integer htmllibmanagerMaxDataUriSize = null;
        Integer htmllibmanagerMaxage = null;
        Boolean htmllibmanagerForceCQUrlInfo = null;
        String htmllibmanagerDefaultthemename = null;
        String htmllibmanagerDefaultuserthemename = null;
        String htmllibmanagerClientmanager = null;
        List<String> htmllibmanagerPathList = null;
        List<String> htmllibmanagerExcludedPathList = null;
        List<String> htmllibmanagerProcessorJs = null;
        List<String> htmllibmanagerProcessorCss = null;
        List<String> htmllibmanagerLongcachePatterns = null;
        String htmllibmanagerLongcacheFormat = null;
        Boolean htmllibmanagerUseFileSystemOutputCache = null;
        String htmllibmanagerFileSystemOutputCacheLocation = null;
        List<String> htmllibmanagerDisableReplacement = null;
        ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo response = api.comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(post, apply, delete, action, $location, propertylist, htmllibmanagerTiming, htmllibmanagerDebugInitJs, htmllibmanagerMinify, htmllibmanagerDebug, htmllibmanagerGzip, htmllibmanagerMaxDataUriSize, htmllibmanagerMaxage, htmllibmanagerForceCQUrlInfo, htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename, htmllibmanagerClientmanager, htmllibmanagerPathList, htmllibmanagerExcludedPathList, htmllibmanagerProcessorJs, htmllibmanagerProcessorCss, htmllibmanagerLongcachePatterns, htmllibmanagerLongcacheFormat, htmllibmanagerUseFileSystemOutputCache, htmllibmanagerFileSystemOutputCacheLocation, htmllibmanagerDisableReplacement);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo response = api.comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(post, apply, delete, action, $location, propertylist, enabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean graniteWorkflowWorkflowPublishEventServiceEnabled = null;
        ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo response = api.comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(post, apply, delete, action, $location, propertylist, graniteWorkflowWorkflowPublishEventServiceEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer bucketSize = null;
        ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo response = api.comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(post, apply, delete, action, $location, propertylist, bucketSize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer defaultTimeout = null;
        Integer maxTimeout = null;
        Integer defaultPeriod = null;
        ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo response = api.comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(post, apply, delete, action, $location, propertylist, defaultTimeout, maxTimeout, defaultPeriod);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCoreJobJobHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> jobTopics = null;
        Boolean allowSelfProcessTermination = null;
        ComAdobeGraniteWorkflowCoreJobJobHandlerInfo response = api.comAdobeGraniteWorkflowCoreJobJobHandler(post, apply, delete, action, $location, propertylist, jobTopics, allowSelfProcessTermination);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jobTopics = null;
        ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumerInfo response = api.comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumer(post, apply, delete, action, $location, propertylist, jobTopics);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCorePayloadMapCacheTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> getSystemWorkflowModels = null;
        String getPackageRootPath = null;
        ComAdobeGraniteWorkflowCorePayloadMapCacheInfo response = api.comAdobeGraniteWorkflowCorePayloadMapCache(post, apply, delete, action, $location, propertylist, getSystemWorkflowModels, getPackageRootPath);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> payloadMoveWhiteList = null;
        Boolean payloadMoveHandleFromWorkflowProcess = null;
        ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo response = api.comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(post, apply, delete, action, $location, propertylist, payloadMoveWhiteList, payloadMoveHandleFromWorkflowProcess);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCoreWorkflowConfigTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWorkflowConfigWorkflowPackagesRootPath = null;
        Boolean cqWorkflowConfigWorkflowProcessLegacyMode = null;
        Boolean cqWorkflowConfigAllowLocking = null;
        ComAdobeGraniteWorkflowCoreWorkflowConfigInfo response = api.comAdobeGraniteWorkflowCoreWorkflowConfig(post, apply, delete, action, $location, propertylist, cqWorkflowConfigWorkflowPackagesRootPath, cqWorkflowConfigWorkflowProcessLegacyMode, cqWorkflowConfigAllowLocking);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowCoreWorkflowSessionFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String graniteWorkflowinboxSortPropertyName = null;
        String graniteWorkflowinboxSortOrder = null;
        Integer cqWorkflowJobRetry = null;
        List<String> cqWorkflowSuperuser = null;
        Integer graniteWorkflowInboxQuerySize = null;
        Boolean graniteWorkflowAdminUserGroupFilter = null;
        Boolean graniteWorkflowEnforceWorkitemAssigneePermissions = null;
        Boolean graniteWorkflowEnforceWorkflowInitiatorPermissions = null;
        Boolean graniteWorkflowInjectTenantIdInJobTopics = null;
        Integer graniteWorkflowMaxPurgeSaveThreshold = null;
        Integer graniteWorkflowMaxPurgeQueryCount = null;
        ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo response = api.comAdobeGraniteWorkflowCoreWorkflowSessionFactory(post, apply, delete, action, $location, propertylist, graniteWorkflowinboxSortPropertyName, graniteWorkflowinboxSortOrder, cqWorkflowJobRetry, cqWorkflowSuperuser, graniteWorkflowInboxQuerySize, graniteWorkflowAdminUserGroupFilter, graniteWorkflowEnforceWorkitemAssigneePermissions, graniteWorkflowEnforceWorkflowInitiatorPermissions, graniteWorkflowInjectTenantIdInJobTopics, graniteWorkflowMaxPurgeSaveThreshold, graniteWorkflowMaxPurgeQueryCount);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeGraniteWorkflowPurgeSchedulerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String scheduledpurgeName = null;
        String scheduledpurgeWorkflowStatus = null;
        List<String> scheduledpurgeModelIds = null;
        Integer scheduledpurgeDaysold = null;
        ComAdobeGraniteWorkflowPurgeSchedulerInfo response = api.comAdobeGraniteWorkflowPurgeScheduler(post, apply, delete, action, $location, propertylist, scheduledpurgeName, scheduledpurgeWorkflowStatus, scheduledpurgeModelIds, scheduledpurgeDaysold);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeOctopusNcommBootstrapTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxConnections = null;
        Integer maxRequests = null;
        Integer requestTimeout = null;
        Integer requestRetries = null;
        Integer launchTimeout = null;
        ComAdobeOctopusNcommBootstrapInfo response = api.comAdobeOctopusNcommBootstrap(post, apply, delete, action, $location, propertylist, maxConnections, maxRequests, requestTimeout, requestRetries, launchTimeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String communitiesIntegrationLivefyreSlingEventFilter = null;
        ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullServletInfo response = api.comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullServlet(post, apply, delete, action, $location, propertylist, communitiesIntegrationLivefyreSlingEventFilter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comAdobeXmpWorkerFilesNcommXMPFilesNCommTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String maxConnections = null;
        String maxRequests = null;
        String requestTimeout = null;
        String logDir = null;
        ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo response = api.comAdobeXmpWorkerFilesNcommXMPFilesNComm(post, apply, delete, action, $location, propertylist, maxConnections, maxRequests, requestTimeout, logDir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCommonsDatasourceJdbcpoolJdbcPoolServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jdbcDriverClass = null;
        String jdbcConnectionUri = null;
        String jdbcUsername = null;
        String jdbcPassword = null;
        String jdbcValidationQuery = null;
        Boolean defaultReadonly = null;
        Boolean defaultAutocommit = null;
        Integer poolSize = null;
        Integer poolMaxWaitMsec = null;
        String datasourceName = null;
        List<String> datasourceSvcProperties = null;
        ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo response = api.comDayCommonsDatasourceJdbcpoolJdbcPoolService(post, apply, delete, action, $location, propertylist, jdbcDriverClass, jdbcConnectionUri, jdbcUsername, jdbcPassword, jdbcValidationQuery, defaultReadonly, defaultAutocommit, poolSize, poolMaxWaitMsec, datasourceName, datasourceSvcProperties);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCommonsHttpclientTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean proxyEnabled = null;
        String proxyHost = null;
        String proxyUser = null;
        String proxyPassword = null;
        String proxyNtlmHost = null;
        String proxyNtlmDomain = null;
        List<String> proxyExceptions = null;
        ComDayCommonsHttpclientInfo response = api.comDayCommonsHttpclient(post, apply, delete, action, $location, propertylist, proxyEnabled, proxyHost, proxyUser, proxyPassword, proxyNtlmHost, proxyNtlmDomain, proxyExceptions);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsImplStorePropertiesChangeListenerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqStoreListenerAdditionalStorePaths = null;
        ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo response = api.comDayCqAnalyticsImplStorePropertiesChangeListener(post, apply, delete, action, $location, propertylist, cqStoreListenerAdditionalStorePaths);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsSitecatalystImplExporterClassificationsExporterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> allowedPaths = null;
        Integer cqAnalyticsSaintExporterPagesize = null;
        ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporterInfo response = api.comDayCqAnalyticsSitecatalystImplExporterClassificationsExporter(post, apply, delete, action, $location, propertylist, allowedPaths, cqAnalyticsSaintExporterPagesize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsSitecatalystImplImporterReportImporterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer reportFetchAttempts = null;
        Integer reportFetchDelay = null;
        ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo response = api.comDayCqAnalyticsSitecatalystImplImporterReportImporter(post, apply, delete, action, $location, propertylist, reportFetchAttempts, reportFetchDelay);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqAnalyticsAdapterfactoryContextstores = null;
        ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo response = api.comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(post, apply, delete, action, $location, propertylist, cqAnalyticsAdapterfactoryContextstores);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqAnalyticsSitecatalystServiceDatacenterUrl = null;
        List<String> devhostnamepatterns = null;
        Integer connectionTimeout = null;
        Integer socketTimeout = null;
        ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo response = api.comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(post, apply, delete, action, $location, propertylist, cqAnalyticsSitecatalystServiceDatacenterUrl, devhostnamepatterns, connectionTimeout, socketTimeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqAnalyticsTestandtargetAccountoptionsupdaterEnabled = null;
        ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo response = api.comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetAccountoptionsupdaterEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled = null;
        ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo response = api.comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled = null;
        ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo response = api.comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplSegmentImporterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqAnalyticsTestandtargetSegmentimporterEnabled = null;
        ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo response = api.comDayCqAnalyticsTestandtargetImplSegmentImporter(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetSegmentimporterEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplServiceWebServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String endpointUri = null;
        Integer connectionTimeout = null;
        Integer socketTimeout = null;
        ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo response = api.comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(post, apply, delete, action, $location, propertylist, endpointUri, connectionTimeout, socketTimeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplServletsAdminServerServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String testandtargetEndpointUrl = null;
        ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo response = api.comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(post, apply, delete, action, $location, propertylist, testandtargetEndpointUrl);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cqAnalyticsTestandtargetApiUrl = null;
        Integer cqAnalyticsTestandtargetTimeout = null;
        Integer cqAnalyticsTestandtargetSockettimeout = null;
        String cqAnalyticsTestandtargetRecommendationsUrlReplace = null;
        String cqAnalyticsTestandtargetRecommendationsUrlReplacewith = null;
        ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo response = api.comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetApiUrl, cqAnalyticsTestandtargetTimeout, cqAnalyticsTestandtargetSockettimeout, cqAnalyticsTestandtargetRecommendationsUrlReplace, cqAnalyticsTestandtargetRecommendationsUrlReplacewith);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAuthImplCugCugSupportImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cugExemptedPrincipals = null;
        Boolean cugEnabled = null;
        String cugPrincipalsRegex = null;
        String cugPrincipalsReplacement = null;
        ComDayCqAuthImplCugCugSupportImplInfo response = api.comDayCqAuthImplCugCugSupportImpl(post, apply, delete, action, $location, propertylist, cugExemptedPrincipals, cugEnabled, cugPrincipalsRegex, cugPrincipalsReplacement);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqAuthImplLoginSelectorHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        Integer serviceRanking = null;
        List<String> authLoginselectorMappings = null;
        List<String> authLoginselectorChangepwMappings = null;
        String authLoginselectorDefaultloginpage = null;
        String authLoginselectorDefaultchangepwpage = null;
        List<String> authLoginselectorHandle = null;
        Boolean authLoginselectorHandleAllExtensions = null;
        ComDayCqAuthImplLoginSelectorHandlerInfo response = api.comDayCqAuthImplLoginSelectorHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking, authLoginselectorMappings, authLoginselectorChangepwMappings, authLoginselectorDefaultloginpage, authLoginselectorDefaultchangepwpage, authLoginselectorHandle, authLoginselectorHandleAllExtensions);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqCommonsImplExternalizerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> externalizerDomains = null;
        String externalizerHost = null;
        String externalizerContextpath = null;
        Boolean externalizerEncodedpath = null;
        ComDayCqCommonsImplExternalizerImplInfo response = api.comDayCqCommonsImplExternalizerImpl(post, apply, delete, action, $location, propertylist, externalizerDomains, externalizerHost, externalizerContextpath, externalizerEncodedpath);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqCommonsServletsRootMappingServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String rootmappingTarget = null;
        ComDayCqCommonsServletsRootMappingServletInfo response = api.comDayCqCommonsServletsRootMappingServlet(post, apply, delete, action, $location, propertylist, rootmappingTarget);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> codeupgradetasks = null;
        List<String> codeupgradetaskfilters = null;
        ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckerInfo response = api.comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecker(post, apply, delete, action, $location, propertylist, codeupgradetasks, codeupgradetaskfilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> upgradeTaskIgnoreList = null;
        ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo response = api.comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(post, apply, delete, action, $location, propertylist, upgradeTaskIgnoreList);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String effectiveBundleListPath = null;
        ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo response = api.comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(post, apply, delete, action, $location, propertylist, effectiveBundleListPath);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqContentsyncImplContentSyncManagerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String contentsyncFallbackAuthorizable = null;
        String contentsyncFallbackUpdateuser = null;
        ComDayCqContentsyncImplContentSyncManagerImplInfo response = api.comDayCqContentsyncImplContentSyncManagerImpl(post, apply, delete, action, $location, propertylist, contentsyncFallbackAuthorizable, contentsyncFallbackUpdateuser);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCommonsHandlerStandardImageHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer largeFileThreshold = null;
        Integer largeCommentThreshold = null;
        Boolean cqDamEnableExtMetaExtraction = null;
        ComDayCqDamCommonsHandlerStandardImageHandlerInfo response = api.comDayCqDamCommonsHandlerStandardImageHandler(post, apply, delete, action, $location, propertylist, largeFileThreshold, largeCommentThreshold, cqDamEnableExtMetaExtraction);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCommonsMetadataXmpFilterBlackWhiteTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean xmpFilterApplyWhitelist = null;
        List<String> xmpFilterWhitelist = null;
        Boolean xmpFilterApplyBlacklist = null;
        List<String> xmpFilterBlacklist = null;
        ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo response = api.comDayCqDamCommonsMetadataXmpFilterBlackWhite(post, apply, delete, action, $location, propertylist, xmpFilterApplyWhitelist, xmpFilterWhitelist, xmpFilterApplyBlacklist, xmpFilterBlacklist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCommonsUtilImplAssetCacheImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer largeFileMin = null;
        Boolean cacheApply = null;
        List<String> mimeTypes = null;
        ComDayCqDamCommonsUtilImplAssetCacheImplInfo response = api.comDayCqDamCommonsUtilImplAssetCacheImpl(post, apply, delete, action, $location, propertylist, largeFileMin, cacheApply, mimeTypes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamConfigAnnotationPdfDocumentWidth = null;
        Integer cqDamConfigAnnotationPdfDocumentHeight = null;
        Integer cqDamConfigAnnotationPdfDocumentPaddingHorizontal = null;
        Integer cqDamConfigAnnotationPdfDocumentPaddingVertical = null;
        Integer cqDamConfigAnnotationPdfFontSize = null;
        String cqDamConfigAnnotationPdfFontColor = null;
        String cqDamConfigAnnotationPdfFontFamily = null;
        String cqDamConfigAnnotationPdfFontLight = null;
        Integer cqDamConfigAnnotationPdfMarginTextImage = null;
        Integer cqDamConfigAnnotationPdfMinImageHeight = null;
        Integer cqDamConfigAnnotationPdfReviewStatusWidth = null;
        String cqDamConfigAnnotationPdfReviewStatusColorApproved = null;
        String cqDamConfigAnnotationPdfReviewStatusColorRejected = null;
        String cqDamConfigAnnotationPdfReviewStatusColorChangesRequested = null;
        Integer cqDamConfigAnnotationPdfAnnotationMarkerWidth = null;
        Integer cqDamConfigAnnotationPdfAssetMinheight = null;
        ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo response = api.comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(post, apply, delete, action, $location, propertylist, cqDamConfigAnnotationPdfDocumentWidth, cqDamConfigAnnotationPdfDocumentHeight, cqDamConfigAnnotationPdfDocumentPaddingHorizontal, cqDamConfigAnnotationPdfDocumentPaddingVertical, cqDamConfigAnnotationPdfFontSize, cqDamConfigAnnotationPdfFontColor, cqDamConfigAnnotationPdfFontFamily, cqDamConfigAnnotationPdfFontLight, cqDamConfigAnnotationPdfMarginTextImage, cqDamConfigAnnotationPdfMinImageHeight, cqDamConfigAnnotationPdfReviewStatusWidth, cqDamConfigAnnotationPdfReviewStatusColorApproved, cqDamConfigAnnotationPdfReviewStatusColorRejected, cqDamConfigAnnotationPdfReviewStatusColorChangesRequested, cqDamConfigAnnotationPdfAnnotationMarkerWidth, cqDamConfigAnnotationPdfAssetMinheight);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplAssetMoveListenerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        ComDayCqDamCoreImplAssetMoveListenerInfo response = api.comDayCqDamCoreImplAssetMoveListener(post, apply, delete, action, $location, propertylist, enabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplAssethomeAssetHomePageConfigurationTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean isEnabled = null;
        ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo response = api.comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(post, apply, delete, action, $location, propertylist, isEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamAdhocAssetSharePrezipMaxcontentsize = null;
        ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo response = api.comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(post, apply, delete, action, $location, propertylist, cqDamAdhocAssetSharePrezipMaxcontentsize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplCacheCQBufferedImageCacheTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamImageCacheMaxMemory = null;
        Integer cqDamImageCacheMaxAge = null;
        String cqDamImageCacheMaxDimension = null;
        ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo response = api.comDayCqDamCoreImplCacheCQBufferedImageCache(post, apply, delete, action, $location, propertylist, cqDamImageCacheMaxMemory, cqDamImageCacheMaxAge, cqDamImageCacheMaxDimension);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplDamChangeEventListenerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> changeeventlistenerObservedPaths = null;
        ComDayCqDamCoreImplDamChangeEventListenerInfo response = api.comDayCqDamCoreImplDamChangeEventListener(post, apply, delete, action, $location, propertylist, changeeventlistenerObservedPaths);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplDamEventPurgeServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        Integer maxSavedActivities = null;
        Integer saveInterval = null;
        Boolean enableActivityPurge = null;
        String eventTypes = null;
        ComDayCqDamCoreImplDamEventPurgeServiceInfo response = api.comDayCqDamCoreImplDamEventPurgeService(post, apply, delete, action, $location, propertylist, schedulerExpression, maxSavedActivities, saveInterval, enableActivityPurge, eventTypes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplDamEventRecorderImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
        Integer eventQueueLength = null;
        Boolean eventrecorderEnabled = null;
        List<String> eventrecorderBlacklist = null;
        String eventrecorderEventtypes = null;
        ComDayCqDamCoreImplDamEventRecorderImplInfo response = api.comDayCqDamCoreImplDamEventRecorderImpl(post, apply, delete, action, $location, propertylist, eventFilter, eventQueueLength, eventrecorderEnabled, eventrecorderBlacklist, eventrecorderEventtypes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplEventDamEventAuditListenerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
        Boolean enabled = null;
        ComDayCqDamCoreImplEventDamEventAuditListenerInfo response = api.comDayCqDamCoreImplEventDamEventAuditListener(post, apply, delete, action, $location, propertylist, eventFilter, enabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplExpiryNotificationJobImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamExpiryNotificationSchedulerIstimebased = null;
        String cqDamExpiryNotificationSchedulerTimebasedRule = null;
        Integer cqDamExpiryNotificationSchedulerPeriodRule = null;
        Boolean sendEmail = null;
        Integer assetExpiredLimit = null;
        Integer priorNotificationSeconds = null;
        String cqDamExpiryNotificationUrlProtocol = null;
        ComDayCqDamCoreImplExpiryNotificationJobImplInfo response = api.comDayCqDamCoreImplExpiryNotificationJobImpl(post, apply, delete, action, $location, propertylist, cqDamExpiryNotificationSchedulerIstimebased, cqDamExpiryNotificationSchedulerTimebasedRule, cqDamExpiryNotificationSchedulerPeriodRule, sendEmail, assetExpiredLimit, priorNotificationSeconds, cqDamExpiryNotificationUrlProtocol);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatureFlagTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean isEnabled = null;
        ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatureFlagInfo response = api.comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatureFlag(post, apply, delete, action, $location, propertylist, isEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplGfxCommonsGfxRendererTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean skipBufferedcache = null;
        ComDayCqDamCoreImplGfxCommonsGfxRendererInfo response = api.comDayCqDamCoreImplGfxCommonsGfxRenderer(post, apply, delete, action, $location, propertylist, skipBufferedcache);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplHandlerEPSFormatHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String mimetype = null;
        ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo response = api.comDayCqDamCoreImplHandlerEPSFormatHandler(post, apply, delete, action, $location, propertylist, mimetype);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplHandlerIndesignFormatHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> mimetype = null;
        ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo response = api.comDayCqDamCoreImplHandlerIndesignFormatHandler(post, apply, delete, action, $location, propertylist, mimetype);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplHandlerJpegHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamEnableExtMetaExtraction = null;
        Integer largeFileThreshold = null;
        Integer largeCommentThreshold = null;
        ComDayCqDamCoreImplHandlerJpegHandlerInfo response = api.comDayCqDamCoreImplHandlerJpegHandler(post, apply, delete, action, $location, propertylist, cqDamEnableExtMetaExtraction, largeFileThreshold, largeCommentThreshold);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplHandlerXmpNCommXMPHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> xmphandlerCqFormats = null;
        ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo response = api.comDayCqDamCoreImplHandlerXmpNCommXMPHandler(post, apply, delete, action, $location, propertylist, xmphandlerCqFormats);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplJmxAssetIndexUpdateMonitorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jmxObjectname = null;
        Boolean propertyMeasureEnabled = null;
        String propertyName = null;
        Integer propertyMaxWaitMs = null;
        BigDecimal propertyMaxRate = null;
        Boolean fulltextMeasureEnabled = null;
        String fulltextName = null;
        Integer fulltextMaxWaitMs = null;
        BigDecimal fulltextMaxRate = null;
        ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo response = api.comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(post, apply, delete, action, $location, propertylist, jmxObjectname, propertyMeasureEnabled, propertyName, propertyMaxWaitMs, propertyMaxRate, fulltextMeasureEnabled, fulltextName, fulltextMaxWaitMs, fulltextMaxRate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplJmxAssetMigrationMBeanImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jmxObjectname = null;
        ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo response = api.comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(post, apply, delete, action, $location, propertylist, jmxObjectname);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplJmxAssetUpdateMonitorImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jmxObjectname = null;
        Boolean active = null;
        ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo response = api.comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(post, apply, delete, action, $location, propertylist, jmxObjectname, active);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProviderServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String operation = null;
        Boolean emailEnabled = null;
        ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProviderServiceInfo response = api.comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProviderService(post, apply, delete, action, $location, propertylist, operation, emailEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProviderServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String operation = null;
        String operationIcon = null;
        String topicName = null;
        Boolean emailEnabled = null;
        ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProviderServiceInfo response = api.comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProviderService(post, apply, delete, action, $location, propertylist, operation, operationIcon, topicName, emailEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplLightboxLightboxServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletPaths = null;
        List<String> slingServletMethods = null;
        Boolean cqDamEnableAnonymous = null;
        ComDayCqDamCoreImplLightboxLightboxServletInfo response = api.comDayCqDamCoreImplLightboxLightboxServlet(post, apply, delete, action, $location, propertylist, slingServletPaths, slingServletMethods, cqDamEnableAnonymous);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplMetadataEditorSelectComponentHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> graniteColonData = null;
        ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo response = api.comDayCqDamCoreImplMetadataEditorSelectComponentHandler(post, apply, delete, action, $location, propertylist, graniteColonData);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamAllowAllMime = null;
        List<String> cqDamAllowedAssetMimes = null;
        ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo response = api.comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(post, apply, delete, action, $location, propertylist, cqDamAllowAllMime, cqDamAllowedAssetMimes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamDetectAssetMimeFromContent = null;
        ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo response = api.comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(post, apply, delete, action, $location, propertylist, cqDamDetectAssetMimeFromContent);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplMissingMetadataNotificationJobTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamMissingmetadataNotificationSchedulerIstimebased = null;
        String cqDamMissingmetadataNotificationSchedulerTimebasedRule = null;
        Integer cqDamMissingmetadataNotificationSchedulerPeriodRule = null;
        String cqDamMissingmetadataNotificationRecipient = null;
        ComDayCqDamCoreImplMissingMetadataNotificationJobInfo response = api.comDayCqDamCoreImplMissingMetadataNotificationJob(post, apply, delete, action, $location, propertylist, cqDamMissingmetadataNotificationSchedulerIstimebased, cqDamMissingmetadataNotificationSchedulerTimebasedRule, cqDamMissingmetadataNotificationSchedulerPeriodRule, cqDamMissingmetadataNotificationRecipient);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailProcessTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
        Boolean notifyOnComplete = null;
        ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailProcessInfo response = api.comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailProcess(post, apply, delete, action, $location, propertylist, processLabel, notifyOnComplete);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplProcessTextExtractionProcessTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> mimeTypes = null;
        Integer maxExtract = null;
        ComDayCqDamCoreImplProcessTextExtractionProcessInfo response = api.comDayCqDamCoreImplProcessTextExtractionProcess(post, apply, delete, action, $location, propertylist, mimeTypes, maxExtract);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplRenditionMakerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean xmpPropagate = null;
        List<String> xmpExcludes = null;
        ComDayCqDamCoreImplRenditionMakerImplInfo response = api.comDayCqDamCoreImplRenditionMakerImpl(post, apply, delete, action, $location, propertylist, xmpPropagate, xmpExcludes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplReportsReportExportServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer queryBatchSize = null;
        ComDayCqDamCoreImplReportsReportExportServiceInfo response = api.comDayCqDamCoreImplReportsReportExportService(post, apply, delete, action, $location, propertylist, queryBatchSize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplReportsReportPurgeServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        Integer maxSavedReports = null;
        Integer timeDuration = null;
        Boolean enableReportPurge = null;
        ComDayCqDamCoreImplReportsReportPurgeServiceInfo response = api.comDayCqDamCoreImplReportsReportPurgeService(post, apply, delete, action, $location, propertylist, schedulerExpression, maxSavedReports, timeDuration, enableReportPurge);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletAssetDownloadServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        ComDayCqDamCoreImplServletAssetDownloadServletInfo response = api.comDayCqDamCoreImplServletAssetDownloadServlet(post, apply, delete, action, $location, propertylist, enabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletAssetStatusServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamBatchStatusMaxassets = null;
        ComDayCqDamCoreImplServletAssetStatusServletInfo response = api.comDayCqDamCoreImplServletAssetStatusServlet(post, apply, delete, action, $location, propertylist, cqDamBatchStatusMaxassets);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletAssetXMPSearchServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamBatchIndesignMaxassets = null;
        ComDayCqDamCoreImplServletAssetXMPSearchServletInfo response = api.comDayCqDamCoreImplServletAssetXMPSearchServlet(post, apply, delete, action, $location, propertylist, cqDamBatchIndesignMaxassets);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletBatchMetadataServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqDamBatchMetadataAssetDefault = null;
        List<String> cqDamBatchMetadataCollectionDefault = null;
        Integer cqDamBatchMetadataMaxresources = null;
        ComDayCqDamCoreImplServletBatchMetadataServletInfo response = api.comDayCqDamCoreImplServletBatchMetadataServlet(post, apply, delete, action, $location, propertylist, cqDamBatchMetadataAssetDefault, cqDamBatchMetadataCollectionDefault, cqDamBatchMetadataMaxresources);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletBinaryProviderServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> slingServletResourceTypes = null;
        List<String> slingServletMethods = null;
        Boolean cqDamDrmEnable = null;
        ComDayCqDamCoreImplServletBinaryProviderServletInfo response = api.comDayCqDamCoreImplServletBinaryProviderServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletMethods, cqDamDrmEnable);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletCollectionServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqDamBatchCollectionProperties = null;
        Integer cqDamBatchCollectionMaxcollections = null;
        ComDayCqDamCoreImplServletCollectionServletInfo response = api.comDayCqDamCoreImplServletCollectionServlet(post, apply, delete, action, $location, propertylist, cqDamBatchCollectionProperties, cqDamBatchCollectionMaxcollections);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletCollectionsServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqDamBatchCollectionsProperties = null;
        Integer cqDamBatchCollectionsLimit = null;
        ComDayCqDamCoreImplServletCollectionsServletInfo response = api.comDayCqDamCoreImplServletCollectionsServlet(post, apply, delete, action, $location, propertylist, cqDamBatchCollectionsProperties, cqDamBatchCollectionsLimit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletCompanionServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String moreInfo = null;
        String mntOverlayDamGuiContentAssetsMoreinfoHtml$LeftCurlyBracketPathRightCurlyBracket = null;
        ComDayCqDamCoreImplServletCompanionServletInfo response = api.comDayCqDamCoreImplServletCompanionServlet(post, apply, delete, action, $location, propertylist, moreInfo, mntOverlayDamGuiContentAssetsMoreinfoHtml$LeftCurlyBracketPathRightCurlyBracket);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletCreateAssetServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean detectDuplicate = null;
        ComDayCqDamCoreImplServletCreateAssetServletInfo response = api.comDayCqDamCoreImplServletCreateAssetServlet(post, apply, delete, action, $location, propertylist, detectDuplicate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletDamContentDispositionFilterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqMimeTypeBlacklist = null;
        Boolean cqDamEmptyMime = null;
        ComDayCqDamCoreImplServletDamContentDispositionFilterInfo response = api.comDayCqDamCoreImplServletDamContentDispositionFilter(post, apply, delete, action, $location, propertylist, cqMimeTypeBlacklist, cqDamEmptyMime);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletGuidLookupFilterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamCoreGuidlookupfilterEnabled = null;
        ComDayCqDamCoreImplServletGuidLookupFilterInfo response = api.comDayCqDamCoreImplServletGuidLookupFilter(post, apply, delete, action, $location, propertylist, cqDamCoreGuidlookupfilterEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletHealthCheckServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cqDamSyncWorkflowId = null;
        List<String> cqDamSyncFolderTypes = null;
        ComDayCqDamCoreImplServletHealthCheckServletInfo response = api.comDayCqDamCoreImplServletHealthCheckServlet(post, apply, delete, action, $location, propertylist, cqDamSyncWorkflowId, cqDamSyncFolderTypes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletMetadataGetServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletResourceTypes = null;
        String slingServletMethods = null;
        String slingServletExtensions = null;
        String slingServletSelectors = null;
        ComDayCqDamCoreImplServletMetadataGetServletInfo response = api.comDayCqDamCoreImplServletMetadataGetServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletMethods, slingServletExtensions, slingServletSelectors);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletMultipleLicenseAcceptServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamDrmEnable = null;
        ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo response = api.comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(post, apply, delete, action, $location, propertylist, cqDamDrmEnable);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplServletResourceCollectionServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> slingServletResourceTypes = null;
        String slingServletMethods = null;
        String slingServletSelectors = null;
        String downloadConfig = null;
        String viewSelector = null;
        Boolean sendEmail = null;
        ComDayCqDamCoreImplServletResourceCollectionServletInfo response = api.comDayCqDamCoreImplServletResourceCollectionServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletMethods, slingServletSelectors, downloadConfig, viewSelector, sendEmail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean createPreviewEnabled = null;
        Boolean updatePreviewEnabled = null;
        Integer queueSize = null;
        String folderPreviewRenditionRegex = null;
        ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo response = api.comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(post, apply, delete, action, $location, propertylist, createPreviewEnabled, updatePreviewEnabled, queueSize, folderPreviewRenditionRegex);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreImplUnzipUnzipConfigTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamConfigUnzipMaxuncompressedsize = null;
        String cqDamConfigUnzipEncoding = null;
        ComDayCqDamCoreImplUnzipUnzipConfigInfo response = api.comDayCqDamCoreImplUnzipUnzipConfig(post, apply, delete, action, $location, propertylist, cqDamConfigUnzipMaxuncompressedsize, cqDamConfigUnzipEncoding);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreProcessExifToolExtractMetadataProcessTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
        Boolean cqDamEnableSha1 = null;
        ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo response = api.comDayCqDamCoreProcessExifToolExtractMetadataProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamEnableSha1);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreProcessExtractMetadataProcessTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
        Boolean cqDamEnableSha1 = null;
        ComDayCqDamCoreProcessExtractMetadataProcessInfo response = api.comDayCqDamCoreProcessExtractMetadataProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamEnableSha1);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamCoreProcessMetadataProcessorProcessTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
        Boolean cqDamEnableSha1 = null;
        List<String> cqDamMetadataXssprotectedProperties = null;
        ComDayCqDamCoreProcessMetadataProcessorProcessInfo response = api.comDayCqDamCoreProcessMetadataProcessorProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamEnableSha1, cqDamMetadataXssprotectedProperties);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamHandlerFfmpegLocatorImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> executableSearchpath = null;
        ComDayCqDamHandlerFfmpegLocatorImplInfo response = api.comDayCqDamHandlerFfmpegLocatorImpl(post, apply, delete, action, $location, propertylist, executableSearchpath);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
        List<String> fontmgrSystemFontDir = null;
        String fontmgrAdobeFontDir = null;
        String fontmgrCustomerFontDir = null;
        ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo response = api.comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(post, apply, delete, action, $location, propertylist, eventFilter, fontmgrSystemFontDir, fontmgrAdobeFontDir, fontmgrCustomerFontDir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamHandlerStandardPdfPdfHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean rasterAnnotation = null;
        ComDayCqDamHandlerStandardPdfPdfHandlerInfo response = api.comDayCqDamHandlerStandardPdfPdfHandler(post, apply, delete, action, $location, propertylist, rasterAnnotation);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamHandlerStandardPsPostScriptHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean rasterAnnotation = null;
        ComDayCqDamHandlerStandardPsPostScriptHandlerInfo response = api.comDayCqDamHandlerStandardPsPostScriptHandler(post, apply, delete, action, $location, propertylist, rasterAnnotation);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamHandlerStandardPsdPsdHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer largeFileThreshold = null;
        ComDayCqDamHandlerStandardPsdPsdHandlerInfo response = api.comDayCqDamHandlerStandardPsdPsdHandler(post, apply, delete, action, $location, propertylist, largeFileThreshold);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamIdsImplIDSJobProcessorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enableMultisession = null;
        Boolean idsCcEnable = null;
        Boolean enableRetry = null;
        Boolean enableRetryScripterror = null;
        String externalizerDomainCqhost = null;
        String externalizerDomainHttp = null;
        ComDayCqDamIdsImplIDSJobProcessorInfo response = api.comDayCqDamIdsImplIDSJobProcessor(post, apply, delete, action, $location, propertylist, enableMultisession, idsCcEnable, enableRetry, enableRetryScripterror, externalizerDomainCqhost, externalizerDomainHttp);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamIdsImplIDSPoolManagerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxErrorsToBlacklist = null;
        Integer retryIntervalToWhitelist = null;
        Integer connectTimeout = null;
        Integer socketTimeout = null;
        String processLabel = null;
        Integer connectionUseMax = null;
        ComDayCqDamIdsImplIDSPoolManagerImplInfo response = api.comDayCqDamIdsImplIDSPoolManagerImpl(post, apply, delete, action, $location, propertylist, maxErrorsToBlacklist, retryIntervalToWhitelist, connectTimeout, socketTimeout, processLabel, connectionUseMax);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamInddImplHandlerIndesignXMPHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
        Boolean extractPages = null;
        ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo response = api.comDayCqDamInddImplHandlerIndesignXMPHandler(post, apply, delete, action, $location, propertylist, processLabel, extractPages);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamInddImplServletSnippetCreationServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer snippetcreationMaxcollections = null;
        ComDayCqDamInddImplServletSnippetCreationServletInfo response = api.comDayCqDamInddImplServletSnippetCreationServlet(post, apply, delete, action, $location, propertylist, snippetcreationMaxcollections);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamInddProcessINDDMediaExtractProcessTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
        String cqDamInddPagesRegex = null;
        Boolean idsJobDecoupled = null;
        String idsJobWorkflowModel = null;
        ComDayCqDamInddProcessINDDMediaExtractProcessInfo response = api.comDayCqDamInddProcessINDDMediaExtractProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamInddPagesRegex, idsJobDecoupled, idsJobWorkflowModel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer batchCommitSize = null;
        ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo response = api.comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(post, apply, delete, action, $location, propertylist, batchCommitSize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo response = api.comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(post, apply, delete, action, $location, propertylist, schedulerExpression);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProcessTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean deleteZipFile = null;
        ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProcessInfo response = api.comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProcess(post, apply, delete, action, $location, propertylist, deleteZipFile);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEventListenerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamS7damDynamicmediaconfigeventlistenerEnabled = null;
        ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEventListenerInfo response = api.comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEventListener(post, apply, delete, action, $location, propertylist, cqDamS7damDynamicmediaconfigeventlistenerEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        Boolean schedulerConcurrent = null;
        ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo response = api.comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(post, apply, delete, action, $location, propertylist, schedulerExpression, schedulerConcurrent);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonPostServletsSetCreateHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingPostOperation = null;
        String slingServletMethods = null;
        ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo response = api.comDayCqDamS7damCommonPostServletsSetCreateHandler(post, apply, delete, action, $location, propertylist, slingPostOperation, slingServletMethods);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonPostServletsSetModifyHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingPostOperation = null;
        String slingServletMethods = null;
        ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo response = api.comDayCqDamS7damCommonPostServletsSetModifyHandler(post, apply, delete, action, $location, propertylist, slingPostOperation, slingServletMethods);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String processLabel = null;
        ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo response = api.comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(post, apply, delete, action, $location, propertylist, processLabel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonS7damDamChangeEventListenerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamS7damDamchangeeventlistenerEnabled = null;
        ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo response = api.comDayCqDamS7damCommonS7damDamChangeEventListener(post, apply, delete, action, $location, propertylist, cqDamS7damDamchangeeventlistenerEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonServletsS7damProductInfoServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletPaths = null;
        String slingServletMethods = null;
        ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo response = api.comDayCqDamS7damCommonServletsS7damProductInfoServlet(post, apply, delete, action, $location, propertylist, slingServletPaths, slingServletMethods);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName = null;
        Integer cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName = null;
        Integer cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName = null;
        Integer cqDamS7damVideoproxyclientserviceHttpReadtimeoutName = null;
        Integer cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName = null;
        Integer cqDamS7damVideoproxyclientserviceHttpMaxretrycountName = null;
        Integer cqDamS7damVideoproxyclientserviceUploadprogressIntervalName = null;
        ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo response = api.comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(post, apply, delete, action, $location, propertylist, cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName, cqDamS7damVideoproxyclientserviceHttpReadtimeoutName, cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName, cqDamS7damVideoproxyclientserviceHttpMaxretrycountName, cqDamS7damVideoproxyclientserviceUploadprogressIntervalName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamScene7ImplScene7APIClientImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamScene7ApiclientRecordsperpageNofilterName = null;
        Integer cqDamScene7ApiclientRecordsperpageWithfilterName = null;
        ComDayCqDamScene7ImplScene7APIClientImplInfo response = api.comDayCqDamScene7ImplScene7APIClientImpl(post, apply, delete, action, $location, propertylist, cqDamScene7ApiclientRecordsperpageNofilterName, cqDamScene7ApiclientRecordsperpageWithfilterName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqDamScene7AssetmimetypeserviceMapping = null;
        ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo response = api.comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(post, apply, delete, action, $location, propertylist, cqDamScene7AssetmimetypeserviceMapping);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamScene7ImplScene7ConfigurationEventListenerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamScene7ConfigurationeventlistenerEnabled = null;
        ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo response = api.comDayCqDamScene7ImplScene7ConfigurationEventListener(post, apply, delete, action, $location, propertylist, cqDamScene7ConfigurationeventlistenerEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamScene7ImplScene7DamChangeEventListenerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqDamScene7DamchangeeventlistenerEnabled = null;
        List<String> cqDamScene7DamchangeeventlistenerObservedPaths = null;
        ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo response = api.comDayCqDamScene7ImplScene7DamChangeEventListener(post, apply, delete, action, $location, propertylist, cqDamScene7DamchangeeventlistenerEnabled, cqDamScene7DamchangeeventlistenerObservedPaths);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamScene7ImplScene7FlashTemplatesServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String scene7FlashTemplatesRti = null;
        String scene7FlashTemplatesRsi = null;
        String scene7FlashTemplatesRb = null;
        String scene7FlashTemplatesRurl = null;
        String scene7FlashTemplateUrlFormatParameter = null;
        ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo response = api.comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(post, apply, delete, action, $location, propertylist, scene7FlashTemplatesRti, scene7FlashTemplatesRsi, scene7FlashTemplatesRb, scene7FlashTemplatesRurl, scene7FlashTemplateUrlFormatParameter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamScene7ImplScene7UploadServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer cqDamScene7UploadserviceActivejobtimeoutLabel = null;
        Integer cqDamScene7UploadserviceConnectionmaxperrouteLabel = null;
        ComDayCqDamScene7ImplScene7UploadServiceImplInfo response = api.comDayCqDamScene7ImplScene7UploadServiceImpl(post, apply, delete, action, $location, propertylist, cqDamScene7UploadserviceActivejobtimeoutLabel, cqDamScene7UploadserviceConnectionmaxperrouteLabel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamStockIntegrationImplCacheStockCacheConfigurationServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String getCacheExpirationUnit = null;
        Integer getCacheExpirationValue = null;
        ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationServiceImplInfo response = api.comDayCqDamStockIntegrationImplCacheStockCacheConfigurationServiceImpl(post, apply, delete, action, $location, propertylist, getCacheExpirationUnit, getCacheExpirationValue);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamStockIntegrationImplConfigurationStockConfigurationImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String locale = null;
        String imsConfig = null;
        ComDayCqDamStockIntegrationImplConfigurationStockConfigurationImplInfo response = api.comDayCqDamStockIntegrationImplConfigurationStockConfigurationImpl(post, apply, delete, action, $location, propertylist, name, locale, imsConfig);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqDamVideoImplServletVideoTestServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        ComDayCqDamVideoImplServletVideoTestServletInfo response = api.comDayCqDamVideoImplServletVideoTestServlet(post, apply, delete, action, $location, propertylist, enabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqExtwidgetServletsImageSpriteServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxWidth = null;
        Integer maxHeight = null;
        ComDayCqExtwidgetServletsImageSpriteServletInfo response = api.comDayCqExtwidgetServletsImageSpriteServlet(post, apply, delete, action, $location, propertylist, maxWidth, maxHeight);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqImageInternalFontFontHelperTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> fontpath = null;
        Integer oversamplingFactor = null;
        ComDayCqImageInternalFontFontHelperInfo response = api.comDayCqImageInternalFontFontHelper(post, apply, delete, action, $location, propertylist, fontpath, oversamplingFactor);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqJcrclustersupportClusterStartLevelControllerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean clusterLevelEnable = null;
        Integer clusterMasterLevel = null;
        Integer clusterSlaveLevel = null;
        ComDayCqJcrclustersupportClusterStartLevelControllerInfo response = api.comDayCqJcrclustersupportClusterStartLevelController(post, apply, delete, action, $location, propertylist, clusterLevelEnable, clusterMasterLevel, clusterSlaveLevel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMailerDefaultMailServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String smtpHost = null;
        Integer smtpPort = null;
        String smtpUser = null;
        String smtpPassword = null;
        String fromAddress = null;
        Boolean smtpSsl = null;
        Boolean smtpStarttls = null;
        Boolean debugEmail = null;
        ComDayCqMailerDefaultMailServiceInfo response = api.comDayCqMailerDefaultMailService(post, apply, delete, action, $location, propertylist, smtpHost, smtpPort, smtpUser, smtpPassword, fromAddress, smtpSsl, smtpStarttls, debugEmail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMailerImplCqMailingServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String maxRecipientCount = null;
        ComDayCqMailerImplCqMailingServiceInfo response = api.comDayCqMailerImplCqMailingService(post, apply, delete, action, $location, propertylist, maxRecipientCount);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMailerImplEmailCqEmailTemplateFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String mailerEmailCharset = null;
        ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo response = api.comDayCqMailerImplEmailCqEmailTemplateFactory(post, apply, delete, action, $location, propertylist, mailerEmailCharset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMailerImplEmailCqRetrieverTemplateFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean mailerEmailEmbed = null;
        String mailerEmailCharset = null;
        String mailerEmailRetrieverUserID = null;
        String mailerEmailRetrieverUserPWD = null;
        ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo response = api.comDayCqMailerImplEmailCqRetrieverTemplateFactory(post, apply, delete, action, $location, propertylist, mailerEmailEmbed, mailerEmailCharset, mailerEmailRetrieverUserID, mailerEmailRetrieverUserPWD);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmCampaignImplIntegrationConfigImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> aemMcmCampaignFormConstraints = null;
        String aemMcmCampaignPublicUrl = null;
        Boolean aemMcmCampaignRelaxedSSL = null;
        ComDayCqMcmCampaignImplIntegrationConfigImplInfo response = api.comDayCqMcmCampaignImplIntegrationConfigImpl(post, apply, delete, action, $location, propertylist, aemMcmCampaignFormConstraints, aemMcmCampaignPublicUrl, aemMcmCampaignRelaxedSSL);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo response = api.comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmCoreNewsletterNewsletterEmailServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String fromAddress = null;
        String senderHost = null;
        String maxBounceCount = null;
        ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo response = api.comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(post, apply, delete, action, $location, propertylist, fromAddress, senderHost, maxBounceCount);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmImplMCMConfigurationTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> experienceIndirection = null;
        List<String> touchpointIndirection = null;
        ComDayCqMcmImplMCMConfigurationInfo response = api.comDayCqMcmImplMCMConfiguration(post, apply, delete, action, $location, propertylist, experienceIndirection, touchpointIndirection);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponentTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
        ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponentTagHandlerFactoryInfo response = api.comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponentTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroughComponentTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
        ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroughComponentTagHandlerFactoryInfo response = api.comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroughComponentTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentTagHandlerFactoryInfo response = api.comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHandlerFactoryInfo response = api.comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
        ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHandlerFactoryInfo response = api.comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqNotificationImplNotificationServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
        ComDayCqNotificationImplNotificationServiceImplInfo response = api.comDayCqNotificationImplNotificationServiceImpl(post, apply, delete, action, $location, propertylist, eventFilter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqPersonalizationImplServletsTargetingConfigurationServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean forcelocation = null;
        ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo response = api.comDayCqPersonalizationImplServletsTargetingConfigurationServlet(post, apply, delete, action, $location, propertylist, forcelocation);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqPollingImporterImplManagedPollConfigImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String id = null;
        Boolean enabled = null;
        Boolean reference = null;
        Integer interval = null;
        String expression = null;
        String source = null;
        String target = null;
        String login = null;
        String password = null;
        ComDayCqPollingImporterImplManagedPollConfigImplInfo response = api.comDayCqPollingImporterImplManagedPollConfigImpl(post, apply, delete, action, $location, propertylist, id, enabled, reference, interval, expression, source, target, login, password);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqPollingImporterImplManagedPollingImporterImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String importerUser = null;
        ComDayCqPollingImporterImplManagedPollingImporterImplInfo response = api.comDayCqPollingImporterImplManagedPollingImporterImpl(post, apply, delete, action, $location, propertylist, importerUser);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqPollingImporterImplPollingImporterImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer importerMinInterval = null;
        String importerUser = null;
        List<String> excludePaths = null;
        List<String> includePaths = null;
        ComDayCqPollingImporterImplPollingImporterImplInfo response = api.comDayCqPollingImporterImplPollingImporterImpl(post, apply, delete, action, $location, propertylist, importerMinInterval, importerUser, excludePaths, includePaths);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationAuditReplicationEventListenerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        ComDayCqReplicationAuditReplicationEventListenerInfo response = api.comDayCqReplicationAuditReplicationEventListener(post, apply, delete, action, $location, propertylist, serviceRanking);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationContentStaticContentBuilderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String host = null;
        Integer port = null;
        ComDayCqReplicationContentStaticContentBuilderInfo response = api.comDayCqReplicationContentStaticContentBuilder(post, apply, delete, action, $location, propertylist, host, port);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplAgentManagerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jobTopics = null;
        String serviceUserTarget = null;
        String agentProviderTarget = null;
        ComDayCqReplicationImplAgentManagerImplInfo response = api.comDayCqReplicationImplAgentManagerImpl(post, apply, delete, action, $location, propertylist, jobTopics, serviceUserTarget, agentProviderTarget);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplContentDurboBinaryLessContentBuilderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer binaryThreshold = null;
        ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo response = api.comDayCqReplicationImplContentDurboBinaryLessContentBuilder(post, apply, delete, action, $location, propertylist, binaryThreshold);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplContentDurboDurboImportConfigurationProviderServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean preserveHierarchyNodes = null;
        Boolean ignoreVersioning = null;
        Boolean importAcl = null;
        Integer saveThreshold = null;
        Boolean preserveUserPaths = null;
        Boolean preserveUuid = null;
        List<String> preserveUuidNodetypes = null;
        List<String> preserveUuidSubtrees = null;
        Boolean autoCommit = null;
        ComDayCqReplicationImplContentDurboDurboImportConfigurationProviderServiceInfo response = api.comDayCqReplicationImplContentDurboDurboImportConfigurationProviderService(post, apply, delete, action, $location, propertylist, preserveHierarchyNodes, ignoreVersioning, importAcl, saveThreshold, preserveUserPaths, preserveUuid, preserveUuidNodetypes, preserveUuidSubtrees, autoCommit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplReplicationContentFactoryProviderImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean replicationContentUseFileStorage = null;
        Integer replicationContentMaxCommitAttempts = null;
        ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo response = api.comDayCqReplicationImplReplicationContentFactoryProviderImpl(post, apply, delete, action, $location, propertylist, replicationContentUseFileStorage, replicationContentMaxCommitAttempts);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplReplicationReceiverImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer receiverTmpfileThreshold = null;
        Boolean receiverPackagesUseInstall = null;
        ComDayCqReplicationImplReplicationReceiverImplInfo response = api.comDayCqReplicationImplReplicationReceiverImpl(post, apply, delete, action, $location, propertylist, receiverTmpfileThreshold, receiverPackagesUseInstall);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplReplicatorImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean distributeEvents = null;
        ComDayCqReplicationImplReplicatorImplInfo response = api.comDayCqReplicationImplReplicatorImpl(post, apply, delete, action, $location, propertylist, distributeEvents);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplReverseReplicatorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer schedulerPeriod = null;
        ComDayCqReplicationImplReverseReplicatorInfo response = api.comDayCqReplicationImplReverseReplicator(post, apply, delete, action, $location, propertylist, schedulerPeriod);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplTransportBinaryLessTransportHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> disabledCipherSuites = null;
        List<String> enabledCipherSuites = null;
        ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo response = api.comDayCqReplicationImplTransportBinaryLessTransportHandler(post, apply, delete, action, $location, propertylist, disabledCipherSuites, enabledCipherSuites);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReplicationImplTransportHttpTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> disabledCipherSuites = null;
        List<String> enabledCipherSuites = null;
        ComDayCqReplicationImplTransportHttpInfo response = api.comDayCqReplicationImplTransportHttp(post, apply, delete, action, $location, propertylist, disabledCipherSuites, enabledCipherSuites);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReportingImplCacheCacheImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean repcacheEnable = null;
        Integer repcacheTtl = null;
        Integer repcacheMax = null;
        ComDayCqReportingImplCacheCacheImplInfo response = api.comDayCqReportingImplCacheCacheImpl(post, apply, delete, action, $location, propertylist, repcacheEnable, repcacheTtl, repcacheMax);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReportingImplConfigServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String repconfTimezone = null;
        String repconfLocale = null;
        String repconfSnapshots = null;
        String repconfRepdir = null;
        Integer repconfHourofday = null;
        Integer repconfMinofhour = null;
        Integer repconfMaxrows = null;
        Boolean repconfFakedata = null;
        String repconfSnapshotuser = null;
        Boolean repconfEnforcesnapshotuser = null;
        ComDayCqReportingImplConfigServiceImplInfo response = api.comDayCqReportingImplConfigServiceImpl(post, apply, delete, action, $location, propertylist, repconfTimezone, repconfLocale, repconfSnapshots, repconfRepdir, repconfHourofday, repconfMinofhour, repconfMaxrows, repconfFakedata, repconfSnapshotuser, repconfEnforcesnapshotuser);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqReportingImplRLogAnalyzerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String requestLogOutput = null;
        ComDayCqReportingImplRLogAnalyzerInfo response = api.comDayCqReportingImplRLogAnalyzer(post, apply, delete, action, $location, propertylist, requestLogOutput);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqRewriterLinkcheckerImplLinkCheckerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer schedulerPeriod = null;
        Boolean schedulerConcurrent = null;
        Integer serviceBadLinkToleranceInterval = null;
        List<String> serviceCheckOverridePatterns = null;
        Boolean serviceCacheBrokenInternalLinks = null;
        List<String> serviceSpecialLinkPrefix = null;
        List<String> serviceSpecialLinkPatterns = null;
        ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo response = api.comDayCqRewriterLinkcheckerImplLinkCheckerImpl(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerConcurrent, serviceBadLinkToleranceInterval, serviceCheckOverridePatterns, serviceCacheBrokenInternalLinks, serviceSpecialLinkPrefix, serviceSpecialLinkPatterns);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqRewriterLinkcheckerImplLinkCheckerTaskTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer schedulerPeriod = null;
        Boolean schedulerConcurrent = null;
        Integer goodLinkTestInterval = null;
        Integer badLinkTestInterval = null;
        Integer linkUnusedInterval = null;
        Integer connectionTimeout = null;
        ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo response = api.comDayCqRewriterLinkcheckerImplLinkCheckerTask(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerConcurrent, goodLinkTestInterval, badLinkTestInterval, linkUnusedInterval, connectionTimeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean linkcheckertransformerDisableRewriting = null;
        Boolean linkcheckertransformerDisableChecking = null;
        Integer linkcheckertransformerMapCacheSize = null;
        Boolean linkcheckertransformerStrictExtensionCheck = null;
        Boolean linkcheckertransformerStripHtmltExtension = null;
        List<String> linkcheckertransformerRewriteElements = null;
        List<String> linkcheckertransformerStripExtensionPathBlacklist = null;
        ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo response = api.comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(post, apply, delete, action, $location, propertylist, linkcheckertransformerDisableRewriting, linkcheckertransformerDisableChecking, linkcheckertransformerMapCacheSize, linkcheckertransformerStrictExtensionCheck, linkcheckertransformerStripHtmltExtension, linkcheckertransformerRewriteElements, linkcheckertransformerStripExtensionPathBlacklist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqRewriterLinkcheckerImplLinkInfoStorageImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceMaxLinksPerHost = null;
        Boolean serviceSaveExternalLinkReferences = null;
        ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo response = api.comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(post, apply, delete, action, $location, propertylist, serviceMaxLinksPerHost, serviceSaveExternalLinkReferences);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqRewriterProcessorImplHtmlParserFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> htmlparserProcessTags = null;
        Boolean htmlparserPreserveCamelCase = null;
        ComDayCqRewriterProcessorImplHtmlParserFactoryInfo response = api.comDayCqRewriterProcessorImplHtmlParserFactory(post, apply, delete, action, $location, propertylist, htmlparserProcessTags, htmlparserPreserveCamelCase);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqSearchImplBuilderQueryBuilderImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> excerptProperties = null;
        Integer cacheMaxEntries = null;
        Integer cacheEntryLifetime = null;
        Boolean xpathUnion = null;
        ComDayCqSearchImplBuilderQueryBuilderImplInfo response = api.comDayCqSearchImplBuilderQueryBuilderImpl(post, apply, delete, action, $location, propertylist, excerptProperties, cacheMaxEntries, cacheEntryLifetime, xpathUnion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqSearchSuggestImplSuggestionIndexManagerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pathBuilderTarget = null;
        String suggestBasepath = null;
        ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo response = api.comDayCqSearchSuggestImplSuggestionIndexManagerImpl(post, apply, delete, action, $location, propertylist, pathBuilderTarget, suggestBasepath);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqSearchpromoteConfighandlerEnabled = null;
        ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo response = api.comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(post, apply, delete, action, $location, propertylist, cqSearchpromoteConfighandlerEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqSearchpromoteImplSearchPromoteServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String cqSearchpromoteConfigurationServerUri = null;
        String cqSearchpromoteConfigurationEnvironment = null;
        Integer connectionTimeout = null;
        Integer socketTimeout = null;
        ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo response = api.comDayCqSearchpromoteImplSearchPromoteServiceImpl(post, apply, delete, action, $location, propertylist, cqSearchpromoteConfigurationServerUri, cqSearchpromoteConfigurationEnvironment, connectionTimeout, socketTimeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqSecurityACLSetupTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqAclsetupRules = null;
        ComDayCqSecurityACLSetupInfo response = api.comDayCqSecurityACLSetup(post, apply, delete, action, $location, propertylist, cqAclsetupRules);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqStatisticsImplStatisticsServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer schedulerPeriod = null;
        Boolean schedulerConcurrent = null;
        String path = null;
        String workspace = null;
        String keywordsPath = null;
        Boolean asyncEntries = null;
        ComDayCqStatisticsImplStatisticsServiceImplInfo response = api.comDayCqStatisticsImplStatisticsServiceImpl(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerConcurrent, path, workspace, keywordsPath, asyncEntries);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqTaggingImplJcrTagManagerFactoryImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean validationEnabled = null;
        ComDayCqTaggingImplJcrTagManagerFactoryImplInfo response = api.comDayCqTaggingImplJcrTagManagerFactoryImpl(post, apply, delete, action, $location, propertylist, validationEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqTaggingImplSearchTagPredicateEvaluatorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean ignorePath = null;
        ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo response = api.comDayCqTaggingImplSearchTagPredicateEvaluator(post, apply, delete, action, $location, propertylist, ignorePath);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqTaggingImplTagGarbageCollectorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        ComDayCqTaggingImplTagGarbageCollectorInfo response = api.comDayCqTaggingImplTagGarbageCollector(post, apply, delete, action, $location, propertylist, schedulerExpression);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqPagesupdatehandlerImageresourcetypes = null;
        ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo response = api.comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(post, apply, delete, action, $location, propertylist, cqPagesupdatehandlerImageresourcetypes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqContentsyncPathrewritertransformerMappingLinks = null;
        List<String> cqContentsyncPathrewritertransformerMappingClientlibs = null;
        List<String> cqContentsyncPathrewritertransformerMappingImages = null;
        String cqContentsyncPathrewritertransformerAttributePattern = null;
        String cqContentsyncPathrewritertransformerClientlibraryPattern = null;
        String cqContentsyncPathrewritertransformerClientlibraryReplace = null;
        ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactoryInfo response = api.comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactory(post, apply, delete, action, $location, propertylist, cqContentsyncPathrewritertransformerMappingLinks, cqContentsyncPathrewritertransformerMappingClientlibs, cqContentsyncPathrewritertransformerMappingImages, cqContentsyncPathrewritertransformerAttributePattern, cqContentsyncPathrewritertransformerClientlibraryPattern, cqContentsyncPathrewritertransformerClientlibraryReplace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplAuthoringUIModeServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String authoringUIModeServiceDefault = null;
        ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo response = api.comDayCqWcmCoreImplAuthoringUIModeServiceImpl(post, apply, delete, action, $location, propertylist, authoringUIModeServiceDefault);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplCommandsWCMCommandServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> wcmcommandservletDeleteWhitelist = null;
        ComDayCqWcmCoreImplCommandsWCMCommandServletInfo response = api.comDayCqWcmCoreImplCommandsWCMCommandServlet(post, apply, delete, action, $location, propertylist, wcmcommandservletDeleteWhitelist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String dimDefaultMode = null;
        Boolean dimAppcacheEnabled = null;
        ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo response = api.comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(post, apply, delete, action, $location, propertylist, dimDefaultMode, dimAppcacheEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplEventPageEventAuditListenerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String configured = null;
        ComDayCqWcmCoreImplEventPageEventAuditListenerInfo response = api.comDayCqWcmCoreImplEventPageEventAuditListener(post, apply, delete, action, $location, propertylist, configured);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplEventPagePostProcessorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> paths = null;
        ComDayCqWcmCoreImplEventPagePostProcessorInfo response = api.comDayCqWcmCoreImplEventPagePostProcessor(post, apply, delete, action, $location, propertylist, paths);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplEventRepositoryChangeEventListenerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> paths = null;
        List<String> excludedPaths = null;
        ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo response = api.comDayCqWcmCoreImplEventRepositoryChangeEventListener(post, apply, delete, action, $location, propertylist, paths, excludedPaths);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplEventTemplatePostProcessorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String paths = null;
        ComDayCqWcmCoreImplEventTemplatePostProcessorInfo response = api.comDayCqWcmCoreImplEventTemplatePostProcessor(post, apply, delete, action, $location, propertylist, paths);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplLanguageManagerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String langmgrListPath = null;
        List<String> langmgrCountryDefault = null;
        ComDayCqWcmCoreImplLanguageManagerImplInfo response = api.comDayCqWcmCoreImplLanguageManagerImpl(post, apply, delete, action, $location, propertylist, langmgrListPath, langmgrCountryDefault);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String linkExpiredPrefix = null;
        Boolean linkExpiredRemove = null;
        String linkExpiredSuffix = null;
        String linkInvalidPrefix = null;
        Boolean linkInvalidRemove = null;
        String linkInvalidSuffix = null;
        String linkPredatedPrefix = null;
        Boolean linkPredatedRemove = null;
        String linkPredatedSuffix = null;
        List<String> linkWcmmodes = null;
        ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo response = api.comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(post, apply, delete, action, $location, propertylist, linkExpiredPrefix, linkExpiredRemove, linkExpiredSuffix, linkInvalidPrefix, linkInvalidRemove, linkInvalidSuffix, linkPredatedPrefix, linkPredatedRemove, linkPredatedSuffix, linkWcmmodes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplPagePageInfoAggregatorImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pageInfoProviderPropertyRegexDefault = null;
        String pageInfoProviderPropertyName = null;
        ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo response = api.comDayCqWcmCoreImplPagePageInfoAggregatorImpl(post, apply, delete, action, $location, propertylist, pageInfoProviderPropertyRegexDefault, pageInfoProviderPropertyName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplPagePageManagerFactoryImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String illegalCharMapping = null;
        Boolean pageSubTreeActivationCheck = null;
        ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo response = api.comDayCqWcmCoreImplPagePageManagerFactoryImpl(post, apply, delete, action, $location, propertylist, illegalCharMapping, pageSubTreeActivationCheck);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplReferencesContentContentReferenceConfigTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> contentReferenceConfigResourceTypes = null;
        ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo response = api.comDayCqWcmCoreImplReferencesContentContentReferenceConfig(post, apply, delete, action, $location, propertylist, contentReferenceConfigResourceTypes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean damShowexpired = null;
        Boolean damShowhidden = null;
        Boolean tagTitleSearch = null;
        String guessTotal = null;
        String damExpiryProperty = null;
        ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo response = api.comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(post, apply, delete, action, $location, propertylist, damShowexpired, damShowhidden, tagTitleSearch, guessTotal, damExpiryProperty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplServletsContentfinderConnectorConnectorViewHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> itemResourceTypes = null;
        ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorViewHandlerInfo response = api.comDayCqWcmCoreImplServletsContentfinderConnectorConnectorViewHandler(post, apply, delete, action, $location, propertylist, itemResourceTypes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplServletsContentfinderPageViewHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String guessTotal = null;
        Boolean tagTitleSearch = null;
        ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo response = api.comDayCqWcmCoreImplServletsContentfinderPageViewHandler(post, apply, delete, action, $location, propertylist, guessTotal, tagTitleSearch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplServletsFindReplaceServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> scope = null;
        ComDayCqWcmCoreImplServletsFindReplaceServletInfo response = api.comDayCqWcmCoreImplServletsFindReplaceServlet(post, apply, delete, action, $location, propertylist, scope);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplServletsReferenceSearchServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer referencesearchservletMaxReferencesPerPage = null;
        Integer referencesearchservletMaxPages = null;
        ComDayCqWcmCoreImplServletsReferenceSearchServletInfo response = api.comDayCqWcmCoreImplServletsReferenceSearchServlet(post, apply, delete, action, $location, propertylist, referencesearchservletMaxReferencesPerPage, referencesearchservletMaxPages);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplServletsThumbnailServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String workspace = null;
        List<String> dimensions = null;
        ComDayCqWcmCoreImplServletsThumbnailServletInfo response = api.comDayCqWcmCoreImplServletsThumbnailServlet(post, apply, delete, action, $location, propertylist, workspace, dimensions);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplUtilsDefaultPageNameValidatorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String nonValidChars = null;
        ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo response = api.comDayCqWcmCoreImplUtilsDefaultPageNameValidator(post, apply, delete, action, $location, propertylist, nonValidChars);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplVariantsPageVariantsProviderImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String defaultExternalizerDomain = null;
        ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo response = api.comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(post, apply, delete, action, $location, propertylist, defaultExternalizerDomain);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplVersionManagerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean versionmanagerCreateVersionOnActivation = null;
        Boolean versionmanagerPurgingEnabled = null;
        List<String> versionmanagerPurgePaths = null;
        List<String> versionmanagerIvPaths = null;
        Integer versionmanagerMaxAgeDays = null;
        Integer versionmanagerMaxNumberVersions = null;
        Integer versionmanagerMinNumberVersions = null;
        ComDayCqWcmCoreImplVersionManagerImplInfo response = api.comDayCqWcmCoreImplVersionManagerImpl(post, apply, delete, action, $location, propertylist, versionmanagerCreateVersionOnActivation, versionmanagerPurgingEnabled, versionmanagerPurgePaths, versionmanagerIvPaths, versionmanagerMaxAgeDays, versionmanagerMaxNumberVersions, versionmanagerMinNumberVersions);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplVersionPurgeTaskTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> versionpurgePaths = null;
        Boolean versionpurgeRecursive = null;
        Integer versionpurgeMaxVersions = null;
        Integer versionpurgeMinVersions = null;
        Integer versionpurgeMaxAgeDays = null;
        ComDayCqWcmCoreImplVersionPurgeTaskInfo response = api.comDayCqWcmCoreImplVersionPurgeTask(post, apply, delete, action, $location, propertylist, versionpurgePaths, versionpurgeRecursive, versionpurgeMaxVersions, versionpurgeMinVersions, versionpurgeMaxAgeDays);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplWCMDebugFilterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean wcmdbgfilterEnabled = null;
        Boolean wcmdbgfilterJspDebug = null;
        ComDayCqWcmCoreImplWCMDebugFilterInfo response = api.comDayCqWcmCoreImplWCMDebugFilter(post, apply, delete, action, $location, propertylist, wcmdbgfilterEnabled, wcmdbgfilterJspDebug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplWCMDeveloperModeFilterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean wcmdevmodefilterEnabled = null;
        ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo response = api.comDayCqWcmCoreImplWCMDeveloperModeFilter(post, apply, delete, action, $location, propertylist, wcmdevmodefilterEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreImplWarpTimeWarpFilterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String filterOrder = null;
        String filterScope = null;
        ComDayCqWcmCoreImplWarpTimeWarpFilterInfo response = api.comDayCqWcmCoreImplWarpTimeWarpFilter(post, apply, delete, action, $location, propertylist, filterOrder, filterScope);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreMvtMVTStatisticsImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String mvtstatisticsTrackingurl = null;
        ComDayCqWcmCoreMvtMVTStatisticsImplInfo response = api.comDayCqWcmCoreMvtMVTStatisticsImpl(post, apply, delete, action, $location, propertylist, mvtstatisticsTrackingurl);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreStatsPageViewStatisticsImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pageviewstatisticsTrackingurl = null;
        String pageviewstatisticsTrackingscriptEnabled = null;
        ComDayCqWcmCoreStatsPageViewStatisticsImplInfo response = api.comDayCqWcmCoreStatsPageViewStatisticsImpl(post, apply, delete, action, $location, propertylist, pageviewstatisticsTrackingurl, pageviewstatisticsTrackingscriptEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmCoreWCMRequestFilterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String wcmfilterMode = null;
        ComDayCqWcmCoreWCMRequestFilterInfo response = api.comDayCqWcmCoreWCMRequestFilter(post, apply, delete, action, $location, propertylist, wcmfilterMode);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterDesignPackageImporterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> extractFilter = null;
        ComDayCqWcmDesignimporterDesignPackageImporterInfo response = api.comDayCqWcmDesignimporterDesignPackageImporter(post, apply, delete, action, $location, propertylist, extractFilter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterImplCanvasBuilderImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String filepattern = null;
        Boolean buildPageNodes = null;
        Boolean buildClientLibs = null;
        Boolean buildCanvasComponent = null;
        ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo response = api.comDayCqWcmDesignimporterImplCanvasBuilderImpl(post, apply, delete, action, $location, propertylist, filepattern, buildPageNodes, buildClientLibs, buildCanvasComponent);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer minThreadPoolSize = null;
        Integer maxThreadPoolSize = null;
        ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo response = api.comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(post, apply, delete, action, $location, propertylist, minThreadPoolSize, maxThreadPoolSize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterImplEntryPreprocessorImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String searchPattern = null;
        String replacePattern = null;
        ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo response = api.comDayCqWcmDesignimporterImplEntryPreprocessorImpl(post, apply, delete, action, $location, propertylist, searchPattern, replacePattern);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterImplMobileCanvasBuilderImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String filepattern = null;
        List<String> deviceGroups = null;
        Boolean buildPageNodes = null;
        Boolean buildClientLibs = null;
        Boolean buildCanvasComponent = null;
        ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo response = api.comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(post, apply, delete, action, $location, propertylist, filepattern, deviceGroups, buildPageNodes, buildClientLibs, buildCanvasComponent);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponentTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponentTagHandlerFactoryInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponentTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponentTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponentTagHandlerFactoryInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponentTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHandlerFactoryInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandlerFactoryInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandlerFactoryInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponentTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
        ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponentTagHandlerFactoryInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponentTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerFactoryInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTagHandlerFactoryInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandlerFactoryInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandlerFactoryInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHandlerFactoryInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponentTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
        ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponentTagHandlerFactoryInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponentTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandlerFactoryInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlerFactoryInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
        ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentTagHandlerFactoryInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponentTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        String componentResourceType = null;
        ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponentTagHandlerFactoryInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponentTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String tagpattern = null;
        ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlerFactoryInfo response = api.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationFormsImplFormChooserServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String serviceName = null;
        String slingServletResourceTypes = null;
        String slingServletSelectors = null;
        List<String> slingServletMethods = null;
        Boolean formsFormchooserservletAdvansesearchRequire = null;
        ComDayCqWcmFoundationFormsImplFormChooserServletInfo response = api.comDayCqWcmFoundationFormsImplFormChooserServlet(post, apply, delete, action, $location, propertylist, serviceName, slingServletResourceTypes, slingServletSelectors, slingServletMethods, formsFormchooserservletAdvansesearchRequire);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationFormsImplFormParagraphPostProcessorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean formsFormparagraphpostprocessorEnabled = null;
        List<String> formsFormparagraphpostprocessorFormresourcetypes = null;
        ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo response = api.comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(post, apply, delete, action, $location, propertylist, formsFormparagraphpostprocessorEnabled, formsFormparagraphpostprocessorFormresourcetypes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationFormsImplFormsHandlingServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String nameWhitelist = null;
        Boolean allowExpressions = null;
        ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo response = api.comDayCqWcmFoundationFormsImplFormsHandlingServlet(post, apply, delete, action, $location, propertylist, nameWhitelist, allowExpressions);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationFormsImplMailServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingServletResourceTypes = null;
        String slingServletSelectors = null;
        List<String> resourceWhitelist = null;
        String resourceBlacklist = null;
        ComDayCqWcmFoundationFormsImplMailServletInfo response = api.comDayCqWcmFoundationFormsImplMailServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletSelectors, resourceWhitelist, resourceBlacklist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationImplAdaptiveImageComponentServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> adaptSupportedWidths = null;
        ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo response = api.comDayCqWcmFoundationImplAdaptiveImageComponentServlet(post, apply, delete, action, $location, propertylist, adaptSupportedWidths);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationImplHTTPAuthHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        Boolean authHttpNologin = null;
        String authHttpRealm = null;
        String authDefaultLoginpage = null;
        List<String> authCredForm = null;
        List<String> authCredUtf8 = null;
        ComDayCqWcmFoundationImplHTTPAuthHandlerInfo response = api.comDayCqWcmFoundationImplHTTPAuthHandler(post, apply, delete, action, $location, propertylist, path, authHttpNologin, authHttpRealm, authDefaultLoginpage, authCredForm, authCredUtf8);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationImplPageImpressionsTrackerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingAuthRequirements = null;
        ComDayCqWcmFoundationImplPageImpressionsTrackerInfo response = api.comDayCqWcmFoundationImplPageImpressionsTracker(post, apply, delete, action, $location, propertylist, slingAuthRequirements);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationImplPageRedirectServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> excludedResourceTypes = null;
        ComDayCqWcmFoundationImplPageRedirectServletInfo response = api.comDayCqWcmFoundationImplPageRedirectServlet(post, apply, delete, action, $location, propertylist, excludedResourceTypes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> defaultAttachmentTypeBlacklist = null;
        List<String> baselineAttachmentTypeBlacklist = null;
        ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistServiceInfo response = api.comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistService(post, apply, delete, action, $location, propertylist, defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> parameterWhitelist = null;
        List<String> parameterWhitelistPrefixes = null;
        List<String> binaryParameterWhitelist = null;
        List<String> modifierWhitelist = null;
        List<String> operationWhitelist = null;
        List<String> operationWhitelistPrefixes = null;
        List<String> typehintWhitelist = null;
        List<String> resourcetypeWhitelist = null;
        ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo response = api.comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(post, apply, delete, action, $location, propertylist, parameterWhitelist, parameterWhitelistPrefixes, binaryParameterWhitelist, modifierWhitelist, operationWhitelist, operationWhitelistPrefixes, typehintWhitelist, resourcetypeWhitelist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean deviceInfoTransformerEnabled = null;
        String deviceInfoTransformerCssStyle = null;
        ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo response = api.comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(post, apply, delete, action, $location, propertylist, deviceInfoTransformerEnabled, deviceInfoTransformerCssStyle);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMobileCoreImplRedirectRedirectFilterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean redirectEnabled = null;
        Boolean redirectStatsEnabled = null;
        List<String> redirectExtensions = null;
        List<String> redirectPaths = null;
        ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo response = api.comDayCqWcmMobileCoreImplRedirectRedirectFilter(post, apply, delete, action, $location, propertylist, redirectEnabled, redirectStatsEnabled, redirectExtensions, redirectPaths);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsContentCopyActionFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
        String contentcopyactionOrderStyle = null;
        ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo response = api.comDayCqWcmMsmImplActionsContentCopyActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, contentcopyactionOrderStyle);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsContentDeleteActionFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
        ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo response = api.comDayCqWcmMsmImplActionsContentDeleteActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsContentUpdateActionFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
        List<String> cqWcmMsmActionIgnoredMixin = null;
        ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo response = api.comDayCqWcmMsmImplActionsContentUpdateActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmActionIgnoredMixin);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsOrderChildrenActionFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
        ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo response = api.comDayCqWcmMsmImplActionsOrderChildrenActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsPageMoveActionFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
        Boolean cqWcmMsmImplActionsPagemovePropReferenceUpdate = null;
        ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo response = api.comDayCqWcmMsmImplActionsPageMoveActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmImplActionsPagemovePropReferenceUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
        Boolean cqWcmMsmImplActionReferencesupdatePropUpdateNested = null;
        ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo response = api.comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmImplActionReferencesupdatePropUpdateNested);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplActionsVersionCopyActionFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cqWcmMsmActionExcludednodetypes = null;
        List<String> cqWcmMsmActionExcludedparagraphitems = null;
        List<String> cqWcmMsmActionExcludedprops = null;
        ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo response = api.comDayCqWcmMsmImplActionsVersionCopyActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplLiveRelationshipManagerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String liverelationshipmgrRelationsconfigDefault = null;
        ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo response = api.comDayCqWcmMsmImplLiveRelationshipManagerImpl(post, apply, delete, action, $location, propertylist, liverelationshipmgrRelationsconfigDefault);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplRolloutManagerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
        List<String> rolloutmgrExcludedpropsDefault = null;
        List<String> rolloutmgrExcludedparagraphpropsDefault = null;
        List<String> rolloutmgrExcludednodetypesDefault = null;
        Integer rolloutmgrThreadpoolMaxsize = null;
        Integer rolloutmgrThreadpoolMaxshutdowntime = null;
        String rolloutmgrThreadpoolPriority = null;
        Integer rolloutmgrCommitSize = null;
        Boolean rolloutmgrConflicthandlingEnabled = null;
        ComDayCqWcmMsmImplRolloutManagerImplInfo response = api.comDayCqWcmMsmImplRolloutManagerImpl(post, apply, delete, action, $location, propertylist, eventFilter, rolloutmgrExcludedpropsDefault, rolloutmgrExcludedparagraphpropsDefault, rolloutmgrExcludednodetypesDefault, rolloutmgrThreadpoolMaxsize, rolloutmgrThreadpoolMaxshutdowntime, rolloutmgrThreadpoolPriority, rolloutmgrCommitSize, rolloutmgrConflicthandlingEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmMsmImplServletsAuditLogServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer auditlogservletDefaultEventsCount = null;
        String auditlogservletDefaultPath = null;
        ComDayCqWcmMsmImplServletsAuditLogServletInfo response = api.comDayCqWcmMsmImplServletsAuditLogServlet(post, apply, delete, action, $location, propertylist, auditlogservletDefaultEventsCount, auditlogservletDefaultPath);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmNotificationEmailImplEmailChannelTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String emailFrom = null;
        ComDayCqWcmNotificationEmailImplEmailChannelInfo response = api.comDayCqWcmNotificationEmailImplEmailChannel(post, apply, delete, action, $location, propertylist, emailFrom);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmNotificationImplNotificationManagerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> eventTopics = null;
        ComDayCqWcmNotificationImplNotificationManagerImplInfo response = api.comDayCqWcmNotificationImplNotificationManagerImpl(post, apply, delete, action, $location, propertylist, eventTopics);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmScriptingImplBVPManagerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> comDayCqWcmScriptingBvpScriptEngines = null;
        ComDayCqWcmScriptingImplBVPManagerInfo response = api.comDayCqWcmScriptingImplBVPManager(post, apply, delete, action, $location, propertylist, comDayCqWcmScriptingBvpScriptEngines);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmUndoUndoConfigTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean cqWcmUndoEnabled = null;
        String cqWcmUndoPath = null;
        Integer cqWcmUndoValidity = null;
        Integer cqWcmUndoSteps = null;
        String cqWcmUndoPersistence = null;
        Boolean cqWcmUndoPersistenceMode = null;
        String cqWcmUndoMarkermode = null;
        List<String> cqWcmUndoWhitelist = null;
        List<String> cqWcmUndoBlacklist = null;
        ComDayCqWcmUndoUndoConfigInfo response = api.comDayCqWcmUndoUndoConfig(post, apply, delete, action, $location, propertylist, cqWcmUndoEnabled, cqWcmUndoPath, cqWcmUndoValidity, cqWcmUndoSteps, cqWcmUndoPersistence, cqWcmUndoPersistenceMode, cqWcmUndoMarkermode, cqWcmUndoWhitelist, cqWcmUndoBlacklist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmWebservicesupportImplReplicationEventListenerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> flushAgents = null;
        ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo response = api.comDayCqWcmWebservicesupportImplReplicationEventListener(post, apply, delete, action, $location, propertylist, flushAgents);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmWorkflowImplWcmWorkflowServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String eventFilter = null;
        Integer minThreadPoolSize = null;
        Integer maxThreadPoolSize = null;
        Boolean cqWcmWorkflowTerminateOnActivate = null;
        List<String> cqWcmWorklfowTerminateExclusionList = null;
        ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo response = api.comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(post, apply, delete, action, $location, propertylist, eventFilter, minThreadPoolSize, maxThreadPoolSize, cqWcmWorkflowTerminateOnActivate, cqWcmWorklfowTerminateExclusionList);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWcmWorkflowImplWorkflowPackageInfoProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> workflowpackageinfoproviderFilter = null;
        String workflowpackageinfoproviderFilterRootpath = null;
        ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo response = api.comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(post, apply, delete, action, $location, propertylist, workflowpackageinfoproviderFilter, workflowpackageinfoproviderFilterRootpath);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWidgetImplHtmlLibraryManagerImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String htmllibmanagerClientmanager = null;
        Boolean htmllibmanagerDebug = null;
        Boolean htmllibmanagerDebugConsole = null;
        String htmllibmanagerDebugInitJs = null;
        String htmllibmanagerDefaultthemename = null;
        String htmllibmanagerDefaultuserthemename = null;
        String htmllibmanagerFirebuglitePath = null;
        Boolean htmllibmanagerForceCQUrlInfo = null;
        Boolean htmllibmanagerGzip = null;
        Integer htmllibmanagerMaxage = null;
        Integer htmllibmanagerMaxDataUriSize = null;
        Boolean htmllibmanagerMinify = null;
        List<String> htmllibmanagerPathList = null;
        Boolean htmllibmanagerTiming = null;
        ComDayCqWidgetImplHtmlLibraryManagerImplInfo response = api.comDayCqWidgetImplHtmlLibraryManagerImpl(post, apply, delete, action, $location, propertylist, htmllibmanagerClientmanager, htmllibmanagerDebug, htmllibmanagerDebugConsole, htmllibmanagerDebugInitJs, htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename, htmllibmanagerFirebuglitePath, htmllibmanagerForceCQUrlInfo, htmllibmanagerGzip, htmllibmanagerMaxage, htmllibmanagerMaxDataUriSize, htmllibmanagerMinify, htmllibmanagerPathList, htmllibmanagerTiming);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWidgetImplWidgetExtensionProviderImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> extendableWidgets = null;
        Boolean widgetextensionproviderDebug = null;
        ComDayCqWidgetImplWidgetExtensionProviderImplInfo response = api.comDayCqWidgetImplWidgetExtensionProviderImpl(post, apply, delete, action, $location, propertylist, extendableWidgets, widgetextensionproviderDebug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWorkflowImplEmailEMailNotificationServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String fromAddress = null;
        String hostPrefix = null;
        Boolean notifyOnabort = null;
        Boolean notifyOncomplete = null;
        Boolean notifyOncontainercomplete = null;
        Boolean notifyUseronly = null;
        ComDayCqWorkflowImplEmailEMailNotificationServiceInfo response = api.comDayCqWorkflowImplEmailEMailNotificationService(post, apply, delete, action, $location, propertylist, fromAddress, hostPrefix, notifyOnabort, notifyOncomplete, notifyOncontainercomplete, notifyUseronly);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCqWorkflowImplEmailTaskEMailNotificationServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean notifyOnupdate = null;
        Boolean notifyOncomplete = null;
        ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo response = api.comDayCqWorkflowImplEmailTaskEMailNotificationService(post, apply, delete, action, $location, propertylist, notifyOnupdate, notifyOncomplete);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        String tokenRequiredAttr = null;
        String tokenAlternateUrl = null;
        Boolean tokenEncapsulated = null;
        List<String> skipTokenRefresh = null;
        ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo response = api.comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, tokenRequiredAttr, tokenAlternateUrl, tokenEncapsulated, skipTokenRefresh);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void comDayCrxSecurityTokenImplTokenCleanupTaskTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enableTokenCleanupTask = null;
        String schedulerExpression = null;
        Integer batchSize = null;
        ComDayCrxSecurityTokenImplTokenCleanupTaskInfo response = api.comDayCrxSecurityTokenImplTokenCleanupTask(post, apply, delete, action, $location, propertylist, enableTokenCleanupTask, schedulerExpression, batchSize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void guideLocalizationServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> supportedLocales = null;
        List<String> localizableProperties = null;
        GuideLocalizationServiceInfo response = api.guideLocalizationService(post, apply, delete, action, $location, propertylist, supportedLocales, localizableProperties);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void messagingUserComponentFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer priority = null;
        MessagingUserComponentFactoryInfo response = api.messagingUserComponentFactory(post, apply, delete, action, $location, propertylist, priority);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheAriesJmxFrameworkStateConfigTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean attributeChangeNotificationEnabled = null;
        OrgApacheAriesJmxFrameworkStateConfigInfo response = api.orgApacheAriesJmxFrameworkStateConfig(post, apply, delete, action, $location, propertylist, attributeChangeNotificationEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixEventadminImplEventAdminTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer orgApacheFelixEventadminThreadPoolSize = null;
        BigDecimal orgApacheFelixEventadminAsyncToSyncThreadRatio = null;
        Integer orgApacheFelixEventadminTimeout = null;
        Boolean orgApacheFelixEventadminRequireTopic = null;
        List<String> orgApacheFelixEventadminIgnoreTimeout = null;
        List<String> orgApacheFelixEventadminIgnoreTopic = null;
        OrgApacheFelixEventadminImplEventAdminInfo response = api.orgApacheFelixEventadminImplEventAdmin(post, apply, delete, action, $location, propertylist, orgApacheFelixEventadminThreadPoolSize, orgApacheFelixEventadminAsyncToSyncThreadRatio, orgApacheFelixEventadminTimeout, orgApacheFelixEventadminRequireTopic, orgApacheFelixEventadminIgnoreTimeout, orgApacheFelixEventadminIgnoreTopic);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixHttpTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String orgApacheFelixHttpHost = null;
        Boolean orgApacheFelixHttpEnable = null;
        Integer orgOsgiServiceHttpPort = null;
        Integer orgApacheFelixHttpTimeout = null;
        Boolean orgApacheFelixHttpsEnable = null;
        Integer orgOsgiServiceHttpPortSecure = null;
        String orgApacheFelixHttpsKeystore = null;
        String orgApacheFelixHttpsKeystorePassword = null;
        String orgApacheFelixHttpsKeystoreKeyPassword = null;
        String orgApacheFelixHttpsTruststore = null;
        String orgApacheFelixHttpsTruststorePassword = null;
        String orgApacheFelixHttpsClientcertificate = null;
        String orgApacheFelixHttpContextPath = null;
        Boolean orgApacheFelixHttpMbeans = null;
        Integer orgApacheFelixHttpSessionTimeout = null;
        Integer orgApacheFelixHttpJettyThreadpoolMax = null;
        Integer orgApacheFelixHttpJettyAcceptors = null;
        Integer orgApacheFelixHttpJettySelectors = null;
        Integer orgApacheFelixHttpJettyHeaderBufferSize = null;
        Integer orgApacheFelixHttpJettyRequestBufferSize = null;
        Integer orgApacheFelixHttpJettyResponseBufferSize = null;
        Integer orgApacheFelixHttpJettyMaxFormSize = null;
        List<String> orgApacheFelixHttpPathExclusions = null;
        List<String> orgApacheFelixHttpsJettyCiphersuitesExcluded = null;
        List<String> orgApacheFelixHttpsJettyCiphersuitesIncluded = null;
        Boolean orgApacheFelixHttpJettySendServerHeader = null;
        List<String> orgApacheFelixHttpsJettyProtocolsIncluded = null;
        List<String> orgApacheFelixHttpsJettyProtocolsExcluded = null;
        Boolean orgApacheFelixProxyLoadBalancerConnectionEnable = null;
        Boolean orgApacheFelixHttpsJettyRenegotiateAllowed = null;
        Boolean orgApacheFelixHttpsJettySessionCookieHttpOnly = null;
        Boolean orgApacheFelixHttpsJettySessionCookieSecure = null;
        String orgEclipseJettyServletSessionIdPathParameterName = null;
        Boolean orgEclipseJettyServletCheckingRemoteSessionIdEncoding = null;
        String orgEclipseJettyServletSessionCookie = null;
        String orgEclipseJettyServletSessionDomain = null;
        String orgEclipseJettyServletSessionPath = null;
        Integer orgEclipseJettyServletMaxAge = null;
        String orgApacheFelixHttpName = null;
        Boolean orgApacheFelixJettyGziphandlerEnable = null;
        Integer orgApacheFelixJettyGzipMinGzipSize = null;
        Integer orgApacheFelixJettyGzipCompressionLevel = null;
        Integer orgApacheFelixJettyGzipInflateBufferSize = null;
        Boolean orgApacheFelixJettyGzipSyncFlush = null;
        List<String> orgApacheFelixJettyGzipExcludedUserAgents = null;
        List<String> orgApacheFelixJettyGzipIncludedMethods = null;
        List<String> orgApacheFelixJettyGzipExcludedMethods = null;
        List<String> orgApacheFelixJettyGzipIncludedPaths = null;
        List<String> orgApacheFelixJettyGzipExcludedPaths = null;
        List<String> orgApacheFelixJettyGzipIncludedMimeTypes = null;
        List<String> orgApacheFelixJettyGzipExcludedMimeTypes = null;
        Boolean orgApacheFelixHttpSessionInvalidate = null;
        Boolean orgApacheFelixHttpSessionUniqueid = null;
        OrgApacheFelixHttpInfo response = api.orgApacheFelixHttp(post, apply, delete, action, $location, propertylist, orgApacheFelixHttpHost, orgApacheFelixHttpEnable, orgOsgiServiceHttpPort, orgApacheFelixHttpTimeout, orgApacheFelixHttpsEnable, orgOsgiServiceHttpPortSecure, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpContextPath, orgApacheFelixHttpMbeans, orgApacheFelixHttpSessionTimeout, orgApacheFelixHttpJettyThreadpoolMax, orgApacheFelixHttpJettyAcceptors, orgApacheFelixHttpJettySelectors, orgApacheFelixHttpJettyHeaderBufferSize, orgApacheFelixHttpJettyRequestBufferSize, orgApacheFelixHttpJettyResponseBufferSize, orgApacheFelixHttpJettyMaxFormSize, orgApacheFelixHttpPathExclusions, orgApacheFelixHttpsJettyCiphersuitesExcluded, orgApacheFelixHttpsJettyCiphersuitesIncluded, orgApacheFelixHttpJettySendServerHeader, orgApacheFelixHttpsJettyProtocolsIncluded, orgApacheFelixHttpsJettyProtocolsExcluded, orgApacheFelixProxyLoadBalancerConnectionEnable, orgApacheFelixHttpsJettyRenegotiateAllowed, orgApacheFelixHttpsJettySessionCookieHttpOnly, orgApacheFelixHttpsJettySessionCookieSecure, orgEclipseJettyServletSessionIdPathParameterName, orgEclipseJettyServletCheckingRemoteSessionIdEncoding, orgEclipseJettyServletSessionCookie, orgEclipseJettyServletSessionDomain, orgEclipseJettyServletSessionPath, orgEclipseJettyServletMaxAge, orgApacheFelixHttpName, orgApacheFelixJettyGziphandlerEnable, orgApacheFelixJettyGzipMinGzipSize, orgApacheFelixJettyGzipCompressionLevel, orgApacheFelixJettyGzipInflateBufferSize, orgApacheFelixJettyGzipSyncFlush, orgApacheFelixJettyGzipExcludedUserAgents, orgApacheFelixJettyGzipIncludedMethods, orgApacheFelixJettyGzipExcludedMethods, orgApacheFelixJettyGzipIncludedPaths, orgApacheFelixJettyGzipExcludedPaths, orgApacheFelixJettyGzipIncludedMimeTypes, orgApacheFelixJettyGzipExcludedMimeTypes, orgApacheFelixHttpSessionInvalidate, orgApacheFelixHttpSessionUniqueid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixHttpSslfilterSslFilterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String sslForwardHeader = null;
        String sslForwardValue = null;
        String sslForwardCertHeader = null;
        Boolean rewriteAbsoluteUrls = null;
        OrgApacheFelixHttpSslfilterSslFilterInfo response = api.orgApacheFelixHttpSslfilterSslFilter(post, apply, delete, action, $location, propertylist, sslForwardHeader, sslForwardValue, sslForwardCertHeader, rewriteAbsoluteUrls);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixJaasConfigurationFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jaasControlFlag = null;
        Integer jaasRanking = null;
        String jaasRealmName = null;
        String jaasClassname = null;
        List<String> jaasOptions = null;
        OrgApacheFelixJaasConfigurationFactoryInfo response = api.orgApacheFelixJaasConfigurationFactory(post, apply, delete, action, $location, propertylist, jaasControlFlag, jaasRanking, jaasRealmName, jaasClassname, jaasOptions);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixJaasConfigurationSpiTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jaasDefaultRealmName = null;
        String jaasConfigProviderName = null;
        String jaasGlobalConfigPolicy = null;
        OrgApacheFelixJaasConfigurationSpiInfo response = api.orgApacheFelixJaasConfigurationSpi(post, apply, delete, action, $location, propertylist, jaasDefaultRealmName, jaasConfigProviderName, jaasGlobalConfigPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixScrScrServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer dsLoglevel = null;
        Boolean dsFactoryEnabled = null;
        Boolean dsDelayedKeepInstances = null;
        Integer dsLockTimeoutMilliseconds = null;
        Integer dsStopTimeoutMilliseconds = null;
        Boolean dsGlobalExtender = null;
        OrgApacheFelixScrScrServiceInfo response = api.orgApacheFelixScrScrService(post, apply, delete, action, $location, propertylist, dsLoglevel, dsFactoryEnabled, dsDelayedKeepInstances, dsLockTimeoutMilliseconds, dsStopTimeoutMilliseconds, dsGlobalExtender);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixSystemreadyImplComponentsCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> componentsList = null;
        String type = null;
        OrgApacheFelixSystemreadyImplComponentsCheckInfo response = api.orgApacheFelixSystemreadyImplComponentsCheck(post, apply, delete, action, $location, propertylist, componentsList, type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixSystemreadyImplFrameworkStartCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer timeout = null;
        Integer targetStartLevel = null;
        String targetStartLevelPropName = null;
        String type = null;
        OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo response = api.orgApacheFelixSystemreadyImplFrameworkStartCheck(post, apply, delete, action, $location, propertylist, timeout, targetStartLevel, targetStartLevelPropName, type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixSystemreadyImplServicesCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> servicesList = null;
        String type = null;
        OrgApacheFelixSystemreadyImplServicesCheckInfo response = api.orgApacheFelixSystemreadyImplServicesCheck(post, apply, delete, action, $location, propertylist, servicesList, type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixSystemreadyImplServletSystemAliveServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String osgiHttpWhiteboardServletPattern = null;
        String osgiHttpWhiteboardContextSelect = null;
        OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo response = api.orgApacheFelixSystemreadyImplServletSystemAliveServlet(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixSystemreadyImplServletSystemReadyServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String osgiHttpWhiteboardServletPattern = null;
        String osgiHttpWhiteboardContextSelect = null;
        OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo response = api.orgApacheFelixSystemreadyImplServletSystemReadyServlet(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixSystemreadySystemReadyMonitorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer pollInterval = null;
        OrgApacheFelixSystemreadySystemReadyMonitorInfo response = api.orgApacheFelixSystemreadySystemReadyMonitor(post, apply, delete, action, $location, propertylist, pollInterval);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixWebconsoleInternalServletOsgiManagerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String managerRoot = null;
        String httpServiceFilter = null;
        String defaultRender = null;
        String realm = null;
        String username = null;
        String password = null;
        String category = null;
        String locale = null;
        Integer loglevel = null;
        String plugins = null;
        OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo response = api.orgApacheFelixWebconsoleInternalServletOsgiManager(post, apply, delete, action, $location, propertylist, managerRoot, httpServiceFilter, defaultRender, realm, username, password, category, locale, loglevel, plugins);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixWebconsolePluginsEventInternalPluginServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxSize = null;
        OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo response = api.orgApacheFelixWebconsolePluginsEventInternalPluginServlet(post, apply, delete, action, $location, propertylist, maxSize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageConfiguratorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer felixMemoryusageDumpThreshold = null;
        Integer felixMemoryusageDumpInterval = null;
        String felixMemoryusageDumpLocation = null;
        OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageConfiguratorInfo response = api.orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageConfigurator(post, apply, delete, action, $location, propertylist, felixMemoryusageDumpThreshold, felixMemoryusageDumpInterval, felixMemoryusageDumpLocation);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheHttpProxyconfiguratorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean proxyEnabled = null;
        String proxyHost = null;
        Integer proxyPort = null;
        String proxyUser = null;
        String proxyPassword = null;
        List<String> proxyExceptions = null;
        OrgApacheHttpProxyconfiguratorInfo response = api.orgApacheHttpProxyconfigurator(post, apply, delete, action, $location, propertylist, proxyEnabled, proxyHost, proxyPort, proxyUser, proxyPassword, proxyExceptions);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String dir = null;
        OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderServiceInfo response = api.orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderService(post, apply, delete, action, $location, propertylist, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo response = api.orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(post, apply, delete, action, $location, propertylist, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String mongouri = null;
        String db = null;
        Boolean socketKeepAlive = null;
        Integer cache = null;
        Integer nodeCachePercentage = null;
        Integer prevDocCachePercentage = null;
        Integer childrenCachePercentage = null;
        Integer diffCachePercentage = null;
        Integer cacheSegmentCount = null;
        Integer cacheStackMoveDistance = null;
        Integer blobCacheSize = null;
        String persistentCache = null;
        String journalCache = null;
        Boolean customBlobStore = null;
        Integer journalGCInterval = null;
        Integer journalGCMaxAge = null;
        Boolean prefetchExternalChanges = null;
        String role = null;
        Integer versionGcMaxAgeInSecs = null;
        String versionGCExpression = null;
        Integer versionGCTimeLimitInSecs = null;
        Integer blobGcMaxAgeInSecs = null;
        Integer blobTrackSnapshotIntervalInSecs = null;
        String repositoryHome = null;
        Integer maxReplicationLagInSecs = null;
        String documentStoreType = null;
        Boolean bundlingDisabled = null;
        Integer updateLimit = null;
        List<String> persistentCacheIncludes = null;
        String leaseCheckMode = null;
        OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo response = api.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(post, apply, delete, action, $location, propertylist, mongouri, db, socketKeepAlive, cache, nodeCachePercentage, prevDocCachePercentage, childrenCachePercentage, diffCachePercentage, cacheSegmentCount, cacheStackMoveDistance, blobCacheSize, persistentCache, journalCache, customBlobStore, journalGCInterval, journalGCMaxAge, prefetchExternalChanges, role, versionGcMaxAgeInSecs, versionGCExpression, versionGCTimeLimitInSecs, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, repositoryHome, maxReplicationLagInSecs, documentStoreType, bundlingDisabled, updateLimit, persistentCacheIncludes, leaseCheckMode);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePresetTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> persistentCacheIncludes = null;
        OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePresetInfo response = api.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreset(post, apply, delete, action, $location, propertylist, persistentCacheIncludes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacheServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> includedPaths = null;
        Boolean enableAsyncObserver = null;
        Integer observerQueueSize = null;
        OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacheServiceInfo response = api.orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacheService(post, apply, delete, action, $location, propertylist, includedPaths, enableAsyncObserver, observerQueueSize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> asyncConfigs = null;
        Integer leaseTimeOutMinutes = null;
        Integer failingIndexTimeoutSeconds = null;
        Integer errorWarnIntervalSeconds = null;
        OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo response = api.orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(post, apply, delete, action, $location, propertylist, asyncConfigs, leaseTimeOutMinutes, failingIndexTimeoutSeconds, errorWarnIntervalSeconds);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean disabled = null;
        Boolean debug = null;
        String localIndexDir = null;
        Boolean enableOpenIndexAsync = null;
        Integer threadPoolSize = null;
        Boolean prefetchIndexFiles = null;
        Integer extractedTextCacheSizeInMB = null;
        Integer extractedTextCacheExpiryInSecs = null;
        Boolean alwaysUsePreExtractedCache = null;
        Integer booleanClauseLimit = null;
        Boolean enableHybridIndexing = null;
        Integer hybridQueueSize = null;
        Boolean disableStoredIndexDefinition = null;
        Boolean deletedBlobsCollectionEnabled = null;
        Integer propIndexCleanerIntervalInSecs = null;
        Boolean enableSingleBlobIndexFiles = null;
        OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServiceInfo response = api.orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderService(post, apply, delete, action, $location, propertylist, disabled, debug, localIndexDir, enableOpenIndexAsync, threadPoolSize, prefetchIndexFiles, extractedTextCacheSizeInMB, extractedTextCacheExpiryInSecs, alwaysUsePreExtractedCache, booleanClauseLimit, enableHybridIndexing, hybridQueueSize, disableStoredIndexDefinition, deletedBlobsCollectionEnabled, propIndexCleanerIntervalInSecs, enableSingleBlobIndexFiles);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerConfigurationProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String solrHomePath = null;
        String solrCoreName = null;
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerConfigurationProviderInfo response = api.orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerConfigurationProvider(post, apply, delete, action, $location, propertylist, solrHomePath, solrCoreName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersObserverServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersObserverServiceInfo response = api.orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersObserverService(post, apply, delete, action, $location, propertylist, enabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProviderServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String pathDescField = null;
        String pathChildField = null;
        String pathParentField = null;
        String pathExactField = null;
        String catchAllField = null;
        String collapsedPathField = null;
        String pathDepthField = null;
        String commitPolicy = null;
        Integer rows = null;
        Boolean pathRestrictions = null;
        Boolean propertyRestrictions = null;
        Boolean primarytypesRestrictions = null;
        List<String> ignoredProperties = null;
        List<String> usedProperties = null;
        List<String> typeMappings = null;
        List<String> propertyMappings = null;
        Boolean collapseJcrcontentNodes = null;
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProviderServiceInfo response = api.orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProviderService(post, apply, delete, action, $location, propertylist, pathDescField, pathChildField, pathParentField, pathExactField, catchAllField, collapsedPathField, pathDepthField, commitPolicy, rows, pathRestrictions, propertyRestrictions, primarytypesRestrictions, ignoredProperties, usedProperties, typeMappings, propertyMappings, collapseJcrcontentNodes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfigurationProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String solrHttpUrl = null;
        String solrZkHost = null;
        String solrCollection = null;
        Integer solrSocketTimeout = null;
        Integer solrConnectionTimeout = null;
        Integer solrShardsNo = null;
        Integer solrReplicationFactor = null;
        String solrConfDir = null;
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfigurationProviderInfo response = api.orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfigurationProvider(post, apply, delete, action, $location, propertylist, solrHttpUrl, solrZkHost, solrCollection, solrSocketTimeout, solrConnectionTimeout, solrShardsNo, solrReplicationFactor, solrConfDir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProviderServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean queryAggregation = null;
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProviderServiceInfo response = api.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProviderService(post, apply, delete, action, $location, propertylist, queryAggregation);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String serverType = null;
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderServiceInfo response = api.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderService(post, apply, delete, action, $location, propertylist, serverType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerType = null;
        OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo response = api.orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(post, apply, delete, action, $location, propertylist, providerType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxItems = null;
        Integer maxPathDepth = null;
        Boolean enabled = null;
        OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo response = api.orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(post, apply, delete, action, $location, propertylist, maxItems, maxPathDepth, enabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakQueryQueryEngineSettingsServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer queryLimitInMemory = null;
        Integer queryLimitReads = null;
        Boolean queryFailTraversal = null;
        Boolean fastQuerySize = null;
        OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo response = api.orgApacheJackrabbitOakQueryQueryEngineSettingsService(post, apply, delete, action, $location, propertylist, queryLimitInMemory, queryLimitReads, queryFailTraversal, fastQuerySize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigurationImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String orgApacheJackrabbitOakAuthenticationAppName = null;
        String orgApacheJackrabbitOakAuthenticationConfigSpiName = null;
        OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigurationImplInfo response = api.orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigurationImpl(post, apply, delete, action, $location, propertylist, orgApacheJackrabbitOakAuthenticationAppName, orgApacheJackrabbitOakAuthenticationConfigSpiName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentityProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerName = null;
        String hostName = null;
        Integer hostPort = null;
        Boolean hostSsl = null;
        Boolean hostTls = null;
        Boolean hostNoCertCheck = null;
        String bindDn = null;
        String bindPassword = null;
        String searchTimeout = null;
        Integer adminPoolMaxActive = null;
        Boolean adminPoolLookupOnValidate = null;
        Integer userPoolMaxActive = null;
        Boolean userPoolLookupOnValidate = null;
        String userBaseDN = null;
        List<String> userObjectclass = null;
        String userIdAttribute = null;
        String userExtraFilter = null;
        Boolean userMakeDnPath = null;
        String groupBaseDN = null;
        List<String> groupObjectclass = null;
        String groupNameAttribute = null;
        String groupExtraFilter = null;
        Boolean groupMakeDnPath = null;
        String groupMemberAttribute = null;
        Boolean useUidForExtId = null;
        List<String> customattributes = null;
        OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentityProviderInfo response = api.orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentityProvider(post, apply, delete, action, $location, propertylist, providerName, hostName, hostPort, hostSsl, hostTls, hostNoCertCheck, bindDn, bindPassword, searchTimeout, adminPoolMaxActive, adminPoolLookupOnValidate, userPoolMaxActive, userPoolLookupOnValidate, userBaseDN, userObjectclass, userIdAttribute, userExtraFilter, userMakeDnPath, groupBaseDN, groupObjectclass, groupNameAttribute, groupExtraFilter, groupMakeDnPath, groupMemberAttribute, useUidForExtId, customattributes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigurationImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String tokenExpiration = null;
        String tokenLength = null;
        Boolean tokenRefresh = null;
        Integer tokenCleanupThreshold = null;
        String passwordHashAlgorithm = null;
        Integer passwordHashIterations = null;
        Integer passwordSaltSize = null;
        OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigurationImplInfo response = api.orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigurationImpl(post, apply, delete, action, $location, propertylist, tokenExpiration, tokenLength, tokenRefresh, tokenCleanupThreshold, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurationImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String permissionsJr2 = null;
        String importBehavior = null;
        List<String> readPaths = null;
        List<String> administrativePrincipals = null;
        Integer configurationRanking = null;
        OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurationImplInfo response = api.orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurationImpl(post, apply, delete, action, $location, propertylist, permissionsJr2, importBehavior, readPaths, administrativePrincipals, configurationRanking);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrationTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> requiredServicePids = null;
        String authorizationCompositionType = null;
        OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrationInfo response = api.orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistration(post, apply, delete, action, $location, propertylist, requiredServicePids, authorizationCompositionType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer length = null;
        OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo response = api.orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(post, apply, delete, action, $location, propertylist, length);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSecurityUserUserConfigurationImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String usersPath = null;
        String groupsPath = null;
        String systemRelativePath = null;
        Integer defaultDepth = null;
        String importBehavior = null;
        String passwordHashAlgorithm = null;
        Integer passwordHashIterations = null;
        Integer passwordSaltSize = null;
        Boolean omitAdminPw = null;
        Boolean supportAutoSave = null;
        Integer passwordMaxAge = null;
        Boolean initialPasswordChange = null;
        Integer passwordHistorySize = null;
        Boolean passwordExpiryForAdmin = null;
        Integer cacheExpiration = null;
        Boolean enableRFC7613UsercaseMappedProfile = null;
        OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo response = api.orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(post, apply, delete, action, $location, propertylist, usersPath, groupsPath, systemRelativePath, defaultDepth, importBehavior, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize, omitAdminPw, supportAutoSave, passwordMaxAge, initialPasswordChange, passwordHistorySize, passwordExpiryForAdmin, cacheExpiration, enableRFC7613UsercaseMappedProfile);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String accountName = null;
        String containerName = null;
        String accessKey = null;
        String rootPath = null;
        String connectionURL = null;
        OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo response = api.orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(post, apply, delete, action, $location, propertylist, accountName, containerName, accessKey, rootPath, connectionURL);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String repositoryHome = null;
        String tarmkMode = null;
        Integer tarmkSize = null;
        Integer segmentCacheSize = null;
        Integer stringCacheSize = null;
        Integer templateCacheSize = null;
        Integer stringDeduplicationCacheSize = null;
        Integer templateDeduplicationCacheSize = null;
        Integer nodeDeduplicationCacheSize = null;
        Boolean pauseCompaction = null;
        Integer compactionRetryCount = null;
        Integer compactionForceTimeout = null;
        Integer compactionSizeDeltaEstimation = null;
        Boolean compactionDisableEstimation = null;
        Integer compactionRetainedGenerations = null;
        Integer compactionMemoryThreshold = null;
        Integer compactionProgressLog = null;
        Boolean standby = null;
        Boolean customBlobStore = null;
        Boolean customSegmentStore = null;
        Boolean splitPersistence = null;
        String repositoryBackupDir = null;
        Integer blobGcMaxAgeInSecs = null;
        Integer blobTrackSnapshotIntervalInSecs = null;
        String role = null;
        Boolean registerDescriptors = null;
        Boolean dispatchChanges = null;
        OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo response = api.orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(post, apply, delete, action, $location, propertylist, repositoryHome, tarmkMode, tarmkSize, segmentCacheSize, stringCacheSize, templateCacheSize, stringDeduplicationCacheSize, templateDeduplicationCacheSize, nodeDeduplicationCacheSize, pauseCompaction, compactionRetryCount, compactionForceTimeout, compactionSizeDeltaEstimation, compactionDisableEstimation, compactionRetainedGenerations, compactionMemoryThreshold, compactionProgressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryBackupDir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, role, registerDescriptors, dispatchChanges);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> commitsTrackerWriterGroups = null;
        OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo response = api.orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(post, apply, delete, action, $location, propertylist, commitsTrackerWriterGroups);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String repositoryHome = null;
        String tarmkMode = null;
        Integer tarmkSize = null;
        Integer segmentCacheSize = null;
        Integer stringCacheSize = null;
        Integer templateCacheSize = null;
        Integer stringDeduplicationCacheSize = null;
        Integer templateDeduplicationCacheSize = null;
        Integer nodeDeduplicationCacheSize = null;
        Boolean pauseCompaction = null;
        Integer compactionRetryCount = null;
        Integer compactionForceTimeout = null;
        Integer compactionSizeDeltaEstimation = null;
        Boolean compactionDisableEstimation = null;
        Integer compactionRetainedGenerations = null;
        Integer compactionMemoryThreshold = null;
        Integer compactionProgressLog = null;
        Boolean standby = null;
        Boolean customBlobStore = null;
        Boolean customSegmentStore = null;
        Boolean splitPersistence = null;
        String repositoryBackupDir = null;
        Integer blobGcMaxAgeInSecs = null;
        Integer blobTrackSnapshotIntervalInSecs = null;
        OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo response = api.orgApacheJackrabbitOakSegmentSegmentNodeStoreService(post, apply, delete, action, $location, propertylist, repositoryHome, tarmkMode, tarmkSize, segmentCacheSize, stringCacheSize, templateCacheSize, stringDeduplicationCacheSize, templateDeduplicationCacheSize, nodeDeduplicationCacheSize, pauseCompaction, compactionRetryCount, compactionForceTimeout, compactionSizeDeltaEstimation, compactionDisableEstimation, compactionRetainedGenerations, compactionMemoryThreshold, compactionProgressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryBackupDir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean orgApacheSlingInstallerConfigurationPersist = null;
        String mode = null;
        Integer port = null;
        String primaryHost = null;
        Integer interval = null;
        List<String> primaryAllowedClientIpRanges = null;
        Boolean secure = null;
        Integer standbyReadtimeout = null;
        Boolean standbyAutoclean = null;
        OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo response = api.orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(post, apply, delete, action, $location, propertylist, orgApacheSlingInstallerConfigurationPersist, mode, port, primaryHost, interval, primaryAllowedClientIpRanges, secure, standbyReadtimeout, standbyAutoclean);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDefaultSyncHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String handlerName = null;
        String userExpirationTime = null;
        List<String> userAutoMembership = null;
        List<String> userPropertyMapping = null;
        String userPathPrefix = null;
        String userMembershipExpTime = null;
        Integer userMembershipNestingDepth = null;
        Boolean userDynamicMembership = null;
        Boolean userDisableMissing = null;
        String groupExpirationTime = null;
        List<String> groupAutoMembership = null;
        List<String> groupPropertyMapping = null;
        String groupPathPrefix = null;
        Boolean enableRFC7613UsercaseMappedProfile = null;
        OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDefaultSyncHandlerInfo response = api.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDefaultSyncHandler(post, apply, delete, action, $location, propertylist, handlerName, userExpirationTime, userAutoMembership, userPropertyMapping, userPathPrefix, userMembershipExpTime, userMembershipNestingDepth, userDynamicMembership, userDisableMissing, groupExpirationTime, groupAutoMembership, groupPropertyMapping, groupPathPrefix, enableRFC7613UsercaseMappedProfile);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExternalLoginModuleFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer jaasRanking = null;
        String jaasControlFlag = null;
        String jaasRealmName = null;
        String idpName = null;
        String syncHandlerName = null;
        OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExternalLoginModuleFactoryInfo response = api.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExternalLoginModuleFactory(post, apply, delete, action, $location, propertylist, jaasRanking, jaasControlFlag, jaasRealmName, idpName, syncHandlerName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrincipalExternalPrincipalConfigurationTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean protectExternalId = null;
        OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrincipalExternalPrincipalConfigurationInfo response = api.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrincipalExternalPrincipalConfiguration(post, apply, delete, action, $location, propertylist, protectExternalId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfigurationTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> cugSupportedPaths = null;
        Boolean cugEnabled = null;
        Integer configurationRanking = null;
        OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfigurationInfo response = api.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiguration(post, apply, delete, action, $location, propertylist, cugSupportedPaths, cugEnabled, configurationRanking);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcludeImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> principalNames = null;
        OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcludeImplInfo response = api.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcludeImpl(post, apply, delete, action, $location, propertylist, principalNames);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableActionProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String enabledActions = null;
        List<String> userPrivilegeNames = null;
        List<String> groupPrivilegeNames = null;
        String constraint = null;
        OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableActionProviderInfo response = api.orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableActionProvider(post, apply, delete, action, $location, propertylist, enabledActions, userPrivilegeNames, groupPrivilegeNames, constraint);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitVaultPackagingImplPackagingImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> packageRoots = null;
        OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo response = api.orgApacheJackrabbitVaultPackagingImplPackagingImpl(post, apply, delete, action, $location, propertylist, packageRoots);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String homePath = null;
        OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo response = api.orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(post, apply, delete, action, $location, propertylist, homePath);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingAuthCoreImplLogoutServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> slingServletMethods = null;
        String slingServletPaths = null;
        OrgApacheSlingAuthCoreImplLogoutServletInfo response = api.orgApacheSlingAuthCoreImplLogoutServlet(post, apply, delete, action, $location, propertylist, slingServletMethods, slingServletPaths);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigImplConfigurationBindingsValueProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo response = api.orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(post, apply, delete, action, $location, propertylist, enabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigImplConfigurationResolverImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> configBucketNames = null;
        OrgApacheSlingCaconfigImplConfigurationResolverImplInfo response = api.orgApacheSlingCaconfigImplConfigurationResolverImpl(post, apply, delete, action, $location, propertylist, configBucketNames);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStrategyTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        List<String> configPropertyInheritancePropertyNames = null;
        OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStrategyInfo response = api.orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStrategy(post, apply, delete, action, $location, propertylist, enabled, configPropertyInheritancePropertyNames);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStrategyTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStrategyInfo response = api.orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStrategy(post, apply, delete, action, $location, propertylist, enabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String description = null;
        List<String> overrides = null;
        Boolean enabled = null;
        Integer serviceRanking = null;
        OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviderInfo response = api.orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvider(post, apply, delete, action, $location, propertylist, description, overrides, enabled, serviceRanking);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOverrideProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        Integer serviceRanking = null;
        OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOverrideProviderInfo response = api.orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOverrideProvider(post, apply, delete, action, $location, propertylist, enabled, serviceRanking);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigManagementImplConfigurationManagementSettingsImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> ignorePropertyNameRegex = null;
        List<String> configCollectionPropertiesResourceNames = null;
        OrgApacheSlingCaconfigManagementImplConfigurationManagementSettingsImplInfo response = api.orgApacheSlingCaconfigManagementImplConfigurationManagementSettingsImpl(post, apply, delete, action, $location, propertylist, ignorePropertyNameRegex, configCollectionPropertiesResourceNames);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourceResolvingStrategyTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        String configPath = null;
        List<String> fallbackPaths = null;
        List<String> configCollectionInheritancePropertyNames = null;
        OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourceResolvingStrategyInfo response = api.orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourceResolvingStrategy(post, apply, delete, action, $location, propertylist, enabled, configPath, fallbackPaths, configCollectionInheritancePropertyNames);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean enabled = null;
        List<String> configRefResourceNames = null;
        List<String> configRefPropertyNames = null;
        Integer serviceRanking = null;
        OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo response = api.orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(post, apply, delete, action, $location, propertylist, enabled, configRefResourceNames, configRefPropertyNames, serviceRanking);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> parserFeatures = null;
        OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo response = api.orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(post, apply, delete, action, $location, propertylist, parserFeatures);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsLogLogManagerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String orgApacheSlingCommonsLogLevel = null;
        String orgApacheSlingCommonsLogFile = null;
        Integer orgApacheSlingCommonsLogFileNumber = null;
        String orgApacheSlingCommonsLogFileSize = null;
        String orgApacheSlingCommonsLogPattern = null;
        String orgApacheSlingCommonsLogConfigurationFile = null;
        Boolean orgApacheSlingCommonsLogPackagingDataEnabled = null;
        Integer orgApacheSlingCommonsLogMaxCallerDataDepth = null;
        Integer orgApacheSlingCommonsLogMaxOldFileCountInDump = null;
        Integer orgApacheSlingCommonsLogNumOfLines = null;
        OrgApacheSlingCommonsLogLogManagerInfo response = api.orgApacheSlingCommonsLogLogManager(post, apply, delete, action, $location, propertylist, orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogConfigurationFile, orgApacheSlingCommonsLogPackagingDataEnabled, orgApacheSlingCommonsLogMaxCallerDataDepth, orgApacheSlingCommonsLogMaxOldFileCountInDump, orgApacheSlingCommonsLogNumOfLines);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsLogLogManagerFactoryConfigTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String orgApacheSlingCommonsLogLevel = null;
        String orgApacheSlingCommonsLogFile = null;
        String orgApacheSlingCommonsLogPattern = null;
        List<String> orgApacheSlingCommonsLogNames = null;
        Boolean orgApacheSlingCommonsLogAdditiv = null;
        OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo response = api.orgApacheSlingCommonsLogLogManagerFactoryConfig(post, apply, delete, action, $location, propertylist, orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogNames, orgApacheSlingCommonsLogAdditiv);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsLogLogManagerFactoryWriterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String orgApacheSlingCommonsLogFile = null;
        Integer orgApacheSlingCommonsLogFileNumber = null;
        String orgApacheSlingCommonsLogFileSize = null;
        Boolean orgApacheSlingCommonsLogFileBuffered = null;
        OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo response = api.orgApacheSlingCommonsLogLogManagerFactoryWriter(post, apply, delete, action, $location, propertylist, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogFileBuffered);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsMetricsInternalLogReporterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer period = null;
        String timeUnit = null;
        String level = null;
        String loggerName = null;
        String prefix = null;
        String pattern = null;
        String registryName = null;
        OrgApacheSlingCommonsMetricsInternalLogReporterInfo response = api.orgApacheSlingCommonsMetricsInternalLogReporter(post, apply, delete, action, $location, propertylist, period, timeUnit, level, loggerName, prefix, pattern, registryName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> datasources = null;
        Integer step = null;
        List<String> archives = null;
        String path = null;
        OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo response = api.orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(post, apply, delete, action, $location, propertylist, datasources, step, archives, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsMimeInternalMimeTypeServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> mimeTypes = null;
        OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo response = api.orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(post, apply, delete, action, $location, propertylist, mimeTypes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsSchedulerImplQuartzSchedulerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String poolName = null;
        List<String> allowedPoolNames = null;
        Boolean schedulerUseleaderforsingle = null;
        List<String> metricsFilters = null;
        Integer slowThresholdMillis = null;
        OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo response = api.orgApacheSlingCommonsSchedulerImplQuartzScheduler(post, apply, delete, action, $location, propertylist, poolName, allowedPoolNames, schedulerUseleaderforsingle, metricsFilters, slowThresholdMillis);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxQuartzJobDurationAcceptable = null;
        OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo response = api.orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(post, apply, delete, action, $location, propertylist, maxQuartzJobDurationAcceptable);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        Integer minPoolSize = null;
        Integer maxPoolSize = null;
        Integer queueSize = null;
        Integer maxThreadAge = null;
        Integer keepAliveTime = null;
        String blockPolicy = null;
        Boolean shutdownGraceful = null;
        Boolean daemon = null;
        Integer shutdownWaitTime = null;
        String priority = null;
        OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo response = api.orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(post, apply, delete, action, $location, propertylist, name, minPoolSize, maxPoolSize, queueSize, maxThreadAge, keepAliveTime, blockPolicy, shutdownGraceful, daemon, shutdownWaitTime, priority);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDatasourceDataSourceFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String datasourceName = null;
        String datasourceSvcPropName = null;
        String driverClassName = null;
        String url = null;
        String username = null;
        String password = null;
        String defaultAutoCommit = null;
        String defaultReadOnly = null;
        String defaultTransactionIsolation = null;
        String defaultCatalog = null;
        Integer maxActive = null;
        Integer maxIdle = null;
        Integer minIdle = null;
        Integer initialSize = null;
        Integer maxWait = null;
        Integer maxAge = null;
        Boolean testOnBorrow = null;
        Boolean testOnReturn = null;
        Boolean testWhileIdle = null;
        String validationQuery = null;
        Integer validationQueryTimeout = null;
        Integer timeBetweenEvictionRunsMillis = null;
        Integer minEvictableIdleTimeMillis = null;
        String connectionProperties = null;
        String initSQL = null;
        String jdbcInterceptors = null;
        Integer validationInterval = null;
        Boolean logValidationErrors = null;
        List<String> datasourceSvcProperties = null;
        OrgApacheSlingDatasourceDataSourceFactoryInfo response = api.orgApacheSlingDatasourceDataSourceFactory(post, apply, delete, action, $location, propertylist, datasourceName, datasourceSvcPropName, driverClassName, url, username, password, defaultAutoCommit, defaultReadOnly, defaultTransactionIsolation, defaultCatalog, maxActive, maxIdle, minIdle, initialSize, maxWait, maxAge, testOnBorrow, testOnReturn, testWhileIdle, validationQuery, validationQueryTimeout, timeBetweenEvictionRunsMillis, minEvictableIdleTimeMillis, connectionProperties, initSQL, jdbcInterceptors, validationInterval, logValidationErrors, datasourceSvcProperties);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDatasourceJNDIDataSourceFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String datasourceName = null;
        String datasourceSvcPropName = null;
        String datasourceJndiName = null;
        List<String> jndiProperties = null;
        OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo response = api.orgApacheSlingDatasourceJNDIDataSourceFactory(post, apply, delete, action, $location, propertylist, datasourceName, datasourceSvcPropName, datasourceJndiName, jndiProperties);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDiscoveryOakConfigTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer connectorPingTimeout = null;
        Integer connectorPingInterval = null;
        Integer discoveryLiteCheckInterval = null;
        Integer clusterSyncServiceTimeout = null;
        Integer clusterSyncServiceInterval = null;
        Boolean enableSyncToken = null;
        Integer minEventDelay = null;
        Integer socketConnectTimeout = null;
        Integer soTimeout = null;
        List<String> topologyConnectorUrls = null;
        List<String> topologyConnectorWhitelist = null;
        Boolean autoStopLocalLoopEnabled = null;
        Boolean gzipConnectorRequestsEnabled = null;
        Boolean hmacEnabled = null;
        Boolean enableEncryption = null;
        String sharedKey = null;
        Integer hmacSharedKeyTTL = null;
        String backoffStandbyFactor = null;
        String backoffStableFactor = null;
        OrgApacheSlingDiscoveryOakConfigInfo response = api.orgApacheSlingDiscoveryOakConfig(post, apply, delete, action, $location, propertylist, connectorPingTimeout, connectorPingInterval, discoveryLiteCheckInterval, clusterSyncServiceTimeout, clusterSyncServiceInterval, enableSyncToken, minEventDelay, socketConnectTimeout, soTimeout, topologyConnectorUrls, topologyConnectorWhitelist, autoStopLocalLoopEnabled, gzipConnectorRequestsEnabled, hmacEnabled, enableEncryption, sharedKey, hmacSharedKeyTTL, backoffStandbyFactor, backoffStableFactor);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo response = api.orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String title = null;
        String details = null;
        Boolean enabled = null;
        String serviceName = null;
        String logLevel = null;
        List<String> allowedRoots = null;
        Boolean queueProcessingEnabled = null;
        List<String> packageImporterEndpoints = null;
        List<String> passiveQueues = null;
        List<String> priorityQueues = null;
        String retryStrategy = null;
        Integer retryAttempts = null;
        String requestAuthorizationStrategyTarget = null;
        String transportSecretProviderTarget = null;
        String packageBuilderTarget = null;
        String triggersTarget = null;
        String queueProvider = null;
        Boolean asyncDelivery = null;
        Integer httpConnTimeout = null;
        OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoryInfo response = api.orgApacheSlingDistributionAgentImplForwardDistributionAgentFactory(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, allowedRoots, queueProcessingEnabled, packageImporterEndpoints, passiveQueues, priorityQueues, retryStrategy, retryAttempts, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget, queueProvider, asyncDelivery, httpConnTimeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAuthorizationStrategyFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String jcrPrivilege = null;
        OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAuthorizationStrategyFactoryInfo response = api.orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAuthorizationStrategyFactory(post, apply, delete, action, $location, propertylist, name, jcrPrivilege);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String title = null;
        String details = null;
        Boolean enabled = null;
        String serviceName = null;
        String logLevel = null;
        List<String> allowedRoots = null;
        String requestAuthorizationStrategyTarget = null;
        String queueProviderFactoryTarget = null;
        String packageBuilderTarget = null;
        String triggersTarget = null;
        List<String> priorityQueues = null;
        OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo response = api.orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, allowedRoots, requestAuthorizationStrategyTarget, queueProviderFactoryTarget, packageBuilderTarget, triggersTarget, priorityQueues);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String title = null;
        String details = null;
        Boolean enabled = null;
        String serviceName = null;
        String logLevel = null;
        Boolean queueProcessingEnabled = null;
        List<String> packageExporterEndpoints = null;
        Integer pullItems = null;
        Integer httpConnTimeout = null;
        String requestAuthorizationStrategyTarget = null;
        String transportSecretProviderTarget = null;
        String packageBuilderTarget = null;
        String triggersTarget = null;
        OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoryInfo response = api.orgApacheSlingDistributionAgentImplReverseDistributionAgentFactory(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, packageExporterEndpoints, pullItems, httpConnTimeout, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String title = null;
        String details = null;
        Boolean enabled = null;
        String serviceName = null;
        String logLevel = null;
        Boolean queueProcessingEnabled = null;
        String packageExporterTarget = null;
        String packageImporterTarget = null;
        String requestAuthorizationStrategyTarget = null;
        String triggersTarget = null;
        OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactoryInfo response = api.orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactory(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, packageExporterTarget, packageImporterTarget, requestAuthorizationStrategyTarget, triggersTarget);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String title = null;
        String details = null;
        Boolean enabled = null;
        String serviceName = null;
        String logLevel = null;
        Boolean queueProcessingEnabled = null;
        List<String> passiveQueues = null;
        List<String> packageExporterEndpoints = null;
        List<String> packageImporterEndpoints = null;
        String retryStrategy = null;
        Integer retryAttempts = null;
        Integer pullItems = null;
        Integer httpConnTimeout = null;
        String requestAuthorizationStrategyTarget = null;
        String transportSecretProviderTarget = null;
        String packageBuilderTarget = null;
        String triggersTarget = null;
        OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo response = api.orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, passiveQueues, packageExporterEndpoints, packageImporterEndpoints, retryStrategy, retryAttempts, pullItems, httpConnTimeout, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionMonitorDistributionQueueHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        Integer numberOfRetriesAllowed = null;
        OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo response = api.orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, numberOfRetriesAllowed);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionPackagingImplExporterAgentDistributionPackageExporterFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String queue = null;
        Boolean dropInvalidItems = null;
        String agentTarget = null;
        OrgApacheSlingDistributionPackagingImplExporterAgentDistributionPackageExporterFactoryInfo response = api.orgApacheSlingDistributionPackagingImplExporterAgentDistributionPackageExporterFactory(post, apply, delete, action, $location, propertylist, name, queue, dropInvalidItems, agentTarget);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionPackagingImplExporterLocalDistributionPackageExporterFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String packageBuilderTarget = null;
        OrgApacheSlingDistributionPackagingImplExporterLocalDistributionPackageExporterFactoryInfo response = api.orgApacheSlingDistributionPackagingImplExporterLocalDistributionPackageExporterFactory(post, apply, delete, action, $location, propertylist, name, packageBuilderTarget);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionPackagingImplExporterRemoteDistributionPackageExporterFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        List<String> endpoints = null;
        Integer pullItems = null;
        String packageBuilderTarget = null;
        String transportSecretProviderTarget = null;
        OrgApacheSlingDistributionPackagingImplExporterRemoteDistributionPackageExporterFactoryInfo response = api.orgApacheSlingDistributionPackagingImplExporterRemoteDistributionPackageExporterFactory(post, apply, delete, action, $location, propertylist, name, endpoints, pullItems, packageBuilderTarget, transportSecretProviderTarget);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionPackagingImplImporterLocalDistributionPackageImporterFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String packageBuilderTarget = null;
        OrgApacheSlingDistributionPackagingImplImporterLocalDistributionPackageImporterFactoryInfo response = api.orgApacheSlingDistributionPackagingImplImporterLocalDistributionPackageImporterFactory(post, apply, delete, action, $location, propertylist, name, packageBuilderTarget);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionPackagingImplImporterRemoteDistributionPackageImporterFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        List<String> endpoints = null;
        String transportSecretProviderTarget = null;
        OrgApacheSlingDistributionPackagingImplImporterRemoteDistributionPackageImporterFactoryInfo response = api.orgApacheSlingDistributionPackagingImplImporterRemoteDistributionPackageImporterFactory(post, apply, delete, action, $location, propertylist, name, endpoints, transportSecretProviderTarget);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionPackagingImplImporterRepositoryDistributionPackageImporterFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String serviceName = null;
        String path = null;
        String privilegeName = null;
        OrgApacheSlingDistributionPackagingImplImporterRepositoryDistributionPackageImporterFactoryInfo response = api.orgApacheSlingDistributionPackagingImplImporterRepositoryDistributionPackageImporterFactory(post, apply, delete, action, $location, propertylist, name, serviceName, path, privilegeName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionResourcesImplDistributionConfigurationResourceProviderFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerRoots = null;
        String kind = null;
        OrgApacheSlingDistributionResourcesImplDistributionConfigurationResourceProviderFactoryInfo response = api.orgApacheSlingDistributionResourcesImplDistributionConfigurationResourceProviderFactory(post, apply, delete, action, $location, propertylist, providerRoots, kind);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionResourcesImplDistributionServiceResourceProviderFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerRoots = null;
        String kind = null;
        OrgApacheSlingDistributionResourcesImplDistributionServiceResourceProviderFactoryInfo response = api.orgApacheSlingDistributionResourcesImplDistributionServiceResourceProviderFactory(post, apply, delete, action, $location, propertylist, providerRoots, kind);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionSerializationImplDistributionPackageBuilderFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String type = null;
        String formatTarget = null;
        String tempFsFolder = null;
        Integer fileThreshold = null;
        String memoryUnit = null;
        Boolean useOffHeapMemory = null;
        String digestAlgorithm = null;
        Integer monitoringQueueSize = null;
        Integer cleanupDelay = null;
        List<String> packageFilters = null;
        List<String> propertyFilters = null;
        OrgApacheSlingDistributionSerializationImplDistributionPackageBuilderFactoryInfo response = api.orgApacheSlingDistributionSerializationImplDistributionPackageBuilderFactory(post, apply, delete, action, $location, propertylist, name, type, formatTarget, tempFsFolder, fileThreshold, memoryUnit, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, cleanupDelay, packageFilters, propertyFilters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionSerializationImplVltVaultDistributionPackageBuilderFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String type = null;
        String importMode = null;
        String aclHandling = null;
        String packageRoots = null;
        List<String> packageFilters = null;
        List<String> propertyFilters = null;
        String tempFsFolder = null;
        Boolean useBinaryReferences = null;
        Integer autoSaveThreshold = null;
        Integer cleanupDelay = null;
        Integer fileThreshold = null;
        String MEGA_BYTES = null;
        Boolean useOffHeapMemory = null;
        String digestAlgorithm = null;
        Integer monitoringQueueSize = null;
        List<String> pathsMapping = null;
        Boolean strictImport = null;
        OrgApacheSlingDistributionSerializationImplVltVaultDistributionPackageBuilderFactoryInfo response = api.orgApacheSlingDistributionSerializationImplVltVaultDistributionPackageBuilderFactory(post, apply, delete, action, $location, propertylist, name, type, importMode, aclHandling, packageRoots, packageFilters, propertyFilters, tempFsFolder, useBinaryReferences, autoSaveThreshold, cleanupDelay, fileThreshold, MEGA_BYTES, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, pathsMapping, strictImport);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTransportImplUserCredentialsDistributionTransportSecretProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String username = null;
        String password = null;
        OrgApacheSlingDistributionTransportImplUserCredentialsDistributionTransportSecretProviderInfo response = api.orgApacheSlingDistributionTransportImplUserCredentialsDistributionTransportSecretProvider(post, apply, delete, action, $location, propertylist, name, username, password);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTriggerImplDistributionEventDistributeDistributionTriggerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String path = null;
        OrgApacheSlingDistributionTriggerImplDistributionEventDistributeDistributionTriggerFactoryInfo response = api.orgApacheSlingDistributionTriggerImplDistributionEventDistributeDistributionTriggerFactory(post, apply, delete, action, $location, propertylist, name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String path = null;
        List<String> ignoredPathsPatterns = null;
        String serviceName = null;
        Boolean deep = null;
        OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerFactoryInfo response = api.orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerFactory(post, apply, delete, action, $location, propertylist, name, path, ignoredPathsPatterns, serviceName, deep);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributionTriggerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String path = null;
        String serviceName = null;
        String nuggetsPath = null;
        OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributionTriggerFactoryInfo response = api.orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributionTriggerFactory(post, apply, delete, action, $location, propertylist, name, path, serviceName, nuggetsPath);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTriggerImplRemoteEventDistributionTriggerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String endpoint = null;
        String transportSecretProviderTarget = null;
        OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTriggerFactoryInfo response = api.orgApacheSlingDistributionTriggerImplRemoteEventDistributionTriggerFactory(post, apply, delete, action, $location, propertylist, name, endpoint, transportSecretProviderTarget);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTriggerImplResourceEventDistributionTriggerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String path = null;
        OrgApacheSlingDistributionTriggerImplResourceEventDistributionTriggerFactoryInfo response = api.orgApacheSlingDistributionTriggerImplResourceEventDistributionTriggerFactory(post, apply, delete, action, $location, propertylist, name, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingDistributionTriggerImplScheduledDistributionTriggerFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String path = null;
        String seconds = null;
        String serviceName = null;
        OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggerFactoryInfo response = api.orgApacheSlingDistributionTriggerImplScheduledDistributionTriggerFactory(post, apply, delete, action, $location, propertylist, name, path, seconds, serviceName);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEngineImplAuthSlingAuthenticatorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String osgiHttpWhiteboardContextSelect = null;
        String osgiHttpWhiteboardListener = null;
        String authSudoCookie = null;
        String authSudoParameter = null;
        Boolean authAnnonymous = null;
        List<String> slingAuthRequirements = null;
        String slingAuthAnonymousUser = null;
        String slingAuthAnonymousPassword = null;
        String authHttp = null;
        String authHttpRealm = null;
        List<String> authUriSuffix = null;
        OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo response = api.orgApacheSlingEngineImplAuthSlingAuthenticator(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardContextSelect, osgiHttpWhiteboardListener, authSudoCookie, authSudoParameter, authAnnonymous, slingAuthRequirements, slingAuthAnonymousUser, slingAuthAnonymousPassword, authHttp, authHttpRealm, authUriSuffix);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> extensions = null;
        Integer minDurationMs = null;
        Integer maxDurationMs = null;
        Boolean compactLogFormat = null;
        OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo response = api.orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(post, apply, delete, action, $location, propertylist, extensions, minDurationMs, maxDurationMs, compactLogFormat);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEngineImplLogRequestLoggerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String requestLogOutput = null;
        Integer requestLogOutputtype = null;
        Boolean requestLogEnabled = null;
        String accessLogOutput = null;
        Integer accessLogOutputtype = null;
        Boolean accessLogEnabled = null;
        OrgApacheSlingEngineImplLogRequestLoggerInfo response = api.orgApacheSlingEngineImplLogRequestLogger(post, apply, delete, action, $location, propertylist, requestLogOutput, requestLogOutputtype, requestLogEnabled, accessLogOutput, accessLogOutputtype, accessLogEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEngineImplLogRequestLoggerServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String requestLogServiceFormat = null;
        String requestLogServiceOutput = null;
        Integer requestLogServiceOutputtype = null;
        Boolean requestLogServiceOnentry = null;
        OrgApacheSlingEngineImplLogRequestLoggerServiceInfo response = api.orgApacheSlingEngineImplLogRequestLoggerService(post, apply, delete, action, $location, propertylist, requestLogServiceFormat, requestLogServiceOutput, requestLogServiceOutputtype, requestLogServiceOnentry);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEngineImplSlingMainServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer slingMaxCalls = null;
        Integer slingMaxInclusions = null;
        Boolean slingTraceAllow = null;
        Integer slingMaxRecordRequests = null;
        List<String> slingStorePatternRequests = null;
        String slingServerinfo = null;
        List<String> slingAdditionalResponseHeaders = null;
        OrgApacheSlingEngineImplSlingMainServletInfo response = api.orgApacheSlingEngineImplSlingMainServlet(post, apply, delete, action, $location, propertylist, slingMaxCalls, slingMaxInclusions, slingTraceAllow, slingMaxRecordRequests, slingStorePatternRequests, slingServerinfo, slingAdditionalResponseHeaders);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEngineParametersTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingDefaultParameterEncoding = null;
        Integer slingDefaultMaxParameters = null;
        String fileLocation = null;
        Integer fileThreshold = null;
        Integer fileMax = null;
        Integer requestMax = null;
        Boolean slingDefaultParameterCheckForAdditionalContainerParameters = null;
        OrgApacheSlingEngineParametersInfo response = api.orgApacheSlingEngineParameters(post, apply, delete, action, $location, propertylist, slingDefaultParameterEncoding, slingDefaultMaxParameters, fileLocation, fileThreshold, fileMax, requestMax, slingDefaultParameterCheckForAdditionalContainerParameters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEventImplEventingThreadPoolTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer minPoolSize = null;
        OrgApacheSlingEventImplEventingThreadPoolInfo response = api.orgApacheSlingEventImplEventingThreadPool(post, apply, delete, action, $location, propertylist, minPoolSize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEventImplJobsDefaultJobManagerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String queuePriority = null;
        Integer queueRetries = null;
        Integer queueRetrydelay = null;
        Integer queueMaxparallel = null;
        OrgApacheSlingEventImplJobsDefaultJobManagerInfo response = api.orgApacheSlingEventImplJobsDefaultJobManager(post, apply, delete, action, $location, propertylist, queuePriority, queueRetries, queueRetrydelay, queueMaxparallel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEventImplJobsJcrPersistenceHandlerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean jobConsumermanagerDisableDistribution = null;
        Integer startupDelay = null;
        Integer cleanupPeriod = null;
        OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo response = api.orgApacheSlingEventImplJobsJcrPersistenceHandler(post, apply, delete, action, $location, propertylist, jobConsumermanagerDisableDistribution, startupDelay, cleanupPeriod);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEventImplJobsJobConsumerManagerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean orgApacheSlingInstallerConfigurationPersist = null;
        List<String> jobConsumermanagerWhitelist = null;
        List<String> jobConsumermanagerBlacklist = null;
        OrgApacheSlingEventImplJobsJobConsumerManagerInfo response = api.orgApacheSlingEventImplJobsJobConsumerManager(post, apply, delete, action, $location, propertylist, orgApacheSlingInstallerConfigurationPersist, jobConsumermanagerWhitelist, jobConsumermanagerBlacklist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingEventJobsQueueConfigurationTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String queueName = null;
        List<String> queueTopics = null;
        String queueType = null;
        String queuePriority = null;
        Integer queueRetries = null;
        Integer queueRetrydelay = null;
        BigDecimal queueMaxparallel = null;
        Boolean queueKeepJobs = null;
        Boolean queuePreferRunOnCreationInstance = null;
        Integer queueThreadPoolSize = null;
        Integer serviceRanking = null;
        OrgApacheSlingEventJobsQueueConfigurationInfo response = api.orgApacheSlingEventJobsQueueConfiguration(post, apply, delete, action, $location, propertylist, queueName, queueTopics, queueType, queuePriority, queueRetries, queueRetrydelay, queueMaxparallel, queueKeepJobs, queuePreferRunOnCreationInstance, queueThreadPoolSize, serviceRanking);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWebConsoleSecurityProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> users = null;
        List<String> groups = null;
        OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWebConsoleSecurityProviderInfo response = api.orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWebConsoleSecurityProvider(post, apply, delete, action, $location, propertylist, users, groups);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingFeatureflagsFeatureTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String description = null;
        Boolean enabled = null;
        OrgApacheSlingFeatureflagsFeatureInfo response = api.orgApacheSlingFeatureflagsFeature(post, apply, delete, action, $location, propertylist, name, description, enabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingFeatureflagsImplConfiguredFeatureTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String name = null;
        String description = null;
        Boolean enabled = null;
        OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo response = api.orgApacheSlingFeatureflagsImplConfiguredFeature(post, apply, delete, action, $location, propertylist, name, description, enabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHapiImplHApiUtilImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String orgApacheSlingHapiToolsResourcetype = null;
        String orgApacheSlingHapiToolsCollectionresourcetype = null;
        List<String> orgApacheSlingHapiToolsSearchpaths = null;
        String orgApacheSlingHapiToolsExternalurl = null;
        Boolean orgApacheSlingHapiToolsEnabled = null;
        OrgApacheSlingHapiImplHApiUtilImplInfo response = api.orgApacheSlingHapiImplHApiUtilImpl(post, apply, delete, action, $location, propertylist, orgApacheSlingHapiToolsResourcetype, orgApacheSlingHapiToolsCollectionresourcetype, orgApacheSlingHapiToolsSearchpaths, orgApacheSlingHapiToolsExternalurl, orgApacheSlingHapiToolsEnabled);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHcCoreImplCompositeHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        List<String> filterTags = null;
        Boolean filterCombineTagsWithOr = null;
        OrgApacheSlingHcCoreImplCompositeHealthCheckInfo response = api.orgApacheSlingHcCoreImplCompositeHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, filterTags, filterCombineTagsWithOr);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer timeoutInMs = null;
        Integer longRunningFutureThresholdForCriticalMs = null;
        Integer resultCacheTtlInMs = null;
        OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo response = api.orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(post, apply, delete, action, $location, propertylist, timeoutInMs, longRunningFutureThresholdForCriticalMs, resultCacheTtlInMs);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHcCoreImplJmxAttributeHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        String mbeanName = null;
        String attributeName = null;
        String attributeValueConstraint = null;
        OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo response = api.orgApacheSlingHcCoreImplJmxAttributeHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, mbeanName, attributeName, attributeValueConstraint);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHcCoreImplScriptableHealthCheckTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String hcName = null;
        List<String> hcTags = null;
        String hcMbeanName = null;
        String expression = null;
        String languageExtension = null;
        OrgApacheSlingHcCoreImplScriptableHealthCheckInfo response = api.orgApacheSlingHcCoreImplScriptableHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, expression, languageExtension);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHcCoreImplServletHealthCheckExecutorServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String servletPath = null;
        Boolean disabled = null;
        String corsAccessControlAllowOrigin = null;
        OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo response = api.orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(post, apply, delete, action, $location, propertylist, servletPath, disabled, corsAccessControlAllowOrigin);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer totalWidth = null;
        Integer colWidthName = null;
        Integer colWidthResult = null;
        Integer colWidthTiming = null;
        OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo response = api.orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(post, apply, delete, action, $location, propertylist, totalWidth, colWidthName, colWidthResult, colWidthTiming);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingI18nImplI18NFilterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        List<String> slingFilterScope = null;
        OrgApacheSlingI18nImplI18NFilterInfo response = api.orgApacheSlingI18nImplI18NFilter(post, apply, delete, action, $location, propertylist, serviceRanking, slingFilterScope);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingI18nImplJcrResourceBundleProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String localeDefault = null;
        Boolean preloadBundles = null;
        Integer invalidationDelay = null;
        OrgApacheSlingI18nImplJcrResourceBundleProviderInfo response = api.orgApacheSlingI18nImplJcrResourceBundleProvider(post, apply, delete, action, $location, propertylist, localeDefault, preloadBundles, invalidationDelay);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingInstallerProviderJcrImplJcrInstallerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> handlerSchemes = null;
        String slingJcrinstallFolderNameRegexp = null;
        Integer slingJcrinstallFolderMaxDepth = null;
        List<String> slingJcrinstallSearchPath = null;
        String slingJcrinstallNewConfigPath = null;
        String slingJcrinstallSignalPath = null;
        Boolean slingJcrinstallEnableWriteback = null;
        OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo response = api.orgApacheSlingInstallerProviderJcrImplJcrInstaller(post, apply, delete, action, $location, propertylist, handlerSchemes, slingJcrinstallFolderNameRegexp, slingJcrinstallFolderMaxDepth, slingJcrinstallSearchPath, slingJcrinstallNewConfigPath, slingJcrinstallSignalPath, slingJcrinstallEnableWriteback);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrBaseInternalLoginAdminWhitelistTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean whitelistBypass = null;
        String whitelistBundlesRegexp = null;
        OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo response = api.orgApacheSlingJcrBaseInternalLoginAdminWhitelist(post, apply, delete, action, $location, propertylist, whitelistBypass, whitelistBundlesRegexp);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String whitelistName = null;
        List<String> whitelistBundles = null;
        OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo response = api.orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(post, apply, delete, action, $location, propertylist, whitelistName, whitelistBundles);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrDavexImplServletsSlingDavExServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String alias = null;
        Boolean davCreateAbsoluteUri = null;
        String davProtectedhandlers = null;
        OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo response = api.orgApacheSlingJcrDavexImplServletsSlingDavExServlet(post, apply, delete, action, $location, propertylist, alias, davCreateAbsoluteUri, davProtectedhandlers);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String javaNamingFactoryInitial = null;
        String javaNamingProviderUrl = null;
        OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo response = api.orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(post, apply, delete, action, $location, propertylist, javaNamingFactoryInitial, javaNamingProviderUrl);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer port = null;
        OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo response = api.orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(post, apply, delete, action, $location, propertylist, port);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrRepoinitImplRepositoryInitializerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> references = null;
        OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo response = api.orgApacheSlingJcrRepoinitImplRepositoryInitializer(post, apply, delete, action, $location, propertylist, references);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrRepoinitRepositoryInitializerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> references = null;
        List<String> scripts = null;
        OrgApacheSlingJcrRepoinitRepositoryInitializerInfo response = api.orgApacheSlingJcrRepoinitRepositoryInitializer(post, apply, delete, action, $location, propertylist, references, scripts);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> resourceResolverSearchpath = null;
        Boolean resourceResolverManglenamespaces = null;
        Boolean resourceResolverAllowDirect = null;
        List<String> resourceResolverRequiredProviders = null;
        List<String> resourceResolverRequiredProvidernames = null;
        List<String> resourceResolverVirtual = null;
        List<String> resourceResolverMapping = null;
        String resourceResolverMapLocation = null;
        List<String> resourceResolverMapObservation = null;
        Integer resourceResolverDefaultVanityRedirectStatus = null;
        Boolean resourceResolverEnableVanitypath = null;
        Integer resourceResolverVanitypathMaxEntries = null;
        Boolean resourceResolverVanitypathMaxEntriesStartup = null;
        Integer resourceResolverVanitypathBloomfilterMaxBytes = null;
        Boolean resourceResolverOptimizeAliasResolution = null;
        List<String> resourceResolverVanitypathWhitelist = null;
        List<String> resourceResolverVanitypathBlacklist = null;
        Boolean resourceResolverVanityPrecedence = null;
        Boolean resourceResolverProviderhandlingParanoid = null;
        Boolean resourceResolverLogClosing = null;
        Boolean resourceResolverLogUnclosed = null;
        OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo response = api.orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(post, apply, delete, action, $location, propertylist, resourceResolverSearchpath, resourceResolverManglenamespaces, resourceResolverAllowDirect, resourceResolverRequiredProviders, resourceResolverRequiredProvidernames, resourceResolverVirtual, resourceResolverMapping, resourceResolverMapLocation, resourceResolverMapObservation, resourceResolverDefaultVanityRedirectStatus, resourceResolverEnableVanitypath, resourceResolverVanitypathMaxEntries, resourceResolverVanitypathMaxEntriesStartup, resourceResolverVanitypathBloomfilterMaxBytes, resourceResolverOptimizeAliasResolution, resourceResolverVanitypathWhitelist, resourceResolverVanitypathBlacklist, resourceResolverVanityPrecedence, resourceResolverProviderhandlingParanoid, resourceResolverLogClosing, resourceResolverLogUnclosed);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrResourceInternalJcrSystemUserValidatorTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean allowOnlySystemUser = null;
        OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo response = api.orgApacheSlingJcrResourceInternalJcrSystemUserValidator(post, apply, delete, action, $location, propertylist, allowOnlySystemUser);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String path = null;
        String checkpathPrefix = null;
        String jcrPath = null;
        OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo response = api.orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(post, apply, delete, action, $location, propertylist, path, checkpathPrefix, jcrPath);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        String typeCollections = null;
        String typeNoncollections = null;
        String typeContent = null;
        OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo response = api.orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(post, apply, delete, action, $location, propertylist, serviceRanking, typeCollections, typeNoncollections, typeContent);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServiceTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServiceInfo response = api.orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerService(post, apply, delete, action, $location, propertylist, serviceRanking);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String davRoot = null;
        Boolean davCreateAbsoluteUri = null;
        String davRealm = null;
        List<String> collectionTypes = null;
        List<String> filterPrefixes = null;
        String filterTypes = null;
        String filterUris = null;
        String typeCollections = null;
        String typeNoncollections = null;
        String typeContent = null;
        OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo response = api.orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(post, apply, delete, action, $location, propertylist, davRoot, davCreateAbsoluteUri, davRealm, collectionTypes, filterPrefixes, filterTypes, filterUris, typeCollections, typeNoncollections, typeContent);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingJmxProviderImplJMXResourceProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String providerRoots = null;
        OrgApacheSlingJmxProviderImplJMXResourceProviderInfo response = api.orgApacheSlingJmxProviderImplJMXResourceProvider(post, apply, delete, action, $location, propertylist, providerRoots);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingModelsImplModelAdapterFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String osgiHttpWhiteboardListener = null;
        String osgiHttpWhiteboardContextSelect = null;
        Integer maxRecursionDepth = null;
        Integer cleanupJobPeriod = null;
        OrgApacheSlingModelsImplModelAdapterFactoryInfo response = api.orgApacheSlingModelsImplModelAdapterFactory(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardListener, osgiHttpWhiteboardContextSelect, maxRecursionDepth, cleanupJobPeriod);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingModelsJacksonexporterImplResourceModuleProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer maxRecursionLevels = null;
        OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo response = api.orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(post, apply, delete, action, $location, propertylist, maxRecursionLevels);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String felixInventoryPrinterName = null;
        String felixInventoryPrinterTitle = null;
        String path = null;
        OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoryInfo response = api.orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactory(post, apply, delete, action, $location, propertylist, felixInventoryPrinterName, felixInventoryPrinterTitle, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingResourcemergerImplMergedResourceProviderFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String mergeRoot = null;
        Boolean mergeReadOnly = null;
        OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo response = api.orgApacheSlingResourcemergerImplMergedResourceProviderFactory(post, apply, delete, action, $location, propertylist, mergeRoot, mergeReadOnly);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingResourcemergerPickerOverridingTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String mergeRoot = null;
        Boolean mergeReadOnly = null;
        OrgApacheSlingResourcemergerPickerOverridingInfo response = api.orgApacheSlingResourcemergerPickerOverriding(post, apply, delete, action, $location, propertylist, mergeRoot, mergeReadOnly);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingScriptingCoreImplScriptCacheImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer orgApacheSlingScriptingCacheSize = null;
        List<String> orgApacheSlingScriptingCacheAdditionalExtensions = null;
        OrgApacheSlingScriptingCoreImplScriptCacheImplInfo response = api.orgApacheSlingScriptingCoreImplScriptCacheImpl(post, apply, delete, action, $location, propertylist, orgApacheSlingScriptingCacheSize, orgApacheSlingScriptingCacheAdditionalExtensions);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean logStacktraceOnclose = null;
        OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderImplInfo response = api.orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderImpl(post, apply, delete, action, $location, propertylist, logStacktraceOnclose);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean javaClassdebuginfo = null;
        String javaJavaEncoding = null;
        String javaCompilerSourceVM = null;
        String javaCompilerTargetVM = null;
        OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo response = api.orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(post, apply, delete, action, $location, propertylist, javaClassdebuginfo, javaJavaEncoding, javaCompilerSourceVM, javaCompilerTargetVM);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer orgApacheSlingScriptingJavascriptRhinoOptLevel = null;
        OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFactoryInfo response = api.orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFactory(post, apply, delete, action, $location, propertylist, orgApacheSlingScriptingJavascriptRhinoOptLevel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingScriptingJspJspScriptEngineFactoryTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String jasperCompilerTargetVM = null;
        String jasperCompilerSourceVM = null;
        Boolean jasperClassdebuginfo = null;
        Boolean jasperEnablePooling = null;
        String jasperIeClassId = null;
        Boolean jasperGenStringAsCharArray = null;
        Boolean jasperKeepgenerated = null;
        Boolean jasperMappedfile = null;
        Boolean jasperTrimSpaces = null;
        Boolean jasperDisplaySourceFragments = null;
        Boolean defaultIsSession = null;
        OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo response = api.orgApacheSlingScriptingJspJspScriptEngineFactory(post, apply, delete, action, $location, propertylist, jasperCompilerTargetVM, jasperCompilerSourceVM, jasperClassdebuginfo, jasperEnablePooling, jasperIeClassId, jasperGenStringAsCharArray, jasperKeepgenerated, jasperMappedfile, jasperTrimSpaces, jasperDisplaySourceFragments, defaultIsSession);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProviderTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> orgApacheSlingScriptingSightlyJsBindings = null;
        OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProviderInfo response = api.orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvider(post, apply, delete, action, $location, propertylist, orgApacheSlingScriptingSightlyJsBindings);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingSecurityImplContentDispositionFilterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> slingContentDispositionPaths = null;
        List<String> slingContentDispositionExcludedPaths = null;
        Boolean slingContentDispositionAllPaths = null;
        OrgApacheSlingSecurityImplContentDispositionFilterInfo response = api.orgApacheSlingSecurityImplContentDispositionFilter(post, apply, delete, action, $location, propertylist, slingContentDispositionPaths, slingContentDispositionExcludedPaths, slingContentDispositionAllPaths);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingSecurityImplReferrerFilterTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean allowEmpty = null;
        List<String> allowHosts = null;
        List<String> allowHostsRegexp = null;
        List<String> filterMethods = null;
        List<String> excludeAgentsRegexp = null;
        OrgApacheSlingSecurityImplReferrerFilterInfo response = api.orgApacheSlingSecurityImplReferrerFilter(post, apply, delete, action, $location, propertylist, allowEmpty, allowHosts, allowHostsRegexp, filterMethods, excludeAgentsRegexp);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServiceusermappingImplServiceUserMapperImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> userMapping = null;
        String userDefault = null;
        Boolean userEnableDefaultMapping = null;
        Boolean requireValidation = null;
        OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo response = api.orgApacheSlingServiceusermappingImplServiceUserMapperImpl(post, apply, delete, action, $location, propertylist, userMapping, userDefault, userEnableDefaultMapping, requireValidation);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Integer serviceRanking = null;
        List<String> userMapping = null;
        OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo response = api.orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(post, apply, delete, action, $location, propertylist, serviceRanking, userMapping);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServletsGetDefaultGetServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> aliases = null;
        Boolean index = null;
        List<String> indexFiles = null;
        Boolean enableHtml = null;
        Boolean enableJson = null;
        Boolean enableTxt = null;
        Boolean enableXml = null;
        Integer jsonMaximumresults = null;
        Boolean ecmaSuport = null;
        OrgApacheSlingServletsGetDefaultGetServletInfo response = api.orgApacheSlingServletsGetDefaultGetServlet(post, apply, delete, action, $location, propertylist, aliases, index, indexFiles, enableHtml, enableJson, enableTxt, enableXml, jsonMaximumresults, ecmaSuport);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServletsGetImplVersionVersionInfoServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> slingServletSelectors = null;
        Boolean ecmaSuport = null;
        OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo response = api.orgApacheSlingServletsGetImplVersionVersionInfoServlet(post, apply, delete, action, $location, propertylist, slingServletSelectors, ecmaSuport);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServletsPostImplHelperChunkCleanUpTaskTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String schedulerExpression = null;
        Boolean schedulerConcurrent = null;
        Integer chunkCleanupAge = null;
        OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo response = api.orgApacheSlingServletsPostImplHelperChunkCleanUpTask(post, apply, delete, action, $location, propertylist, schedulerExpression, schedulerConcurrent, chunkCleanupAge);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServletsPostImplSlingPostServletTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> servletPostDateFormats = null;
        List<String> servletPostNodeNameHints = null;
        Integer servletPostNodeNameMaxLength = null;
        Boolean servletPostCheckinNewVersionableNodes = null;
        Boolean servletPostAutoCheckout = null;
        Boolean servletPostAutoCheckin = null;
        String servletPostIgnorePattern = null;
        OrgApacheSlingServletsPostImplSlingPostServletInfo response = api.orgApacheSlingServletsPostImplSlingPostServlet(post, apply, delete, action, $location, propertylist, servletPostDateFormats, servletPostNodeNameHints, servletPostNodeNameMaxLength, servletPostCheckinNewVersionableNodes, servletPostAutoCheckout, servletPostAutoCheckin, servletPostIgnorePattern);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingServletsResolverSlingServletResolverTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String servletresolverServletRoot = null;
        Integer servletresolverCacheSize = null;
        List<String> servletresolverPaths = null;
        List<String> servletresolverDefaultExtensions = null;
        OrgApacheSlingServletsResolverSlingServletResolverInfo response = api.orgApacheSlingServletsResolverSlingServletResolver(post, apply, delete, action, $location, propertylist, servletresolverServletRoot, servletresolverCacheSize, servletresolverPaths, servletresolverDefaultExtensions);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingSettingsImplSlingSettingsServiceImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String slingName = null;
        String slingDescription = null;
        OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo response = api.orgApacheSlingSettingsImplSlingSettingsServiceImpl(post, apply, delete, action, $location, propertylist, slingName, slingDescription);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingStartupfilterImplStartupFilterImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        Boolean activeByDefault = null;
        String defaultMessage = null;
        OrgApacheSlingStartupfilterImplStartupFilterImplInfo response = api.orgApacheSlingStartupfilterImplStartupFilterImpl(post, apply, delete, action, $location, propertylist, activeByDefault, defaultMessage);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingTenantInternalTenantProviderImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String tenantRoot = null;
        List<String> tenantPathMatcher = null;
        OrgApacheSlingTenantInternalTenantProviderImplInfo response = api.orgApacheSlingTenantInternalTenantProviderImpl(post, apply, delete, action, $location, propertylist, tenantRoot, tenantPathMatcher);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingTracerInternalLogTracerTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        List<String> tracerSets = null;
        Boolean enabled = null;
        Boolean servletEnabled = null;
        Integer recordingCacheSizeInMB = null;
        Integer recordingCacheDurationInSecs = null;
        Boolean recordingCompressionEnabled = null;
        Boolean gzipResponse = null;
        OrgApacheSlingTracerInternalLogTracerInfo response = api.orgApacheSlingTracerInternalLogTracer(post, apply, delete, action, $location, propertylist, tracerSets, enabled, servletEnabled, recordingCacheSizeInMB, recordingCacheDurationInSecs, recordingCompressionEnabled, gzipResponse);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgApacheSlingXssImplXSSFilterImplTest() throws ApiException {
        Boolean post = null;
        Boolean apply = null;
        Boolean delete = null;
        String action = null;
        String $location = null;
        List<String> propertylist = null;
        String policyPath = null;
        OrgApacheSlingXssImplXSSFilterImplInfo response = api.orgApacheSlingXssImplXSSFilterImpl(post, apply, delete, action, $location, propertylist, policyPath);

        // TODO: test validations
    }
    
}
