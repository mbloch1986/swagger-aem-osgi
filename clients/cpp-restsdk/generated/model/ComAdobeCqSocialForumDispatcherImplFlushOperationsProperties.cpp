/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties::ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties()
{
    m_Extension_orderIsSet = false;
    m_Flush_forumontopicIsSet = false;
}

ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties::~ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties()
{
}

void ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Extension_orderIsSet)
    {
        val[utility::conversions::to_string_t("extension.order")] = ModelBase::toJson(m_Extension_order);
    }
    if(m_Flush_forumontopicIsSet)
    {
        val[utility::conversions::to_string_t("flush.forumontopic")] = ModelBase::toJson(m_Flush_forumontopic);
    }

    return val;
}

void ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("extension.order")))
    {
        if(!val[utility::conversions::to_string_t("extension.order")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("extension.order")]);
            setExtensionOrder( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("flush.forumontopic")))
    {
        if(!val[utility::conversions::to_string_t("flush.forumontopic")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("flush.forumontopic")]);
            setFlushForumontopic( newItem );
        }
    }
}

void ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Extension_orderIsSet)
    {
        if (m_Extension_order.get())
        {
            m_Extension_order->toMultipart(multipart, utility::conversions::to_string_t("extension.order."));
        }
    }
    if(m_Flush_forumontopicIsSet)
    {
        if (m_Flush_forumontopic.get())
        {
            m_Flush_forumontopic->toMultipart(multipart, utility::conversions::to_string_t("flush.forumontopic."));
        }
    }
}

void ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("extension.order")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("extension.order")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("extension.order."));
            setExtensionOrder( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("flush.forumontopic")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("flush.forumontopic")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("flush.forumontopic."));
            setFlushForumontopic( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties::getExtensionOrder() const
{
    return m_Extension_order;
}


void ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties::setExtensionOrder(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Extension_order = value;
    m_Extension_orderIsSet = true;
}
bool ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties::extensionOrderIsSet() const
{
    return m_Extension_orderIsSet;
}

void ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties::unsetExtension_order()
{
    m_Extension_orderIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties::getFlushForumontopic() const
{
    return m_Flush_forumontopic;
}


void ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties::setFlushForumontopic(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Flush_forumontopic = value;
    m_Flush_forumontopicIsSet = true;
}
bool ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties::flushForumontopicIsSet() const
{
    return m_Flush_forumontopicIsSet;
}

void ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties::unsetFlush_forumontopic()
{
    m_Flush_forumontopicIsSet = false;
}

}
}
}
}

