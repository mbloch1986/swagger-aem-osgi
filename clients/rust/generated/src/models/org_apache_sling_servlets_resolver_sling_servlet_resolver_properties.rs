/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingServletsResolverSlingServletResolverProperties {
  #[serde(rename = "servletresolver.servletRoot")]
  servletresolver_servlet_root: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "servletresolver.cacheSize")]
  servletresolver_cache_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "servletresolver.paths")]
  servletresolver_paths: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "servletresolver.defaultExtensions")]
  servletresolver_default_extensions: Option<::models::ConfigNodePropertyArray>
}

impl OrgApacheSlingServletsResolverSlingServletResolverProperties {
  pub fn new() -> OrgApacheSlingServletsResolverSlingServletResolverProperties {
    OrgApacheSlingServletsResolverSlingServletResolverProperties {
      servletresolver_servlet_root: None,
      servletresolver_cache_size: None,
      servletresolver_paths: None,
      servletresolver_default_extensions: None
    }
  }

  pub fn set_servletresolver_servlet_root(&mut self, servletresolver_servlet_root: ::models::ConfigNodePropertyString) {
    self.servletresolver_servlet_root = Some(servletresolver_servlet_root);
  }

  pub fn with_servletresolver_servlet_root(mut self, servletresolver_servlet_root: ::models::ConfigNodePropertyString) -> OrgApacheSlingServletsResolverSlingServletResolverProperties {
    self.servletresolver_servlet_root = Some(servletresolver_servlet_root);
    self
  }

  pub fn servletresolver_servlet_root(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.servletresolver_servlet_root.as_ref()
  }

  pub fn reset_servletresolver_servlet_root(&mut self) {
    self.servletresolver_servlet_root = None;
  }

  pub fn set_servletresolver_cache_size(&mut self, servletresolver_cache_size: ::models::ConfigNodePropertyInteger) {
    self.servletresolver_cache_size = Some(servletresolver_cache_size);
  }

  pub fn with_servletresolver_cache_size(mut self, servletresolver_cache_size: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingServletsResolverSlingServletResolverProperties {
    self.servletresolver_cache_size = Some(servletresolver_cache_size);
    self
  }

  pub fn servletresolver_cache_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.servletresolver_cache_size.as_ref()
  }

  pub fn reset_servletresolver_cache_size(&mut self) {
    self.servletresolver_cache_size = None;
  }

  pub fn set_servletresolver_paths(&mut self, servletresolver_paths: ::models::ConfigNodePropertyArray) {
    self.servletresolver_paths = Some(servletresolver_paths);
  }

  pub fn with_servletresolver_paths(mut self, servletresolver_paths: ::models::ConfigNodePropertyArray) -> OrgApacheSlingServletsResolverSlingServletResolverProperties {
    self.servletresolver_paths = Some(servletresolver_paths);
    self
  }

  pub fn servletresolver_paths(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.servletresolver_paths.as_ref()
  }

  pub fn reset_servletresolver_paths(&mut self) {
    self.servletresolver_paths = None;
  }

  pub fn set_servletresolver_default_extensions(&mut self, servletresolver_default_extensions: ::models::ConfigNodePropertyArray) {
    self.servletresolver_default_extensions = Some(servletresolver_default_extensions);
  }

  pub fn with_servletresolver_default_extensions(mut self, servletresolver_default_extensions: ::models::ConfigNodePropertyArray) -> OrgApacheSlingServletsResolverSlingServletResolverProperties {
    self.servletresolver_default_extensions = Some(servletresolver_default_extensions);
    self
  }

  pub fn servletresolver_default_extensions(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.servletresolver_default_extensions.as_ref()
  }

  pub fn reset_servletresolver_default_extensions(&mut self) {
    self.servletresolver_default_extensions = None;
  }

}



