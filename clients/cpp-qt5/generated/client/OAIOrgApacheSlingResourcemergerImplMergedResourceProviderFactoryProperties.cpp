/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties() {
    init();
}

OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::~OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::init() {
    merge_root = new OAIConfigNodePropertyString();
    m_merge_root_isSet = false;
    merge_read_only = new OAIConfigNodePropertyBoolean();
    m_merge_read_only_isSet = false;
}

void
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::cleanup() {
    if(merge_root != nullptr) { 
        delete merge_root;
    }
    if(merge_read_only != nullptr) { 
        delete merge_read_only;
    }
}

OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties*
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&merge_root, pJson["merge.root"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&merge_read_only, pJson["merge.readOnly"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::asJsonObject() {
    QJsonObject obj;
    if((merge_root != nullptr) && (merge_root->isSet())){
        toJsonValue(QString("merge.root"), merge_root, obj, QString("OAIConfigNodePropertyString"));
    }
    if((merge_read_only != nullptr) && (merge_read_only->isSet())){
        toJsonValue(QString("merge.readOnly"), merge_read_only, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::getMergeRoot() {
    return merge_root;
}
void
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::setMergeRoot(OAIConfigNodePropertyString* merge_root) {
    this->merge_root = merge_root;
    this->m_merge_root_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::getMergeReadOnly() {
    return merge_read_only;
}
void
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::setMergeReadOnly(OAIConfigNodePropertyBoolean* merge_read_only) {
    this->merge_read_only = merge_read_only;
    this->m_merge_read_only_isSet = true;
}


bool
OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(merge_root != nullptr && merge_root->isSet()){ isObjectUpdated = true; break;}
        if(merge_read_only != nullptr && merge_read_only->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

