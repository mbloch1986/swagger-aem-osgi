/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqStatisticsImplStatisticsServiceImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqStatisticsImplStatisticsServiceImplProperties::OAIComDayCqStatisticsImplStatisticsServiceImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqStatisticsImplStatisticsServiceImplProperties::OAIComDayCqStatisticsImplStatisticsServiceImplProperties() {
    init();
}

OAIComDayCqStatisticsImplStatisticsServiceImplProperties::~OAIComDayCqStatisticsImplStatisticsServiceImplProperties() {
    this->cleanup();
}

void
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::init() {
    scheduler_period = new OAIConfigNodePropertyInteger();
    m_scheduler_period_isSet = false;
    scheduler_concurrent = new OAIConfigNodePropertyBoolean();
    m_scheduler_concurrent_isSet = false;
    path = new OAIConfigNodePropertyString();
    m_path_isSet = false;
    workspace = new OAIConfigNodePropertyString();
    m_workspace_isSet = false;
    keywords_path = new OAIConfigNodePropertyString();
    m_keywords_path_isSet = false;
    async_entries = new OAIConfigNodePropertyBoolean();
    m_async_entries_isSet = false;
}

void
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::cleanup() {
    if(scheduler_period != nullptr) { 
        delete scheduler_period;
    }
    if(scheduler_concurrent != nullptr) { 
        delete scheduler_concurrent;
    }
    if(path != nullptr) { 
        delete path;
    }
    if(workspace != nullptr) { 
        delete workspace;
    }
    if(keywords_path != nullptr) { 
        delete keywords_path;
    }
    if(async_entries != nullptr) { 
        delete async_entries;
    }
}

OAIComDayCqStatisticsImplStatisticsServiceImplProperties*
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&scheduler_period, pJson["scheduler.period"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&scheduler_concurrent, pJson["scheduler.concurrent"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&path, pJson["path"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&workspace, pJson["workspace"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&keywords_path, pJson["keywordsPath"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&async_entries, pJson["asyncEntries"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::asJsonObject() {
    QJsonObject obj;
    if((scheduler_period != nullptr) && (scheduler_period->isSet())){
        toJsonValue(QString("scheduler.period"), scheduler_period, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((scheduler_concurrent != nullptr) && (scheduler_concurrent->isSet())){
        toJsonValue(QString("scheduler.concurrent"), scheduler_concurrent, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((path != nullptr) && (path->isSet())){
        toJsonValue(QString("path"), path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((workspace != nullptr) && (workspace->isSet())){
        toJsonValue(QString("workspace"), workspace, obj, QString("OAIConfigNodePropertyString"));
    }
    if((keywords_path != nullptr) && (keywords_path->isSet())){
        toJsonValue(QString("keywordsPath"), keywords_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((async_entries != nullptr) && (async_entries->isSet())){
        toJsonValue(QString("asyncEntries"), async_entries, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::getSchedulerPeriod() {
    return scheduler_period;
}
void
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::setSchedulerPeriod(OAIConfigNodePropertyInteger* scheduler_period) {
    this->scheduler_period = scheduler_period;
    this->m_scheduler_period_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::getSchedulerConcurrent() {
    return scheduler_concurrent;
}
void
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::setSchedulerConcurrent(OAIConfigNodePropertyBoolean* scheduler_concurrent) {
    this->scheduler_concurrent = scheduler_concurrent;
    this->m_scheduler_concurrent_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::getPath() {
    return path;
}
void
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::setPath(OAIConfigNodePropertyString* path) {
    this->path = path;
    this->m_path_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::getWorkspace() {
    return workspace;
}
void
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::setWorkspace(OAIConfigNodePropertyString* workspace) {
    this->workspace = workspace;
    this->m_workspace_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::getKeywordsPath() {
    return keywords_path;
}
void
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::setKeywordsPath(OAIConfigNodePropertyString* keywords_path) {
    this->keywords_path = keywords_path;
    this->m_keywords_path_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::getAsyncEntries() {
    return async_entries;
}
void
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::setAsyncEntries(OAIConfigNodePropertyBoolean* async_entries) {
    this->async_entries = async_entries;
    this->m_async_entries_isSet = true;
}


bool
OAIComDayCqStatisticsImplStatisticsServiceImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(scheduler_period != nullptr && scheduler_period->isSet()){ isObjectUpdated = true; break;}
        if(scheduler_concurrent != nullptr && scheduler_concurrent->isSet()){ isObjectUpdated = true; break;}
        if(path != nullptr && path->isSet()){ isObjectUpdated = true; break;}
        if(workspace != nullptr && workspace->isSet()){ isObjectUpdated = true; break;}
        if(keywords_path != nullptr && keywords_path->isSet()){ isObjectUpdated = true; break;}
        if(async_entries != nullptr && async_entries->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

