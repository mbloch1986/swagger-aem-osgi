/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties
    : public ModelBase
{
public:
    AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties();
    virtual ~AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getShowPlaceholder() const;
    bool showPlaceholderIsSet() const;
    void unsetShowPlaceholder();
    void setShowPlaceholder(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaximumCacheEntries() const;
    bool maximumCacheEntriesIsSet() const;
    void unsetMaximumCacheEntries();
    void setMaximumCacheEntries(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getAfScriptingCompatversion() const;
    bool afScriptingCompatversionIsSet() const;
    void unsetAf_scripting_compatversion();
    void setAfScriptingCompatversion(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getMakeFileNameUnique() const;
    bool makeFileNameUniqueIsSet() const;
    void unsetMakeFileNameUnique();
    void setMakeFileNameUnique(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGeneratingCompliantData() const;
    bool generatingCompliantDataIsSet() const;
    void unsetGeneratingCompliantData();
    void setGeneratingCompliantData(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyBoolean> m_ShowPlaceholder;
    bool m_ShowPlaceholderIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaximumCacheEntries;
    bool m_MaximumCacheEntriesIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Af_scripting_compatversion;
    bool m_Af_scripting_compatversionIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_MakeFileNameUnique;
    bool m_MakeFileNameUniqueIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_GeneratingCompliantData;
    bool m_GeneratingCompliantDataIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties_H_ */
