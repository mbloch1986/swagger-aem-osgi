/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties
    : public ModelBase
{
public:
    ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties();
    virtual ~ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getComAdobeGraniteJettySslPort() const;
    bool comAdobeGraniteJettySslPortIsSet() const;
    void unsetCom_adobe_granite_jetty_ssl_port();
    void setComAdobeGraniteJettySslPort(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteJettySslKeystoreUser() const;
    bool comAdobeGraniteJettySslKeystoreUserIsSet() const;
    void unsetCom_adobe_granite_jetty_ssl_keystore_user();
    void setComAdobeGraniteJettySslKeystoreUser(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteJettySslKeystorePassword() const;
    bool comAdobeGraniteJettySslKeystorePasswordIsSet() const;
    void unsetCom_adobe_granite_jetty_ssl_keystore_password();
    void setComAdobeGraniteJettySslKeystorePassword(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getComAdobeGraniteJettySslCiphersuitesExcluded() const;
    bool comAdobeGraniteJettySslCiphersuitesExcludedIsSet() const;
    void unsetCom_adobe_granite_jetty_ssl_ciphersuites_excluded();
    void setComAdobeGraniteJettySslCiphersuitesExcluded(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getComAdobeGraniteJettySslCiphersuitesIncluded() const;
    bool comAdobeGraniteJettySslCiphersuitesIncludedIsSet() const;
    void unsetCom_adobe_granite_jetty_ssl_ciphersuites_included();
    void setComAdobeGraniteJettySslCiphersuitesIncluded(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getComAdobeGraniteJettySslClientCertificate() const;
    bool comAdobeGraniteJettySslClientCertificateIsSet() const;
    void unsetCom_adobe_granite_jetty_ssl_client_certificate();
    void setComAdobeGraniteJettySslClientCertificate(std::shared_ptr<ConfigNodePropertyDropDown> value);

protected:
    std::shared_ptr<ConfigNodePropertyInteger> m_Com_adobe_granite_jetty_ssl_port;
    bool m_Com_adobe_granite_jetty_ssl_portIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_jetty_ssl_keystore_user;
    bool m_Com_adobe_granite_jetty_ssl_keystore_userIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_jetty_ssl_keystore_password;
    bool m_Com_adobe_granite_jetty_ssl_keystore_passwordIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Com_adobe_granite_jetty_ssl_ciphersuites_excluded;
    bool m_Com_adobe_granite_jetty_ssl_ciphersuites_excludedIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Com_adobe_granite_jetty_ssl_ciphersuites_included;
    bool m_Com_adobe_granite_jetty_ssl_ciphersuites_includedIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Com_adobe_granite_jetty_ssl_client_certificate;
    bool m_Com_adobe_granite_jetty_ssl_client_certificateIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties_H_ */
