/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeGraniteRepositoryImplCommitStatsConfigProperties.h
 *
 * 
 */

#ifndef ComAdobeGraniteRepositoryImplCommitStatsConfigProperties_H_
#define ComAdobeGraniteRepositoryImplCommitStatsConfigProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteRepositoryImplCommitStatsConfigProperties
{
public:
    ComAdobeGraniteRepositoryImplCommitStatsConfigProperties();
    virtual ~ComAdobeGraniteRepositoryImplCommitStatsConfigProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// ComAdobeGraniteRepositoryImplCommitStatsConfigProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnabled() const;
    void setEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getIntervalSeconds() const;
    void setIntervalSeconds(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCommitsPerIntervalThreshold() const;
    void setCommitsPerIntervalThreshold(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxLocationLength() const;
    void setMaxLocationLength(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxDetailsShown() const;
    void setMaxDetailsShown(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMinDetailsPercentage() const;
    void setMinDetailsPercentage(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getThreadMatchers() const;
    void setThreadMatchers(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxGreedyDepth() const;
    void setMaxGreedyDepth(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getGreedyStackMatchers() const;
    void setGreedyStackMatchers(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getStackFilters() const;
    void setStackFilters(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getStackMatchers() const;
    void setStackMatchers(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getStackCategorizers() const;
    void setStackCategorizers(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getStackShorteners() const;
    void setStackShorteners(std::shared_ptr<ConfigNodePropertyArray> value);

protected:
    std::shared_ptr<ConfigNodePropertyBoolean> m_Enabled;
    std::shared_ptr<ConfigNodePropertyInteger> m_IntervalSeconds;
    std::shared_ptr<ConfigNodePropertyInteger> m_CommitsPerIntervalThreshold;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxLocationLength;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxDetailsShown;
    std::shared_ptr<ConfigNodePropertyInteger> m_MinDetailsPercentage;
    std::shared_ptr<ConfigNodePropertyArray> m_ThreadMatchers;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxGreedyDepth;
    std::shared_ptr<ConfigNodePropertyString> m_GreedyStackMatchers;
    std::shared_ptr<ConfigNodePropertyArray> m_StackFilters;
    std::shared_ptr<ConfigNodePropertyArray> m_StackMatchers;
    std::shared_ptr<ConfigNodePropertyArray> m_StackCategorizers;
    std::shared_ptr<ConfigNodePropertyArray> m_StackShorteners;
};

}
}
}
}

#endif /* ComAdobeGraniteRepositoryImplCommitStatsConfigProperties_H_ */
