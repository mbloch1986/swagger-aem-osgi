/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties :  IEquatable<ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties" /> class.
        /// </summary>
        /// <param name="comAdobeGraniteJettySslPort">comAdobeGraniteJettySslPort.</param>
        /// <param name="comAdobeGraniteJettySslKeystoreUser">comAdobeGraniteJettySslKeystoreUser.</param>
        /// <param name="comAdobeGraniteJettySslKeystorePassword">comAdobeGraniteJettySslKeystorePassword.</param>
        /// <param name="comAdobeGraniteJettySslCiphersuitesExcluded">comAdobeGraniteJettySslCiphersuitesExcluded.</param>
        /// <param name="comAdobeGraniteJettySslCiphersuitesIncluded">comAdobeGraniteJettySslCiphersuitesIncluded.</param>
        /// <param name="comAdobeGraniteJettySslClientCertificate">comAdobeGraniteJettySslClientCertificate.</param>
        public ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties(ConfigNodePropertyInteger comAdobeGraniteJettySslPort = default(ConfigNodePropertyInteger), ConfigNodePropertyString comAdobeGraniteJettySslKeystoreUser = default(ConfigNodePropertyString), ConfigNodePropertyString comAdobeGraniteJettySslKeystorePassword = default(ConfigNodePropertyString), ConfigNodePropertyArray comAdobeGraniteJettySslCiphersuitesExcluded = default(ConfigNodePropertyArray), ConfigNodePropertyArray comAdobeGraniteJettySslCiphersuitesIncluded = default(ConfigNodePropertyArray), ConfigNodePropertyDropDown comAdobeGraniteJettySslClientCertificate = default(ConfigNodePropertyDropDown))
        {
            this.ComAdobeGraniteJettySslPort = comAdobeGraniteJettySslPort;
            this.ComAdobeGraniteJettySslKeystoreUser = comAdobeGraniteJettySslKeystoreUser;
            this.ComAdobeGraniteJettySslKeystorePassword = comAdobeGraniteJettySslKeystorePassword;
            this.ComAdobeGraniteJettySslCiphersuitesExcluded = comAdobeGraniteJettySslCiphersuitesExcluded;
            this.ComAdobeGraniteJettySslCiphersuitesIncluded = comAdobeGraniteJettySslCiphersuitesIncluded;
            this.ComAdobeGraniteJettySslClientCertificate = comAdobeGraniteJettySslClientCertificate;
        }
        
        /// <summary>
        /// Gets or Sets ComAdobeGraniteJettySslPort
        /// </summary>
        [DataMember(Name="com.adobe.granite.jetty.ssl.port", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ComAdobeGraniteJettySslPort { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeGraniteJettySslKeystoreUser
        /// </summary>
        [DataMember(Name="com.adobe.granite.jetty.ssl.keystore.user", EmitDefaultValue=false)]
        public ConfigNodePropertyString ComAdobeGraniteJettySslKeystoreUser { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeGraniteJettySslKeystorePassword
        /// </summary>
        [DataMember(Name="com.adobe.granite.jetty.ssl.keystore.password", EmitDefaultValue=false)]
        public ConfigNodePropertyString ComAdobeGraniteJettySslKeystorePassword { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeGraniteJettySslCiphersuitesExcluded
        /// </summary>
        [DataMember(Name="com.adobe.granite.jetty.ssl.ciphersuites.excluded", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ComAdobeGraniteJettySslCiphersuitesExcluded { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeGraniteJettySslCiphersuitesIncluded
        /// </summary>
        [DataMember(Name="com.adobe.granite.jetty.ssl.ciphersuites.included", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ComAdobeGraniteJettySslCiphersuitesIncluded { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeGraniteJettySslClientCertificate
        /// </summary>
        [DataMember(Name="com.adobe.granite.jetty.ssl.client.certificate", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown ComAdobeGraniteJettySslClientCertificate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties {\n");
            sb.Append("  ComAdobeGraniteJettySslPort: ").Append(ComAdobeGraniteJettySslPort).Append("\n");
            sb.Append("  ComAdobeGraniteJettySslKeystoreUser: ").Append(ComAdobeGraniteJettySslKeystoreUser).Append("\n");
            sb.Append("  ComAdobeGraniteJettySslKeystorePassword: ").Append(ComAdobeGraniteJettySslKeystorePassword).Append("\n");
            sb.Append("  ComAdobeGraniteJettySslCiphersuitesExcluded: ").Append(ComAdobeGraniteJettySslCiphersuitesExcluded).Append("\n");
            sb.Append("  ComAdobeGraniteJettySslCiphersuitesIncluded: ").Append(ComAdobeGraniteJettySslCiphersuitesIncluded).Append("\n");
            sb.Append("  ComAdobeGraniteJettySslClientCertificate: ").Append(ComAdobeGraniteJettySslClientCertificate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ComAdobeGraniteJettySslPort == input.ComAdobeGraniteJettySslPort ||
                    (this.ComAdobeGraniteJettySslPort != null &&
                    this.ComAdobeGraniteJettySslPort.Equals(input.ComAdobeGraniteJettySslPort))
                ) && 
                (
                    this.ComAdobeGraniteJettySslKeystoreUser == input.ComAdobeGraniteJettySslKeystoreUser ||
                    (this.ComAdobeGraniteJettySslKeystoreUser != null &&
                    this.ComAdobeGraniteJettySslKeystoreUser.Equals(input.ComAdobeGraniteJettySslKeystoreUser))
                ) && 
                (
                    this.ComAdobeGraniteJettySslKeystorePassword == input.ComAdobeGraniteJettySslKeystorePassword ||
                    (this.ComAdobeGraniteJettySslKeystorePassword != null &&
                    this.ComAdobeGraniteJettySslKeystorePassword.Equals(input.ComAdobeGraniteJettySslKeystorePassword))
                ) && 
                (
                    this.ComAdobeGraniteJettySslCiphersuitesExcluded == input.ComAdobeGraniteJettySslCiphersuitesExcluded ||
                    (this.ComAdobeGraniteJettySslCiphersuitesExcluded != null &&
                    this.ComAdobeGraniteJettySslCiphersuitesExcluded.Equals(input.ComAdobeGraniteJettySslCiphersuitesExcluded))
                ) && 
                (
                    this.ComAdobeGraniteJettySslCiphersuitesIncluded == input.ComAdobeGraniteJettySslCiphersuitesIncluded ||
                    (this.ComAdobeGraniteJettySslCiphersuitesIncluded != null &&
                    this.ComAdobeGraniteJettySslCiphersuitesIncluded.Equals(input.ComAdobeGraniteJettySslCiphersuitesIncluded))
                ) && 
                (
                    this.ComAdobeGraniteJettySslClientCertificate == input.ComAdobeGraniteJettySslClientCertificate ||
                    (this.ComAdobeGraniteJettySslClientCertificate != null &&
                    this.ComAdobeGraniteJettySslClientCertificate.Equals(input.ComAdobeGraniteJettySslClientCertificate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ComAdobeGraniteJettySslPort != null)
                    hashCode = hashCode * 59 + this.ComAdobeGraniteJettySslPort.GetHashCode();
                if (this.ComAdobeGraniteJettySslKeystoreUser != null)
                    hashCode = hashCode * 59 + this.ComAdobeGraniteJettySslKeystoreUser.GetHashCode();
                if (this.ComAdobeGraniteJettySslKeystorePassword != null)
                    hashCode = hashCode * 59 + this.ComAdobeGraniteJettySslKeystorePassword.GetHashCode();
                if (this.ComAdobeGraniteJettySslCiphersuitesExcluded != null)
                    hashCode = hashCode * 59 + this.ComAdobeGraniteJettySslCiphersuitesExcluded.GetHashCode();
                if (this.ComAdobeGraniteJettySslCiphersuitesIncluded != null)
                    hashCode = hashCode * 59 + this.ComAdobeGraniteJettySslCiphersuitesIncluded.GetHashCode();
                if (this.ComAdobeGraniteJettySslClientCertificate != null)
                    hashCode = hashCode * 59 + this.ComAdobeGraniteJettySslClientCertificate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
