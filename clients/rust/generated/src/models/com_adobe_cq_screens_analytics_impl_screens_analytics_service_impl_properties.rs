/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties {
  #[serde(rename = "com.adobe.cq.screens.analytics.impl.url")]
  com_adobe_cq_screens_analytics_impl_url: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.screens.analytics.impl.apikey")]
  com_adobe_cq_screens_analytics_impl_apikey: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.screens.analytics.impl.project")]
  com_adobe_cq_screens_analytics_impl_project: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.screens.analytics.impl.environment")]
  com_adobe_cq_screens_analytics_impl_environment: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "com.adobe.cq.screens.analytics.impl.sendFrequency")]
  com_adobe_cq_screens_analytics_impl_send_frequency: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties {
  pub fn new() -> ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties {
    ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties {
      com_adobe_cq_screens_analytics_impl_url: None,
      com_adobe_cq_screens_analytics_impl_apikey: None,
      com_adobe_cq_screens_analytics_impl_project: None,
      com_adobe_cq_screens_analytics_impl_environment: None,
      com_adobe_cq_screens_analytics_impl_send_frequency: None
    }
  }

  pub fn set_com_adobe_cq_screens_analytics_impl_url(&mut self, com_adobe_cq_screens_analytics_impl_url: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_screens_analytics_impl_url = Some(com_adobe_cq_screens_analytics_impl_url);
  }

  pub fn with_com_adobe_cq_screens_analytics_impl_url(mut self, com_adobe_cq_screens_analytics_impl_url: ::models::ConfigNodePropertyString) -> ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties {
    self.com_adobe_cq_screens_analytics_impl_url = Some(com_adobe_cq_screens_analytics_impl_url);
    self
  }

  pub fn com_adobe_cq_screens_analytics_impl_url(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_screens_analytics_impl_url.as_ref()
  }

  pub fn reset_com_adobe_cq_screens_analytics_impl_url(&mut self) {
    self.com_adobe_cq_screens_analytics_impl_url = None;
  }

  pub fn set_com_adobe_cq_screens_analytics_impl_apikey(&mut self, com_adobe_cq_screens_analytics_impl_apikey: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_screens_analytics_impl_apikey = Some(com_adobe_cq_screens_analytics_impl_apikey);
  }

  pub fn with_com_adobe_cq_screens_analytics_impl_apikey(mut self, com_adobe_cq_screens_analytics_impl_apikey: ::models::ConfigNodePropertyString) -> ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties {
    self.com_adobe_cq_screens_analytics_impl_apikey = Some(com_adobe_cq_screens_analytics_impl_apikey);
    self
  }

  pub fn com_adobe_cq_screens_analytics_impl_apikey(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_screens_analytics_impl_apikey.as_ref()
  }

  pub fn reset_com_adobe_cq_screens_analytics_impl_apikey(&mut self) {
    self.com_adobe_cq_screens_analytics_impl_apikey = None;
  }

  pub fn set_com_adobe_cq_screens_analytics_impl_project(&mut self, com_adobe_cq_screens_analytics_impl_project: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_screens_analytics_impl_project = Some(com_adobe_cq_screens_analytics_impl_project);
  }

  pub fn with_com_adobe_cq_screens_analytics_impl_project(mut self, com_adobe_cq_screens_analytics_impl_project: ::models::ConfigNodePropertyString) -> ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties {
    self.com_adobe_cq_screens_analytics_impl_project = Some(com_adobe_cq_screens_analytics_impl_project);
    self
  }

  pub fn com_adobe_cq_screens_analytics_impl_project(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_screens_analytics_impl_project.as_ref()
  }

  pub fn reset_com_adobe_cq_screens_analytics_impl_project(&mut self) {
    self.com_adobe_cq_screens_analytics_impl_project = None;
  }

  pub fn set_com_adobe_cq_screens_analytics_impl_environment(&mut self, com_adobe_cq_screens_analytics_impl_environment: ::models::ConfigNodePropertyDropDown) {
    self.com_adobe_cq_screens_analytics_impl_environment = Some(com_adobe_cq_screens_analytics_impl_environment);
  }

  pub fn with_com_adobe_cq_screens_analytics_impl_environment(mut self, com_adobe_cq_screens_analytics_impl_environment: ::models::ConfigNodePropertyDropDown) -> ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties {
    self.com_adobe_cq_screens_analytics_impl_environment = Some(com_adobe_cq_screens_analytics_impl_environment);
    self
  }

  pub fn com_adobe_cq_screens_analytics_impl_environment(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.com_adobe_cq_screens_analytics_impl_environment.as_ref()
  }

  pub fn reset_com_adobe_cq_screens_analytics_impl_environment(&mut self) {
    self.com_adobe_cq_screens_analytics_impl_environment = None;
  }

  pub fn set_com_adobe_cq_screens_analytics_impl_send_frequency(&mut self, com_adobe_cq_screens_analytics_impl_send_frequency: ::models::ConfigNodePropertyInteger) {
    self.com_adobe_cq_screens_analytics_impl_send_frequency = Some(com_adobe_cq_screens_analytics_impl_send_frequency);
  }

  pub fn with_com_adobe_cq_screens_analytics_impl_send_frequency(mut self, com_adobe_cq_screens_analytics_impl_send_frequency: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties {
    self.com_adobe_cq_screens_analytics_impl_send_frequency = Some(com_adobe_cq_screens_analytics_impl_send_frequency);
    self
  }

  pub fn com_adobe_cq_screens_analytics_impl_send_frequency(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.com_adobe_cq_screens_analytics_impl_send_frequency.as_ref()
  }

  pub fn reset_com_adobe_cq_screens_analytics_impl_send_frequency(&mut self) {
    self.com_adobe_cq_screens_analytics_impl_send_frequency = None;
  }

}



