/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties :  IEquatable<ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties" /> class.
        /// </summary>
        /// <param name="serviceRanking">serviceRanking.</param>
        /// <param name="globalSize">globalSize.</param>
        /// <param name="maxDiskUsage">maxDiskUsage.</param>
        /// <param name="persistenceEnabled">persistenceEnabled.</param>
        /// <param name="threadPoolMaxSize">threadPoolMaxSize.</param>
        /// <param name="scheduledThreadPoolMaxSize">scheduledThreadPoolMaxSize.</param>
        /// <param name="gracefulShutdownTimeout">gracefulShutdownTimeout.</param>
        /// <param name="queues">queues.</param>
        /// <param name="topics">topics.</param>
        /// <param name="addressesMaxDeliveryAttempts">addressesMaxDeliveryAttempts.</param>
        /// <param name="addressesExpiryDelay">addressesExpiryDelay.</param>
        /// <param name="addressesAddressFullMessagePolicy">addressesAddressFullMessagePolicy.</param>
        /// <param name="addressesMaxSizeBytes">addressesMaxSizeBytes.</param>
        /// <param name="addressesPageSizeBytes">addressesPageSizeBytes.</param>
        /// <param name="addressesPageCacheMaxSize">addressesPageCacheMaxSize.</param>
        /// <param name="clusterUser">clusterUser.</param>
        /// <param name="clusterPassword">clusterPassword.</param>
        /// <param name="clusterCallTimeout">clusterCallTimeout.</param>
        /// <param name="clusterCallFailoverTimeout">clusterCallFailoverTimeout.</param>
        /// <param name="clusterClientFailureCheckPeriod">clusterClientFailureCheckPeriod.</param>
        /// <param name="clusterNotificationAttempts">clusterNotificationAttempts.</param>
        /// <param name="clusterNotificationInterval">clusterNotificationInterval.</param>
        /// <param name="idCacheSize">idCacheSize.</param>
        /// <param name="clusterConfirmationWindowSize">clusterConfirmationWindowSize.</param>
        /// <param name="clusterConnectionTtl">clusterConnectionTtl.</param>
        /// <param name="clusterDuplicateDetection">clusterDuplicateDetection.</param>
        /// <param name="clusterInitialConnectAttempts">clusterInitialConnectAttempts.</param>
        /// <param name="clusterMaxRetryInterval">clusterMaxRetryInterval.</param>
        /// <param name="clusterMinLargeMessageSize">clusterMinLargeMessageSize.</param>
        /// <param name="clusterProducerWindowSize">clusterProducerWindowSize.</param>
        /// <param name="clusterReconnectAttempts">clusterReconnectAttempts.</param>
        /// <param name="clusterRetryInterval">clusterRetryInterval.</param>
        /// <param name="clusterRetryIntervalMultiplier">clusterRetryIntervalMultiplier.</param>
        public ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties(ConfigNodePropertyInteger serviceRanking = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger globalSize = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger maxDiskUsage = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean persistenceEnabled = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger threadPoolMaxSize = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger scheduledThreadPoolMaxSize = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger gracefulShutdownTimeout = default(ConfigNodePropertyInteger), ConfigNodePropertyArray queues = default(ConfigNodePropertyArray), ConfigNodePropertyArray topics = default(ConfigNodePropertyArray), ConfigNodePropertyInteger addressesMaxDeliveryAttempts = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger addressesExpiryDelay = default(ConfigNodePropertyInteger), ConfigNodePropertyDropDown addressesAddressFullMessagePolicy = default(ConfigNodePropertyDropDown), ConfigNodePropertyInteger addressesMaxSizeBytes = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger addressesPageSizeBytes = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger addressesPageCacheMaxSize = default(ConfigNodePropertyInteger), ConfigNodePropertyString clusterUser = default(ConfigNodePropertyString), ConfigNodePropertyString clusterPassword = default(ConfigNodePropertyString), ConfigNodePropertyInteger clusterCallTimeout = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger clusterCallFailoverTimeout = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger clusterClientFailureCheckPeriod = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger clusterNotificationAttempts = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger clusterNotificationInterval = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger idCacheSize = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger clusterConfirmationWindowSize = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger clusterConnectionTtl = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean clusterDuplicateDetection = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger clusterInitialConnectAttempts = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger clusterMaxRetryInterval = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger clusterMinLargeMessageSize = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger clusterProducerWindowSize = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger clusterReconnectAttempts = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger clusterRetryInterval = default(ConfigNodePropertyInteger), ConfigNodePropertyFloat clusterRetryIntervalMultiplier = default(ConfigNodePropertyFloat))
        {
            this.ServiceRanking = serviceRanking;
            this.GlobalSize = globalSize;
            this.MaxDiskUsage = maxDiskUsage;
            this.PersistenceEnabled = persistenceEnabled;
            this.ThreadPoolMaxSize = threadPoolMaxSize;
            this.ScheduledThreadPoolMaxSize = scheduledThreadPoolMaxSize;
            this.GracefulShutdownTimeout = gracefulShutdownTimeout;
            this.Queues = queues;
            this.Topics = topics;
            this.AddressesMaxDeliveryAttempts = addressesMaxDeliveryAttempts;
            this.AddressesExpiryDelay = addressesExpiryDelay;
            this.AddressesAddressFullMessagePolicy = addressesAddressFullMessagePolicy;
            this.AddressesMaxSizeBytes = addressesMaxSizeBytes;
            this.AddressesPageSizeBytes = addressesPageSizeBytes;
            this.AddressesPageCacheMaxSize = addressesPageCacheMaxSize;
            this.ClusterUser = clusterUser;
            this.ClusterPassword = clusterPassword;
            this.ClusterCallTimeout = clusterCallTimeout;
            this.ClusterCallFailoverTimeout = clusterCallFailoverTimeout;
            this.ClusterClientFailureCheckPeriod = clusterClientFailureCheckPeriod;
            this.ClusterNotificationAttempts = clusterNotificationAttempts;
            this.ClusterNotificationInterval = clusterNotificationInterval;
            this.IdCacheSize = idCacheSize;
            this.ClusterConfirmationWindowSize = clusterConfirmationWindowSize;
            this.ClusterConnectionTtl = clusterConnectionTtl;
            this.ClusterDuplicateDetection = clusterDuplicateDetection;
            this.ClusterInitialConnectAttempts = clusterInitialConnectAttempts;
            this.ClusterMaxRetryInterval = clusterMaxRetryInterval;
            this.ClusterMinLargeMessageSize = clusterMinLargeMessageSize;
            this.ClusterProducerWindowSize = clusterProducerWindowSize;
            this.ClusterReconnectAttempts = clusterReconnectAttempts;
            this.ClusterRetryInterval = clusterRetryInterval;
            this.ClusterRetryIntervalMultiplier = clusterRetryIntervalMultiplier;
        }
        
        /// <summary>
        /// Gets or Sets ServiceRanking
        /// </summary>
        [DataMember(Name="service.ranking", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ServiceRanking { get; set; }

        /// <summary>
        /// Gets or Sets GlobalSize
        /// </summary>
        [DataMember(Name="global.size", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger GlobalSize { get; set; }

        /// <summary>
        /// Gets or Sets MaxDiskUsage
        /// </summary>
        [DataMember(Name="max.disk.usage", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MaxDiskUsage { get; set; }

        /// <summary>
        /// Gets or Sets PersistenceEnabled
        /// </summary>
        [DataMember(Name="persistence.enabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean PersistenceEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ThreadPoolMaxSize
        /// </summary>
        [DataMember(Name="thread.pool.max.size", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ThreadPoolMaxSize { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledThreadPoolMaxSize
        /// </summary>
        [DataMember(Name="scheduled.thread.pool.max.size", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ScheduledThreadPoolMaxSize { get; set; }

        /// <summary>
        /// Gets or Sets GracefulShutdownTimeout
        /// </summary>
        [DataMember(Name="graceful.shutdown.timeout", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger GracefulShutdownTimeout { get; set; }

        /// <summary>
        /// Gets or Sets Queues
        /// </summary>
        [DataMember(Name="queues", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Queues { get; set; }

        /// <summary>
        /// Gets or Sets Topics
        /// </summary>
        [DataMember(Name="topics", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Topics { get; set; }

        /// <summary>
        /// Gets or Sets AddressesMaxDeliveryAttempts
        /// </summary>
        [DataMember(Name="addresses.max.delivery.attempts", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger AddressesMaxDeliveryAttempts { get; set; }

        /// <summary>
        /// Gets or Sets AddressesExpiryDelay
        /// </summary>
        [DataMember(Name="addresses.expiry.delay", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger AddressesExpiryDelay { get; set; }

        /// <summary>
        /// Gets or Sets AddressesAddressFullMessagePolicy
        /// </summary>
        [DataMember(Name="addresses.address.full.message.policy", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown AddressesAddressFullMessagePolicy { get; set; }

        /// <summary>
        /// Gets or Sets AddressesMaxSizeBytes
        /// </summary>
        [DataMember(Name="addresses.max.size.bytes", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger AddressesMaxSizeBytes { get; set; }

        /// <summary>
        /// Gets or Sets AddressesPageSizeBytes
        /// </summary>
        [DataMember(Name="addresses.page.size.bytes", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger AddressesPageSizeBytes { get; set; }

        /// <summary>
        /// Gets or Sets AddressesPageCacheMaxSize
        /// </summary>
        [DataMember(Name="addresses.page.cache.max.size", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger AddressesPageCacheMaxSize { get; set; }

        /// <summary>
        /// Gets or Sets ClusterUser
        /// </summary>
        [DataMember(Name="cluster.user", EmitDefaultValue=false)]
        public ConfigNodePropertyString ClusterUser { get; set; }

        /// <summary>
        /// Gets or Sets ClusterPassword
        /// </summary>
        [DataMember(Name="cluster.password", EmitDefaultValue=false)]
        public ConfigNodePropertyString ClusterPassword { get; set; }

        /// <summary>
        /// Gets or Sets ClusterCallTimeout
        /// </summary>
        [DataMember(Name="cluster.call.timeout", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ClusterCallTimeout { get; set; }

        /// <summary>
        /// Gets or Sets ClusterCallFailoverTimeout
        /// </summary>
        [DataMember(Name="cluster.call.failover.timeout", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ClusterCallFailoverTimeout { get; set; }

        /// <summary>
        /// Gets or Sets ClusterClientFailureCheckPeriod
        /// </summary>
        [DataMember(Name="cluster.client.failure.check.period", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ClusterClientFailureCheckPeriod { get; set; }

        /// <summary>
        /// Gets or Sets ClusterNotificationAttempts
        /// </summary>
        [DataMember(Name="cluster.notification.attempts", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ClusterNotificationAttempts { get; set; }

        /// <summary>
        /// Gets or Sets ClusterNotificationInterval
        /// </summary>
        [DataMember(Name="cluster.notification.interval", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ClusterNotificationInterval { get; set; }

        /// <summary>
        /// Gets or Sets IdCacheSize
        /// </summary>
        [DataMember(Name="id.cache.size", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger IdCacheSize { get; set; }

        /// <summary>
        /// Gets or Sets ClusterConfirmationWindowSize
        /// </summary>
        [DataMember(Name="cluster.confirmation.window.size", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ClusterConfirmationWindowSize { get; set; }

        /// <summary>
        /// Gets or Sets ClusterConnectionTtl
        /// </summary>
        [DataMember(Name="cluster.connection.ttl", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ClusterConnectionTtl { get; set; }

        /// <summary>
        /// Gets or Sets ClusterDuplicateDetection
        /// </summary>
        [DataMember(Name="cluster.duplicate.detection", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ClusterDuplicateDetection { get; set; }

        /// <summary>
        /// Gets or Sets ClusterInitialConnectAttempts
        /// </summary>
        [DataMember(Name="cluster.initial.connect.attempts", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ClusterInitialConnectAttempts { get; set; }

        /// <summary>
        /// Gets or Sets ClusterMaxRetryInterval
        /// </summary>
        [DataMember(Name="cluster.max.retry.interval", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ClusterMaxRetryInterval { get; set; }

        /// <summary>
        /// Gets or Sets ClusterMinLargeMessageSize
        /// </summary>
        [DataMember(Name="cluster.min.large.message.size", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ClusterMinLargeMessageSize { get; set; }

        /// <summary>
        /// Gets or Sets ClusterProducerWindowSize
        /// </summary>
        [DataMember(Name="cluster.producer.window.size", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ClusterProducerWindowSize { get; set; }

        /// <summary>
        /// Gets or Sets ClusterReconnectAttempts
        /// </summary>
        [DataMember(Name="cluster.reconnect.attempts", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ClusterReconnectAttempts { get; set; }

        /// <summary>
        /// Gets or Sets ClusterRetryInterval
        /// </summary>
        [DataMember(Name="cluster.retry.interval", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ClusterRetryInterval { get; set; }

        /// <summary>
        /// Gets or Sets ClusterRetryIntervalMultiplier
        /// </summary>
        [DataMember(Name="cluster.retry.interval.multiplier", EmitDefaultValue=false)]
        public ConfigNodePropertyFloat ClusterRetryIntervalMultiplier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties {\n");
            sb.Append("  ServiceRanking: ").Append(ServiceRanking).Append("\n");
            sb.Append("  GlobalSize: ").Append(GlobalSize).Append("\n");
            sb.Append("  MaxDiskUsage: ").Append(MaxDiskUsage).Append("\n");
            sb.Append("  PersistenceEnabled: ").Append(PersistenceEnabled).Append("\n");
            sb.Append("  ThreadPoolMaxSize: ").Append(ThreadPoolMaxSize).Append("\n");
            sb.Append("  ScheduledThreadPoolMaxSize: ").Append(ScheduledThreadPoolMaxSize).Append("\n");
            sb.Append("  GracefulShutdownTimeout: ").Append(GracefulShutdownTimeout).Append("\n");
            sb.Append("  Queues: ").Append(Queues).Append("\n");
            sb.Append("  Topics: ").Append(Topics).Append("\n");
            sb.Append("  AddressesMaxDeliveryAttempts: ").Append(AddressesMaxDeliveryAttempts).Append("\n");
            sb.Append("  AddressesExpiryDelay: ").Append(AddressesExpiryDelay).Append("\n");
            sb.Append("  AddressesAddressFullMessagePolicy: ").Append(AddressesAddressFullMessagePolicy).Append("\n");
            sb.Append("  AddressesMaxSizeBytes: ").Append(AddressesMaxSizeBytes).Append("\n");
            sb.Append("  AddressesPageSizeBytes: ").Append(AddressesPageSizeBytes).Append("\n");
            sb.Append("  AddressesPageCacheMaxSize: ").Append(AddressesPageCacheMaxSize).Append("\n");
            sb.Append("  ClusterUser: ").Append(ClusterUser).Append("\n");
            sb.Append("  ClusterPassword: ").Append(ClusterPassword).Append("\n");
            sb.Append("  ClusterCallTimeout: ").Append(ClusterCallTimeout).Append("\n");
            sb.Append("  ClusterCallFailoverTimeout: ").Append(ClusterCallFailoverTimeout).Append("\n");
            sb.Append("  ClusterClientFailureCheckPeriod: ").Append(ClusterClientFailureCheckPeriod).Append("\n");
            sb.Append("  ClusterNotificationAttempts: ").Append(ClusterNotificationAttempts).Append("\n");
            sb.Append("  ClusterNotificationInterval: ").Append(ClusterNotificationInterval).Append("\n");
            sb.Append("  IdCacheSize: ").Append(IdCacheSize).Append("\n");
            sb.Append("  ClusterConfirmationWindowSize: ").Append(ClusterConfirmationWindowSize).Append("\n");
            sb.Append("  ClusterConnectionTtl: ").Append(ClusterConnectionTtl).Append("\n");
            sb.Append("  ClusterDuplicateDetection: ").Append(ClusterDuplicateDetection).Append("\n");
            sb.Append("  ClusterInitialConnectAttempts: ").Append(ClusterInitialConnectAttempts).Append("\n");
            sb.Append("  ClusterMaxRetryInterval: ").Append(ClusterMaxRetryInterval).Append("\n");
            sb.Append("  ClusterMinLargeMessageSize: ").Append(ClusterMinLargeMessageSize).Append("\n");
            sb.Append("  ClusterProducerWindowSize: ").Append(ClusterProducerWindowSize).Append("\n");
            sb.Append("  ClusterReconnectAttempts: ").Append(ClusterReconnectAttempts).Append("\n");
            sb.Append("  ClusterRetryInterval: ").Append(ClusterRetryInterval).Append("\n");
            sb.Append("  ClusterRetryIntervalMultiplier: ").Append(ClusterRetryIntervalMultiplier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ServiceRanking == input.ServiceRanking ||
                    (this.ServiceRanking != null &&
                    this.ServiceRanking.Equals(input.ServiceRanking))
                ) && 
                (
                    this.GlobalSize == input.GlobalSize ||
                    (this.GlobalSize != null &&
                    this.GlobalSize.Equals(input.GlobalSize))
                ) && 
                (
                    this.MaxDiskUsage == input.MaxDiskUsage ||
                    (this.MaxDiskUsage != null &&
                    this.MaxDiskUsage.Equals(input.MaxDiskUsage))
                ) && 
                (
                    this.PersistenceEnabled == input.PersistenceEnabled ||
                    (this.PersistenceEnabled != null &&
                    this.PersistenceEnabled.Equals(input.PersistenceEnabled))
                ) && 
                (
                    this.ThreadPoolMaxSize == input.ThreadPoolMaxSize ||
                    (this.ThreadPoolMaxSize != null &&
                    this.ThreadPoolMaxSize.Equals(input.ThreadPoolMaxSize))
                ) && 
                (
                    this.ScheduledThreadPoolMaxSize == input.ScheduledThreadPoolMaxSize ||
                    (this.ScheduledThreadPoolMaxSize != null &&
                    this.ScheduledThreadPoolMaxSize.Equals(input.ScheduledThreadPoolMaxSize))
                ) && 
                (
                    this.GracefulShutdownTimeout == input.GracefulShutdownTimeout ||
                    (this.GracefulShutdownTimeout != null &&
                    this.GracefulShutdownTimeout.Equals(input.GracefulShutdownTimeout))
                ) && 
                (
                    this.Queues == input.Queues ||
                    (this.Queues != null &&
                    this.Queues.Equals(input.Queues))
                ) && 
                (
                    this.Topics == input.Topics ||
                    (this.Topics != null &&
                    this.Topics.Equals(input.Topics))
                ) && 
                (
                    this.AddressesMaxDeliveryAttempts == input.AddressesMaxDeliveryAttempts ||
                    (this.AddressesMaxDeliveryAttempts != null &&
                    this.AddressesMaxDeliveryAttempts.Equals(input.AddressesMaxDeliveryAttempts))
                ) && 
                (
                    this.AddressesExpiryDelay == input.AddressesExpiryDelay ||
                    (this.AddressesExpiryDelay != null &&
                    this.AddressesExpiryDelay.Equals(input.AddressesExpiryDelay))
                ) && 
                (
                    this.AddressesAddressFullMessagePolicy == input.AddressesAddressFullMessagePolicy ||
                    (this.AddressesAddressFullMessagePolicy != null &&
                    this.AddressesAddressFullMessagePolicy.Equals(input.AddressesAddressFullMessagePolicy))
                ) && 
                (
                    this.AddressesMaxSizeBytes == input.AddressesMaxSizeBytes ||
                    (this.AddressesMaxSizeBytes != null &&
                    this.AddressesMaxSizeBytes.Equals(input.AddressesMaxSizeBytes))
                ) && 
                (
                    this.AddressesPageSizeBytes == input.AddressesPageSizeBytes ||
                    (this.AddressesPageSizeBytes != null &&
                    this.AddressesPageSizeBytes.Equals(input.AddressesPageSizeBytes))
                ) && 
                (
                    this.AddressesPageCacheMaxSize == input.AddressesPageCacheMaxSize ||
                    (this.AddressesPageCacheMaxSize != null &&
                    this.AddressesPageCacheMaxSize.Equals(input.AddressesPageCacheMaxSize))
                ) && 
                (
                    this.ClusterUser == input.ClusterUser ||
                    (this.ClusterUser != null &&
                    this.ClusterUser.Equals(input.ClusterUser))
                ) && 
                (
                    this.ClusterPassword == input.ClusterPassword ||
                    (this.ClusterPassword != null &&
                    this.ClusterPassword.Equals(input.ClusterPassword))
                ) && 
                (
                    this.ClusterCallTimeout == input.ClusterCallTimeout ||
                    (this.ClusterCallTimeout != null &&
                    this.ClusterCallTimeout.Equals(input.ClusterCallTimeout))
                ) && 
                (
                    this.ClusterCallFailoverTimeout == input.ClusterCallFailoverTimeout ||
                    (this.ClusterCallFailoverTimeout != null &&
                    this.ClusterCallFailoverTimeout.Equals(input.ClusterCallFailoverTimeout))
                ) && 
                (
                    this.ClusterClientFailureCheckPeriod == input.ClusterClientFailureCheckPeriod ||
                    (this.ClusterClientFailureCheckPeriod != null &&
                    this.ClusterClientFailureCheckPeriod.Equals(input.ClusterClientFailureCheckPeriod))
                ) && 
                (
                    this.ClusterNotificationAttempts == input.ClusterNotificationAttempts ||
                    (this.ClusterNotificationAttempts != null &&
                    this.ClusterNotificationAttempts.Equals(input.ClusterNotificationAttempts))
                ) && 
                (
                    this.ClusterNotificationInterval == input.ClusterNotificationInterval ||
                    (this.ClusterNotificationInterval != null &&
                    this.ClusterNotificationInterval.Equals(input.ClusterNotificationInterval))
                ) && 
                (
                    this.IdCacheSize == input.IdCacheSize ||
                    (this.IdCacheSize != null &&
                    this.IdCacheSize.Equals(input.IdCacheSize))
                ) && 
                (
                    this.ClusterConfirmationWindowSize == input.ClusterConfirmationWindowSize ||
                    (this.ClusterConfirmationWindowSize != null &&
                    this.ClusterConfirmationWindowSize.Equals(input.ClusterConfirmationWindowSize))
                ) && 
                (
                    this.ClusterConnectionTtl == input.ClusterConnectionTtl ||
                    (this.ClusterConnectionTtl != null &&
                    this.ClusterConnectionTtl.Equals(input.ClusterConnectionTtl))
                ) && 
                (
                    this.ClusterDuplicateDetection == input.ClusterDuplicateDetection ||
                    (this.ClusterDuplicateDetection != null &&
                    this.ClusterDuplicateDetection.Equals(input.ClusterDuplicateDetection))
                ) && 
                (
                    this.ClusterInitialConnectAttempts == input.ClusterInitialConnectAttempts ||
                    (this.ClusterInitialConnectAttempts != null &&
                    this.ClusterInitialConnectAttempts.Equals(input.ClusterInitialConnectAttempts))
                ) && 
                (
                    this.ClusterMaxRetryInterval == input.ClusterMaxRetryInterval ||
                    (this.ClusterMaxRetryInterval != null &&
                    this.ClusterMaxRetryInterval.Equals(input.ClusterMaxRetryInterval))
                ) && 
                (
                    this.ClusterMinLargeMessageSize == input.ClusterMinLargeMessageSize ||
                    (this.ClusterMinLargeMessageSize != null &&
                    this.ClusterMinLargeMessageSize.Equals(input.ClusterMinLargeMessageSize))
                ) && 
                (
                    this.ClusterProducerWindowSize == input.ClusterProducerWindowSize ||
                    (this.ClusterProducerWindowSize != null &&
                    this.ClusterProducerWindowSize.Equals(input.ClusterProducerWindowSize))
                ) && 
                (
                    this.ClusterReconnectAttempts == input.ClusterReconnectAttempts ||
                    (this.ClusterReconnectAttempts != null &&
                    this.ClusterReconnectAttempts.Equals(input.ClusterReconnectAttempts))
                ) && 
                (
                    this.ClusterRetryInterval == input.ClusterRetryInterval ||
                    (this.ClusterRetryInterval != null &&
                    this.ClusterRetryInterval.Equals(input.ClusterRetryInterval))
                ) && 
                (
                    this.ClusterRetryIntervalMultiplier == input.ClusterRetryIntervalMultiplier ||
                    (this.ClusterRetryIntervalMultiplier != null &&
                    this.ClusterRetryIntervalMultiplier.Equals(input.ClusterRetryIntervalMultiplier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServiceRanking != null)
                    hashCode = hashCode * 59 + this.ServiceRanking.GetHashCode();
                if (this.GlobalSize != null)
                    hashCode = hashCode * 59 + this.GlobalSize.GetHashCode();
                if (this.MaxDiskUsage != null)
                    hashCode = hashCode * 59 + this.MaxDiskUsage.GetHashCode();
                if (this.PersistenceEnabled != null)
                    hashCode = hashCode * 59 + this.PersistenceEnabled.GetHashCode();
                if (this.ThreadPoolMaxSize != null)
                    hashCode = hashCode * 59 + this.ThreadPoolMaxSize.GetHashCode();
                if (this.ScheduledThreadPoolMaxSize != null)
                    hashCode = hashCode * 59 + this.ScheduledThreadPoolMaxSize.GetHashCode();
                if (this.GracefulShutdownTimeout != null)
                    hashCode = hashCode * 59 + this.GracefulShutdownTimeout.GetHashCode();
                if (this.Queues != null)
                    hashCode = hashCode * 59 + this.Queues.GetHashCode();
                if (this.Topics != null)
                    hashCode = hashCode * 59 + this.Topics.GetHashCode();
                if (this.AddressesMaxDeliveryAttempts != null)
                    hashCode = hashCode * 59 + this.AddressesMaxDeliveryAttempts.GetHashCode();
                if (this.AddressesExpiryDelay != null)
                    hashCode = hashCode * 59 + this.AddressesExpiryDelay.GetHashCode();
                if (this.AddressesAddressFullMessagePolicy != null)
                    hashCode = hashCode * 59 + this.AddressesAddressFullMessagePolicy.GetHashCode();
                if (this.AddressesMaxSizeBytes != null)
                    hashCode = hashCode * 59 + this.AddressesMaxSizeBytes.GetHashCode();
                if (this.AddressesPageSizeBytes != null)
                    hashCode = hashCode * 59 + this.AddressesPageSizeBytes.GetHashCode();
                if (this.AddressesPageCacheMaxSize != null)
                    hashCode = hashCode * 59 + this.AddressesPageCacheMaxSize.GetHashCode();
                if (this.ClusterUser != null)
                    hashCode = hashCode * 59 + this.ClusterUser.GetHashCode();
                if (this.ClusterPassword != null)
                    hashCode = hashCode * 59 + this.ClusterPassword.GetHashCode();
                if (this.ClusterCallTimeout != null)
                    hashCode = hashCode * 59 + this.ClusterCallTimeout.GetHashCode();
                if (this.ClusterCallFailoverTimeout != null)
                    hashCode = hashCode * 59 + this.ClusterCallFailoverTimeout.GetHashCode();
                if (this.ClusterClientFailureCheckPeriod != null)
                    hashCode = hashCode * 59 + this.ClusterClientFailureCheckPeriod.GetHashCode();
                if (this.ClusterNotificationAttempts != null)
                    hashCode = hashCode * 59 + this.ClusterNotificationAttempts.GetHashCode();
                if (this.ClusterNotificationInterval != null)
                    hashCode = hashCode * 59 + this.ClusterNotificationInterval.GetHashCode();
                if (this.IdCacheSize != null)
                    hashCode = hashCode * 59 + this.IdCacheSize.GetHashCode();
                if (this.ClusterConfirmationWindowSize != null)
                    hashCode = hashCode * 59 + this.ClusterConfirmationWindowSize.GetHashCode();
                if (this.ClusterConnectionTtl != null)
                    hashCode = hashCode * 59 + this.ClusterConnectionTtl.GetHashCode();
                if (this.ClusterDuplicateDetection != null)
                    hashCode = hashCode * 59 + this.ClusterDuplicateDetection.GetHashCode();
                if (this.ClusterInitialConnectAttempts != null)
                    hashCode = hashCode * 59 + this.ClusterInitialConnectAttempts.GetHashCode();
                if (this.ClusterMaxRetryInterval != null)
                    hashCode = hashCode * 59 + this.ClusterMaxRetryInterval.GetHashCode();
                if (this.ClusterMinLargeMessageSize != null)
                    hashCode = hashCode * 59 + this.ClusterMinLargeMessageSize.GetHashCode();
                if (this.ClusterProducerWindowSize != null)
                    hashCode = hashCode * 59 + this.ClusterProducerWindowSize.GetHashCode();
                if (this.ClusterReconnectAttempts != null)
                    hashCode = hashCode * 59 + this.ClusterReconnectAttempts.GetHashCode();
                if (this.ClusterRetryInterval != null)
                    hashCode = hashCode * 59 + this.ClusterRetryInterval.GetHashCode();
                if (this.ClusterRetryIntervalMultiplier != null)
                    hashCode = hashCode * 59 + this.ClusterRetryIntervalMultiplier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
