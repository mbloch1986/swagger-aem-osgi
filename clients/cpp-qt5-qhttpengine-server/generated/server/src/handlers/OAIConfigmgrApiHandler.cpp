/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIConfigmgrApiHandler.h"
#include "OAIConfigmgrApiRequest.h"

namespace OpenAPI {

OAIConfigmgrApiHandler::OAIConfigmgrApiHandler(){

}

OAIConfigmgrApiHandler::~OAIConfigmgrApiHandler(){

}

void OAIConfigmgrApiHandler::adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool show_placeholder, qint32 maximum_cache_entries, QString af_scripting_compatversion, bool make_file_name_unique, bool generating_compliant_data) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(show_placeholder);
    Q_UNUSED(maximum_cache_entries);
    Q_UNUSED(af_scripting_compatversion);
    Q_UNUSED(make_file_name_unique);
    Q_UNUSED(generating_compliant_data);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo res;
        reqObj->adaptiveFormAndInteractiveCommunicationWebChannelConfigurationResponse(res);
    }    
}
void OAIConfigmgrApiHandler::adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> font_list) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(font_list);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIAdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo res;
        reqObj->adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurResponse(res);
    }    
}
void OAIConfigmgrApiHandler::analyticsComponentQueryCacheService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 cq_analytics_component_query_cache_size) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_analytics_component_query_cache_size);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIAnalyticsComponentQueryCacheServiceInfo res;
        reqObj->analyticsComponentQueryCacheServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::apacheSlingHealthCheckResultHTMLSerializer(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString style_string) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(style_string);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIApacheSlingHealthCheckResultHTMLSerializerInfo res;
        reqObj->apacheSlingHealthCheckResultHTMLSerializerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool forms_manager_config_include_ootb_templates, bool forms_manager_config_include_deprecated_templates) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(forms_manager_config_include_ootb_templates);
    Q_UNUSED(forms_manager_config_include_deprecated_templates);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo res;
        reqObj->comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeAemTransactionCoreImplTransactionRecorder(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool is_transaction_recording_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(is_transaction_recording_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeAemTransactionCoreImplTransactionRecorderInfo res;
        reqObj->comAdobeAemTransactionCoreImplTransactionRecorderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString hc_name, QList<QString> hc_tags, QString hc_mbean_name) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_name);
    Q_UNUSED(hc_tags);
    Q_UNUSED(hc_mbean_name);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo res;
        reqObj->comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString hc_name, QList<QString> hc_tags, QString hc_mbean_name) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_name);
    Q_UNUSED(hc_tags);
    Q_UNUSED(hc_mbean_name);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo res;
        reqObj->comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> pre_upgrade_maintenance_tasks, QList<QString> pre_upgrade_hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(pre_upgrade_maintenance_tasks);
    Q_UNUSED(pre_upgrade_hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo res;
        reqObj->comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString root_path, bool fix_inconsistencies) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(root_path);
    Q_UNUSED(fix_inconsistencies);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo res;
        reqObj->comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqAccountApiAccountManagementService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 cq_accountmanager_token_validity_period, QString cq_accountmanager_config_requestnewaccount_mail, QString cq_accountmanager_config_requestnewpwd_mail) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_accountmanager_token_validity_period);
    Q_UNUSED(cq_accountmanager_config_requestnewaccount_mail);
    Q_UNUSED(cq_accountmanager_config_requestnewpwd_mail);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqAccountApiAccountManagementServiceInfo res;
        reqObj->comAdobeCqAccountApiAccountManagementServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqAccountImplAccountManagementServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString cq_accountmanager_config_informnewaccount_mail, QString cq_accountmanager_config_informnewpwd_mail) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_accountmanager_config_informnewaccount_mail);
    Q_UNUSED(cq_accountmanager_config_informnewpwd_mail);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqAccountImplAccountManagementServletInfo res;
        reqObj->comAdobeCqAccountImplAccountManagementServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqAddressImplLocationLocationListServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 cq_address_location_default_max_results) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_address_location_default_max_results);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqAddressImplLocationLocationListServletInfo res;
        reqObj->comAdobeCqAddressImplLocationLocationListServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqAuditPurgeDam(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString auditlog_rule_name, QString auditlog_rule_contentpath, qint32 auditlog_rule_minimumage, QString auditlog_rule_types) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(auditlog_rule_name);
    Q_UNUSED(auditlog_rule_contentpath);
    Q_UNUSED(auditlog_rule_minimumage);
    Q_UNUSED(auditlog_rule_types);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqAuditPurgeDamInfo res;
        reqObj->comAdobeCqAuditPurgeDamResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqAuditPurgePages(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString auditlog_rule_name, QString auditlog_rule_contentpath, qint32 auditlog_rule_minimumage, QString auditlog_rule_types) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(auditlog_rule_name);
    Q_UNUSED(auditlog_rule_contentpath);
    Q_UNUSED(auditlog_rule_minimumage);
    Q_UNUSED(auditlog_rule_types);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqAuditPurgePagesInfo res;
        reqObj->comAdobeCqAuditPurgePagesResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqAuditPurgeReplication(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString auditlog_rule_name, QString auditlog_rule_contentpath, qint32 auditlog_rule_minimumage, QString auditlog_rule_types) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(auditlog_rule_name);
    Q_UNUSED(auditlog_rule_contentpath);
    Q_UNUSED(auditlog_rule_minimumage);
    Q_UNUSED(auditlog_rule_types);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqAuditPurgeReplicationInfo res;
        reqObj->comAdobeCqAuditPurgeReplicationResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString keypair_id, QString keypair_alias, QList<QString> cdnrewriter_attributes, QString cdn_rewriter_distribution_domain) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(keypair_id);
    Q_UNUSED(keypair_alias);
    Q_UNUSED(cdnrewriter_attributes);
    Q_UNUSED(cdn_rewriter_distribution_domain);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo res;
        reqObj->comAdobeCqCdnRewriterImplAWSCloudFrontRewriterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqCdnRewriterImplCDNConfigServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString cdn_config_distribution_domain, bool cdn_config_enable_rewriting, QList<QString> cdn_config_path_prefixes, qint32 cdn_config_cdnttl, QString cdn_config_application_protocol) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cdn_config_distribution_domain);
    Q_UNUSED(cdn_config_enable_rewriting);
    Q_UNUSED(cdn_config_path_prefixes);
    Q_UNUSED(cdn_config_cdnttl);
    Q_UNUSED(cdn_config_application_protocol);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo res;
        reqObj->comAdobeCqCdnRewriterImplCDNConfigServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqCdnRewriterImplCDNRewriter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QList<QString> cdnrewriter_attributes, QString cdn_rewriter_distribution_domain) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(cdnrewriter_attributes);
    Q_UNUSED(cdn_rewriter_distribution_domain);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqCdnRewriterImplCDNRewriterInfo res;
        reqObj->comAdobeCqCdnRewriterImplCDNRewriterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> flush_agents) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(flush_agents);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo res;
        reqObj->comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqCommerceImplAssetDynamicImageHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_commerce_asset_handler_active, QString cq_commerce_asset_handler_name) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_commerce_asset_handler_active);
    Q_UNUSED(cq_commerce_asset_handler_name);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqCommerceImplAssetDynamicImageHandlerInfo res;
        reqObj->comAdobeCqCommerceImplAssetDynamicImageHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString cq_commerce_asset_handler_fallback) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_commerce_asset_handler_fallback);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo res;
        reqObj->comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqCommerceImplAssetStaticImageHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_commerce_asset_handler_active, QString cq_commerce_asset_handler_name) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_commerce_asset_handler_active);
    Q_UNUSED(cq_commerce_asset_handler_name);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqCommerceImplAssetStaticImageHandlerInfo res;
        reqObj->comAdobeCqCommerceImplAssetStaticImageHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqCommerceImplAssetVideoHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_commerce_asset_handler_active, QString cq_commerce_asset_handler_name) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_commerce_asset_handler_active);
    Q_UNUSED(cq_commerce_asset_handler_name);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqCommerceImplAssetVideoHandlerInfo res;
        reqObj->comAdobeCqCommerceImplAssetVideoHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqCommerceImplPromotionPromotionManagerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString cq_commerce_promotion_root) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_commerce_promotion_root);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqCommerceImplPromotionPromotionManagerImplInfo res;
        reqObj->comAdobeCqCommerceImplPromotionPromotionManagerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 cq_commerce_cataloggenerator_bucketsize, QString cq_commerce_cataloggenerator_bucketname, QList<QString> cq_commerce_cataloggenerator_excludedtemplateproperties) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_commerce_cataloggenerator_bucketsize);
    Q_UNUSED(cq_commerce_cataloggenerator_bucketname);
    Q_UNUSED(cq_commerce_cataloggenerator_excludedtemplateproperties);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo res;
        reqObj->comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqCommercePimImplPageEventListener(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_commerce_pageeventlistener_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_commerce_pageeventlistener_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqCommercePimImplPageEventListenerInfo res;
        reqObj->comAdobeCqCommercePimImplPageEventListenerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString feed_generator_algorithm) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(feed_generator_algorithm);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo res;
        reqObj->comAdobeCqCommercePimImplProductfeedProductFeedServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqContentinsightImplReportingServicesSettingsProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString reportingservices_url) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(reportingservices_url);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo res;
        reqObj->comAdobeCqContentinsightImplReportingServicesSettingsProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString brightedge_url) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(brightedge_url);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo res;
        reqObj->comAdobeCqContentinsightImplServletsBrightEdgeProxyServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqContentinsightImplServletsReportingServicesProxyServle(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> reportingservices_proxy_whitelist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(reportingservices_proxy_whitelist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo res;
        reqObj->comAdobeCqContentinsightImplServletsReportingServicesProxyServleResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqDamCfmImplComponentComponentConfigImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString dam_cfm_component_resource_type, QString dam_cfm_component_file_reference_prop, QString dam_cfm_component_elements_prop, QString dam_cfm_component_variation_prop) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(dam_cfm_component_resource_type);
    Q_UNUSED(dam_cfm_component_file_reference_prop);
    Q_UNUSED(dam_cfm_component_elements_prop);
    Q_UNUSED(dam_cfm_component_variation_prop);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqDamCfmImplComponentComponentConfigImplInfo res;
        reqObj->comAdobeCqDamCfmImplComponentComponentConfigImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqDamCfmImplConfFeatureConfigImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> dam_cfm_resource_types, QList<QString> dam_cfm_reference_properties) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(dam_cfm_resource_types);
    Q_UNUSED(dam_cfm_reference_properties);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqDamCfmImplConfFeatureConfigImplInfo res;
        reqObj->comAdobeCqDamCfmImplConfFeatureConfigImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqDamCfmImplContentRewriterAssetProcessor(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString pipeline_type) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(pipeline_type);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo res;
        reqObj->comAdobeCqDamCfmImplContentRewriterAssetProcessorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqDamCfmImplContentRewriterParRangeFilter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString pipeline_type) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(pipeline_type);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo res;
        reqObj->comAdobeCqDamCfmImplContentRewriterParRangeFilterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqDamCfmImplContentRewriterPayloadFilter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString pipeline_type) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(pipeline_type);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo res;
        reqObj->comAdobeCqDamCfmImplContentRewriterPayloadFilterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqDamDmProcessImagePTiffManagerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 max_memory) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(max_memory);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqDamDmProcessImagePTiffManagerImplInfo res;
        reqObj->comAdobeCqDamDmProcessImagePTiffManagerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool dmreplicateonmodify_enabled, bool dmreplicateonmodify_forcesyncdeletes) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(dmreplicateonmodify_enabled);
    Q_UNUSED(dmreplicateonmodify_forcesyncdeletes);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo res;
        reqObj->comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 com_adobe_dam_mac_sync_client_so_timeout) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(com_adobe_dam_mac_sync_client_so_timeout);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo res;
        reqObj->comAdobeCqDamMacSyncHelperImplMACSyncClientImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqDamMacSyncImplDAMSyncServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths, bool com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions, qint32 com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms, QString com_adobe_cq_dam_mac_sync_damsyncservice_platform) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths);
    Q_UNUSED(com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions);
    Q_UNUSED(com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms);
    Q_UNUSED(com_adobe_cq_dam_mac_sync_damsyncservice_platform);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo res;
        reqObj->comAdobeCqDamMacSyncImplDAMSyncServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqDamProcessorNuiImplNuiAssetProcessor(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool nui_enabled, QString nui_service_url, QString nui_api_key) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(nui_enabled);
    Q_UNUSED(nui_service_url);
    Q_UNUSED(nui_api_key);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo res;
        reqObj->comAdobeCqDamProcessorNuiImplNuiAssetProcessorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqDamS7imagingImplIsImageServerComponent(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString tcp_port, bool allow_remote_access, QString max_render_rgn_pixels, QString max_message_size, qint32 random_access_url_timeout, qint32 worker_threads) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(tcp_port);
    Q_UNUSED(allow_remote_access);
    Q_UNUSED(max_render_rgn_pixels);
    Q_UNUSED(max_message_size);
    Q_UNUSED(random_access_url_timeout);
    Q_UNUSED(worker_threads);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqDamS7imagingImplIsImageServerComponentInfo res;
        reqObj->comAdobeCqDamS7imagingImplIsImageServerComponentResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqDamS7imagingImplPsPlatformServerServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cache_enable, QList<QString> cache_root_paths, qint32 cache_max_size, qint32 cache_max_entries) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cache_enable);
    Q_UNUSED(cache_root_paths);
    Q_UNUSED(cache_max_size);
    Q_UNUSED(cache_max_entries);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqDamS7imagingImplPsPlatformServerServletInfo res;
        reqObj->comAdobeCqDamS7imagingImplPsPlatformServerServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqDamWebdavImplIoAssetIOHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString path_prefix, bool create_version) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(path_prefix);
    Q_UNUSED(create_version);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqDamWebdavImplIoAssetIOHandlerInfo res;
        reqObj->comAdobeCqDamWebdavImplIoAssetIOHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_dam_webdav_version_linking_enable, qint32 cq_dam_webdav_version_linking_scheduler_period, qint32 cq_dam_webdav_version_linking_staging_timeout) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_webdav_version_linking_enable);
    Q_UNUSED(cq_dam_webdav_version_linking_scheduler_period);
    Q_UNUSED(cq_dam_webdav_version_linking_staging_timeout);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo res;
        reqObj->comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqDamWebdavImplIoSpecialFilesHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> com_day_cq_dam_core_impl_io_special_files_handler_filepatters) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(com_day_cq_dam_core_impl_io_special_files_handler_filepatters);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo res;
        reqObj->comAdobeCqDamWebdavImplIoSpecialFilesHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqDeserfwImplDeserializationFirewallImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> firewall_deserialization_whitelist, QList<QString> firewall_deserialization_blacklist, QString firewall_deserialization_diagnostics) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(firewall_deserialization_whitelist);
    Q_UNUSED(firewall_deserialization_blacklist);
    Q_UNUSED(firewall_deserialization_diagnostics);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqDeserfwImplDeserializationFirewallImplInfo res;
        reqObj->comAdobeCqDeserfwImplDeserializationFirewallImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqDtmImplServiceDTMWebServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 connection_timeout, qint32 socket_timeout) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(connection_timeout);
    Q_UNUSED(socket_timeout);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqDtmImplServiceDTMWebServiceImplInfo res;
        reqObj->comAdobeCqDtmImplServiceDTMWebServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqDtmImplServletsDTMDeployHookServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> dtm_staging_ip_whitelist, QList<QString> dtm_production_ip_whitelist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(dtm_staging_ip_whitelist);
    Q_UNUSED(dtm_production_ip_whitelist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqDtmImplServletsDTMDeployHookServletInfo res;
        reqObj->comAdobeCqDtmImplServletsDTMDeployHookServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqDtmReactorImplServiceWebServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString endpoint_uri, qint32 connection_timeout, qint32 socket_timeout) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(endpoint_uri);
    Q_UNUSED(connection_timeout);
    Q_UNUSED(socket_timeout);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqDtmReactorImplServiceWebServiceImplInfo res;
        reqObj->comAdobeCqDtmReactorImplServiceWebServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqExperiencelogImplExperienceLogConfigServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enabled, QList<QString> disabled_for_groups) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enabled);
    Q_UNUSED(disabled_for_groups);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqExperiencelogImplExperienceLogConfigServletInfo res;
        reqObj->comAdobeCqExperiencelogImplExperienceLogConfigServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqHcContentPackagesHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString hc_name, QList<QString> hc_tags, QString hc_mbean_name, QList<QString> package_names) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_name);
    Q_UNUSED(hc_tags);
    Q_UNUSED(hc_mbean_name);
    Q_UNUSED(package_names);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqHcContentPackagesHealthCheckInfo res;
        reqObj->comAdobeCqHcContentPackagesHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqHistoryImplHistoryRequestFilter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> history_request_filter_excluded_selectors, QList<QString> history_request_filter_excluded_extensions) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(history_request_filter_excluded_selectors);
    Q_UNUSED(history_request_filter_excluded_extensions);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqHistoryImplHistoryRequestFilterInfo res;
        reqObj->comAdobeCqHistoryImplHistoryRequestFilterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqHistoryImplHistoryServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> history_service_resource_types, QList<QString> history_service_path_filter) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(history_service_resource_types);
    Q_UNUSED(history_service_path_filter);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqHistoryImplHistoryServiceImplInfo res;
        reqObj->comAdobeCqHistoryImplHistoryServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqInboxImplTypeproviderItemTypeProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> inbox_impl_typeprovider_registrypaths, QList<QString> inbox_impl_typeprovider_legacypaths, QString inbox_impl_typeprovider_defaulturl_failureitem, QString inbox_impl_typeprovider_defaulturl_workitem, QString inbox_impl_typeprovider_defaulturl_task) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(inbox_impl_typeprovider_registrypaths);
    Q_UNUSED(inbox_impl_typeprovider_legacypaths);
    Q_UNUSED(inbox_impl_typeprovider_defaulturl_failureitem);
    Q_UNUSED(inbox_impl_typeprovider_defaulturl_workitem);
    Q_UNUSED(inbox_impl_typeprovider_defaulturl_task);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqInboxImplTypeproviderItemTypeProviderInfo res;
        reqObj->comAdobeCqInboxImplTypeproviderItemTypeProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqProjectsImplServletProjectImageServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString image_quality, QString image_supported_resolutions) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(image_quality);
    Q_UNUSED(image_supported_resolutions);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqProjectsImplServletProjectImageServletInfo res;
        reqObj->comAdobeCqProjectsImplServletProjectImageServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqProjectsPurgeScheduler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString scheduledpurge_name, bool scheduledpurge_purge_active, QList<QString> scheduledpurge_templates, bool scheduledpurge_purge_groups, bool scheduledpurge_purge_assets, bool scheduledpurge_terminate_running_workflows, qint32 scheduledpurge_daysold, qint32 scheduledpurge_save_threshold) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(scheduledpurge_name);
    Q_UNUSED(scheduledpurge_purge_active);
    Q_UNUSED(scheduledpurge_templates);
    Q_UNUSED(scheduledpurge_purge_groups);
    Q_UNUSED(scheduledpurge_purge_assets);
    Q_UNUSED(scheduledpurge_terminate_running_workflows);
    Q_UNUSED(scheduledpurge_daysold);
    Q_UNUSED(scheduledpurge_save_threshold);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqProjectsPurgeSchedulerInfo res;
        reqObj->comAdobeCqProjectsPurgeSchedulerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqScheduledExporterImplScheduledExporterImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> include_paths, QString exporter_user) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(include_paths);
    Q_UNUSED(exporter_user);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqScheduledExporterImplScheduledExporterImplInfo res;
        reqObj->comAdobeCqScheduledExporterImplScheduledExporterImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString com_adobe_cq_screens_analytics_impl_url, QString com_adobe_cq_screens_analytics_impl_apikey, QString com_adobe_cq_screens_analytics_impl_project, QString com_adobe_cq_screens_analytics_impl_environment, qint32 com_adobe_cq_screens_analytics_impl_send_frequency) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(com_adobe_cq_screens_analytics_impl_url);
    Q_UNUSED(com_adobe_cq_screens_analytics_impl_apikey);
    Q_UNUSED(com_adobe_cq_screens_analytics_impl_project);
    Q_UNUSED(com_adobe_cq_screens_analytics_impl_environment);
    Q_UNUSED(com_adobe_cq_screens_analytics_impl_send_frequency);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo res;
        reqObj->comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqScreensDeviceImplDeviceService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 com_adobe_aem_screens_player_pingfrequency, QString com_adobe_aem_screens_device_pasword_specialchars, qint32 com_adobe_aem_screens_device_pasword_minlowercasechars, qint32 com_adobe_aem_screens_device_pasword_minuppercasechars, qint32 com_adobe_aem_screens_device_pasword_minnumberchars, qint32 com_adobe_aem_screens_device_pasword_minspecialchars, qint32 com_adobe_aem_screens_device_pasword_minlength) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(com_adobe_aem_screens_player_pingfrequency);
    Q_UNUSED(com_adobe_aem_screens_device_pasword_specialchars);
    Q_UNUSED(com_adobe_aem_screens_device_pasword_minlowercasechars);
    Q_UNUSED(com_adobe_aem_screens_device_pasword_minuppercasechars);
    Q_UNUSED(com_adobe_aem_screens_device_pasword_minnumberchars);
    Q_UNUSED(com_adobe_aem_screens_device_pasword_minspecialchars);
    Q_UNUSED(com_adobe_aem_screens_device_pasword_minlength);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqScreensDeviceImplDeviceServiceInfo res;
        reqObj->comAdobeCqScreensDeviceImplDeviceServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 device_registration_timeout) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(device_registration_timeout);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo res;
        reqObj->comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqScreensImplHandlerChannelsUpdateHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_pagesupdatehandler_imageresourcetypes, QList<QString> cq_pagesupdatehandler_productresourcetypes, QList<QString> cq_pagesupdatehandler_videoresourcetypes, QList<QString> cq_pagesupdatehandler_dynamicsequenceresourcetypes, QList<QString> cq_pagesupdatehandler_previewmodepaths) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_pagesupdatehandler_imageresourcetypes);
    Q_UNUSED(cq_pagesupdatehandler_productresourcetypes);
    Q_UNUSED(cq_pagesupdatehandler_videoresourcetypes);
    Q_UNUSED(cq_pagesupdatehandler_dynamicsequenceresourcetypes);
    Q_UNUSED(cq_pagesupdatehandler_previewmodepaths);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo res;
        reqObj->comAdobeCqScreensImplHandlerChannelsUpdateHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString scheduler_expression) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(scheduler_expression);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo res;
        reqObj->comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 com_adobe_aem_screens_impl_remote_request_timeout) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(com_adobe_aem_screens_impl_remote_request_timeout);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo res;
        reqObj->comAdobeCqScreensImplRemoteImplDistributedHttpClientImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqScreensImplScreensChannelPostProcessor(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> screens_channels_properties_to_remove) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(screens_channels_properties_to_remove);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqScreensImplScreensChannelPostProcessorInfo res;
        reqObj->comAdobeCqScreensImplScreensChannelPostProcessorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path, QString com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency, qint32 com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout, QString com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients, QString com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver, qint32 com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport, bool com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls, QString com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username, QString com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path);
    Q_UNUSED(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency);
    Q_UNUSED(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout);
    Q_UNUSED(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients);
    Q_UNUSED(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver);
    Q_UNUSED(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport);
    Q_UNUSED(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls);
    Q_UNUSED(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username);
    Q_UNUSED(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo res;
        reqObj->comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqScreensMqActivemqImplArtemisJMSProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, qint32 global_size, qint32 max_disk_usage, bool persistence_enabled, qint32 thread_pool_max_size, qint32 scheduled_thread_pool_max_size, qint32 graceful_shutdown_timeout, QList<QString> queues, QList<QString> topics, qint32 addresses_max_delivery_attempts, qint32 addresses_expiry_delay, QString addresses_address_full_message_policy, qint32 addresses_max_size_bytes, qint32 addresses_page_size_bytes, qint32 addresses_page_cache_max_size, QString cluster_user, QString cluster_password, qint32 cluster_call_timeout, qint32 cluster_call_failover_timeout, qint32 cluster_client_failure_check_period, qint32 cluster_notification_attempts, qint32 cluster_notification_interval, qint32 id_cache_size, qint32 cluster_confirmation_window_size, qint32 cluster_connection_ttl, bool cluster_duplicate_detection, qint32 cluster_initial_connect_attempts, qint32 cluster_max_retry_interval, qint32 cluster_min_large_message_size, qint32 cluster_producer_window_size, qint32 cluster_reconnect_attempts, qint32 cluster_retry_interval, OAINumber cluster_retry_interval_multiplier) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(global_size);
    Q_UNUSED(max_disk_usage);
    Q_UNUSED(persistence_enabled);
    Q_UNUSED(thread_pool_max_size);
    Q_UNUSED(scheduled_thread_pool_max_size);
    Q_UNUSED(graceful_shutdown_timeout);
    Q_UNUSED(queues);
    Q_UNUSED(topics);
    Q_UNUSED(addresses_max_delivery_attempts);
    Q_UNUSED(addresses_expiry_delay);
    Q_UNUSED(addresses_address_full_message_policy);
    Q_UNUSED(addresses_max_size_bytes);
    Q_UNUSED(addresses_page_size_bytes);
    Q_UNUSED(addresses_page_cache_max_size);
    Q_UNUSED(cluster_user);
    Q_UNUSED(cluster_password);
    Q_UNUSED(cluster_call_timeout);
    Q_UNUSED(cluster_call_failover_timeout);
    Q_UNUSED(cluster_client_failure_check_period);
    Q_UNUSED(cluster_notification_attempts);
    Q_UNUSED(cluster_notification_interval);
    Q_UNUSED(id_cache_size);
    Q_UNUSED(cluster_confirmation_window_size);
    Q_UNUSED(cluster_connection_ttl);
    Q_UNUSED(cluster_duplicate_detection);
    Q_UNUSED(cluster_initial_connect_attempts);
    Q_UNUSED(cluster_max_retry_interval);
    Q_UNUSED(cluster_min_large_message_size);
    Q_UNUSED(cluster_producer_window_size);
    Q_UNUSED(cluster_reconnect_attempts);
    Q_UNUSED(cluster_retry_interval);
    Q_UNUSED(cluster_retry_interval_multiplier);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo res;
        reqObj->comAdobeCqScreensMqActivemqImplArtemisJMSProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_project_path, QString com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_schedule_frequency) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_project_path);
    Q_UNUSED(com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_schedule_frequency);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo res;
        reqObj->comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool disable_smart_sync) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(disable_smart_sync);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo res;
        reqObj->comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enable_data_triggered_content) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enable_data_triggered_content);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo res;
        reqObj->comAdobeCqScreensSegmentationImplSegmentationFeatureFlagResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo res;
        reqObj->comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo res;
        reqObj->comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags, QString dispatcher_address, QList<QString> dispatcher_filter_allowed, QList<QString> dispatcher_filter_blocked) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    Q_UNUSED(dispatcher_address);
    Q_UNUSED(dispatcher_filter_allowed);
    Q_UNUSED(dispatcher_filter_blocked);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo res;
        reqObj->comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo res;
        reqObj->comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags, QString webserver_address) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    Q_UNUSED(webserver_address);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo res;
        reqObj->comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialAccountverificationImplAccountManagementConfigIm(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enable, qint32 ttl1, qint32 ttl2) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enable);
    Q_UNUSED(ttl1);
    Q_UNUSED(ttl2);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo res;
        reqObj->comAdobeCqSocialAccountverificationImplAccountManagementConfigImResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 priority) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(priority);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo res;
        reqObj->comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 priority) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(priority);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo res;
        reqObj->comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString event_topics, QString event_filter) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(event_topics);
    Q_UNUSED(event_filter);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo res;
        reqObj->comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialActivitystreamsListenerImplModerationEventExten(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool accepted, qint32 ranked) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(accepted);
    Q_UNUSED(ranked);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo res;
        reqObj->comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 ranking, bool enable) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(ranking);
    Q_UNUSED(enable);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo res;
        reqObj->comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString stream_path, QString stream_name) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(stream_path);
    Q_UNUSED(stream_name);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo res;
        reqObj->comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 max_retry, QList<QString> field_whitelist, QList<QString> attachment_type_blacklist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(max_retry);
    Q_UNUSED(field_whitelist);
    Q_UNUSED(attachment_type_blacklist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo res;
        reqObj->comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString attachment_type_blacklist, qint32 extension_order) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(attachment_type_blacklist);
    Q_UNUSED(extension_order);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo res;
        reqObj->comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCalendarServletsTimeZoneServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 timezones_expirytime) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(timezones_expirytime);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCalendarServletsTimeZoneServletInfo res;
        reqObj->comAdobeCqSocialCalendarServletsTimeZoneServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 ranking) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(ranking);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo res;
        reqObj->comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> field_whitelist, QList<QString> attachment_type_blacklist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(field_whitelist);
    Q_UNUSED(attachment_type_blacklist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo res;
        reqObj->comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> field_whitelist, QList<QString> attachment_type_blacklist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(field_whitelist);
    Q_UNUSED(attachment_type_blacklist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo res;
        reqObj->comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 num_user_limit) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(num_user_limit);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo res;
        reqObj->comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enable_scheduled_posts_search, qint32 number_of_minutes, qint32 max_search_limit) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enable_scheduled_posts_search);
    Q_UNUSED(number_of_minutes);
    Q_UNUSED(max_search_limit);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo res;
        reqObj->comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cors_enabling) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cors_enabling);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo res;
        reqObj->comAdobeCqSocialCommonsCorsCORSAuthenticationFilterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 priority_order, QList<QString> reply_email_patterns) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(priority_order);
    Q_UNUSED(reply_email_patterns);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo res;
        reqObj->comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString context_path) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(context_path);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo res;
        reqObj->comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString event_topics) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(event_topics);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo res;
        reqObj->comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 priority_order, QList<QString> reply_email_patterns) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(priority_order);
    Q_UNUSED(reply_email_patterns);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo res;
        reqObj->comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString pattern_time, QString pattern_newline, QString pattern_day_of_month, QString pattern_month, QString pattern_year, QString pattern_date, QString pattern_date_time, QString pattern_email) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(pattern_time);
    Q_UNUSED(pattern_newline);
    Q_UNUSED(pattern_day_of_month);
    Q_UNUSED(pattern_month);
    Q_UNUSED(pattern_year);
    Q_UNUSED(pattern_date);
    Q_UNUSED(pattern_date_time);
    Q_UNUSED(pattern_email);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo res;
        reqObj->comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString email_name, bool email_create_post_from_reply, QString email_add_comment_id_to, qint32 email_subject_maximum_length, QString email_reply_to_address, QString email_reply_to_delimiter, QString email_tracker_id_prefix_in_subject, QString email_tracker_id_prefix_in_body, bool email_as_html, QString email_default_user_name, QString email_templates_root_path) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(email_name);
    Q_UNUSED(email_create_post_from_reply);
    Q_UNUSED(email_add_comment_id_to);
    Q_UNUSED(email_subject_maximum_length);
    Q_UNUSED(email_reply_to_address);
    Q_UNUSED(email_reply_to_delimiter);
    Q_UNUSED(email_tracker_id_prefix_in_subject);
    Q_UNUSED(email_tracker_id_prefix_in_body);
    Q_UNUSED(email_as_html);
    Q_UNUSED(email_default_user_name);
    Q_UNUSED(email_templates_root_path);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo res;
        reqObj->comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString connect_protocol) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(connect_protocol);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo res;
        reqObj->comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 priority_order, QList<QString> reply_email_patterns) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(priority_order);
    Q_UNUSED(reply_email_patterns);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo res;
        reqObj->comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 priority_order, QList<QString> reply_email_patterns) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(priority_order);
    Q_UNUSED(reply_email_patterns);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo res;
        reqObj->comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 priority_order, QList<QString> reply_email_patterns) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(priority_order);
    Q_UNUSED(reply_email_patterns);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo res;
        reqObj->comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 priority_order, QList<QString> reply_email_patterns) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(priority_order);
    Q_UNUSED(reply_email_patterns);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo res;
        reqObj->comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> reply_email_patterns, qint32 priority_order) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(reply_email_patterns);
    Q_UNUSED(priority_order);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo res;
        reqObj->comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 priority_order, QList<QString> reply_email_patterns) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(priority_order);
    Q_UNUSED(reply_email_patterns);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo res;
        reqObj->comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 number_of_days, qint32 age_of_file) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(number_of_days);
    Q_UNUSED(age_of_file);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo res;
        reqObj->comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString event_topics, QString event_filter, QList<QString> verbs) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(event_topics);
    Q_UNUSED(event_filter);
    Q_UNUSED(verbs);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo res;
        reqObj->comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enable, qint32 ugc_limit, qint32 ugc_limit_duration, QList<QString> domains, QList<QString> to_list) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enable);
    Q_UNUSED(ugc_limit);
    Q_UNUSED(ugc_limit_duration);
    Q_UNUSED(domains);
    Q_UNUSED(to_list);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo res;
        reqObj->comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialConnectOauthImplFacebookProviderImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString oauth_provider_id, QString oauth_cloud_config_root, QString provider_config_root, bool provider_config_create_tags_enabled, QString provider_config_user_folder, bool provider_config_facebook_fetch_fields, QList<QString> provider_config_facebook_fields, bool provider_config_refresh_userdata_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(oauth_provider_id);
    Q_UNUSED(oauth_cloud_config_root);
    Q_UNUSED(provider_config_root);
    Q_UNUSED(provider_config_create_tags_enabled);
    Q_UNUSED(provider_config_user_folder);
    Q_UNUSED(provider_config_facebook_fetch_fields);
    Q_UNUSED(provider_config_facebook_fields);
    Q_UNUSED(provider_config_refresh_userdata_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo res;
        reqObj->comAdobeCqSocialConnectOauthImplFacebookProviderImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> path, qint32 service_ranking) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(path);
    Q_UNUSED(service_ranking);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo res;
        reqObj->comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> facebook, QList<QString> twitter, QString provider_config_user_folder) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(facebook);
    Q_UNUSED(twitter);
    Q_UNUSED(provider_config_user_folder);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo res;
        reqObj->comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialConnectOauthImplTwitterProviderImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString oauth_provider_id, QString oauth_cloud_config_root, QString provider_config_root, QString provider_config_user_folder, bool provider_config_twitter_enable_params, QList<QString> provider_config_twitter_params, bool provider_config_refresh_userdata_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(oauth_provider_id);
    Q_UNUSED(oauth_cloud_config_root);
    Q_UNUSED(provider_config_root);
    Q_UNUSED(provider_config_user_folder);
    Q_UNUSED(provider_config_twitter_enable_params);
    Q_UNUSED(provider_config_twitter_params);
    Q_UNUSED(provider_config_refresh_userdata_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo res;
        reqObj->comAdobeCqSocialConnectOauthImplTwitterProviderImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_social_content_fragments_services_enabled, qint32 cq_social_content_fragments_services_wait_time_seconds) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_social_content_fragments_services_enabled);
    Q_UNUSED(cq_social_content_fragments_services_wait_time_seconds);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo res;
        reqObj->comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString version_id, bool cache_on, qint32 concurrency_level, qint32 cache_start_size, qint32 cache_ttl, qint32 cache_size, qint32 time_limit) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(version_id);
    Q_UNUSED(cache_on);
    Q_UNUSED(concurrency_level);
    Q_UNUSED(cache_start_size);
    Q_UNUSED(cache_ttl);
    Q_UNUSED(cache_size);
    Q_UNUSED(time_limit);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo res;
        reqObj->comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString solr_zk_timeout, QString solr_commit, bool cache_on, qint32 concurrency_level, qint32 cache_start_size, qint32 cache_ttl, qint32 cache_size) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(solr_zk_timeout);
    Q_UNUSED(solr_commit);
    Q_UNUSED(cache_on);
    Q_UNUSED(concurrency_level);
    Q_UNUSED(cache_start_size);
    Q_UNUSED(cache_ttl);
    Q_UNUSED(cache_size);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo res;
        reqObj->comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString solr_zk_timeout, QString solr_commit, bool cache_on, qint32 concurrency_level, qint32 cache_start_size, qint32 cache_ttl, qint32 cache_size) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(solr_zk_timeout);
    Q_UNUSED(solr_commit);
    Q_UNUSED(cache_on);
    Q_UNUSED(concurrency_level);
    Q_UNUSED(cache_start_size);
    Q_UNUSED(cache_ttl);
    Q_UNUSED(cache_size);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo res;
        reqObj->comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool is_member_check) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(is_member_check);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo res;
        reqObj->comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool is_member_check) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(is_member_check);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo res;
        reqObj->comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> field_whitelist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(field_whitelist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo res;
        reqObj->comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> field_whitelist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(field_whitelist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo res;
        reqObj->comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo res;
        reqObj->comAdobeCqSocialEnablementServicesImplAuthorMarkerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString sling_servlet_selectors, QString sling_servlet_extensions) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sling_servlet_selectors);
    Q_UNUSED(sling_servlet_extensions);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo res;
        reqObj->comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> field_whitelist, QList<QString> attachment_type_blacklist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(field_whitelist);
    Q_UNUSED(attachment_type_blacklist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo res;
        reqObj->comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialForumClientEndpointsImplForumOperationsService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> field_whitelist, QList<QString> attachment_type_blacklist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(field_whitelist);
    Q_UNUSED(attachment_type_blacklist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo res;
        reqObj->comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialForumDispatcherImplFlushOperations(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 extension_order, bool flush_forumontopic) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(extension_order);
    Q_UNUSED(flush_forumontopic);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialForumDispatcherImplFlushOperationsInfo res;
        reqObj->comAdobeCqSocialForumDispatcherImplFlushOperationsResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool group_listing_pagination_enable, bool group_listing_lazyloading_enable, qint32 page_size, qint32 priority) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(group_listing_pagination_enable);
    Q_UNUSED(group_listing_lazyloading_enable);
    Q_UNUSED(page_size);
    Q_UNUSED(priority);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo res;
        reqObj->comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialGroupImplGroupServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 max_wait_time, qint32 min_wait_between_retries) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(max_wait_time);
    Q_UNUSED(min_wait_between_retries);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialGroupImplGroupServiceImplInfo res;
        reqObj->comAdobeCqSocialGroupImplGroupServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool parameter_guava_cache_enabled, QString parameter_guava_cache_params, bool parameter_guava_cache_reload, qint32 service_ranking) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(parameter_guava_cache_enabled);
    Q_UNUSED(parameter_guava_cache_params);
    Q_UNUSED(parameter_guava_cache_reload);
    Q_UNUSED(service_ranking);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo res;
        reqObj->comAdobeCqSocialHandlebarsGuavaTemplateCacheImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> field_whitelist, QList<QString> attachment_type_blacklist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(field_whitelist);
    Q_UNUSED(attachment_type_blacklist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo res;
        reqObj->comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> field_whitelist, QList<QString> attachment_type_blacklist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(field_whitelist);
    Q_UNUSED(attachment_type_blacklist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo res;
        reqObj->comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> field_whitelist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(field_whitelist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo res;
        reqObj->comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> field_whitelist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(field_whitelist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo res;
        reqObj->comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 everyone_limit, qint32 priority) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(everyone_limit);
    Q_UNUSED(priority);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo res;
        reqObj->comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> message_properties, qint32 message_box_size_limit, qint32 message_count_limit, bool notify_failure, QString failure_message_from, QString failure_template_path, qint32 max_retries, qint32 min_wait_between_retries, qint32 count_update_pool_size, QString inbox_path, QString sentitems_path, bool support_attachments, bool support_group_messaging, qint32 max_total_recipients, qint32 batch_size, qint32 max_total_attachment_size, QList<QString> attachment_type_blacklist, QList<QString> allowed_attachment_types, QString service_selector, QList<QString> field_whitelist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(message_properties);
    Q_UNUSED(message_box_size_limit);
    Q_UNUSED(message_count_limit);
    Q_UNUSED(notify_failure);
    Q_UNUSED(failure_message_from);
    Q_UNUSED(failure_template_path);
    Q_UNUSED(max_retries);
    Q_UNUSED(min_wait_between_retries);
    Q_UNUSED(count_update_pool_size);
    Q_UNUSED(inbox_path);
    Q_UNUSED(sentitems_path);
    Q_UNUSED(support_attachments);
    Q_UNUSED(support_group_messaging);
    Q_UNUSED(max_total_recipients);
    Q_UNUSED(batch_size);
    Q_UNUSED(max_total_attachment_size);
    Q_UNUSED(attachment_type_blacklist);
    Q_UNUSED(allowed_attachment_types);
    Q_UNUSED(service_selector);
    Q_UNUSED(field_whitelist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo res;
        reqObj->comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> resource_type_filters, qint32 priority) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(resource_type_filters);
    Q_UNUSED(priority);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo res;
        reqObj->comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialModerationDashboardApiModerationDashboardSocial(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 priority) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(priority);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo res;
        reqObj->comAdobeCqSocialModerationDashboardApiModerationDashboardSocialResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 priority) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(priority);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo res;
        reqObj->comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> resource_type_filters, qint32 priority) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(resource_type_filters);
    Q_UNUSED(priority);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo res;
        reqObj->comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialNotificationsImplMentionsRouter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString event_topics, QString event_filter) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(event_topics);
    Q_UNUSED(event_filter);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialNotificationsImplMentionsRouterInfo res;
        reqObj->comAdobeCqSocialNotificationsImplMentionsRouterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialNotificationsImplNotificationManagerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 max_unread_notification_count) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(max_unread_notification_count);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialNotificationsImplNotificationManagerImplInfo res;
        reqObj->comAdobeCqSocialNotificationsImplNotificationManagerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialNotificationsImplNotificationsRouter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString event_topics, QString event_filter) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(event_topics);
    Q_UNUSED(event_filter);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialNotificationsImplNotificationsRouterInfo res;
        reqObj->comAdobeCqSocialNotificationsImplNotificationsRouterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> field_whitelist, QList<QString> attachment_type_blacklist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(field_whitelist);
    Q_UNUSED(attachment_type_blacklist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo res;
        reqObj->comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 cq_social_reporting_analytics_polling_importer_interval, qint32 cq_social_reporting_analytics_polling_importer_page_size) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_social_reporting_analytics_polling_importer_interval);
    Q_UNUSED(cq_social_reporting_analytics_polling_importer_page_size);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo res;
        reqObj->comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 report_fetch_delay) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(report_fetch_delay);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo res;
        reqObj->comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_social_console_analytics_sites_mapping, qint32 priority) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_social_console_analytics_sites_mapping);
    Q_UNUSED(priority);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo res;
        reqObj->comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> field_whitelist, QList<QString> attachment_type_blacklist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(field_whitelist);
    Q_UNUSED(attachment_type_blacklist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo res;
        reqObj->comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString sling_servlet_selectors, QString sling_servlet_extensions) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sling_servlet_selectors);
    Q_UNUSED(sling_servlet_extensions);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo res;
        reqObj->comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> sling_servlet_selectors, QString sling_servlet_extensions) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sling_servlet_selectors);
    Q_UNUSED(sling_servlet_extensions);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo res;
        reqObj->comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialScoringImplScoringEventListener(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString event_topics, QString event_filter) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(event_topics);
    Q_UNUSED(event_filter);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialScoringImplScoringEventListenerInfo res;
        reqObj->comAdobeCqSocialScoringImplScoringEventListenerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enable_fallback) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enable_fallback);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo res;
        reqObj->comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialSiteEndpointsImplSiteOperationService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> field_whitelist, QList<QString> site_path_filters, QString site_package_group) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(field_whitelist);
    Q_UNUSED(site_path_filters);
    Q_UNUSED(site_package_group);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo res;
        reqObj->comAdobeCqSocialSiteEndpointsImplSiteOperationServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_social_console_analytics_components) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_social_console_analytics_components);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo res;
        reqObj->comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialSiteImplSiteConfiguratorImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> components_using_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(components_using_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialSiteImplSiteConfiguratorImplInfo res;
        reqObj->comAdobeCqSocialSiteImplSiteConfiguratorImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialSrpImplSocialSolrConnector(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString srp_type) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(srp_type);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialSrpImplSocialSolrConnectorInfo res;
        reqObj->comAdobeCqSocialSrpImplSocialSolrConnectorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialSyncImplDiffChangesObserver(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enabled, QString agent_name, QString diff_path, QString property_names) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enabled);
    Q_UNUSED(agent_name);
    Q_UNUSED(diff_path);
    Q_UNUSED(property_names);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialSyncImplDiffChangesObserverInfo res;
        reqObj->comAdobeCqSocialSyncImplDiffChangesObserverResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialSyncImplGroupSyncListenerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> nodetypes, QList<QString> ignorableprops, QString ignorablenodes, bool enabled, QString distfolders) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(nodetypes);
    Q_UNUSED(ignorableprops);
    Q_UNUSED(ignorablenodes);
    Q_UNUSED(enabled);
    Q_UNUSED(distfolders);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialSyncImplGroupSyncListenerImplInfo res;
        reqObj->comAdobeCqSocialSyncImplGroupSyncListenerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialSyncImplPublisherSyncServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> active_run_modes) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(active_run_modes);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo res;
        reqObj->comAdobeCqSocialSyncImplPublisherSyncServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialSyncImplUserSyncListenerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> nodetypes, QList<QString> ignorableprops, QList<QString> ignorablenodes, bool enabled, QList<QString> distfolders) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(nodetypes);
    Q_UNUSED(ignorableprops);
    Q_UNUSED(ignorablenodes);
    Q_UNUSED(enabled);
    Q_UNUSED(distfolders);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialSyncImplUserSyncListenerImplInfo res;
        reqObj->comAdobeCqSocialSyncImplUserSyncListenerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialTranslationImplTranslationServiceConfigManager(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString translate_language, QString translate_display, bool translate_attribution, QString translate_caching, QString translate_smart_rendering, QString translate_caching_duration, QString translate_session_save_interval, QString translate_session_save_batch_limit) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(translate_language);
    Q_UNUSED(translate_display);
    Q_UNUSED(translate_attribution);
    Q_UNUSED(translate_caching);
    Q_UNUSED(translate_smart_rendering);
    Q_UNUSED(translate_caching_duration);
    Q_UNUSED(translate_session_save_interval);
    Q_UNUSED(translate_session_save_batch_limit);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo res;
        reqObj->comAdobeCqSocialTranslationImplTranslationServiceConfigManagerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialTranslationImplUGCLanguageDetector(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString event_topics, QString event_filter, QList<QString> translate_listener_type, QList<QString> translate_property_list, qint32 pool_size, qint32 max_pool_size, qint32 queue_size, qint32 keep_alive_time) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(event_topics);
    Q_UNUSED(event_filter);
    Q_UNUSED(translate_listener_type);
    Q_UNUSED(translate_property_list);
    Q_UNUSED(pool_size);
    Q_UNUSED(max_pool_size);
    Q_UNUSED(queue_size);
    Q_UNUSED(keep_alive_time);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo res;
        reqObj->comAdobeCqSocialTranslationImplUGCLanguageDetectorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 thread_pool_size, qint32 delay_time, qint32 worker_sleep_time) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(thread_pool_size);
    Q_UNUSED(delay_time);
    Q_UNUSED(worker_sleep_time);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo res;
        reqObj->comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 pool_size, qint32 max_pool_size, qint32 queue_size, qint32 keep_alive_time) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(pool_size);
    Q_UNUSED(max_pool_size);
    Q_UNUSED(queue_size);
    Q_UNUSED(keep_alive_time);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo res;
        reqObj->comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool is_primary_publisher) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(is_primary_publisher);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo res;
        reqObj->comAdobeCqSocialUgcbaseImplPublisherConfigurationImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialUgcbaseImplSocialUtilsImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool legacy_cloud_ugc_path_mapping) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(legacy_cloud_ugc_path_mapping);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo res;
        reqObj->comAdobeCqSocialUgcbaseImplSocialUtilsImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> automoderation_sequence, bool automoderation_onfailurestop) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(automoderation_sequence);
    Q_UNUSED(automoderation_onfailurestop);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo res;
        reqObj->comAdobeCqSocialUgcbaseModerationImplAutoModerationImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialUgcbaseModerationImplSentimentProcess(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> watchwords_positive, QList<QString> watchwords_negative, QString watchwords_path, QString sentiment_path) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(watchwords_positive);
    Q_UNUSED(watchwords_negative);
    Q_UNUSED(watchwords_path);
    Q_UNUSED(sentiment_path);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo res;
        reqObj->comAdobeCqSocialUgcbaseModerationImplSentimentProcessResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> default_attachment_type_blacklist, QList<QString> baseline_attachment_type_blacklist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(default_attachment_type_blacklist);
    Q_UNUSED(baseline_attachment_type_blacklist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo res;
        reqObj->comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> parameter_whitelist, QList<QString> parameter_whitelist_prefixes, QList<QString> binary_parameter_whitelist, QList<QString> modifier_whitelist, QList<QString> operation_whitelist, QList<QString> operation_whitelist_prefixes, QList<QString> typehint_whitelist, QList<QString> resourcetype_whitelist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(parameter_whitelist);
    Q_UNUSED(parameter_whitelist_prefixes);
    Q_UNUSED(binary_parameter_whitelist);
    Q_UNUSED(modifier_whitelist);
    Q_UNUSED(operation_whitelist);
    Q_UNUSED(operation_whitelist_prefixes);
    Q_UNUSED(typehint_whitelist);
    Q_UNUSED(resourcetype_whitelist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo res;
        reqObj->comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString sling_servlet_extensions, QString sling_servlet_paths, QString sling_servlet_methods) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sling_servlet_extensions);
    Q_UNUSED(sling_servlet_paths);
    Q_UNUSED(sling_servlet_methods);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo res;
        reqObj->comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqSocialUserImplTransportHttpToPublisher(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enable, QList<QString> agent_configuration, QString context_path, QList<QString> disabled_cipher_suites, QList<QString> enabled_cipher_suites) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enable);
    Q_UNUSED(agent_configuration);
    Q_UNUSED(context_path);
    Q_UNUSED(disabled_cipher_suites);
    Q_UNUSED(enabled_cipher_suites);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqSocialUserImplTransportHttpToPublisherInfo res;
        reqObj->comAdobeCqSocialUserImplTransportHttpToPublisherResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> resource_types) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(resource_types);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo res;
        reqObj->comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> delete_path_regexps, QString delete_sql2_query) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(delete_path_regexps);
    Q_UNUSED(delete_sql2_query);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo res;
        reqObj->comAdobeCqUpgradesCleanupImplUpgradeContentCleanupResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> delete_name_regexps) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(delete_name_regexps);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo res;
        reqObj->comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 threshold, QString job_topic_name, bool email_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(threshold);
    Q_UNUSED(job_topic_name);
    Q_UNUSED(email_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo res;
        reqObj->comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString scheduler_expression, qint32 job_purge_threshold, qint32 job_purge_max_jobs) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(scheduler_expression);
    Q_UNUSED(job_purge_threshold);
    Q_UNUSED(job_purge_max_jobs);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo res;
        reqObj->comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 threshold, QString job_topic_name, bool email_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(threshold);
    Q_UNUSED(job_topic_name);
    Q_UNUSED(email_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo res;
        reqObj->comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 threshold, QString job_topic_name, bool email_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(threshold);
    Q_UNUSED(job_topic_name);
    Q_UNUSED(email_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo res;
        reqObj->comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqWcmLaunchesImplLaunchesEventHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString event_filter, qint32 launches_eventhandler_threadpool_maxsize, QString launches_eventhandler_threadpool_priority, bool launches_eventhandler_updatelastmodification) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(event_filter);
    Q_UNUSED(launches_eventhandler_threadpool_maxsize);
    Q_UNUSED(launches_eventhandler_threadpool_priority);
    Q_UNUSED(launches_eventhandler_updatelastmodification);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo res;
        reqObj->comAdobeCqWcmLaunchesImplLaunchesEventHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_wcm_qrcode_servlet_whitelist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_wcm_qrcode_servlet_whitelist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo res;
        reqObj->comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 size) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(size);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo res;
        reqObj->comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString sync_translation_state_scheduling_format, QString scheduling_repeat_translation_scheduling_format, QString sync_translation_state_lock_timeout_in_minutes, QString export_format) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sync_translation_state_scheduling_format);
    Q_UNUSED(scheduling_repeat_translation_scheduling_format);
    Q_UNUSED(sync_translation_state_lock_timeout_in_minutes);
    Q_UNUSED(export_format);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo res;
        reqObj->comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> portal_outboxes, QString draft_data_service, QString draft_metadata_service, QString submit_data_service, QString submit_metadata_service, QString pending_sign_data_service, QString pending_sign_metadata_service) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(portal_outboxes);
    Q_UNUSED(draft_data_service);
    Q_UNUSED(draft_metadata_service);
    Q_UNUSED(submit_data_service);
    Q_UNUSED(submit_metadata_service);
    Q_UNUSED(pending_sign_data_service);
    Q_UNUSED(pending_sign_metadata_service);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo res;
        reqObj->comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeFdFpConfigFormsPortalSchedulerService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString formportal_interval) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(formportal_interval);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeFdFpConfigFormsPortalSchedulerServiceInfo res;
        reqObj->comAdobeFdFpConfigFormsPortalSchedulerServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeFormsCommonServiceImplDefaultDataProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> alloweddata_file_locations) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(alloweddata_file_locations);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeFormsCommonServiceImplDefaultDataProviderInfo res;
        reqObj->comAdobeFormsCommonServiceImplDefaultDataProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString temp_storage_config) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(temp_storage_config);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo res;
        reqObj->comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeFormsCommonServletTempCleanUpTask(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString scheduler_expression, QString duration_for_temporary_storage, QString duration_for_anonymous_storage) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(scheduler_expression);
    Q_UNUSED(duration_for_temporary_storage);
    Q_UNUSED(duration_for_anonymous_storage);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeFormsCommonServletTempCleanUpTaskInfo res;
        reqObj->comAdobeFormsCommonServletTempCleanUpTaskResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAcpPlatformPlatformServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 query_limit, QList<QString> file_type_extension_map) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(query_limit);
    Q_UNUSED(file_type_extension_map);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAcpPlatformPlatformServletInfo res;
        reqObj->comAdobeGraniteAcpPlatformPlatformServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteActivitystreamsImplActivityManagerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> aggregate_relationships, bool aggregate_descend_virtual) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(aggregate_relationships);
    Q_UNUSED(aggregate_descend_virtual);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteActivitystreamsImplActivityManagerImplInfo res;
        reqObj->comAdobeGraniteActivitystreamsImplActivityManagerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAnalyzerBaseSystemStatusServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool disabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(disabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAnalyzerBaseSystemStatusServletInfo res;
        reqObj->comAdobeGraniteAnalyzerBaseSystemStatusServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool disabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(disabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo res;
        reqObj->comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteApicontrollerFilterResolverHookFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString com_adobe_cq_cdn_cdn_rewriter, QString com_adobe_cq_cloud_config_components, QString com_adobe_cq_cloud_config_core, QString com_adobe_cq_cloud_config_ui, QString com_adobe_cq_com_adobe_cq_editor, QString com_adobe_cq_com_adobe_cq_projects_core, QString com_adobe_cq_com_adobe_cq_projects_wcm_core, QString com_adobe_cq_com_adobe_cq_ui_commons, QString com_adobe_cq_com_adobe_cq_wcm_style, QString com_adobe_cq_cq_activitymap_integration, QString com_adobe_cq_cq_contexthub_commons, QString com_adobe_cq_cq_dtm, QString com_adobe_cq_cq_healthcheck, QString com_adobe_cq_cq_multisite_targeting, QString com_adobe_cq_cq_pre_upgrade_cleanup, QString com_adobe_cq_cq_product_info_provider, QString com_adobe_cq_cq_rest_sites, QString com_adobe_cq_cq_security_hc, QString com_adobe_cq_dam_cq_dam_svg_handler, QString com_adobe_cq_dam_cq_scene7_imaging, QString com_adobe_cq_dtm_reactor_core, QString com_adobe_cq_dtm_reactor_ui, QString com_adobe_cq_exp_jspel_resolver, QString com_adobe_cq_inbox_cq_inbox, QString com_adobe_cq_json_schema_parser, QString com_adobe_cq_media_cq_media_publishing_dps_fp_core, QString com_adobe_cq_mobile_cq_mobile_caas, QString com_adobe_cq_mobile_cq_mobile_index_builder, QString com_adobe_cq_mobile_cq_mobile_phonegap_build, QString com_adobe_cq_myspell, QString com_adobe_cq_sample_we_retail_core, QString com_adobe_cq_screens_com_adobe_cq_screens_dcc, QString com_adobe_cq_screens_com_adobe_cq_screens_mq_core, QString com_adobe_cq_social_cq_social_as_provider, QString com_adobe_cq_social_cq_social_badging_basic_impl, QString com_adobe_cq_social_cq_social_badging_impl, QString com_adobe_cq_social_cq_social_calendar_impl, QString com_adobe_cq_social_cq_social_content_fragments_impl, QString com_adobe_cq_social_cq_social_enablement_impl, QString com_adobe_cq_social_cq_social_graph_impl, QString com_adobe_cq_social_cq_social_ideation_impl, QString com_adobe_cq_social_cq_social_jcr_provider, QString com_adobe_cq_social_cq_social_members_impl, QString com_adobe_cq_social_cq_social_ms_provider, QString com_adobe_cq_social_cq_social_notifications_channels_web, QString com_adobe_cq_social_cq_social_notifications_impl, QString com_adobe_cq_social_cq_social_rdb_provider, QString com_adobe_cq_social_cq_social_scf_impl, QString com_adobe_cq_social_cq_social_scoring_basic_impl, QString com_adobe_cq_social_cq_social_scoring_impl, QString com_adobe_cq_social_cq_social_serviceusers_impl, QString com_adobe_cq_social_cq_social_srp_impl, QString com_adobe_cq_social_cq_social_ugcbase_impl, QString com_adobe_dam_cq_dam_cfm_impl, QString com_adobe_forms_foundation_forms_foundation_base, QString com_adobe_granite_apicontroller, QString com_adobe_granite_asset_core, QString com_adobe_granite_auth_sso, QString com_adobe_granite_bundles_hc_impl, QString com_adobe_granite_compat_router, QString com_adobe_granite_conf, QString com_adobe_granite_conf_ui_core, QString com_adobe_granite_cors, QString com_adobe_granite_crx_explorer, QString com_adobe_granite_crxde_lite, QString com_adobe_granite_crypto_config, QString com_adobe_granite_crypto_extension, QString com_adobe_granite_crypto_file, QString com_adobe_granite_crypto_jcr, QString com_adobe_granite_csrf, QString com_adobe_granite_distribution_core, QString com_adobe_granite_dropwizard_metrics, QString com_adobe_granite_frags_impl, QString com_adobe_granite_gibson, QString com_adobe_granite_infocollector, QString com_adobe_granite_installer_factory_packages, QString com_adobe_granite_jetty_ssl, QString com_adobe_granite_jobs_async, QString com_adobe_granite_maintenance_oak, QString com_adobe_granite_monitoring_core, QString com_adobe_granite_queries, QString com_adobe_granite_replication_hc_impl, QString com_adobe_granite_repository_checker, QString com_adobe_granite_repository_hc_impl, QString com_adobe_granite_rest_assets, QString com_adobe_granite_security_ui, QString com_adobe_granite_startup, QString com_adobe_granite_tagsoup, QString com_adobe_granite_taskmanagement_core, QString com_adobe_granite_taskmanagement_workflow, QString com_adobe_granite_ui_clientlibs_compiler_less, QString com_adobe_granite_ui_clientlibs_processor_gcc, QString com_adobe_granite_webconsole_plugins, QString com_adobe_granite_workflow_console, QString com_adobe_xmp_worker_files_native_fragment_linux, QString com_adobe_xmp_worker_files_native_fragment_macosx, QString com_adobe_xmp_worker_files_native_fragment_win, QString com_day_commons_osgi_wrapper_simple_jndi, QString com_day_cq_cq_authhandler, QString com_day_cq_cq_compat_configupdate, QString com_day_cq_cq_licensebranding, QString com_day_cq_cq_notifcation_impl, QString com_day_cq_cq_replication_audit, QString com_day_cq_cq_search_ext, QString com_day_cq_dam_cq_dam_annotation_print, QString com_day_cq_dam_cq_dam_asset_usage, QString com_day_cq_dam_cq_dam_s7dam, QString com_day_cq_dam_cq_dam_similaritysearch, QString com_day_cq_dam_dam_webdav_support, QString com_day_cq_pre_upgrade_tasks, QString com_day_cq_replication_extensions, QString com_day_cq_wcm_cq_msm_core, QString com_day_cq_wcm_cq_wcm_translation, QString day_commons_jrawio, QString org_apache_aries_jmx_whiteboard, QString org_apache_felix_http_sslfilter, QString org_apache_felix_org_apache_felix_threaddump, QString org_apache_felix_webconsole_plugins_ds, QString org_apache_felix_webconsole_plugins_event, QString org_apache_felix_webconsole_plugins_memoryusage, QString org_apache_felix_webconsole_plugins_packageadmin, QString org_apache_jackrabbit_oak_auth_ldap, QString org_apache_jackrabbit_oak_segment_tar, QString org_apache_jackrabbit_oak_solr_osgi, QString org_apache_sling_bundleresource_impl, QString org_apache_sling_commons_fsclassloader, QString org_apache_sling_commons_log_webconsole, QString org_apache_sling_datasource, QString org_apache_sling_discovery_base, QString org_apache_sling_discovery_oak, QString org_apache_sling_discovery_support, QString org_apache_sling_distribution_api, QString org_apache_sling_distribution_core, QString org_apache_sling_extensions_webconsolesecurityprovider, QString org_apache_sling_hc_webconsole, QString org_apache_sling_installer_console, QString org_apache_sling_installer_provider_file, QString org_apache_sling_installer_provider_jcr, QString org_apache_sling_jcr_davex, QString org_apache_sling_jcr_resourcesecurity, QString org_apache_sling_jmx_provider, QString org_apache_sling_launchpad_installer, QString org_apache_sling_models_impl, QString org_apache_sling_repoinit_parser, QString org_apache_sling_resource_inventory, QString org_apache_sling_resourceresolver, QString org_apache_sling_scripting_javascript, QString org_apache_sling_scripting_jst, QString org_apache_sling_scripting_sightly_js_provider, QString org_apache_sling_scripting_sightly_models_provider, QString org_apache_sling_security, QString org_apache_sling_servlets_compat, QString org_apache_sling_servlets_get, QString org_apache_sling_startupfilter_disabler, QString org_apache_sling_tracer, QString we_retail_client_app_core) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(com_adobe_cq_cdn_cdn_rewriter);
    Q_UNUSED(com_adobe_cq_cloud_config_components);
    Q_UNUSED(com_adobe_cq_cloud_config_core);
    Q_UNUSED(com_adobe_cq_cloud_config_ui);
    Q_UNUSED(com_adobe_cq_com_adobe_cq_editor);
    Q_UNUSED(com_adobe_cq_com_adobe_cq_projects_core);
    Q_UNUSED(com_adobe_cq_com_adobe_cq_projects_wcm_core);
    Q_UNUSED(com_adobe_cq_com_adobe_cq_ui_commons);
    Q_UNUSED(com_adobe_cq_com_adobe_cq_wcm_style);
    Q_UNUSED(com_adobe_cq_cq_activitymap_integration);
    Q_UNUSED(com_adobe_cq_cq_contexthub_commons);
    Q_UNUSED(com_adobe_cq_cq_dtm);
    Q_UNUSED(com_adobe_cq_cq_healthcheck);
    Q_UNUSED(com_adobe_cq_cq_multisite_targeting);
    Q_UNUSED(com_adobe_cq_cq_pre_upgrade_cleanup);
    Q_UNUSED(com_adobe_cq_cq_product_info_provider);
    Q_UNUSED(com_adobe_cq_cq_rest_sites);
    Q_UNUSED(com_adobe_cq_cq_security_hc);
    Q_UNUSED(com_adobe_cq_dam_cq_dam_svg_handler);
    Q_UNUSED(com_adobe_cq_dam_cq_scene7_imaging);
    Q_UNUSED(com_adobe_cq_dtm_reactor_core);
    Q_UNUSED(com_adobe_cq_dtm_reactor_ui);
    Q_UNUSED(com_adobe_cq_exp_jspel_resolver);
    Q_UNUSED(com_adobe_cq_inbox_cq_inbox);
    Q_UNUSED(com_adobe_cq_json_schema_parser);
    Q_UNUSED(com_adobe_cq_media_cq_media_publishing_dps_fp_core);
    Q_UNUSED(com_adobe_cq_mobile_cq_mobile_caas);
    Q_UNUSED(com_adobe_cq_mobile_cq_mobile_index_builder);
    Q_UNUSED(com_adobe_cq_mobile_cq_mobile_phonegap_build);
    Q_UNUSED(com_adobe_cq_myspell);
    Q_UNUSED(com_adobe_cq_sample_we_retail_core);
    Q_UNUSED(com_adobe_cq_screens_com_adobe_cq_screens_dcc);
    Q_UNUSED(com_adobe_cq_screens_com_adobe_cq_screens_mq_core);
    Q_UNUSED(com_adobe_cq_social_cq_social_as_provider);
    Q_UNUSED(com_adobe_cq_social_cq_social_badging_basic_impl);
    Q_UNUSED(com_adobe_cq_social_cq_social_badging_impl);
    Q_UNUSED(com_adobe_cq_social_cq_social_calendar_impl);
    Q_UNUSED(com_adobe_cq_social_cq_social_content_fragments_impl);
    Q_UNUSED(com_adobe_cq_social_cq_social_enablement_impl);
    Q_UNUSED(com_adobe_cq_social_cq_social_graph_impl);
    Q_UNUSED(com_adobe_cq_social_cq_social_ideation_impl);
    Q_UNUSED(com_adobe_cq_social_cq_social_jcr_provider);
    Q_UNUSED(com_adobe_cq_social_cq_social_members_impl);
    Q_UNUSED(com_adobe_cq_social_cq_social_ms_provider);
    Q_UNUSED(com_adobe_cq_social_cq_social_notifications_channels_web);
    Q_UNUSED(com_adobe_cq_social_cq_social_notifications_impl);
    Q_UNUSED(com_adobe_cq_social_cq_social_rdb_provider);
    Q_UNUSED(com_adobe_cq_social_cq_social_scf_impl);
    Q_UNUSED(com_adobe_cq_social_cq_social_scoring_basic_impl);
    Q_UNUSED(com_adobe_cq_social_cq_social_scoring_impl);
    Q_UNUSED(com_adobe_cq_social_cq_social_serviceusers_impl);
    Q_UNUSED(com_adobe_cq_social_cq_social_srp_impl);
    Q_UNUSED(com_adobe_cq_social_cq_social_ugcbase_impl);
    Q_UNUSED(com_adobe_dam_cq_dam_cfm_impl);
    Q_UNUSED(com_adobe_forms_foundation_forms_foundation_base);
    Q_UNUSED(com_adobe_granite_apicontroller);
    Q_UNUSED(com_adobe_granite_asset_core);
    Q_UNUSED(com_adobe_granite_auth_sso);
    Q_UNUSED(com_adobe_granite_bundles_hc_impl);
    Q_UNUSED(com_adobe_granite_compat_router);
    Q_UNUSED(com_adobe_granite_conf);
    Q_UNUSED(com_adobe_granite_conf_ui_core);
    Q_UNUSED(com_adobe_granite_cors);
    Q_UNUSED(com_adobe_granite_crx_explorer);
    Q_UNUSED(com_adobe_granite_crxde_lite);
    Q_UNUSED(com_adobe_granite_crypto_config);
    Q_UNUSED(com_adobe_granite_crypto_extension);
    Q_UNUSED(com_adobe_granite_crypto_file);
    Q_UNUSED(com_adobe_granite_crypto_jcr);
    Q_UNUSED(com_adobe_granite_csrf);
    Q_UNUSED(com_adobe_granite_distribution_core);
    Q_UNUSED(com_adobe_granite_dropwizard_metrics);
    Q_UNUSED(com_adobe_granite_frags_impl);
    Q_UNUSED(com_adobe_granite_gibson);
    Q_UNUSED(com_adobe_granite_infocollector);
    Q_UNUSED(com_adobe_granite_installer_factory_packages);
    Q_UNUSED(com_adobe_granite_jetty_ssl);
    Q_UNUSED(com_adobe_granite_jobs_async);
    Q_UNUSED(com_adobe_granite_maintenance_oak);
    Q_UNUSED(com_adobe_granite_monitoring_core);
    Q_UNUSED(com_adobe_granite_queries);
    Q_UNUSED(com_adobe_granite_replication_hc_impl);
    Q_UNUSED(com_adobe_granite_repository_checker);
    Q_UNUSED(com_adobe_granite_repository_hc_impl);
    Q_UNUSED(com_adobe_granite_rest_assets);
    Q_UNUSED(com_adobe_granite_security_ui);
    Q_UNUSED(com_adobe_granite_startup);
    Q_UNUSED(com_adobe_granite_tagsoup);
    Q_UNUSED(com_adobe_granite_taskmanagement_core);
    Q_UNUSED(com_adobe_granite_taskmanagement_workflow);
    Q_UNUSED(com_adobe_granite_ui_clientlibs_compiler_less);
    Q_UNUSED(com_adobe_granite_ui_clientlibs_processor_gcc);
    Q_UNUSED(com_adobe_granite_webconsole_plugins);
    Q_UNUSED(com_adobe_granite_workflow_console);
    Q_UNUSED(com_adobe_xmp_worker_files_native_fragment_linux);
    Q_UNUSED(com_adobe_xmp_worker_files_native_fragment_macosx);
    Q_UNUSED(com_adobe_xmp_worker_files_native_fragment_win);
    Q_UNUSED(com_day_commons_osgi_wrapper_simple_jndi);
    Q_UNUSED(com_day_cq_cq_authhandler);
    Q_UNUSED(com_day_cq_cq_compat_configupdate);
    Q_UNUSED(com_day_cq_cq_licensebranding);
    Q_UNUSED(com_day_cq_cq_notifcation_impl);
    Q_UNUSED(com_day_cq_cq_replication_audit);
    Q_UNUSED(com_day_cq_cq_search_ext);
    Q_UNUSED(com_day_cq_dam_cq_dam_annotation_print);
    Q_UNUSED(com_day_cq_dam_cq_dam_asset_usage);
    Q_UNUSED(com_day_cq_dam_cq_dam_s7dam);
    Q_UNUSED(com_day_cq_dam_cq_dam_similaritysearch);
    Q_UNUSED(com_day_cq_dam_dam_webdav_support);
    Q_UNUSED(com_day_cq_pre_upgrade_tasks);
    Q_UNUSED(com_day_cq_replication_extensions);
    Q_UNUSED(com_day_cq_wcm_cq_msm_core);
    Q_UNUSED(com_day_cq_wcm_cq_wcm_translation);
    Q_UNUSED(day_commons_jrawio);
    Q_UNUSED(org_apache_aries_jmx_whiteboard);
    Q_UNUSED(org_apache_felix_http_sslfilter);
    Q_UNUSED(org_apache_felix_org_apache_felix_threaddump);
    Q_UNUSED(org_apache_felix_webconsole_plugins_ds);
    Q_UNUSED(org_apache_felix_webconsole_plugins_event);
    Q_UNUSED(org_apache_felix_webconsole_plugins_memoryusage);
    Q_UNUSED(org_apache_felix_webconsole_plugins_packageadmin);
    Q_UNUSED(org_apache_jackrabbit_oak_auth_ldap);
    Q_UNUSED(org_apache_jackrabbit_oak_segment_tar);
    Q_UNUSED(org_apache_jackrabbit_oak_solr_osgi);
    Q_UNUSED(org_apache_sling_bundleresource_impl);
    Q_UNUSED(org_apache_sling_commons_fsclassloader);
    Q_UNUSED(org_apache_sling_commons_log_webconsole);
    Q_UNUSED(org_apache_sling_datasource);
    Q_UNUSED(org_apache_sling_discovery_base);
    Q_UNUSED(org_apache_sling_discovery_oak);
    Q_UNUSED(org_apache_sling_discovery_support);
    Q_UNUSED(org_apache_sling_distribution_api);
    Q_UNUSED(org_apache_sling_distribution_core);
    Q_UNUSED(org_apache_sling_extensions_webconsolesecurityprovider);
    Q_UNUSED(org_apache_sling_hc_webconsole);
    Q_UNUSED(org_apache_sling_installer_console);
    Q_UNUSED(org_apache_sling_installer_provider_file);
    Q_UNUSED(org_apache_sling_installer_provider_jcr);
    Q_UNUSED(org_apache_sling_jcr_davex);
    Q_UNUSED(org_apache_sling_jcr_resourcesecurity);
    Q_UNUSED(org_apache_sling_jmx_provider);
    Q_UNUSED(org_apache_sling_launchpad_installer);
    Q_UNUSED(org_apache_sling_models_impl);
    Q_UNUSED(org_apache_sling_repoinit_parser);
    Q_UNUSED(org_apache_sling_resource_inventory);
    Q_UNUSED(org_apache_sling_resourceresolver);
    Q_UNUSED(org_apache_sling_scripting_javascript);
    Q_UNUSED(org_apache_sling_scripting_jst);
    Q_UNUSED(org_apache_sling_scripting_sightly_js_provider);
    Q_UNUSED(org_apache_sling_scripting_sightly_models_provider);
    Q_UNUSED(org_apache_sling_security);
    Q_UNUSED(org_apache_sling_servlets_compat);
    Q_UNUSED(org_apache_sling_servlets_get);
    Q_UNUSED(org_apache_sling_startupfilter_disabler);
    Q_UNUSED(org_apache_sling_tracer);
    Q_UNUSED(we_retail_client_app_core);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo res;
        reqObj->comAdobeGraniteApicontrollerFilterResolverHookFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthCertImplClientCertAuthHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString path, qint32 service_ranking) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(path);
    Q_UNUSED(service_ranking);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo res;
        reqObj->comAdobeGraniteAuthCertImplClientCertAuthHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthIms(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString configid, QString scope) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(configid);
    Q_UNUSED(scope);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthImsInfo res;
        reqObj->comAdobeGraniteAuthImsResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString oauth_provider_id) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(oauth_provider_id);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo res;
        reqObj->comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString auth_ims_client_secret, QString customizer_type) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(auth_ims_client_secret);
    Q_UNUSED(customizer_type);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo res;
        reqObj->comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString oauth_provider_id) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(oauth_provider_id);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo res;
        reqObj->comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthImsImplIMSProviderImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString oauth_provider_id, QString oauth_provider_ims_authorization_url, QString oauth_provider_ims_token_url, QString oauth_provider_ims_profile_url, QList<QString> oauth_provider_ims_extended_details_urls, QString oauth_provider_ims_validate_token_url, QString oauth_provider_ims_session_property, QString oauth_provider_ims_service_token_client_id, QString oauth_provider_ims_service_token_client_secret, QString oauth_provider_ims_service_token, QString ims_org_ref, QList<QString> ims_group_mapping, bool oauth_provider_ims_only_license_group) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(oauth_provider_id);
    Q_UNUSED(oauth_provider_ims_authorization_url);
    Q_UNUSED(oauth_provider_ims_token_url);
    Q_UNUSED(oauth_provider_ims_profile_url);
    Q_UNUSED(oauth_provider_ims_extended_details_urls);
    Q_UNUSED(oauth_provider_ims_validate_token_url);
    Q_UNUSED(oauth_provider_ims_session_property);
    Q_UNUSED(oauth_provider_ims_service_token_client_id);
    Q_UNUSED(oauth_provider_ims_service_token_client_secret);
    Q_UNUSED(oauth_provider_ims_service_token);
    Q_UNUSED(ims_org_ref);
    Q_UNUSED(ims_group_mapping);
    Q_UNUSED(oauth_provider_ims_only_license_group);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthImsImplIMSProviderImplInfo res;
        reqObj->comAdobeGraniteAuthImsImplIMSProviderImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthImsImplImsConfigProviderImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString oauth_configmanager_ims_configid, QString ims_owning_entity, QString aem_instance_id, QString ims_service_code) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(oauth_configmanager_ims_configid);
    Q_UNUSED(ims_owning_entity);
    Q_UNUSED(aem_instance_id);
    Q_UNUSED(ims_service_code);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthImsImplImsConfigProviderImplInfo res;
        reqObj->comAdobeGraniteAuthImsImplImsConfigProviderImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthAccesstokenProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString auth_token_provider_title, QList<QString> auth_token_provider_default_claims, QString auth_token_provider_endpoint, QString auth_access_token_request, QString auth_token_provider_keypair_alias, qint32 auth_token_provider_conn_timeout, qint32 auth_token_provider_so_timeout, QString auth_token_provider_client_id, QString auth_token_provider_scope, bool auth_token_provider_reuse_access_token, bool auth_token_provider_relaxed_ssl, QString token_request_customizer_type, QString auth_token_validator_type) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(auth_token_provider_title);
    Q_UNUSED(auth_token_provider_default_claims);
    Q_UNUSED(auth_token_provider_endpoint);
    Q_UNUSED(auth_access_token_request);
    Q_UNUSED(auth_token_provider_keypair_alias);
    Q_UNUSED(auth_token_provider_conn_timeout);
    Q_UNUSED(auth_token_provider_so_timeout);
    Q_UNUSED(auth_token_provider_client_id);
    Q_UNUSED(auth_token_provider_scope);
    Q_UNUSED(auth_token_provider_reuse_access_token);
    Q_UNUSED(auth_token_provider_relaxed_ssl);
    Q_UNUSED(token_request_customizer_type);
    Q_UNUSED(auth_token_validator_type);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthOauthAccesstokenProviderInfo res;
        reqObj->comAdobeGraniteAuthOauthAccesstokenProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString path, QList<QString> oauth_client_ids_allowed, bool auth_bearer_sync_ims, QString auth_token_request_parameter, QString oauth_bearer_configid, bool oauth_jwt_support) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(path);
    Q_UNUSED(oauth_client_ids_allowed);
    Q_UNUSED(auth_bearer_sync_ims);
    Q_UNUSED(auth_token_request_parameter);
    Q_UNUSED(oauth_bearer_configid);
    Q_UNUSED(oauth_jwt_support);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo res;
        reqObj->comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString auth_token_validator_type) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(auth_token_validator_type);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo res;
        reqObj->comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthImplFacebookProviderImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString oauth_provider_id) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(oauth_provider_id);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthOauthImplFacebookProviderImplInfo res;
        reqObj->comAdobeGraniteAuthOauthImplFacebookProviderImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthImplGithubProviderImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString oauth_provider_id, QString oauth_provider_github_authorization_url, QString oauth_provider_github_token_url, QString oauth_provider_github_profile_url) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(oauth_provider_id);
    Q_UNUSED(oauth_provider_github_authorization_url);
    Q_UNUSED(oauth_provider_github_token_url);
    Q_UNUSED(oauth_provider_github_profile_url);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthOauthImplGithubProviderImplInfo res;
        reqObj->comAdobeGraniteAuthOauthImplGithubProviderImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthImplGraniteProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString oauth_provider_id, QString oauth_provider_granite_authorization_url, QString oauth_provider_granite_token_url, QString oauth_provider_granite_profile_url, QString oauth_provider_granite_extended_details_urls) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(oauth_provider_id);
    Q_UNUSED(oauth_provider_granite_authorization_url);
    Q_UNUSED(oauth_provider_granite_token_url);
    Q_UNUSED(oauth_provider_granite_profile_url);
    Q_UNUSED(oauth_provider_granite_extended_details_urls);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthOauthImplGraniteProviderInfo res;
        reqObj->comAdobeGraniteAuthOauthImplGraniteProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthImplHelperProviderConfigManager(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString oauth_cookie_login_timeout, QString oauth_cookie_max_age) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(oauth_cookie_login_timeout);
    Q_UNUSED(oauth_cookie_max_age);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo res;
        reqObj->comAdobeGraniteAuthOauthImplHelperProviderConfigManagerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString oauth_cookie_login_timeout, QString oauth_cookie_max_age) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(oauth_cookie_login_timeout);
    Q_UNUSED(oauth_cookie_max_age);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo res;
        reqObj->comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString path) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(path);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo res;
        reqObj->comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthImplTwitterProviderImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString oauth_provider_id) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(oauth_provider_id);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthOauthImplTwitterProviderImplInfo res;
        reqObj->comAdobeGraniteAuthOauthImplTwitterProviderImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthOauthProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString oauth_config_id, QString oauth_client_id, QString oauth_client_secret, QList<QString> oauth_scope, QString oauth_config_provider_id, bool oauth_create_users, QString oauth_userid_property, bool force_strict_username_matching, bool oauth_encode_userids, bool oauth_hash_userids, QString oauth_call_back_url, bool oauth_access_token_persist, bool oauth_access_token_persist_cookie, bool oauth_csrf_state_protection, bool oauth_redirect_request_params, bool oauth_config_siblings_allow) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(oauth_config_id);
    Q_UNUSED(oauth_client_id);
    Q_UNUSED(oauth_client_secret);
    Q_UNUSED(oauth_scope);
    Q_UNUSED(oauth_config_provider_id);
    Q_UNUSED(oauth_create_users);
    Q_UNUSED(oauth_userid_property);
    Q_UNUSED(force_strict_username_matching);
    Q_UNUSED(oauth_encode_userids);
    Q_UNUSED(oauth_hash_userids);
    Q_UNUSED(oauth_call_back_url);
    Q_UNUSED(oauth_access_token_persist);
    Q_UNUSED(oauth_access_token_persist_cookie);
    Q_UNUSED(oauth_csrf_state_protection);
    Q_UNUSED(oauth_redirect_request_params);
    Q_UNUSED(oauth_config_siblings_allow);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthOauthProviderInfo res;
        reqObj->comAdobeGraniteAuthOauthProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> supported_paths) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(supported_paths);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo res;
        reqObj->comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthSamlSamlAuthenticationHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> path, qint32 service_ranking, QString idp_url, QString idp_cert_alias, bool idp_http_redirect, QString service_provider_entity_id, QString assertion_consumer_service_url, QString sp_private_key_alias, QString key_store_password, QString default_redirect_url, QString user_id_attribute, bool use_encryption, bool create_user, QString user_intermediate_path, bool add_group_memberships, QString group_membership_attribute, QList<QString> default_groups, QString name_id_format, QList<QString> synchronize_attributes, bool handle_logout, QString logout_url, qint32 clock_tolerance, QString digest_method, QString signature_method, QString identity_sync_type, QString idp_identifier) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(path);
    Q_UNUSED(service_ranking);
    Q_UNUSED(idp_url);
    Q_UNUSED(idp_cert_alias);
    Q_UNUSED(idp_http_redirect);
    Q_UNUSED(service_provider_entity_id);
    Q_UNUSED(assertion_consumer_service_url);
    Q_UNUSED(sp_private_key_alias);
    Q_UNUSED(key_store_password);
    Q_UNUSED(default_redirect_url);
    Q_UNUSED(user_id_attribute);
    Q_UNUSED(use_encryption);
    Q_UNUSED(create_user);
    Q_UNUSED(user_intermediate_path);
    Q_UNUSED(add_group_memberships);
    Q_UNUSED(group_membership_attribute);
    Q_UNUSED(default_groups);
    Q_UNUSED(name_id_format);
    Q_UNUSED(synchronize_attributes);
    Q_UNUSED(handle_logout);
    Q_UNUSED(logout_url);
    Q_UNUSED(clock_tolerance);
    Q_UNUSED(digest_method);
    Q_UNUSED(signature_method);
    Q_UNUSED(identity_sync_type);
    Q_UNUSED(idp_identifier);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo res;
        reqObj->comAdobeGraniteAuthSamlSamlAuthenticationHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString path, qint32 service_ranking, QString jaas_control_flag, QString jaas_realm_name, qint32 jaas_ranking, QList<QString> headers, QList<QString> cookies, QList<QString> parameters, QList<QString> usermap, QString format, QString trusted_credentials_attribute) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(path);
    Q_UNUSED(service_ranking);
    Q_UNUSED(jaas_control_flag);
    Q_UNUSED(jaas_realm_name);
    Q_UNUSED(jaas_ranking);
    Q_UNUSED(headers);
    Q_UNUSED(cookies);
    Q_UNUSED(parameters);
    Q_UNUSED(usermap);
    Q_UNUSED(format);
    Q_UNUSED(trusted_credentials_attribute);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo res;
        reqObj->comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags, qint32 minimum_code_cache_size) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    Q_UNUSED(minimum_code_cache_size);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo res;
        reqObj->comAdobeGraniteBundlesHcImplCodeCacheHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo res;
        reqObj->comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo res;
        reqObj->comAdobeGraniteBundlesHcImplDavExBundleHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags, QList<QString> ignored_bundles) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    Q_UNUSED(ignored_bundles);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo res;
        reqObj->comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteBundlesHcImplJobsHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags, qint32 max_queued_jobs) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    Q_UNUSED(max_queued_jobs);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteBundlesHcImplJobsHealthCheckInfo res;
        reqObj->comAdobeGraniteBundlesHcImplJobsHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo res;
        reqObj->comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo res;
        reqObj->comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo res;
        reqObj->comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo res;
        reqObj->comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo res;
        reqObj->comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> replicate_comment_resource_types) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(replicate_comment_resource_types);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo res;
        reqObj->comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> compatgroups, bool enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(compatgroups);
    Q_UNUSED(enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo res;
        reqObj->comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteCompatrouterImplRoutingConfig(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString id, QString compat_path, QString new_path) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(id);
    Q_UNUSED(compat_path);
    Q_UNUSED(new_path);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteCompatrouterImplRoutingConfigInfo res;
        reqObj->comAdobeGraniteCompatrouterImplRoutingConfigResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteCompatrouterImplSwitchMappingConfig(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString group, QList<QString> ids) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(group);
    Q_UNUSED(ids);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo res;
        reqObj->comAdobeGraniteCompatrouterImplSwitchMappingConfigResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enabled, QList<QString> fallback_paths) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enabled);
    Q_UNUSED(fallback_paths);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo res;
        reqObj->comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteContexthubImplContextHubImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool com_adobe_granite_contexthub_silent_mode, bool com_adobe_granite_contexthub_show_ui) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(com_adobe_granite_contexthub_silent_mode);
    Q_UNUSED(com_adobe_granite_contexthub_show_ui);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteContexthubImplContextHubImplInfo res;
        reqObj->comAdobeGraniteContexthubImplContextHubImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteCorsImplCORSPolicyImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> alloworigin, QList<QString> alloworiginregexp, QList<QString> allowedpaths, QList<QString> exposedheaders, qint32 maxage, QList<QString> supportedheaders, QList<QString> supportedmethods, bool supportscredentials) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(alloworigin);
    Q_UNUSED(alloworiginregexp);
    Q_UNUSED(allowedpaths);
    Q_UNUSED(exposedheaders);
    Q_UNUSED(maxage);
    Q_UNUSED(supportedheaders);
    Q_UNUSED(supportedmethods);
    Q_UNUSED(supportscredentials);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteCorsImplCORSPolicyImplInfo res;
        reqObj->comAdobeGraniteCorsImplCORSPolicyImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteCsrfImplCSRFFilter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> filter_methods, bool filter_enable_safe_user_agents, QList<QString> filter_safe_user_agents, QList<QString> filter_excluded_paths) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(filter_methods);
    Q_UNUSED(filter_enable_safe_user_agents);
    Q_UNUSED(filter_safe_user_agents);
    Q_UNUSED(filter_excluded_paths);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteCsrfImplCSRFFilterInfo res;
        reqObj->comAdobeGraniteCsrfImplCSRFFilterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteCsrfImplCSRFServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 csrf_token_expires_in, QString sling_auth_requirements) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(csrf_token_expires_in);
    Q_UNUSED(sling_auth_requirements);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteCsrfImplCSRFServletInfo res;
        reqObj->comAdobeGraniteCsrfImplCSRFServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString username, QString encrypted_password) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(username);
    Q_UNUSED(encrypted_password);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo res;
        reqObj->comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enabled, QString agent_name, QString diff_path, QString observed_path, QString service_name, QString property_names, qint32 distribution_delay, QString service_user_target) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enabled);
    Q_UNUSED(agent_name);
    Q_UNUSED(diff_path);
    Q_UNUSED(observed_path);
    Q_UNUSED(service_name);
    Q_UNUSED(property_names);
    Q_UNUSED(distribution_delay);
    Q_UNUSED(service_user_target);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo res;
        reqObj->comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteDistributionCoreImplDiffDiffEventListener(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString diff_path, QString service_name, QString service_user_target) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(diff_path);
    Q_UNUSED(service_name);
    Q_UNUSED(service_user_target);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo res;
        reqObj->comAdobeGraniteDistributionCoreImplDiffDiffEventListenerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteDistributionCoreImplDistributionToReplicationEven(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> importer_name) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(importer_name);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo res;
        reqObj->comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString provider_name, bool forward_requests) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(provider_name);
    Q_UNUSED(forward_requests);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo res;
        reqObj->comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteDistributionCoreImplReplicationDistributionTrans(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool forward_requests) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(forward_requests);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo res;
        reqObj->comAdobeGraniteDistributionCoreImplReplicationDistributionTransResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString service_name, QString user_id, QString access_token_provider_target) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(service_name);
    Q_UNUSED(user_id);
    Q_UNUSED(access_token_provider_target);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo res;
        reqObj->comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteFragsImplCheckHttpHeaderFlag(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString feature_name, QString feature_description, QString http_header_name, QString http_header_valuepattern) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(feature_name);
    Q_UNUSED(feature_description);
    Q_UNUSED(http_header_name);
    Q_UNUSED(http_header_valuepattern);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo res;
        reqObj->comAdobeGraniteFragsImplCheckHttpHeaderFlagResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteFragsImplRandomFeature(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString feature_name, QString feature_description, QString active_percentage, QString cookie_name, qint32 cookie_max_age) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(feature_name);
    Q_UNUSED(feature_description);
    Q_UNUSED(active_percentage);
    Q_UNUSED(cookie_name);
    Q_UNUSED(cookie_max_age);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteFragsImplRandomFeatureInfo res;
        reqObj->comAdobeGraniteFragsImplRandomFeatureResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteHttpcacheFileFileCacheStore(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString com_adobe_granite_httpcache_file_document_root, QString com_adobe_granite_httpcache_file_include_host) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(com_adobe_granite_httpcache_file_document_root);
    Q_UNUSED(com_adobe_granite_httpcache_file_include_host);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteHttpcacheFileFileCacheStoreInfo res;
        reqObj->comAdobeGraniteHttpcacheFileFileCacheStoreResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteHttpcacheImplOuterCacheFilter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> com_adobe_granite_httpcache_url_paths) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(com_adobe_granite_httpcache_url_paths);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteHttpcacheImplOuterCacheFilterInfo res;
        reqObj->comAdobeGraniteHttpcacheImplOuterCacheFilterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteI18nImplBundlePseudoTranslations(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> pseudo_patterns) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(pseudo_patterns);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteI18nImplBundlePseudoTranslationsInfo res;
        reqObj->comAdobeGraniteI18nImplBundlePseudoTranslationsResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteI18nImplPreferencesLocaleResolverService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString security_preferences_name) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(security_preferences_name);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo res;
        reqObj->comAdobeGraniteI18nImplPreferencesLocaleResolverServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteInfocollectorInfoCollector(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool granite_infocollector_include_thread_dumps, bool granite_infocollector_include_heap_dump) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(granite_infocollector_include_thread_dumps);
    Q_UNUSED(granite_infocollector_include_heap_dump);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteInfocollectorInfoCollectorInfo res;
        reqObj->comAdobeGraniteInfocollectorInfoCollectorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 com_adobe_granite_jetty_ssl_port, QString com_adobe_granite_jetty_ssl_keystore_user, QString com_adobe_granite_jetty_ssl_keystore_password, QList<QString> com_adobe_granite_jetty_ssl_ciphersuites_excluded, QList<QString> com_adobe_granite_jetty_ssl_ciphersuites_included, QString com_adobe_granite_jetty_ssl_client_certificate) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(com_adobe_granite_jetty_ssl_port);
    Q_UNUSED(com_adobe_granite_jetty_ssl_keystore_user);
    Q_UNUSED(com_adobe_granite_jetty_ssl_keystore_password);
    Q_UNUSED(com_adobe_granite_jetty_ssl_ciphersuites_excluded);
    Q_UNUSED(com_adobe_granite_jetty_ssl_ciphersuites_included);
    Q_UNUSED(com_adobe_granite_jetty_ssl_client_certificate);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo res;
        reqObj->comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteLicenseImplLicenseCheckFilter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 check_internval, QList<QString> exclude_ids, bool encrypt_ping) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(check_internval);
    Q_UNUSED(exclude_ids);
    Q_UNUSED(encrypt_ping);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteLicenseImplLicenseCheckFilterInfo res;
        reqObj->comAdobeGraniteLicenseImplLicenseCheckFilterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteLoggingImplLogAnalyserImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 messages_queue_size, QList<QString> logger_config, qint32 messages_size) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(messages_queue_size);
    Q_UNUSED(logger_config);
    Q_UNUSED(messages_size);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteLoggingImplLogAnalyserImplInfo res;
        reqObj->comAdobeGraniteLoggingImplLogAnalyserImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteLoggingImplLogErrorHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteLoggingImplLogErrorHealthCheckInfo res;
        reqObj->comAdobeGraniteLoggingImplLogErrorHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool granite_maintenance_mandatory, QString job_topics) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(granite_maintenance_mandatory);
    Q_UNUSED(job_topics);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo res;
        reqObj->comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString job_topics) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(job_topics);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo res;
        reqObj->comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> full_gc_days) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(full_gc_days);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo res;
        reqObj->comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteMonitoringImplScriptConfigImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString script_filename, QString script_display, QString script_path, QList<QString> script_platform, qint32 interval, QString jmxdomain) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(script_filename);
    Q_UNUSED(script_display);
    Q_UNUSED(script_path);
    Q_UNUSED(script_platform);
    Q_UNUSED(interval);
    Q_UNUSED(jmxdomain);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteMonitoringImplScriptConfigImplInfo res;
        reqObj->comAdobeGraniteMonitoringImplScriptConfigImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString path, QString jaas_control_flag, QString jaas_realm_name, qint32 jaas_ranking, bool oauth_offline_validation) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(path);
    Q_UNUSED(jaas_control_flag);
    Q_UNUSED(jaas_realm_name);
    Q_UNUSED(jaas_ranking);
    Q_UNUSED(oauth_offline_validation);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo res;
        reqObj->comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteOauthServerImplAccessTokenCleanupTask(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString scheduler_expression) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(scheduler_expression);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo res;
        reqObj->comAdobeGraniteOauthServerImplAccessTokenCleanupTaskResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool oauth_client_revocation_active) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(oauth_client_revocation_active);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo res;
        reqObj->comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString sling_servlet_paths, bool oauth_revocation_active) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sling_servlet_paths);
    Q_UNUSED(oauth_revocation_active);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo res;
        reqObj->comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString oauth_issuer, QString oauth_access_token_expires_in, QString osgi_http_whiteboard_servlet_pattern, QString osgi_http_whiteboard_context_select) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(oauth_issuer);
    Q_UNUSED(oauth_access_token_expires_in);
    Q_UNUSED(osgi_http_whiteboard_servlet_pattern);
    Q_UNUSED(osgi_http_whiteboard_context_select);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo res;
        reqObj->comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool oauth_token_revocation_active) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(oauth_token_revocation_active);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo res;
        reqObj->comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteOffloadingImplOffloadingConfigurator(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString offloading_transporter, bool offloading_cleanup_payload) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(offloading_transporter);
    Q_UNUSED(offloading_cleanup_payload);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo res;
        reqObj->comAdobeGraniteOffloadingImplOffloadingConfiguratorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteOffloadingImplOffloadingJobCloner(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool offloading_jobcloner_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(offloading_jobcloner_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteOffloadingImplOffloadingJobClonerInfo res;
        reqObj->comAdobeGraniteOffloadingImplOffloadingJobClonerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteOffloadingImplOffloadingJobOffloader(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool offloading_offloader_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(offloading_offloader_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo res;
        reqObj->comAdobeGraniteOffloadingImplOffloadingJobOffloaderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool offloading_agentmanager_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(offloading_agentmanager_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo res;
        reqObj->comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString default_transport_agent_to_worker_prefix, QString default_transport_agent_to_master_prefix, QString default_transport_input_package, QString default_transport_output_package, bool default_transport_replication_synchronous, bool default_transport_contentpackage, bool offloading_transporter_default_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(default_transport_agent_to_worker_prefix);
    Q_UNUSED(default_transport_agent_to_master_prefix);
    Q_UNUSED(default_transport_input_package);
    Q_UNUSED(default_transport_output_package);
    Q_UNUSED(default_transport_replication_synchronous);
    Q_UNUSED(default_transport_contentpackage);
    Q_UNUSED(offloading_transporter_default_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo res;
        reqObj->comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 omnisearch_suggestion_requiretext_min, bool omnisearch_suggestion_spellcheck_require) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(omnisearch_suggestion_requiretext_min);
    Q_UNUSED(omnisearch_suggestion_spellcheck_require);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo res;
        reqObj->comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteOptoutImplOptOutServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> optout_cookies, QList<QString> optout_headers, QList<QString> optout_whitelist_cookies) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(optout_cookies);
    Q_UNUSED(optout_headers);
    Q_UNUSED(optout_whitelist_cookies);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteOptoutImplOptOutServiceImplInfo res;
        reqObj->comAdobeGraniteOptoutImplOptOutServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 indexing_critical_threshold, qint32 indexing_warn_threshold, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(indexing_critical_threshold);
    Q_UNUSED(indexing_warn_threshold);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo res;
        reqObj->comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 large_index_critical_threshold, qint32 large_index_warn_threshold, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(large_index_critical_threshold);
    Q_UNUSED(large_index_warn_threshold);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo res;
        reqObj->comAdobeGraniteQueriesImplHcLargeIndexHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo res;
        reqObj->comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 get_period) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(get_period);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo res;
        reqObj->comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo res;
        reqObj->comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 number_of_retries_allowed, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(number_of_retries_allowed);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo res;
        reqObj->comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo res;
        reqObj->comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo res;
        reqObj->comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags, QList<QString> exclude_search_path) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    Q_UNUSED(exclude_search_path);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo res;
        reqObj->comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo res;
        reqObj->comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo res;
        reqObj->comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags, QList<QString> account_logins, QList<QString> console_logins) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    Q_UNUSED(account_logins);
    Q_UNUSED(console_logins);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo res;
        reqObj->comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags, qint32 disk_space_warn_threshold, qint32 disk_space_error_threshold) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    Q_UNUSED(disk_space_warn_threshold);
    Q_UNUSED(disk_space_error_threshold);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo res;
        reqObj->comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo res;
        reqObj->comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteRepositoryImplCommitStatsConfig(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enabled, qint32 interval_seconds, qint32 commits_per_interval_threshold, qint32 max_location_length, qint32 max_details_shown, qint32 min_details_percentage, QList<QString> thread_matchers, qint32 max_greedy_depth, QString greedy_stack_matchers, QList<QString> stack_filters, QList<QString> stack_matchers, QList<QString> stack_categorizers, QList<QString> stack_shorteners) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enabled);
    Q_UNUSED(interval_seconds);
    Q_UNUSED(commits_per_interval_threshold);
    Q_UNUSED(max_location_length);
    Q_UNUSED(max_details_shown);
    Q_UNUSED(min_details_percentage);
    Q_UNUSED(thread_matchers);
    Q_UNUSED(max_greedy_depth);
    Q_UNUSED(greedy_stack_matchers);
    Q_UNUSED(stack_filters);
    Q_UNUSED(stack_matchers);
    Q_UNUSED(stack_categorizers);
    Q_UNUSED(stack_shorteners);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteRepositoryImplCommitStatsConfigInfo res;
        reqObj->comAdobeGraniteRepositoryImplCommitStatsConfigResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteRepositoryServiceUserConfiguration(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, bool serviceusers_simple_subject_population, QList<QString> serviceusers_list) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(serviceusers_simple_subject_population);
    Q_UNUSED(serviceusers_list);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteRepositoryServiceUserConfigurationInfo res;
        reqObj->comAdobeGraniteRepositoryServiceUserConfigurationResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo res;
        reqObj->comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteResourcestatusImplCompositeStatusType(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QList<QString> types) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(types);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo res;
        reqObj->comAdobeGraniteResourcestatusImplCompositeStatusTypeResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString provider_root) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(provider_root);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo res;
        reqObj->comAdobeGraniteResourcestatusImplStatusResourceProviderImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool mime_allow_empty, QList<QString> mime_allowed) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(mime_allow_empty);
    Q_UNUSED(mime_allowed);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo res;
        reqObj->comAdobeGraniteRestAssetsImplAssetContentDispositionFilterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString provider_roots) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(provider_roots);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo res;
        reqObj->comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteRestImplServletDefaultGETServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 default_limit, bool use_absolute_uri) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(default_limit);
    Q_UNUSED(use_absolute_uri);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteRestImplServletDefaultGETServletInfo res;
        reqObj->comAdobeGraniteRestImplServletDefaultGETServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> hc_tags) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_tags);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo res;
        reqObj->comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteSecurityUserUserPropertiesService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString adapter_condition, QList<QString> granite_userproperties_nodetypes, QList<QString> granite_userproperties_resourcetypes) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(adapter_condition);
    Q_UNUSED(granite_userproperties_nodetypes);
    Q_UNUSED(granite_userproperties_resourcetypes);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteSecurityUserUserPropertiesServiceInfo res;
        reqObj->comAdobeGraniteSecurityUserUserPropertiesServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString group2member_relationship_outgoing, QList<QString> group2member_excluded_outgoing, QString group2member_relationship_incoming, QList<QString> group2member_excluded_incoming) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(group2member_relationship_outgoing);
    Q_UNUSED(group2member_excluded_outgoing);
    Q_UNUSED(group2member_relationship_incoming);
    Q_UNUSED(group2member_excluded_incoming);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo res;
        reqObj->comAdobeGraniteSocialgraphImplSocialGraphFactoryImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString scheduler_expression, QString jmx_objectname) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(scheduler_expression);
    Q_UNUSED(jmx_objectname);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo res;
        reqObj->comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString adapter_condition) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(adapter_condition);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo res;
        reqObj->comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool archiving_enabled, QString scheduler_expression, qint32 archive_since_days_completed) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(archiving_enabled);
    Q_UNUSED(scheduler_expression);
    Q_UNUSED(archive_since_days_completed);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo res;
        reqObj->comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool purge_completed, qint32 completed_age, bool purge_active, qint32 active_age, qint32 save_threshold) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(purge_completed);
    Q_UNUSED(completed_age);
    Q_UNUSED(purge_active);
    Q_UNUSED(active_age);
    Q_UNUSED(save_threshold);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo res;
        reqObj->comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString adapter_condition, QList<QString> taskmanager_admingroups) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(adapter_condition);
    Q_UNUSED(taskmanager_admingroups);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo res;
        reqObj->comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteThreaddumpThreadDumpCollector(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 scheduler_period, QString scheduler_run_on, bool granite_threaddump_enabled, qint32 granite_threaddump_dumps_per_file, bool granite_threaddump_enable_gzip_compression, bool granite_threaddump_enable_directories_compression, bool granite_threaddump_enable_j_stack, qint32 granite_threaddump_max_backup_days, QString granite_threaddump_backup_clean_trigger) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(scheduler_period);
    Q_UNUSED(scheduler_run_on);
    Q_UNUSED(granite_threaddump_enabled);
    Q_UNUSED(granite_threaddump_dumps_per_file);
    Q_UNUSED(granite_threaddump_enable_gzip_compression);
    Q_UNUSED(granite_threaddump_enable_directories_compression);
    Q_UNUSED(granite_threaddump_enable_j_stack);
    Q_UNUSED(granite_threaddump_max_backup_days);
    Q_UNUSED(granite_threaddump_backup_clean_trigger);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteThreaddumpThreadDumpCollectorInfo res;
        reqObj->comAdobeGraniteThreaddumpThreadDumpCollectorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString translation_factory, QString default_connector_label, QString default_connector_attribution, QString default_connector_workspace_id, QString default_connector_subscription_key, QString language_map_location, QString category_map_location, qint32 retry_attempts, qint32 timeout_count) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(translation_factory);
    Q_UNUSED(default_connector_label);
    Q_UNUSED(default_connector_attribution);
    Q_UNUSED(default_connector_workspace_id);
    Q_UNUSED(default_connector_subscription_key);
    Q_UNUSED(language_map_location);
    Q_UNUSED(category_map_location);
    Q_UNUSED(retry_attempts);
    Q_UNUSED(timeout_count);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo res;
        reqObj->comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteTranslationCoreImplTranslationManagerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString default_connector_name, QString default_category) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(default_connector_name);
    Q_UNUSED(default_category);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo res;
        reqObj->comAdobeGraniteTranslationCoreImplTranslationManagerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool htmllibmanager_timing, QString htmllibmanager_debug_init_js, bool htmllibmanager_minify, bool htmllibmanager_debug, bool htmllibmanager_gzip, qint32 htmllibmanager_max_data_uri_size, qint32 htmllibmanager_maxage, bool htmllibmanager_force_cq_url_info, QString htmllibmanager_defaultthemename, QString htmllibmanager_defaultuserthemename, QString htmllibmanager_clientmanager, QList<QString> htmllibmanager_path_list, QList<QString> htmllibmanager_excluded_path_list, QList<QString> htmllibmanager_processor_js, QList<QString> htmllibmanager_processor_css, QList<QString> htmllibmanager_longcache_patterns, QString htmllibmanager_longcache_format, bool htmllibmanager_use_file_system_output_cache, QString htmllibmanager_file_system_output_cache_location, QList<QString> htmllibmanager_disable_replacement) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(htmllibmanager_timing);
    Q_UNUSED(htmllibmanager_debug_init_js);
    Q_UNUSED(htmllibmanager_minify);
    Q_UNUSED(htmllibmanager_debug);
    Q_UNUSED(htmllibmanager_gzip);
    Q_UNUSED(htmllibmanager_max_data_uri_size);
    Q_UNUSED(htmllibmanager_maxage);
    Q_UNUSED(htmllibmanager_force_cq_url_info);
    Q_UNUSED(htmllibmanager_defaultthemename);
    Q_UNUSED(htmllibmanager_defaultuserthemename);
    Q_UNUSED(htmllibmanager_clientmanager);
    Q_UNUSED(htmllibmanager_path_list);
    Q_UNUSED(htmllibmanager_excluded_path_list);
    Q_UNUSED(htmllibmanager_processor_js);
    Q_UNUSED(htmllibmanager_processor_css);
    Q_UNUSED(htmllibmanager_longcache_patterns);
    Q_UNUSED(htmllibmanager_longcache_format);
    Q_UNUSED(htmllibmanager_use_file_system_output_cache);
    Q_UNUSED(htmllibmanager_file_system_output_cache_location);
    Q_UNUSED(htmllibmanager_disable_replacement);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo res;
        reqObj->comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo res;
        reqObj->comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool granite_workflow_workflow_publish_event_service_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(granite_workflow_workflow_publish_event_service_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo res;
        reqObj->comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 bucket_size) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(bucket_size);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo res;
        reqObj->comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 default_timeout, qint32 max_timeout, qint32 default_period) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(default_timeout);
    Q_UNUSED(max_timeout);
    Q_UNUSED(default_period);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo res;
        reqObj->comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteWorkflowCoreJobJobHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> job_topics, bool allow_self_process_termination) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(job_topics);
    Q_UNUSED(allow_self_process_termination);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteWorkflowCoreJobJobHandlerInfo res;
        reqObj->comAdobeGraniteWorkflowCoreJobJobHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString job_topics) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(job_topics);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo res;
        reqObj->comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteWorkflowCorePayloadMapCache(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> get_system_workflow_models, QString get_package_root_path) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(get_system_workflow_models);
    Q_UNUSED(get_package_root_path);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteWorkflowCorePayloadMapCacheInfo res;
        reqObj->comAdobeGraniteWorkflowCorePayloadMapCacheResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> payload_move_white_list, bool payload_move_handle_from_workflow_process) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(payload_move_white_list);
    Q_UNUSED(payload_move_handle_from_workflow_process);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo res;
        reqObj->comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteWorkflowCoreWorkflowConfig(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_workflow_config_workflow_packages_root_path, bool cq_workflow_config_workflow_process_legacy_mode, bool cq_workflow_config_allow_locking) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_workflow_config_workflow_packages_root_path);
    Q_UNUSED(cq_workflow_config_workflow_process_legacy_mode);
    Q_UNUSED(cq_workflow_config_allow_locking);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteWorkflowCoreWorkflowConfigInfo res;
        reqObj->comAdobeGraniteWorkflowCoreWorkflowConfigResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteWorkflowCoreWorkflowSessionFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString granite_workflowinbox_sort_property_name, QString granite_workflowinbox_sort_order, qint32 cq_workflow_job_retry, QList<QString> cq_workflow_superuser, qint32 granite_workflow_inbox_query_size, bool granite_workflow_admin_user_group_filter, bool granite_workflow_enforce_workitem_assignee_permissions, bool granite_workflow_enforce_workflow_initiator_permissions, bool granite_workflow_inject_tenant_id_in_job_topics, qint32 granite_workflow_max_purge_save_threshold, qint32 granite_workflow_max_purge_query_count) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(granite_workflowinbox_sort_property_name);
    Q_UNUSED(granite_workflowinbox_sort_order);
    Q_UNUSED(cq_workflow_job_retry);
    Q_UNUSED(cq_workflow_superuser);
    Q_UNUSED(granite_workflow_inbox_query_size);
    Q_UNUSED(granite_workflow_admin_user_group_filter);
    Q_UNUSED(granite_workflow_enforce_workitem_assignee_permissions);
    Q_UNUSED(granite_workflow_enforce_workflow_initiator_permissions);
    Q_UNUSED(granite_workflow_inject_tenant_id_in_job_topics);
    Q_UNUSED(granite_workflow_max_purge_save_threshold);
    Q_UNUSED(granite_workflow_max_purge_query_count);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo res;
        reqObj->comAdobeGraniteWorkflowCoreWorkflowSessionFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeGraniteWorkflowPurgeScheduler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString scheduledpurge_name, QString scheduledpurge_workflow_status, QList<QString> scheduledpurge_model_ids, qint32 scheduledpurge_daysold) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(scheduledpurge_name);
    Q_UNUSED(scheduledpurge_workflow_status);
    Q_UNUSED(scheduledpurge_model_ids);
    Q_UNUSED(scheduledpurge_daysold);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeGraniteWorkflowPurgeSchedulerInfo res;
        reqObj->comAdobeGraniteWorkflowPurgeSchedulerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeOctopusNcommBootstrap(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 max_connections, qint32 max_requests, qint32 request_timeout, qint32 request_retries, qint32 launch_timeout) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(max_connections);
    Q_UNUSED(max_requests);
    Q_UNUSED(request_timeout);
    Q_UNUSED(request_retries);
    Q_UNUSED(launch_timeout);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeOctopusNcommBootstrapInfo res;
        reqObj->comAdobeOctopusNcommBootstrapResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString communities_integration_livefyre_sling_event_filter) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(communities_integration_livefyre_sling_event_filter);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo res;
        reqObj->comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comAdobeXmpWorkerFilesNcommXMPFilesNComm(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString max_connections, QString max_requests, QString request_timeout, QString log_dir) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(max_connections);
    Q_UNUSED(max_requests);
    Q_UNUSED(request_timeout);
    Q_UNUSED(log_dir);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo res;
        reqObj->comAdobeXmpWorkerFilesNcommXMPFilesNCommResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCommonsDatasourceJdbcpoolJdbcPoolService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString jdbc_driver_class, QString jdbc_connection_uri, QString jdbc_username, QString jdbc_password, QString jdbc_validation_query, bool default_readonly, bool default_autocommit, qint32 pool_size, qint32 pool_max_wait_msec, QString datasource_name, QList<QString> datasource_svc_properties) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(jdbc_driver_class);
    Q_UNUSED(jdbc_connection_uri);
    Q_UNUSED(jdbc_username);
    Q_UNUSED(jdbc_password);
    Q_UNUSED(jdbc_validation_query);
    Q_UNUSED(default_readonly);
    Q_UNUSED(default_autocommit);
    Q_UNUSED(pool_size);
    Q_UNUSED(pool_max_wait_msec);
    Q_UNUSED(datasource_name);
    Q_UNUSED(datasource_svc_properties);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo res;
        reqObj->comDayCommonsDatasourceJdbcpoolJdbcPoolServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCommonsHttpclient(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool proxy_enabled, QString proxy_host, QString proxy_user, QString proxy_password, QString proxy_ntlm_host, QString proxy_ntlm_domain, QList<QString> proxy_exceptions) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(proxy_enabled);
    Q_UNUSED(proxy_host);
    Q_UNUSED(proxy_user);
    Q_UNUSED(proxy_password);
    Q_UNUSED(proxy_ntlm_host);
    Q_UNUSED(proxy_ntlm_domain);
    Q_UNUSED(proxy_exceptions);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCommonsHttpclientInfo res;
        reqObj->comDayCommonsHttpclientResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqAnalyticsImplStorePropertiesChangeListener(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_store_listener_additional_store_paths) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_store_listener_additional_store_paths);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqAnalyticsImplStorePropertiesChangeListenerInfo res;
        reqObj->comDayCqAnalyticsImplStorePropertiesChangeListenerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> allowed_paths, qint32 cq_analytics_saint_exporter_pagesize) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(allowed_paths);
    Q_UNUSED(cq_analytics_saint_exporter_pagesize);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo res;
        reqObj->comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqAnalyticsSitecatalystImplImporterReportImporter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 report_fetch_attempts, qint32 report_fetch_delay) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(report_fetch_attempts);
    Q_UNUSED(report_fetch_delay);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo res;
        reqObj->comDayCqAnalyticsSitecatalystImplImporterReportImporterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_analytics_adapterfactory_contextstores) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_analytics_adapterfactory_contextstores);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo res;
        reqObj->comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_analytics_sitecatalyst_service_datacenter_url, QList<QString> devhostnamepatterns, qint32 connection_timeout, qint32 socket_timeout) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_analytics_sitecatalyst_service_datacenter_url);
    Q_UNUSED(devhostnamepatterns);
    Q_UNUSED(connection_timeout);
    Q_UNUSED(socket_timeout);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo res;
        reqObj->comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_analytics_testandtarget_accountoptionsupdater_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_analytics_testandtarget_accountoptionsupdater_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo res;
        reqObj->comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_analytics_testandtarget_deleteauthoractivitylistener_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_analytics_testandtarget_deleteauthoractivitylistener_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo res;
        reqObj->comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_analytics_testandtarget_pushauthorcampaignpagelistener_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_analytics_testandtarget_pushauthorcampaignpagelistener_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo res;
        reqObj->comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqAnalyticsTestandtargetImplSegmentImporter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_analytics_testandtarget_segmentimporter_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_analytics_testandtarget_segmentimporter_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqAnalyticsTestandtargetImplSegmentImporterInfo res;
        reqObj->comDayCqAnalyticsTestandtargetImplSegmentImporterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString endpoint_uri, qint32 connection_timeout, qint32 socket_timeout) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(endpoint_uri);
    Q_UNUSED(connection_timeout);
    Q_UNUSED(socket_timeout);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo res;
        reqObj->comDayCqAnalyticsTestandtargetImplServiceWebServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString testandtarget_endpoint_url) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(testandtarget_endpoint_url);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo res;
        reqObj->comDayCqAnalyticsTestandtargetImplServletsAdminServerServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString cq_analytics_testandtarget_api_url, qint32 cq_analytics_testandtarget_timeout, qint32 cq_analytics_testandtarget_sockettimeout, QString cq_analytics_testandtarget_recommendations_url_replace, QString cq_analytics_testandtarget_recommendations_url_replacewith) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_analytics_testandtarget_api_url);
    Q_UNUSED(cq_analytics_testandtarget_timeout);
    Q_UNUSED(cq_analytics_testandtarget_sockettimeout);
    Q_UNUSED(cq_analytics_testandtarget_recommendations_url_replace);
    Q_UNUSED(cq_analytics_testandtarget_recommendations_url_replacewith);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo res;
        reqObj->comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqAuthImplCugCugSupportImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cug_exempted_principals, bool cug_enabled, QString cug_principals_regex, QString cug_principals_replacement) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cug_exempted_principals);
    Q_UNUSED(cug_enabled);
    Q_UNUSED(cug_principals_regex);
    Q_UNUSED(cug_principals_replacement);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqAuthImplCugCugSupportImplInfo res;
        reqObj->comDayCqAuthImplCugCugSupportImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqAuthImplLoginSelectorHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString path, qint32 service_ranking, QList<QString> auth_loginselector_mappings, QList<QString> auth_loginselector_changepw_mappings, QString auth_loginselector_defaultloginpage, QString auth_loginselector_defaultchangepwpage, QList<QString> auth_loginselector_handle, bool auth_loginselector_handle_all_extensions) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(path);
    Q_UNUSED(service_ranking);
    Q_UNUSED(auth_loginselector_mappings);
    Q_UNUSED(auth_loginselector_changepw_mappings);
    Q_UNUSED(auth_loginselector_defaultloginpage);
    Q_UNUSED(auth_loginselector_defaultchangepwpage);
    Q_UNUSED(auth_loginselector_handle);
    Q_UNUSED(auth_loginselector_handle_all_extensions);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqAuthImplLoginSelectorHandlerInfo res;
        reqObj->comDayCqAuthImplLoginSelectorHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqCommonsImplExternalizerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> externalizer_domains, QString externalizer_host, QString externalizer_contextpath, bool externalizer_encodedpath) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(externalizer_domains);
    Q_UNUSED(externalizer_host);
    Q_UNUSED(externalizer_contextpath);
    Q_UNUSED(externalizer_encodedpath);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqCommonsImplExternalizerImplInfo res;
        reqObj->comDayCqCommonsImplExternalizerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqCommonsServletsRootMappingServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString rootmapping_target) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(rootmapping_target);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqCommonsServletsRootMappingServletInfo res;
        reqObj->comDayCqCommonsServletsRootMappingServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> codeupgradetasks, QList<QString> codeupgradetaskfilters) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(codeupgradetasks);
    Q_UNUSED(codeupgradetaskfilters);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo res;
        reqObj->comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> upgrade_task_ignore_list) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(upgrade_task_ignore_list);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo res;
        reqObj->comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString effective_bundle_list_path) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(effective_bundle_list_path);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo res;
        reqObj->comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqContentsyncImplContentSyncManagerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString contentsync_fallback_authorizable, QString contentsync_fallback_updateuser) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(contentsync_fallback_authorizable);
    Q_UNUSED(contentsync_fallback_updateuser);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqContentsyncImplContentSyncManagerImplInfo res;
        reqObj->comDayCqContentsyncImplContentSyncManagerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCommonsHandlerStandardImageHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 large_file_threshold, qint32 large_comment_threshold, bool cq_dam_enable_ext_meta_extraction) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(large_file_threshold);
    Q_UNUSED(large_comment_threshold);
    Q_UNUSED(cq_dam_enable_ext_meta_extraction);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCommonsHandlerStandardImageHandlerInfo res;
        reqObj->comDayCqDamCommonsHandlerStandardImageHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCommonsMetadataXmpFilterBlackWhite(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool xmp_filter_apply_whitelist, QList<QString> xmp_filter_whitelist, bool xmp_filter_apply_blacklist, QList<QString> xmp_filter_blacklist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(xmp_filter_apply_whitelist);
    Q_UNUSED(xmp_filter_whitelist);
    Q_UNUSED(xmp_filter_apply_blacklist);
    Q_UNUSED(xmp_filter_blacklist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo res;
        reqObj->comDayCqDamCommonsMetadataXmpFilterBlackWhiteResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCommonsUtilImplAssetCacheImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 large_file_min, bool cache_apply, QList<QString> mime_types) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(large_file_min);
    Q_UNUSED(cache_apply);
    Q_UNUSED(mime_types);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCommonsUtilImplAssetCacheImplInfo res;
        reqObj->comDayCqDamCommonsUtilImplAssetCacheImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 cq_dam_config_annotation_pdf_document_width, qint32 cq_dam_config_annotation_pdf_document_height, qint32 cq_dam_config_annotation_pdf_document_padding_horizontal, qint32 cq_dam_config_annotation_pdf_document_padding_vertical, qint32 cq_dam_config_annotation_pdf_font_size, QString cq_dam_config_annotation_pdf_font_color, QString cq_dam_config_annotation_pdf_font_family, QString cq_dam_config_annotation_pdf_font_light, qint32 cq_dam_config_annotation_pdf_margin_text_image, qint32 cq_dam_config_annotation_pdf_min_image_height, qint32 cq_dam_config_annotation_pdf_review_status_width, QString cq_dam_config_annotation_pdf_review_status_color_approved, QString cq_dam_config_annotation_pdf_review_status_color_rejected, QString cq_dam_config_annotation_pdf_review_status_color_changes_requested, qint32 cq_dam_config_annotation_pdf_annotation_marker_width, qint32 cq_dam_config_annotation_pdf_asset_minheight) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_config_annotation_pdf_document_width);
    Q_UNUSED(cq_dam_config_annotation_pdf_document_height);
    Q_UNUSED(cq_dam_config_annotation_pdf_document_padding_horizontal);
    Q_UNUSED(cq_dam_config_annotation_pdf_document_padding_vertical);
    Q_UNUSED(cq_dam_config_annotation_pdf_font_size);
    Q_UNUSED(cq_dam_config_annotation_pdf_font_color);
    Q_UNUSED(cq_dam_config_annotation_pdf_font_family);
    Q_UNUSED(cq_dam_config_annotation_pdf_font_light);
    Q_UNUSED(cq_dam_config_annotation_pdf_margin_text_image);
    Q_UNUSED(cq_dam_config_annotation_pdf_min_image_height);
    Q_UNUSED(cq_dam_config_annotation_pdf_review_status_width);
    Q_UNUSED(cq_dam_config_annotation_pdf_review_status_color_approved);
    Q_UNUSED(cq_dam_config_annotation_pdf_review_status_color_rejected);
    Q_UNUSED(cq_dam_config_annotation_pdf_review_status_color_changes_requested);
    Q_UNUSED(cq_dam_config_annotation_pdf_annotation_marker_width);
    Q_UNUSED(cq_dam_config_annotation_pdf_asset_minheight);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo res;
        reqObj->comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplAssetMoveListener(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplAssetMoveListenerInfo res;
        reqObj->comDayCqDamCoreImplAssetMoveListenerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool is_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(is_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo res;
        reqObj->comDayCqDamCoreImplAssethomeAssetHomePageConfigurationResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 cq_dam_adhoc_asset_share_prezip_maxcontentsize) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_adhoc_asset_share_prezip_maxcontentsize);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo res;
        reqObj->comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplCacheCQBufferedImageCache(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 cq_dam_image_cache_max_memory, qint32 cq_dam_image_cache_max_age, QString cq_dam_image_cache_max_dimension) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_image_cache_max_memory);
    Q_UNUSED(cq_dam_image_cache_max_age);
    Q_UNUSED(cq_dam_image_cache_max_dimension);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplCacheCQBufferedImageCacheInfo res;
        reqObj->comDayCqDamCoreImplCacheCQBufferedImageCacheResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplDamChangeEventListener(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> changeeventlistener_observed_paths) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(changeeventlistener_observed_paths);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplDamChangeEventListenerInfo res;
        reqObj->comDayCqDamCoreImplDamChangeEventListenerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplDamEventPurgeService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString scheduler_expression, qint32 max_saved_activities, qint32 save_interval, bool enable_activity_purge, QString event_types) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(scheduler_expression);
    Q_UNUSED(max_saved_activities);
    Q_UNUSED(save_interval);
    Q_UNUSED(enable_activity_purge);
    Q_UNUSED(event_types);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplDamEventPurgeServiceInfo res;
        reqObj->comDayCqDamCoreImplDamEventPurgeServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplDamEventRecorderImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString event_filter, qint32 event_queue_length, bool eventrecorder_enabled, QList<QString> eventrecorder_blacklist, QString eventrecorder_eventtypes) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(event_filter);
    Q_UNUSED(event_queue_length);
    Q_UNUSED(eventrecorder_enabled);
    Q_UNUSED(eventrecorder_blacklist);
    Q_UNUSED(eventrecorder_eventtypes);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplDamEventRecorderImplInfo res;
        reqObj->comDayCqDamCoreImplDamEventRecorderImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplEventDamEventAuditListener(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString event_filter, bool enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(event_filter);
    Q_UNUSED(enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplEventDamEventAuditListenerInfo res;
        reqObj->comDayCqDamCoreImplEventDamEventAuditListenerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplExpiryNotificationJobImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_dam_expiry_notification_scheduler_istimebased, QString cq_dam_expiry_notification_scheduler_timebased_rule, qint32 cq_dam_expiry_notification_scheduler_period_rule, bool send_email, qint32 asset_expired_limit, qint32 prior_notification_seconds, QString cq_dam_expiry_notification_url_protocol) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_expiry_notification_scheduler_istimebased);
    Q_UNUSED(cq_dam_expiry_notification_scheduler_timebased_rule);
    Q_UNUSED(cq_dam_expiry_notification_scheduler_period_rule);
    Q_UNUSED(send_email);
    Q_UNUSED(asset_expired_limit);
    Q_UNUSED(prior_notification_seconds);
    Q_UNUSED(cq_dam_expiry_notification_url_protocol);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplExpiryNotificationJobImplInfo res;
        reqObj->comDayCqDamCoreImplExpiryNotificationJobImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool is_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(is_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo res;
        reqObj->comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplGfxCommonsGfxRenderer(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool skip_bufferedcache) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(skip_bufferedcache);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplGfxCommonsGfxRendererInfo res;
        reqObj->comDayCqDamCoreImplGfxCommonsGfxRendererResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplHandlerEPSFormatHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString mimetype) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(mimetype);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplHandlerEPSFormatHandlerInfo res;
        reqObj->comDayCqDamCoreImplHandlerEPSFormatHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplHandlerIndesignFormatHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> mimetype) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(mimetype);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo res;
        reqObj->comDayCqDamCoreImplHandlerIndesignFormatHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplHandlerJpegHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_dam_enable_ext_meta_extraction, qint32 large_file_threshold, qint32 large_comment_threshold) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_enable_ext_meta_extraction);
    Q_UNUSED(large_file_threshold);
    Q_UNUSED(large_comment_threshold);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplHandlerJpegHandlerInfo res;
        reqObj->comDayCqDamCoreImplHandlerJpegHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplHandlerXmpNCommXMPHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> xmphandler_cq_formats) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(xmphandler_cq_formats);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo res;
        reqObj->comDayCqDamCoreImplHandlerXmpNCommXMPHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString jmx_objectname, bool property_measure_enabled, QString property_name, qint32 property_max_wait_ms, OAINumber property_max_rate, bool fulltext_measure_enabled, QString fulltext_name, qint32 fulltext_max_wait_ms, OAINumber fulltext_max_rate) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(jmx_objectname);
    Q_UNUSED(property_measure_enabled);
    Q_UNUSED(property_name);
    Q_UNUSED(property_max_wait_ms);
    Q_UNUSED(property_max_rate);
    Q_UNUSED(fulltext_measure_enabled);
    Q_UNUSED(fulltext_name);
    Q_UNUSED(fulltext_max_wait_ms);
    Q_UNUSED(fulltext_max_rate);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo res;
        reqObj->comDayCqDamCoreImplJmxAssetIndexUpdateMonitorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString jmx_objectname) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(jmx_objectname);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo res;
        reqObj->comDayCqDamCoreImplJmxAssetMigrationMBeanImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString jmx_objectname, bool active) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(jmx_objectname);
    Q_UNUSED(active);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo res;
        reqObj->comDayCqDamCoreImplJmxAssetUpdateMonitorImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString operation, bool email_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(operation);
    Q_UNUSED(email_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo res;
        reqObj->comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString operation, QString operation_icon, QString topic_name, bool email_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(operation);
    Q_UNUSED(operation_icon);
    Q_UNUSED(topic_name);
    Q_UNUSED(email_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo res;
        reqObj->comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplLightboxLightboxServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString sling_servlet_paths, QList<QString> sling_servlet_methods, bool cq_dam_enable_anonymous) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sling_servlet_paths);
    Q_UNUSED(sling_servlet_methods);
    Q_UNUSED(cq_dam_enable_anonymous);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplLightboxLightboxServletInfo res;
        reqObj->comDayCqDamCoreImplLightboxLightboxServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplMetadataEditorSelectComponentHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> granitedata) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(granitedata);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo res;
        reqObj->comDayCqDamCoreImplMetadataEditorSelectComponentHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_dam_allow_all_mime, QList<QString> cq_dam_allowed_asset_mimes) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_allow_all_mime);
    Q_UNUSED(cq_dam_allowed_asset_mimes);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo res;
        reqObj->comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_dam_detect_asset_mime_from_content) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_detect_asset_mime_from_content);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo res;
        reqObj->comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplMissingMetadataNotificationJob(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_dam_missingmetadata_notification_scheduler_istimebased, QString cq_dam_missingmetadata_notification_scheduler_timebased_rule, qint32 cq_dam_missingmetadata_notification_scheduler_period_rule, QString cq_dam_missingmetadata_notification_recipient) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_missingmetadata_notification_scheduler_istimebased);
    Q_UNUSED(cq_dam_missingmetadata_notification_scheduler_timebased_rule);
    Q_UNUSED(cq_dam_missingmetadata_notification_scheduler_period_rule);
    Q_UNUSED(cq_dam_missingmetadata_notification_recipient);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplMissingMetadataNotificationJobInfo res;
        reqObj->comDayCqDamCoreImplMissingMetadataNotificationJobResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString process_label, bool notify_on_complete) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(process_label);
    Q_UNUSED(notify_on_complete);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo res;
        reqObj->comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplProcessTextExtractionProcess(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> mime_types, qint32 max_extract) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(mime_types);
    Q_UNUSED(max_extract);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplProcessTextExtractionProcessInfo res;
        reqObj->comDayCqDamCoreImplProcessTextExtractionProcessResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplRenditionMakerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool xmp_propagate, QList<QString> xmp_excludes) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(xmp_propagate);
    Q_UNUSED(xmp_excludes);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplRenditionMakerImplInfo res;
        reqObj->comDayCqDamCoreImplRenditionMakerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplReportsReportExportService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 query_batch_size) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(query_batch_size);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplReportsReportExportServiceInfo res;
        reqObj->comDayCqDamCoreImplReportsReportExportServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplReportsReportPurgeService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString scheduler_expression, qint32 max_saved_reports, qint32 time_duration, bool enable_report_purge) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(scheduler_expression);
    Q_UNUSED(max_saved_reports);
    Q_UNUSED(time_duration);
    Q_UNUSED(enable_report_purge);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplReportsReportPurgeServiceInfo res;
        reqObj->comDayCqDamCoreImplReportsReportPurgeServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplServletAssetDownloadServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplServletAssetDownloadServletInfo res;
        reqObj->comDayCqDamCoreImplServletAssetDownloadServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplServletAssetStatusServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 cq_dam_batch_status_maxassets) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_batch_status_maxassets);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplServletAssetStatusServletInfo res;
        reqObj->comDayCqDamCoreImplServletAssetStatusServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplServletAssetXMPSearchServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 cq_dam_batch_indesign_maxassets) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_batch_indesign_maxassets);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplServletAssetXMPSearchServletInfo res;
        reqObj->comDayCqDamCoreImplServletAssetXMPSearchServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplServletBatchMetadataServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_dam_batch_metadata_asset_default, QList<QString> cq_dam_batch_metadata_collection_default, qint32 cq_dam_batch_metadata_maxresources) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_batch_metadata_asset_default);
    Q_UNUSED(cq_dam_batch_metadata_collection_default);
    Q_UNUSED(cq_dam_batch_metadata_maxresources);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplServletBatchMetadataServletInfo res;
        reqObj->comDayCqDamCoreImplServletBatchMetadataServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplServletBinaryProviderServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> sling_servlet_resource_types, QList<QString> sling_servlet_methods, bool cq_dam_drm_enable) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sling_servlet_resource_types);
    Q_UNUSED(sling_servlet_methods);
    Q_UNUSED(cq_dam_drm_enable);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplServletBinaryProviderServletInfo res;
        reqObj->comDayCqDamCoreImplServletBinaryProviderServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplServletCollectionServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_dam_batch_collection_properties, qint32 cq_dam_batch_collection_maxcollections) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_batch_collection_properties);
    Q_UNUSED(cq_dam_batch_collection_maxcollections);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplServletCollectionServletInfo res;
        reqObj->comDayCqDamCoreImplServletCollectionServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplServletCollectionsServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_dam_batch_collections_properties, qint32 cq_dam_batch_collections_limit) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_batch_collections_properties);
    Q_UNUSED(cq_dam_batch_collections_limit);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplServletCollectionsServletInfo res;
        reqObj->comDayCqDamCoreImplServletCollectionsServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplServletCompanionServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString more_info, QString mntoverlaydamguicontentassetsmoreinfo_htmlpath) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(more_info);
    Q_UNUSED(mntoverlaydamguicontentassetsmoreinfo_htmlpath);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplServletCompanionServletInfo res;
        reqObj->comDayCqDamCoreImplServletCompanionServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplServletCreateAssetServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool detect_duplicate) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(detect_duplicate);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplServletCreateAssetServletInfo res;
        reqObj->comDayCqDamCoreImplServletCreateAssetServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplServletDamContentDispositionFilter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_mime_type_blacklist, bool cq_dam_empty_mime) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_mime_type_blacklist);
    Q_UNUSED(cq_dam_empty_mime);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplServletDamContentDispositionFilterInfo res;
        reqObj->comDayCqDamCoreImplServletDamContentDispositionFilterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplServletGuidLookupFilter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_dam_core_guidlookupfilter_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_core_guidlookupfilter_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplServletGuidLookupFilterInfo res;
        reqObj->comDayCqDamCoreImplServletGuidLookupFilterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplServletHealthCheckServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString cq_dam_sync_workflow_id, QList<QString> cq_dam_sync_folder_types) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_sync_workflow_id);
    Q_UNUSED(cq_dam_sync_folder_types);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplServletHealthCheckServletInfo res;
        reqObj->comDayCqDamCoreImplServletHealthCheckServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplServletMetadataGetServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString sling_servlet_resource_types, QString sling_servlet_methods, QString sling_servlet_extensions, QString sling_servlet_selectors) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sling_servlet_resource_types);
    Q_UNUSED(sling_servlet_methods);
    Q_UNUSED(sling_servlet_extensions);
    Q_UNUSED(sling_servlet_selectors);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplServletMetadataGetServletInfo res;
        reqObj->comDayCqDamCoreImplServletMetadataGetServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_dam_drm_enable) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_drm_enable);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo res;
        reqObj->comDayCqDamCoreImplServletMultipleLicenseAcceptServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplServletResourceCollectionServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> sling_servlet_resource_types, QString sling_servlet_methods, QString sling_servlet_selectors, QString download_config, QString view_selector, bool send_email) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sling_servlet_resource_types);
    Q_UNUSED(sling_servlet_methods);
    Q_UNUSED(sling_servlet_selectors);
    Q_UNUSED(download_config);
    Q_UNUSED(view_selector);
    Q_UNUSED(send_email);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplServletResourceCollectionServletInfo res;
        reqObj->comDayCqDamCoreImplServletResourceCollectionServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool create_preview_enabled, bool update_preview_enabled, qint32 queue_size, QString folder_preview_rendition_regex) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(create_preview_enabled);
    Q_UNUSED(update_preview_enabled);
    Q_UNUSED(queue_size);
    Q_UNUSED(folder_preview_rendition_regex);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo res;
        reqObj->comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreImplUnzipUnzipConfig(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 cq_dam_config_unzip_maxuncompressedsize, QString cq_dam_config_unzip_encoding) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_config_unzip_maxuncompressedsize);
    Q_UNUSED(cq_dam_config_unzip_encoding);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreImplUnzipUnzipConfigInfo res;
        reqObj->comDayCqDamCoreImplUnzipUnzipConfigResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreProcessExifToolExtractMetadataProcess(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString process_label, bool cq_dam_enable_sha1) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(process_label);
    Q_UNUSED(cq_dam_enable_sha1);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo res;
        reqObj->comDayCqDamCoreProcessExifToolExtractMetadataProcessResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreProcessExtractMetadataProcess(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString process_label, bool cq_dam_enable_sha1) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(process_label);
    Q_UNUSED(cq_dam_enable_sha1);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreProcessExtractMetadataProcessInfo res;
        reqObj->comDayCqDamCoreProcessExtractMetadataProcessResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamCoreProcessMetadataProcessorProcess(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString process_label, bool cq_dam_enable_sha1, QList<QString> cq_dam_metadata_xssprotected_properties) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(process_label);
    Q_UNUSED(cq_dam_enable_sha1);
    Q_UNUSED(cq_dam_metadata_xssprotected_properties);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamCoreProcessMetadataProcessorProcessInfo res;
        reqObj->comDayCqDamCoreProcessMetadataProcessorProcessResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamHandlerFfmpegLocatorImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> executable_searchpath) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(executable_searchpath);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamHandlerFfmpegLocatorImplInfo res;
        reqObj->comDayCqDamHandlerFfmpegLocatorImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString event_filter, QList<QString> fontmgr_system_font_dir, QString fontmgr_adobe_font_dir, QString fontmgr_customer_font_dir) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(event_filter);
    Q_UNUSED(fontmgr_system_font_dir);
    Q_UNUSED(fontmgr_adobe_font_dir);
    Q_UNUSED(fontmgr_customer_font_dir);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo res;
        reqObj->comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamHandlerStandardPdfPdfHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool raster_annotation) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(raster_annotation);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamHandlerStandardPdfPdfHandlerInfo res;
        reqObj->comDayCqDamHandlerStandardPdfPdfHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamHandlerStandardPsPostScriptHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool raster_annotation) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(raster_annotation);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamHandlerStandardPsPostScriptHandlerInfo res;
        reqObj->comDayCqDamHandlerStandardPsPostScriptHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamHandlerStandardPsdPsdHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 large_file_threshold) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(large_file_threshold);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamHandlerStandardPsdPsdHandlerInfo res;
        reqObj->comDayCqDamHandlerStandardPsdPsdHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamIdsImplIDSJobProcessor(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enable_multisession, bool ids_cc_enable, bool enable_retry, bool enable_retry_scripterror, QString externalizer_domain_cqhost, QString externalizer_domain_http) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enable_multisession);
    Q_UNUSED(ids_cc_enable);
    Q_UNUSED(enable_retry);
    Q_UNUSED(enable_retry_scripterror);
    Q_UNUSED(externalizer_domain_cqhost);
    Q_UNUSED(externalizer_domain_http);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamIdsImplIDSJobProcessorInfo res;
        reqObj->comDayCqDamIdsImplIDSJobProcessorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamIdsImplIDSPoolManagerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 max_errors_to_blacklist, qint32 retry_interval_to_whitelist, qint32 connect_timeout, qint32 socket_timeout, QString process_label, qint32 connection_use_max) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(max_errors_to_blacklist);
    Q_UNUSED(retry_interval_to_whitelist);
    Q_UNUSED(connect_timeout);
    Q_UNUSED(socket_timeout);
    Q_UNUSED(process_label);
    Q_UNUSED(connection_use_max);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamIdsImplIDSPoolManagerImplInfo res;
        reqObj->comDayCqDamIdsImplIDSPoolManagerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamInddImplHandlerIndesignXMPHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString process_label, bool extract_pages) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(process_label);
    Q_UNUSED(extract_pages);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamInddImplHandlerIndesignXMPHandlerInfo res;
        reqObj->comDayCqDamInddImplHandlerIndesignXMPHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamInddImplServletSnippetCreationServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 snippetcreation_maxcollections) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(snippetcreation_maxcollections);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamInddImplServletSnippetCreationServletInfo res;
        reqObj->comDayCqDamInddImplServletSnippetCreationServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamInddProcessINDDMediaExtractProcess(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString process_label, QString cq_dam_indd_pages_regex, bool ids_job_decoupled, QString ids_job_workflow_model) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(process_label);
    Q_UNUSED(cq_dam_indd_pages_regex);
    Q_UNUSED(ids_job_decoupled);
    Q_UNUSED(ids_job_workflow_model);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamInddProcessINDDMediaExtractProcessInfo res;
        reqObj->comDayCqDamInddProcessINDDMediaExtractProcessResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 batch_commit_size) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(batch_commit_size);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo res;
        reqObj->comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString scheduler_expression) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(scheduler_expression);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo res;
        reqObj->comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool delete_zip_file) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(delete_zip_file);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo res;
        reqObj->comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_dam_s7dam_dynamicmediaconfigeventlistener_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_s7dam_dynamicmediaconfigeventlistener_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo res;
        reqObj->comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString scheduler_expression, bool scheduler_concurrent) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(scheduler_expression);
    Q_UNUSED(scheduler_concurrent);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo res;
        reqObj->comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamS7damCommonPostServletsSetCreateHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString sling_post_operation, QString sling_servlet_methods) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sling_post_operation);
    Q_UNUSED(sling_servlet_methods);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo res;
        reqObj->comDayCqDamS7damCommonPostServletsSetCreateHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamS7damCommonPostServletsSetModifyHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString sling_post_operation, QString sling_servlet_methods) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sling_post_operation);
    Q_UNUSED(sling_servlet_methods);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo res;
        reqObj->comDayCqDamS7damCommonPostServletsSetModifyHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString process_label) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(process_label);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo res;
        reqObj->comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamS7damCommonS7damDamChangeEventListener(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_dam_s7dam_damchangeeventlistener_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_s7dam_damchangeeventlistener_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamS7damCommonS7damDamChangeEventListenerInfo res;
        reqObj->comDayCqDamS7damCommonS7damDamChangeEventListenerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamS7damCommonServletsS7damProductInfoServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString sling_servlet_paths, QString sling_servlet_methods) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sling_servlet_paths);
    Q_UNUSED(sling_servlet_methods);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamS7damCommonServletsS7damProductInfoServletInfo res;
        reqObj->comDayCqDamS7damCommonServletsS7damProductInfoServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name, qint32 cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name, qint32 cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name, qint32 cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name, qint32 cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name, qint32 cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name, qint32 cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name);
    Q_UNUSED(cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name);
    Q_UNUSED(cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name);
    Q_UNUSED(cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name);
    Q_UNUSED(cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name);
    Q_UNUSED(cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name);
    Q_UNUSED(cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo res;
        reqObj->comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamScene7ImplScene7APIClientImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 cq_dam_scene7_apiclient_recordsperpage_nofilter_name, qint32 cq_dam_scene7_apiclient_recordsperpage_withfilter_name) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_scene7_apiclient_recordsperpage_nofilter_name);
    Q_UNUSED(cq_dam_scene7_apiclient_recordsperpage_withfilter_name);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamScene7ImplScene7APIClientImplInfo res;
        reqObj->comDayCqDamScene7ImplScene7APIClientImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_dam_scene7_assetmimetypeservice_mapping) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_scene7_assetmimetypeservice_mapping);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo res;
        reqObj->comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamScene7ImplScene7ConfigurationEventListener(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_dam_scene7_configurationeventlistener_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_scene7_configurationeventlistener_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo res;
        reqObj->comDayCqDamScene7ImplScene7ConfigurationEventListenerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamScene7ImplScene7DamChangeEventListener(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_dam_scene7_damchangeeventlistener_enabled, QList<QString> cq_dam_scene7_damchangeeventlistener_observed_paths) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_scene7_damchangeeventlistener_enabled);
    Q_UNUSED(cq_dam_scene7_damchangeeventlistener_observed_paths);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamScene7ImplScene7DamChangeEventListenerInfo res;
        reqObj->comDayCqDamScene7ImplScene7DamChangeEventListenerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString scene7_flash_templates_rti, QString scene7_flash_templates_rsi, QString scene7_flash_templates_rb, QString scene7_flash_templates_rurl, QString scene7_flash_template_url_format_parameter) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(scene7_flash_templates_rti);
    Q_UNUSED(scene7_flash_templates_rsi);
    Q_UNUSED(scene7_flash_templates_rb);
    Q_UNUSED(scene7_flash_templates_rurl);
    Q_UNUSED(scene7_flash_template_url_format_parameter);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo res;
        reqObj->comDayCqDamScene7ImplScene7FlashTemplatesServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamScene7ImplScene7UploadServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 cq_dam_scene7_uploadservice_activejobtimeout_label, qint32 cq_dam_scene7_uploadservice_connectionmaxperroute_label) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_dam_scene7_uploadservice_activejobtimeout_label);
    Q_UNUSED(cq_dam_scene7_uploadservice_connectionmaxperroute_label);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamScene7ImplScene7UploadServiceImplInfo res;
        reqObj->comDayCqDamScene7ImplScene7UploadServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString get_cache_expiration_unit, qint32 get_cache_expiration_value) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(get_cache_expiration_unit);
    Q_UNUSED(get_cache_expiration_value);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo res;
        reqObj->comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamStockIntegrationImplConfigurationStockConfiguration(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString locale, QString ims_config) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(locale);
    Q_UNUSED(ims_config);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo res;
        reqObj->comDayCqDamStockIntegrationImplConfigurationStockConfigurationResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqDamVideoImplServletVideoTestServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqDamVideoImplServletVideoTestServletInfo res;
        reqObj->comDayCqDamVideoImplServletVideoTestServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqExtwidgetServletsImageSpriteServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 max_width, qint32 max_height) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(max_width);
    Q_UNUSED(max_height);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqExtwidgetServletsImageSpriteServletInfo res;
        reqObj->comDayCqExtwidgetServletsImageSpriteServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqImageInternalFontFontHelper(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> fontpath, qint32 oversampling_factor) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(fontpath);
    Q_UNUSED(oversampling_factor);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqImageInternalFontFontHelperInfo res;
        reqObj->comDayCqImageInternalFontFontHelperResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqJcrclustersupportClusterStartLevelController(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cluster_level_enable, qint32 cluster_master_level, qint32 cluster_slave_level) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cluster_level_enable);
    Q_UNUSED(cluster_master_level);
    Q_UNUSED(cluster_slave_level);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqJcrclustersupportClusterStartLevelControllerInfo res;
        reqObj->comDayCqJcrclustersupportClusterStartLevelControllerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqMailerDefaultMailService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString smtp_host, qint32 smtp_port, QString smtp_user, QString smtp_password, QString from_address, bool smtp_ssl, bool smtp_starttls, bool debug_email) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(smtp_host);
    Q_UNUSED(smtp_port);
    Q_UNUSED(smtp_user);
    Q_UNUSED(smtp_password);
    Q_UNUSED(from_address);
    Q_UNUSED(smtp_ssl);
    Q_UNUSED(smtp_starttls);
    Q_UNUSED(debug_email);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqMailerDefaultMailServiceInfo res;
        reqObj->comDayCqMailerDefaultMailServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqMailerImplCqMailingService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString max_recipient_count) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(max_recipient_count);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqMailerImplCqMailingServiceInfo res;
        reqObj->comDayCqMailerImplCqMailingServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqMailerImplEmailCqEmailTemplateFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString mailer_email_charset) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(mailer_email_charset);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqMailerImplEmailCqEmailTemplateFactoryInfo res;
        reqObj->comDayCqMailerImplEmailCqEmailTemplateFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqMailerImplEmailCqRetrieverTemplateFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool mailer_email_embed, QString mailer_email_charset, QString mailer_email_retriever_user_id, QString mailer_email_retriever_user_pwd) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(mailer_email_embed);
    Q_UNUSED(mailer_email_charset);
    Q_UNUSED(mailer_email_retriever_user_id);
    Q_UNUSED(mailer_email_retriever_user_pwd);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo res;
        reqObj->comDayCqMailerImplEmailCqRetrieverTemplateFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqMcmCampaignImplIntegrationConfigImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> aem_mcm_campaign_form_constraints, QString aem_mcm_campaign_public_url, bool aem_mcm_campaign_relaxed_ssl) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(aem_mcm_campaign_form_constraints);
    Q_UNUSED(aem_mcm_campaign_public_url);
    Q_UNUSED(aem_mcm_campaign_relaxed_ssl);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqMcmCampaignImplIntegrationConfigImplInfo res;
        reqObj->comDayCqMcmCampaignImplIntegrationConfigImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo res;
        reqObj->comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString from_address, QString sender_host, QString max_bounce_count) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(from_address);
    Q_UNUSED(sender_host);
    Q_UNUSED(max_bounce_count);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo res;
        reqObj->comDayCqMcmCoreNewsletterNewsletterEmailServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqMcmImplMCMConfiguration(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> experience_indirection, QList<QString> touchpoint_indirection) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(experience_indirection);
    Q_UNUSED(touchpoint_indirection);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqMcmImplMCMConfigurationInfo res;
        reqObj->comDayCqMcmImplMCMConfigurationResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern, QString component_resource_type) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    Q_UNUSED(component_resource_type);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo res;
        reqObj->comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern, QString component_resource_type) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    Q_UNUSED(component_resource_type);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo res;
        reqObj->comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo res;
        reqObj->comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo res;
        reqObj->comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern, QString component_resource_type) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    Q_UNUSED(component_resource_type);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo res;
        reqObj->comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqNotificationImplNotificationServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString event_filter) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(event_filter);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqNotificationImplNotificationServiceImplInfo res;
        reqObj->comDayCqNotificationImplNotificationServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqPersonalizationImplServletsTargetingConfigurationServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool forcelocation) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(forcelocation);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo res;
        reqObj->comDayCqPersonalizationImplServletsTargetingConfigurationServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqPollingImporterImplManagedPollConfigImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString id, bool enabled, bool reference, qint32 interval, QString expression, QString source, QString target, QString login, QString password) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(id);
    Q_UNUSED(enabled);
    Q_UNUSED(reference);
    Q_UNUSED(interval);
    Q_UNUSED(expression);
    Q_UNUSED(source);
    Q_UNUSED(target);
    Q_UNUSED(login);
    Q_UNUSED(password);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqPollingImporterImplManagedPollConfigImplInfo res;
        reqObj->comDayCqPollingImporterImplManagedPollConfigImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqPollingImporterImplManagedPollingImporterImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString importer_user) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(importer_user);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqPollingImporterImplManagedPollingImporterImplInfo res;
        reqObj->comDayCqPollingImporterImplManagedPollingImporterImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqPollingImporterImplPollingImporterImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 importer_min_interval, QString importer_user, QList<QString> exclude_paths, QList<QString> include_paths) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(importer_min_interval);
    Q_UNUSED(importer_user);
    Q_UNUSED(exclude_paths);
    Q_UNUSED(include_paths);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqPollingImporterImplPollingImporterImplInfo res;
        reqObj->comDayCqPollingImporterImplPollingImporterImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqReplicationAuditReplicationEventListener(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqReplicationAuditReplicationEventListenerInfo res;
        reqObj->comDayCqReplicationAuditReplicationEventListenerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqReplicationContentStaticContentBuilder(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString host, qint32 port) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(host);
    Q_UNUSED(port);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqReplicationContentStaticContentBuilderInfo res;
        reqObj->comDayCqReplicationContentStaticContentBuilderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqReplicationImplAgentManagerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString job_topics, QString service_user_target, QString agent_provider_target) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(job_topics);
    Q_UNUSED(service_user_target);
    Q_UNUSED(agent_provider_target);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqReplicationImplAgentManagerImplInfo res;
        reqObj->comDayCqReplicationImplAgentManagerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqReplicationImplContentDurboBinaryLessContentBuilder(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 binary_threshold) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(binary_threshold);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo res;
        reqObj->comDayCqReplicationImplContentDurboBinaryLessContentBuilderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqReplicationImplContentDurboDurboImportConfigurationProv(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool preserve_hierarchy_nodes, bool ignore_versioning, bool import_acl, qint32 save_threshold, bool preserve_user_paths, bool preserve_uuid, QList<QString> preserve_uuid_nodetypes, QList<QString> preserve_uuid_subtrees, bool auto_commit) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(preserve_hierarchy_nodes);
    Q_UNUSED(ignore_versioning);
    Q_UNUSED(import_acl);
    Q_UNUSED(save_threshold);
    Q_UNUSED(preserve_user_paths);
    Q_UNUSED(preserve_uuid);
    Q_UNUSED(preserve_uuid_nodetypes);
    Q_UNUSED(preserve_uuid_subtrees);
    Q_UNUSED(auto_commit);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo res;
        reqObj->comDayCqReplicationImplContentDurboDurboImportConfigurationProvResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqReplicationImplReplicationContentFactoryProviderImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool replication_content_use_file_storage, qint32 replication_content_max_commit_attempts) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(replication_content_use_file_storage);
    Q_UNUSED(replication_content_max_commit_attempts);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqReplicationImplReplicationContentFactoryProviderImplInfo res;
        reqObj->comDayCqReplicationImplReplicationContentFactoryProviderImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqReplicationImplReplicationReceiverImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 receiver_tmpfile_threshold, bool receiver_packages_use_install) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(receiver_tmpfile_threshold);
    Q_UNUSED(receiver_packages_use_install);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqReplicationImplReplicationReceiverImplInfo res;
        reqObj->comDayCqReplicationImplReplicationReceiverImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqReplicationImplReplicatorImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool distribute_events) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(distribute_events);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqReplicationImplReplicatorImplInfo res;
        reqObj->comDayCqReplicationImplReplicatorImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqReplicationImplReverseReplicator(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 scheduler_period) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(scheduler_period);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqReplicationImplReverseReplicatorInfo res;
        reqObj->comDayCqReplicationImplReverseReplicatorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqReplicationImplTransportBinaryLessTransportHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> disabled_cipher_suites, QList<QString> enabled_cipher_suites) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(disabled_cipher_suites);
    Q_UNUSED(enabled_cipher_suites);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo res;
        reqObj->comDayCqReplicationImplTransportBinaryLessTransportHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqReplicationImplTransportHttp(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> disabled_cipher_suites, QList<QString> enabled_cipher_suites) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(disabled_cipher_suites);
    Q_UNUSED(enabled_cipher_suites);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqReplicationImplTransportHttpInfo res;
        reqObj->comDayCqReplicationImplTransportHttpResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqReportingImplCacheCacheImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool repcache_enable, qint32 repcache_ttl, qint32 repcache_max) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(repcache_enable);
    Q_UNUSED(repcache_ttl);
    Q_UNUSED(repcache_max);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqReportingImplCacheCacheImplInfo res;
        reqObj->comDayCqReportingImplCacheCacheImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqReportingImplConfigServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString repconf_timezone, QString repconf_locale, QString repconf_snapshots, QString repconf_repdir, qint32 repconf_hourofday, qint32 repconf_minofhour, qint32 repconf_maxrows, bool repconf_fakedata, QString repconf_snapshotuser, bool repconf_enforcesnapshotuser) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(repconf_timezone);
    Q_UNUSED(repconf_locale);
    Q_UNUSED(repconf_snapshots);
    Q_UNUSED(repconf_repdir);
    Q_UNUSED(repconf_hourofday);
    Q_UNUSED(repconf_minofhour);
    Q_UNUSED(repconf_maxrows);
    Q_UNUSED(repconf_fakedata);
    Q_UNUSED(repconf_snapshotuser);
    Q_UNUSED(repconf_enforcesnapshotuser);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqReportingImplConfigServiceImplInfo res;
        reqObj->comDayCqReportingImplConfigServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqReportingImplRLogAnalyzer(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString request_log_output) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(request_log_output);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqReportingImplRLogAnalyzerInfo res;
        reqObj->comDayCqReportingImplRLogAnalyzerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqRewriterLinkcheckerImplLinkCheckerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 scheduler_period, bool scheduler_concurrent, qint32 service_bad_link_tolerance_interval, QList<QString> service_check_override_patterns, bool service_cache_broken_internal_links, QList<QString> service_special_link_prefix, QList<QString> service_special_link_patterns) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(scheduler_period);
    Q_UNUSED(scheduler_concurrent);
    Q_UNUSED(service_bad_link_tolerance_interval);
    Q_UNUSED(service_check_override_patterns);
    Q_UNUSED(service_cache_broken_internal_links);
    Q_UNUSED(service_special_link_prefix);
    Q_UNUSED(service_special_link_patterns);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo res;
        reqObj->comDayCqRewriterLinkcheckerImplLinkCheckerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqRewriterLinkcheckerImplLinkCheckerTask(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 scheduler_period, bool scheduler_concurrent, qint32 good_link_test_interval, qint32 bad_link_test_interval, qint32 link_unused_interval, qint32 connection_timeout) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(scheduler_period);
    Q_UNUSED(scheduler_concurrent);
    Q_UNUSED(good_link_test_interval);
    Q_UNUSED(bad_link_test_interval);
    Q_UNUSED(link_unused_interval);
    Q_UNUSED(connection_timeout);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo res;
        reqObj->comDayCqRewriterLinkcheckerImplLinkCheckerTaskResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool linkcheckertransformer_disable_rewriting, bool linkcheckertransformer_disable_checking, qint32 linkcheckertransformer_map_cache_size, bool linkcheckertransformer_strict_extension_check, bool linkcheckertransformer_strip_htmlt_extension, QList<QString> linkcheckertransformer_rewrite_elements, QList<QString> linkcheckertransformer_strip_extension_path_blacklist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(linkcheckertransformer_disable_rewriting);
    Q_UNUSED(linkcheckertransformer_disable_checking);
    Q_UNUSED(linkcheckertransformer_map_cache_size);
    Q_UNUSED(linkcheckertransformer_strict_extension_check);
    Q_UNUSED(linkcheckertransformer_strip_htmlt_extension);
    Q_UNUSED(linkcheckertransformer_rewrite_elements);
    Q_UNUSED(linkcheckertransformer_strip_extension_path_blacklist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo res;
        reqObj->comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_max_links_per_host, bool service_save_external_link_references) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_max_links_per_host);
    Q_UNUSED(service_save_external_link_references);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo res;
        reqObj->comDayCqRewriterLinkcheckerImplLinkInfoStorageImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqRewriterProcessorImplHtmlParserFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> htmlparser_process_tags, bool htmlparser_preserve_camel_case) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(htmlparser_process_tags);
    Q_UNUSED(htmlparser_preserve_camel_case);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqRewriterProcessorImplHtmlParserFactoryInfo res;
        reqObj->comDayCqRewriterProcessorImplHtmlParserFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqSearchImplBuilderQueryBuilderImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> excerpt_properties, qint32 cache_max_entries, qint32 cache_entry_lifetime, bool xpath_union) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(excerpt_properties);
    Q_UNUSED(cache_max_entries);
    Q_UNUSED(cache_entry_lifetime);
    Q_UNUSED(xpath_union);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqSearchImplBuilderQueryBuilderImplInfo res;
        reqObj->comDayCqSearchImplBuilderQueryBuilderImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqSearchSuggestImplSuggestionIndexManagerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString path_builder_target, QString suggest_basepath) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(path_builder_target);
    Q_UNUSED(suggest_basepath);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo res;
        reqObj->comDayCqSearchSuggestImplSuggestionIndexManagerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_searchpromote_confighandler_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_searchpromote_confighandler_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo res;
        reqObj->comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqSearchpromoteImplSearchPromoteServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString cq_searchpromote_configuration_server_uri, QString cq_searchpromote_configuration_environment, qint32 connection_timeout, qint32 socket_timeout) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_searchpromote_configuration_server_uri);
    Q_UNUSED(cq_searchpromote_configuration_environment);
    Q_UNUSED(connection_timeout);
    Q_UNUSED(socket_timeout);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqSearchpromoteImplSearchPromoteServiceImplInfo res;
        reqObj->comDayCqSearchpromoteImplSearchPromoteServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqSecurityACLSetup(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_aclsetup_rules) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_aclsetup_rules);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqSecurityACLSetupInfo res;
        reqObj->comDayCqSecurityACLSetupResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqStatisticsImplStatisticsServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 scheduler_period, bool scheduler_concurrent, QString path, QString workspace, QString keywords_path, bool async_entries) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(scheduler_period);
    Q_UNUSED(scheduler_concurrent);
    Q_UNUSED(path);
    Q_UNUSED(workspace);
    Q_UNUSED(keywords_path);
    Q_UNUSED(async_entries);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqStatisticsImplStatisticsServiceImplInfo res;
        reqObj->comDayCqStatisticsImplStatisticsServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqTaggingImplJcrTagManagerFactoryImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool validation_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(validation_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqTaggingImplJcrTagManagerFactoryImplInfo res;
        reqObj->comDayCqTaggingImplJcrTagManagerFactoryImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqTaggingImplSearchTagPredicateEvaluator(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool ignore_path) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(ignore_path);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqTaggingImplSearchTagPredicateEvaluatorInfo res;
        reqObj->comDayCqTaggingImplSearchTagPredicateEvaluatorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqTaggingImplTagGarbageCollector(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString scheduler_expression) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(scheduler_expression);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqTaggingImplTagGarbageCollectorInfo res;
        reqObj->comDayCqTaggingImplTagGarbageCollectorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_pagesupdatehandler_imageresourcetypes) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_pagesupdatehandler_imageresourcetypes);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo res;
        reqObj->comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_contentsync_pathrewritertransformer_mapping_links, QList<QString> cq_contentsync_pathrewritertransformer_mapping_clientlibs, QList<QString> cq_contentsync_pathrewritertransformer_mapping_images, QString cq_contentsync_pathrewritertransformer_attribute_pattern, QString cq_contentsync_pathrewritertransformer_clientlibrary_pattern, QString cq_contentsync_pathrewritertransformer_clientlibrary_replace) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_contentsync_pathrewritertransformer_mapping_links);
    Q_UNUSED(cq_contentsync_pathrewritertransformer_mapping_clientlibs);
    Q_UNUSED(cq_contentsync_pathrewritertransformer_mapping_images);
    Q_UNUSED(cq_contentsync_pathrewritertransformer_attribute_pattern);
    Q_UNUSED(cq_contentsync_pathrewritertransformer_clientlibrary_pattern);
    Q_UNUSED(cq_contentsync_pathrewritertransformer_clientlibrary_replace);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo res;
        reqObj->comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplAuthoringUIModeServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString authoring_ui_mode_service_default) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(authoring_ui_mode_service_default);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo res;
        reqObj->comDayCqWcmCoreImplAuthoringUIModeServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplCommandsWCMCommandServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> wcmcommandservlet_delete_whitelist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(wcmcommandservlet_delete_whitelist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplCommandsWCMCommandServletInfo res;
        reqObj->comDayCqWcmCoreImplCommandsWCMCommandServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString dim_default_mode, bool dim_appcache_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(dim_default_mode);
    Q_UNUSED(dim_appcache_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo res;
        reqObj->comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplEventPageEventAuditListener(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString configured) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(configured);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplEventPageEventAuditListenerInfo res;
        reqObj->comDayCqWcmCoreImplEventPageEventAuditListenerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplEventPagePostProcessor(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> paths) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(paths);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplEventPagePostProcessorInfo res;
        reqObj->comDayCqWcmCoreImplEventPagePostProcessorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplEventRepositoryChangeEventListener(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> paths, QList<QString> excluded_paths) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(paths);
    Q_UNUSED(excluded_paths);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo res;
        reqObj->comDayCqWcmCoreImplEventRepositoryChangeEventListenerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplEventTemplatePostProcessor(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString paths) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(paths);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplEventTemplatePostProcessorInfo res;
        reqObj->comDayCqWcmCoreImplEventTemplatePostProcessorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplLanguageManagerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString langmgr_list_path, QList<QString> langmgr_country_default) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(langmgr_list_path);
    Q_UNUSED(langmgr_country_default);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplLanguageManagerImplInfo res;
        reqObj->comDayCqWcmCoreImplLanguageManagerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString link_expired_prefix, bool link_expired_remove, QString link_expired_suffix, QString link_invalid_prefix, bool link_invalid_remove, QString link_invalid_suffix, QString link_predated_prefix, bool link_predated_remove, QString link_predated_suffix, QList<QString> link_wcmmodes) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(link_expired_prefix);
    Q_UNUSED(link_expired_remove);
    Q_UNUSED(link_expired_suffix);
    Q_UNUSED(link_invalid_prefix);
    Q_UNUSED(link_invalid_remove);
    Q_UNUSED(link_invalid_suffix);
    Q_UNUSED(link_predated_prefix);
    Q_UNUSED(link_predated_remove);
    Q_UNUSED(link_predated_suffix);
    Q_UNUSED(link_wcmmodes);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo res;
        reqObj->comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplPagePageInfoAggregatorImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString page_info_provider_property_regex_default, QString page_info_provider_property_name) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(page_info_provider_property_regex_default);
    Q_UNUSED(page_info_provider_property_name);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo res;
        reqObj->comDayCqWcmCoreImplPagePageInfoAggregatorImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplPagePageManagerFactoryImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString illegal_char_mapping, bool page_sub_tree_activation_check) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(illegal_char_mapping);
    Q_UNUSED(page_sub_tree_activation_check);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplPagePageManagerFactoryImplInfo res;
        reqObj->comDayCqWcmCoreImplPagePageManagerFactoryImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplReferencesContentContentReferenceConfig(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> content_reference_config_resource_types) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(content_reference_config_resource_types);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo res;
        reqObj->comDayCqWcmCoreImplReferencesContentContentReferenceConfigResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool dam_showexpired, bool dam_showhidden, bool tag_title_search, QString guess_total, QString dam_expiry_property) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(dam_showexpired);
    Q_UNUSED(dam_showhidden);
    Q_UNUSED(tag_title_search);
    Q_UNUSED(guess_total);
    Q_UNUSED(dam_expiry_property);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo res;
        reqObj->comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> item_resource_types) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(item_resource_types);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo res;
        reqObj->comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplServletsContentfinderPageViewHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString guess_total, bool tag_title_search) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(guess_total);
    Q_UNUSED(tag_title_search);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo res;
        reqObj->comDayCqWcmCoreImplServletsContentfinderPageViewHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplServletsFindReplaceServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> scope) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(scope);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplServletsFindReplaceServletInfo res;
        reqObj->comDayCqWcmCoreImplServletsFindReplaceServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplServletsReferenceSearchServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 referencesearchservlet_max_references_per_page, qint32 referencesearchservlet_max_pages) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(referencesearchservlet_max_references_per_page);
    Q_UNUSED(referencesearchservlet_max_pages);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplServletsReferenceSearchServletInfo res;
        reqObj->comDayCqWcmCoreImplServletsReferenceSearchServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplServletsThumbnailServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString workspace, QList<QString> dimensions) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(workspace);
    Q_UNUSED(dimensions);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplServletsThumbnailServletInfo res;
        reqObj->comDayCqWcmCoreImplServletsThumbnailServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplUtilsDefaultPageNameValidator(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString non_valid_chars) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(non_valid_chars);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo res;
        reqObj->comDayCqWcmCoreImplUtilsDefaultPageNameValidatorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString default_externalizer_domain) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(default_externalizer_domain);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo res;
        reqObj->comDayCqWcmCoreImplVariantsPageVariantsProviderImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplVersionManagerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool versionmanager_create_version_on_activation, bool versionmanager_purging_enabled, QList<QString> versionmanager_purge_paths, QList<QString> versionmanager_iv_paths, qint32 versionmanager_max_age_days, qint32 versionmanager_max_number_versions, qint32 versionmanager_min_number_versions) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(versionmanager_create_version_on_activation);
    Q_UNUSED(versionmanager_purging_enabled);
    Q_UNUSED(versionmanager_purge_paths);
    Q_UNUSED(versionmanager_iv_paths);
    Q_UNUSED(versionmanager_max_age_days);
    Q_UNUSED(versionmanager_max_number_versions);
    Q_UNUSED(versionmanager_min_number_versions);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplVersionManagerImplInfo res;
        reqObj->comDayCqWcmCoreImplVersionManagerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplVersionPurgeTask(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> versionpurge_paths, bool versionpurge_recursive, qint32 versionpurge_max_versions, qint32 versionpurge_min_versions, qint32 versionpurge_max_age_days) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(versionpurge_paths);
    Q_UNUSED(versionpurge_recursive);
    Q_UNUSED(versionpurge_max_versions);
    Q_UNUSED(versionpurge_min_versions);
    Q_UNUSED(versionpurge_max_age_days);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplVersionPurgeTaskInfo res;
        reqObj->comDayCqWcmCoreImplVersionPurgeTaskResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplWCMDebugFilter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool wcmdbgfilter_enabled, bool wcmdbgfilter_jsp_debug) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(wcmdbgfilter_enabled);
    Q_UNUSED(wcmdbgfilter_jsp_debug);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplWCMDebugFilterInfo res;
        reqObj->comDayCqWcmCoreImplWCMDebugFilterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplWCMDeveloperModeFilter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool wcmdevmodefilter_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(wcmdevmodefilter_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplWCMDeveloperModeFilterInfo res;
        reqObj->comDayCqWcmCoreImplWCMDeveloperModeFilterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreImplWarpTimeWarpFilter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString filter_order, QString filter_scope) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(filter_order);
    Q_UNUSED(filter_scope);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreImplWarpTimeWarpFilterInfo res;
        reqObj->comDayCqWcmCoreImplWarpTimeWarpFilterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreMvtMVTStatisticsImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString mvtstatistics_trackingurl) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(mvtstatistics_trackingurl);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreMvtMVTStatisticsImplInfo res;
        reqObj->comDayCqWcmCoreMvtMVTStatisticsImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreStatsPageViewStatisticsImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString pageviewstatistics_trackingurl, QString pageviewstatistics_trackingscript_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(pageviewstatistics_trackingurl);
    Q_UNUSED(pageviewstatistics_trackingscript_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreStatsPageViewStatisticsImplInfo res;
        reqObj->comDayCqWcmCoreStatsPageViewStatisticsImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmCoreWCMRequestFilter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString wcmfilter_mode) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(wcmfilter_mode);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmCoreWCMRequestFilterInfo res;
        reqObj->comDayCqWcmCoreWCMRequestFilterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterDesignPackageImporter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> extract_filter) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(extract_filter);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterDesignPackageImporterInfo res;
        reqObj->comDayCqWcmDesignimporterDesignPackageImporterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterImplCanvasBuilderImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString filepattern, bool build_page_nodes, bool build_client_libs, bool build_canvas_component) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(filepattern);
    Q_UNUSED(build_page_nodes);
    Q_UNUSED(build_client_libs);
    Q_UNUSED(build_canvas_component);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterImplCanvasBuilderImplInfo res;
        reqObj->comDayCqWcmDesignimporterImplCanvasBuilderImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 min_thread_pool_size, qint32 max_thread_pool_size) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(min_thread_pool_size);
    Q_UNUSED(max_thread_pool_size);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo res;
        reqObj->comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterImplEntryPreprocessorImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString search_pattern, QString replace_pattern) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(search_pattern);
    Q_UNUSED(replace_pattern);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo res;
        reqObj->comDayCqWcmDesignimporterImplEntryPreprocessorImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString filepattern, QList<QString> device_groups, bool build_page_nodes, bool build_client_libs, bool build_canvas_component) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(filepattern);
    Q_UNUSED(device_groups);
    Q_UNUSED(build_page_nodes);
    Q_UNUSED(build_client_libs);
    Q_UNUSED(build_canvas_component);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo res;
        reqObj->comDayCqWcmDesignimporterImplMobileCanvasBuilderImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo res;
        reqObj->comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo res;
        reqObj->comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo res;
        reqObj->comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo res;
        reqObj->comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo res;
        reqObj->comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern, QString component_resource_type) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    Q_UNUSED(component_resource_type);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo res;
        reqObj->comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo res;
        reqObj->comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo res;
        reqObj->comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo res;
        reqObj->comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo res;
        reqObj->comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo res;
        reqObj->comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern, QString component_resource_type) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    Q_UNUSED(component_resource_type);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo res;
        reqObj->comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo res;
        reqObj->comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo res;
        reqObj->comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern, QString component_resource_type) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    Q_UNUSED(component_resource_type);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo res;
        reqObj->comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern, QString component_resource_type) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    Q_UNUSED(component_resource_type);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo res;
        reqObj->comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString tagpattern) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(tagpattern);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo res;
        reqObj->comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmFoundationFormsImplFormChooserServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString service_name, QString sling_servlet_resource_types, QString sling_servlet_selectors, QList<QString> sling_servlet_methods, bool forms_formchooserservlet_advansesearch_require) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_name);
    Q_UNUSED(sling_servlet_resource_types);
    Q_UNUSED(sling_servlet_selectors);
    Q_UNUSED(sling_servlet_methods);
    Q_UNUSED(forms_formchooserservlet_advansesearch_require);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmFoundationFormsImplFormChooserServletInfo res;
        reqObj->comDayCqWcmFoundationFormsImplFormChooserServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool forms_formparagraphpostprocessor_enabled, QList<QString> forms_formparagraphpostprocessor_formresourcetypes) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(forms_formparagraphpostprocessor_enabled);
    Q_UNUSED(forms_formparagraphpostprocessor_formresourcetypes);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo res;
        reqObj->comDayCqWcmFoundationFormsImplFormParagraphPostProcessorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmFoundationFormsImplFormsHandlingServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name_whitelist, bool allow_expressions) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name_whitelist);
    Q_UNUSED(allow_expressions);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmFoundationFormsImplFormsHandlingServletInfo res;
        reqObj->comDayCqWcmFoundationFormsImplFormsHandlingServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmFoundationFormsImplMailServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString sling_servlet_resource_types, QString sling_servlet_selectors, QList<QString> resource_whitelist, QString resource_blacklist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sling_servlet_resource_types);
    Q_UNUSED(sling_servlet_selectors);
    Q_UNUSED(resource_whitelist);
    Q_UNUSED(resource_blacklist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmFoundationFormsImplMailServletInfo res;
        reqObj->comDayCqWcmFoundationFormsImplMailServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmFoundationImplAdaptiveImageComponentServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> adapt_supported_widths) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(adapt_supported_widths);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo res;
        reqObj->comDayCqWcmFoundationImplAdaptiveImageComponentServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmFoundationImplHTTPAuthHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString path, bool auth_http_nologin, QString auth_http_realm, QString auth_default_loginpage, QList<QString> auth_cred_form, QList<QString> auth_cred_utf8) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(path);
    Q_UNUSED(auth_http_nologin);
    Q_UNUSED(auth_http_realm);
    Q_UNUSED(auth_default_loginpage);
    Q_UNUSED(auth_cred_form);
    Q_UNUSED(auth_cred_utf8);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmFoundationImplHTTPAuthHandlerInfo res;
        reqObj->comDayCqWcmFoundationImplHTTPAuthHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmFoundationImplPageImpressionsTracker(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString sling_auth_requirements) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sling_auth_requirements);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmFoundationImplPageImpressionsTrackerInfo res;
        reqObj->comDayCqWcmFoundationImplPageImpressionsTrackerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmFoundationImplPageRedirectServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> excluded_resource_types) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(excluded_resource_types);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmFoundationImplPageRedirectServletInfo res;
        reqObj->comDayCqWcmFoundationImplPageRedirectServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> default_attachment_type_blacklist, QList<QString> baseline_attachment_type_blacklist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(default_attachment_type_blacklist);
    Q_UNUSED(baseline_attachment_type_blacklist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo res;
        reqObj->comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> parameter_whitelist, QList<QString> parameter_whitelist_prefixes, QList<QString> binary_parameter_whitelist, QList<QString> modifier_whitelist, QList<QString> operation_whitelist, QList<QString> operation_whitelist_prefixes, QList<QString> typehint_whitelist, QList<QString> resourcetype_whitelist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(parameter_whitelist);
    Q_UNUSED(parameter_whitelist_prefixes);
    Q_UNUSED(binary_parameter_whitelist);
    Q_UNUSED(modifier_whitelist);
    Q_UNUSED(operation_whitelist);
    Q_UNUSED(operation_whitelist_prefixes);
    Q_UNUSED(typehint_whitelist);
    Q_UNUSED(resourcetype_whitelist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo res;
        reqObj->comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool device_info_transformer_enabled, QString device_info_transformer_css_style) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(device_info_transformer_enabled);
    Q_UNUSED(device_info_transformer_css_style);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo res;
        reqObj->comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmMobileCoreImplRedirectRedirectFilter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool redirect_enabled, bool redirect_stats_enabled, QList<QString> redirect_extensions, QList<QString> redirect_paths) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(redirect_enabled);
    Q_UNUSED(redirect_stats_enabled);
    Q_UNUSED(redirect_extensions);
    Q_UNUSED(redirect_paths);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo res;
        reqObj->comDayCqWcmMobileCoreImplRedirectRedirectFilterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmMsmImplActionsContentCopyActionFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_wcm_msm_action_excludednodetypes, QList<QString> cq_wcm_msm_action_excludedparagraphitems, QList<QString> cq_wcm_msm_action_excludedprops, QString contentcopyaction_order_style) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_wcm_msm_action_excludednodetypes);
    Q_UNUSED(cq_wcm_msm_action_excludedparagraphitems);
    Q_UNUSED(cq_wcm_msm_action_excludedprops);
    Q_UNUSED(contentcopyaction_order_style);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo res;
        reqObj->comDayCqWcmMsmImplActionsContentCopyActionFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmMsmImplActionsContentDeleteActionFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_wcm_msm_action_excludednodetypes, QList<QString> cq_wcm_msm_action_excludedparagraphitems, QList<QString> cq_wcm_msm_action_excludedprops) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_wcm_msm_action_excludednodetypes);
    Q_UNUSED(cq_wcm_msm_action_excludedparagraphitems);
    Q_UNUSED(cq_wcm_msm_action_excludedprops);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo res;
        reqObj->comDayCqWcmMsmImplActionsContentDeleteActionFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmMsmImplActionsContentUpdateActionFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_wcm_msm_action_excludednodetypes, QList<QString> cq_wcm_msm_action_excludedparagraphitems, QList<QString> cq_wcm_msm_action_excludedprops, QList<QString> cq_wcm_msm_action_ignored_mixin) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_wcm_msm_action_excludednodetypes);
    Q_UNUSED(cq_wcm_msm_action_excludedparagraphitems);
    Q_UNUSED(cq_wcm_msm_action_excludedprops);
    Q_UNUSED(cq_wcm_msm_action_ignored_mixin);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo res;
        reqObj->comDayCqWcmMsmImplActionsContentUpdateActionFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmMsmImplActionsOrderChildrenActionFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_wcm_msm_action_excludednodetypes, QList<QString> cq_wcm_msm_action_excludedparagraphitems, QList<QString> cq_wcm_msm_action_excludedprops) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_wcm_msm_action_excludednodetypes);
    Q_UNUSED(cq_wcm_msm_action_excludedparagraphitems);
    Q_UNUSED(cq_wcm_msm_action_excludedprops);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo res;
        reqObj->comDayCqWcmMsmImplActionsOrderChildrenActionFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmMsmImplActionsPageMoveActionFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_wcm_msm_action_excludednodetypes, QList<QString> cq_wcm_msm_action_excludedparagraphitems, QList<QString> cq_wcm_msm_action_excludedprops, bool cq_wcm_msm_impl_actions_pagemove_prop_reference_update) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_wcm_msm_action_excludednodetypes);
    Q_UNUSED(cq_wcm_msm_action_excludedparagraphitems);
    Q_UNUSED(cq_wcm_msm_action_excludedprops);
    Q_UNUSED(cq_wcm_msm_impl_actions_pagemove_prop_reference_update);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo res;
        reqObj->comDayCqWcmMsmImplActionsPageMoveActionFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_wcm_msm_action_excludednodetypes, QList<QString> cq_wcm_msm_action_excludedparagraphitems, QList<QString> cq_wcm_msm_action_excludedprops, bool cq_wcm_msm_impl_action_referencesupdate_prop_update_nested) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_wcm_msm_action_excludednodetypes);
    Q_UNUSED(cq_wcm_msm_action_excludedparagraphitems);
    Q_UNUSED(cq_wcm_msm_action_excludedprops);
    Q_UNUSED(cq_wcm_msm_impl_action_referencesupdate_prop_update_nested);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo res;
        reqObj->comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmMsmImplActionsVersionCopyActionFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cq_wcm_msm_action_excludednodetypes, QList<QString> cq_wcm_msm_action_excludedparagraphitems, QList<QString> cq_wcm_msm_action_excludedprops) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_wcm_msm_action_excludednodetypes);
    Q_UNUSED(cq_wcm_msm_action_excludedparagraphitems);
    Q_UNUSED(cq_wcm_msm_action_excludedprops);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo res;
        reqObj->comDayCqWcmMsmImplActionsVersionCopyActionFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmMsmImplLiveRelationshipManagerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString liverelationshipmgr_relationsconfig_default) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(liverelationshipmgr_relationsconfig_default);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmMsmImplLiveRelationshipManagerImplInfo res;
        reqObj->comDayCqWcmMsmImplLiveRelationshipManagerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmMsmImplRolloutManagerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString event_filter, QList<QString> rolloutmgr_excludedprops_default, QList<QString> rolloutmgr_excludedparagraphprops_default, QList<QString> rolloutmgr_excludednodetypes_default, qint32 rolloutmgr_threadpool_maxsize, qint32 rolloutmgr_threadpool_maxshutdowntime, QString rolloutmgr_threadpool_priority, qint32 rolloutmgr_commit_size, bool rolloutmgr_conflicthandling_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(event_filter);
    Q_UNUSED(rolloutmgr_excludedprops_default);
    Q_UNUSED(rolloutmgr_excludedparagraphprops_default);
    Q_UNUSED(rolloutmgr_excludednodetypes_default);
    Q_UNUSED(rolloutmgr_threadpool_maxsize);
    Q_UNUSED(rolloutmgr_threadpool_maxshutdowntime);
    Q_UNUSED(rolloutmgr_threadpool_priority);
    Q_UNUSED(rolloutmgr_commit_size);
    Q_UNUSED(rolloutmgr_conflicthandling_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmMsmImplRolloutManagerImplInfo res;
        reqObj->comDayCqWcmMsmImplRolloutManagerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmMsmImplServletsAuditLogServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 auditlogservlet_default_events_count, QString auditlogservlet_default_path) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(auditlogservlet_default_events_count);
    Q_UNUSED(auditlogservlet_default_path);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmMsmImplServletsAuditLogServletInfo res;
        reqObj->comDayCqWcmMsmImplServletsAuditLogServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmNotificationEmailImplEmailChannel(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString email_from) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(email_from);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmNotificationEmailImplEmailChannelInfo res;
        reqObj->comDayCqWcmNotificationEmailImplEmailChannelResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmNotificationImplNotificationManagerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> event_topics) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(event_topics);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmNotificationImplNotificationManagerImplInfo res;
        reqObj->comDayCqWcmNotificationImplNotificationManagerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmScriptingImplBVPManager(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> com_day_cq_wcm_scripting_bvp_script_engines) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(com_day_cq_wcm_scripting_bvp_script_engines);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmScriptingImplBVPManagerInfo res;
        reqObj->comDayCqWcmScriptingImplBVPManagerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmUndoUndoConfig(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool cq_wcm_undo_enabled, QString cq_wcm_undo_path, qint32 cq_wcm_undo_validity, qint32 cq_wcm_undo_steps, QString cq_wcm_undo_persistence, bool cq_wcm_undo_persistence_mode, QString cq_wcm_undo_markermode, QList<QString> cq_wcm_undo_whitelist, QList<QString> cq_wcm_undo_blacklist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cq_wcm_undo_enabled);
    Q_UNUSED(cq_wcm_undo_path);
    Q_UNUSED(cq_wcm_undo_validity);
    Q_UNUSED(cq_wcm_undo_steps);
    Q_UNUSED(cq_wcm_undo_persistence);
    Q_UNUSED(cq_wcm_undo_persistence_mode);
    Q_UNUSED(cq_wcm_undo_markermode);
    Q_UNUSED(cq_wcm_undo_whitelist);
    Q_UNUSED(cq_wcm_undo_blacklist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmUndoUndoConfigInfo res;
        reqObj->comDayCqWcmUndoUndoConfigResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmWebservicesupportImplReplicationEventListener(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> flush_agents) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(flush_agents);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmWebservicesupportImplReplicationEventListenerInfo res;
        reqObj->comDayCqWcmWebservicesupportImplReplicationEventListenerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString event_filter, qint32 min_thread_pool_size, qint32 max_thread_pool_size, bool cq_wcm_workflow_terminate_on_activate, QList<QString> cq_wcm_worklfow_terminate_exclusion_list) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(event_filter);
    Q_UNUSED(min_thread_pool_size);
    Q_UNUSED(max_thread_pool_size);
    Q_UNUSED(cq_wcm_workflow_terminate_on_activate);
    Q_UNUSED(cq_wcm_worklfow_terminate_exclusion_list);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo res;
        reqObj->comDayCqWcmWorkflowImplWcmWorkflowServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> workflowpackageinfoprovider_filter, QString workflowpackageinfoprovider_filter_rootpath) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(workflowpackageinfoprovider_filter);
    Q_UNUSED(workflowpackageinfoprovider_filter_rootpath);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo res;
        reqObj->comDayCqWcmWorkflowImplWorkflowPackageInfoProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWidgetImplHtmlLibraryManagerImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString htmllibmanager_clientmanager, bool htmllibmanager_debug, bool htmllibmanager_debug_console, QString htmllibmanager_debug_init_js, QString htmllibmanager_defaultthemename, QString htmllibmanager_defaultuserthemename, QString htmllibmanager_firebuglite_path, bool htmllibmanager_force_cq_url_info, bool htmllibmanager_gzip, qint32 htmllibmanager_maxage, qint32 htmllibmanager_max_data_uri_size, bool htmllibmanager_minify, QList<QString> htmllibmanager_path_list, bool htmllibmanager_timing) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(htmllibmanager_clientmanager);
    Q_UNUSED(htmllibmanager_debug);
    Q_UNUSED(htmllibmanager_debug_console);
    Q_UNUSED(htmllibmanager_debug_init_js);
    Q_UNUSED(htmllibmanager_defaultthemename);
    Q_UNUSED(htmllibmanager_defaultuserthemename);
    Q_UNUSED(htmllibmanager_firebuglite_path);
    Q_UNUSED(htmllibmanager_force_cq_url_info);
    Q_UNUSED(htmllibmanager_gzip);
    Q_UNUSED(htmllibmanager_maxage);
    Q_UNUSED(htmllibmanager_max_data_uri_size);
    Q_UNUSED(htmllibmanager_minify);
    Q_UNUSED(htmllibmanager_path_list);
    Q_UNUSED(htmllibmanager_timing);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWidgetImplHtmlLibraryManagerImplInfo res;
        reqObj->comDayCqWidgetImplHtmlLibraryManagerImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWidgetImplWidgetExtensionProviderImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> extendable_widgets, bool widgetextensionprovider_debug) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(extendable_widgets);
    Q_UNUSED(widgetextensionprovider_debug);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWidgetImplWidgetExtensionProviderImplInfo res;
        reqObj->comDayCqWidgetImplWidgetExtensionProviderImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWorkflowImplEmailEMailNotificationService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString from_address, QString host_prefix, bool notify_onabort, bool notify_oncomplete, bool notify_oncontainercomplete, bool notify_useronly) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(from_address);
    Q_UNUSED(host_prefix);
    Q_UNUSED(notify_onabort);
    Q_UNUSED(notify_oncomplete);
    Q_UNUSED(notify_oncontainercomplete);
    Q_UNUSED(notify_useronly);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWorkflowImplEmailEMailNotificationServiceInfo res;
        reqObj->comDayCqWorkflowImplEmailEMailNotificationServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCqWorkflowImplEmailTaskEMailNotificationService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool notify_onupdate, bool notify_oncomplete) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(notify_onupdate);
    Q_UNUSED(notify_oncomplete);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo res;
        reqObj->comDayCqWorkflowImplEmailTaskEMailNotificationServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString path, QString token_required_attr, QString token_alternate_url, bool token_encapsulated, QList<QString> skip_token_refresh) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(path);
    Q_UNUSED(token_required_attr);
    Q_UNUSED(token_alternate_url);
    Q_UNUSED(token_encapsulated);
    Q_UNUSED(skip_token_refresh);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo res;
        reqObj->comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::comDayCrxSecurityTokenImplTokenCleanupTask(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enable_token_cleanup_task, QString scheduler_expression, qint32 batch_size) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enable_token_cleanup_task);
    Q_UNUSED(scheduler_expression);
    Q_UNUSED(batch_size);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIComDayCrxSecurityTokenImplTokenCleanupTaskInfo res;
        reqObj->comDayCrxSecurityTokenImplTokenCleanupTaskResponse(res);
    }    
}
void OAIConfigmgrApiHandler::guideLocalizationService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> supported_locales, QList<QString> localizable_properties) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(supported_locales);
    Q_UNUSED(localizable_properties);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIGuideLocalizationServiceInfo res;
        reqObj->guideLocalizationServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::messagingUserComponentFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 priority) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(priority);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIMessagingUserComponentFactoryInfo res;
        reqObj->messagingUserComponentFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheAriesJmxFrameworkStateConfig(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool attribute_change_notification_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(attribute_change_notification_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheAriesJmxFrameworkStateConfigInfo res;
        reqObj->orgApacheAriesJmxFrameworkStateConfigResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheFelixEventadminImplEventAdmin(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 org_apache_felix_eventadmin_thread_pool_size, OAINumber org_apache_felix_eventadmin_async_to_sync_thread_ratio, qint32 org_apache_felix_eventadmin_timeout, bool org_apache_felix_eventadmin_require_topic, QList<QString> org_apache_felix_eventadmin_ignore_timeout, QList<QString> org_apache_felix_eventadmin_ignore_topic) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(org_apache_felix_eventadmin_thread_pool_size);
    Q_UNUSED(org_apache_felix_eventadmin_async_to_sync_thread_ratio);
    Q_UNUSED(org_apache_felix_eventadmin_timeout);
    Q_UNUSED(org_apache_felix_eventadmin_require_topic);
    Q_UNUSED(org_apache_felix_eventadmin_ignore_timeout);
    Q_UNUSED(org_apache_felix_eventadmin_ignore_topic);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheFelixEventadminImplEventAdminInfo res;
        reqObj->orgApacheFelixEventadminImplEventAdminResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheFelixHttp(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString org_apache_felix_http_host, bool org_apache_felix_http_enable, qint32 org_osgi_service_http_port, qint32 org_apache_felix_http_timeout, bool org_apache_felix_https_enable, qint32 org_osgi_service_http_port_secure, QString org_apache_felix_https_keystore, QString org_apache_felix_https_keystore_password, QString org_apache_felix_https_keystore_key_password, QString org_apache_felix_https_truststore, QString org_apache_felix_https_truststore_password, QString org_apache_felix_https_clientcertificate, QString org_apache_felix_http_context_path, bool org_apache_felix_http_mbeans, qint32 org_apache_felix_http_session_timeout, qint32 org_apache_felix_http_jetty_threadpool_max, qint32 org_apache_felix_http_jetty_acceptors, qint32 org_apache_felix_http_jetty_selectors, qint32 org_apache_felix_http_jetty_header_buffer_size, qint32 org_apache_felix_http_jetty_request_buffer_size, qint32 org_apache_felix_http_jetty_response_buffer_size, qint32 org_apache_felix_http_jetty_max_form_size, QList<QString> org_apache_felix_http_path_exclusions, QList<QString> org_apache_felix_https_jetty_ciphersuites_excluded, QList<QString> org_apache_felix_https_jetty_ciphersuites_included, bool org_apache_felix_http_jetty_send_server_header, QList<QString> org_apache_felix_https_jetty_protocols_included, QList<QString> org_apache_felix_https_jetty_protocols_excluded, bool org_apache_felix_proxy_load_balancer_connection_enable, bool org_apache_felix_https_jetty_renegotiate_allowed, bool org_apache_felix_https_jetty_session_cookie_http_only, bool org_apache_felix_https_jetty_session_cookie_secure, QString org_eclipse_jetty_servlet_session_id_path_parameter_name, bool org_eclipse_jetty_servlet_checking_remote_session_id_encoding, QString org_eclipse_jetty_servlet_session_cookie, QString org_eclipse_jetty_servlet_session_domain, QString org_eclipse_jetty_servlet_session_path, qint32 org_eclipse_jetty_servlet_max_age, QString org_apache_felix_http_name, bool org_apache_felix_jetty_gziphandler_enable, qint32 org_apache_felix_jetty_gzip_min_gzip_size, qint32 org_apache_felix_jetty_gzip_compression_level, qint32 org_apache_felix_jetty_gzip_inflate_buffer_size, bool org_apache_felix_jetty_gzip_sync_flush, QList<QString> org_apache_felix_jetty_gzip_excluded_user_agents, QList<QString> org_apache_felix_jetty_gzip_included_methods, QList<QString> org_apache_felix_jetty_gzip_excluded_methods, QList<QString> org_apache_felix_jetty_gzip_included_paths, QList<QString> org_apache_felix_jetty_gzip_excluded_paths, QList<QString> org_apache_felix_jetty_gzip_included_mime_types, QList<QString> org_apache_felix_jetty_gzip_excluded_mime_types, bool org_apache_felix_http_session_invalidate, bool org_apache_felix_http_session_uniqueid) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(org_apache_felix_http_host);
    Q_UNUSED(org_apache_felix_http_enable);
    Q_UNUSED(org_osgi_service_http_port);
    Q_UNUSED(org_apache_felix_http_timeout);
    Q_UNUSED(org_apache_felix_https_enable);
    Q_UNUSED(org_osgi_service_http_port_secure);
    Q_UNUSED(org_apache_felix_https_keystore);
    Q_UNUSED(org_apache_felix_https_keystore_password);
    Q_UNUSED(org_apache_felix_https_keystore_key_password);
    Q_UNUSED(org_apache_felix_https_truststore);
    Q_UNUSED(org_apache_felix_https_truststore_password);
    Q_UNUSED(org_apache_felix_https_clientcertificate);
    Q_UNUSED(org_apache_felix_http_context_path);
    Q_UNUSED(org_apache_felix_http_mbeans);
    Q_UNUSED(org_apache_felix_http_session_timeout);
    Q_UNUSED(org_apache_felix_http_jetty_threadpool_max);
    Q_UNUSED(org_apache_felix_http_jetty_acceptors);
    Q_UNUSED(org_apache_felix_http_jetty_selectors);
    Q_UNUSED(org_apache_felix_http_jetty_header_buffer_size);
    Q_UNUSED(org_apache_felix_http_jetty_request_buffer_size);
    Q_UNUSED(org_apache_felix_http_jetty_response_buffer_size);
    Q_UNUSED(org_apache_felix_http_jetty_max_form_size);
    Q_UNUSED(org_apache_felix_http_path_exclusions);
    Q_UNUSED(org_apache_felix_https_jetty_ciphersuites_excluded);
    Q_UNUSED(org_apache_felix_https_jetty_ciphersuites_included);
    Q_UNUSED(org_apache_felix_http_jetty_send_server_header);
    Q_UNUSED(org_apache_felix_https_jetty_protocols_included);
    Q_UNUSED(org_apache_felix_https_jetty_protocols_excluded);
    Q_UNUSED(org_apache_felix_proxy_load_balancer_connection_enable);
    Q_UNUSED(org_apache_felix_https_jetty_renegotiate_allowed);
    Q_UNUSED(org_apache_felix_https_jetty_session_cookie_http_only);
    Q_UNUSED(org_apache_felix_https_jetty_session_cookie_secure);
    Q_UNUSED(org_eclipse_jetty_servlet_session_id_path_parameter_name);
    Q_UNUSED(org_eclipse_jetty_servlet_checking_remote_session_id_encoding);
    Q_UNUSED(org_eclipse_jetty_servlet_session_cookie);
    Q_UNUSED(org_eclipse_jetty_servlet_session_domain);
    Q_UNUSED(org_eclipse_jetty_servlet_session_path);
    Q_UNUSED(org_eclipse_jetty_servlet_max_age);
    Q_UNUSED(org_apache_felix_http_name);
    Q_UNUSED(org_apache_felix_jetty_gziphandler_enable);
    Q_UNUSED(org_apache_felix_jetty_gzip_min_gzip_size);
    Q_UNUSED(org_apache_felix_jetty_gzip_compression_level);
    Q_UNUSED(org_apache_felix_jetty_gzip_inflate_buffer_size);
    Q_UNUSED(org_apache_felix_jetty_gzip_sync_flush);
    Q_UNUSED(org_apache_felix_jetty_gzip_excluded_user_agents);
    Q_UNUSED(org_apache_felix_jetty_gzip_included_methods);
    Q_UNUSED(org_apache_felix_jetty_gzip_excluded_methods);
    Q_UNUSED(org_apache_felix_jetty_gzip_included_paths);
    Q_UNUSED(org_apache_felix_jetty_gzip_excluded_paths);
    Q_UNUSED(org_apache_felix_jetty_gzip_included_mime_types);
    Q_UNUSED(org_apache_felix_jetty_gzip_excluded_mime_types);
    Q_UNUSED(org_apache_felix_http_session_invalidate);
    Q_UNUSED(org_apache_felix_http_session_uniqueid);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheFelixHttpInfo res;
        reqObj->orgApacheFelixHttpResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheFelixHttpSslfilterSslFilter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString ssl_forward_header, QString ssl_forward_value, QString ssl_forward_cert_header, bool rewrite_absolute_urls) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(ssl_forward_header);
    Q_UNUSED(ssl_forward_value);
    Q_UNUSED(ssl_forward_cert_header);
    Q_UNUSED(rewrite_absolute_urls);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheFelixHttpSslfilterSslFilterInfo res;
        reqObj->orgApacheFelixHttpSslfilterSslFilterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheFelixJaasConfigurationFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString jaas_control_flag, qint32 jaas_ranking, QString jaas_realm_name, QString jaas_classname, QList<QString> jaas_options) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(jaas_control_flag);
    Q_UNUSED(jaas_ranking);
    Q_UNUSED(jaas_realm_name);
    Q_UNUSED(jaas_classname);
    Q_UNUSED(jaas_options);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheFelixJaasConfigurationFactoryInfo res;
        reqObj->orgApacheFelixJaasConfigurationFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheFelixJaasConfigurationSpi(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString jaas_default_realm_name, QString jaas_config_provider_name, QString jaas_global_config_policy) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(jaas_default_realm_name);
    Q_UNUSED(jaas_config_provider_name);
    Q_UNUSED(jaas_global_config_policy);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheFelixJaasConfigurationSpiInfo res;
        reqObj->orgApacheFelixJaasConfigurationSpiResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheFelixScrScrService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 ds_loglevel, bool ds_factory_enabled, bool ds_delayed_keep_instances, qint32 ds_lock_timeout_milliseconds, qint32 ds_stop_timeout_milliseconds, bool ds_global_extender) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(ds_loglevel);
    Q_UNUSED(ds_factory_enabled);
    Q_UNUSED(ds_delayed_keep_instances);
    Q_UNUSED(ds_lock_timeout_milliseconds);
    Q_UNUSED(ds_stop_timeout_milliseconds);
    Q_UNUSED(ds_global_extender);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheFelixScrScrServiceInfo res;
        reqObj->orgApacheFelixScrScrServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheFelixSystemreadyImplComponentsCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> components_list, QString type) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(components_list);
    Q_UNUSED(type);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheFelixSystemreadyImplComponentsCheckInfo res;
        reqObj->orgApacheFelixSystemreadyImplComponentsCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheFelixSystemreadyImplFrameworkStartCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 timeout, qint32 target_start_level, QString target_start_level_prop_name, QString type) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(timeout);
    Q_UNUSED(target_start_level);
    Q_UNUSED(target_start_level_prop_name);
    Q_UNUSED(type);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckInfo res;
        reqObj->orgApacheFelixSystemreadyImplFrameworkStartCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheFelixSystemreadyImplServicesCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> services_list, QString type) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(services_list);
    Q_UNUSED(type);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheFelixSystemreadyImplServicesCheckInfo res;
        reqObj->orgApacheFelixSystemreadyImplServicesCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheFelixSystemreadyImplServletSystemAliveServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString osgi_http_whiteboard_servlet_pattern, QString osgi_http_whiteboard_context_select) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(osgi_http_whiteboard_servlet_pattern);
    Q_UNUSED(osgi_http_whiteboard_context_select);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletInfo res;
        reqObj->orgApacheFelixSystemreadyImplServletSystemAliveServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheFelixSystemreadyImplServletSystemReadyServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString osgi_http_whiteboard_servlet_pattern, QString osgi_http_whiteboard_context_select) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(osgi_http_whiteboard_servlet_pattern);
    Q_UNUSED(osgi_http_whiteboard_context_select);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheFelixSystemreadyImplServletSystemReadyServletInfo res;
        reqObj->orgApacheFelixSystemreadyImplServletSystemReadyServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheFelixSystemreadySystemReadyMonitor(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 poll_interval) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(poll_interval);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheFelixSystemreadySystemReadyMonitorInfo res;
        reqObj->orgApacheFelixSystemreadySystemReadyMonitorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheFelixWebconsoleInternalServletOsgiManager(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString manager_root, QString http_service_filter, QString default_render, QString realm, QString username, QString password, QString category, QString locale, qint32 loglevel, QString plugins) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(manager_root);
    Q_UNUSED(http_service_filter);
    Q_UNUSED(default_render);
    Q_UNUSED(realm);
    Q_UNUSED(username);
    Q_UNUSED(password);
    Q_UNUSED(category);
    Q_UNUSED(locale);
    Q_UNUSED(loglevel);
    Q_UNUSED(plugins);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerInfo res;
        reqObj->orgApacheFelixWebconsoleInternalServletOsgiManagerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheFelixWebconsolePluginsEventInternalPluginServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 max_size) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(max_size);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo res;
        reqObj->orgApacheFelixWebconsolePluginsEventInternalPluginServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 felix_memoryusage_dump_threshold, qint32 felix_memoryusage_dump_interval, QString felix_memoryusage_dump_location) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(felix_memoryusage_dump_threshold);
    Q_UNUSED(felix_memoryusage_dump_interval);
    Q_UNUSED(felix_memoryusage_dump_location);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo res;
        reqObj->orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheHttpProxyconfigurator(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool proxy_enabled, QString proxy_host, qint32 proxy_port, QString proxy_user, QString proxy_password, QList<QString> proxy_exceptions) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(proxy_enabled);
    Q_UNUSED(proxy_host);
    Q_UNUSED(proxy_port);
    Q_UNUSED(proxy_user);
    Q_UNUSED(proxy_password);
    Q_UNUSED(proxy_exceptions);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheHttpProxyconfiguratorInfo res;
        reqObj->orgApacheHttpProxyconfiguratorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString dir) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(dir);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo res;
        reqObj->orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString path) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(path);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo res;
        reqObj->orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString mongouri, QString db, bool socket_keep_alive, qint32 cache, qint32 node_cache_percentage, qint32 prev_doc_cache_percentage, qint32 children_cache_percentage, qint32 diff_cache_percentage, qint32 cache_segment_count, qint32 cache_stack_move_distance, qint32 blob_cache_size, QString persistent_cache, QString journal_cache, bool custom_blob_store, qint32 journal_gc_interval, qint32 journal_gc_max_age, bool prefetch_external_changes, QString role, qint32 version_gc_max_age_in_secs, QString version_gc_expression, qint32 version_gc_time_limit_in_secs, qint32 blob_gc_max_age_in_secs, qint32 blob_track_snapshot_interval_in_secs, QString repository_home, qint32 max_replication_lag_in_secs, QString document_store_type, bool bundling_disabled, qint32 update_limit, QList<QString> persistent_cache_includes, QString lease_check_mode) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(mongouri);
    Q_UNUSED(db);
    Q_UNUSED(socket_keep_alive);
    Q_UNUSED(cache);
    Q_UNUSED(node_cache_percentage);
    Q_UNUSED(prev_doc_cache_percentage);
    Q_UNUSED(children_cache_percentage);
    Q_UNUSED(diff_cache_percentage);
    Q_UNUSED(cache_segment_count);
    Q_UNUSED(cache_stack_move_distance);
    Q_UNUSED(blob_cache_size);
    Q_UNUSED(persistent_cache);
    Q_UNUSED(journal_cache);
    Q_UNUSED(custom_blob_store);
    Q_UNUSED(journal_gc_interval);
    Q_UNUSED(journal_gc_max_age);
    Q_UNUSED(prefetch_external_changes);
    Q_UNUSED(role);
    Q_UNUSED(version_gc_max_age_in_secs);
    Q_UNUSED(version_gc_expression);
    Q_UNUSED(version_gc_time_limit_in_secs);
    Q_UNUSED(blob_gc_max_age_in_secs);
    Q_UNUSED(blob_track_snapshot_interval_in_secs);
    Q_UNUSED(repository_home);
    Q_UNUSED(max_replication_lag_in_secs);
    Q_UNUSED(document_store_type);
    Q_UNUSED(bundling_disabled);
    Q_UNUSED(update_limit);
    Q_UNUSED(persistent_cache_includes);
    Q_UNUSED(lease_check_mode);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo res;
        reqObj->orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> persistent_cache_includes) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(persistent_cache_includes);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo res;
        reqObj->orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> included_paths, bool enable_async_observer, qint32 observer_queue_size) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(included_paths);
    Q_UNUSED(enable_async_observer);
    Q_UNUSED(observer_queue_size);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo res;
        reqObj->orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> async_configs, qint32 lease_time_out_minutes, qint32 failing_index_timeout_seconds, qint32 error_warn_interval_seconds) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(async_configs);
    Q_UNUSED(lease_time_out_minutes);
    Q_UNUSED(failing_index_timeout_seconds);
    Q_UNUSED(error_warn_interval_seconds);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo res;
        reqObj->orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool disabled, bool debug, QString local_index_dir, bool enable_open_index_async, qint32 thread_pool_size, bool prefetch_index_files, qint32 extracted_text_cache_size_in_mb, qint32 extracted_text_cache_expiry_in_secs, bool always_use_pre_extracted_cache, qint32 boolean_clause_limit, bool enable_hybrid_indexing, qint32 hybrid_queue_size, bool disable_stored_index_definition, bool deleted_blobs_collection_enabled, qint32 prop_index_cleaner_interval_in_secs, bool enable_single_blob_index_files) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(disabled);
    Q_UNUSED(debug);
    Q_UNUSED(local_index_dir);
    Q_UNUSED(enable_open_index_async);
    Q_UNUSED(thread_pool_size);
    Q_UNUSED(prefetch_index_files);
    Q_UNUSED(extracted_text_cache_size_in_mb);
    Q_UNUSED(extracted_text_cache_expiry_in_secs);
    Q_UNUSED(always_use_pre_extracted_cache);
    Q_UNUSED(boolean_clause_limit);
    Q_UNUSED(enable_hybrid_indexing);
    Q_UNUSED(hybrid_queue_size);
    Q_UNUSED(disable_stored_index_definition);
    Q_UNUSED(deleted_blobs_collection_enabled);
    Q_UNUSED(prop_index_cleaner_interval_in_secs);
    Q_UNUSED(enable_single_blob_index_files);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo res;
        reqObj->orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString solr_home_path, QString solr_core_name) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(solr_home_path);
    Q_UNUSED(solr_core_name);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo res;
        reqObj->orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo res;
        reqObj->orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString path_desc_field, QString path_child_field, QString path_parent_field, QString path_exact_field, QString catch_all_field, QString collapsed_path_field, QString path_depth_field, QString commit_policy, qint32 rows, bool path_restrictions, bool property_restrictions, bool primarytypes_restrictions, QList<QString> ignored_properties, QList<QString> used_properties, QList<QString> type_mappings, QList<QString> property_mappings, bool collapse_jcrcontent_nodes) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(path_desc_field);
    Q_UNUSED(path_child_field);
    Q_UNUSED(path_parent_field);
    Q_UNUSED(path_exact_field);
    Q_UNUSED(catch_all_field);
    Q_UNUSED(collapsed_path_field);
    Q_UNUSED(path_depth_field);
    Q_UNUSED(commit_policy);
    Q_UNUSED(rows);
    Q_UNUSED(path_restrictions);
    Q_UNUSED(property_restrictions);
    Q_UNUSED(primarytypes_restrictions);
    Q_UNUSED(ignored_properties);
    Q_UNUSED(used_properties);
    Q_UNUSED(type_mappings);
    Q_UNUSED(property_mappings);
    Q_UNUSED(collapse_jcrcontent_nodes);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo res;
        reqObj->orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString solr_http_url, QString solr_zk_host, QString solr_collection, qint32 solr_socket_timeout, qint32 solr_connection_timeout, qint32 solr_shards_no, qint32 solr_replication_factor, QString solr_conf_dir) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(solr_http_url);
    Q_UNUSED(solr_zk_host);
    Q_UNUSED(solr_collection);
    Q_UNUSED(solr_socket_timeout);
    Q_UNUSED(solr_connection_timeout);
    Q_UNUSED(solr_shards_no);
    Q_UNUSED(solr_replication_factor);
    Q_UNUSED(solr_conf_dir);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo res;
        reqObj->orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool query_aggregation) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(query_aggregation);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo res;
        reqObj->orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString server_type) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(server_type);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo res;
        reqObj->orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString provider_type) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(provider_type);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo res;
        reqObj->orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 max_items, qint32 max_path_depth, bool enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(max_items);
    Q_UNUSED(max_path_depth);
    Q_UNUSED(enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo res;
        reqObj->orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakQueryQueryEngineSettingsService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 query_limit_in_memory, qint32 query_limit_reads, bool query_fail_traversal, bool fast_query_size) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(query_limit_in_memory);
    Q_UNUSED(query_limit_reads);
    Q_UNUSED(query_fail_traversal);
    Q_UNUSED(fast_query_size);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo res;
        reqObj->orgApacheJackrabbitOakQueryQueryEngineSettingsServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString org_apache_jackrabbit_oak_authentication_app_name, QString org_apache_jackrabbit_oak_authentication_config_spi_name) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(org_apache_jackrabbit_oak_authentication_app_name);
    Q_UNUSED(org_apache_jackrabbit_oak_authentication_config_spi_name);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo res;
        reqObj->orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString provider_name, QString host_name, qint32 host_port, bool host_ssl, bool host_tls, bool host_no_cert_check, QString bind_dn, QString bind_password, QString search_timeout, qint32 admin_pool_max_active, bool admin_pool_lookup_on_validate, qint32 user_pool_max_active, bool user_pool_lookup_on_validate, QString user_base_dn, QList<QString> user_objectclass, QString user_id_attribute, QString user_extra_filter, bool user_make_dn_path, QString group_base_dn, QList<QString> group_objectclass, QString group_name_attribute, QString group_extra_filter, bool group_make_dn_path, QString group_member_attribute, bool use_uid_for_ext_id, QList<QString> customattributes) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(provider_name);
    Q_UNUSED(host_name);
    Q_UNUSED(host_port);
    Q_UNUSED(host_ssl);
    Q_UNUSED(host_tls);
    Q_UNUSED(host_no_cert_check);
    Q_UNUSED(bind_dn);
    Q_UNUSED(bind_password);
    Q_UNUSED(search_timeout);
    Q_UNUSED(admin_pool_max_active);
    Q_UNUSED(admin_pool_lookup_on_validate);
    Q_UNUSED(user_pool_max_active);
    Q_UNUSED(user_pool_lookup_on_validate);
    Q_UNUSED(user_base_dn);
    Q_UNUSED(user_objectclass);
    Q_UNUSED(user_id_attribute);
    Q_UNUSED(user_extra_filter);
    Q_UNUSED(user_make_dn_path);
    Q_UNUSED(group_base_dn);
    Q_UNUSED(group_objectclass);
    Q_UNUSED(group_name_attribute);
    Q_UNUSED(group_extra_filter);
    Q_UNUSED(group_make_dn_path);
    Q_UNUSED(group_member_attribute);
    Q_UNUSED(use_uid_for_ext_id);
    Q_UNUSED(customattributes);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo res;
        reqObj->orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString token_expiration, QString token_length, bool token_refresh, qint32 token_cleanup_threshold, QString password_hash_algorithm, qint32 password_hash_iterations, qint32 password_salt_size) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(token_expiration);
    Q_UNUSED(token_length);
    Q_UNUSED(token_refresh);
    Q_UNUSED(token_cleanup_threshold);
    Q_UNUSED(password_hash_algorithm);
    Q_UNUSED(password_hash_iterations);
    Q_UNUSED(password_salt_size);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo res;
        reqObj->orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString permissions_jr2, QString import_behavior, QList<QString> read_paths, QList<QString> administrative_principals, qint32 configuration_ranking) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(permissions_jr2);
    Q_UNUSED(import_behavior);
    Q_UNUSED(read_paths);
    Q_UNUSED(administrative_principals);
    Q_UNUSED(configuration_ranking);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo res;
        reqObj->orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> required_service_pids, QString authorization_composition_type) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(required_service_pids);
    Q_UNUSED(authorization_composition_type);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo res;
        reqObj->orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 length) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(length);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo res;
        reqObj->orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString users_path, QString groups_path, QString system_relative_path, qint32 default_depth, QString import_behavior, QString password_hash_algorithm, qint32 password_hash_iterations, qint32 password_salt_size, bool omit_admin_pw, bool support_auto_save, qint32 password_max_age, bool initial_password_change, qint32 password_history_size, bool password_expiry_for_admin, qint32 cache_expiration, bool enable_rfc7613_usercase_mapped_profile) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(users_path);
    Q_UNUSED(groups_path);
    Q_UNUSED(system_relative_path);
    Q_UNUSED(default_depth);
    Q_UNUSED(import_behavior);
    Q_UNUSED(password_hash_algorithm);
    Q_UNUSED(password_hash_iterations);
    Q_UNUSED(password_salt_size);
    Q_UNUSED(omit_admin_pw);
    Q_UNUSED(support_auto_save);
    Q_UNUSED(password_max_age);
    Q_UNUSED(initial_password_change);
    Q_UNUSED(password_history_size);
    Q_UNUSED(password_expiry_for_admin);
    Q_UNUSED(cache_expiration);
    Q_UNUSED(enable_rfc7613_usercase_mapped_profile);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo res;
        reqObj->orgApacheJackrabbitOakSecurityUserUserConfigurationImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString account_name, QString container_name, QString access_key, QString root_path, QString connection_url) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(account_name);
    Q_UNUSED(container_name);
    Q_UNUSED(access_key);
    Q_UNUSED(root_path);
    Q_UNUSED(connection_url);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo res;
        reqObj->orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString repository_home, QString tarmk_mode, qint32 tarmk_size, qint32 segment_cache_size, qint32 string_cache_size, qint32 template_cache_size, qint32 string_deduplication_cache_size, qint32 template_deduplication_cache_size, qint32 node_deduplication_cache_size, bool pause_compaction, qint32 compaction_retry_count, qint32 compaction_force_timeout, qint32 compaction_size_delta_estimation, bool compaction_disable_estimation, qint32 compaction_retained_generations, qint32 compaction_memory_threshold, qint32 compaction_progress_log, bool standby, bool custom_blob_store, bool custom_segment_store, bool split_persistence, QString repository_backup_dir, qint32 blob_gc_max_age_in_secs, qint32 blob_track_snapshot_interval_in_secs, QString role, bool register_descriptors, bool dispatch_changes) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(repository_home);
    Q_UNUSED(tarmk_mode);
    Q_UNUSED(tarmk_size);
    Q_UNUSED(segment_cache_size);
    Q_UNUSED(string_cache_size);
    Q_UNUSED(template_cache_size);
    Q_UNUSED(string_deduplication_cache_size);
    Q_UNUSED(template_deduplication_cache_size);
    Q_UNUSED(node_deduplication_cache_size);
    Q_UNUSED(pause_compaction);
    Q_UNUSED(compaction_retry_count);
    Q_UNUSED(compaction_force_timeout);
    Q_UNUSED(compaction_size_delta_estimation);
    Q_UNUSED(compaction_disable_estimation);
    Q_UNUSED(compaction_retained_generations);
    Q_UNUSED(compaction_memory_threshold);
    Q_UNUSED(compaction_progress_log);
    Q_UNUSED(standby);
    Q_UNUSED(custom_blob_store);
    Q_UNUSED(custom_segment_store);
    Q_UNUSED(split_persistence);
    Q_UNUSED(repository_backup_dir);
    Q_UNUSED(blob_gc_max_age_in_secs);
    Q_UNUSED(blob_track_snapshot_interval_in_secs);
    Q_UNUSED(role);
    Q_UNUSED(register_descriptors);
    Q_UNUSED(dispatch_changes);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo res;
        reqObj->orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> commits_tracker_writer_groups) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(commits_tracker_writer_groups);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo res;
        reqObj->orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakSegmentSegmentNodeStoreService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString repository_home, QString tarmk_mode, qint32 tarmk_size, qint32 segment_cache_size, qint32 string_cache_size, qint32 template_cache_size, qint32 string_deduplication_cache_size, qint32 template_deduplication_cache_size, qint32 node_deduplication_cache_size, bool pause_compaction, qint32 compaction_retry_count, qint32 compaction_force_timeout, qint32 compaction_size_delta_estimation, bool compaction_disable_estimation, qint32 compaction_retained_generations, qint32 compaction_memory_threshold, qint32 compaction_progress_log, bool standby, bool custom_blob_store, bool custom_segment_store, bool split_persistence, QString repository_backup_dir, qint32 blob_gc_max_age_in_secs, qint32 blob_track_snapshot_interval_in_secs) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(repository_home);
    Q_UNUSED(tarmk_mode);
    Q_UNUSED(tarmk_size);
    Q_UNUSED(segment_cache_size);
    Q_UNUSED(string_cache_size);
    Q_UNUSED(template_cache_size);
    Q_UNUSED(string_deduplication_cache_size);
    Q_UNUSED(template_deduplication_cache_size);
    Q_UNUSED(node_deduplication_cache_size);
    Q_UNUSED(pause_compaction);
    Q_UNUSED(compaction_retry_count);
    Q_UNUSED(compaction_force_timeout);
    Q_UNUSED(compaction_size_delta_estimation);
    Q_UNUSED(compaction_disable_estimation);
    Q_UNUSED(compaction_retained_generations);
    Q_UNUSED(compaction_memory_threshold);
    Q_UNUSED(compaction_progress_log);
    Q_UNUSED(standby);
    Q_UNUSED(custom_blob_store);
    Q_UNUSED(custom_segment_store);
    Q_UNUSED(split_persistence);
    Q_UNUSED(repository_backup_dir);
    Q_UNUSED(blob_gc_max_age_in_secs);
    Q_UNUSED(blob_track_snapshot_interval_in_secs);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo res;
        reqObj->orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool org_apache_sling_installer_configuration_persist, QString mode, qint32 port, QString primary_host, qint32 interval, QList<QString> primary_allowed_client_ip_ranges, bool secure, qint32 standby_readtimeout, bool standby_autoclean) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(org_apache_sling_installer_configuration_persist);
    Q_UNUSED(mode);
    Q_UNUSED(port);
    Q_UNUSED(primary_host);
    Q_UNUSED(interval);
    Q_UNUSED(primary_allowed_client_ip_ranges);
    Q_UNUSED(secure);
    Q_UNUSED(standby_readtimeout);
    Q_UNUSED(standby_autoclean);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo res;
        reqObj->orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString handler_name, QString user_expiration_time, QList<QString> user_auto_membership, QList<QString> user_property_mapping, QString user_path_prefix, QString user_membership_exp_time, qint32 user_membership_nesting_depth, bool user_dynamic_membership, bool user_disable_missing, QString group_expiration_time, QList<QString> group_auto_membership, QList<QString> group_property_mapping, QString group_path_prefix, bool enable_rfc7613_usercase_mapped_profile) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(handler_name);
    Q_UNUSED(user_expiration_time);
    Q_UNUSED(user_auto_membership);
    Q_UNUSED(user_property_mapping);
    Q_UNUSED(user_path_prefix);
    Q_UNUSED(user_membership_exp_time);
    Q_UNUSED(user_membership_nesting_depth);
    Q_UNUSED(user_dynamic_membership);
    Q_UNUSED(user_disable_missing);
    Q_UNUSED(group_expiration_time);
    Q_UNUSED(group_auto_membership);
    Q_UNUSED(group_property_mapping);
    Q_UNUSED(group_path_prefix);
    Q_UNUSED(enable_rfc7613_usercase_mapped_profile);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo res;
        reqObj->orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 jaas_ranking, QString jaas_control_flag, QString jaas_realm_name, QString idp_name, QString sync_handler_name) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(jaas_ranking);
    Q_UNUSED(jaas_control_flag);
    Q_UNUSED(jaas_realm_name);
    Q_UNUSED(idp_name);
    Q_UNUSED(sync_handler_name);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo res;
        reqObj->orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool protect_external_id) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(protect_external_id);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo res;
        reqObj->orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> cug_supported_paths, bool cug_enabled, qint32 configuration_ranking) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(cug_supported_paths);
    Q_UNUSED(cug_enabled);
    Q_UNUSED(configuration_ranking);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo res;
        reqObj->orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> principal_names) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(principal_names);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo res;
        reqObj->orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString enabled_actions, QList<QString> user_privilege_names, QList<QString> group_privilege_names, QString constraint) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enabled_actions);
    Q_UNUSED(user_privilege_names);
    Q_UNUSED(group_privilege_names);
    Q_UNUSED(constraint);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo res;
        reqObj->orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitVaultPackagingImplPackagingImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> package_roots) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(package_roots);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitVaultPackagingImplPackagingImplInfo res;
        reqObj->orgApacheJackrabbitVaultPackagingImplPackagingImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString home_path) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(home_path);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo res;
        reqObj->orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingAuthCoreImplLogoutServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> sling_servlet_methods, QString sling_servlet_paths) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sling_servlet_methods);
    Q_UNUSED(sling_servlet_paths);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingAuthCoreImplLogoutServletInfo res;
        reqObj->orgApacheSlingAuthCoreImplLogoutServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo res;
        reqObj->orgApacheSlingCaconfigImplConfigurationBindingsValueProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingCaconfigImplConfigurationResolverImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> config_bucket_names) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(config_bucket_names);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingCaconfigImplConfigurationResolverImplInfo res;
        reqObj->orgApacheSlingCaconfigImplConfigurationResolverImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enabled, QList<QString> config_property_inheritance_property_names) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enabled);
    Q_UNUSED(config_property_inheritance_property_names);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo res;
        reqObj->orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo res;
        reqObj->orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString description, QList<QString> overrides, bool enabled, qint32 service_ranking) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(description);
    Q_UNUSED(overrides);
    Q_UNUSED(enabled);
    Q_UNUSED(service_ranking);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo res;
        reqObj->orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enabled, qint32 service_ranking) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enabled);
    Q_UNUSED(service_ranking);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo res;
        reqObj->orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingCaconfigManagementImplConfigurationManagementSetti(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> ignore_property_name_regex, QList<QString> config_collection_properties_resource_names) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(ignore_property_name_regex);
    Q_UNUSED(config_collection_properties_resource_names);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo res;
        reqObj->orgApacheSlingCaconfigManagementImplConfigurationManagementSettiResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enabled, QString config_path, QList<QString> fallback_paths, QList<QString> config_collection_inheritance_property_names) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enabled);
    Q_UNUSED(config_path);
    Q_UNUSED(fallback_paths);
    Q_UNUSED(config_collection_inheritance_property_names);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo res;
        reqObj->orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool enabled, QList<QString> config_ref_resource_names, QList<QString> config_ref_property_names, qint32 service_ranking) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(enabled);
    Q_UNUSED(config_ref_resource_names);
    Q_UNUSED(config_ref_property_names);
    Q_UNUSED(service_ranking);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo res;
        reqObj->orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> parser_features) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(parser_features);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo res;
        reqObj->orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingCommonsLogLogManager(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString org_apache_sling_commons_log_level, QString org_apache_sling_commons_log_file, qint32 org_apache_sling_commons_log_file_number, QString org_apache_sling_commons_log_file_size, QString org_apache_sling_commons_log_pattern, QString org_apache_sling_commons_log_configuration_file, bool org_apache_sling_commons_log_packaging_data_enabled, qint32 org_apache_sling_commons_log_max_caller_data_depth, qint32 org_apache_sling_commons_log_max_old_file_count_in_dump, qint32 org_apache_sling_commons_log_num_of_lines) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(org_apache_sling_commons_log_level);
    Q_UNUSED(org_apache_sling_commons_log_file);
    Q_UNUSED(org_apache_sling_commons_log_file_number);
    Q_UNUSED(org_apache_sling_commons_log_file_size);
    Q_UNUSED(org_apache_sling_commons_log_pattern);
    Q_UNUSED(org_apache_sling_commons_log_configuration_file);
    Q_UNUSED(org_apache_sling_commons_log_packaging_data_enabled);
    Q_UNUSED(org_apache_sling_commons_log_max_caller_data_depth);
    Q_UNUSED(org_apache_sling_commons_log_max_old_file_count_in_dump);
    Q_UNUSED(org_apache_sling_commons_log_num_of_lines);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingCommonsLogLogManagerInfo res;
        reqObj->orgApacheSlingCommonsLogLogManagerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingCommonsLogLogManagerFactoryConfig(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString org_apache_sling_commons_log_level, QString org_apache_sling_commons_log_file, QString org_apache_sling_commons_log_pattern, QList<QString> org_apache_sling_commons_log_names, bool org_apache_sling_commons_log_additiv) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(org_apache_sling_commons_log_level);
    Q_UNUSED(org_apache_sling_commons_log_file);
    Q_UNUSED(org_apache_sling_commons_log_pattern);
    Q_UNUSED(org_apache_sling_commons_log_names);
    Q_UNUSED(org_apache_sling_commons_log_additiv);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigInfo res;
        reqObj->orgApacheSlingCommonsLogLogManagerFactoryConfigResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingCommonsLogLogManagerFactoryWriter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString org_apache_sling_commons_log_file, qint32 org_apache_sling_commons_log_file_number, QString org_apache_sling_commons_log_file_size, bool org_apache_sling_commons_log_file_buffered) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(org_apache_sling_commons_log_file);
    Q_UNUSED(org_apache_sling_commons_log_file_number);
    Q_UNUSED(org_apache_sling_commons_log_file_size);
    Q_UNUSED(org_apache_sling_commons_log_file_buffered);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterInfo res;
        reqObj->orgApacheSlingCommonsLogLogManagerFactoryWriterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingCommonsMetricsInternalLogReporter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 period, QString time_unit, QString level, QString logger_name, QString prefix, QString pattern, QString registry_name) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(period);
    Q_UNUSED(time_unit);
    Q_UNUSED(level);
    Q_UNUSED(logger_name);
    Q_UNUSED(prefix);
    Q_UNUSED(pattern);
    Q_UNUSED(registry_name);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingCommonsMetricsInternalLogReporterInfo res;
        reqObj->orgApacheSlingCommonsMetricsInternalLogReporterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> datasources, qint32 step, QList<QString> archives, QString path) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(datasources);
    Q_UNUSED(step);
    Q_UNUSED(archives);
    Q_UNUSED(path);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo res;
        reqObj->orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> mime_types) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(mime_types);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo res;
        reqObj->orgApacheSlingCommonsMimeInternalMimeTypeServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingCommonsSchedulerImplQuartzScheduler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString pool_name, QList<QString> allowed_pool_names, bool scheduler_useleaderforsingle, QList<QString> metrics_filters, qint32 slow_threshold_millis) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(pool_name);
    Q_UNUSED(allowed_pool_names);
    Q_UNUSED(scheduler_useleaderforsingle);
    Q_UNUSED(metrics_filters);
    Q_UNUSED(slow_threshold_millis);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo res;
        reqObj->orgApacheSlingCommonsSchedulerImplQuartzSchedulerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 max_quartz_job_duration_acceptable) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(max_quartz_job_duration_acceptable);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo res;
        reqObj->orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, qint32 min_pool_size, qint32 max_pool_size, qint32 queue_size, qint32 max_thread_age, qint32 keep_alive_time, QString block_policy, bool shutdown_graceful, bool daemon, qint32 shutdown_wait_time, QString priority) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(min_pool_size);
    Q_UNUSED(max_pool_size);
    Q_UNUSED(queue_size);
    Q_UNUSED(max_thread_age);
    Q_UNUSED(keep_alive_time);
    Q_UNUSED(block_policy);
    Q_UNUSED(shutdown_graceful);
    Q_UNUSED(daemon);
    Q_UNUSED(shutdown_wait_time);
    Q_UNUSED(priority);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo res;
        reqObj->orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDatasourceDataSourceFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString datasource_name, QString datasource_svc_prop_name, QString driver_class_name, QString url, QString username, QString password, QString default_auto_commit, QString default_read_only, QString default_transaction_isolation, QString default_catalog, qint32 max_active, qint32 max_idle, qint32 min_idle, qint32 initial_size, qint32 max_wait, qint32 max_age, bool test_on_borrow, bool test_on_return, bool test_while_idle, QString validation_query, qint32 validation_query_timeout, qint32 time_between_eviction_runs_millis, qint32 min_evictable_idle_time_millis, QString connection_properties, QString init_sql, QString jdbc_interceptors, qint32 validation_interval, bool log_validation_errors, QList<QString> datasource_svc_properties) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(datasource_name);
    Q_UNUSED(datasource_svc_prop_name);
    Q_UNUSED(driver_class_name);
    Q_UNUSED(url);
    Q_UNUSED(username);
    Q_UNUSED(password);
    Q_UNUSED(default_auto_commit);
    Q_UNUSED(default_read_only);
    Q_UNUSED(default_transaction_isolation);
    Q_UNUSED(default_catalog);
    Q_UNUSED(max_active);
    Q_UNUSED(max_idle);
    Q_UNUSED(min_idle);
    Q_UNUSED(initial_size);
    Q_UNUSED(max_wait);
    Q_UNUSED(max_age);
    Q_UNUSED(test_on_borrow);
    Q_UNUSED(test_on_return);
    Q_UNUSED(test_while_idle);
    Q_UNUSED(validation_query);
    Q_UNUSED(validation_query_timeout);
    Q_UNUSED(time_between_eviction_runs_millis);
    Q_UNUSED(min_evictable_idle_time_millis);
    Q_UNUSED(connection_properties);
    Q_UNUSED(init_sql);
    Q_UNUSED(jdbc_interceptors);
    Q_UNUSED(validation_interval);
    Q_UNUSED(log_validation_errors);
    Q_UNUSED(datasource_svc_properties);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDatasourceDataSourceFactoryInfo res;
        reqObj->orgApacheSlingDatasourceDataSourceFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDatasourceJNDIDataSourceFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString datasource_name, QString datasource_svc_prop_name, QString datasource_jndi_name, QList<QString> jndi_properties) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(datasource_name);
    Q_UNUSED(datasource_svc_prop_name);
    Q_UNUSED(datasource_jndi_name);
    Q_UNUSED(jndi_properties);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryInfo res;
        reqObj->orgApacheSlingDatasourceJNDIDataSourceFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDiscoveryOakConfig(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 connector_ping_timeout, qint32 connector_ping_interval, qint32 discovery_lite_check_interval, qint32 cluster_sync_service_timeout, qint32 cluster_sync_service_interval, bool enable_sync_token, qint32 min_event_delay, qint32 socket_connect_timeout, qint32 so_timeout, QList<QString> topology_connector_urls, QList<QString> topology_connector_whitelist, bool auto_stop_local_loop_enabled, bool gzip_connector_requests_enabled, bool hmac_enabled, bool enable_encryption, QString shared_key, qint32 hmac_shared_key_ttl, QString backoff_standby_factor, QString backoff_stable_factor) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(connector_ping_timeout);
    Q_UNUSED(connector_ping_interval);
    Q_UNUSED(discovery_lite_check_interval);
    Q_UNUSED(cluster_sync_service_timeout);
    Q_UNUSED(cluster_sync_service_interval);
    Q_UNUSED(enable_sync_token);
    Q_UNUSED(min_event_delay);
    Q_UNUSED(socket_connect_timeout);
    Q_UNUSED(so_timeout);
    Q_UNUSED(topology_connector_urls);
    Q_UNUSED(topology_connector_whitelist);
    Q_UNUSED(auto_stop_local_loop_enabled);
    Q_UNUSED(gzip_connector_requests_enabled);
    Q_UNUSED(hmac_enabled);
    Q_UNUSED(enable_encryption);
    Q_UNUSED(shared_key);
    Q_UNUSED(hmac_shared_key_ttl);
    Q_UNUSED(backoff_standby_factor);
    Q_UNUSED(backoff_stable_factor);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDiscoveryOakConfigInfo res;
        reqObj->orgApacheSlingDiscoveryOakConfigResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString hc_name, QList<QString> hc_tags, QString hc_mbean_name) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_name);
    Q_UNUSED(hc_tags);
    Q_UNUSED(hc_mbean_name);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo res;
        reqObj->orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString title, QString details, bool enabled, QString service_name, QString log_level, QList<QString> allowed_roots, bool queue_processing_enabled, QList<QString> package_importer_endpoints, QList<QString> passive_queues, QList<QString> priority_queues, QString retry_strategy, qint32 retry_attempts, QString request_authorization_strategy_target, QString transport_secret_provider_target, QString package_builder_target, QString triggers_target, QString queue_provider, bool async_delivery, qint32 http_conn_timeout) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(title);
    Q_UNUSED(details);
    Q_UNUSED(enabled);
    Q_UNUSED(service_name);
    Q_UNUSED(log_level);
    Q_UNUSED(allowed_roots);
    Q_UNUSED(queue_processing_enabled);
    Q_UNUSED(package_importer_endpoints);
    Q_UNUSED(passive_queues);
    Q_UNUSED(priority_queues);
    Q_UNUSED(retry_strategy);
    Q_UNUSED(retry_attempts);
    Q_UNUSED(request_authorization_strategy_target);
    Q_UNUSED(transport_secret_provider_target);
    Q_UNUSED(package_builder_target);
    Q_UNUSED(triggers_target);
    Q_UNUSED(queue_provider);
    Q_UNUSED(async_delivery);
    Q_UNUSED(http_conn_timeout);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo res;
        reqObj->orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString jcr_privilege) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(jcr_privilege);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo res;
        reqObj->orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString title, QString details, bool enabled, QString service_name, QString log_level, QList<QString> allowed_roots, QString request_authorization_strategy_target, QString queue_provider_factory_target, QString package_builder_target, QString triggers_target, QList<QString> priority_queues) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(title);
    Q_UNUSED(details);
    Q_UNUSED(enabled);
    Q_UNUSED(service_name);
    Q_UNUSED(log_level);
    Q_UNUSED(allowed_roots);
    Q_UNUSED(request_authorization_strategy_target);
    Q_UNUSED(queue_provider_factory_target);
    Q_UNUSED(package_builder_target);
    Q_UNUSED(triggers_target);
    Q_UNUSED(priority_queues);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo res;
        reqObj->orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString title, QString details, bool enabled, QString service_name, QString log_level, bool queue_processing_enabled, QList<QString> package_exporter_endpoints, qint32 pull_items, qint32 http_conn_timeout, QString request_authorization_strategy_target, QString transport_secret_provider_target, QString package_builder_target, QString triggers_target) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(title);
    Q_UNUSED(details);
    Q_UNUSED(enabled);
    Q_UNUSED(service_name);
    Q_UNUSED(log_level);
    Q_UNUSED(queue_processing_enabled);
    Q_UNUSED(package_exporter_endpoints);
    Q_UNUSED(pull_items);
    Q_UNUSED(http_conn_timeout);
    Q_UNUSED(request_authorization_strategy_target);
    Q_UNUSED(transport_secret_provider_target);
    Q_UNUSED(package_builder_target);
    Q_UNUSED(triggers_target);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo res;
        reqObj->orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString title, QString details, bool enabled, QString service_name, QString log_level, bool queue_processing_enabled, QString package_exporter_target, QString package_importer_target, QString request_authorization_strategy_target, QString triggers_target) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(title);
    Q_UNUSED(details);
    Q_UNUSED(enabled);
    Q_UNUSED(service_name);
    Q_UNUSED(log_level);
    Q_UNUSED(queue_processing_enabled);
    Q_UNUSED(package_exporter_target);
    Q_UNUSED(package_importer_target);
    Q_UNUSED(request_authorization_strategy_target);
    Q_UNUSED(triggers_target);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo res;
        reqObj->orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString title, QString details, bool enabled, QString service_name, QString log_level, bool queue_processing_enabled, QList<QString> passive_queues, QList<QString> package_exporter_endpoints, QList<QString> package_importer_endpoints, QString retry_strategy, qint32 retry_attempts, qint32 pull_items, qint32 http_conn_timeout, QString request_authorization_strategy_target, QString transport_secret_provider_target, QString package_builder_target, QString triggers_target) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(title);
    Q_UNUSED(details);
    Q_UNUSED(enabled);
    Q_UNUSED(service_name);
    Q_UNUSED(log_level);
    Q_UNUSED(queue_processing_enabled);
    Q_UNUSED(passive_queues);
    Q_UNUSED(package_exporter_endpoints);
    Q_UNUSED(package_importer_endpoints);
    Q_UNUSED(retry_strategy);
    Q_UNUSED(retry_attempts);
    Q_UNUSED(pull_items);
    Q_UNUSED(http_conn_timeout);
    Q_UNUSED(request_authorization_strategy_target);
    Q_UNUSED(transport_secret_provider_target);
    Q_UNUSED(package_builder_target);
    Q_UNUSED(triggers_target);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo res;
        reqObj->orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString hc_name, QList<QString> hc_tags, QString hc_mbean_name, qint32 number_of_retries_allowed) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_name);
    Q_UNUSED(hc_tags);
    Q_UNUSED(hc_mbean_name);
    Q_UNUSED(number_of_retries_allowed);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo res;
        reqObj->orgApacheSlingDistributionMonitorDistributionQueueHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionPackagingImplExporterAgentDistributio(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString queue, bool drop_invalid_items, QString agent_target) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(queue);
    Q_UNUSED(drop_invalid_items);
    Q_UNUSED(agent_target);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo res;
        reqObj->orgApacheSlingDistributionPackagingImplExporterAgentDistributioResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionPackagingImplExporterLocalDistributio(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString package_builder_target) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(package_builder_target);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo res;
        reqObj->orgApacheSlingDistributionPackagingImplExporterLocalDistributioResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionPackagingImplExporterRemoteDistributi(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QList<QString> endpoints, qint32 pull_items, QString package_builder_target, QString transport_secret_provider_target) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(endpoints);
    Q_UNUSED(pull_items);
    Q_UNUSED(package_builder_target);
    Q_UNUSED(transport_secret_provider_target);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo res;
        reqObj->orgApacheSlingDistributionPackagingImplExporterRemoteDistributiResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionPackagingImplImporterLocalDistributio(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString package_builder_target) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(package_builder_target);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo res;
        reqObj->orgApacheSlingDistributionPackagingImplImporterLocalDistributioResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionPackagingImplImporterRemoteDistributi(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QList<QString> endpoints, QString transport_secret_provider_target) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(endpoints);
    Q_UNUSED(transport_secret_provider_target);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo res;
        reqObj->orgApacheSlingDistributionPackagingImplImporterRemoteDistributiResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionPackagingImplImporterRepositoryDistri(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString service_name, QString path, QString privilege_name) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(service_name);
    Q_UNUSED(path);
    Q_UNUSED(privilege_name);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo res;
        reqObj->orgApacheSlingDistributionPackagingImplImporterRepositoryDistriResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionResourcesImplDistributionConfiguration(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString provider_roots, QString kind) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(provider_roots);
    Q_UNUSED(kind);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo res;
        reqObj->orgApacheSlingDistributionResourcesImplDistributionConfigurationResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionResourcesImplDistributionServiceResour(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString provider_roots, QString kind) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(provider_roots);
    Q_UNUSED(kind);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo res;
        reqObj->orgApacheSlingDistributionResourcesImplDistributionServiceResourResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionSerializationImplDistributionPackageBu(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString type, QString format_target, QString temp_fs_folder, qint32 file_threshold, QString memory_unit, bool use_off_heap_memory, QString digest_algorithm, qint32 monitoring_queue_size, qint32 cleanup_delay, QList<QString> package_filters, QList<QString> property_filters) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(type);
    Q_UNUSED(format_target);
    Q_UNUSED(temp_fs_folder);
    Q_UNUSED(file_threshold);
    Q_UNUSED(memory_unit);
    Q_UNUSED(use_off_heap_memory);
    Q_UNUSED(digest_algorithm);
    Q_UNUSED(monitoring_queue_size);
    Q_UNUSED(cleanup_delay);
    Q_UNUSED(package_filters);
    Q_UNUSED(property_filters);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo res;
        reqObj->orgApacheSlingDistributionSerializationImplDistributionPackageBuResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionSerializationImplVltVaultDistribution(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString type, QString import_mode, QString acl_handling, QString package_roots, QList<QString> package_filters, QList<QString> property_filters, QString temp_fs_folder, bool use_binary_references, qint32 auto_save_threshold, qint32 cleanup_delay, qint32 file_threshold, QString mega_bytes, bool use_off_heap_memory, QString digest_algorithm, qint32 monitoring_queue_size, QList<QString> paths_mapping, bool strict_import) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(type);
    Q_UNUSED(import_mode);
    Q_UNUSED(acl_handling);
    Q_UNUSED(package_roots);
    Q_UNUSED(package_filters);
    Q_UNUSED(property_filters);
    Q_UNUSED(temp_fs_folder);
    Q_UNUSED(use_binary_references);
    Q_UNUSED(auto_save_threshold);
    Q_UNUSED(cleanup_delay);
    Q_UNUSED(file_threshold);
    Q_UNUSED(mega_bytes);
    Q_UNUSED(use_off_heap_memory);
    Q_UNUSED(digest_algorithm);
    Q_UNUSED(monitoring_queue_size);
    Q_UNUSED(paths_mapping);
    Q_UNUSED(strict_import);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo res;
        reqObj->orgApacheSlingDistributionSerializationImplVltVaultDistributionResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionTransportImplUserCredentialsDistributi(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString username, QString password) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(username);
    Q_UNUSED(password);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo res;
        reqObj->orgApacheSlingDistributionTransportImplUserCredentialsDistributiResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionTriggerImplDistributionEventDistribute(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString path) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(path);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo res;
        reqObj->orgApacheSlingDistributionTriggerImplDistributionEventDistributeResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString path, QList<QString> ignored_paths_patterns, QString service_name, bool deep) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(path);
    Q_UNUSED(ignored_paths_patterns);
    Q_UNUSED(service_name);
    Q_UNUSED(deep);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo res;
        reqObj->orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString path, QString service_name, QString nuggets_path) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(path);
    Q_UNUSED(service_name);
    Q_UNUSED(nuggets_path);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo res;
        reqObj->orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString endpoint, QString transport_secret_provider_target) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(endpoint);
    Q_UNUSED(transport_secret_provider_target);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo res;
        reqObj->orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionTriggerImplResourceEventDistributionTr(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString path) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(path);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo res;
        reqObj->orgApacheSlingDistributionTriggerImplResourceEventDistributionTrResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString path, QString seconds, QString service_name) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(path);
    Q_UNUSED(seconds);
    Q_UNUSED(service_name);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo res;
        reqObj->orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingEngineImplAuthSlingAuthenticator(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString osgi_http_whiteboard_context_select, QString osgi_http_whiteboard_listener, QString auth_sudo_cookie, QString auth_sudo_parameter, bool auth_annonymous, QList<QString> sling_auth_requirements, QString sling_auth_anonymous_user, QString sling_auth_anonymous_password, QString auth_http, QString auth_http_realm, QList<QString> auth_uri_suffix) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(osgi_http_whiteboard_context_select);
    Q_UNUSED(osgi_http_whiteboard_listener);
    Q_UNUSED(auth_sudo_cookie);
    Q_UNUSED(auth_sudo_parameter);
    Q_UNUSED(auth_annonymous);
    Q_UNUSED(sling_auth_requirements);
    Q_UNUSED(sling_auth_anonymous_user);
    Q_UNUSED(sling_auth_anonymous_password);
    Q_UNUSED(auth_http);
    Q_UNUSED(auth_http_realm);
    Q_UNUSED(auth_uri_suffix);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorInfo res;
        reqObj->orgApacheSlingEngineImplAuthSlingAuthenticatorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> extensions, qint32 min_duration_ms, qint32 max_duration_ms, bool compact_log_format) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(extensions);
    Q_UNUSED(min_duration_ms);
    Q_UNUSED(max_duration_ms);
    Q_UNUSED(compact_log_format);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo res;
        reqObj->orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingEngineImplLogRequestLogger(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString request_log_output, qint32 request_log_outputtype, bool request_log_enabled, QString access_log_output, qint32 access_log_outputtype, bool access_log_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(request_log_output);
    Q_UNUSED(request_log_outputtype);
    Q_UNUSED(request_log_enabled);
    Q_UNUSED(access_log_output);
    Q_UNUSED(access_log_outputtype);
    Q_UNUSED(access_log_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingEngineImplLogRequestLoggerInfo res;
        reqObj->orgApacheSlingEngineImplLogRequestLoggerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingEngineImplLogRequestLoggerService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString request_log_service_format, QString request_log_service_output, qint32 request_log_service_outputtype, bool request_log_service_onentry) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(request_log_service_format);
    Q_UNUSED(request_log_service_output);
    Q_UNUSED(request_log_service_outputtype);
    Q_UNUSED(request_log_service_onentry);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingEngineImplLogRequestLoggerServiceInfo res;
        reqObj->orgApacheSlingEngineImplLogRequestLoggerServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingEngineImplSlingMainServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 sling_max_calls, qint32 sling_max_inclusions, bool sling_trace_allow, qint32 sling_max_record_requests, QList<QString> sling_store_pattern_requests, QString sling_serverinfo, QList<QString> sling_additional_response_headers) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sling_max_calls);
    Q_UNUSED(sling_max_inclusions);
    Q_UNUSED(sling_trace_allow);
    Q_UNUSED(sling_max_record_requests);
    Q_UNUSED(sling_store_pattern_requests);
    Q_UNUSED(sling_serverinfo);
    Q_UNUSED(sling_additional_response_headers);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingEngineImplSlingMainServletInfo res;
        reqObj->orgApacheSlingEngineImplSlingMainServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingEngineParameters(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString sling_default_parameter_encoding, qint32 sling_default_max_parameters, QString file_location, qint32 file_threshold, qint32 file_max, qint32 request_max, bool sling_default_parameter_check_for_additional_container_parameters) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sling_default_parameter_encoding);
    Q_UNUSED(sling_default_max_parameters);
    Q_UNUSED(file_location);
    Q_UNUSED(file_threshold);
    Q_UNUSED(file_max);
    Q_UNUSED(request_max);
    Q_UNUSED(sling_default_parameter_check_for_additional_container_parameters);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingEngineParametersInfo res;
        reqObj->orgApacheSlingEngineParametersResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingEventImplEventingThreadPool(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 min_pool_size) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(min_pool_size);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingEventImplEventingThreadPoolInfo res;
        reqObj->orgApacheSlingEventImplEventingThreadPoolResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingEventImplJobsDefaultJobManager(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString queue_priority, qint32 queue_retries, qint32 queue_retrydelay, qint32 queue_maxparallel) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(queue_priority);
    Q_UNUSED(queue_retries);
    Q_UNUSED(queue_retrydelay);
    Q_UNUSED(queue_maxparallel);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingEventImplJobsDefaultJobManagerInfo res;
        reqObj->orgApacheSlingEventImplJobsDefaultJobManagerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingEventImplJobsJcrPersistenceHandler(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool job_consumermanager_disable_distribution, qint32 startup_delay, qint32 cleanup_period) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(job_consumermanager_disable_distribution);
    Q_UNUSED(startup_delay);
    Q_UNUSED(cleanup_period);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo res;
        reqObj->orgApacheSlingEventImplJobsJcrPersistenceHandlerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingEventImplJobsJobConsumerManager(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool org_apache_sling_installer_configuration_persist, QList<QString> job_consumermanager_whitelist, QList<QString> job_consumermanager_blacklist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(org_apache_sling_installer_configuration_persist);
    Q_UNUSED(job_consumermanager_whitelist);
    Q_UNUSED(job_consumermanager_blacklist);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingEventImplJobsJobConsumerManagerInfo res;
        reqObj->orgApacheSlingEventImplJobsJobConsumerManagerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingEventJobsQueueConfiguration(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString queue_name, QList<QString> queue_topics, QString queue_type, QString queue_priority, qint32 queue_retries, qint32 queue_retrydelay, OAINumber queue_maxparallel, bool queue_keep_jobs, bool queue_prefer_run_on_creation_instance, qint32 queue_thread_pool_size, qint32 service_ranking) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(queue_name);
    Q_UNUSED(queue_topics);
    Q_UNUSED(queue_type);
    Q_UNUSED(queue_priority);
    Q_UNUSED(queue_retries);
    Q_UNUSED(queue_retrydelay);
    Q_UNUSED(queue_maxparallel);
    Q_UNUSED(queue_keep_jobs);
    Q_UNUSED(queue_prefer_run_on_creation_instance);
    Q_UNUSED(queue_thread_pool_size);
    Q_UNUSED(service_ranking);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingEventJobsQueueConfigurationInfo res;
        reqObj->orgApacheSlingEventJobsQueueConfigurationResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> users, QList<QString> groups) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(users);
    Q_UNUSED(groups);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo res;
        reqObj->orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingFeatureflagsFeature(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString description, bool enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(description);
    Q_UNUSED(enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingFeatureflagsFeatureInfo res;
        reqObj->orgApacheSlingFeatureflagsFeatureResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingFeatureflagsImplConfiguredFeature(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString name, QString description, bool enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(name);
    Q_UNUSED(description);
    Q_UNUSED(enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingFeatureflagsImplConfiguredFeatureInfo res;
        reqObj->orgApacheSlingFeatureflagsImplConfiguredFeatureResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingHapiImplHApiUtilImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString org_apache_sling_hapi_tools_resourcetype, QString org_apache_sling_hapi_tools_collectionresourcetype, QList<QString> org_apache_sling_hapi_tools_searchpaths, QString org_apache_sling_hapi_tools_externalurl, bool org_apache_sling_hapi_tools_enabled) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(org_apache_sling_hapi_tools_resourcetype);
    Q_UNUSED(org_apache_sling_hapi_tools_collectionresourcetype);
    Q_UNUSED(org_apache_sling_hapi_tools_searchpaths);
    Q_UNUSED(org_apache_sling_hapi_tools_externalurl);
    Q_UNUSED(org_apache_sling_hapi_tools_enabled);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingHapiImplHApiUtilImplInfo res;
        reqObj->orgApacheSlingHapiImplHApiUtilImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingHcCoreImplCompositeHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString hc_name, QList<QString> hc_tags, QString hc_mbean_name, QList<QString> filter_tags, bool filter_combine_tags_with_or) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_name);
    Q_UNUSED(hc_tags);
    Q_UNUSED(hc_mbean_name);
    Q_UNUSED(filter_tags);
    Q_UNUSED(filter_combine_tags_with_or);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingHcCoreImplCompositeHealthCheckInfo res;
        reqObj->orgApacheSlingHcCoreImplCompositeHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 timeout_in_ms, qint32 long_running_future_threshold_for_critical_ms, qint32 result_cache_ttl_in_ms) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(timeout_in_ms);
    Q_UNUSED(long_running_future_threshold_for_critical_ms);
    Q_UNUSED(result_cache_ttl_in_ms);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo res;
        reqObj->orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingHcCoreImplJmxAttributeHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString hc_name, QList<QString> hc_tags, QString hc_mbean_name, QString mbean_name, QString attribute_name, QString attribute_value_constraint) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_name);
    Q_UNUSED(hc_tags);
    Q_UNUSED(hc_mbean_name);
    Q_UNUSED(mbean_name);
    Q_UNUSED(attribute_name);
    Q_UNUSED(attribute_value_constraint);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo res;
        reqObj->orgApacheSlingHcCoreImplJmxAttributeHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingHcCoreImplScriptableHealthCheck(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString hc_name, QList<QString> hc_tags, QString hc_mbean_name, QString expression, QString language_extension) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(hc_name);
    Q_UNUSED(hc_tags);
    Q_UNUSED(hc_mbean_name);
    Q_UNUSED(expression);
    Q_UNUSED(language_extension);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingHcCoreImplScriptableHealthCheckInfo res;
        reqObj->orgApacheSlingHcCoreImplScriptableHealthCheckResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString servlet_path, bool disabled, QString cors_access_control_allow_origin) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(servlet_path);
    Q_UNUSED(disabled);
    Q_UNUSED(cors_access_control_allow_origin);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo res;
        reqObj->orgApacheSlingHcCoreImplServletHealthCheckExecutorServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 total_width, qint32 col_width_name, qint32 col_width_result, qint32 col_width_timing) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(total_width);
    Q_UNUSED(col_width_name);
    Q_UNUSED(col_width_result);
    Q_UNUSED(col_width_timing);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo res;
        reqObj->orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingI18nImplI18NFilter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QList<QString> sling_filter_scope) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(sling_filter_scope);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingI18nImplI18NFilterInfo res;
        reqObj->orgApacheSlingI18nImplI18NFilterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingI18nImplJcrResourceBundleProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString locale_default, bool preload_bundles, qint32 invalidation_delay) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(locale_default);
    Q_UNUSED(preload_bundles);
    Q_UNUSED(invalidation_delay);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingI18nImplJcrResourceBundleProviderInfo res;
        reqObj->orgApacheSlingI18nImplJcrResourceBundleProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingInstallerProviderJcrImplJcrInstaller(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> handler_schemes, QString sling_jcrinstall_folder_name_regexp, qint32 sling_jcrinstall_folder_max_depth, QList<QString> sling_jcrinstall_search_path, QString sling_jcrinstall_new_config_path, QString sling_jcrinstall_signal_path, bool sling_jcrinstall_enable_writeback) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(handler_schemes);
    Q_UNUSED(sling_jcrinstall_folder_name_regexp);
    Q_UNUSED(sling_jcrinstall_folder_max_depth);
    Q_UNUSED(sling_jcrinstall_search_path);
    Q_UNUSED(sling_jcrinstall_new_config_path);
    Q_UNUSED(sling_jcrinstall_signal_path);
    Q_UNUSED(sling_jcrinstall_enable_writeback);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo res;
        reqObj->orgApacheSlingInstallerProviderJcrImplJcrInstallerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingJcrBaseInternalLoginAdminWhitelist(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool whitelist_bypass, QString whitelist_bundles_regexp) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(whitelist_bypass);
    Q_UNUSED(whitelist_bundles_regexp);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo res;
        reqObj->orgApacheSlingJcrBaseInternalLoginAdminWhitelistResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString whitelist_name, QList<QString> whitelist_bundles) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(whitelist_name);
    Q_UNUSED(whitelist_bundles);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo res;
        reqObj->orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingJcrDavexImplServletsSlingDavExServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString alias, bool dav_create_absolute_uri, QString dav_protectedhandlers) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(alias);
    Q_UNUSED(dav_create_absolute_uri);
    Q_UNUSED(dav_protectedhandlers);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo res;
        reqObj->orgApacheSlingJcrDavexImplServletsSlingDavExServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString java_naming_factory_initial, QString java_naming_provider_url) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(java_naming_factory_initial);
    Q_UNUSED(java_naming_provider_url);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo res;
        reqObj->orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 port) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(port);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo res;
        reqObj->orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingJcrRepoinitImplRepositoryInitializer(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> references) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(references);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo res;
        reqObj->orgApacheSlingJcrRepoinitImplRepositoryInitializerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingJcrRepoinitRepositoryInitializer(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> references, QList<QString> scripts) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(references);
    Q_UNUSED(scripts);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingJcrRepoinitRepositoryInitializerInfo res;
        reqObj->orgApacheSlingJcrRepoinitRepositoryInitializerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> resource_resolver_searchpath, bool resource_resolver_manglenamespaces, bool resource_resolver_allow_direct, QList<QString> resource_resolver_required_providers, QList<QString> resource_resolver_required_providernames, QList<QString> resource_resolver_virtual, QList<QString> resource_resolver_mapping, QString resource_resolver_map_location, QList<QString> resource_resolver_map_observation, qint32 resource_resolver_default_vanity_redirect_status, bool resource_resolver_enable_vanitypath, qint32 resource_resolver_vanitypath_max_entries, bool resource_resolver_vanitypath_max_entries_startup, qint32 resource_resolver_vanitypath_bloomfilter_max_bytes, bool resource_resolver_optimize_alias_resolution, QList<QString> resource_resolver_vanitypath_whitelist, QList<QString> resource_resolver_vanitypath_blacklist, bool resource_resolver_vanity_precedence, bool resource_resolver_providerhandling_paranoid, bool resource_resolver_log_closing, bool resource_resolver_log_unclosed) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(resource_resolver_searchpath);
    Q_UNUSED(resource_resolver_manglenamespaces);
    Q_UNUSED(resource_resolver_allow_direct);
    Q_UNUSED(resource_resolver_required_providers);
    Q_UNUSED(resource_resolver_required_providernames);
    Q_UNUSED(resource_resolver_virtual);
    Q_UNUSED(resource_resolver_mapping);
    Q_UNUSED(resource_resolver_map_location);
    Q_UNUSED(resource_resolver_map_observation);
    Q_UNUSED(resource_resolver_default_vanity_redirect_status);
    Q_UNUSED(resource_resolver_enable_vanitypath);
    Q_UNUSED(resource_resolver_vanitypath_max_entries);
    Q_UNUSED(resource_resolver_vanitypath_max_entries_startup);
    Q_UNUSED(resource_resolver_vanitypath_bloomfilter_max_bytes);
    Q_UNUSED(resource_resolver_optimize_alias_resolution);
    Q_UNUSED(resource_resolver_vanitypath_whitelist);
    Q_UNUSED(resource_resolver_vanitypath_blacklist);
    Q_UNUSED(resource_resolver_vanity_precedence);
    Q_UNUSED(resource_resolver_providerhandling_paranoid);
    Q_UNUSED(resource_resolver_log_closing);
    Q_UNUSED(resource_resolver_log_unclosed);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo res;
        reqObj->orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingJcrResourceInternalJcrSystemUserValidator(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool allow_only_system_user) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(allow_only_system_user);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo res;
        reqObj->orgApacheSlingJcrResourceInternalJcrSystemUserValidatorResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString path, QString checkpath_prefix, QString jcr_path) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(path);
    Q_UNUSED(checkpath_prefix);
    Q_UNUSED(jcr_path);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo res;
        reqObj->orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QString type_collections, QString type_noncollections, QString type_content) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(type_collections);
    Q_UNUSED(type_noncollections);
    Q_UNUSED(type_content);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo res;
        reqObj->orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo res;
        reqObj->orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString dav_root, bool dav_create_absolute_uri, QString dav_realm, QList<QString> collection_types, QList<QString> filter_prefixes, QString filter_types, QString filter_uris, QString type_collections, QString type_noncollections, QString type_content) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(dav_root);
    Q_UNUSED(dav_create_absolute_uri);
    Q_UNUSED(dav_realm);
    Q_UNUSED(collection_types);
    Q_UNUSED(filter_prefixes);
    Q_UNUSED(filter_types);
    Q_UNUSED(filter_uris);
    Q_UNUSED(type_collections);
    Q_UNUSED(type_noncollections);
    Q_UNUSED(type_content);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo res;
        reqObj->orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingJmxProviderImplJMXResourceProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString provider_roots) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(provider_roots);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingJmxProviderImplJMXResourceProviderInfo res;
        reqObj->orgApacheSlingJmxProviderImplJMXResourceProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingModelsImplModelAdapterFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString osgi_http_whiteboard_listener, QString osgi_http_whiteboard_context_select, qint32 max_recursion_depth, qint32 cleanup_job_period) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(osgi_http_whiteboard_listener);
    Q_UNUSED(osgi_http_whiteboard_context_select);
    Q_UNUSED(max_recursion_depth);
    Q_UNUSED(cleanup_job_period);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingModelsImplModelAdapterFactoryInfo res;
        reqObj->orgApacheSlingModelsImplModelAdapterFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 max_recursion_levels) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(max_recursion_levels);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo res;
        reqObj->orgApacheSlingModelsJacksonexporterImplResourceModuleProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString felix_inventory_printer_name, QString felix_inventory_printer_title, QString path) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(felix_inventory_printer_name);
    Q_UNUSED(felix_inventory_printer_title);
    Q_UNUSED(path);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo res;
        reqObj->orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingResourcemergerImplMergedResourceProviderFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString merge_root, bool merge_read_only) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(merge_root);
    Q_UNUSED(merge_read_only);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo res;
        reqObj->orgApacheSlingResourcemergerImplMergedResourceProviderFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingResourcemergerPickerOverriding(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString merge_root, bool merge_read_only) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(merge_root);
    Q_UNUSED(merge_read_only);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingResourcemergerPickerOverridingInfo res;
        reqObj->orgApacheSlingResourcemergerPickerOverridingResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingScriptingCoreImplScriptCacheImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 org_apache_sling_scripting_cache_size, QList<QString> org_apache_sling_scripting_cache_additional_extensions) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(org_apache_sling_scripting_cache_size);
    Q_UNUSED(org_apache_sling_scripting_cache_additional_extensions);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingScriptingCoreImplScriptCacheImplInfo res;
        reqObj->orgApacheSlingScriptingCoreImplScriptCacheImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool log_stacktrace_onclose) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(log_stacktrace_onclose);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo res;
        reqObj->orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool java_classdebuginfo, QString java_java_encoding, QString java_compiler_source_vm, QString java_compiler_target_vm) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(java_classdebuginfo);
    Q_UNUSED(java_java_encoding);
    Q_UNUSED(java_compiler_source_vm);
    Q_UNUSED(java_compiler_target_vm);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo res;
        reqObj->orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 org_apache_sling_scripting_javascript_rhino_opt_level) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(org_apache_sling_scripting_javascript_rhino_opt_level);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo res;
        reqObj->orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingScriptingJspJspScriptEngineFactory(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString jasper_compiler_target_vm, QString jasper_compiler_source_vm, bool jasper_classdebuginfo, bool jasper_enable_pooling, QString jasper_ie_class_id, bool jasper_gen_string_as_char_array, bool jasper_keepgenerated, bool jasper_mappedfile, bool jasper_trim_spaces, bool jasper_display_source_fragments, bool default_is_session) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(jasper_compiler_target_vm);
    Q_UNUSED(jasper_compiler_source_vm);
    Q_UNUSED(jasper_classdebuginfo);
    Q_UNUSED(jasper_enable_pooling);
    Q_UNUSED(jasper_ie_class_id);
    Q_UNUSED(jasper_gen_string_as_char_array);
    Q_UNUSED(jasper_keepgenerated);
    Q_UNUSED(jasper_mappedfile);
    Q_UNUSED(jasper_trim_spaces);
    Q_UNUSED(jasper_display_source_fragments);
    Q_UNUSED(default_is_session);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingScriptingJspJspScriptEngineFactoryInfo res;
        reqObj->orgApacheSlingScriptingJspJspScriptEngineFactoryResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> org_apache_sling_scripting_sightly_js_bindings) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(org_apache_sling_scripting_sightly_js_bindings);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo res;
        reqObj->orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingSecurityImplContentDispositionFilter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> sling_content_disposition_paths, QList<QString> sling_content_disposition_excluded_paths, bool sling_content_disposition_all_paths) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sling_content_disposition_paths);
    Q_UNUSED(sling_content_disposition_excluded_paths);
    Q_UNUSED(sling_content_disposition_all_paths);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingSecurityImplContentDispositionFilterInfo res;
        reqObj->orgApacheSlingSecurityImplContentDispositionFilterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingSecurityImplReferrerFilter(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool allow_empty, QList<QString> allow_hosts, QList<QString> allow_hosts_regexp, QList<QString> filter_methods, QList<QString> exclude_agents_regexp) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(allow_empty);
    Q_UNUSED(allow_hosts);
    Q_UNUSED(allow_hosts_regexp);
    Q_UNUSED(filter_methods);
    Q_UNUSED(exclude_agents_regexp);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingSecurityImplReferrerFilterInfo res;
        reqObj->orgApacheSlingSecurityImplReferrerFilterResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingServiceusermappingImplServiceUserMapperImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> user_mapping, QString user_default, bool user_enable_default_mapping, bool require_validation) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(user_mapping);
    Q_UNUSED(user_default);
    Q_UNUSED(user_enable_default_mapping);
    Q_UNUSED(require_validation);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo res;
        reqObj->orgApacheSlingServiceusermappingImplServiceUserMapperImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, qint32 service_ranking, QList<QString> user_mapping) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(service_ranking);
    Q_UNUSED(user_mapping);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo res;
        reqObj->orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingServletsGetDefaultGetServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> aliases, bool index, QList<QString> index_files, bool enable_html, bool enable_json, bool enable_txt, bool enable_xml, qint32 json_maximumresults, bool ecma_suport) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(aliases);
    Q_UNUSED(index);
    Q_UNUSED(index_files);
    Q_UNUSED(enable_html);
    Q_UNUSED(enable_json);
    Q_UNUSED(enable_txt);
    Q_UNUSED(enable_xml);
    Q_UNUSED(json_maximumresults);
    Q_UNUSED(ecma_suport);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingServletsGetDefaultGetServletInfo res;
        reqObj->orgApacheSlingServletsGetDefaultGetServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingServletsGetImplVersionVersionInfoServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> sling_servlet_selectors, bool ecma_suport) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sling_servlet_selectors);
    Q_UNUSED(ecma_suport);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingServletsGetImplVersionVersionInfoServletInfo res;
        reqObj->orgApacheSlingServletsGetImplVersionVersionInfoServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingServletsPostImplHelperChunkCleanUpTask(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString scheduler_expression, bool scheduler_concurrent, qint32 chunk_cleanup_age) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(scheduler_expression);
    Q_UNUSED(scheduler_concurrent);
    Q_UNUSED(chunk_cleanup_age);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo res;
        reqObj->orgApacheSlingServletsPostImplHelperChunkCleanUpTaskResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingServletsPostImplSlingPostServlet(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> servlet_post_date_formats, QList<QString> servlet_post_node_name_hints, qint32 servlet_post_node_name_max_length, bool servlet_post_checkin_new_versionable_nodes, bool servlet_post_auto_checkout, bool servlet_post_auto_checkin, QString servlet_post_ignore_pattern) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(servlet_post_date_formats);
    Q_UNUSED(servlet_post_node_name_hints);
    Q_UNUSED(servlet_post_node_name_max_length);
    Q_UNUSED(servlet_post_checkin_new_versionable_nodes);
    Q_UNUSED(servlet_post_auto_checkout);
    Q_UNUSED(servlet_post_auto_checkin);
    Q_UNUSED(servlet_post_ignore_pattern);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingServletsPostImplSlingPostServletInfo res;
        reqObj->orgApacheSlingServletsPostImplSlingPostServletResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingServletsResolverSlingServletResolver(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString servletresolver_servlet_root, qint32 servletresolver_cache_size, QList<QString> servletresolver_paths, QList<QString> servletresolver_default_extensions) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(servletresolver_servlet_root);
    Q_UNUSED(servletresolver_cache_size);
    Q_UNUSED(servletresolver_paths);
    Q_UNUSED(servletresolver_default_extensions);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingServletsResolverSlingServletResolverInfo res;
        reqObj->orgApacheSlingServletsResolverSlingServletResolverResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingSettingsImplSlingSettingsServiceImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString sling_name, QString sling_description) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(sling_name);
    Q_UNUSED(sling_description);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingSettingsImplSlingSettingsServiceImplInfo res;
        reqObj->orgApacheSlingSettingsImplSlingSettingsServiceImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingStartupfilterImplStartupFilterImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, bool active_by_default, QString default_message) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(active_by_default);
    Q_UNUSED(default_message);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingStartupfilterImplStartupFilterImplInfo res;
        reqObj->orgApacheSlingStartupfilterImplStartupFilterImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingTenantInternalTenantProviderImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString tenant_root, QList<QString> tenant_path_matcher) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(tenant_root);
    Q_UNUSED(tenant_path_matcher);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingTenantInternalTenantProviderImplInfo res;
        reqObj->orgApacheSlingTenantInternalTenantProviderImplResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingTracerInternalLogTracer(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QList<QString> tracer_sets, bool enabled, bool servlet_enabled, qint32 recording_cache_size_in_mb, qint32 recording_cache_duration_in_secs, bool recording_compression_enabled, bool gzip_response) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(tracer_sets);
    Q_UNUSED(enabled);
    Q_UNUSED(servlet_enabled);
    Q_UNUSED(recording_cache_size_in_mb);
    Q_UNUSED(recording_cache_duration_in_secs);
    Q_UNUSED(recording_compression_enabled);
    Q_UNUSED(gzip_response);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingTracerInternalLogTracerInfo res;
        reqObj->orgApacheSlingTracerInternalLogTracerResponse(res);
    }    
}
void OAIConfigmgrApiHandler::orgApacheSlingXssImplXSSFilterImpl(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> propertylist, QString policy_path) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(propertylist);
    Q_UNUSED(policy_path);
    auto reqObj = qobject_cast<OAIConfigmgrApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOrgApacheSlingXssImplXSSFilterImplInfo res;
        reqObj->orgApacheSlingXssImplXSSFilterImplResponse(res);
    }    
}


}
