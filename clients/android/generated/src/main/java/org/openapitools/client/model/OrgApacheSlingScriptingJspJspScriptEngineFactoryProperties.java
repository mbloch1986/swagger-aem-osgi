/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.openapitools.client.model.ConfigNodePropertyBoolean;
import org.openapitools.client.model.ConfigNodePropertyString;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties {
  
  @SerializedName("jasper.compilerTargetVM")
  private ConfigNodePropertyString jasperCompilerTargetVM = null;
  @SerializedName("jasper.compilerSourceVM")
  private ConfigNodePropertyString jasperCompilerSourceVM = null;
  @SerializedName("jasper.classdebuginfo")
  private ConfigNodePropertyBoolean jasperClassdebuginfo = null;
  @SerializedName("jasper.enablePooling")
  private ConfigNodePropertyBoolean jasperEnablePooling = null;
  @SerializedName("jasper.ieClassId")
  private ConfigNodePropertyString jasperIeClassId = null;
  @SerializedName("jasper.genStringAsCharArray")
  private ConfigNodePropertyBoolean jasperGenStringAsCharArray = null;
  @SerializedName("jasper.keepgenerated")
  private ConfigNodePropertyBoolean jasperKeepgenerated = null;
  @SerializedName("jasper.mappedfile")
  private ConfigNodePropertyBoolean jasperMappedfile = null;
  @SerializedName("jasper.trimSpaces")
  private ConfigNodePropertyBoolean jasperTrimSpaces = null;
  @SerializedName("jasper.displaySourceFragments")
  private ConfigNodePropertyBoolean jasperDisplaySourceFragments = null;
  @SerializedName("default.is.session")
  private ConfigNodePropertyBoolean defaultIsSession = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getJasperCompilerTargetVM() {
    return jasperCompilerTargetVM;
  }
  public void setJasperCompilerTargetVM(ConfigNodePropertyString jasperCompilerTargetVM) {
    this.jasperCompilerTargetVM = jasperCompilerTargetVM;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getJasperCompilerSourceVM() {
    return jasperCompilerSourceVM;
  }
  public void setJasperCompilerSourceVM(ConfigNodePropertyString jasperCompilerSourceVM) {
    this.jasperCompilerSourceVM = jasperCompilerSourceVM;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getJasperClassdebuginfo() {
    return jasperClassdebuginfo;
  }
  public void setJasperClassdebuginfo(ConfigNodePropertyBoolean jasperClassdebuginfo) {
    this.jasperClassdebuginfo = jasperClassdebuginfo;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getJasperEnablePooling() {
    return jasperEnablePooling;
  }
  public void setJasperEnablePooling(ConfigNodePropertyBoolean jasperEnablePooling) {
    this.jasperEnablePooling = jasperEnablePooling;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getJasperIeClassId() {
    return jasperIeClassId;
  }
  public void setJasperIeClassId(ConfigNodePropertyString jasperIeClassId) {
    this.jasperIeClassId = jasperIeClassId;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getJasperGenStringAsCharArray() {
    return jasperGenStringAsCharArray;
  }
  public void setJasperGenStringAsCharArray(ConfigNodePropertyBoolean jasperGenStringAsCharArray) {
    this.jasperGenStringAsCharArray = jasperGenStringAsCharArray;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getJasperKeepgenerated() {
    return jasperKeepgenerated;
  }
  public void setJasperKeepgenerated(ConfigNodePropertyBoolean jasperKeepgenerated) {
    this.jasperKeepgenerated = jasperKeepgenerated;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getJasperMappedfile() {
    return jasperMappedfile;
  }
  public void setJasperMappedfile(ConfigNodePropertyBoolean jasperMappedfile) {
    this.jasperMappedfile = jasperMappedfile;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getJasperTrimSpaces() {
    return jasperTrimSpaces;
  }
  public void setJasperTrimSpaces(ConfigNodePropertyBoolean jasperTrimSpaces) {
    this.jasperTrimSpaces = jasperTrimSpaces;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getJasperDisplaySourceFragments() {
    return jasperDisplaySourceFragments;
  }
  public void setJasperDisplaySourceFragments(ConfigNodePropertyBoolean jasperDisplaySourceFragments) {
    this.jasperDisplaySourceFragments = jasperDisplaySourceFragments;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getDefaultIsSession() {
    return defaultIsSession;
  }
  public void setDefaultIsSession(ConfigNodePropertyBoolean defaultIsSession) {
    this.defaultIsSession = defaultIsSession;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties orgApacheSlingScriptingJspJspScriptEngineFactoryProperties = (OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties) o;
    return (this.jasperCompilerTargetVM == null ? orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.jasperCompilerTargetVM == null : this.jasperCompilerTargetVM.equals(orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.jasperCompilerTargetVM)) &&
        (this.jasperCompilerSourceVM == null ? orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.jasperCompilerSourceVM == null : this.jasperCompilerSourceVM.equals(orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.jasperCompilerSourceVM)) &&
        (this.jasperClassdebuginfo == null ? orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.jasperClassdebuginfo == null : this.jasperClassdebuginfo.equals(orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.jasperClassdebuginfo)) &&
        (this.jasperEnablePooling == null ? orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.jasperEnablePooling == null : this.jasperEnablePooling.equals(orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.jasperEnablePooling)) &&
        (this.jasperIeClassId == null ? orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.jasperIeClassId == null : this.jasperIeClassId.equals(orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.jasperIeClassId)) &&
        (this.jasperGenStringAsCharArray == null ? orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.jasperGenStringAsCharArray == null : this.jasperGenStringAsCharArray.equals(orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.jasperGenStringAsCharArray)) &&
        (this.jasperKeepgenerated == null ? orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.jasperKeepgenerated == null : this.jasperKeepgenerated.equals(orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.jasperKeepgenerated)) &&
        (this.jasperMappedfile == null ? orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.jasperMappedfile == null : this.jasperMappedfile.equals(orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.jasperMappedfile)) &&
        (this.jasperTrimSpaces == null ? orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.jasperTrimSpaces == null : this.jasperTrimSpaces.equals(orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.jasperTrimSpaces)) &&
        (this.jasperDisplaySourceFragments == null ? orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.jasperDisplaySourceFragments == null : this.jasperDisplaySourceFragments.equals(orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.jasperDisplaySourceFragments)) &&
        (this.defaultIsSession == null ? orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.defaultIsSession == null : this.defaultIsSession.equals(orgApacheSlingScriptingJspJspScriptEngineFactoryProperties.defaultIsSession));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.jasperCompilerTargetVM == null ? 0: this.jasperCompilerTargetVM.hashCode());
    result = 31 * result + (this.jasperCompilerSourceVM == null ? 0: this.jasperCompilerSourceVM.hashCode());
    result = 31 * result + (this.jasperClassdebuginfo == null ? 0: this.jasperClassdebuginfo.hashCode());
    result = 31 * result + (this.jasperEnablePooling == null ? 0: this.jasperEnablePooling.hashCode());
    result = 31 * result + (this.jasperIeClassId == null ? 0: this.jasperIeClassId.hashCode());
    result = 31 * result + (this.jasperGenStringAsCharArray == null ? 0: this.jasperGenStringAsCharArray.hashCode());
    result = 31 * result + (this.jasperKeepgenerated == null ? 0: this.jasperKeepgenerated.hashCode());
    result = 31 * result + (this.jasperMappedfile == null ? 0: this.jasperMappedfile.hashCode());
    result = 31 * result + (this.jasperTrimSpaces == null ? 0: this.jasperTrimSpaces.hashCode());
    result = 31 * result + (this.jasperDisplaySourceFragments == null ? 0: this.jasperDisplaySourceFragments.hashCode());
    result = 31 * result + (this.defaultIsSession == null ? 0: this.defaultIsSession.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties {\n");
    
    sb.append("  jasperCompilerTargetVM: ").append(jasperCompilerTargetVM).append("\n");
    sb.append("  jasperCompilerSourceVM: ").append(jasperCompilerSourceVM).append("\n");
    sb.append("  jasperClassdebuginfo: ").append(jasperClassdebuginfo).append("\n");
    sb.append("  jasperEnablePooling: ").append(jasperEnablePooling).append("\n");
    sb.append("  jasperIeClassId: ").append(jasperIeClassId).append("\n");
    sb.append("  jasperGenStringAsCharArray: ").append(jasperGenStringAsCharArray).append("\n");
    sb.append("  jasperKeepgenerated: ").append(jasperKeepgenerated).append("\n");
    sb.append("  jasperMappedfile: ").append(jasperMappedfile).append("\n");
    sb.append("  jasperTrimSpaces: ").append(jasperTrimSpaces).append("\n");
    sb.append("  jasperDisplaySourceFragments: ").append(jasperDisplaySourceFragments).append("\n");
    sb.append("  defaultIsSession: ").append(defaultIsSession).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
