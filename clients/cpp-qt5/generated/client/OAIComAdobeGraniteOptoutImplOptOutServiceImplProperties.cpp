/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties() {
    init();
}

OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::~OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::init() {
    optout_cookies = new OAIConfigNodePropertyArray();
    m_optout_cookies_isSet = false;
    optout_headers = new OAIConfigNodePropertyArray();
    m_optout_headers_isSet = false;
    optout_whitelist_cookies = new OAIConfigNodePropertyArray();
    m_optout_whitelist_cookies_isSet = false;
}

void
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::cleanup() {
    if(optout_cookies != nullptr) { 
        delete optout_cookies;
    }
    if(optout_headers != nullptr) { 
        delete optout_headers;
    }
    if(optout_whitelist_cookies != nullptr) { 
        delete optout_whitelist_cookies;
    }
}

OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties*
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&optout_cookies, pJson["optout.cookies"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&optout_headers, pJson["optout.headers"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&optout_whitelist_cookies, pJson["optout.whitelist.cookies"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::asJsonObject() {
    QJsonObject obj;
    if((optout_cookies != nullptr) && (optout_cookies->isSet())){
        toJsonValue(QString("optout.cookies"), optout_cookies, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((optout_headers != nullptr) && (optout_headers->isSet())){
        toJsonValue(QString("optout.headers"), optout_headers, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((optout_whitelist_cookies != nullptr) && (optout_whitelist_cookies->isSet())){
        toJsonValue(QString("optout.whitelist.cookies"), optout_whitelist_cookies, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::getOptoutCookies() {
    return optout_cookies;
}
void
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::setOptoutCookies(OAIConfigNodePropertyArray* optout_cookies) {
    this->optout_cookies = optout_cookies;
    this->m_optout_cookies_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::getOptoutHeaders() {
    return optout_headers;
}
void
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::setOptoutHeaders(OAIConfigNodePropertyArray* optout_headers) {
    this->optout_headers = optout_headers;
    this->m_optout_headers_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::getOptoutWhitelistCookies() {
    return optout_whitelist_cookies;
}
void
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::setOptoutWhitelistCookies(OAIConfigNodePropertyArray* optout_whitelist_cookies) {
    this->optout_whitelist_cookies = optout_whitelist_cookies;
    this->m_optout_whitelist_cookies_isSet = true;
}


bool
OAIComAdobeGraniteOptoutImplOptOutServiceImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(optout_cookies != nullptr && optout_cookies->isSet()){ isObjectUpdated = true; break;}
        if(optout_headers != nullptr && optout_headers->isSet()){ isObjectUpdated = true; break;}
        if(optout_whitelist_cookies != nullptr && optout_whitelist_cookies->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

