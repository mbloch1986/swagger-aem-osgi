/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties : IEquatable<ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties>
    { 
        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path")]
        public ConfigNodePropertyString Path { get; set; }

        /// <summary>
        /// Gets or Sets JaasControlFlag
        /// </summary>
        [DataMember(Name="jaas.controlFlag")]
        public ConfigNodePropertyString JaasControlFlag { get; set; }

        /// <summary>
        /// Gets or Sets JaasRealmName
        /// </summary>
        [DataMember(Name="jaas.realmName")]
        public ConfigNodePropertyString JaasRealmName { get; set; }

        /// <summary>
        /// Gets or Sets JaasRanking
        /// </summary>
        [DataMember(Name="jaas.ranking")]
        public ConfigNodePropertyInteger JaasRanking { get; set; }

        /// <summary>
        /// Gets or Sets OauthOfflineValidation
        /// </summary>
        [DataMember(Name="oauth.offline.validation")]
        public ConfigNodePropertyBoolean OauthOfflineValidation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  JaasControlFlag: ").Append(JaasControlFlag).Append("\n");
            sb.Append("  JaasRealmName: ").Append(JaasRealmName).Append("\n");
            sb.Append("  JaasRanking: ").Append(JaasRanking).Append("\n");
            sb.Append("  OauthOfflineValidation: ").Append(OauthOfflineValidation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Path == other.Path ||
                    Path != null &&
                    Path.Equals(other.Path)
                ) && 
                (
                    JaasControlFlag == other.JaasControlFlag ||
                    JaasControlFlag != null &&
                    JaasControlFlag.Equals(other.JaasControlFlag)
                ) && 
                (
                    JaasRealmName == other.JaasRealmName ||
                    JaasRealmName != null &&
                    JaasRealmName.Equals(other.JaasRealmName)
                ) && 
                (
                    JaasRanking == other.JaasRanking ||
                    JaasRanking != null &&
                    JaasRanking.Equals(other.JaasRanking)
                ) && 
                (
                    OauthOfflineValidation == other.OauthOfflineValidation ||
                    OauthOfflineValidation != null &&
                    OauthOfflineValidation.Equals(other.OauthOfflineValidation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Path != null)
                    hashCode = hashCode * 59 + Path.GetHashCode();
                    if (JaasControlFlag != null)
                    hashCode = hashCode * 59 + JaasControlFlag.GetHashCode();
                    if (JaasRealmName != null)
                    hashCode = hashCode * 59 + JaasRealmName.GetHashCode();
                    if (JaasRanking != null)
                    hashCode = hashCode * 59 + JaasRanking.GetHashCode();
                    if (OauthOfflineValidation != null)
                    hashCode = hashCode * 59 + OauthOfflineValidation.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties left, ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties left, ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
