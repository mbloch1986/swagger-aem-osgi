/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqWcmMsmImplRolloutManagerImplProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqWcmMsmImplRolloutManagerImplProperties::ComDayCqWcmMsmImplRolloutManagerImplProperties()
{
    
}

ComDayCqWcmMsmImplRolloutManagerImplProperties::~ComDayCqWcmMsmImplRolloutManagerImplProperties()
{
}

std::string ComDayCqWcmMsmImplRolloutManagerImplProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void ComDayCqWcmMsmImplRolloutManagerImplProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmMsmImplRolloutManagerImplProperties::getEventFilter() const
{
    return m_Event_filter;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::setEventFilter(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Event_filter = value;
}
std::shared_ptr<ConfigNodePropertyArray> ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrExcludedpropsDefault() const
{
    return m_Rolloutmgr_excludedprops_default;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrExcludedpropsDefault(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Rolloutmgr_excludedprops_default = value;
}
std::shared_ptr<ConfigNodePropertyArray> ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrExcludedparagraphpropsDefault() const
{
    return m_Rolloutmgr_excludedparagraphprops_default;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrExcludedparagraphpropsDefault(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Rolloutmgr_excludedparagraphprops_default = value;
}
std::shared_ptr<ConfigNodePropertyArray> ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrExcludednodetypesDefault() const
{
    return m_Rolloutmgr_excludednodetypes_default;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrExcludednodetypesDefault(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Rolloutmgr_excludednodetypes_default = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrThreadpoolMaxsize() const
{
    return m_Rolloutmgr_threadpool_maxsize;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrThreadpoolMaxsize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Rolloutmgr_threadpool_maxsize = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrThreadpoolMaxshutdowntime() const
{
    return m_Rolloutmgr_threadpool_maxshutdowntime;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrThreadpoolMaxshutdowntime(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Rolloutmgr_threadpool_maxshutdowntime = value;
}
std::shared_ptr<ConfigNodePropertyDropDown> ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrThreadpoolPriority() const
{
    return m_Rolloutmgr_threadpool_priority;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrThreadpoolPriority(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Rolloutmgr_threadpool_priority = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrCommitSize() const
{
    return m_Rolloutmgr_commit_size;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrCommitSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Rolloutmgr_commit_size = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrConflicthandlingEnabled() const
{
    return m_Rolloutmgr_conflicthandling_enabled;
}
void ComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrConflicthandlingEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Rolloutmgr_conflicthandling_enabled = value;
}

}
}
}
}

