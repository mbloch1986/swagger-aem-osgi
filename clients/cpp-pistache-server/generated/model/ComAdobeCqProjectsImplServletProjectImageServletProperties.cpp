/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqProjectsImplServletProjectImageServletProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqProjectsImplServletProjectImageServletProperties::ComAdobeCqProjectsImplServletProjectImageServletProperties()
{
    m_Image_qualityIsSet = false;
    m_Image_supported_resolutionsIsSet = false;
    
}

ComAdobeCqProjectsImplServletProjectImageServletProperties::~ComAdobeCqProjectsImplServletProjectImageServletProperties()
{
}

void ComAdobeCqProjectsImplServletProjectImageServletProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqProjectsImplServletProjectImageServletProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Image_qualityIsSet)
    {
        val["image.quality"] = ModelBase::toJson(m_Image_quality);
    }
    if(m_Image_supported_resolutionsIsSet)
    {
        val["image.supported.resolutions"] = ModelBase::toJson(m_Image_supported_resolutions);
    }
    

    return val;
}

void ComAdobeCqProjectsImplServletProjectImageServletProperties::fromJson(nlohmann::json& val)
{
    if(val.find("image.quality") != val.end())
    {
        if(!val["image.quality"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["image.quality"]);
            setImageQuality( newItem );
        }
        
    }
    if(val.find("image.supported.resolutions") != val.end())
    {
        if(!val["image.supported.resolutions"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["image.supported.resolutions"]);
            setImageSupportedResolutions( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeCqProjectsImplServletProjectImageServletProperties::getImageQuality() const
{
    return m_Image_quality;
}
void ComAdobeCqProjectsImplServletProjectImageServletProperties::setImageQuality(ConfigNodePropertyString const& value)
{
    m_Image_quality = value;
    m_Image_qualityIsSet = true;
}
bool ComAdobeCqProjectsImplServletProjectImageServletProperties::imageQualityIsSet() const
{
    return m_Image_qualityIsSet;
}
void ComAdobeCqProjectsImplServletProjectImageServletProperties::unsetImage_quality()
{
    m_Image_qualityIsSet = false;
}
ConfigNodePropertyString ComAdobeCqProjectsImplServletProjectImageServletProperties::getImageSupportedResolutions() const
{
    return m_Image_supported_resolutions;
}
void ComAdobeCqProjectsImplServletProjectImageServletProperties::setImageSupportedResolutions(ConfigNodePropertyString const& value)
{
    m_Image_supported_resolutions = value;
    m_Image_supported_resolutionsIsSet = true;
}
bool ComAdobeCqProjectsImplServletProjectImageServletProperties::imageSupportedResolutionsIsSet() const
{
    return m_Image_supported_resolutionsIsSet;
}
void ComAdobeCqProjectsImplServletProjectImageServletProperties::unsetImage_supported_resolutions()
{
    m_Image_supported_resolutionsIsSet = false;
}

}
}
}
}

