/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.openapitools.client.model.ConfigNodePropertyBoolean;
import org.openapitools.client.model.ConfigNodePropertyInteger;
import org.openapitools.client.model.ConfigNodePropertyString;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties {
  
  @SerializedName("solr.zk.timeout")
  private ConfigNodePropertyString solrZkTimeout = null;
  @SerializedName("solr.commit")
  private ConfigNodePropertyString solrCommit = null;
  @SerializedName("cache.on")
  private ConfigNodePropertyBoolean cacheOn = null;
  @SerializedName("concurrency.level")
  private ConfigNodePropertyInteger concurrencyLevel = null;
  @SerializedName("cache.start.size")
  private ConfigNodePropertyInteger cacheStartSize = null;
  @SerializedName("cache.ttl")
  private ConfigNodePropertyInteger cacheTtl = null;
  @SerializedName("cache.size")
  private ConfigNodePropertyInteger cacheSize = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getSolrZkTimeout() {
    return solrZkTimeout;
  }
  public void setSolrZkTimeout(ConfigNodePropertyString solrZkTimeout) {
    this.solrZkTimeout = solrZkTimeout;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getSolrCommit() {
    return solrCommit;
  }
  public void setSolrCommit(ConfigNodePropertyString solrCommit) {
    this.solrCommit = solrCommit;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getCacheOn() {
    return cacheOn;
  }
  public void setCacheOn(ConfigNodePropertyBoolean cacheOn) {
    this.cacheOn = cacheOn;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getConcurrencyLevel() {
    return concurrencyLevel;
  }
  public void setConcurrencyLevel(ConfigNodePropertyInteger concurrencyLevel) {
    this.concurrencyLevel = concurrencyLevel;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getCacheStartSize() {
    return cacheStartSize;
  }
  public void setCacheStartSize(ConfigNodePropertyInteger cacheStartSize) {
    this.cacheStartSize = cacheStartSize;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getCacheTtl() {
    return cacheTtl;
  }
  public void setCacheTtl(ConfigNodePropertyInteger cacheTtl) {
    this.cacheTtl = cacheTtl;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getCacheSize() {
    return cacheSize;
  }
  public void setCacheSize(ConfigNodePropertyInteger cacheSize) {
    this.cacheSize = cacheSize;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties = (ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties) o;
    return (this.solrZkTimeout == null ? comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties.solrZkTimeout == null : this.solrZkTimeout.equals(comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties.solrZkTimeout)) &&
        (this.solrCommit == null ? comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties.solrCommit == null : this.solrCommit.equals(comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties.solrCommit)) &&
        (this.cacheOn == null ? comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties.cacheOn == null : this.cacheOn.equals(comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties.cacheOn)) &&
        (this.concurrencyLevel == null ? comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties.concurrencyLevel == null : this.concurrencyLevel.equals(comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties.concurrencyLevel)) &&
        (this.cacheStartSize == null ? comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties.cacheStartSize == null : this.cacheStartSize.equals(comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties.cacheStartSize)) &&
        (this.cacheTtl == null ? comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties.cacheTtl == null : this.cacheTtl.equals(comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties.cacheTtl)) &&
        (this.cacheSize == null ? comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties.cacheSize == null : this.cacheSize.equals(comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties.cacheSize));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.solrZkTimeout == null ? 0: this.solrZkTimeout.hashCode());
    result = 31 * result + (this.solrCommit == null ? 0: this.solrCommit.hashCode());
    result = 31 * result + (this.cacheOn == null ? 0: this.cacheOn.hashCode());
    result = 31 * result + (this.concurrencyLevel == null ? 0: this.concurrencyLevel.hashCode());
    result = 31 * result + (this.cacheStartSize == null ? 0: this.cacheStartSize.hashCode());
    result = 31 * result + (this.cacheTtl == null ? 0: this.cacheTtl.hashCode());
    result = 31 * result + (this.cacheSize == null ? 0: this.cacheSize.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorProperties {\n");
    
    sb.append("  solrZkTimeout: ").append(solrZkTimeout).append("\n");
    sb.append("  solrCommit: ").append(solrCommit).append("\n");
    sb.append("  cacheOn: ").append(cacheOn).append("\n");
    sb.append("  concurrencyLevel: ").append(concurrencyLevel).append("\n");
    sb.append("  cacheStartSize: ").append(cacheStartSize).append("\n");
    sb.append("  cacheTtl: ").append(cacheTtl).append("\n");
    sb.append("  cacheSize: ").append(cacheSize).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
