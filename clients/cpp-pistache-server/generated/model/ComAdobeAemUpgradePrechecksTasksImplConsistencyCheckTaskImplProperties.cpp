/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties()
{
    m_Root_pathIsSet = false;
    m_Fix_inconsistenciesIsSet = false;
    
}

ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::~ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties()
{
}

void ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Root_pathIsSet)
    {
        val["root.path"] = ModelBase::toJson(m_Root_path);
    }
    if(m_Fix_inconsistenciesIsSet)
    {
        val["fix.inconsistencies"] = ModelBase::toJson(m_Fix_inconsistencies);
    }
    

    return val;
}

void ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("root.path") != val.end())
    {
        if(!val["root.path"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["root.path"]);
            setRootPath( newItem );
        }
        
    }
    if(val.find("fix.inconsistencies") != val.end())
    {
        if(!val["fix.inconsistencies"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["fix.inconsistencies"]);
            setFixInconsistencies( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::getRootPath() const
{
    return m_Root_path;
}
void ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::setRootPath(ConfigNodePropertyString const& value)
{
    m_Root_path = value;
    m_Root_pathIsSet = true;
}
bool ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::rootPathIsSet() const
{
    return m_Root_pathIsSet;
}
void ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::unsetRoot_path()
{
    m_Root_pathIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::getFixInconsistencies() const
{
    return m_Fix_inconsistencies;
}
void ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::setFixInconsistencies(ConfigNodePropertyBoolean const& value)
{
    m_Fix_inconsistencies = value;
    m_Fix_inconsistenciesIsSet = true;
}
bool ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::fixInconsistenciesIsSet() const
{
    return m_Fix_inconsistenciesIsSet;
}
void ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties::unsetFix_inconsistencies()
{
    m_Fix_inconsistenciesIsSet = false;
}

}
}
}
}

