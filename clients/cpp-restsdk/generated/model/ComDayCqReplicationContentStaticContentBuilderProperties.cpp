/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqReplicationContentStaticContentBuilderProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqReplicationContentStaticContentBuilderProperties::ComDayCqReplicationContentStaticContentBuilderProperties()
{
    m_HostIsSet = false;
    m_PortIsSet = false;
}

ComDayCqReplicationContentStaticContentBuilderProperties::~ComDayCqReplicationContentStaticContentBuilderProperties()
{
}

void ComDayCqReplicationContentStaticContentBuilderProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqReplicationContentStaticContentBuilderProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_HostIsSet)
    {
        val[utility::conversions::to_string_t("host")] = ModelBase::toJson(m_Host);
    }
    if(m_PortIsSet)
    {
        val[utility::conversions::to_string_t("port")] = ModelBase::toJson(m_Port);
    }

    return val;
}

void ComDayCqReplicationContentStaticContentBuilderProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("host")))
    {
        if(!val[utility::conversions::to_string_t("host")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("host")]);
            setHost( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("port")))
    {
        if(!val[utility::conversions::to_string_t("port")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("port")]);
            setPort( newItem );
        }
    }
}

void ComDayCqReplicationContentStaticContentBuilderProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_HostIsSet)
    {
        if (m_Host.get())
        {
            m_Host->toMultipart(multipart, utility::conversions::to_string_t("host."));
        }
    }
    if(m_PortIsSet)
    {
        if (m_Port.get())
        {
            m_Port->toMultipart(multipart, utility::conversions::to_string_t("port."));
        }
    }
}

void ComDayCqReplicationContentStaticContentBuilderProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("host")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("host")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("host."));
            setHost( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("port")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("port")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("port."));
            setPort( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqReplicationContentStaticContentBuilderProperties::getHost() const
{
    return m_Host;
}


void ComDayCqReplicationContentStaticContentBuilderProperties::setHost(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Host = value;
    m_HostIsSet = true;
}
bool ComDayCqReplicationContentStaticContentBuilderProperties::hostIsSet() const
{
    return m_HostIsSet;
}

void ComDayCqReplicationContentStaticContentBuilderProperties::unsetHost()
{
    m_HostIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqReplicationContentStaticContentBuilderProperties::getPort() const
{
    return m_Port;
}


void ComDayCqReplicationContentStaticContentBuilderProperties::setPort(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Port = value;
    m_PortIsSet = true;
}
bool ComDayCqReplicationContentStaticContentBuilderProperties::portIsSet() const
{
    return m_PortIsSet;
}

void ComDayCqReplicationContentStaticContentBuilderProperties::unsetPort()
{
    m_PortIsSet = false;
}

}
}
}
}

