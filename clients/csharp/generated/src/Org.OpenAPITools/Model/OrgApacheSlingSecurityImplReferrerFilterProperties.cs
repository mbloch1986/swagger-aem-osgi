/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingSecurityImplReferrerFilterProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingSecurityImplReferrerFilterProperties :  IEquatable<OrgApacheSlingSecurityImplReferrerFilterProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingSecurityImplReferrerFilterProperties" /> class.
        /// </summary>
        /// <param name="allowEmpty">allowEmpty.</param>
        /// <param name="allowHosts">allowHosts.</param>
        /// <param name="allowHostsRegexp">allowHostsRegexp.</param>
        /// <param name="filterMethods">filterMethods.</param>
        /// <param name="excludeAgentsRegexp">excludeAgentsRegexp.</param>
        public OrgApacheSlingSecurityImplReferrerFilterProperties(ConfigNodePropertyBoolean allowEmpty = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray allowHosts = default(ConfigNodePropertyArray), ConfigNodePropertyArray allowHostsRegexp = default(ConfigNodePropertyArray), ConfigNodePropertyArray filterMethods = default(ConfigNodePropertyArray), ConfigNodePropertyArray excludeAgentsRegexp = default(ConfigNodePropertyArray))
        {
            this.AllowEmpty = allowEmpty;
            this.AllowHosts = allowHosts;
            this.AllowHostsRegexp = allowHostsRegexp;
            this.FilterMethods = filterMethods;
            this.ExcludeAgentsRegexp = excludeAgentsRegexp;
        }
        
        /// <summary>
        /// Gets or Sets AllowEmpty
        /// </summary>
        [DataMember(Name="allow.empty", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean AllowEmpty { get; set; }

        /// <summary>
        /// Gets or Sets AllowHosts
        /// </summary>
        [DataMember(Name="allow.hosts", EmitDefaultValue=false)]
        public ConfigNodePropertyArray AllowHosts { get; set; }

        /// <summary>
        /// Gets or Sets AllowHostsRegexp
        /// </summary>
        [DataMember(Name="allow.hosts.regexp", EmitDefaultValue=false)]
        public ConfigNodePropertyArray AllowHostsRegexp { get; set; }

        /// <summary>
        /// Gets or Sets FilterMethods
        /// </summary>
        [DataMember(Name="filter.methods", EmitDefaultValue=false)]
        public ConfigNodePropertyArray FilterMethods { get; set; }

        /// <summary>
        /// Gets or Sets ExcludeAgentsRegexp
        /// </summary>
        [DataMember(Name="exclude.agents.regexp", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ExcludeAgentsRegexp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingSecurityImplReferrerFilterProperties {\n");
            sb.Append("  AllowEmpty: ").Append(AllowEmpty).Append("\n");
            sb.Append("  AllowHosts: ").Append(AllowHosts).Append("\n");
            sb.Append("  AllowHostsRegexp: ").Append(AllowHostsRegexp).Append("\n");
            sb.Append("  FilterMethods: ").Append(FilterMethods).Append("\n");
            sb.Append("  ExcludeAgentsRegexp: ").Append(ExcludeAgentsRegexp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingSecurityImplReferrerFilterProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingSecurityImplReferrerFilterProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingSecurityImplReferrerFilterProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingSecurityImplReferrerFilterProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowEmpty == input.AllowEmpty ||
                    (this.AllowEmpty != null &&
                    this.AllowEmpty.Equals(input.AllowEmpty))
                ) && 
                (
                    this.AllowHosts == input.AllowHosts ||
                    (this.AllowHosts != null &&
                    this.AllowHosts.Equals(input.AllowHosts))
                ) && 
                (
                    this.AllowHostsRegexp == input.AllowHostsRegexp ||
                    (this.AllowHostsRegexp != null &&
                    this.AllowHostsRegexp.Equals(input.AllowHostsRegexp))
                ) && 
                (
                    this.FilterMethods == input.FilterMethods ||
                    (this.FilterMethods != null &&
                    this.FilterMethods.Equals(input.FilterMethods))
                ) && 
                (
                    this.ExcludeAgentsRegexp == input.ExcludeAgentsRegexp ||
                    (this.ExcludeAgentsRegexp != null &&
                    this.ExcludeAgentsRegexp.Equals(input.ExcludeAgentsRegexp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowEmpty != null)
                    hashCode = hashCode * 59 + this.AllowEmpty.GetHashCode();
                if (this.AllowHosts != null)
                    hashCode = hashCode * 59 + this.AllowHosts.GetHashCode();
                if (this.AllowHostsRegexp != null)
                    hashCode = hashCode * 59 + this.AllowHostsRegexp.GetHashCode();
                if (this.FilterMethods != null)
                    hashCode = hashCode * 59 + this.FilterMethods.GetHashCode();
                if (this.ExcludeAgentsRegexp != null)
                    hashCode = hashCode * 59 + this.ExcludeAgentsRegexp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
