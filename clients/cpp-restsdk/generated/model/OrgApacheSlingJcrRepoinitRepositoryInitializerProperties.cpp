/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingJcrRepoinitRepositoryInitializerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingJcrRepoinitRepositoryInitializerProperties::OrgApacheSlingJcrRepoinitRepositoryInitializerProperties()
{
    m_ReferencesIsSet = false;
    m_ScriptsIsSet = false;
}

OrgApacheSlingJcrRepoinitRepositoryInitializerProperties::~OrgApacheSlingJcrRepoinitRepositoryInitializerProperties()
{
}

void OrgApacheSlingJcrRepoinitRepositoryInitializerProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingJcrRepoinitRepositoryInitializerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ReferencesIsSet)
    {
        val[utility::conversions::to_string_t("references")] = ModelBase::toJson(m_References);
    }
    if(m_ScriptsIsSet)
    {
        val[utility::conversions::to_string_t("scripts")] = ModelBase::toJson(m_Scripts);
    }

    return val;
}

void OrgApacheSlingJcrRepoinitRepositoryInitializerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("references")))
    {
        if(!val[utility::conversions::to_string_t("references")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("references")]);
            setReferences( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scripts")))
    {
        if(!val[utility::conversions::to_string_t("scripts")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("scripts")]);
            setScripts( newItem );
        }
    }
}

void OrgApacheSlingJcrRepoinitRepositoryInitializerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ReferencesIsSet)
    {
        if (m_References.get())
        {
            m_References->toMultipart(multipart, utility::conversions::to_string_t("references."));
        }
    }
    if(m_ScriptsIsSet)
    {
        if (m_Scripts.get())
        {
            m_Scripts->toMultipart(multipart, utility::conversions::to_string_t("scripts."));
        }
    }
}

void OrgApacheSlingJcrRepoinitRepositoryInitializerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("references")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("references")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("references."));
            setReferences( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scripts")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scripts")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scripts."));
            setScripts( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrRepoinitRepositoryInitializerProperties::getReferences() const
{
    return m_References;
}


void OrgApacheSlingJcrRepoinitRepositoryInitializerProperties::setReferences(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_References = value;
    m_ReferencesIsSet = true;
}
bool OrgApacheSlingJcrRepoinitRepositoryInitializerProperties::referencesIsSet() const
{
    return m_ReferencesIsSet;
}

void OrgApacheSlingJcrRepoinitRepositoryInitializerProperties::unsetReferences()
{
    m_ReferencesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrRepoinitRepositoryInitializerProperties::getScripts() const
{
    return m_Scripts;
}


void OrgApacheSlingJcrRepoinitRepositoryInitializerProperties::setScripts(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Scripts = value;
    m_ScriptsIsSet = true;
}
bool OrgApacheSlingJcrRepoinitRepositoryInitializerProperties::scriptsIsSet() const
{
    return m_ScriptsIsSet;
}

void OrgApacheSlingJcrRepoinitRepositoryInitializerProperties::unsetScripts()
{
    m_ScriptsIsSet = false;
}

}
}
}
}

