/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties.h
 *
 * 
 */

#ifndef ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties_H_
#define ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties
{
public:
    ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties();
    virtual ~ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getGraniteWorkflowinboxSortPropertyName() const;
    void setGraniteWorkflowinboxSortPropertyName(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getGraniteWorkflowinboxSortOrder() const;
    void setGraniteWorkflowinboxSortOrder(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCqWorkflowJobRetry() const;
    void setCqWorkflowJobRetry(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getCqWorkflowSuperuser() const;
    void setCqWorkflowSuperuser(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getGraniteWorkflowInboxQuerySize() const;
    void setGraniteWorkflowInboxQuerySize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGraniteWorkflowAdminUserGroupFilter() const;
    void setGraniteWorkflowAdminUserGroupFilter(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGraniteWorkflowEnforceWorkitemAssigneePermissions() const;
    void setGraniteWorkflowEnforceWorkitemAssigneePermissions(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGraniteWorkflowEnforceWorkflowInitiatorPermissions() const;
    void setGraniteWorkflowEnforceWorkflowInitiatorPermissions(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGraniteWorkflowInjectTenantIdInJobTopics() const;
    void setGraniteWorkflowInjectTenantIdInJobTopics(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getGraniteWorkflowMaxPurgeSaveThreshold() const;
    void setGraniteWorkflowMaxPurgeSaveThreshold(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getGraniteWorkflowMaxPurgeQueryCount() const;
    void setGraniteWorkflowMaxPurgeQueryCount(std::shared_ptr<ConfigNodePropertyInteger> value);

protected:
    std::shared_ptr<ConfigNodePropertyDropDown> m_Granite_workflowinbox_sort_propertyName;
    std::shared_ptr<ConfigNodePropertyString> m_Granite_workflowinbox_sort_order;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cq_workflow_job_retry;
    std::shared_ptr<ConfigNodePropertyArray> m_Cq_workflow_superuser;
    std::shared_ptr<ConfigNodePropertyInteger> m_Granite_workflow_inboxQuerySize;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Granite_workflow_adminUserGroupFilter;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Granite_workflow_enforceWorkitemAssigneePermissions;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Granite_workflow_enforceWorkflowInitiatorPermissions;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Granite_workflow_injectTenantIdInJobTopics;
    std::shared_ptr<ConfigNodePropertyInteger> m_Granite_workflow_maxPurgeSaveThreshold;
    std::shared_ptr<ConfigNodePropertyInteger> m_Granite_workflow_maxPurgeQueryCount;
};

}
}
}
}

#endif /* ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties_H_ */
