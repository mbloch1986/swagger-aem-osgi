/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties : IEquatable<OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties>
    { 
        /// <summary>
        /// Gets or Sets TokenExpiration
        /// </summary>
        [DataMember(Name="tokenExpiration")]
        public ConfigNodePropertyString TokenExpiration { get; set; }

        /// <summary>
        /// Gets or Sets TokenLength
        /// </summary>
        [DataMember(Name="tokenLength")]
        public ConfigNodePropertyString TokenLength { get; set; }

        /// <summary>
        /// Gets or Sets TokenRefresh
        /// </summary>
        [DataMember(Name="tokenRefresh")]
        public ConfigNodePropertyBoolean TokenRefresh { get; set; }

        /// <summary>
        /// Gets or Sets TokenCleanupThreshold
        /// </summary>
        [DataMember(Name="tokenCleanupThreshold")]
        public ConfigNodePropertyInteger TokenCleanupThreshold { get; set; }

        /// <summary>
        /// Gets or Sets PasswordHashAlgorithm
        /// </summary>
        [DataMember(Name="passwordHashAlgorithm")]
        public ConfigNodePropertyString PasswordHashAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets PasswordHashIterations
        /// </summary>
        [DataMember(Name="passwordHashIterations")]
        public ConfigNodePropertyInteger PasswordHashIterations { get; set; }

        /// <summary>
        /// Gets or Sets PasswordSaltSize
        /// </summary>
        [DataMember(Name="passwordSaltSize")]
        public ConfigNodePropertyInteger PasswordSaltSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties {\n");
            sb.Append("  TokenExpiration: ").Append(TokenExpiration).Append("\n");
            sb.Append("  TokenLength: ").Append(TokenLength).Append("\n");
            sb.Append("  TokenRefresh: ").Append(TokenRefresh).Append("\n");
            sb.Append("  TokenCleanupThreshold: ").Append(TokenCleanupThreshold).Append("\n");
            sb.Append("  PasswordHashAlgorithm: ").Append(PasswordHashAlgorithm).Append("\n");
            sb.Append("  PasswordHashIterations: ").Append(PasswordHashIterations).Append("\n");
            sb.Append("  PasswordSaltSize: ").Append(PasswordSaltSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TokenExpiration == other.TokenExpiration ||
                    TokenExpiration != null &&
                    TokenExpiration.Equals(other.TokenExpiration)
                ) && 
                (
                    TokenLength == other.TokenLength ||
                    TokenLength != null &&
                    TokenLength.Equals(other.TokenLength)
                ) && 
                (
                    TokenRefresh == other.TokenRefresh ||
                    TokenRefresh != null &&
                    TokenRefresh.Equals(other.TokenRefresh)
                ) && 
                (
                    TokenCleanupThreshold == other.TokenCleanupThreshold ||
                    TokenCleanupThreshold != null &&
                    TokenCleanupThreshold.Equals(other.TokenCleanupThreshold)
                ) && 
                (
                    PasswordHashAlgorithm == other.PasswordHashAlgorithm ||
                    PasswordHashAlgorithm != null &&
                    PasswordHashAlgorithm.Equals(other.PasswordHashAlgorithm)
                ) && 
                (
                    PasswordHashIterations == other.PasswordHashIterations ||
                    PasswordHashIterations != null &&
                    PasswordHashIterations.Equals(other.PasswordHashIterations)
                ) && 
                (
                    PasswordSaltSize == other.PasswordSaltSize ||
                    PasswordSaltSize != null &&
                    PasswordSaltSize.Equals(other.PasswordSaltSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TokenExpiration != null)
                    hashCode = hashCode * 59 + TokenExpiration.GetHashCode();
                    if (TokenLength != null)
                    hashCode = hashCode * 59 + TokenLength.GetHashCode();
                    if (TokenRefresh != null)
                    hashCode = hashCode * 59 + TokenRefresh.GetHashCode();
                    if (TokenCleanupThreshold != null)
                    hashCode = hashCode * 59 + TokenCleanupThreshold.GetHashCode();
                    if (PasswordHashAlgorithm != null)
                    hashCode = hashCode * 59 + PasswordHashAlgorithm.GetHashCode();
                    if (PasswordHashIterations != null)
                    hashCode = hashCode * 59 + PasswordHashIterations.GetHashCode();
                    if (PasswordSaltSize != null)
                    hashCode = hashCode * 59 + PasswordSaltSize.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties left, OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties left, OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
