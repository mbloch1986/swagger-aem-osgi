/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties()
{
    m_Whitelist_nameIsSet = false;
    m_Whitelist_bundlesIsSet = false;
}

OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::~OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties()
{
}

void OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Whitelist_nameIsSet)
    {
        val[utility::conversions::to_string_t("whitelist.name")] = ModelBase::toJson(m_Whitelist_name);
    }
    if(m_Whitelist_bundlesIsSet)
    {
        val[utility::conversions::to_string_t("whitelist.bundles")] = ModelBase::toJson(m_Whitelist_bundles);
    }

    return val;
}

void OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("whitelist.name")))
    {
        if(!val[utility::conversions::to_string_t("whitelist.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("whitelist.name")]);
            setWhitelistName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("whitelist.bundles")))
    {
        if(!val[utility::conversions::to_string_t("whitelist.bundles")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("whitelist.bundles")]);
            setWhitelistBundles( newItem );
        }
    }
}

void OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Whitelist_nameIsSet)
    {
        if (m_Whitelist_name.get())
        {
            m_Whitelist_name->toMultipart(multipart, utility::conversions::to_string_t("whitelist.name."));
        }
    }
    if(m_Whitelist_bundlesIsSet)
    {
        if (m_Whitelist_bundles.get())
        {
            m_Whitelist_bundles->toMultipart(multipart, utility::conversions::to_string_t("whitelist.bundles."));
        }
    }
}

void OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("whitelist.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("whitelist.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("whitelist.name."));
            setWhitelistName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("whitelist.bundles")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("whitelist.bundles")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("whitelist.bundles."));
            setWhitelistBundles( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::getWhitelistName() const
{
    return m_Whitelist_name;
}


void OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::setWhitelistName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Whitelist_name = value;
    m_Whitelist_nameIsSet = true;
}
bool OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::whitelistNameIsSet() const
{
    return m_Whitelist_nameIsSet;
}

void OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::unsetWhitelist_name()
{
    m_Whitelist_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::getWhitelistBundles() const
{
    return m_Whitelist_bundles;
}


void OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::setWhitelistBundles(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Whitelist_bundles = value;
    m_Whitelist_bundlesIsSet = true;
}
bool OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::whitelistBundlesIsSet() const
{
    return m_Whitelist_bundlesIsSet;
}

void OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::unsetWhitelist_bundles()
{
    m_Whitelist_bundlesIsSet = false;
}

}
}
}
}

