/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeFormsCommonServletTempCleanUpTaskProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeFormsCommonServletTempCleanUpTaskProperties::ComAdobeFormsCommonServletTempCleanUpTaskProperties()
{
    m_Scheduler_expressionIsSet = false;
    m_Duration_for_Temporary_StorageIsSet = false;
    m_Duration_for_Anonymous_StorageIsSet = false;
    
}

ComAdobeFormsCommonServletTempCleanUpTaskProperties::~ComAdobeFormsCommonServletTempCleanUpTaskProperties()
{
}

void ComAdobeFormsCommonServletTempCleanUpTaskProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeFormsCommonServletTempCleanUpTaskProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Scheduler_expressionIsSet)
    {
        val["scheduler.expression"] = ModelBase::toJson(m_Scheduler_expression);
    }
    if(m_Duration_for_Temporary_StorageIsSet)
    {
        val["Duration for Temporary Storage"] = ModelBase::toJson(m_Duration_for_Temporary_Storage);
    }
    if(m_Duration_for_Anonymous_StorageIsSet)
    {
        val["Duration for Anonymous Storage"] = ModelBase::toJson(m_Duration_for_Anonymous_Storage);
    }
    

    return val;
}

void ComAdobeFormsCommonServletTempCleanUpTaskProperties::fromJson(nlohmann::json& val)
{
    if(val.find("scheduler.expression") != val.end())
    {
        if(!val["scheduler.expression"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["scheduler.expression"]);
            setSchedulerExpression( newItem );
        }
        
    }
    if(val.find("Duration for Temporary Storage") != val.end())
    {
        if(!val["Duration for Temporary Storage"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["Duration for Temporary Storage"]);
            setDurationForTemporaryStorage( newItem );
        }
        
    }
    if(val.find("Duration for Anonymous Storage") != val.end())
    {
        if(!val["Duration for Anonymous Storage"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["Duration for Anonymous Storage"]);
            setDurationForAnonymousStorage( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeFormsCommonServletTempCleanUpTaskProperties::getSchedulerExpression() const
{
    return m_Scheduler_expression;
}
void ComAdobeFormsCommonServletTempCleanUpTaskProperties::setSchedulerExpression(ConfigNodePropertyString const& value)
{
    m_Scheduler_expression = value;
    m_Scheduler_expressionIsSet = true;
}
bool ComAdobeFormsCommonServletTempCleanUpTaskProperties::schedulerExpressionIsSet() const
{
    return m_Scheduler_expressionIsSet;
}
void ComAdobeFormsCommonServletTempCleanUpTaskProperties::unsetScheduler_expression()
{
    m_Scheduler_expressionIsSet = false;
}
ConfigNodePropertyString ComAdobeFormsCommonServletTempCleanUpTaskProperties::getDurationForTemporaryStorage() const
{
    return m_Duration_for_Temporary_Storage;
}
void ComAdobeFormsCommonServletTempCleanUpTaskProperties::setDurationForTemporaryStorage(ConfigNodePropertyString const& value)
{
    m_Duration_for_Temporary_Storage = value;
    m_Duration_for_Temporary_StorageIsSet = true;
}
bool ComAdobeFormsCommonServletTempCleanUpTaskProperties::durationForTemporaryStorageIsSet() const
{
    return m_Duration_for_Temporary_StorageIsSet;
}
void ComAdobeFormsCommonServletTempCleanUpTaskProperties::unsetDuration_for_Temporary_Storage()
{
    m_Duration_for_Temporary_StorageIsSet = false;
}
ConfigNodePropertyString ComAdobeFormsCommonServletTempCleanUpTaskProperties::getDurationForAnonymousStorage() const
{
    return m_Duration_for_Anonymous_Storage;
}
void ComAdobeFormsCommonServletTempCleanUpTaskProperties::setDurationForAnonymousStorage(ConfigNodePropertyString const& value)
{
    m_Duration_for_Anonymous_Storage = value;
    m_Duration_for_Anonymous_StorageIsSet = true;
}
bool ComAdobeFormsCommonServletTempCleanUpTaskProperties::durationForAnonymousStorageIsSet() const
{
    return m_Duration_for_Anonymous_StorageIsSet;
}
void ComAdobeFormsCommonServletTempCleanUpTaskProperties::unsetDuration_for_Anonymous_Storage()
{
    m_Duration_for_Anonymous_StorageIsSet = false;
}

}
}
}
}

