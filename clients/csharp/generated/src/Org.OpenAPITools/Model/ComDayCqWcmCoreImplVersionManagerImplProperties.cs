/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqWcmCoreImplVersionManagerImplProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqWcmCoreImplVersionManagerImplProperties :  IEquatable<ComDayCqWcmCoreImplVersionManagerImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqWcmCoreImplVersionManagerImplProperties" /> class.
        /// </summary>
        /// <param name="versionmanagerCreateVersionOnActivation">versionmanagerCreateVersionOnActivation.</param>
        /// <param name="versionmanagerPurgingEnabled">versionmanagerPurgingEnabled.</param>
        /// <param name="versionmanagerPurgePaths">versionmanagerPurgePaths.</param>
        /// <param name="versionmanagerIvPaths">versionmanagerIvPaths.</param>
        /// <param name="versionmanagerMaxAgeDays">versionmanagerMaxAgeDays.</param>
        /// <param name="versionmanagerMaxNumberVersions">versionmanagerMaxNumberVersions.</param>
        /// <param name="versionmanagerMinNumberVersions">versionmanagerMinNumberVersions.</param>
        public ComDayCqWcmCoreImplVersionManagerImplProperties(ConfigNodePropertyBoolean versionmanagerCreateVersionOnActivation = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean versionmanagerPurgingEnabled = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray versionmanagerPurgePaths = default(ConfigNodePropertyArray), ConfigNodePropertyArray versionmanagerIvPaths = default(ConfigNodePropertyArray), ConfigNodePropertyInteger versionmanagerMaxAgeDays = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger versionmanagerMaxNumberVersions = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger versionmanagerMinNumberVersions = default(ConfigNodePropertyInteger))
        {
            this.VersionmanagerCreateVersionOnActivation = versionmanagerCreateVersionOnActivation;
            this.VersionmanagerPurgingEnabled = versionmanagerPurgingEnabled;
            this.VersionmanagerPurgePaths = versionmanagerPurgePaths;
            this.VersionmanagerIvPaths = versionmanagerIvPaths;
            this.VersionmanagerMaxAgeDays = versionmanagerMaxAgeDays;
            this.VersionmanagerMaxNumberVersions = versionmanagerMaxNumberVersions;
            this.VersionmanagerMinNumberVersions = versionmanagerMinNumberVersions;
        }
        
        /// <summary>
        /// Gets or Sets VersionmanagerCreateVersionOnActivation
        /// </summary>
        [DataMember(Name="versionmanager.createVersionOnActivation", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean VersionmanagerCreateVersionOnActivation { get; set; }

        /// <summary>
        /// Gets or Sets VersionmanagerPurgingEnabled
        /// </summary>
        [DataMember(Name="versionmanager.purgingEnabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean VersionmanagerPurgingEnabled { get; set; }

        /// <summary>
        /// Gets or Sets VersionmanagerPurgePaths
        /// </summary>
        [DataMember(Name="versionmanager.purgePaths", EmitDefaultValue=false)]
        public ConfigNodePropertyArray VersionmanagerPurgePaths { get; set; }

        /// <summary>
        /// Gets or Sets VersionmanagerIvPaths
        /// </summary>
        [DataMember(Name="versionmanager.ivPaths", EmitDefaultValue=false)]
        public ConfigNodePropertyArray VersionmanagerIvPaths { get; set; }

        /// <summary>
        /// Gets or Sets VersionmanagerMaxAgeDays
        /// </summary>
        [DataMember(Name="versionmanager.maxAgeDays", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger VersionmanagerMaxAgeDays { get; set; }

        /// <summary>
        /// Gets or Sets VersionmanagerMaxNumberVersions
        /// </summary>
        [DataMember(Name="versionmanager.maxNumberVersions", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger VersionmanagerMaxNumberVersions { get; set; }

        /// <summary>
        /// Gets or Sets VersionmanagerMinNumberVersions
        /// </summary>
        [DataMember(Name="versionmanager.minNumberVersions", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger VersionmanagerMinNumberVersions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqWcmCoreImplVersionManagerImplProperties {\n");
            sb.Append("  VersionmanagerCreateVersionOnActivation: ").Append(VersionmanagerCreateVersionOnActivation).Append("\n");
            sb.Append("  VersionmanagerPurgingEnabled: ").Append(VersionmanagerPurgingEnabled).Append("\n");
            sb.Append("  VersionmanagerPurgePaths: ").Append(VersionmanagerPurgePaths).Append("\n");
            sb.Append("  VersionmanagerIvPaths: ").Append(VersionmanagerIvPaths).Append("\n");
            sb.Append("  VersionmanagerMaxAgeDays: ").Append(VersionmanagerMaxAgeDays).Append("\n");
            sb.Append("  VersionmanagerMaxNumberVersions: ").Append(VersionmanagerMaxNumberVersions).Append("\n");
            sb.Append("  VersionmanagerMinNumberVersions: ").Append(VersionmanagerMinNumberVersions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqWcmCoreImplVersionManagerImplProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqWcmCoreImplVersionManagerImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqWcmCoreImplVersionManagerImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqWcmCoreImplVersionManagerImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VersionmanagerCreateVersionOnActivation == input.VersionmanagerCreateVersionOnActivation ||
                    (this.VersionmanagerCreateVersionOnActivation != null &&
                    this.VersionmanagerCreateVersionOnActivation.Equals(input.VersionmanagerCreateVersionOnActivation))
                ) && 
                (
                    this.VersionmanagerPurgingEnabled == input.VersionmanagerPurgingEnabled ||
                    (this.VersionmanagerPurgingEnabled != null &&
                    this.VersionmanagerPurgingEnabled.Equals(input.VersionmanagerPurgingEnabled))
                ) && 
                (
                    this.VersionmanagerPurgePaths == input.VersionmanagerPurgePaths ||
                    (this.VersionmanagerPurgePaths != null &&
                    this.VersionmanagerPurgePaths.Equals(input.VersionmanagerPurgePaths))
                ) && 
                (
                    this.VersionmanagerIvPaths == input.VersionmanagerIvPaths ||
                    (this.VersionmanagerIvPaths != null &&
                    this.VersionmanagerIvPaths.Equals(input.VersionmanagerIvPaths))
                ) && 
                (
                    this.VersionmanagerMaxAgeDays == input.VersionmanagerMaxAgeDays ||
                    (this.VersionmanagerMaxAgeDays != null &&
                    this.VersionmanagerMaxAgeDays.Equals(input.VersionmanagerMaxAgeDays))
                ) && 
                (
                    this.VersionmanagerMaxNumberVersions == input.VersionmanagerMaxNumberVersions ||
                    (this.VersionmanagerMaxNumberVersions != null &&
                    this.VersionmanagerMaxNumberVersions.Equals(input.VersionmanagerMaxNumberVersions))
                ) && 
                (
                    this.VersionmanagerMinNumberVersions == input.VersionmanagerMinNumberVersions ||
                    (this.VersionmanagerMinNumberVersions != null &&
                    this.VersionmanagerMinNumberVersions.Equals(input.VersionmanagerMinNumberVersions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VersionmanagerCreateVersionOnActivation != null)
                    hashCode = hashCode * 59 + this.VersionmanagerCreateVersionOnActivation.GetHashCode();
                if (this.VersionmanagerPurgingEnabled != null)
                    hashCode = hashCode * 59 + this.VersionmanagerPurgingEnabled.GetHashCode();
                if (this.VersionmanagerPurgePaths != null)
                    hashCode = hashCode * 59 + this.VersionmanagerPurgePaths.GetHashCode();
                if (this.VersionmanagerIvPaths != null)
                    hashCode = hashCode * 59 + this.VersionmanagerIvPaths.GetHashCode();
                if (this.VersionmanagerMaxAgeDays != null)
                    hashCode = hashCode * 59 + this.VersionmanagerMaxAgeDays.GetHashCode();
                if (this.VersionmanagerMaxNumberVersions != null)
                    hashCode = hashCode * 59 + this.VersionmanagerMaxNumberVersions.GetHashCode();
                if (this.VersionmanagerMinNumberVersions != null)
                    hashCode = hashCode * 59 + this.VersionmanagerMinNumberVersions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
