/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties()
{
    m_DefaultConnectorNameIsSet = false;
    m_DefaultCategoryIsSet = false;
    
}

ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::~ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties()
{
}

void ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_DefaultConnectorNameIsSet)
    {
        val["defaultConnectorName"] = ModelBase::toJson(m_DefaultConnectorName);
    }
    if(m_DefaultCategoryIsSet)
    {
        val["defaultCategory"] = ModelBase::toJson(m_DefaultCategory);
    }
    

    return val;
}

void ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("defaultConnectorName") != val.end())
    {
        if(!val["defaultConnectorName"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["defaultConnectorName"]);
            setDefaultConnectorName( newItem );
        }
        
    }
    if(val.find("defaultCategory") != val.end())
    {
        if(!val["defaultCategory"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["defaultCategory"]);
            setDefaultCategory( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::getDefaultConnectorName() const
{
    return m_DefaultConnectorName;
}
void ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::setDefaultConnectorName(ConfigNodePropertyString const& value)
{
    m_DefaultConnectorName = value;
    m_DefaultConnectorNameIsSet = true;
}
bool ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::defaultConnectorNameIsSet() const
{
    return m_DefaultConnectorNameIsSet;
}
void ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::unsetDefaultConnectorName()
{
    m_DefaultConnectorNameIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::getDefaultCategory() const
{
    return m_DefaultCategory;
}
void ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::setDefaultCategory(ConfigNodePropertyString const& value)
{
    m_DefaultCategory = value;
    m_DefaultCategoryIsSet = true;
}
bool ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::defaultCategoryIsSet() const
{
    return m_DefaultCategoryIsSet;
}
void ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::unsetDefaultCategory()
{
    m_DefaultCategoryIsSet = false;
}

}
}
}
}

