/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqSearchImplBuilderQueryBuilderImplProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqSearchImplBuilderQueryBuilderImplProperties :  IEquatable<ComDayCqSearchImplBuilderQueryBuilderImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqSearchImplBuilderQueryBuilderImplProperties" /> class.
        /// </summary>
        /// <param name="excerptProperties">excerptProperties.</param>
        /// <param name="cacheMaxEntries">cacheMaxEntries.</param>
        /// <param name="cacheEntryLifetime">cacheEntryLifetime.</param>
        /// <param name="xpathUnion">xpathUnion.</param>
        public ComDayCqSearchImplBuilderQueryBuilderImplProperties(ConfigNodePropertyArray excerptProperties = default(ConfigNodePropertyArray), ConfigNodePropertyInteger cacheMaxEntries = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger cacheEntryLifetime = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean xpathUnion = default(ConfigNodePropertyBoolean))
        {
            this.ExcerptProperties = excerptProperties;
            this.CacheMaxEntries = cacheMaxEntries;
            this.CacheEntryLifetime = cacheEntryLifetime;
            this.XpathUnion = xpathUnion;
        }
        
        /// <summary>
        /// Gets or Sets ExcerptProperties
        /// </summary>
        [DataMember(Name="excerpt.properties", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ExcerptProperties { get; set; }

        /// <summary>
        /// Gets or Sets CacheMaxEntries
        /// </summary>
        [DataMember(Name="cache.max.entries", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CacheMaxEntries { get; set; }

        /// <summary>
        /// Gets or Sets CacheEntryLifetime
        /// </summary>
        [DataMember(Name="cache.entry.lifetime", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CacheEntryLifetime { get; set; }

        /// <summary>
        /// Gets or Sets XpathUnion
        /// </summary>
        [DataMember(Name="xpath.union", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean XpathUnion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqSearchImplBuilderQueryBuilderImplProperties {\n");
            sb.Append("  ExcerptProperties: ").Append(ExcerptProperties).Append("\n");
            sb.Append("  CacheMaxEntries: ").Append(CacheMaxEntries).Append("\n");
            sb.Append("  CacheEntryLifetime: ").Append(CacheEntryLifetime).Append("\n");
            sb.Append("  XpathUnion: ").Append(XpathUnion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqSearchImplBuilderQueryBuilderImplProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqSearchImplBuilderQueryBuilderImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqSearchImplBuilderQueryBuilderImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqSearchImplBuilderQueryBuilderImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExcerptProperties == input.ExcerptProperties ||
                    (this.ExcerptProperties != null &&
                    this.ExcerptProperties.Equals(input.ExcerptProperties))
                ) && 
                (
                    this.CacheMaxEntries == input.CacheMaxEntries ||
                    (this.CacheMaxEntries != null &&
                    this.CacheMaxEntries.Equals(input.CacheMaxEntries))
                ) && 
                (
                    this.CacheEntryLifetime == input.CacheEntryLifetime ||
                    (this.CacheEntryLifetime != null &&
                    this.CacheEntryLifetime.Equals(input.CacheEntryLifetime))
                ) && 
                (
                    this.XpathUnion == input.XpathUnion ||
                    (this.XpathUnion != null &&
                    this.XpathUnion.Equals(input.XpathUnion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExcerptProperties != null)
                    hashCode = hashCode * 59 + this.ExcerptProperties.GetHashCode();
                if (this.CacheMaxEntries != null)
                    hashCode = hashCode * 59 + this.CacheMaxEntries.GetHashCode();
                if (this.CacheEntryLifetime != null)
                    hashCode = hashCode * 59 + this.CacheEntryLifetime.GetHashCode();
                if (this.XpathUnion != null)
                    hashCode = hashCode * 59 + this.XpathUnion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
