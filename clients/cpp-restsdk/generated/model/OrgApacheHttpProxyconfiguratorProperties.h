/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheHttpProxyconfiguratorProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheHttpProxyconfiguratorProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheHttpProxyconfiguratorProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheHttpProxyconfiguratorProperties
    : public ModelBase
{
public:
    OrgApacheHttpProxyconfiguratorProperties();
    virtual ~OrgApacheHttpProxyconfiguratorProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheHttpProxyconfiguratorProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getProxyEnabled() const;
    bool proxyEnabledIsSet() const;
    void unsetProxy_enabled();
    void setProxyEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getProxyHost() const;
    bool proxyHostIsSet() const;
    void unsetProxy_host();
    void setProxyHost(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getProxyPort() const;
    bool proxyPortIsSet() const;
    void unsetProxy_port();
    void setProxyPort(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getProxyUser() const;
    bool proxyUserIsSet() const;
    void unsetProxy_user();
    void setProxyUser(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getProxyPassword() const;
    bool proxyPasswordIsSet() const;
    void unsetProxy_password();
    void setProxyPassword(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getProxyExceptions() const;
    bool proxyExceptionsIsSet() const;
    void unsetProxy_exceptions();
    void setProxyExceptions(std::shared_ptr<ConfigNodePropertyArray> value);

protected:
    std::shared_ptr<ConfigNodePropertyBoolean> m_Proxy_enabled;
    bool m_Proxy_enabledIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Proxy_host;
    bool m_Proxy_hostIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Proxy_port;
    bool m_Proxy_portIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Proxy_user;
    bool m_Proxy_userIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Proxy_password;
    bool m_Proxy_passwordIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Proxy_exceptions;
    bool m_Proxy_exceptionsIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheHttpProxyconfiguratorProperties_H_ */
