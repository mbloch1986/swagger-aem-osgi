/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConfigmgrApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_ConfigmgrApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_ConfigmgrApi_H_


#include "../ApiClient.h"

#include "AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo.h"
#include "AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo.h"
#include "AnalyticsComponentQueryCacheServiceInfo.h"
#include "ApacheSlingHealthCheckResultHTMLSerializerInfo.h"
#include "ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo.h"
#include "ComAdobeAemTransactionCoreImplTransactionRecorderInfo.h"
#include "ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo.h"
#include "ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo.h"
#include "ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo.h"
#include "ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo.h"
#include "ComAdobeCqAccountApiAccountManagementServiceInfo.h"
#include "ComAdobeCqAccountImplAccountManagementServletInfo.h"
#include "ComAdobeCqAddressImplLocationLocationListServletInfo.h"
#include "ComAdobeCqAuditPurgeDamInfo.h"
#include "ComAdobeCqAuditPurgePagesInfo.h"
#include "ComAdobeCqAuditPurgeReplicationInfo.h"
#include "ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo.h"
#include "ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo.h"
#include "ComAdobeCqCdnRewriterImplCDNRewriterInfo.h"
#include "ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo.h"
#include "ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo.h"
#include "ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo.h"
#include "ComAdobeCqCommerceImplAssetStaticImageHandlerInfo.h"
#include "ComAdobeCqCommerceImplAssetVideoHandlerInfo.h"
#include "ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo.h"
#include "ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo.h"
#include "ComAdobeCqCommercePimImplPageEventListenerInfo.h"
#include "ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo.h"
#include "ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo.h"
#include "ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo.h"
#include "ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo.h"
#include "ComAdobeCqDamCfmImplComponentComponentConfigImplInfo.h"
#include "ComAdobeCqDamCfmImplConfFeatureConfigImplInfo.h"
#include "ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo.h"
#include "ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo.h"
#include "ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo.h"
#include "ComAdobeCqDamDmProcessImagePTiffManagerImplInfo.h"
#include "ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo.h"
#include "ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo.h"
#include "ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo.h"
#include "ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo.h"
#include "ComAdobeCqDamS7imagingImplIsImageServerComponentInfo.h"
#include "ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo.h"
#include "ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo.h"
#include "ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo.h"
#include "ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo.h"
#include "ComAdobeCqDeserfwImplDeserializationFirewallImplInfo.h"
#include "ComAdobeCqDtmImplServiceDTMWebServiceImplInfo.h"
#include "ComAdobeCqDtmImplServletsDTMDeployHookServletInfo.h"
#include "ComAdobeCqDtmReactorImplServiceWebServiceImplInfo.h"
#include "ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo.h"
#include "ComAdobeCqHcContentPackagesHealthCheckInfo.h"
#include "ComAdobeCqHistoryImplHistoryRequestFilterInfo.h"
#include "ComAdobeCqHistoryImplHistoryServiceImplInfo.h"
#include "ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo.h"
#include "ComAdobeCqProjectsImplServletProjectImageServletInfo.h"
#include "ComAdobeCqProjectsPurgeSchedulerInfo.h"
#include "ComAdobeCqScheduledExporterImplScheduledExporterImplInfo.h"
#include "ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo.h"
#include "ComAdobeCqScreensDeviceImplDeviceServiceInfo.h"
#include "ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo.h"
#include "ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo.h"
#include "ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo.h"
#include "ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo.h"
#include "ComAdobeCqScreensImplScreensChannelPostProcessorInfo.h"
#include "ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo.h"
#include "ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo.h"
#include "ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo.h"
#include "ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo.h"
#include "ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo.h"
#include "ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo.h"
#include "ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo.h"
#include "ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo.h"
#include "ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo.h"
#include "ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo.h"
#include "ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo.h"
#include "ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo.h"
#include "ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo.h"
#include "ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo.h"
#include "ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo.h"
#include "ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo.h"
#include "ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo.h"
#include "ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo.h"
#include "ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo.h"
#include "ComAdobeCqSocialCalendarServletsTimeZoneServletInfo.h"
#include "ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo.h"
#include "ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo.h"
#include "ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo.h"
#include "ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo.h"
#include "ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo.h"
#include "ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo.h"
#include "ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo.h"
#include "ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo.h"
#include "ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo.h"
#include "ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo.h"
#include "ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo.h"
#include "ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo.h"
#include "ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo.h"
#include "ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo.h"
#include "ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo.h"
#include "ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo.h"
#include "ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo.h"
#include "ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo.h"
#include "ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo.h"
#include "ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo.h"
#include "ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo.h"
#include "ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo.h"
#include "ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo.h"
#include "ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo.h"
#include "ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo.h"
#include "ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo.h"
#include "ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo.h"
#include "ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo.h"
#include "ComAdobeCqSocialGroupImplGroupServiceImplInfo.h"
#include "ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo.h"
#include "ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo.h"
#include "ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo.h"
#include "ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo.h"
#include "ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo.h"
#include "ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo.h"
#include "ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo.h"
#include "ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo.h"
#include "ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo.h"
#include "ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo.h"
#include "ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo.h"
#include "ComAdobeCqSocialNotificationsImplMentionsRouterInfo.h"
#include "ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo.h"
#include "ComAdobeCqSocialNotificationsImplNotificationsRouterInfo.h"
#include "ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo.h"
#include "ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo.h"
#include "ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo.h"
#include "ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo.h"
#include "ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo.h"
#include "ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo.h"
#include "ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo.h"
#include "ComAdobeCqSocialScoringImplScoringEventListenerInfo.h"
#include "ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo.h"
#include "ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo.h"
#include "ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo.h"
#include "ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo.h"
#include "ComAdobeCqSocialSrpImplSocialSolrConnectorInfo.h"
#include "ComAdobeCqSocialSyncImplDiffChangesObserverInfo.h"
#include "ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo.h"
#include "ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo.h"
#include "ComAdobeCqSocialSyncImplUserSyncListenerImplInfo.h"
#include "ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo.h"
#include "ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo.h"
#include "ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo.h"
#include "ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo.h"
#include "ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo.h"
#include "ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo.h"
#include "ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo.h"
#include "ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo.h"
#include "ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo.h"
#include "ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo.h"
#include "ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo.h"
#include "ComAdobeCqSocialUserImplTransportHttpToPublisherInfo.h"
#include "ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo.h"
#include "ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo.h"
#include "ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo.h"
#include "ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo.h"
#include "ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo.h"
#include "ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo.h"
#include "ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo.h"
#include "ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo.h"
#include "ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo.h"
#include "ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo.h"
#include "ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo.h"
#include "ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo.h"
#include "ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo.h"
#include "ComAdobeFormsCommonServiceImplDefaultDataProviderInfo.h"
#include "ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo.h"
#include "ComAdobeFormsCommonServletTempCleanUpTaskInfo.h"
#include "ComAdobeGraniteAcpPlatformPlatformServletInfo.h"
#include "ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo.h"
#include "ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo.h"
#include "ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo.h"
#include "ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo.h"
#include "ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo.h"
#include "ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo.h"
#include "ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo.h"
#include "ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo.h"
#include "ComAdobeGraniteAuthImsImplIMSProviderImplInfo.h"
#include "ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo.h"
#include "ComAdobeGraniteAuthImsInfo.h"
#include "ComAdobeGraniteAuthOauthAccesstokenProviderInfo.h"
#include "ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo.h"
#include "ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo.h"
#include "ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo.h"
#include "ComAdobeGraniteAuthOauthImplGithubProviderImplInfo.h"
#include "ComAdobeGraniteAuthOauthImplGraniteProviderInfo.h"
#include "ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo.h"
#include "ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo.h"
#include "ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo.h"
#include "ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo.h"
#include "ComAdobeGraniteAuthOauthProviderInfo.h"
#include "ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo.h"
#include "ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo.h"
#include "ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo.h"
#include "ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo.h"
#include "ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo.h"
#include "ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo.h"
#include "ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo.h"
#include "ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo.h"
#include "ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo.h"
#include "ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo.h"
#include "ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo.h"
#include "ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo.h"
#include "ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo.h"
#include "ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo.h"
#include "ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo.h"
#include "ComAdobeGraniteCompatrouterImplRoutingConfigInfo.h"
#include "ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo.h"
#include "ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo.h"
#include "ComAdobeGraniteContexthubImplContextHubImplInfo.h"
#include "ComAdobeGraniteCorsImplCORSPolicyImplInfo.h"
#include "ComAdobeGraniteCsrfImplCSRFFilterInfo.h"
#include "ComAdobeGraniteCsrfImplCSRFServletInfo.h"
#include "ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo.h"
#include "ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo.h"
#include "ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo.h"
#include "ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo.h"
#include "ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo.h"
#include "ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo.h"
#include "ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo.h"
#include "ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo.h"
#include "ComAdobeGraniteFragsImplRandomFeatureInfo.h"
#include "ComAdobeGraniteHttpcacheFileFileCacheStoreInfo.h"
#include "ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo.h"
#include "ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo.h"
#include "ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo.h"
#include "ComAdobeGraniteInfocollectorInfoCollectorInfo.h"
#include "ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo.h"
#include "ComAdobeGraniteLicenseImplLicenseCheckFilterInfo.h"
#include "ComAdobeGraniteLoggingImplLogAnalyserImplInfo.h"
#include "ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo.h"
#include "ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo.h"
#include "ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo.h"
#include "ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo.h"
#include "ComAdobeGraniteMonitoringImplScriptConfigImplInfo.h"
#include "ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo.h"
#include "ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo.h"
#include "ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo.h"
#include "ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo.h"
#include "ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo.h"
#include "ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo.h"
#include "ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo.h"
#include "ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo.h"
#include "ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo.h"
#include "ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo.h"
#include "ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo.h"
#include "ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo.h"
#include "ComAdobeGraniteOptoutImplOptOutServiceImplInfo.h"
#include "ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo.h"
#include "ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo.h"
#include "ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo.h"
#include "ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo.h"
#include "ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo.h"
#include "ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo.h"
#include "ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo.h"
#include "ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo.h"
#include "ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo.h"
#include "ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo.h"
#include "ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo.h"
#include "ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo.h"
#include "ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo.h"
#include "ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo.h"
#include "ComAdobeGraniteRepositoryImplCommitStatsConfigInfo.h"
#include "ComAdobeGraniteRepositoryServiceUserConfigurationInfo.h"
#include "ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo.h"
#include "ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo.h"
#include "ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo.h"
#include "ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo.h"
#include "ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo.h"
#include "ComAdobeGraniteRestImplServletDefaultGETServletInfo.h"
#include "ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo.h"
#include "ComAdobeGraniteSecurityUserUserPropertiesServiceInfo.h"
#include "ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo.h"
#include "ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo.h"
#include "ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo.h"
#include "ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo.h"
#include "ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo.h"
#include "ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo.h"
#include "ComAdobeGraniteThreaddumpThreadDumpCollectorInfo.h"
#include "ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo.h"
#include "ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo.h"
#include "ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo.h"
#include "ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo.h"
#include "ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo.h"
#include "ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo.h"
#include "ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo.h"
#include "ComAdobeGraniteWorkflowCoreJobJobHandlerInfo.h"
#include "ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo.h"
#include "ComAdobeGraniteWorkflowCorePayloadMapCacheInfo.h"
#include "ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo.h"
#include "ComAdobeGraniteWorkflowCoreWorkflowConfigInfo.h"
#include "ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo.h"
#include "ComAdobeGraniteWorkflowPurgeSchedulerInfo.h"
#include "ComAdobeOctopusNcommBootstrapInfo.h"
#include "ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo.h"
#include "ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo.h"
#include "ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo.h"
#include "ComDayCommonsHttpclientInfo.h"
#include "ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo.h"
#include "ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo.h"
#include "ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo.h"
#include "ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo.h"
#include "ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo.h"
#include "ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo.h"
#include "ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo.h"
#include "ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo.h"
#include "ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo.h"
#include "ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo.h"
#include "ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo.h"
#include "ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo.h"
#include "ComDayCqAuthImplCugCugSupportImplInfo.h"
#include "ComDayCqAuthImplLoginSelectorHandlerInfo.h"
#include "ComDayCqCommonsImplExternalizerImplInfo.h"
#include "ComDayCqCommonsServletsRootMappingServletInfo.h"
#include "ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo.h"
#include "ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo.h"
#include "ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo.h"
#include "ComDayCqContentsyncImplContentSyncManagerImplInfo.h"
#include "ComDayCqDamCommonsHandlerStandardImageHandlerInfo.h"
#include "ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo.h"
#include "ComDayCqDamCommonsUtilImplAssetCacheImplInfo.h"
#include "ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo.h"
#include "ComDayCqDamCoreImplAssetMoveListenerInfo.h"
#include "ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo.h"
#include "ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo.h"
#include "ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo.h"
#include "ComDayCqDamCoreImplDamChangeEventListenerInfo.h"
#include "ComDayCqDamCoreImplDamEventPurgeServiceInfo.h"
#include "ComDayCqDamCoreImplDamEventRecorderImplInfo.h"
#include "ComDayCqDamCoreImplEventDamEventAuditListenerInfo.h"
#include "ComDayCqDamCoreImplExpiryNotificationJobImplInfo.h"
#include "ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo.h"
#include "ComDayCqDamCoreImplGfxCommonsGfxRendererInfo.h"
#include "ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo.h"
#include "ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo.h"
#include "ComDayCqDamCoreImplHandlerJpegHandlerInfo.h"
#include "ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo.h"
#include "ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo.h"
#include "ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo.h"
#include "ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo.h"
#include "ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo.h"
#include "ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo.h"
#include "ComDayCqDamCoreImplLightboxLightboxServletInfo.h"
#include "ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo.h"
#include "ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo.h"
#include "ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo.h"
#include "ComDayCqDamCoreImplMissingMetadataNotificationJobInfo.h"
#include "ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo.h"
#include "ComDayCqDamCoreImplProcessTextExtractionProcessInfo.h"
#include "ComDayCqDamCoreImplRenditionMakerImplInfo.h"
#include "ComDayCqDamCoreImplReportsReportExportServiceInfo.h"
#include "ComDayCqDamCoreImplReportsReportPurgeServiceInfo.h"
#include "ComDayCqDamCoreImplServletAssetDownloadServletInfo.h"
#include "ComDayCqDamCoreImplServletAssetStatusServletInfo.h"
#include "ComDayCqDamCoreImplServletAssetXMPSearchServletInfo.h"
#include "ComDayCqDamCoreImplServletBatchMetadataServletInfo.h"
#include "ComDayCqDamCoreImplServletBinaryProviderServletInfo.h"
#include "ComDayCqDamCoreImplServletCollectionServletInfo.h"
#include "ComDayCqDamCoreImplServletCollectionsServletInfo.h"
#include "ComDayCqDamCoreImplServletCompanionServletInfo.h"
#include "ComDayCqDamCoreImplServletCreateAssetServletInfo.h"
#include "ComDayCqDamCoreImplServletDamContentDispositionFilterInfo.h"
#include "ComDayCqDamCoreImplServletGuidLookupFilterInfo.h"
#include "ComDayCqDamCoreImplServletHealthCheckServletInfo.h"
#include "ComDayCqDamCoreImplServletMetadataGetServletInfo.h"
#include "ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo.h"
#include "ComDayCqDamCoreImplServletResourceCollectionServletInfo.h"
#include "ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo.h"
#include "ComDayCqDamCoreImplUnzipUnzipConfigInfo.h"
#include "ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo.h"
#include "ComDayCqDamCoreProcessExtractMetadataProcessInfo.h"
#include "ComDayCqDamCoreProcessMetadataProcessorProcessInfo.h"
#include "ComDayCqDamHandlerFfmpegLocatorImplInfo.h"
#include "ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo.h"
#include "ComDayCqDamHandlerStandardPdfPdfHandlerInfo.h"
#include "ComDayCqDamHandlerStandardPsPostScriptHandlerInfo.h"
#include "ComDayCqDamHandlerStandardPsdPsdHandlerInfo.h"
#include "ComDayCqDamIdsImplIDSJobProcessorInfo.h"
#include "ComDayCqDamIdsImplIDSPoolManagerImplInfo.h"
#include "ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo.h"
#include "ComDayCqDamInddImplServletSnippetCreationServletInfo.h"
#include "ComDayCqDamInddProcessINDDMediaExtractProcessInfo.h"
#include "ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo.h"
#include "ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo.h"
#include "ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo.h"
#include "ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo.h"
#include "ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo.h"
#include "ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo.h"
#include "ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo.h"
#include "ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo.h"
#include "ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo.h"
#include "ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo.h"
#include "ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo.h"
#include "ComDayCqDamScene7ImplScene7APIClientImplInfo.h"
#include "ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo.h"
#include "ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo.h"
#include "ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo.h"
#include "ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo.h"
#include "ComDayCqDamScene7ImplScene7UploadServiceImplInfo.h"
#include "ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo.h"
#include "ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo.h"
#include "ComDayCqDamVideoImplServletVideoTestServletInfo.h"
#include "ComDayCqExtwidgetServletsImageSpriteServletInfo.h"
#include "ComDayCqImageInternalFontFontHelperInfo.h"
#include "ComDayCqJcrclustersupportClusterStartLevelControllerInfo.h"
#include "ComDayCqMailerDefaultMailServiceInfo.h"
#include "ComDayCqMailerImplCqMailingServiceInfo.h"
#include "ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo.h"
#include "ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo.h"
#include "ComDayCqMcmCampaignImplIntegrationConfigImplInfo.h"
#include "ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo.h"
#include "ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo.h"
#include "ComDayCqMcmImplMCMConfigurationInfo.h"
#include "ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo.h"
#include "ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo.h"
#include "ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo.h"
#include "ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo.h"
#include "ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo.h"
#include "ComDayCqNotificationImplNotificationServiceImplInfo.h"
#include "ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo.h"
#include "ComDayCqPollingImporterImplManagedPollConfigImplInfo.h"
#include "ComDayCqPollingImporterImplManagedPollingImporterImplInfo.h"
#include "ComDayCqPollingImporterImplPollingImporterImplInfo.h"
#include "ComDayCqReplicationAuditReplicationEventListenerInfo.h"
#include "ComDayCqReplicationContentStaticContentBuilderInfo.h"
#include "ComDayCqReplicationImplAgentManagerImplInfo.h"
#include "ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo.h"
#include "ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo.h"
#include "ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo.h"
#include "ComDayCqReplicationImplReplicationReceiverImplInfo.h"
#include "ComDayCqReplicationImplReplicatorImplInfo.h"
#include "ComDayCqReplicationImplReverseReplicatorInfo.h"
#include "ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo.h"
#include "ComDayCqReplicationImplTransportHttpInfo.h"
#include "ComDayCqReportingImplCacheCacheImplInfo.h"
#include "ComDayCqReportingImplConfigServiceImplInfo.h"
#include "ComDayCqReportingImplRLogAnalyzerInfo.h"
#include "ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo.h"
#include "ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo.h"
#include "ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo.h"
#include "ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo.h"
#include "ComDayCqRewriterProcessorImplHtmlParserFactoryInfo.h"
#include "ComDayCqSearchImplBuilderQueryBuilderImplInfo.h"
#include "ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo.h"
#include "ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo.h"
#include "ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo.h"
#include "ComDayCqSecurityACLSetupInfo.h"
#include "ComDayCqStatisticsImplStatisticsServiceImplInfo.h"
#include "ComDayCqTaggingImplJcrTagManagerFactoryImplInfo.h"
#include "ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo.h"
#include "ComDayCqTaggingImplTagGarbageCollectorInfo.h"
#include "ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo.h"
#include "ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo.h"
#include "ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo.h"
#include "ComDayCqWcmCoreImplCommandsWCMCommandServletInfo.h"
#include "ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo.h"
#include "ComDayCqWcmCoreImplEventPageEventAuditListenerInfo.h"
#include "ComDayCqWcmCoreImplEventPagePostProcessorInfo.h"
#include "ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo.h"
#include "ComDayCqWcmCoreImplEventTemplatePostProcessorInfo.h"
#include "ComDayCqWcmCoreImplLanguageManagerImplInfo.h"
#include "ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo.h"
#include "ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo.h"
#include "ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo.h"
#include "ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo.h"
#include "ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo.h"
#include "ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo.h"
#include "ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo.h"
#include "ComDayCqWcmCoreImplServletsFindReplaceServletInfo.h"
#include "ComDayCqWcmCoreImplServletsReferenceSearchServletInfo.h"
#include "ComDayCqWcmCoreImplServletsThumbnailServletInfo.h"
#include "ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo.h"
#include "ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo.h"
#include "ComDayCqWcmCoreImplVersionManagerImplInfo.h"
#include "ComDayCqWcmCoreImplVersionPurgeTaskInfo.h"
#include "ComDayCqWcmCoreImplWCMDebugFilterInfo.h"
#include "ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo.h"
#include "ComDayCqWcmCoreImplWarpTimeWarpFilterInfo.h"
#include "ComDayCqWcmCoreMvtMVTStatisticsImplInfo.h"
#include "ComDayCqWcmCoreStatsPageViewStatisticsImplInfo.h"
#include "ComDayCqWcmCoreWCMRequestFilterInfo.h"
#include "ComDayCqWcmDesignimporterDesignPackageImporterInfo.h"
#include "ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo.h"
#include "ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo.h"
#include "ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo.h"
#include "ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo.h"
#include "ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo.h"
#include "ComDayCqWcmFoundationFormsImplFormChooserServletInfo.h"
#include "ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo.h"
#include "ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo.h"
#include "ComDayCqWcmFoundationFormsImplMailServletInfo.h"
#include "ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo.h"
#include "ComDayCqWcmFoundationImplHTTPAuthHandlerInfo.h"
#include "ComDayCqWcmFoundationImplPageImpressionsTrackerInfo.h"
#include "ComDayCqWcmFoundationImplPageRedirectServletInfo.h"
#include "ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo.h"
#include "ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo.h"
#include "ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo.h"
#include "ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo.h"
#include "ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo.h"
#include "ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo.h"
#include "ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo.h"
#include "ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo.h"
#include "ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo.h"
#include "ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo.h"
#include "ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo.h"
#include "ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo.h"
#include "ComDayCqWcmMsmImplRolloutManagerImplInfo.h"
#include "ComDayCqWcmMsmImplServletsAuditLogServletInfo.h"
#include "ComDayCqWcmNotificationEmailImplEmailChannelInfo.h"
#include "ComDayCqWcmNotificationImplNotificationManagerImplInfo.h"
#include "ComDayCqWcmScriptingImplBVPManagerInfo.h"
#include "ComDayCqWcmUndoUndoConfigInfo.h"
#include "ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo.h"
#include "ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo.h"
#include "ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo.h"
#include "ComDayCqWidgetImplHtmlLibraryManagerImplInfo.h"
#include "ComDayCqWidgetImplWidgetExtensionProviderImplInfo.h"
#include "ComDayCqWorkflowImplEmailEMailNotificationServiceInfo.h"
#include "ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo.h"
#include "ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo.h"
#include "ComDayCrxSecurityTokenImplTokenCleanupTaskInfo.h"
#include "GuideLocalizationServiceInfo.h"
#include "MessagingUserComponentFactoryInfo.h"
#include "OrgApacheAriesJmxFrameworkStateConfigInfo.h"
#include "OrgApacheFelixEventadminImplEventAdminInfo.h"
#include "OrgApacheFelixHttpInfo.h"
#include "OrgApacheFelixHttpSslfilterSslFilterInfo.h"
#include "OrgApacheFelixJaasConfigurationFactoryInfo.h"
#include "OrgApacheFelixJaasConfigurationSpiInfo.h"
#include "OrgApacheFelixScrScrServiceInfo.h"
#include "OrgApacheFelixSystemreadyImplComponentsCheckInfo.h"
#include "OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo.h"
#include "OrgApacheFelixSystemreadyImplServicesCheckInfo.h"
#include "OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo.h"
#include "OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo.h"
#include "OrgApacheFelixSystemreadySystemReadyMonitorInfo.h"
#include "OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo.h"
#include "OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo.h"
#include "OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo.h"
#include "OrgApacheHttpProxyconfiguratorInfo.h"
#include "OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo.h"
#include "OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo.h"
#include "OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo.h"
#include "OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo.h"
#include "OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo.h"
#include "OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo.h"
#include "OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo.h"
#include "OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo.h"
#include "OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo.h"
#include "OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo.h"
#include "OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo.h"
#include "OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo.h"
#include "OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo.h"
#include "OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo.h"
#include "OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo.h"
#include "OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo.h"
#include "OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo.h"
#include "OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo.h"
#include "OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo.h"
#include "OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo.h"
#include "OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo.h"
#include "OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo.h"
#include "OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo.h"
#include "OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo.h"
#include "OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo.h"
#include "OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo.h"
#include "OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo.h"
#include "OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo.h"
#include "OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo.h"
#include "OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo.h"
#include "OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo.h"
#include "OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo.h"
#include "OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo.h"
#include "OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo.h"
#include "OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo.h"
#include "OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo.h"
#include "OrgApacheSlingAuthCoreImplLogoutServletInfo.h"
#include "OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo.h"
#include "OrgApacheSlingCaconfigImplConfigurationResolverImplInfo.h"
#include "OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo.h"
#include "OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo.h"
#include "OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo.h"
#include "OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo.h"
#include "OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo.h"
#include "OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo.h"
#include "OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo.h"
#include "OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo.h"
#include "OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo.h"
#include "OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo.h"
#include "OrgApacheSlingCommonsLogLogManagerInfo.h"
#include "OrgApacheSlingCommonsMetricsInternalLogReporterInfo.h"
#include "OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo.h"
#include "OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo.h"
#include "OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo.h"
#include "OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo.h"
#include "OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo.h"
#include "OrgApacheSlingDatasourceDataSourceFactoryInfo.h"
#include "OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo.h"
#include "OrgApacheSlingDiscoveryOakConfigInfo.h"
#include "OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo.h"
#include "OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo.h"
#include "OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo.h"
#include "OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo.h"
#include "OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo.h"
#include "OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo.h"
#include "OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo.h"
#include "OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo.h"
#include "OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo.h"
#include "OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo.h"
#include "OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo.h"
#include "OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo.h"
#include "OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo.h"
#include "OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo.h"
#include "OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo.h"
#include "OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo.h"
#include "OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo.h"
#include "OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo.h"
#include "OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo.h"
#include "OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo.h"
#include "OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo.h"
#include "OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo.h"
#include "OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo.h"
#include "OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo.h"
#include "OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo.h"
#include "OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo.h"
#include "OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo.h"
#include "OrgApacheSlingEngineImplLogRequestLoggerInfo.h"
#include "OrgApacheSlingEngineImplLogRequestLoggerServiceInfo.h"
#include "OrgApacheSlingEngineImplSlingMainServletInfo.h"
#include "OrgApacheSlingEngineParametersInfo.h"
#include "OrgApacheSlingEventImplEventingThreadPoolInfo.h"
#include "OrgApacheSlingEventImplJobsDefaultJobManagerInfo.h"
#include "OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo.h"
#include "OrgApacheSlingEventImplJobsJobConsumerManagerInfo.h"
#include "OrgApacheSlingEventJobsQueueConfigurationInfo.h"
#include "OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo.h"
#include "OrgApacheSlingFeatureflagsFeatureInfo.h"
#include "OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo.h"
#include "OrgApacheSlingHapiImplHApiUtilImplInfo.h"
#include "OrgApacheSlingHcCoreImplCompositeHealthCheckInfo.h"
#include "OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo.h"
#include "OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo.h"
#include "OrgApacheSlingHcCoreImplScriptableHealthCheckInfo.h"
#include "OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo.h"
#include "OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo.h"
#include "OrgApacheSlingI18nImplI18NFilterInfo.h"
#include "OrgApacheSlingI18nImplJcrResourceBundleProviderInfo.h"
#include "OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo.h"
#include "OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo.h"
#include "OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo.h"
#include "OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo.h"
#include "OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo.h"
#include "OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo.h"
#include "OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo.h"
#include "OrgApacheSlingJcrRepoinitRepositoryInitializerInfo.h"
#include "OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo.h"
#include "OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo.h"
#include "OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo.h"
#include "OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo.h"
#include "OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo.h"
#include "OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo.h"
#include "OrgApacheSlingJmxProviderImplJMXResourceProviderInfo.h"
#include "OrgApacheSlingModelsImplModelAdapterFactoryInfo.h"
#include "OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo.h"
#include "OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo.h"
#include "OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo.h"
#include "OrgApacheSlingResourcemergerPickerOverridingInfo.h"
#include "OrgApacheSlingScriptingCoreImplScriptCacheImplInfo.h"
#include "OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo.h"
#include "OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo.h"
#include "OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo.h"
#include "OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo.h"
#include "OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo.h"
#include "OrgApacheSlingSecurityImplContentDispositionFilterInfo.h"
#include "OrgApacheSlingSecurityImplReferrerFilterInfo.h"
#include "OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo.h"
#include "OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo.h"
#include "OrgApacheSlingServletsGetDefaultGetServletInfo.h"
#include "OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo.h"
#include "OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo.h"
#include "OrgApacheSlingServletsPostImplSlingPostServletInfo.h"
#include "OrgApacheSlingServletsResolverSlingServletResolverInfo.h"
#include "OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo.h"
#include "OrgApacheSlingStartupfilterImplStartupFilterImplInfo.h"
#include "OrgApacheSlingTenantInternalTenantProviderImplInfo.h"
#include "OrgApacheSlingTracerInternalLogTracerInfo.h"
#include "OrgApacheSlingXssImplXSSFilterImplInfo.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  ConfigmgrApi 
{
public:

    explicit ConfigmgrApi( std::shared_ptr<ApiClient> apiClient );

    virtual ~ConfigmgrApi() = default;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="showPlaceholder"> (optional)</param>
    /// <param name="maximumCacheEntries"> (optional)</param>
    /// <param name="afPeriodscriptingPeriodcompatversion"> (optional)</param>
    /// <param name="makeFileNameUnique"> (optional)</param>
    /// <param name="generatingCompliantData"> (optional)</param>
    pplx::task<std::shared_ptr<AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo>> adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> showPlaceholder,
        boost::optional<int32_t> maximumCacheEntries,
        boost::optional<utility::string_t> afPeriodscriptingPeriodcompatversion,
        boost::optional<bool> makeFileNameUnique,
        boost::optional<bool> generatingCompliantData
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="fontList"> (optional)</param>
    pplx::task<std::shared_ptr<AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo>> adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> fontList
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodanalyticsPeriodcomponentPeriodqueryPeriodcachePeriodsize"> (optional)</param>
    pplx::task<std::shared_ptr<AnalyticsComponentQueryCacheServiceInfo>> analyticsComponentQueryCacheService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> cqPeriodanalyticsPeriodcomponentPeriodqueryPeriodcachePeriodsize
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="styleString"> (optional)</param>
    pplx::task<std::shared_ptr<ApacheSlingHealthCheckResultHTMLSerializerInfo>> apacheSlingHealthCheckResultHTMLSerializer(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> styleString
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="formsManagerConfigPeriodincludeOOTBTemplates"> (optional)</param>
    /// <param name="formsManagerConfigPeriodincludeDeprecatedTemplates"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo>> comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> formsManagerConfigPeriodincludeOOTBTemplates,
        boost::optional<bool> formsManagerConfigPeriodincludeDeprecatedTemplates
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="isTransactionRecordingEnabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeAemTransactionCoreImplTransactionRecorderInfo>> comAdobeAemTransactionCoreImplTransactionRecorder(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> isTransactionRecordingEnabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodname"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    /// <param name="hcPeriodmbeanPeriodname"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo>> comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> hcPeriodname,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags,
        boost::optional<utility::string_t> hcPeriodmbeanPeriodname
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodname"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    /// <param name="hcPeriodmbeanPeriodname"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo>> comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> hcPeriodname,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags,
        boost::optional<utility::string_t> hcPeriodmbeanPeriodname
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="preUpgradePeriodmaintenancePeriodtasks"> (optional)</param>
    /// <param name="preUpgradePeriodhcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo>> comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> preUpgradePeriodmaintenancePeriodtasks,
        boost::optional<std::vector<utility::string_t>> preUpgradePeriodhcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="rootPeriodpath"> (optional)</param>
    /// <param name="fixPeriodinconsistencies"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo>> comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> rootPeriodpath,
        boost::optional<bool> fixPeriodinconsistencies
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodaccountmanagerPeriodtokenPeriodvalidityPeriodperiod"> (optional)</param>
    /// <param name="cqPeriodaccountmanagerPeriodconfigPeriodrequestnewaccountPeriodmail"> (optional)</param>
    /// <param name="cqPeriodaccountmanagerPeriodconfigPeriodrequestnewpwdPeriodmail"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqAccountApiAccountManagementServiceInfo>> comAdobeCqAccountApiAccountManagementService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> cqPeriodaccountmanagerPeriodtokenPeriodvalidityPeriodperiod,
        boost::optional<utility::string_t> cqPeriodaccountmanagerPeriodconfigPeriodrequestnewaccountPeriodmail,
        boost::optional<utility::string_t> cqPeriodaccountmanagerPeriodconfigPeriodrequestnewpwdPeriodmail
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodaccountmanagerPeriodconfigPeriodinformnewaccountPeriodmail"> (optional)</param>
    /// <param name="cqPeriodaccountmanagerPeriodconfigPeriodinformnewpwdPeriodmail"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqAccountImplAccountManagementServletInfo>> comAdobeCqAccountImplAccountManagementServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> cqPeriodaccountmanagerPeriodconfigPeriodinformnewaccountPeriodmail,
        boost::optional<utility::string_t> cqPeriodaccountmanagerPeriodconfigPeriodinformnewpwdPeriodmail
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodaddressPeriodlocationPerioddefaultPeriodmaxResults"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqAddressImplLocationLocationListServletInfo>> comAdobeCqAddressImplLocationLocationListServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> cqPeriodaddressPeriodlocationPerioddefaultPeriodmaxResults
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="auditlogPeriodrulePeriodname"> (optional)</param>
    /// <param name="auditlogPeriodrulePeriodcontentpath"> (optional)</param>
    /// <param name="auditlogPeriodrulePeriodminimumage"> (optional)</param>
    /// <param name="auditlogPeriodrulePeriodtypes"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqAuditPurgeDamInfo>> comAdobeCqAuditPurgeDam(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> auditlogPeriodrulePeriodname,
        boost::optional<utility::string_t> auditlogPeriodrulePeriodcontentpath,
        boost::optional<int32_t> auditlogPeriodrulePeriodminimumage,
        boost::optional<utility::string_t> auditlogPeriodrulePeriodtypes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="auditlogPeriodrulePeriodname"> (optional)</param>
    /// <param name="auditlogPeriodrulePeriodcontentpath"> (optional)</param>
    /// <param name="auditlogPeriodrulePeriodminimumage"> (optional)</param>
    /// <param name="auditlogPeriodrulePeriodtypes"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqAuditPurgePagesInfo>> comAdobeCqAuditPurgePages(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> auditlogPeriodrulePeriodname,
        boost::optional<utility::string_t> auditlogPeriodrulePeriodcontentpath,
        boost::optional<int32_t> auditlogPeriodrulePeriodminimumage,
        boost::optional<utility::string_t> auditlogPeriodrulePeriodtypes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="auditlogPeriodrulePeriodname"> (optional)</param>
    /// <param name="auditlogPeriodrulePeriodcontentpath"> (optional)</param>
    /// <param name="auditlogPeriodrulePeriodminimumage"> (optional)</param>
    /// <param name="auditlogPeriodrulePeriodtypes"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqAuditPurgeReplicationInfo>> comAdobeCqAuditPurgeReplication(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> auditlogPeriodrulePeriodname,
        boost::optional<utility::string_t> auditlogPeriodrulePeriodcontentpath,
        boost::optional<int32_t> auditlogPeriodrulePeriodminimumage,
        boost::optional<utility::string_t> auditlogPeriodrulePeriodtypes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="keypairPeriodid"> (optional)</param>
    /// <param name="keypairPeriodalias"> (optional)</param>
    /// <param name="cdnrewriterPeriodattributes"> (optional)</param>
    /// <param name="cdnPeriodrewriterPerioddistributionPerioddomain"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo>> comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> keypairPeriodid,
        boost::optional<utility::string_t> keypairPeriodalias,
        boost::optional<std::vector<utility::string_t>> cdnrewriterPeriodattributes,
        boost::optional<utility::string_t> cdnPeriodrewriterPerioddistributionPerioddomain
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cdnPeriodconfigPerioddistributionPerioddomain"> (optional)</param>
    /// <param name="cdnPeriodconfigPeriodenablePeriodrewriting"> (optional)</param>
    /// <param name="cdnPeriodconfigPeriodpathPeriodprefixes"> (optional)</param>
    /// <param name="cdnPeriodconfigPeriodcdnttl"> (optional)</param>
    /// <param name="cdnPeriodconfigPeriodapplicationPeriodprotocol"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo>> comAdobeCqCdnRewriterImplCDNConfigServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> cdnPeriodconfigPerioddistributionPerioddomain,
        boost::optional<bool> cdnPeriodconfigPeriodenablePeriodrewriting,
        boost::optional<std::vector<utility::string_t>> cdnPeriodconfigPeriodpathPeriodprefixes,
        boost::optional<int32_t> cdnPeriodconfigPeriodcdnttl,
        boost::optional<utility::string_t> cdnPeriodconfigPeriodapplicationPeriodprotocol
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="cdnrewriterPeriodattributes"> (optional)</param>
    /// <param name="cdnPeriodrewriterPerioddistributionPerioddomain"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqCdnRewriterImplCDNRewriterInfo>> comAdobeCqCdnRewriterImplCDNRewriter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<std::vector<utility::string_t>> cdnrewriterPeriodattributes,
        boost::optional<utility::string_t> cdnPeriodrewriterPerioddistributionPerioddomain
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="flushPeriodagents"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo>> comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> flushPeriodagents
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodcommercePeriodassetPeriodhandlerPeriodactive"> (optional)</param>
    /// <param name="cqPeriodcommercePeriodassetPeriodhandlerPeriodname"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo>> comAdobeCqCommerceImplAssetDynamicImageHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPeriodcommercePeriodassetPeriodhandlerPeriodactive,
        boost::optional<utility::string_t> cqPeriodcommercePeriodassetPeriodhandlerPeriodname
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodcommercePeriodassetPeriodhandlerPeriodfallback"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo>> comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> cqPeriodcommercePeriodassetPeriodhandlerPeriodfallback
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodcommercePeriodassetPeriodhandlerPeriodactive"> (optional)</param>
    /// <param name="cqPeriodcommercePeriodassetPeriodhandlerPeriodname"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqCommerceImplAssetStaticImageHandlerInfo>> comAdobeCqCommerceImplAssetStaticImageHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPeriodcommercePeriodassetPeriodhandlerPeriodactive,
        boost::optional<utility::string_t> cqPeriodcommercePeriodassetPeriodhandlerPeriodname
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodcommercePeriodassetPeriodhandlerPeriodactive"> (optional)</param>
    /// <param name="cqPeriodcommercePeriodassetPeriodhandlerPeriodname"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqCommerceImplAssetVideoHandlerInfo>> comAdobeCqCommerceImplAssetVideoHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPeriodcommercePeriodassetPeriodhandlerPeriodactive,
        boost::optional<utility::string_t> cqPeriodcommercePeriodassetPeriodhandlerPeriodname
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodcommercePeriodpromotionPeriodroot"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo>> comAdobeCqCommerceImplPromotionPromotionManagerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> cqPeriodcommercePeriodpromotionPeriodroot
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodcommercePeriodcataloggeneratorPeriodbucketsize"> (optional)</param>
    /// <param name="cqPeriodcommercePeriodcataloggeneratorPeriodbucketname"> (optional)</param>
    /// <param name="cqPeriodcommercePeriodcataloggeneratorPeriodexcludedtemplateproperties"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo>> comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> cqPeriodcommercePeriodcataloggeneratorPeriodbucketsize,
        boost::optional<utility::string_t> cqPeriodcommercePeriodcataloggeneratorPeriodbucketname,
        boost::optional<std::vector<utility::string_t>> cqPeriodcommercePeriodcataloggeneratorPeriodexcludedtemplateproperties
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodcommercePeriodpageeventlistenerPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqCommercePimImplPageEventListenerInfo>> comAdobeCqCommercePimImplPageEventListener(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPeriodcommercePeriodpageeventlistenerPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="feed_generator_algorithm"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo>> comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> feed_generator_algorithm
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="reportingservicesPeriodurl"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo>> comAdobeCqContentinsightImplReportingServicesSettingsProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> reportingservicesPeriodurl
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="brightedgePeriodurl"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo>> comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> brightedgePeriodurl
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="reportingservicesPeriodproxyPeriodwhitelist"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo>> comAdobeCqContentinsightImplServletsReportingServicesProxyServle(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> reportingservicesPeriodproxyPeriodwhitelist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="damPeriodcfmPeriodcomponentPeriodresourceType"> (optional)</param>
    /// <param name="damPeriodcfmPeriodcomponentPeriodfileReferenceProp"> (optional)</param>
    /// <param name="damPeriodcfmPeriodcomponentPeriodelementsProp"> (optional)</param>
    /// <param name="damPeriodcfmPeriodcomponentPeriodvariationProp"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqDamCfmImplComponentComponentConfigImplInfo>> comAdobeCqDamCfmImplComponentComponentConfigImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> damPeriodcfmPeriodcomponentPeriodresourceType,
        boost::optional<utility::string_t> damPeriodcfmPeriodcomponentPeriodfileReferenceProp,
        boost::optional<utility::string_t> damPeriodcfmPeriodcomponentPeriodelementsProp,
        boost::optional<utility::string_t> damPeriodcfmPeriodcomponentPeriodvariationProp
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="damPeriodcfmPeriodresourceTypes"> (optional)</param>
    /// <param name="damPeriodcfmPeriodreferenceProperties"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqDamCfmImplConfFeatureConfigImplInfo>> comAdobeCqDamCfmImplConfFeatureConfigImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> damPeriodcfmPeriodresourceTypes,
        boost::optional<std::vector<utility::string_t>> damPeriodcfmPeriodreferenceProperties
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="pipelinePeriodtype"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo>> comAdobeCqDamCfmImplContentRewriterAssetProcessor(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> pipelinePeriodtype
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="pipelinePeriodtype"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo>> comAdobeCqDamCfmImplContentRewriterParRangeFilter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> pipelinePeriodtype
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="pipelinePeriodtype"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo>> comAdobeCqDamCfmImplContentRewriterPayloadFilter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> pipelinePeriodtype
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="maxMemory"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqDamDmProcessImagePTiffManagerImplInfo>> comAdobeCqDamDmProcessImagePTiffManagerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> maxMemory
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="dmreplicateonmodifyPeriodenabled"> (optional)</param>
    /// <param name="dmreplicateonmodifyPeriodforcesyncdeletes"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo>> comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> dmreplicateonmodifyPeriodenabled,
        boost::optional<bool> dmreplicateonmodifyPeriodforcesyncdeletes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="comPeriodadobePerioddamPeriodmacPeriodsyncPeriodclientPeriodsoPeriodtimeout"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo>> comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> comPeriodadobePerioddamPeriodmacPeriodsyncPeriodclientPeriodsoPeriodtimeout
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodregisteredPaths"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodsyncPeriodrenditions"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodreplicatePeriodthreadPeriodwaitPeriodms"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodplatform"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo>> comAdobeCqDamMacSyncImplDAMSyncServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodregisteredPaths,
        boost::optional<bool> comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodsyncPeriodrenditions,
        boost::optional<int32_t> comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodreplicatePeriodthreadPeriodwaitPeriodms,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPerioddamPeriodmacPeriodsyncPerioddamsyncservicePeriodplatform
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="nuiEnabled"> (optional)</param>
    /// <param name="nuiServiceUrl"> (optional)</param>
    /// <param name="nuiApiKey"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo>> comAdobeCqDamProcessorNuiImplNuiAssetProcessor(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> nuiEnabled,
        boost::optional<utility::string_t> nuiServiceUrl,
        boost::optional<utility::string_t> nuiApiKey
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="tcpPort"> (optional)</param>
    /// <param name="allowRemoteAccess"> (optional)</param>
    /// <param name="maxRenderRgnPixels"> (optional)</param>
    /// <param name="maxMessageSize"> (optional)</param>
    /// <param name="randomAccessUrlTimeout"> (optional)</param>
    /// <param name="workerThreads"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqDamS7imagingImplIsImageServerComponentInfo>> comAdobeCqDamS7imagingImplIsImageServerComponent(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> tcpPort,
        boost::optional<bool> allowRemoteAccess,
        boost::optional<utility::string_t> maxRenderRgnPixels,
        boost::optional<utility::string_t> maxMessageSize,
        boost::optional<int32_t> randomAccessUrlTimeout,
        boost::optional<int32_t> workerThreads
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cachePeriodenable"> (optional)</param>
    /// <param name="cachePeriodrootPaths"> (optional)</param>
    /// <param name="cachePeriodmaxSize"> (optional)</param>
    /// <param name="cachePeriodmaxEntries"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo>> comAdobeCqDamS7imagingImplPsPlatformServerServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cachePeriodenable,
        boost::optional<std::vector<utility::string_t>> cachePeriodrootPaths,
        boost::optional<int32_t> cachePeriodmaxSize,
        boost::optional<int32_t> cachePeriodmaxEntries
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="pathPrefix"> (optional)</param>
    /// <param name="createVersion"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo>> comAdobeCqDamWebdavImplIoAssetIOHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> pathPrefix,
        boost::optional<bool> createVersion
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodenable"> (optional)</param>
    /// <param name="cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodschedulerPeriodperiod"> (optional)</param>
    /// <param name="cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodstagingPeriodtimeout"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo>> comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodenable,
        boost::optional<int32_t> cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodschedulerPeriodperiod,
        boost::optional<int32_t> cqPerioddamPeriodwebdavPeriodversionPeriodlinkingPeriodstagingPeriodtimeout
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="comPerioddayPeriodcqPerioddamPeriodcorePeriodimplPeriodioPeriodSpecialFilesHandlerPeriodfilepatters"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo>> comAdobeCqDamWebdavImplIoSpecialFilesHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> comPerioddayPeriodcqPerioddamPeriodcorePeriodimplPeriodioPeriodSpecialFilesHandlerPeriodfilepatters
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="firewallPerioddeserializationPeriodwhitelist"> (optional)</param>
    /// <param name="firewallPerioddeserializationPeriodblacklist"> (optional)</param>
    /// <param name="firewallPerioddeserializationPerioddiagnostics"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqDeserfwImplDeserializationFirewallImplInfo>> comAdobeCqDeserfwImplDeserializationFirewallImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> firewallPerioddeserializationPeriodwhitelist,
        boost::optional<std::vector<utility::string_t>> firewallPerioddeserializationPeriodblacklist,
        boost::optional<utility::string_t> firewallPerioddeserializationPerioddiagnostics
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="connectionPeriodtimeout"> (optional)</param>
    /// <param name="socketPeriodtimeout"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqDtmImplServiceDTMWebServiceImplInfo>> comAdobeCqDtmImplServiceDTMWebServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> connectionPeriodtimeout,
        boost::optional<int32_t> socketPeriodtimeout
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="dtmPeriodstagingPeriodipPeriodwhitelist"> (optional)</param>
    /// <param name="dtmPeriodproductionPeriodipPeriodwhitelist"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqDtmImplServletsDTMDeployHookServletInfo>> comAdobeCqDtmImplServletsDTMDeployHookServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> dtmPeriodstagingPeriodipPeriodwhitelist,
        boost::optional<std::vector<utility::string_t>> dtmPeriodproductionPeriodipPeriodwhitelist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="endpointUri"> (optional)</param>
    /// <param name="connectionTimeout"> (optional)</param>
    /// <param name="socketTimeout"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqDtmReactorImplServiceWebServiceImplInfo>> comAdobeCqDtmReactorImplServiceWebServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> endpointUri,
        boost::optional<int32_t> connectionTimeout,
        boost::optional<int32_t> socketTimeout
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    /// <param name="disabledForGroups"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo>> comAdobeCqExperiencelogImplExperienceLogConfigServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enabled,
        boost::optional<std::vector<utility::string_t>> disabledForGroups
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodname"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    /// <param name="hcPeriodmbeanPeriodname"> (optional)</param>
    /// <param name="packagePeriodnames"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqHcContentPackagesHealthCheckInfo>> comAdobeCqHcContentPackagesHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> hcPeriodname,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags,
        boost::optional<utility::string_t> hcPeriodmbeanPeriodname,
        boost::optional<std::vector<utility::string_t>> packagePeriodnames
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="historyPeriodrequestFilterPeriodexcludedSelectors"> (optional)</param>
    /// <param name="historyPeriodrequestFilterPeriodexcludedExtensions"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqHistoryImplHistoryRequestFilterInfo>> comAdobeCqHistoryImplHistoryRequestFilter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> historyPeriodrequestFilterPeriodexcludedSelectors,
        boost::optional<std::vector<utility::string_t>> historyPeriodrequestFilterPeriodexcludedExtensions
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="historyPeriodservicePeriodresourceTypes"> (optional)</param>
    /// <param name="historyPeriodservicePeriodpathFilter"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqHistoryImplHistoryServiceImplInfo>> comAdobeCqHistoryImplHistoryServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> historyPeriodservicePeriodresourceTypes,
        boost::optional<std::vector<utility::string_t>> historyPeriodservicePeriodpathFilter
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="inboxPeriodimplPeriodtypeproviderPeriodregistrypaths"> (optional)</param>
    /// <param name="inboxPeriodimplPeriodtypeproviderPeriodlegacypaths"> (optional)</param>
    /// <param name="inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodfailureitem"> (optional)</param>
    /// <param name="inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodworkitem"> (optional)</param>
    /// <param name="inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodtask"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo>> comAdobeCqInboxImplTypeproviderItemTypeProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> inboxPeriodimplPeriodtypeproviderPeriodregistrypaths,
        boost::optional<std::vector<utility::string_t>> inboxPeriodimplPeriodtypeproviderPeriodlegacypaths,
        boost::optional<utility::string_t> inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodfailureitem,
        boost::optional<utility::string_t> inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodworkitem,
        boost::optional<utility::string_t> inboxPeriodimplPeriodtypeproviderPerioddefaulturlPeriodtask
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="imagePeriodquality"> (optional)</param>
    /// <param name="imagePeriodsupportedPeriodresolutions"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqProjectsImplServletProjectImageServletInfo>> comAdobeCqProjectsImplServletProjectImageServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> imagePeriodquality,
        boost::optional<utility::string_t> imagePeriodsupportedPeriodresolutions
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="scheduledpurgePeriodname"> (optional)</param>
    /// <param name="scheduledpurgePeriodpurgeActive"> (optional)</param>
    /// <param name="scheduledpurgePeriodtemplates"> (optional)</param>
    /// <param name="scheduledpurgePeriodpurgeGroups"> (optional)</param>
    /// <param name="scheduledpurgePeriodpurgeAssets"> (optional)</param>
    /// <param name="scheduledpurgePeriodterminateRunningWorkflows"> (optional)</param>
    /// <param name="scheduledpurgePerioddaysold"> (optional)</param>
    /// <param name="scheduledpurgePeriodsaveThreshold"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqProjectsPurgeSchedulerInfo>> comAdobeCqProjectsPurgeScheduler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> scheduledpurgePeriodname,
        boost::optional<bool> scheduledpurgePeriodpurgeActive,
        boost::optional<std::vector<utility::string_t>> scheduledpurgePeriodtemplates,
        boost::optional<bool> scheduledpurgePeriodpurgeGroups,
        boost::optional<bool> scheduledpurgePeriodpurgeAssets,
        boost::optional<bool> scheduledpurgePeriodterminateRunningWorkflows,
        boost::optional<int32_t> scheduledpurgePerioddaysold,
        boost::optional<int32_t> scheduledpurgePeriodsaveThreshold
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="includePeriodpaths"> (optional)</param>
    /// <param name="exporterPerioduser"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqScheduledExporterImplScheduledExporterImplInfo>> comAdobeCqScheduledExporterImplScheduledExporterImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> includePeriodpaths,
        boost::optional<utility::string_t> exporterPerioduser
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodurl"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodapikey"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodproject"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodenvironment"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodsendFrequency"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo>> comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodurl,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodapikey,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodproject,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodenvironment,
        boost::optional<int32_t> comPeriodadobePeriodcqPeriodscreensPeriodanalyticsPeriodimplPeriodsendFrequency
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="comPeriodadobePeriodaemPeriodscreensPeriodplayerPeriodpingfrequency"> (optional)</param>
    /// <param name="comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodspecialchars"> (optional)</param>
    /// <param name="comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlowercasechars"> (optional)</param>
    /// <param name="comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminuppercasechars"> (optional)</param>
    /// <param name="comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminnumberchars"> (optional)</param>
    /// <param name="comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminspecialchars"> (optional)</param>
    /// <param name="comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlength"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqScreensDeviceImplDeviceServiceInfo>> comAdobeCqScreensDeviceImplDeviceService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> comPeriodadobePeriodaemPeriodscreensPeriodplayerPeriodpingfrequency,
        boost::optional<utility::string_t> comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodspecialchars,
        boost::optional<int32_t> comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlowercasechars,
        boost::optional<int32_t> comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminuppercasechars,
        boost::optional<int32_t> comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminnumberchars,
        boost::optional<int32_t> comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminspecialchars,
        boost::optional<int32_t> comPeriodadobePeriodaemPeriodscreensPerioddevicePeriodpaswordPeriodminlength
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="deviceRegistrationTimeout"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo>> comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> deviceRegistrationTimeout
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodpagesupdatehandlerPeriodimageresourcetypes"> (optional)</param>
    /// <param name="cqPeriodpagesupdatehandlerPeriodproductresourcetypes"> (optional)</param>
    /// <param name="cqPeriodpagesupdatehandlerPeriodvideoresourcetypes"> (optional)</param>
    /// <param name="cqPeriodpagesupdatehandlerPerioddynamicsequenceresourcetypes"> (optional)</param>
    /// <param name="cqPeriodpagesupdatehandlerPeriodpreviewmodepaths"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo>> comAdobeCqScreensImplHandlerChannelsUpdateHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPeriodpagesupdatehandlerPeriodimageresourcetypes,
        boost::optional<std::vector<utility::string_t>> cqPeriodpagesupdatehandlerPeriodproductresourcetypes,
        boost::optional<std::vector<utility::string_t>> cqPeriodpagesupdatehandlerPeriodvideoresourcetypes,
        boost::optional<std::vector<utility::string_t>> cqPeriodpagesupdatehandlerPerioddynamicsequenceresourcetypes,
        boost::optional<std::vector<utility::string_t>> cqPeriodpagesupdatehandlerPeriodpreviewmodepaths
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="schedulerPeriodexpression"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo>> comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> schedulerPeriodexpression
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="comPeriodadobePeriodaemPeriodscreensPeriodimplPeriodremotePeriodrequestTimeout"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo>> comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> comPeriodadobePeriodaemPeriodscreensPeriodimplPeriodremotePeriodrequestTimeout
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="screensPeriodchannelsPeriodpropertiesPeriodtoPeriodremove"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqScreensImplScreensChannelPostProcessorInfo>> comAdobeCqScreensImplScreensChannelPostProcessor(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> screensPeriodchannelsPeriodpropertiesPeriodtoPeriodremove
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodprojectPath"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodscheduleFrequency"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpingTimeout"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodrecipients"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpserver"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpport"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusetls"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusername"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpassword"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo>> comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodprojectPath,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodscheduleFrequency,
        boost::optional<int32_t> comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpingTimeout,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodrecipients,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpserver,
        boost::optional<int32_t> comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodsmtpport,
        boost::optional<bool> comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusetls,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodusername,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodscreensPeriodmonitoringPeriodimplPeriodScreensMonitoringServiceImplPeriodpassword
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="globalPeriodsize"> (optional)</param>
    /// <param name="maxPerioddiskPeriodusage"> (optional)</param>
    /// <param name="persistencePeriodenabled"> (optional)</param>
    /// <param name="threadPeriodpoolPeriodmaxPeriodsize"> (optional)</param>
    /// <param name="scheduledPeriodthreadPeriodpoolPeriodmaxPeriodsize"> (optional)</param>
    /// <param name="gracefulPeriodshutdownPeriodtimeout"> (optional)</param>
    /// <param name="queues"> (optional)</param>
    /// <param name="topics"> (optional)</param>
    /// <param name="addressesPeriodmaxPerioddeliveryPeriodattempts"> (optional)</param>
    /// <param name="addressesPeriodexpiryPerioddelay"> (optional)</param>
    /// <param name="addressesPeriodaddressPeriodfullPeriodmessagePeriodpolicy"> (optional)</param>
    /// <param name="addressesPeriodmaxPeriodsizePeriodbytes"> (optional)</param>
    /// <param name="addressesPeriodpagePeriodsizePeriodbytes"> (optional)</param>
    /// <param name="addressesPeriodpagePeriodcachePeriodmaxPeriodsize"> (optional)</param>
    /// <param name="clusterPerioduser"> (optional)</param>
    /// <param name="clusterPeriodpassword"> (optional)</param>
    /// <param name="clusterPeriodcallPeriodtimeout"> (optional)</param>
    /// <param name="clusterPeriodcallPeriodfailoverPeriodtimeout"> (optional)</param>
    /// <param name="clusterPeriodclientPeriodfailurePeriodcheckPeriodperiod"> (optional)</param>
    /// <param name="clusterPeriodnotificationPeriodattempts"> (optional)</param>
    /// <param name="clusterPeriodnotificationPeriodinterval"> (optional)</param>
    /// <param name="idPeriodcachePeriodsize"> (optional)</param>
    /// <param name="clusterPeriodconfirmationPeriodwindowPeriodsize"> (optional)</param>
    /// <param name="clusterPeriodconnectionPeriodttl"> (optional)</param>
    /// <param name="clusterPeriodduplicatePerioddetection"> (optional)</param>
    /// <param name="clusterPeriodinitialPeriodconnectPeriodattempts"> (optional)</param>
    /// <param name="clusterPeriodmaxPeriodretryPeriodinterval"> (optional)</param>
    /// <param name="clusterPeriodminPeriodlargePeriodmessagePeriodsize"> (optional)</param>
    /// <param name="clusterPeriodproducerPeriodwindowPeriodsize"> (optional)</param>
    /// <param name="clusterPeriodreconnectPeriodattempts"> (optional)</param>
    /// <param name="clusterPeriodretryPeriodinterval"> (optional)</param>
    /// <param name="clusterPeriodretryPeriodintervalPeriodmultiplier"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo>> comAdobeCqScreensMqActivemqImplArtemisJMSProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<int32_t> globalPeriodsize,
        boost::optional<int32_t> maxPerioddiskPeriodusage,
        boost::optional<bool> persistencePeriodenabled,
        boost::optional<int32_t> threadPeriodpoolPeriodmaxPeriodsize,
        boost::optional<int32_t> scheduledPeriodthreadPeriodpoolPeriodmaxPeriodsize,
        boost::optional<int32_t> gracefulPeriodshutdownPeriodtimeout,
        boost::optional<std::vector<utility::string_t>> queues,
        boost::optional<std::vector<utility::string_t>> topics,
        boost::optional<int32_t> addressesPeriodmaxPerioddeliveryPeriodattempts,
        boost::optional<int32_t> addressesPeriodexpiryPerioddelay,
        boost::optional<utility::string_t> addressesPeriodaddressPeriodfullPeriodmessagePeriodpolicy,
        boost::optional<int32_t> addressesPeriodmaxPeriodsizePeriodbytes,
        boost::optional<int32_t> addressesPeriodpagePeriodsizePeriodbytes,
        boost::optional<int32_t> addressesPeriodpagePeriodcachePeriodmaxPeriodsize,
        boost::optional<utility::string_t> clusterPerioduser,
        boost::optional<utility::string_t> clusterPeriodpassword,
        boost::optional<int32_t> clusterPeriodcallPeriodtimeout,
        boost::optional<int32_t> clusterPeriodcallPeriodfailoverPeriodtimeout,
        boost::optional<int32_t> clusterPeriodclientPeriodfailurePeriodcheckPeriodperiod,
        boost::optional<int32_t> clusterPeriodnotificationPeriodattempts,
        boost::optional<int32_t> clusterPeriodnotificationPeriodinterval,
        boost::optional<int32_t> idPeriodcachePeriodsize,
        boost::optional<int32_t> clusterPeriodconfirmationPeriodwindowPeriodsize,
        boost::optional<int32_t> clusterPeriodconnectionPeriodttl,
        boost::optional<bool> clusterPeriodduplicatePerioddetection,
        boost::optional<int32_t> clusterPeriodinitialPeriodconnectPeriodattempts,
        boost::optional<int32_t> clusterPeriodmaxPeriodretryPeriodinterval,
        boost::optional<int32_t> clusterPeriodminPeriodlargePeriodmessagePeriodsize,
        boost::optional<int32_t> clusterPeriodproducerPeriodwindowPeriodsize,
        boost::optional<int32_t> clusterPeriodreconnectPeriodattempts,
        boost::optional<int32_t> clusterPeriodretryPeriodinterval,
        boost::optional<double> clusterPeriodretryPeriodintervalPeriodmultiplier
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodprojectPath"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodscheduleFrequency"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo>> comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodprojectPath,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodscreensPeriodofflinecontentPeriodimplPeriodBulkOfflineUpdateServiceImplPeriodscheduleFrequency
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="disableSmartSync"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo>> comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> disableSmartSync
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enableDataTriggeredContent"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo>> comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enableDataTriggeredContent
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo>> comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo>> comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    /// <param name="dispatcherPeriodaddress"> (optional)</param>
    /// <param name="dispatcherPeriodfilterPeriodallowed"> (optional)</param>
    /// <param name="dispatcherPeriodfilterPeriodblocked"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo>> comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags,
        boost::optional<utility::string_t> dispatcherPeriodaddress,
        boost::optional<std::vector<utility::string_t>> dispatcherPeriodfilterPeriodallowed,
        boost::optional<std::vector<utility::string_t>> dispatcherPeriodfilterPeriodblocked
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo>> comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    /// <param name="webserverPeriodaddress"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo>> comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags,
        boost::optional<utility::string_t> webserverPeriodaddress
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enable"> (optional)</param>
    /// <param name="ttl1"> (optional)</param>
    /// <param name="ttl2"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo>> comAdobeCqSocialAccountverificationImplAccountManagementConfigIm(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enable,
        boost::optional<int32_t> ttl1,
        boost::optional<int32_t> ttl2
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="priority"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo>> comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> priority
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="priority"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo>> comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> priority
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="eventPeriodtopics"> (optional)</param>
    /// <param name="eventPeriodfilter"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo>> comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> eventPeriodtopics,
        boost::optional<utility::string_t> eventPeriodfilter
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="accepted"> (optional)</param>
    /// <param name="ranked"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo>> comAdobeCqSocialActivitystreamsListenerImplModerationEventExten(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> accepted,
        boost::optional<int32_t> ranked
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="ranking"> (optional)</param>
    /// <param name="enable"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo>> comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> ranking,
        boost::optional<bool> enable
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="streamPath"> (optional)</param>
    /// <param name="streamName"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo>> comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> streamPath,
        boost::optional<utility::string_t> streamName
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="maxRetry"> (optional)</param>
    /// <param name="fieldWhitelist"> (optional)</param>
    /// <param name="attachmentTypeBlacklist"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo>> comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> maxRetry,
        boost::optional<std::vector<utility::string_t>> fieldWhitelist,
        boost::optional<std::vector<utility::string_t>> attachmentTypeBlacklist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="attachmentTypeBlacklist"> (optional)</param>
    /// <param name="extensionPeriodorder"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo>> comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> attachmentTypeBlacklist,
        boost::optional<int32_t> extensionPeriodorder
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="timezonesPeriodexpirytime"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCalendarServletsTimeZoneServletInfo>> comAdobeCqSocialCalendarServletsTimeZoneServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> timezonesPeriodexpirytime
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="ranking"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo>> comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> ranking
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="fieldWhitelist"> (optional)</param>
    /// <param name="attachmentTypeBlacklist"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo>> comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> fieldWhitelist,
        boost::optional<std::vector<utility::string_t>> attachmentTypeBlacklist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="fieldWhitelist"> (optional)</param>
    /// <param name="attachmentTypeBlacklist"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo>> comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> fieldWhitelist,
        boost::optional<std::vector<utility::string_t>> attachmentTypeBlacklist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="numUserLimit"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo>> comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> numUserLimit
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enableScheduledPostsSearch"> (optional)</param>
    /// <param name="numberOfMinutes"> (optional)</param>
    /// <param name="maxSearchLimit"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo>> comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enableScheduledPostsSearch,
        boost::optional<int32_t> numberOfMinutes,
        boost::optional<int32_t> maxSearchLimit
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="corsPeriodenabling"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo>> comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> corsPeriodenabling
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="priorityOrder"> (optional)</param>
    /// <param name="replyEmailPatterns"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo>> comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> priorityOrder,
        boost::optional<std::vector<utility::string_t>> replyEmailPatterns
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="contextPeriodpath"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo>> comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> contextPeriodpath
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="eventPeriodtopics"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo>> comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> eventPeriodtopics
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="priorityOrder"> (optional)</param>
    /// <param name="replyEmailPatterns"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo>> comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> priorityOrder,
        boost::optional<std::vector<utility::string_t>> replyEmailPatterns
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="patternPeriodtime"> (optional)</param>
    /// <param name="patternPeriodnewline"> (optional)</param>
    /// <param name="patternPerioddayOfMonth"> (optional)</param>
    /// <param name="patternPeriodmonth"> (optional)</param>
    /// <param name="patternPeriodyear"> (optional)</param>
    /// <param name="patternPerioddate"> (optional)</param>
    /// <param name="patternPerioddateTime"> (optional)</param>
    /// <param name="patternPeriodemail"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo>> comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> patternPeriodtime,
        boost::optional<utility::string_t> patternPeriodnewline,
        boost::optional<utility::string_t> patternPerioddayOfMonth,
        boost::optional<utility::string_t> patternPeriodmonth,
        boost::optional<utility::string_t> patternPeriodyear,
        boost::optional<utility::string_t> patternPerioddate,
        boost::optional<utility::string_t> patternPerioddateTime,
        boost::optional<utility::string_t> patternPeriodemail
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="emailPeriodname"> (optional)</param>
    /// <param name="emailPeriodcreatePostFromReply"> (optional)</param>
    /// <param name="emailPeriodaddCommentIdTo"> (optional)</param>
    /// <param name="emailPeriodsubjectMaximumLength"> (optional)</param>
    /// <param name="emailPeriodreplyToAddress"> (optional)</param>
    /// <param name="emailPeriodreplyToDelimiter"> (optional)</param>
    /// <param name="emailPeriodtrackerIdPrefixInSubject"> (optional)</param>
    /// <param name="emailPeriodtrackerIdPrefixInBody"> (optional)</param>
    /// <param name="emailPeriodasHTML"> (optional)</param>
    /// <param name="emailPerioddefaultUserName"> (optional)</param>
    /// <param name="emailPeriodtemplatesPeriodrootPath"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo>> comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> emailPeriodname,
        boost::optional<bool> emailPeriodcreatePostFromReply,
        boost::optional<utility::string_t> emailPeriodaddCommentIdTo,
        boost::optional<int32_t> emailPeriodsubjectMaximumLength,
        boost::optional<utility::string_t> emailPeriodreplyToAddress,
        boost::optional<utility::string_t> emailPeriodreplyToDelimiter,
        boost::optional<utility::string_t> emailPeriodtrackerIdPrefixInSubject,
        boost::optional<utility::string_t> emailPeriodtrackerIdPrefixInBody,
        boost::optional<bool> emailPeriodasHTML,
        boost::optional<utility::string_t> emailPerioddefaultUserName,
        boost::optional<utility::string_t> emailPeriodtemplatesPeriodrootPath
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="connectProtocol"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo>> comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> connectProtocol
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="priorityOrder"> (optional)</param>
    /// <param name="replyEmailPatterns"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo>> comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> priorityOrder,
        boost::optional<std::vector<utility::string_t>> replyEmailPatterns
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="priorityOrder"> (optional)</param>
    /// <param name="replyEmailPatterns"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo>> comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> priorityOrder,
        boost::optional<std::vector<utility::string_t>> replyEmailPatterns
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="priorityOrder"> (optional)</param>
    /// <param name="replyEmailPatterns"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo>> comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> priorityOrder,
        boost::optional<std::vector<utility::string_t>> replyEmailPatterns
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="priorityOrder"> (optional)</param>
    /// <param name="replyEmailPatterns"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo>> comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> priorityOrder,
        boost::optional<std::vector<utility::string_t>> replyEmailPatterns
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="replyEmailPatterns"> (optional)</param>
    /// <param name="priorityOrder"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo>> comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> replyEmailPatterns,
        boost::optional<int32_t> priorityOrder
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="priorityOrder"> (optional)</param>
    /// <param name="replyEmailPatterns"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo>> comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> priorityOrder,
        boost::optional<std::vector<utility::string_t>> replyEmailPatterns
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="numberOfDays"> (optional)</param>
    /// <param name="ageOfFile"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo>> comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> numberOfDays,
        boost::optional<int32_t> ageOfFile
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="eventPeriodtopics"> (optional)</param>
    /// <param name="eventPeriodfilter"> (optional)</param>
    /// <param name="verbs"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo>> comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> eventPeriodtopics,
        boost::optional<utility::string_t> eventPeriodfilter,
        boost::optional<std::vector<utility::string_t>> verbs
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enable"> (optional)</param>
    /// <param name="uGCLimit"> (optional)</param>
    /// <param name="ugcLimitDuration"> (optional)</param>
    /// <param name="domains"> (optional)</param>
    /// <param name="toList"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo>> comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enable,
        boost::optional<int32_t> uGCLimit,
        boost::optional<int32_t> ugcLimitDuration,
        boost::optional<std::vector<utility::string_t>> domains,
        boost::optional<std::vector<utility::string_t>> toList
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodid"> (optional)</param>
    /// <param name="oauthPeriodcloudPeriodconfigPeriodroot"> (optional)</param>
    /// <param name="providerPeriodconfigPeriodroot"> (optional)</param>
    /// <param name="providerPeriodconfigPeriodcreatePeriodtagsPeriodenabled"> (optional)</param>
    /// <param name="providerPeriodconfigPerioduserPeriodfolder"> (optional)</param>
    /// <param name="providerPeriodconfigPeriodfacebookPeriodfetchPeriodfields"> (optional)</param>
    /// <param name="providerPeriodconfigPeriodfacebookPeriodfields"> (optional)</param>
    /// <param name="providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo>> comAdobeCqSocialConnectOauthImplFacebookProviderImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodid,
        boost::optional<utility::string_t> oauthPeriodcloudPeriodconfigPeriodroot,
        boost::optional<utility::string_t> providerPeriodconfigPeriodroot,
        boost::optional<bool> providerPeriodconfigPeriodcreatePeriodtagsPeriodenabled,
        boost::optional<utility::string_t> providerPeriodconfigPerioduserPeriodfolder,
        boost::optional<bool> providerPeriodconfigPeriodfacebookPeriodfetchPeriodfields,
        boost::optional<std::vector<utility::string_t>> providerPeriodconfigPeriodfacebookPeriodfields,
        boost::optional<bool> providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="path"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo>> comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> path,
        boost::optional<int32_t> servicePeriodranking
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="facebook"> (optional)</param>
    /// <param name="twitter"> (optional)</param>
    /// <param name="providerPeriodconfigPerioduserPeriodfolder"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo>> comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> facebook,
        boost::optional<std::vector<utility::string_t>> twitter,
        boost::optional<utility::string_t> providerPeriodconfigPerioduserPeriodfolder
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodid"> (optional)</param>
    /// <param name="oauthPeriodcloudPeriodconfigPeriodroot"> (optional)</param>
    /// <param name="providerPeriodconfigPeriodroot"> (optional)</param>
    /// <param name="providerPeriodconfigPerioduserPeriodfolder"> (optional)</param>
    /// <param name="providerPeriodconfigPeriodtwitterPeriodenablePeriodparams"> (optional)</param>
    /// <param name="providerPeriodconfigPeriodtwitterPeriodparams"> (optional)</param>
    /// <param name="providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo>> comAdobeCqSocialConnectOauthImplTwitterProviderImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodid,
        boost::optional<utility::string_t> oauthPeriodcloudPeriodconfigPeriodroot,
        boost::optional<utility::string_t> providerPeriodconfigPeriodroot,
        boost::optional<utility::string_t> providerPeriodconfigPerioduserPeriodfolder,
        boost::optional<bool> providerPeriodconfigPeriodtwitterPeriodenablePeriodparams,
        boost::optional<std::vector<utility::string_t>> providerPeriodconfigPeriodtwitterPeriodparams,
        boost::optional<bool> providerPeriodconfigPeriodrefreshPerioduserdataPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodenabled"> (optional)</param>
    /// <param name="cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodwaitTimeSeconds"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo>> comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodenabled,
        boost::optional<int32_t> cqPeriodsocialPeriodcontentPeriodfragmentsPeriodservicesPeriodwaitTimeSeconds
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="versionPeriodid"> (optional)</param>
    /// <param name="cachePeriodon"> (optional)</param>
    /// <param name="concurrencyPeriodlevel"> (optional)</param>
    /// <param name="cachePeriodstartPeriodsize"> (optional)</param>
    /// <param name="cachePeriodttl"> (optional)</param>
    /// <param name="cachePeriodsize"> (optional)</param>
    /// <param name="timePeriodlimit"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo>> comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> versionPeriodid,
        boost::optional<bool> cachePeriodon,
        boost::optional<int32_t> concurrencyPeriodlevel,
        boost::optional<int32_t> cachePeriodstartPeriodsize,
        boost::optional<int32_t> cachePeriodttl,
        boost::optional<int32_t> cachePeriodsize,
        boost::optional<int32_t> timePeriodlimit
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="solrPeriodzkPeriodtimeout"> (optional)</param>
    /// <param name="solrPeriodcommit"> (optional)</param>
    /// <param name="cachePeriodon"> (optional)</param>
    /// <param name="concurrencyPeriodlevel"> (optional)</param>
    /// <param name="cachePeriodstartPeriodsize"> (optional)</param>
    /// <param name="cachePeriodttl"> (optional)</param>
    /// <param name="cachePeriodsize"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo>> comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> solrPeriodzkPeriodtimeout,
        boost::optional<utility::string_t> solrPeriodcommit,
        boost::optional<bool> cachePeriodon,
        boost::optional<int32_t> concurrencyPeriodlevel,
        boost::optional<int32_t> cachePeriodstartPeriodsize,
        boost::optional<int32_t> cachePeriodttl,
        boost::optional<int32_t> cachePeriodsize
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="solrPeriodzkPeriodtimeout"> (optional)</param>
    /// <param name="solrPeriodcommit"> (optional)</param>
    /// <param name="cachePeriodon"> (optional)</param>
    /// <param name="concurrencyPeriodlevel"> (optional)</param>
    /// <param name="cachePeriodstartPeriodsize"> (optional)</param>
    /// <param name="cachePeriodttl"> (optional)</param>
    /// <param name="cachePeriodsize"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo>> comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> solrPeriodzkPeriodtimeout,
        boost::optional<utility::string_t> solrPeriodcommit,
        boost::optional<bool> cachePeriodon,
        boost::optional<int32_t> concurrencyPeriodlevel,
        boost::optional<int32_t> cachePeriodstartPeriodsize,
        boost::optional<int32_t> cachePeriodttl,
        boost::optional<int32_t> cachePeriodsize
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="isMemberCheck"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo>> comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> isMemberCheck
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="isMemberCheck"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo>> comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> isMemberCheck
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="fieldWhitelist"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo>> comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> fieldWhitelist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="fieldWhitelist"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo>> comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> fieldWhitelist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo>> comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="slingPeriodservletPeriodselectors"> (optional)</param>
    /// <param name="slingPeriodservletPeriodextensions"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo>> comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> slingPeriodservletPeriodselectors,
        boost::optional<utility::string_t> slingPeriodservletPeriodextensions
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="fieldWhitelist"> (optional)</param>
    /// <param name="attachmentTypeBlacklist"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo>> comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> fieldWhitelist,
        boost::optional<std::vector<utility::string_t>> attachmentTypeBlacklist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="fieldWhitelist"> (optional)</param>
    /// <param name="attachmentTypeBlacklist"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo>> comAdobeCqSocialForumClientEndpointsImplForumOperationsService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> fieldWhitelist,
        boost::optional<std::vector<utility::string_t>> attachmentTypeBlacklist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="extensionPeriodorder"> (optional)</param>
    /// <param name="flushPeriodforumontopic"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo>> comAdobeCqSocialForumDispatcherImplFlushOperations(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> extensionPeriodorder,
        boost::optional<bool> flushPeriodforumontopic
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="groupPeriodlistingPeriodpaginationPeriodenable"> (optional)</param>
    /// <param name="groupPeriodlistingPeriodlazyloadingPeriodenable"> (optional)</param>
    /// <param name="pagePeriodsize"> (optional)</param>
    /// <param name="priority"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo>> comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> groupPeriodlistingPeriodpaginationPeriodenable,
        boost::optional<bool> groupPeriodlistingPeriodlazyloadingPeriodenable,
        boost::optional<int32_t> pagePeriodsize,
        boost::optional<int32_t> priority
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="maxWaitTime"> (optional)</param>
    /// <param name="minWaitBetweenRetries"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialGroupImplGroupServiceImplInfo>> comAdobeCqSocialGroupImplGroupServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> maxWaitTime,
        boost::optional<int32_t> minWaitBetweenRetries
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="parameterPeriodguavaPeriodcachePeriodenabled"> (optional)</param>
    /// <param name="parameterPeriodguavaPeriodcachePeriodparams"> (optional)</param>
    /// <param name="parameterPeriodguavaPeriodcachePeriodreload"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo>> comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> parameterPeriodguavaPeriodcachePeriodenabled,
        boost::optional<utility::string_t> parameterPeriodguavaPeriodcachePeriodparams,
        boost::optional<bool> parameterPeriodguavaPeriodcachePeriodreload,
        boost::optional<int32_t> servicePeriodranking
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="fieldWhitelist"> (optional)</param>
    /// <param name="attachmentTypeBlacklist"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo>> comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> fieldWhitelist,
        boost::optional<std::vector<utility::string_t>> attachmentTypeBlacklist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="fieldWhitelist"> (optional)</param>
    /// <param name="attachmentTypeBlacklist"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo>> comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> fieldWhitelist,
        boost::optional<std::vector<utility::string_t>> attachmentTypeBlacklist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="fieldWhitelist"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo>> comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> fieldWhitelist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="fieldWhitelist"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo>> comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> fieldWhitelist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="everyoneLimit"> (optional)</param>
    /// <param name="priority"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo>> comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> everyoneLimit,
        boost::optional<int32_t> priority
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="messagePeriodproperties"> (optional)</param>
    /// <param name="messageBoxSizeLimit"> (optional)</param>
    /// <param name="messageCountLimit"> (optional)</param>
    /// <param name="notifyFailure"> (optional)</param>
    /// <param name="failureMessageFrom"> (optional)</param>
    /// <param name="failureTemplatePath"> (optional)</param>
    /// <param name="maxRetries"> (optional)</param>
    /// <param name="minWaitBetweenRetries"> (optional)</param>
    /// <param name="countUpdatePoolSize"> (optional)</param>
    /// <param name="inboxPeriodpath"> (optional)</param>
    /// <param name="sentitemsPeriodpath"> (optional)</param>
    /// <param name="supportAttachments"> (optional)</param>
    /// <param name="supportGroupMessaging"> (optional)</param>
    /// <param name="maxTotalRecipients"> (optional)</param>
    /// <param name="batchSize"> (optional)</param>
    /// <param name="maxTotalAttachmentSize"> (optional)</param>
    /// <param name="attachmentTypeBlacklist"> (optional)</param>
    /// <param name="allowedAttachmentTypes"> (optional)</param>
    /// <param name="serviceSelector"> (optional)</param>
    /// <param name="fieldWhitelist"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo>> comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> messagePeriodproperties,
        boost::optional<int32_t> messageBoxSizeLimit,
        boost::optional<int32_t> messageCountLimit,
        boost::optional<bool> notifyFailure,
        boost::optional<utility::string_t> failureMessageFrom,
        boost::optional<utility::string_t> failureTemplatePath,
        boost::optional<int32_t> maxRetries,
        boost::optional<int32_t> minWaitBetweenRetries,
        boost::optional<int32_t> countUpdatePoolSize,
        boost::optional<utility::string_t> inboxPeriodpath,
        boost::optional<utility::string_t> sentitemsPeriodpath,
        boost::optional<bool> supportAttachments,
        boost::optional<bool> supportGroupMessaging,
        boost::optional<int32_t> maxTotalRecipients,
        boost::optional<int32_t> batchSize,
        boost::optional<int32_t> maxTotalAttachmentSize,
        boost::optional<std::vector<utility::string_t>> attachmentTypeBlacklist,
        boost::optional<std::vector<utility::string_t>> allowedAttachmentTypes,
        boost::optional<utility::string_t> serviceSelector,
        boost::optional<std::vector<utility::string_t>> fieldWhitelist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="resourceTypePeriodfilters"> (optional)</param>
    /// <param name="priority"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo>> comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> resourceTypePeriodfilters,
        boost::optional<int32_t> priority
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="priority"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo>> comAdobeCqSocialModerationDashboardApiModerationDashboardSocial(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> priority
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="priority"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo>> comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> priority
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="resourceTypePeriodfilters"> (optional)</param>
    /// <param name="priority"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo>> comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> resourceTypePeriodfilters,
        boost::optional<int32_t> priority
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="eventPeriodtopics"> (optional)</param>
    /// <param name="eventPeriodfilter"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialNotificationsImplMentionsRouterInfo>> comAdobeCqSocialNotificationsImplMentionsRouter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> eventPeriodtopics,
        boost::optional<utility::string_t> eventPeriodfilter
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="maxPeriodunreadPeriodnotificationPeriodcount"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo>> comAdobeCqSocialNotificationsImplNotificationManagerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> maxPeriodunreadPeriodnotificationPeriodcount
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="eventPeriodtopics"> (optional)</param>
    /// <param name="eventPeriodfilter"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialNotificationsImplNotificationsRouterInfo>> comAdobeCqSocialNotificationsImplNotificationsRouter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> eventPeriodtopics,
        boost::optional<utility::string_t> eventPeriodfilter
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="fieldWhitelist"> (optional)</param>
    /// <param name="attachmentTypeBlacklist"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo>> comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> fieldWhitelist,
        boost::optional<std::vector<utility::string_t>> attachmentTypeBlacklist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodinterval"> (optional)</param>
    /// <param name="cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodpageSize"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo>> comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodinterval,
        boost::optional<int32_t> cqPeriodsocialPeriodreportingPeriodanalyticsPeriodpollingPeriodimporterPeriodpageSize
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="reportPeriodfetchPerioddelay"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo>> comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> reportPeriodfetchPerioddelay
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodsocialPeriodconsolePeriodanalyticsPeriodsitesPeriodmapping"> (optional)</param>
    /// <param name="priority"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo>> comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPeriodsocialPeriodconsolePeriodanalyticsPeriodsitesPeriodmapping,
        boost::optional<int32_t> priority
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="fieldWhitelist"> (optional)</param>
    /// <param name="attachmentTypeBlacklist"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo>> comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> fieldWhitelist,
        boost::optional<std::vector<utility::string_t>> attachmentTypeBlacklist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="slingPeriodservletPeriodselectors"> (optional)</param>
    /// <param name="slingPeriodservletPeriodextensions"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo>> comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> slingPeriodservletPeriodselectors,
        boost::optional<utility::string_t> slingPeriodservletPeriodextensions
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="slingPeriodservletPeriodselectors"> (optional)</param>
    /// <param name="slingPeriodservletPeriodextensions"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo>> comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> slingPeriodservletPeriodselectors,
        boost::optional<utility::string_t> slingPeriodservletPeriodextensions
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="eventPeriodtopics"> (optional)</param>
    /// <param name="eventPeriodfilter"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialScoringImplScoringEventListenerInfo>> comAdobeCqSocialScoringImplScoringEventListener(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> eventPeriodtopics,
        boost::optional<utility::string_t> eventPeriodfilter
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enableFallback"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo>> comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enableFallback
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="fieldWhitelist"> (optional)</param>
    /// <param name="sitePathFilters"> (optional)</param>
    /// <param name="sitePackageGroup"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo>> comAdobeCqSocialSiteEndpointsImplSiteOperationService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> fieldWhitelist,
        boost::optional<std::vector<utility::string_t>> sitePathFilters,
        boost::optional<utility::string_t> sitePackageGroup
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodsocialPeriodconsolePeriodanalyticsPeriodcomponents"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo>> comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPeriodsocialPeriodconsolePeriodanalyticsPeriodcomponents
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="componentsUsingTags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo>> comAdobeCqSocialSiteImplSiteConfiguratorImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> componentsUsingTags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="srpPeriodtype"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialSrpImplSocialSolrConnectorInfo>> comAdobeCqSocialSrpImplSocialSolrConnector(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> srpPeriodtype
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    /// <param name="agentName"> (optional)</param>
    /// <param name="diffPath"> (optional)</param>
    /// <param name="propertyNames"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialSyncImplDiffChangesObserverInfo>> comAdobeCqSocialSyncImplDiffChangesObserver(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enabled,
        boost::optional<utility::string_t> agentName,
        boost::optional<utility::string_t> diffPath,
        boost::optional<utility::string_t> propertyNames
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="nodetypes"> (optional)</param>
    /// <param name="ignorableprops"> (optional)</param>
    /// <param name="ignorablenodes"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    /// <param name="distfolders"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo>> comAdobeCqSocialSyncImplGroupSyncListenerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> nodetypes,
        boost::optional<std::vector<utility::string_t>> ignorableprops,
        boost::optional<utility::string_t> ignorablenodes,
        boost::optional<bool> enabled,
        boost::optional<utility::string_t> distfolders
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="activeRunModes"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo>> comAdobeCqSocialSyncImplPublisherSyncServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> activeRunModes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="nodetypes"> (optional)</param>
    /// <param name="ignorableprops"> (optional)</param>
    /// <param name="ignorablenodes"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    /// <param name="distfolders"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialSyncImplUserSyncListenerImplInfo>> comAdobeCqSocialSyncImplUserSyncListenerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> nodetypes,
        boost::optional<std::vector<utility::string_t>> ignorableprops,
        boost::optional<std::vector<utility::string_t>> ignorablenodes,
        boost::optional<bool> enabled,
        boost::optional<std::vector<utility::string_t>> distfolders
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="translatePeriodlanguage"> (optional)</param>
    /// <param name="translatePerioddisplay"> (optional)</param>
    /// <param name="translatePeriodattribution"> (optional)</param>
    /// <param name="translatePeriodcaching"> (optional)</param>
    /// <param name="translatePeriodsmartPeriodrendering"> (optional)</param>
    /// <param name="translatePeriodcachingPeriodduration"> (optional)</param>
    /// <param name="translatePeriodsessionPeriodsavePeriodinterval"> (optional)</param>
    /// <param name="translatePeriodsessionPeriodsavePeriodbatchLimit"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo>> comAdobeCqSocialTranslationImplTranslationServiceConfigManager(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> translatePeriodlanguage,
        boost::optional<utility::string_t> translatePerioddisplay,
        boost::optional<bool> translatePeriodattribution,
        boost::optional<utility::string_t> translatePeriodcaching,
        boost::optional<utility::string_t> translatePeriodsmartPeriodrendering,
        boost::optional<utility::string_t> translatePeriodcachingPeriodduration,
        boost::optional<utility::string_t> translatePeriodsessionPeriodsavePeriodinterval,
        boost::optional<utility::string_t> translatePeriodsessionPeriodsavePeriodbatchLimit
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="eventPeriodtopics"> (optional)</param>
    /// <param name="eventPeriodfilter"> (optional)</param>
    /// <param name="translatePeriodlistenerPeriodtype"> (optional)</param>
    /// <param name="translatePeriodpropertyPeriodlist"> (optional)</param>
    /// <param name="poolSize"> (optional)</param>
    /// <param name="maxPoolSize"> (optional)</param>
    /// <param name="queueSize"> (optional)</param>
    /// <param name="keepAliveTime"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo>> comAdobeCqSocialTranslationImplUGCLanguageDetector(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> eventPeriodtopics,
        boost::optional<utility::string_t> eventPeriodfilter,
        boost::optional<std::vector<utility::string_t>> translatePeriodlistenerPeriodtype,
        boost::optional<std::vector<utility::string_t>> translatePeriodpropertyPeriodlist,
        boost::optional<int32_t> poolSize,
        boost::optional<int32_t> maxPoolSize,
        boost::optional<int32_t> queueSize,
        boost::optional<int32_t> keepAliveTime
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="threadPoolSize"> (optional)</param>
    /// <param name="delayTime"> (optional)</param>
    /// <param name="workerSleepTime"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo>> comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> threadPoolSize,
        boost::optional<int32_t> delayTime,
        boost::optional<int32_t> workerSleepTime
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="poolSize"> (optional)</param>
    /// <param name="maxPoolSize"> (optional)</param>
    /// <param name="queueSize"> (optional)</param>
    /// <param name="keepAliveTime"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo>> comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> poolSize,
        boost::optional<int32_t> maxPoolSize,
        boost::optional<int32_t> queueSize,
        boost::optional<int32_t> keepAliveTime
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="isPrimaryPublisher"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo>> comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> isPrimaryPublisher
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="legacyCloudUGCPathMapping"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo>> comAdobeCqSocialUgcbaseImplSocialUtilsImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> legacyCloudUGCPathMapping
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="automoderationPeriodsequence"> (optional)</param>
    /// <param name="automoderationPeriodonfailurestop"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo>> comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> automoderationPeriodsequence,
        boost::optional<bool> automoderationPeriodonfailurestop
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="watchwordsPeriodpositive"> (optional)</param>
    /// <param name="watchwordsPeriodnegative"> (optional)</param>
    /// <param name="watchwordsPeriodpath"> (optional)</param>
    /// <param name="sentimentPeriodpath"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo>> comAdobeCqSocialUgcbaseModerationImplSentimentProcess(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> watchwordsPeriodpositive,
        boost::optional<std::vector<utility::string_t>> watchwordsPeriodnegative,
        boost::optional<utility::string_t> watchwordsPeriodpath,
        boost::optional<utility::string_t> sentimentPeriodpath
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="defaultPeriodattachmentPeriodtypePeriodblacklist"> (optional)</param>
    /// <param name="baselinePeriodattachmentPeriodtypePeriodblacklist"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo>> comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> defaultPeriodattachmentPeriodtypePeriodblacklist,
        boost::optional<std::vector<utility::string_t>> baselinePeriodattachmentPeriodtypePeriodblacklist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="parameterPeriodwhitelist"> (optional)</param>
    /// <param name="parameterPeriodwhitelistPeriodprefixes"> (optional)</param>
    /// <param name="binaryPeriodparameterPeriodwhitelist"> (optional)</param>
    /// <param name="modifierPeriodwhitelist"> (optional)</param>
    /// <param name="operationPeriodwhitelist"> (optional)</param>
    /// <param name="operationPeriodwhitelistPeriodprefixes"> (optional)</param>
    /// <param name="typehintPeriodwhitelist"> (optional)</param>
    /// <param name="resourcetypePeriodwhitelist"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo>> comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> parameterPeriodwhitelist,
        boost::optional<std::vector<utility::string_t>> parameterPeriodwhitelistPeriodprefixes,
        boost::optional<std::vector<utility::string_t>> binaryPeriodparameterPeriodwhitelist,
        boost::optional<std::vector<utility::string_t>> modifierPeriodwhitelist,
        boost::optional<std::vector<utility::string_t>> operationPeriodwhitelist,
        boost::optional<std::vector<utility::string_t>> operationPeriodwhitelistPeriodprefixes,
        boost::optional<std::vector<utility::string_t>> typehintPeriodwhitelist,
        boost::optional<std::vector<utility::string_t>> resourcetypePeriodwhitelist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="slingPeriodservletPeriodextensions"> (optional)</param>
    /// <param name="slingPeriodservletPeriodpaths"> (optional)</param>
    /// <param name="slingPeriodservletPeriodmethods"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo>> comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> slingPeriodservletPeriodextensions,
        boost::optional<utility::string_t> slingPeriodservletPeriodpaths,
        boost::optional<utility::string_t> slingPeriodservletPeriodmethods
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enable"> (optional)</param>
    /// <param name="agentPeriodconfiguration"> (optional)</param>
    /// <param name="contextPeriodpath"> (optional)</param>
    /// <param name="disabledPeriodcipherPeriodsuites"> (optional)</param>
    /// <param name="enabledPeriodcipherPeriodsuites"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqSocialUserImplTransportHttpToPublisherInfo>> comAdobeCqSocialUserImplTransportHttpToPublisher(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enable,
        boost::optional<std::vector<utility::string_t>> agentPeriodconfiguration,
        boost::optional<utility::string_t> contextPeriodpath,
        boost::optional<std::vector<utility::string_t>> disabledPeriodcipherPeriodsuites,
        boost::optional<std::vector<utility::string_t>> enabledPeriodcipherPeriodsuites
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="resourcePeriodtypes"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo>> comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> resourcePeriodtypes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="deletePeriodpathPeriodregexps"> (optional)</param>
    /// <param name="deletePeriodsql2Periodquery"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo>> comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> deletePeriodpathPeriodregexps,
        boost::optional<utility::string_t> deletePeriodsql2Periodquery
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="deletePeriodnamePeriodregexps"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo>> comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> deletePeriodnamePeriodregexps
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="threshold"> (optional)</param>
    /// <param name="jobTopicName"> (optional)</param>
    /// <param name="emailEnabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo>> comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> threshold,
        boost::optional<utility::string_t> jobTopicName,
        boost::optional<bool> emailEnabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="schedulerPeriodexpression"> (optional)</param>
    /// <param name="jobPeriodpurgePeriodthreshold"> (optional)</param>
    /// <param name="jobPeriodpurgePeriodmaxPeriodjobs"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo>> comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> schedulerPeriodexpression,
        boost::optional<int32_t> jobPeriodpurgePeriodthreshold,
        boost::optional<int32_t> jobPeriodpurgePeriodmaxPeriodjobs
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="threshold"> (optional)</param>
    /// <param name="jobTopicName"> (optional)</param>
    /// <param name="emailEnabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo>> comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> threshold,
        boost::optional<utility::string_t> jobTopicName,
        boost::optional<bool> emailEnabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="threshold"> (optional)</param>
    /// <param name="jobTopicName"> (optional)</param>
    /// <param name="emailEnabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo>> comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> threshold,
        boost::optional<utility::string_t> jobTopicName,
        boost::optional<bool> emailEnabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="eventPeriodfilter"> (optional)</param>
    /// <param name="launchesPeriodeventhandlerPeriodthreadpoolPeriodmaxsize"> (optional)</param>
    /// <param name="launchesPeriodeventhandlerPeriodthreadpoolPeriodpriority"> (optional)</param>
    /// <param name="launchesPeriodeventhandlerPeriodupdatelastmodification"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo>> comAdobeCqWcmLaunchesImplLaunchesEventHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> eventPeriodfilter,
        boost::optional<int32_t> launchesPeriodeventhandlerPeriodthreadpoolPeriodmaxsize,
        boost::optional<utility::string_t> launchesPeriodeventhandlerPeriodthreadpoolPeriodpriority,
        boost::optional<bool> launchesPeriodeventhandlerPeriodupdatelastmodification
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodqrcodePeriodservletPeriodwhitelist"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo>> comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodqrcodePeriodservletPeriodwhitelist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="size"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo>> comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> size
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="syncTranslationStatePeriodschedulingFormat"> (optional)</param>
    /// <param name="schedulingRepeatTranslationPeriodschedulingFormat"> (optional)</param>
    /// <param name="syncTranslationStatePeriodlockTimeoutInMinutes"> (optional)</param>
    /// <param name="exportPeriodformat"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo>> comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> syncTranslationStatePeriodschedulingFormat,
        boost::optional<utility::string_t> schedulingRepeatTranslationPeriodschedulingFormat,
        boost::optional<utility::string_t> syncTranslationStatePeriodlockTimeoutInMinutes,
        boost::optional<utility::string_t> exportPeriodformat
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="portalPeriodoutboxes"> (optional)</param>
    /// <param name="draftPerioddataPeriodservice"> (optional)</param>
    /// <param name="draftPeriodmetadataPeriodservice"> (optional)</param>
    /// <param name="submitPerioddataPeriodservice"> (optional)</param>
    /// <param name="submitPeriodmetadataPeriodservice"> (optional)</param>
    /// <param name="pendingSignPerioddataPeriodservice"> (optional)</param>
    /// <param name="pendingSignPeriodmetadataPeriodservice"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo>> comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> portalPeriodoutboxes,
        boost::optional<utility::string_t> draftPerioddataPeriodservice,
        boost::optional<utility::string_t> draftPeriodmetadataPeriodservice,
        boost::optional<utility::string_t> submitPerioddataPeriodservice,
        boost::optional<utility::string_t> submitPeriodmetadataPeriodservice,
        boost::optional<utility::string_t> pendingSignPerioddataPeriodservice,
        boost::optional<utility::string_t> pendingSignPeriodmetadataPeriodservice
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="formportalPeriodinterval"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo>> comAdobeFdFpConfigFormsPortalSchedulerService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> formportalPeriodinterval
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="alloweddataFileLocations"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeFormsCommonServiceImplDefaultDataProviderInfo>> comAdobeFormsCommonServiceImplDefaultDataProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> alloweddataFileLocations
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="tempStorageConfig"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo>> comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> tempStorageConfig
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="schedulerPeriodexpression"> (optional)</param>
    /// <param name="duration_for_Temporary_Storage"> (optional)</param>
    /// <param name="duration_for_Anonymous_Storage"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeFormsCommonServletTempCleanUpTaskInfo>> comAdobeFormsCommonServletTempCleanUpTask(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> schedulerPeriodexpression,
        boost::optional<utility::string_t> duration_for_Temporary_Storage,
        boost::optional<utility::string_t> duration_for_Anonymous_Storage
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="queryPeriodlimit"> (optional)</param>
    /// <param name="filePeriodtypePeriodextensionPeriodmap"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAcpPlatformPlatformServletInfo>> comAdobeGraniteAcpPlatformPlatformServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> queryPeriodlimit,
        boost::optional<std::vector<utility::string_t>> filePeriodtypePeriodextensionPeriodmap
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="aggregatePeriodrelationships"> (optional)</param>
    /// <param name="aggregatePerioddescendPeriodvirtual"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo>> comAdobeGraniteActivitystreamsImplActivityManagerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> aggregatePeriodrelationships,
        boost::optional<bool> aggregatePerioddescendPeriodvirtual
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="disabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo>> comAdobeGraniteAnalyzerBaseSystemStatusServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> disabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="disabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo>> comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> disabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodcdnPeriodcdnRewriter"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodcloudConfigPeriodcomponents"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodcloudConfigPeriodcore"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodcloudConfigPeriodui"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodeditor"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodcore"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodwcmPeriodcore"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPerioduiPeriodcommons"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodwcmPeriodstyle"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodcqActivitymapIntegration"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodcqContexthubCommons"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodcqDtm"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodcqHealthcheck"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodcqMultisiteTargeting"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodcqPreUpgradeCleanup"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodcqProductInfoProvider"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodcqRestSites"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodcqSecurityHc"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPerioddamPeriodcqDamSvgHandler"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPerioddamPeriodcqScene7Imaging"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPerioddtmReactorPeriodcore"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPerioddtmReactorPeriodui"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodexpJspelResolver"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodinboxPeriodcqInbox"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodjsonSchemaParser"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodmediaPeriodcqMediaPublishingDpsFpCore"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodmobilePeriodcqMobileCaas"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodmobilePeriodcqMobileIndexBuilder"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodmobilePeriodcqMobilePhonegapBuild"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodmyspell"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsamplePeriodwePeriodretailPeriodcore"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPerioddcc"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPeriodmqPeriodcore"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsocialPeriodcqSocialAsProvider"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingBasicImpl"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingImpl"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsocialPeriodcqSocialCalendarImpl"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsocialPeriodcqSocialContentFragmentsImpl"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsocialPeriodcqSocialEnablementImpl"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsocialPeriodcqSocialGraphImpl"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsocialPeriodcqSocialIdeationImpl"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsocialPeriodcqSocialJcrProvider"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMembersImpl"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMsProvider"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsChannelsWeb"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsImpl"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsocialPeriodcqSocialRdbProvider"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScfImpl"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringBasicImpl"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringImpl"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsocialPeriodcqSocialServiceusersImpl"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsocialPeriodcqSocialSrpImpl"> (optional)</param>
    /// <param name="comPeriodadobePeriodcqPeriodsocialPeriodcqSocialUgcbaseImpl"> (optional)</param>
    /// <param name="comPeriodadobePerioddamPeriodcqDamCfmImpl"> (optional)</param>
    /// <param name="comPeriodadobePeriodformsPeriodfoundationFormsFoundationBase"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodapicontroller"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodassetPeriodcore"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodauthPeriodsso"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodbundlesPeriodhcPeriodimpl"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodcompatRouter"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodconf"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodconfPerioduiPeriodcore"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodcors"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodcrxExplorer"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodcrxdeLite"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodcryptoPeriodconfig"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodcryptoPeriodextension"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodcryptoPeriodfile"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodcryptoPeriodjcr"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodcsrf"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePerioddistributionPeriodcore"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePerioddropwizardPeriodmetrics"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodfragsPeriodimpl"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodgibson"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodinfocollector"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodinstallerPeriodfactoryPeriodpackages"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodjettyPeriodssl"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodjobsPeriodasync"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodmaintenancePeriodoak"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodmonitoringPeriodcore"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodqueries"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodreplicationPeriodhcPeriodimpl"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodrepositoryPeriodchecker"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodrepositoryPeriodhcPeriodimpl"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodrestPeriodassets"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodsecurityPeriodui"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodstartup"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodtagsoup"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodtaskmanagementPeriodcore"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodtaskmanagementPeriodworkflow"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodcompilerPeriodless"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodprocessorPeriodgcc"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodwebconsolePeriodplugins"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodworkflowPeriodconsole"> (optional)</param>
    /// <param name="comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodlinux"> (optional)</param>
    /// <param name="comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodmacosx"> (optional)</param>
    /// <param name="comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodwin"> (optional)</param>
    /// <param name="comPerioddayPeriodcommonsPeriodosgiPeriodwrapperPeriodsimpleJndi"> (optional)</param>
    /// <param name="comPerioddayPeriodcqPeriodcqAuthhandler"> (optional)</param>
    /// <param name="comPerioddayPeriodcqPeriodcqCompatConfigupdate"> (optional)</param>
    /// <param name="comPerioddayPeriodcqPeriodcqLicensebranding"> (optional)</param>
    /// <param name="comPerioddayPeriodcqPeriodcqNotifcationImpl"> (optional)</param>
    /// <param name="comPerioddayPeriodcqPeriodcqReplicationAudit"> (optional)</param>
    /// <param name="comPerioddayPeriodcqPeriodcqSearchExt"> (optional)</param>
    /// <param name="comPerioddayPeriodcqPerioddamPeriodcqDamAnnotationPrint"> (optional)</param>
    /// <param name="comPerioddayPeriodcqPerioddamPeriodcqDamAssetUsage"> (optional)</param>
    /// <param name="comPerioddayPeriodcqPerioddamPeriodcqDamS7dam"> (optional)</param>
    /// <param name="comPerioddayPeriodcqPerioddamPeriodcqDamSimilaritysearch"> (optional)</param>
    /// <param name="comPerioddayPeriodcqPerioddamPerioddamWebdavSupport"> (optional)</param>
    /// <param name="comPerioddayPeriodcqPeriodpreUpgradeTasks"> (optional)</param>
    /// <param name="comPerioddayPeriodcqPeriodreplicationPeriodextensions"> (optional)</param>
    /// <param name="comPerioddayPeriodcqPeriodwcmPeriodcqMsmCore"> (optional)</param>
    /// <param name="comPerioddayPeriodcqPeriodwcmPeriodcqWcmTranslation"> (optional)</param>
    /// <param name="dayCommonsJrawio"> (optional)</param>
    /// <param name="orgPeriodapachePeriodariesPeriodjmxPeriodwhiteboard"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpPeriodsslfilter"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodorgPeriodapachePeriodfelixPeriodthreaddump"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodds"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodevent"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodmemoryusage"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodpackageadmin"> (optional)</param>
    /// <param name="orgPeriodapachePeriodjackrabbitPeriodoakAuthLdap"> (optional)</param>
    /// <param name="orgPeriodapachePeriodjackrabbitPeriodoakSegmentTar"> (optional)</param>
    /// <param name="orgPeriodapachePeriodjackrabbitPeriodoakSolrOsgi"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodbundleresourcePeriodimpl"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodfsclassloader"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodwebconsole"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPerioddatasource"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPerioddiscoveryPeriodbase"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPerioddiscoveryPeriodoak"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPerioddiscoveryPeriodsupport"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPerioddistributionPeriodapi"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPerioddistributionPeriodcore"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodextensionsPeriodwebconsolesecurityprovider"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodhcPeriodwebconsole"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodinstallerPeriodconsole"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodfile"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodjcr"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodjcrPerioddavex"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodjcrPeriodresourcesecurity"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodjmxPeriodprovider"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodlaunchpadPeriodinstaller"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodmodelsPeriodimpl"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodrepoinitPeriodparser"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodresourcePeriodinventory"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodresourceresolver"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodscriptingPeriodjavascript"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodscriptingPeriodjst"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodprovider"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodmodelsPeriodprovider"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodsecurity"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodservletsPeriodcompat"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodservletsPeriodget"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodstartupfilterPerioddisabler"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodtracer"> (optional)</param>
    /// <param name="wePeriodretailPeriodclientPeriodappPeriodcore"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo>> comAdobeGraniteApicontrollerFilterResolverHookFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodcdnPeriodcdnRewriter,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodcloudConfigPeriodcomponents,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodcloudConfigPeriodcore,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodcloudConfigPeriodui,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodeditor,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodcore,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodprojectsPeriodwcmPeriodcore,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPerioduiPeriodcommons,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodcomPeriodadobePeriodcqPeriodwcmPeriodstyle,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodcqActivitymapIntegration,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodcqContexthubCommons,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodcqDtm,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodcqHealthcheck,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodcqMultisiteTargeting,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodcqPreUpgradeCleanup,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodcqProductInfoProvider,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodcqRestSites,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodcqSecurityHc,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPerioddamPeriodcqDamSvgHandler,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPerioddamPeriodcqScene7Imaging,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPerioddtmReactorPeriodcore,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPerioddtmReactorPeriodui,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodexpJspelResolver,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodinboxPeriodcqInbox,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodjsonSchemaParser,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodmediaPeriodcqMediaPublishingDpsFpCore,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodmobilePeriodcqMobileCaas,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodmobilePeriodcqMobileIndexBuilder,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodmobilePeriodcqMobilePhonegapBuild,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodmyspell,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsamplePeriodwePeriodretailPeriodcore,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPerioddcc,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodscreensPeriodcomPeriodadobePeriodcqPeriodscreensPeriodmqPeriodcore,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsocialPeriodcqSocialAsProvider,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingBasicImpl,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsocialPeriodcqSocialBadgingImpl,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsocialPeriodcqSocialCalendarImpl,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsocialPeriodcqSocialContentFragmentsImpl,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsocialPeriodcqSocialEnablementImpl,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsocialPeriodcqSocialGraphImpl,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsocialPeriodcqSocialIdeationImpl,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsocialPeriodcqSocialJcrProvider,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMembersImpl,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsocialPeriodcqSocialMsProvider,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsChannelsWeb,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsocialPeriodcqSocialNotificationsImpl,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsocialPeriodcqSocialRdbProvider,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScfImpl,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringBasicImpl,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsocialPeriodcqSocialScoringImpl,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsocialPeriodcqSocialServiceusersImpl,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsocialPeriodcqSocialSrpImpl,
        boost::optional<utility::string_t> comPeriodadobePeriodcqPeriodsocialPeriodcqSocialUgcbaseImpl,
        boost::optional<utility::string_t> comPeriodadobePerioddamPeriodcqDamCfmImpl,
        boost::optional<utility::string_t> comPeriodadobePeriodformsPeriodfoundationFormsFoundationBase,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodapicontroller,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodassetPeriodcore,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodauthPeriodsso,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodbundlesPeriodhcPeriodimpl,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodcompatRouter,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodconf,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodconfPerioduiPeriodcore,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodcors,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodcrxExplorer,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodcrxdeLite,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodcryptoPeriodconfig,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodcryptoPeriodextension,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodcryptoPeriodfile,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodcryptoPeriodjcr,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodcsrf,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePerioddistributionPeriodcore,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePerioddropwizardPeriodmetrics,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodfragsPeriodimpl,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodgibson,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodinfocollector,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodinstallerPeriodfactoryPeriodpackages,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodjettyPeriodssl,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodjobsPeriodasync,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodmaintenancePeriodoak,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodmonitoringPeriodcore,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodqueries,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodreplicationPeriodhcPeriodimpl,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodrepositoryPeriodchecker,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodrepositoryPeriodhcPeriodimpl,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodrestPeriodassets,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodsecurityPeriodui,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodstartup,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodtagsoup,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodtaskmanagementPeriodcore,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodtaskmanagementPeriodworkflow,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodcompilerPeriodless,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePerioduiPeriodclientlibsPeriodprocessorPeriodgcc,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodwebconsolePeriodplugins,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodworkflowPeriodconsole,
        boost::optional<utility::string_t> comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodlinux,
        boost::optional<utility::string_t> comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodmacosx,
        boost::optional<utility::string_t> comPeriodadobePeriodxmpPeriodworkerPeriodfilesPeriodnativePeriodfragmentPeriodwin,
        boost::optional<utility::string_t> comPerioddayPeriodcommonsPeriodosgiPeriodwrapperPeriodsimpleJndi,
        boost::optional<utility::string_t> comPerioddayPeriodcqPeriodcqAuthhandler,
        boost::optional<utility::string_t> comPerioddayPeriodcqPeriodcqCompatConfigupdate,
        boost::optional<utility::string_t> comPerioddayPeriodcqPeriodcqLicensebranding,
        boost::optional<utility::string_t> comPerioddayPeriodcqPeriodcqNotifcationImpl,
        boost::optional<utility::string_t> comPerioddayPeriodcqPeriodcqReplicationAudit,
        boost::optional<utility::string_t> comPerioddayPeriodcqPeriodcqSearchExt,
        boost::optional<utility::string_t> comPerioddayPeriodcqPerioddamPeriodcqDamAnnotationPrint,
        boost::optional<utility::string_t> comPerioddayPeriodcqPerioddamPeriodcqDamAssetUsage,
        boost::optional<utility::string_t> comPerioddayPeriodcqPerioddamPeriodcqDamS7dam,
        boost::optional<utility::string_t> comPerioddayPeriodcqPerioddamPeriodcqDamSimilaritysearch,
        boost::optional<utility::string_t> comPerioddayPeriodcqPerioddamPerioddamWebdavSupport,
        boost::optional<utility::string_t> comPerioddayPeriodcqPeriodpreUpgradeTasks,
        boost::optional<utility::string_t> comPerioddayPeriodcqPeriodreplicationPeriodextensions,
        boost::optional<utility::string_t> comPerioddayPeriodcqPeriodwcmPeriodcqMsmCore,
        boost::optional<utility::string_t> comPerioddayPeriodcqPeriodwcmPeriodcqWcmTranslation,
        boost::optional<utility::string_t> dayCommonsJrawio,
        boost::optional<utility::string_t> orgPeriodapachePeriodariesPeriodjmxPeriodwhiteboard,
        boost::optional<utility::string_t> orgPeriodapachePeriodfelixPeriodhttpPeriodsslfilter,
        boost::optional<utility::string_t> orgPeriodapachePeriodfelixPeriodorgPeriodapachePeriodfelixPeriodthreaddump,
        boost::optional<utility::string_t> orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodds,
        boost::optional<utility::string_t> orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodevent,
        boost::optional<utility::string_t> orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodmemoryusage,
        boost::optional<utility::string_t> orgPeriodapachePeriodfelixPeriodwebconsolePeriodpluginsPeriodpackageadmin,
        boost::optional<utility::string_t> orgPeriodapachePeriodjackrabbitPeriodoakAuthLdap,
        boost::optional<utility::string_t> orgPeriodapachePeriodjackrabbitPeriodoakSegmentTar,
        boost::optional<utility::string_t> orgPeriodapachePeriodjackrabbitPeriodoakSolrOsgi,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodbundleresourcePeriodimpl,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodcommonsPeriodfsclassloader,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodwebconsole,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPerioddatasource,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPerioddiscoveryPeriodbase,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPerioddiscoveryPeriodoak,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPerioddiscoveryPeriodsupport,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPerioddistributionPeriodapi,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPerioddistributionPeriodcore,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodextensionsPeriodwebconsolesecurityprovider,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodhcPeriodwebconsole,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodinstallerPeriodconsole,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodfile,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodinstallerPeriodproviderPeriodjcr,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodjcrPerioddavex,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodjcrPeriodresourcesecurity,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodjmxPeriodprovider,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodlaunchpadPeriodinstaller,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodmodelsPeriodimpl,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodrepoinitPeriodparser,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodresourcePeriodinventory,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodresourceresolver,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodscriptingPeriodjavascript,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodscriptingPeriodjst,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodprovider,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodmodelsPeriodprovider,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodsecurity,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodservletsPeriodcompat,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodservletsPeriodget,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodstartupfilterPerioddisabler,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodtracer,
        boost::optional<utility::string_t> wePeriodretailPeriodclientPeriodappPeriodcore
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="path"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo>> comAdobeGraniteAuthCertImplClientCertAuthHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> path,
        boost::optional<int32_t> servicePeriodranking
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="configid"> (optional)</param>
    /// <param name="scope"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthImsInfo>> comAdobeGraniteAuthIms(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> configid,
        boost::optional<utility::string_t> scope
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodid"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo>> comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodid
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="authPeriodimsPeriodclientPeriodsecret"> (optional)</param>
    /// <param name="customizerPeriodtype"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo>> comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> authPeriodimsPeriodclientPeriodsecret,
        boost::optional<utility::string_t> customizerPeriodtype
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodid"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo>> comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodid
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodid"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodimsPeriodauthorizationPeriodurl"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodimsPeriodtokenPeriodurl"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodimsPeriodprofilePeriodurl"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodimsPeriodextendedPerioddetailsPeriodurls"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodimsPeriodvalidatePeriodtokenPeriodurl"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodimsPeriodsessionPeriodproperty"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodid"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodsecret"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodimsPeriodservicePeriodtoken"> (optional)</param>
    /// <param name="imsPeriodorgPeriodref"> (optional)</param>
    /// <param name="imsPeriodgroupPeriodmapping"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodimsPeriodonlyPeriodlicensePeriodgroup"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthImsImplIMSProviderImplInfo>> comAdobeGraniteAuthImsImplIMSProviderImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodid,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodimsPeriodauthorizationPeriodurl,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodimsPeriodtokenPeriodurl,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodimsPeriodprofilePeriodurl,
        boost::optional<std::vector<utility::string_t>> oauthPeriodproviderPeriodimsPeriodextendedPerioddetailsPeriodurls,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodimsPeriodvalidatePeriodtokenPeriodurl,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodimsPeriodsessionPeriodproperty,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodid,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodimsPeriodservicePeriodtokenPeriodclientPeriodsecret,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodimsPeriodservicePeriodtoken,
        boost::optional<utility::string_t> imsPeriodorgPeriodref,
        boost::optional<std::vector<utility::string_t>> imsPeriodgroupPeriodmapping,
        boost::optional<bool> oauthPeriodproviderPeriodimsPeriodonlyPeriodlicensePeriodgroup
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="oauthPeriodconfigmanagerPeriodimsPeriodconfigid"> (optional)</param>
    /// <param name="imsPeriodowningEntity"> (optional)</param>
    /// <param name="aemPeriodinstanceId"> (optional)</param>
    /// <param name="imsPeriodserviceCode"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo>> comAdobeGraniteAuthImsImplImsConfigProviderImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> oauthPeriodconfigmanagerPeriodimsPeriodconfigid,
        boost::optional<utility::string_t> imsPeriodowningEntity,
        boost::optional<utility::string_t> aemPeriodinstanceId,
        boost::optional<utility::string_t> imsPeriodserviceCode
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="authPeriodtokenPeriodproviderPeriodtitle"> (optional)</param>
    /// <param name="authPeriodtokenPeriodproviderPerioddefaultPeriodclaims"> (optional)</param>
    /// <param name="authPeriodtokenPeriodproviderPeriodendpoint"> (optional)</param>
    /// <param name="authPeriodaccessPeriodtokenPeriodrequest"> (optional)</param>
    /// <param name="authPeriodtokenPeriodproviderPeriodkeypairPeriodalias"> (optional)</param>
    /// <param name="authPeriodtokenPeriodproviderPeriodconnPeriodtimeout"> (optional)</param>
    /// <param name="authPeriodtokenPeriodproviderPeriodsoPeriodtimeout"> (optional)</param>
    /// <param name="authPeriodtokenPeriodproviderPeriodclientPeriodid"> (optional)</param>
    /// <param name="authPeriodtokenPeriodproviderPeriodscope"> (optional)</param>
    /// <param name="authPeriodtokenPeriodproviderPeriodreusePeriodaccessPeriodtoken"> (optional)</param>
    /// <param name="authPeriodtokenPeriodproviderPeriodrelaxedPeriodssl"> (optional)</param>
    /// <param name="tokenPeriodrequestPeriodcustomizerPeriodtype"> (optional)</param>
    /// <param name="authPeriodtokenPeriodvalidatorPeriodtype"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthOauthAccesstokenProviderInfo>> comAdobeGraniteAuthOauthAccesstokenProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> authPeriodtokenPeriodproviderPeriodtitle,
        boost::optional<std::vector<utility::string_t>> authPeriodtokenPeriodproviderPerioddefaultPeriodclaims,
        boost::optional<utility::string_t> authPeriodtokenPeriodproviderPeriodendpoint,
        boost::optional<utility::string_t> authPeriodaccessPeriodtokenPeriodrequest,
        boost::optional<utility::string_t> authPeriodtokenPeriodproviderPeriodkeypairPeriodalias,
        boost::optional<int32_t> authPeriodtokenPeriodproviderPeriodconnPeriodtimeout,
        boost::optional<int32_t> authPeriodtokenPeriodproviderPeriodsoPeriodtimeout,
        boost::optional<utility::string_t> authPeriodtokenPeriodproviderPeriodclientPeriodid,
        boost::optional<utility::string_t> authPeriodtokenPeriodproviderPeriodscope,
        boost::optional<bool> authPeriodtokenPeriodproviderPeriodreusePeriodaccessPeriodtoken,
        boost::optional<bool> authPeriodtokenPeriodproviderPeriodrelaxedPeriodssl,
        boost::optional<utility::string_t> tokenPeriodrequestPeriodcustomizerPeriodtype,
        boost::optional<utility::string_t> authPeriodtokenPeriodvalidatorPeriodtype
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="path"> (optional)</param>
    /// <param name="oauthPeriodclientIdsPeriodallowed"> (optional)</param>
    /// <param name="authPeriodbearerPeriodsyncPeriodims"> (optional)</param>
    /// <param name="authPeriodtokenRequestParameter"> (optional)</param>
    /// <param name="oauthPeriodbearerPeriodconfigid"> (optional)</param>
    /// <param name="oauthPeriodjwtPeriodsupport"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo>> comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> path,
        boost::optional<std::vector<utility::string_t>> oauthPeriodclientIdsPeriodallowed,
        boost::optional<bool> authPeriodbearerPeriodsyncPeriodims,
        boost::optional<utility::string_t> authPeriodtokenRequestParameter,
        boost::optional<utility::string_t> oauthPeriodbearerPeriodconfigid,
        boost::optional<bool> oauthPeriodjwtPeriodsupport
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="authPeriodtokenPeriodvalidatorPeriodtype"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo>> comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> authPeriodtokenPeriodvalidatorPeriodtype
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodid"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo>> comAdobeGraniteAuthOauthImplFacebookProviderImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodid
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodid"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodgithubPeriodauthorizationPeriodurl"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodgithubPeriodtokenPeriodurl"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodgithubPeriodprofilePeriodurl"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthOauthImplGithubProviderImplInfo>> comAdobeGraniteAuthOauthImplGithubProviderImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodid,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodgithubPeriodauthorizationPeriodurl,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodgithubPeriodtokenPeriodurl,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodgithubPeriodprofilePeriodurl
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodid"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodgranitePeriodauthorizationPeriodurl"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodgranitePeriodtokenPeriodurl"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodgranitePeriodprofilePeriodurl"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodgranitePeriodextendedPerioddetailsPeriodurls"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthOauthImplGraniteProviderInfo>> comAdobeGraniteAuthOauthImplGraniteProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodid,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodgranitePeriodauthorizationPeriodurl,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodgranitePeriodtokenPeriodurl,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodgranitePeriodprofilePeriodurl,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodgranitePeriodextendedPerioddetailsPeriodurls
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="oauthPeriodcookiePeriodloginPeriodtimeout"> (optional)</param>
    /// <param name="oauthPeriodcookiePeriodmaxPeriodage"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo>> comAdobeGraniteAuthOauthImplHelperProviderConfigManager(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> oauthPeriodcookiePeriodloginPeriodtimeout,
        boost::optional<utility::string_t> oauthPeriodcookiePeriodmaxPeriodage
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="oauthPeriodcookiePeriodloginPeriodtimeout"> (optional)</param>
    /// <param name="oauthPeriodcookiePeriodmaxPeriodage"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo>> comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> oauthPeriodcookiePeriodloginPeriodtimeout,
        boost::optional<utility::string_t> oauthPeriodcookiePeriodmaxPeriodage
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="path"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo>> comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> path
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="oauthPeriodproviderPeriodid"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo>> comAdobeGraniteAuthOauthImplTwitterProviderImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> oauthPeriodproviderPeriodid
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="oauthPeriodconfigPeriodid"> (optional)</param>
    /// <param name="oauthPeriodclientPeriodid"> (optional)</param>
    /// <param name="oauthPeriodclientPeriodsecret"> (optional)</param>
    /// <param name="oauthPeriodscope"> (optional)</param>
    /// <param name="oauthPeriodconfigPeriodproviderPeriodid"> (optional)</param>
    /// <param name="oauthPeriodcreatePeriodusers"> (optional)</param>
    /// <param name="oauthPerioduseridPeriodproperty"> (optional)</param>
    /// <param name="forcePeriodstrictPeriodusernamePeriodmatching"> (optional)</param>
    /// <param name="oauthPeriodencodePerioduserids"> (optional)</param>
    /// <param name="oauthPeriodhashPerioduserids"> (optional)</param>
    /// <param name="oauthPeriodcallBackUrl"> (optional)</param>
    /// <param name="oauthPeriodaccessPeriodtokenPeriodpersist"> (optional)</param>
    /// <param name="oauthPeriodaccessPeriodtokenPeriodpersistPeriodcookie"> (optional)</param>
    /// <param name="oauthPeriodcsrfPeriodstatePeriodprotection"> (optional)</param>
    /// <param name="oauthPeriodredirectPeriodrequestPeriodparams"> (optional)</param>
    /// <param name="oauthPeriodconfigPeriodsiblingsPeriodallow"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthOauthProviderInfo>> comAdobeGraniteAuthOauthProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> oauthPeriodconfigPeriodid,
        boost::optional<utility::string_t> oauthPeriodclientPeriodid,
        boost::optional<utility::string_t> oauthPeriodclientPeriodsecret,
        boost::optional<std::vector<utility::string_t>> oauthPeriodscope,
        boost::optional<utility::string_t> oauthPeriodconfigPeriodproviderPeriodid,
        boost::optional<bool> oauthPeriodcreatePeriodusers,
        boost::optional<utility::string_t> oauthPerioduseridPeriodproperty,
        boost::optional<bool> forcePeriodstrictPeriodusernamePeriodmatching,
        boost::optional<bool> oauthPeriodencodePerioduserids,
        boost::optional<bool> oauthPeriodhashPerioduserids,
        boost::optional<utility::string_t> oauthPeriodcallBackUrl,
        boost::optional<bool> oauthPeriodaccessPeriodtokenPeriodpersist,
        boost::optional<bool> oauthPeriodaccessPeriodtokenPeriodpersistPeriodcookie,
        boost::optional<bool> oauthPeriodcsrfPeriodstatePeriodprotection,
        boost::optional<bool> oauthPeriodredirectPeriodrequestPeriodparams,
        boost::optional<bool> oauthPeriodconfigPeriodsiblingsPeriodallow
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="supportedPaths"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo>> comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> supportedPaths
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="path"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="idpUrl"> (optional)</param>
    /// <param name="idpCertAlias"> (optional)</param>
    /// <param name="idpHttpRedirect"> (optional)</param>
    /// <param name="serviceProviderEntityId"> (optional)</param>
    /// <param name="assertionConsumerServiceURL"> (optional)</param>
    /// <param name="spPrivateKeyAlias"> (optional)</param>
    /// <param name="keyStorePassword"> (optional)</param>
    /// <param name="defaultRedirectUrl"> (optional)</param>
    /// <param name="userIDAttribute"> (optional)</param>
    /// <param name="useEncryption"> (optional)</param>
    /// <param name="createUser"> (optional)</param>
    /// <param name="userIntermediatePath"> (optional)</param>
    /// <param name="addGroupMemberships"> (optional)</param>
    /// <param name="groupMembershipAttribute"> (optional)</param>
    /// <param name="defaultGroups"> (optional)</param>
    /// <param name="nameIdFormat"> (optional)</param>
    /// <param name="synchronizeAttributes"> (optional)</param>
    /// <param name="handleLogout"> (optional)</param>
    /// <param name="logoutUrl"> (optional)</param>
    /// <param name="clockTolerance"> (optional)</param>
    /// <param name="digestMethod"> (optional)</param>
    /// <param name="signatureMethod"> (optional)</param>
    /// <param name="identitySyncType"> (optional)</param>
    /// <param name="idpIdentifier"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo>> comAdobeGraniteAuthSamlSamlAuthenticationHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> path,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> idpUrl,
        boost::optional<utility::string_t> idpCertAlias,
        boost::optional<bool> idpHttpRedirect,
        boost::optional<utility::string_t> serviceProviderEntityId,
        boost::optional<utility::string_t> assertionConsumerServiceURL,
        boost::optional<utility::string_t> spPrivateKeyAlias,
        boost::optional<utility::string_t> keyStorePassword,
        boost::optional<utility::string_t> defaultRedirectUrl,
        boost::optional<utility::string_t> userIDAttribute,
        boost::optional<bool> useEncryption,
        boost::optional<bool> createUser,
        boost::optional<utility::string_t> userIntermediatePath,
        boost::optional<bool> addGroupMemberships,
        boost::optional<utility::string_t> groupMembershipAttribute,
        boost::optional<std::vector<utility::string_t>> defaultGroups,
        boost::optional<utility::string_t> nameIdFormat,
        boost::optional<std::vector<utility::string_t>> synchronizeAttributes,
        boost::optional<bool> handleLogout,
        boost::optional<utility::string_t> logoutUrl,
        boost::optional<int32_t> clockTolerance,
        boost::optional<utility::string_t> digestMethod,
        boost::optional<utility::string_t> signatureMethod,
        boost::optional<utility::string_t> identitySyncType,
        boost::optional<utility::string_t> idpIdentifier
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="path"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="jaasPeriodcontrolFlag"> (optional)</param>
    /// <param name="jaasPeriodrealmName"> (optional)</param>
    /// <param name="jaasPeriodranking"> (optional)</param>
    /// <param name="headers"> (optional)</param>
    /// <param name="cookies"> (optional)</param>
    /// <param name="parameters"> (optional)</param>
    /// <param name="usermap"> (optional)</param>
    /// <param name="format"> (optional)</param>
    /// <param name="trustedCredentialsAttribute"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo>> comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> path,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> jaasPeriodcontrolFlag,
        boost::optional<utility::string_t> jaasPeriodrealmName,
        boost::optional<int32_t> jaasPeriodranking,
        boost::optional<std::vector<utility::string_t>> headers,
        boost::optional<std::vector<utility::string_t>> cookies,
        boost::optional<std::vector<utility::string_t>> parameters,
        boost::optional<std::vector<utility::string_t>> usermap,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> trustedCredentialsAttribute
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    /// <param name="minimumPeriodcodePeriodcachePeriodsize"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo>> comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags,
        boost::optional<int32_t> minimumPeriodcodePeriodcachePeriodsize
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo>> comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo>> comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    /// <param name="ignoredPeriodbundles"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo>> comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags,
        boost::optional<std::vector<utility::string_t>> ignoredPeriodbundles
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    /// <param name="maxPeriodqueuedPeriodjobs"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo>> comAdobeGraniteBundlesHcImplJobsHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags,
        boost::optional<int32_t> maxPeriodqueuedPeriodjobs
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo>> comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo>> comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo>> comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo>> comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo>> comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="replicatePeriodcommentPeriodresourceTypes"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo>> comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> replicatePeriodcommentPeriodresourceTypes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="compatgroups"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo>> comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> compatgroups,
        boost::optional<bool> enabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="id"> (optional)</param>
    /// <param name="compatPath"> (optional)</param>
    /// <param name="newPath"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteCompatrouterImplRoutingConfigInfo>> comAdobeGraniteCompatrouterImplRoutingConfig(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> compatPath,
        boost::optional<utility::string_t> newPath
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="group"> (optional)</param>
    /// <param name="ids"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo>> comAdobeGraniteCompatrouterImplSwitchMappingConfig(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> group,
        boost::optional<std::vector<utility::string_t>> ids
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    /// <param name="fallbackPaths"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo>> comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enabled,
        boost::optional<std::vector<utility::string_t>> fallbackPaths
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodcontexthubPeriodsilentMode"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodcontexthubPeriodshowUi"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteContexthubImplContextHubImplInfo>> comAdobeGraniteContexthubImplContextHubImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> comPeriodadobePeriodgranitePeriodcontexthubPeriodsilentMode,
        boost::optional<bool> comPeriodadobePeriodgranitePeriodcontexthubPeriodshowUi
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="alloworigin"> (optional)</param>
    /// <param name="alloworiginregexp"> (optional)</param>
    /// <param name="allowedpaths"> (optional)</param>
    /// <param name="exposedheaders"> (optional)</param>
    /// <param name="maxage"> (optional)</param>
    /// <param name="supportedheaders"> (optional)</param>
    /// <param name="supportedmethods"> (optional)</param>
    /// <param name="supportscredentials"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteCorsImplCORSPolicyImplInfo>> comAdobeGraniteCorsImplCORSPolicyImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> alloworigin,
        boost::optional<std::vector<utility::string_t>> alloworiginregexp,
        boost::optional<std::vector<utility::string_t>> allowedpaths,
        boost::optional<std::vector<utility::string_t>> exposedheaders,
        boost::optional<int32_t> maxage,
        boost::optional<std::vector<utility::string_t>> supportedheaders,
        boost::optional<std::vector<utility::string_t>> supportedmethods,
        boost::optional<bool> supportscredentials
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="filterPeriodmethods"> (optional)</param>
    /// <param name="filterPeriodenablePeriodsafePerioduserPeriodagents"> (optional)</param>
    /// <param name="filterPeriodsafePerioduserPeriodagents"> (optional)</param>
    /// <param name="filterPeriodexcludedPeriodpaths"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteCsrfImplCSRFFilterInfo>> comAdobeGraniteCsrfImplCSRFFilter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> filterPeriodmethods,
        boost::optional<bool> filterPeriodenablePeriodsafePerioduserPeriodagents,
        boost::optional<std::vector<utility::string_t>> filterPeriodsafePerioduserPeriodagents,
        boost::optional<std::vector<utility::string_t>> filterPeriodexcludedPeriodpaths
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="csrfPeriodtokenPeriodexpiresPeriodin"> (optional)</param>
    /// <param name="slingPeriodauthPeriodrequirements"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteCsrfImplCSRFServletInfo>> comAdobeGraniteCsrfImplCSRFServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> csrfPeriodtokenPeriodexpiresPeriodin,
        boost::optional<utility::string_t> slingPeriodauthPeriodrequirements
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="username"> (optional)</param>
    /// <param name="encryptedPassword"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo>> comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> username,
        boost::optional<utility::string_t> encryptedPassword
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    /// <param name="agentName"> (optional)</param>
    /// <param name="diffPath"> (optional)</param>
    /// <param name="observedPath"> (optional)</param>
    /// <param name="serviceName"> (optional)</param>
    /// <param name="propertyNames"> (optional)</param>
    /// <param name="distributionDelay"> (optional)</param>
    /// <param name="serviceUserPeriodtarget"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo>> comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enabled,
        boost::optional<utility::string_t> agentName,
        boost::optional<utility::string_t> diffPath,
        boost::optional<utility::string_t> observedPath,
        boost::optional<utility::string_t> serviceName,
        boost::optional<utility::string_t> propertyNames,
        boost::optional<int32_t> distributionDelay,
        boost::optional<utility::string_t> serviceUserPeriodtarget
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="diffPath"> (optional)</param>
    /// <param name="serviceName"> (optional)</param>
    /// <param name="serviceUserPeriodtarget"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo>> comAdobeGraniteDistributionCoreImplDiffDiffEventListener(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> diffPath,
        boost::optional<utility::string_t> serviceName,
        boost::optional<utility::string_t> serviceUserPeriodtarget
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="importerPeriodname"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo>> comAdobeGraniteDistributionCoreImplDistributionToReplicationEven(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> importerPeriodname
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="providerName"> (optional)</param>
    /// <param name="forwardPeriodrequests"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo>> comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> providerName,
        boost::optional<bool> forwardPeriodrequests
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="forwardPeriodrequests"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo>> comAdobeGraniteDistributionCoreImplReplicationDistributionTrans(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> forwardPeriodrequests
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="serviceName"> (optional)</param>
    /// <param name="userId"> (optional)</param>
    /// <param name="accessTokenProviderPeriodtarget"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo>> comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> serviceName,
        boost::optional<utility::string_t> userId,
        boost::optional<utility::string_t> accessTokenProviderPeriodtarget
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="featurePeriodname"> (optional)</param>
    /// <param name="featurePerioddescription"> (optional)</param>
    /// <param name="httpPeriodheaderPeriodname"> (optional)</param>
    /// <param name="httpPeriodheaderPeriodvaluepattern"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo>> comAdobeGraniteFragsImplCheckHttpHeaderFlag(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> featurePeriodname,
        boost::optional<utility::string_t> featurePerioddescription,
        boost::optional<utility::string_t> httpPeriodheaderPeriodname,
        boost::optional<utility::string_t> httpPeriodheaderPeriodvaluepattern
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="featurePeriodname"> (optional)</param>
    /// <param name="featurePerioddescription"> (optional)</param>
    /// <param name="activePeriodpercentage"> (optional)</param>
    /// <param name="cookiePeriodname"> (optional)</param>
    /// <param name="cookiePeriodmaxAge"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteFragsImplRandomFeatureInfo>> comAdobeGraniteFragsImplRandomFeature(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> featurePeriodname,
        boost::optional<utility::string_t> featurePerioddescription,
        boost::optional<utility::string_t> activePeriodpercentage,
        boost::optional<utility::string_t> cookiePeriodname,
        boost::optional<int32_t> cookiePeriodmaxAge
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePerioddocumentRoot"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePeriodincludeHost"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteHttpcacheFileFileCacheStoreInfo>> comAdobeGraniteHttpcacheFileFileCacheStore(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePerioddocumentRoot,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodhttpcachePeriodfilePeriodincludeHost
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodhttpcachePeriodurlPeriodpaths"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo>> comAdobeGraniteHttpcacheImplOuterCacheFilter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> comPeriodadobePeriodgranitePeriodhttpcachePeriodurlPeriodpaths
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="pseudoPeriodpatterns"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo>> comAdobeGraniteI18nImplBundlePseudoTranslations(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> pseudoPeriodpatterns
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="securityPeriodpreferencesPeriodname"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo>> comAdobeGraniteI18nImplPreferencesLocaleResolverService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> securityPeriodpreferencesPeriodname
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="granitePeriodinfocollectorPeriodincludeThreadDumps"> (optional)</param>
    /// <param name="granitePeriodinfocollectorPeriodincludeHeapDump"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteInfocollectorInfoCollectorInfo>> comAdobeGraniteInfocollectorInfoCollector(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> granitePeriodinfocollectorPeriodincludeThreadDumps,
        boost::optional<bool> granitePeriodinfocollectorPeriodincludeHeapDump
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodport"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePerioduser"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePeriodpassword"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodexcluded"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodincluded"> (optional)</param>
    /// <param name="comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodclientPeriodcertificate"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo>> comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodport,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePerioduser,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodkeystorePeriodpassword,
        boost::optional<std::vector<utility::string_t>> comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodexcluded,
        boost::optional<std::vector<utility::string_t>> comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodciphersuitesPeriodincluded,
        boost::optional<utility::string_t> comPeriodadobePeriodgranitePeriodjettyPeriodsslPeriodclientPeriodcertificate
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="checkInternval"> (optional)</param>
    /// <param name="excludeIds"> (optional)</param>
    /// <param name="encryptPing"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteLicenseImplLicenseCheckFilterInfo>> comAdobeGraniteLicenseImplLicenseCheckFilter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> checkInternval,
        boost::optional<std::vector<utility::string_t>> excludeIds,
        boost::optional<bool> encryptPing
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="messagesPeriodqueuePeriodsize"> (optional)</param>
    /// <param name="loggerPeriodconfig"> (optional)</param>
    /// <param name="messagesPeriodsize"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteLoggingImplLogAnalyserImplInfo>> comAdobeGraniteLoggingImplLogAnalyserImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> messagesPeriodqueuePeriodsize,
        boost::optional<std::vector<utility::string_t>> loggerPeriodconfig,
        boost::optional<int32_t> messagesPeriodsize
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo>> comAdobeGraniteLoggingImplLogErrorHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="granitePeriodmaintenancePeriodmandatory"> (optional)</param>
    /// <param name="jobPeriodtopics"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo>> comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> granitePeriodmaintenancePeriodmandatory,
        boost::optional<utility::string_t> jobPeriodtopics
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="jobPeriodtopics"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo>> comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> jobPeriodtopics
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="fullPeriodgcPerioddays"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo>> comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> fullPeriodgcPerioddays
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="scriptPeriodfilename"> (optional)</param>
    /// <param name="scriptPerioddisplay"> (optional)</param>
    /// <param name="scriptPeriodpath"> (optional)</param>
    /// <param name="scriptPeriodplatform"> (optional)</param>
    /// <param name="interval"> (optional)</param>
    /// <param name="jmxdomain"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteMonitoringImplScriptConfigImplInfo>> comAdobeGraniteMonitoringImplScriptConfigImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> scriptPeriodfilename,
        boost::optional<utility::string_t> scriptPerioddisplay,
        boost::optional<utility::string_t> scriptPeriodpath,
        boost::optional<std::vector<utility::string_t>> scriptPeriodplatform,
        boost::optional<int32_t> interval,
        boost::optional<utility::string_t> jmxdomain
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="path"> (optional)</param>
    /// <param name="jaasPeriodcontrolFlag"> (optional)</param>
    /// <param name="jaasPeriodrealmName"> (optional)</param>
    /// <param name="jaasPeriodranking"> (optional)</param>
    /// <param name="oauthPeriodofflinePeriodvalidation"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo>> comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> path,
        boost::optional<utility::string_t> jaasPeriodcontrolFlag,
        boost::optional<utility::string_t> jaasPeriodrealmName,
        boost::optional<int32_t> jaasPeriodranking,
        boost::optional<bool> oauthPeriodofflinePeriodvalidation
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="schedulerPeriodexpression"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo>> comAdobeGraniteOauthServerImplAccessTokenCleanupTask(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> schedulerPeriodexpression
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="oauthPeriodclientPeriodrevocationPeriodactive"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo>> comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> oauthPeriodclientPeriodrevocationPeriodactive
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="slingPeriodservletPeriodpaths"> (optional)</param>
    /// <param name="oauthPeriodrevocationPeriodactive"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo>> comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> slingPeriodservletPeriodpaths,
        boost::optional<bool> oauthPeriodrevocationPeriodactive
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="oauthPeriodissuer"> (optional)</param>
    /// <param name="oauthPeriodaccessPeriodtokenPeriodexpiresPeriodin"> (optional)</param>
    /// <param name="osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern"> (optional)</param>
    /// <param name="osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo>> comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> oauthPeriodissuer,
        boost::optional<utility::string_t> oauthPeriodaccessPeriodtokenPeriodexpiresPeriodin,
        boost::optional<utility::string_t> osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern,
        boost::optional<utility::string_t> osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="oauthPeriodtokenPeriodrevocationPeriodactive"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo>> comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> oauthPeriodtokenPeriodrevocationPeriodactive
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="offloadingPeriodtransporter"> (optional)</param>
    /// <param name="offloadingPeriodcleanupPeriodpayload"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo>> comAdobeGraniteOffloadingImplOffloadingConfigurator(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> offloadingPeriodtransporter,
        boost::optional<bool> offloadingPeriodcleanupPeriodpayload
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="offloadingPeriodjobclonerPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo>> comAdobeGraniteOffloadingImplOffloadingJobCloner(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> offloadingPeriodjobclonerPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="offloadingPeriodoffloaderPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo>> comAdobeGraniteOffloadingImplOffloadingJobOffloader(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> offloadingPeriodoffloaderPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="offloadingPeriodagentmanagerPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo>> comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> offloadingPeriodagentmanagerPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="defaultPeriodtransportPeriodagentToWorkerPeriodprefix"> (optional)</param>
    /// <param name="defaultPeriodtransportPeriodagentToMasterPeriodprefix"> (optional)</param>
    /// <param name="defaultPeriodtransportPeriodinputPeriodpackage"> (optional)</param>
    /// <param name="defaultPeriodtransportPeriodoutputPeriodpackage"> (optional)</param>
    /// <param name="defaultPeriodtransportPeriodreplicationPeriodsynchronous"> (optional)</param>
    /// <param name="defaultPeriodtransportPeriodcontentpackage"> (optional)</param>
    /// <param name="offloadingPeriodtransporterPerioddefaultPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo>> comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> defaultPeriodtransportPeriodagentToWorkerPeriodprefix,
        boost::optional<utility::string_t> defaultPeriodtransportPeriodagentToMasterPeriodprefix,
        boost::optional<utility::string_t> defaultPeriodtransportPeriodinputPeriodpackage,
        boost::optional<utility::string_t> defaultPeriodtransportPeriodoutputPeriodpackage,
        boost::optional<bool> defaultPeriodtransportPeriodreplicationPeriodsynchronous,
        boost::optional<bool> defaultPeriodtransportPeriodcontentpackage,
        boost::optional<bool> offloadingPeriodtransporterPerioddefaultPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="omnisearchPeriodsuggestionPeriodrequiretextPeriodmin"> (optional)</param>
    /// <param name="omnisearchPeriodsuggestionPeriodspellcheckPeriodrequire"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo>> comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> omnisearchPeriodsuggestionPeriodrequiretextPeriodmin,
        boost::optional<bool> omnisearchPeriodsuggestionPeriodspellcheckPeriodrequire
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="optoutPeriodcookies"> (optional)</param>
    /// <param name="optoutPeriodheaders"> (optional)</param>
    /// <param name="optoutPeriodwhitelistPeriodcookies"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteOptoutImplOptOutServiceImplInfo>> comAdobeGraniteOptoutImplOptOutServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> optoutPeriodcookies,
        boost::optional<std::vector<utility::string_t>> optoutPeriodheaders,
        boost::optional<std::vector<utility::string_t>> optoutPeriodwhitelistPeriodcookies
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="indexingPeriodcriticalPeriodthreshold"> (optional)</param>
    /// <param name="indexingPeriodwarnPeriodthreshold"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo>> comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> indexingPeriodcriticalPeriodthreshold,
        boost::optional<int32_t> indexingPeriodwarnPeriodthreshold,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="largePeriodindexPeriodcriticalPeriodthreshold"> (optional)</param>
    /// <param name="largePeriodindexPeriodwarnPeriodthreshold"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo>> comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> largePeriodindexPeriodcriticalPeriodthreshold,
        boost::optional<int32_t> largePeriodindexPeriodwarnPeriodthreshold,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo>> comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="getPeriod"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo>> comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> getPeriod
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo>> comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="numberPeriodofPeriodretriesPeriodallowed"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo>> comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> numberPeriodofPeriodretriesPeriodallowed,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo>> comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo>> comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    /// <param name="excludePeriodsearchPeriodpath"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo>> comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags,
        boost::optional<std::vector<utility::string_t>> excludePeriodsearchPeriodpath
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo>> comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo>> comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    /// <param name="accountPeriodlogins"> (optional)</param>
    /// <param name="consolePeriodlogins"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo>> comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags,
        boost::optional<std::vector<utility::string_t>> accountPeriodlogins,
        boost::optional<std::vector<utility::string_t>> consolePeriodlogins
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    /// <param name="diskPeriodspacePeriodwarnPeriodthreshold"> (optional)</param>
    /// <param name="diskPeriodspacePerioderrorPeriodthreshold"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo>> comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags,
        boost::optional<int32_t> diskPeriodspacePeriodwarnPeriodthreshold,
        boost::optional<int32_t> diskPeriodspacePerioderrorPeriodthreshold
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo>> comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    /// <param name="intervalSeconds"> (optional)</param>
    /// <param name="commitsPerIntervalThreshold"> (optional)</param>
    /// <param name="maxLocationLength"> (optional)</param>
    /// <param name="maxDetailsShown"> (optional)</param>
    /// <param name="minDetailsPercentage"> (optional)</param>
    /// <param name="threadMatchers"> (optional)</param>
    /// <param name="maxGreedyDepth"> (optional)</param>
    /// <param name="greedyStackMatchers"> (optional)</param>
    /// <param name="stackFilters"> (optional)</param>
    /// <param name="stackMatchers"> (optional)</param>
    /// <param name="stackCategorizers"> (optional)</param>
    /// <param name="stackShorteners"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteRepositoryImplCommitStatsConfigInfo>> comAdobeGraniteRepositoryImplCommitStatsConfig(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enabled,
        boost::optional<int32_t> intervalSeconds,
        boost::optional<int32_t> commitsPerIntervalThreshold,
        boost::optional<int32_t> maxLocationLength,
        boost::optional<int32_t> maxDetailsShown,
        boost::optional<int32_t> minDetailsPercentage,
        boost::optional<std::vector<utility::string_t>> threadMatchers,
        boost::optional<int32_t> maxGreedyDepth,
        boost::optional<utility::string_t> greedyStackMatchers,
        boost::optional<std::vector<utility::string_t>> stackFilters,
        boost::optional<std::vector<utility::string_t>> stackMatchers,
        boost::optional<std::vector<utility::string_t>> stackCategorizers,
        boost::optional<std::vector<utility::string_t>> stackShorteners
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="serviceusersPeriodsimpleSubjectPopulation"> (optional)</param>
    /// <param name="serviceusersPeriodlist"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteRepositoryServiceUserConfigurationInfo>> comAdobeGraniteRepositoryServiceUserConfiguration(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<bool> serviceusersPeriodsimpleSubjectPopulation,
        boost::optional<std::vector<utility::string_t>> serviceusersPeriodlist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo>> comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="types"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo>> comAdobeGraniteResourcestatusImplCompositeStatusType(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<std::vector<utility::string_t>> types
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="providerPeriodroot"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo>> comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> providerPeriodroot
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="mimePeriodallowEmpty"> (optional)</param>
    /// <param name="mimePeriodallowed"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo>> comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> mimePeriodallowEmpty,
        boost::optional<std::vector<utility::string_t>> mimePeriodallowed
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="providerPeriodroots"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo>> comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> providerPeriodroots
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="defaultPeriodlimit"> (optional)</param>
    /// <param name="usePeriodabsolutePerioduri"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteRestImplServletDefaultGETServletInfo>> comAdobeGraniteRestImplServletDefaultGETServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> defaultPeriodlimit,
        boost::optional<bool> usePeriodabsolutePerioduri
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo>> comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="adapterPeriodcondition"> (optional)</param>
    /// <param name="granitePerioduserpropertiesPeriodnodetypes"> (optional)</param>
    /// <param name="granitePerioduserpropertiesPeriodresourcetypes"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteSecurityUserUserPropertiesServiceInfo>> comAdobeGraniteSecurityUserUserPropertiesService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> adapterPeriodcondition,
        boost::optional<std::vector<utility::string_t>> granitePerioduserpropertiesPeriodnodetypes,
        boost::optional<std::vector<utility::string_t>> granitePerioduserpropertiesPeriodresourcetypes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="group2memberPeriodrelationshipPeriodoutgoing"> (optional)</param>
    /// <param name="group2memberPeriodexcludedPeriodoutgoing"> (optional)</param>
    /// <param name="group2memberPeriodrelationshipPeriodincoming"> (optional)</param>
    /// <param name="group2memberPeriodexcludedPeriodincoming"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo>> comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> group2memberPeriodrelationshipPeriodoutgoing,
        boost::optional<std::vector<utility::string_t>> group2memberPeriodexcludedPeriodoutgoing,
        boost::optional<utility::string_t> group2memberPeriodrelationshipPeriodincoming,
        boost::optional<std::vector<utility::string_t>> group2memberPeriodexcludedPeriodincoming
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="schedulerPeriodexpression"> (optional)</param>
    /// <param name="jmxPeriodobjectname"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo>> comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> schedulerPeriodexpression,
        boost::optional<utility::string_t> jmxPeriodobjectname
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="adapterPeriodcondition"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo>> comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> adapterPeriodcondition
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="archivingPeriodenabled"> (optional)</param>
    /// <param name="schedulerPeriodexpression"> (optional)</param>
    /// <param name="archivePeriodsincePerioddaysPeriodcompleted"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo>> comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> archivingPeriodenabled,
        boost::optional<utility::string_t> schedulerPeriodexpression,
        boost::optional<int32_t> archivePeriodsincePerioddaysPeriodcompleted
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="purgeCompleted"> (optional)</param>
    /// <param name="completedAge"> (optional)</param>
    /// <param name="purgeActive"> (optional)</param>
    /// <param name="activeAge"> (optional)</param>
    /// <param name="saveThreshold"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo>> comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> purgeCompleted,
        boost::optional<int32_t> completedAge,
        boost::optional<bool> purgeActive,
        boost::optional<int32_t> activeAge,
        boost::optional<int32_t> saveThreshold
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="adapterPeriodcondition"> (optional)</param>
    /// <param name="taskmanagerPeriodadmingroups"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo>> comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> adapterPeriodcondition,
        boost::optional<std::vector<utility::string_t>> taskmanagerPeriodadmingroups
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="schedulerPeriodperiod"> (optional)</param>
    /// <param name="schedulerPeriodrunOn"> (optional)</param>
    /// <param name="granitePeriodthreaddumpPeriodenabled"> (optional)</param>
    /// <param name="granitePeriodthreaddumpPerioddumpsPerFile"> (optional)</param>
    /// <param name="granitePeriodthreaddumpPeriodenableGzipCompression"> (optional)</param>
    /// <param name="granitePeriodthreaddumpPeriodenableDirectoriesCompression"> (optional)</param>
    /// <param name="granitePeriodthreaddumpPeriodenableJStack"> (optional)</param>
    /// <param name="granitePeriodthreaddumpPeriodmaxBackupDays"> (optional)</param>
    /// <param name="granitePeriodthreaddumpPeriodbackupCleanTrigger"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteThreaddumpThreadDumpCollectorInfo>> comAdobeGraniteThreaddumpThreadDumpCollector(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> schedulerPeriodperiod,
        boost::optional<utility::string_t> schedulerPeriodrunOn,
        boost::optional<bool> granitePeriodthreaddumpPeriodenabled,
        boost::optional<int32_t> granitePeriodthreaddumpPerioddumpsPerFile,
        boost::optional<bool> granitePeriodthreaddumpPeriodenableGzipCompression,
        boost::optional<bool> granitePeriodthreaddumpPeriodenableDirectoriesCompression,
        boost::optional<bool> granitePeriodthreaddumpPeriodenableJStack,
        boost::optional<int32_t> granitePeriodthreaddumpPeriodmaxBackupDays,
        boost::optional<utility::string_t> granitePeriodthreaddumpPeriodbackupCleanTrigger
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="translationFactory"> (optional)</param>
    /// <param name="defaultConnectorLabel"> (optional)</param>
    /// <param name="defaultConnectorAttribution"> (optional)</param>
    /// <param name="defaultConnectorWorkspaceId"> (optional)</param>
    /// <param name="defaultConnectorSubscriptionKey"> (optional)</param>
    /// <param name="languageMapLocation"> (optional)</param>
    /// <param name="categoryMapLocation"> (optional)</param>
    /// <param name="retryAttempts"> (optional)</param>
    /// <param name="timeoutCount"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo>> comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> translationFactory,
        boost::optional<utility::string_t> defaultConnectorLabel,
        boost::optional<utility::string_t> defaultConnectorAttribution,
        boost::optional<utility::string_t> defaultConnectorWorkspaceId,
        boost::optional<utility::string_t> defaultConnectorSubscriptionKey,
        boost::optional<utility::string_t> languageMapLocation,
        boost::optional<utility::string_t> categoryMapLocation,
        boost::optional<int32_t> retryAttempts,
        boost::optional<int32_t> timeoutCount
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="defaultConnectorName"> (optional)</param>
    /// <param name="defaultCategory"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo>> comAdobeGraniteTranslationCoreImplTranslationManagerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> defaultConnectorName,
        boost::optional<utility::string_t> defaultCategory
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="htmllibmanagerPeriodtiming"> (optional)</param>
    /// <param name="htmllibmanagerPerioddebugPeriodinitPeriodjs"> (optional)</param>
    /// <param name="htmllibmanagerPeriodminify"> (optional)</param>
    /// <param name="htmllibmanagerPerioddebug"> (optional)</param>
    /// <param name="htmllibmanagerPeriodgzip"> (optional)</param>
    /// <param name="htmllibmanagerPeriodmaxDataUriSize"> (optional)</param>
    /// <param name="htmllibmanagerPeriodmaxage"> (optional)</param>
    /// <param name="htmllibmanagerPeriodforceCQUrlInfo"> (optional)</param>
    /// <param name="htmllibmanagerPerioddefaultthemename"> (optional)</param>
    /// <param name="htmllibmanagerPerioddefaultuserthemename"> (optional)</param>
    /// <param name="htmllibmanagerPeriodclientmanager"> (optional)</param>
    /// <param name="htmllibmanagerPeriodpathPeriodlist"> (optional)</param>
    /// <param name="htmllibmanagerPeriodexcludedPeriodpathPeriodlist"> (optional)</param>
    /// <param name="htmllibmanagerPeriodprocessorPeriodjs"> (optional)</param>
    /// <param name="htmllibmanagerPeriodprocessorPeriodcss"> (optional)</param>
    /// <param name="htmllibmanagerPeriodlongcachePeriodpatterns"> (optional)</param>
    /// <param name="htmllibmanagerPeriodlongcachePeriodformat"> (optional)</param>
    /// <param name="htmllibmanagerPerioduseFileSystemOutputCache"> (optional)</param>
    /// <param name="htmllibmanagerPeriodfileSystemOutputCacheLocation"> (optional)</param>
    /// <param name="htmllibmanagerPerioddisablePeriodreplacement"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo>> comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> htmllibmanagerPeriodtiming,
        boost::optional<utility::string_t> htmllibmanagerPerioddebugPeriodinitPeriodjs,
        boost::optional<bool> htmllibmanagerPeriodminify,
        boost::optional<bool> htmllibmanagerPerioddebug,
        boost::optional<bool> htmllibmanagerPeriodgzip,
        boost::optional<int32_t> htmllibmanagerPeriodmaxDataUriSize,
        boost::optional<int32_t> htmllibmanagerPeriodmaxage,
        boost::optional<bool> htmllibmanagerPeriodforceCQUrlInfo,
        boost::optional<utility::string_t> htmllibmanagerPerioddefaultthemename,
        boost::optional<utility::string_t> htmllibmanagerPerioddefaultuserthemename,
        boost::optional<utility::string_t> htmllibmanagerPeriodclientmanager,
        boost::optional<std::vector<utility::string_t>> htmllibmanagerPeriodpathPeriodlist,
        boost::optional<std::vector<utility::string_t>> htmllibmanagerPeriodexcludedPeriodpathPeriodlist,
        boost::optional<std::vector<utility::string_t>> htmllibmanagerPeriodprocessorPeriodjs,
        boost::optional<std::vector<utility::string_t>> htmllibmanagerPeriodprocessorPeriodcss,
        boost::optional<std::vector<utility::string_t>> htmllibmanagerPeriodlongcachePeriodpatterns,
        boost::optional<utility::string_t> htmllibmanagerPeriodlongcachePeriodformat,
        boost::optional<bool> htmllibmanagerPerioduseFileSystemOutputCache,
        boost::optional<utility::string_t> htmllibmanagerPeriodfileSystemOutputCacheLocation,
        boost::optional<std::vector<utility::string_t>> htmllibmanagerPerioddisablePeriodreplacement
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo>> comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="granitePeriodworkflowPeriodWorkflowPublishEventServicePeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo>> comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> granitePeriodworkflowPeriodWorkflowPublishEventServicePeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="bucketSize"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo>> comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> bucketSize
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="defaultPeriodtimeout"> (optional)</param>
    /// <param name="maxPeriodtimeout"> (optional)</param>
    /// <param name="defaultPeriodperiod"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo>> comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> defaultPeriodtimeout,
        boost::optional<int32_t> maxPeriodtimeout,
        boost::optional<int32_t> defaultPeriodperiod
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="jobPeriodtopics"> (optional)</param>
    /// <param name="allowPeriodselfPeriodprocessPeriodtermination"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteWorkflowCoreJobJobHandlerInfo>> comAdobeGraniteWorkflowCoreJobJobHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> jobPeriodtopics,
        boost::optional<bool> allowPeriodselfPeriodprocessPeriodtermination
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="jobPeriodtopics"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo>> comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> jobPeriodtopics
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="getSystemWorkflowModels"> (optional)</param>
    /// <param name="getPackageRootPath"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteWorkflowCorePayloadMapCacheInfo>> comAdobeGraniteWorkflowCorePayloadMapCache(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> getSystemWorkflowModels,
        boost::optional<utility::string_t> getPackageRootPath
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="payloadPeriodmovePeriodwhitePeriodlist"> (optional)</param>
    /// <param name="payloadPeriodmovePeriodhandlePeriodfromPeriodworkflowPeriodprocess"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo>> comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> payloadPeriodmovePeriodwhitePeriodlist,
        boost::optional<bool> payloadPeriodmovePeriodhandlePeriodfromPeriodworkflowPeriodprocess
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodworkflowPeriodconfigPeriodworkflowPeriodpackagesPeriodrootPeriodpath"> (optional)</param>
    /// <param name="cqPeriodworkflowPeriodconfigPeriodworkflowPeriodprocessPeriodlegacyPeriodmode"> (optional)</param>
    /// <param name="cqPeriodworkflowPeriodconfigPeriodallowPeriodlocking"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteWorkflowCoreWorkflowConfigInfo>> comAdobeGraniteWorkflowCoreWorkflowConfig(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPeriodworkflowPeriodconfigPeriodworkflowPeriodpackagesPeriodrootPeriodpath,
        boost::optional<bool> cqPeriodworkflowPeriodconfigPeriodworkflowPeriodprocessPeriodlegacyPeriodmode,
        boost::optional<bool> cqPeriodworkflowPeriodconfigPeriodallowPeriodlocking
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="granitePeriodworkflowinboxPeriodsortPeriodpropertyName"> (optional)</param>
    /// <param name="granitePeriodworkflowinboxPeriodsortPeriodorder"> (optional)</param>
    /// <param name="cqPeriodworkflowPeriodjobPeriodretry"> (optional)</param>
    /// <param name="cqPeriodworkflowPeriodsuperuser"> (optional)</param>
    /// <param name="granitePeriodworkflowPeriodinboxQuerySize"> (optional)</param>
    /// <param name="granitePeriodworkflowPeriodadminUserGroupFilter"> (optional)</param>
    /// <param name="granitePeriodworkflowPeriodenforceWorkitemAssigneePermissions"> (optional)</param>
    /// <param name="granitePeriodworkflowPeriodenforceWorkflowInitiatorPermissions"> (optional)</param>
    /// <param name="granitePeriodworkflowPeriodinjectTenantIdInJobTopics"> (optional)</param>
    /// <param name="granitePeriodworkflowPeriodmaxPurgeSaveThreshold"> (optional)</param>
    /// <param name="granitePeriodworkflowPeriodmaxPurgeQueryCount"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo>> comAdobeGraniteWorkflowCoreWorkflowSessionFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> granitePeriodworkflowinboxPeriodsortPeriodpropertyName,
        boost::optional<utility::string_t> granitePeriodworkflowinboxPeriodsortPeriodorder,
        boost::optional<int32_t> cqPeriodworkflowPeriodjobPeriodretry,
        boost::optional<std::vector<utility::string_t>> cqPeriodworkflowPeriodsuperuser,
        boost::optional<int32_t> granitePeriodworkflowPeriodinboxQuerySize,
        boost::optional<bool> granitePeriodworkflowPeriodadminUserGroupFilter,
        boost::optional<bool> granitePeriodworkflowPeriodenforceWorkitemAssigneePermissions,
        boost::optional<bool> granitePeriodworkflowPeriodenforceWorkflowInitiatorPermissions,
        boost::optional<bool> granitePeriodworkflowPeriodinjectTenantIdInJobTopics,
        boost::optional<int32_t> granitePeriodworkflowPeriodmaxPurgeSaveThreshold,
        boost::optional<int32_t> granitePeriodworkflowPeriodmaxPurgeQueryCount
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="scheduledpurgePeriodname"> (optional)</param>
    /// <param name="scheduledpurgePeriodworkflowStatus"> (optional)</param>
    /// <param name="scheduledpurgePeriodmodelIds"> (optional)</param>
    /// <param name="scheduledpurgePerioddaysold"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeGraniteWorkflowPurgeSchedulerInfo>> comAdobeGraniteWorkflowPurgeScheduler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> scheduledpurgePeriodname,
        boost::optional<utility::string_t> scheduledpurgePeriodworkflowStatus,
        boost::optional<std::vector<utility::string_t>> scheduledpurgePeriodmodelIds,
        boost::optional<int32_t> scheduledpurgePerioddaysold
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="maxConnections"> (optional)</param>
    /// <param name="maxRequests"> (optional)</param>
    /// <param name="requestTimeout"> (optional)</param>
    /// <param name="requestRetries"> (optional)</param>
    /// <param name="launchTimeout"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeOctopusNcommBootstrapInfo>> comAdobeOctopusNcommBootstrap(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> maxConnections,
        boost::optional<int32_t> maxRequests,
        boost::optional<int32_t> requestTimeout,
        boost::optional<int32_t> requestRetries,
        boost::optional<int32_t> launchTimeout
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="communitiesPeriodintegrationPeriodlivefyrePeriodslingPeriodeventPeriodfilter"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo>> comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> communitiesPeriodintegrationPeriodlivefyrePeriodslingPeriodeventPeriodfilter
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="maxConnections"> (optional)</param>
    /// <param name="maxRequests"> (optional)</param>
    /// <param name="requestTimeout"> (optional)</param>
    /// <param name="logDir"> (optional)</param>
    pplx::task<std::shared_ptr<ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo>> comAdobeXmpWorkerFilesNcommXMPFilesNComm(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> maxConnections,
        boost::optional<utility::string_t> maxRequests,
        boost::optional<utility::string_t> requestTimeout,
        boost::optional<utility::string_t> logDir
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="jdbcPerioddriverPeriodclass"> (optional)</param>
    /// <param name="jdbcPeriodconnectionPerioduri"> (optional)</param>
    /// <param name="jdbcPeriodusername"> (optional)</param>
    /// <param name="jdbcPeriodpassword"> (optional)</param>
    /// <param name="jdbcPeriodvalidationPeriodquery"> (optional)</param>
    /// <param name="defaultPeriodreadonly"> (optional)</param>
    /// <param name="defaultPeriodautocommit"> (optional)</param>
    /// <param name="poolPeriodsize"> (optional)</param>
    /// <param name="poolPeriodmaxPeriodwaitPeriodmsec"> (optional)</param>
    /// <param name="datasourcePeriodname"> (optional)</param>
    /// <param name="datasourcePeriodsvcPeriodproperties"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo>> comDayCommonsDatasourceJdbcpoolJdbcPoolService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> jdbcPerioddriverPeriodclass,
        boost::optional<utility::string_t> jdbcPeriodconnectionPerioduri,
        boost::optional<utility::string_t> jdbcPeriodusername,
        boost::optional<utility::string_t> jdbcPeriodpassword,
        boost::optional<utility::string_t> jdbcPeriodvalidationPeriodquery,
        boost::optional<bool> defaultPeriodreadonly,
        boost::optional<bool> defaultPeriodautocommit,
        boost::optional<int32_t> poolPeriodsize,
        boost::optional<int32_t> poolPeriodmaxPeriodwaitPeriodmsec,
        boost::optional<utility::string_t> datasourcePeriodname,
        boost::optional<std::vector<utility::string_t>> datasourcePeriodsvcPeriodproperties
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="proxyPeriodenabled"> (optional)</param>
    /// <param name="proxyPeriodhost"> (optional)</param>
    /// <param name="proxyPerioduser"> (optional)</param>
    /// <param name="proxyPeriodpassword"> (optional)</param>
    /// <param name="proxyPeriodntlmPeriodhost"> (optional)</param>
    /// <param name="proxyPeriodntlmPerioddomain"> (optional)</param>
    /// <param name="proxyPeriodexceptions"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCommonsHttpclientInfo>> comDayCommonsHttpclient(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> proxyPeriodenabled,
        boost::optional<utility::string_t> proxyPeriodhost,
        boost::optional<utility::string_t> proxyPerioduser,
        boost::optional<utility::string_t> proxyPeriodpassword,
        boost::optional<utility::string_t> proxyPeriodntlmPeriodhost,
        boost::optional<utility::string_t> proxyPeriodntlmPerioddomain,
        boost::optional<std::vector<utility::string_t>> proxyPeriodexceptions
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodstorePeriodlistenerPeriodadditionalStorePaths"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo>> comDayCqAnalyticsImplStorePropertiesChangeListener(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPeriodstorePeriodlistenerPeriodadditionalStorePaths
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="allowedPeriodpaths"> (optional)</param>
    /// <param name="cqPeriodanalyticsPeriodsaintPeriodexporterPeriodpagesize"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo>> comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> allowedPeriodpaths,
        boost::optional<int32_t> cqPeriodanalyticsPeriodsaintPeriodexporterPeriodpagesize
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="reportPeriodfetchPeriodattempts"> (optional)</param>
    /// <param name="reportPeriodfetchPerioddelay"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo>> comDayCqAnalyticsSitecatalystImplImporterReportImporter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> reportPeriodfetchPeriodattempts,
        boost::optional<int32_t> reportPeriodfetchPerioddelay
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodanalyticsPeriodadapterfactoryPeriodcontextstores"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo>> comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPeriodanalyticsPeriodadapterfactoryPeriodcontextstores
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodanalyticsPeriodsitecatalystPeriodservicePerioddatacenterPeriodurl"> (optional)</param>
    /// <param name="devhostnamepatterns"> (optional)</param>
    /// <param name="connectionPeriodtimeout"> (optional)</param>
    /// <param name="socketPeriodtimeout"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo>> comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPeriodanalyticsPeriodsitecatalystPeriodservicePerioddatacenterPeriodurl,
        boost::optional<std::vector<utility::string_t>> devhostnamepatterns,
        boost::optional<int32_t> connectionPeriodtimeout,
        boost::optional<int32_t> socketPeriodtimeout
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodanalyticsPeriodtestandtargetPeriodaccountoptionsupdaterPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo>> comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPeriodanalyticsPeriodtestandtargetPeriodaccountoptionsupdaterPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodanalyticsPeriodtestandtargetPerioddeleteauthoractivitylistenerPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo>> comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPeriodanalyticsPeriodtestandtargetPerioddeleteauthoractivitylistenerPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodanalyticsPeriodtestandtargetPeriodpushauthorcampaignpagelistenerPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo>> comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPeriodanalyticsPeriodtestandtargetPeriodpushauthorcampaignpagelistenerPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodanalyticsPeriodtestandtargetPeriodsegmentimporterPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo>> comDayCqAnalyticsTestandtargetImplSegmentImporter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPeriodanalyticsPeriodtestandtargetPeriodsegmentimporterPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="endpointUri"> (optional)</param>
    /// <param name="connectionTimeout"> (optional)</param>
    /// <param name="socketTimeout"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo>> comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> endpointUri,
        boost::optional<int32_t> connectionTimeout,
        boost::optional<int32_t> socketTimeout
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="testandtargetPeriodendpointPeriodurl"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo>> comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> testandtargetPeriodendpointPeriodurl
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodanalyticsPeriodtestandtargetPeriodapiPeriodurl"> (optional)</param>
    /// <param name="cqPeriodanalyticsPeriodtestandtargetPeriodtimeout"> (optional)</param>
    /// <param name="cqPeriodanalyticsPeriodtestandtargetPeriodsockettimeout"> (optional)</param>
    /// <param name="cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplace"> (optional)</param>
    /// <param name="cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplacewith"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo>> comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> cqPeriodanalyticsPeriodtestandtargetPeriodapiPeriodurl,
        boost::optional<int32_t> cqPeriodanalyticsPeriodtestandtargetPeriodtimeout,
        boost::optional<int32_t> cqPeriodanalyticsPeriodtestandtargetPeriodsockettimeout,
        boost::optional<utility::string_t> cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplace,
        boost::optional<utility::string_t> cqPeriodanalyticsPeriodtestandtargetPeriodrecommendationsPeriodurlPeriodreplacewith
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cugPeriodexemptedPeriodprincipals"> (optional)</param>
    /// <param name="cugPeriodenabled"> (optional)</param>
    /// <param name="cugPeriodprincipalsPeriodregex"> (optional)</param>
    /// <param name="cugPeriodprincipalsPeriodreplacement"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqAuthImplCugCugSupportImplInfo>> comDayCqAuthImplCugCugSupportImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cugPeriodexemptedPeriodprincipals,
        boost::optional<bool> cugPeriodenabled,
        boost::optional<utility::string_t> cugPeriodprincipalsPeriodregex,
        boost::optional<utility::string_t> cugPeriodprincipalsPeriodreplacement
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="path"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="authPeriodloginselectorPeriodmappings"> (optional)</param>
    /// <param name="authPeriodloginselectorPeriodchangepwPeriodmappings"> (optional)</param>
    /// <param name="authPeriodloginselectorPerioddefaultloginpage"> (optional)</param>
    /// <param name="authPeriodloginselectorPerioddefaultchangepwpage"> (optional)</param>
    /// <param name="authPeriodloginselectorPeriodhandle"> (optional)</param>
    /// <param name="authPeriodloginselectorPeriodhandlePeriodallPeriodextensions"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqAuthImplLoginSelectorHandlerInfo>> comDayCqAuthImplLoginSelectorHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> path,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<std::vector<utility::string_t>> authPeriodloginselectorPeriodmappings,
        boost::optional<std::vector<utility::string_t>> authPeriodloginselectorPeriodchangepwPeriodmappings,
        boost::optional<utility::string_t> authPeriodloginselectorPerioddefaultloginpage,
        boost::optional<utility::string_t> authPeriodloginselectorPerioddefaultchangepwpage,
        boost::optional<std::vector<utility::string_t>> authPeriodloginselectorPeriodhandle,
        boost::optional<bool> authPeriodloginselectorPeriodhandlePeriodallPeriodextensions
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="externalizerPerioddomains"> (optional)</param>
    /// <param name="externalizerPeriodhost"> (optional)</param>
    /// <param name="externalizerPeriodcontextpath"> (optional)</param>
    /// <param name="externalizerPeriodencodedpath"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqCommonsImplExternalizerImplInfo>> comDayCqCommonsImplExternalizerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> externalizerPerioddomains,
        boost::optional<utility::string_t> externalizerPeriodhost,
        boost::optional<utility::string_t> externalizerPeriodcontextpath,
        boost::optional<bool> externalizerPeriodencodedpath
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="rootmappingPeriodtarget"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqCommonsServletsRootMappingServletInfo>> comDayCqCommonsServletsRootMappingServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> rootmappingPeriodtarget
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="codeupgradetasks"> (optional)</param>
    /// <param name="codeupgradetaskfilters"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo>> comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> codeupgradetasks,
        boost::optional<std::vector<utility::string_t>> codeupgradetaskfilters
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="upgradeTaskIgnoreList"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo>> comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> upgradeTaskIgnoreList
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="effectiveBundleListPath"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo>> comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> effectiveBundleListPath
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="contentsyncPeriodfallbackPeriodauthorizable"> (optional)</param>
    /// <param name="contentsyncPeriodfallbackPeriodupdateuser"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqContentsyncImplContentSyncManagerImplInfo>> comDayCqContentsyncImplContentSyncManagerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> contentsyncPeriodfallbackPeriodauthorizable,
        boost::optional<utility::string_t> contentsyncPeriodfallbackPeriodupdateuser
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="largeFileThreshold"> (optional)</param>
    /// <param name="largeCommentThreshold"> (optional)</param>
    /// <param name="cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCommonsHandlerStandardImageHandlerInfo>> comDayCqDamCommonsHandlerStandardImageHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> largeFileThreshold,
        boost::optional<int32_t> largeCommentThreshold,
        boost::optional<bool> cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="xmpPeriodfilterPeriodapplyWhitelist"> (optional)</param>
    /// <param name="xmpPeriodfilterPeriodwhitelist"> (optional)</param>
    /// <param name="xmpPeriodfilterPeriodapplyBlacklist"> (optional)</param>
    /// <param name="xmpPeriodfilterPeriodblacklist"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo>> comDayCqDamCommonsMetadataXmpFilterBlackWhite(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> xmpPeriodfilterPeriodapplyWhitelist,
        boost::optional<std::vector<utility::string_t>> xmpPeriodfilterPeriodwhitelist,
        boost::optional<bool> xmpPeriodfilterPeriodapplyBlacklist,
        boost::optional<std::vector<utility::string_t>> xmpPeriodfilterPeriodblacklist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="largePeriodfilePeriodmin"> (optional)</param>
    /// <param name="cachePeriodapply"> (optional)</param>
    /// <param name="mimePeriodtypes"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCommonsUtilImplAssetCacheImplInfo>> comDayCqDamCommonsUtilImplAssetCacheImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> largePeriodfilePeriodmin,
        boost::optional<bool> cachePeriodapply,
        boost::optional<std::vector<utility::string_t>> mimePeriodtypes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodwidth"> (optional)</param>
    /// <param name="cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodheight"> (optional)</param>
    /// <param name="cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodhorizontal"> (optional)</param>
    /// <param name="cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodvertical"> (optional)</param>
    /// <param name="cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodsize"> (optional)</param>
    /// <param name="cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodcolor"> (optional)</param>
    /// <param name="cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodfamily"> (optional)</param>
    /// <param name="cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodlight"> (optional)</param>
    /// <param name="cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodmarginTextImage"> (optional)</param>
    /// <param name="cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodminImageHeight"> (optional)</param>
    /// <param name="cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodwidth"> (optional)</param>
    /// <param name="cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodapproved"> (optional)</param>
    /// <param name="cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodrejected"> (optional)</param>
    /// <param name="cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodchangesRequested"> (optional)</param>
    /// <param name="cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodannotationMarkerPeriodwidth"> (optional)</param>
    /// <param name="cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodassetPeriodminheight"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo>> comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodwidth,
        boost::optional<int32_t> cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodheight,
        boost::optional<int32_t> cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodhorizontal,
        boost::optional<int32_t> cqPerioddamPeriodconfigPeriodannotationPeriodpdfPerioddocumentPeriodpaddingPeriodvertical,
        boost::optional<int32_t> cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodsize,
        boost::optional<utility::string_t> cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodcolor,
        boost::optional<utility::string_t> cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodfamily,
        boost::optional<utility::string_t> cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodfontPeriodlight,
        boost::optional<int32_t> cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodmarginTextImage,
        boost::optional<int32_t> cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodminImageHeight,
        boost::optional<int32_t> cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodwidth,
        boost::optional<utility::string_t> cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodapproved,
        boost::optional<utility::string_t> cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodrejected,
        boost::optional<utility::string_t> cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodreviewStatusPeriodcolorPeriodchangesRequested,
        boost::optional<int32_t> cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodannotationMarkerPeriodwidth,
        boost::optional<int32_t> cqPerioddamPeriodconfigPeriodannotationPeriodpdfPeriodassetPeriodminheight
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplAssetMoveListenerInfo>> comDayCqDamCoreImplAssetMoveListener(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="isEnabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo>> comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> isEnabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodadhocPeriodassetPeriodsharePeriodprezipPeriodmaxcontentsize"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo>> comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> cqPerioddamPeriodadhocPeriodassetPeriodsharePeriodprezipPeriodmaxcontentsize
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodmemory"> (optional)</param>
    /// <param name="cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodage"> (optional)</param>
    /// <param name="cqPerioddamPeriodimagePeriodcachePeriodmaxPerioddimension"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo>> comDayCqDamCoreImplCacheCQBufferedImageCache(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodmemory,
        boost::optional<int32_t> cqPerioddamPeriodimagePeriodcachePeriodmaxPeriodage,
        boost::optional<utility::string_t> cqPerioddamPeriodimagePeriodcachePeriodmaxPerioddimension
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="changeeventlistenerPeriodobservedPeriodpaths"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplDamChangeEventListenerInfo>> comDayCqDamCoreImplDamChangeEventListener(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> changeeventlistenerPeriodobservedPeriodpaths
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="schedulerPeriodexpression"> (optional)</param>
    /// <param name="maxSavedActivities"> (optional)</param>
    /// <param name="saveInterval"> (optional)</param>
    /// <param name="enableActivityPurge"> (optional)</param>
    /// <param name="eventTypes"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplDamEventPurgeServiceInfo>> comDayCqDamCoreImplDamEventPurgeService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> schedulerPeriodexpression,
        boost::optional<int32_t> maxSavedActivities,
        boost::optional<int32_t> saveInterval,
        boost::optional<bool> enableActivityPurge,
        boost::optional<utility::string_t> eventTypes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="eventPeriodfilter"> (optional)</param>
    /// <param name="eventPeriodqueuePeriodlength"> (optional)</param>
    /// <param name="eventrecorderPeriodenabled"> (optional)</param>
    /// <param name="eventrecorderPeriodblacklist"> (optional)</param>
    /// <param name="eventrecorderPeriodeventtypes"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplDamEventRecorderImplInfo>> comDayCqDamCoreImplDamEventRecorderImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> eventPeriodfilter,
        boost::optional<int32_t> eventPeriodqueuePeriodlength,
        boost::optional<bool> eventrecorderPeriodenabled,
        boost::optional<std::vector<utility::string_t>> eventrecorderPeriodblacklist,
        boost::optional<utility::string_t> eventrecorderPeriodeventtypes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="eventPeriodfilter"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplEventDamEventAuditListenerInfo>> comDayCqDamCoreImplEventDamEventAuditListener(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> eventPeriodfilter,
        boost::optional<bool> enabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodistimebased"> (optional)</param>
    /// <param name="cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule"> (optional)</param>
    /// <param name="cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodperiodPeriodrule"> (optional)</param>
    /// <param name="sendEmail"> (optional)</param>
    /// <param name="assetExpiredLimit"> (optional)</param>
    /// <param name="priorNotificationSeconds"> (optional)</param>
    /// <param name="cqPerioddamPeriodexpiryPeriodnotificationPeriodurlPeriodprotocol"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplExpiryNotificationJobImplInfo>> comDayCqDamCoreImplExpiryNotificationJobImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodistimebased,
        boost::optional<utility::string_t> cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule,
        boost::optional<int32_t> cqPerioddamPeriodexpiryPeriodnotificationPeriodschedulerPeriodperiodPeriodrule,
        boost::optional<bool> sendEmail,
        boost::optional<int32_t> assetExpiredLimit,
        boost::optional<int32_t> priorNotificationSeconds,
        boost::optional<utility::string_t> cqPerioddamPeriodexpiryPeriodnotificationPeriodurlPeriodprotocol
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="isEnabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo>> comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> isEnabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="skipPeriodbufferedcache"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplGfxCommonsGfxRendererInfo>> comDayCqDamCoreImplGfxCommonsGfxRenderer(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> skipPeriodbufferedcache
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="mimetype"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo>> comDayCqDamCoreImplHandlerEPSFormatHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> mimetype
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="mimetype"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo>> comDayCqDamCoreImplHandlerIndesignFormatHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> mimetype
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction"> (optional)</param>
    /// <param name="largeFileThreshold"> (optional)</param>
    /// <param name="largeCommentThreshold"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplHandlerJpegHandlerInfo>> comDayCqDamCoreImplHandlerJpegHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPerioddamPeriodenablePeriodextPeriodmetaPeriodextraction,
        boost::optional<int32_t> largeFileThreshold,
        boost::optional<int32_t> largeCommentThreshold
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="xmphandlerPeriodcqPeriodformats"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo>> comDayCqDamCoreImplHandlerXmpNCommXMPHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> xmphandlerPeriodcqPeriodformats
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="jmxPeriodobjectname"> (optional)</param>
    /// <param name="propertyPeriodmeasurePeriodenabled"> (optional)</param>
    /// <param name="propertyPeriodname"> (optional)</param>
    /// <param name="propertyPeriodmaxPeriodwaitPeriodms"> (optional)</param>
    /// <param name="propertyPeriodmaxPeriodrate"> (optional)</param>
    /// <param name="fulltextPeriodmeasurePeriodenabled"> (optional)</param>
    /// <param name="fulltextPeriodname"> (optional)</param>
    /// <param name="fulltextPeriodmaxPeriodwaitPeriodms"> (optional)</param>
    /// <param name="fulltextPeriodmaxPeriodrate"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo>> comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> jmxPeriodobjectname,
        boost::optional<bool> propertyPeriodmeasurePeriodenabled,
        boost::optional<utility::string_t> propertyPeriodname,
        boost::optional<int32_t> propertyPeriodmaxPeriodwaitPeriodms,
        boost::optional<double> propertyPeriodmaxPeriodrate,
        boost::optional<bool> fulltextPeriodmeasurePeriodenabled,
        boost::optional<utility::string_t> fulltextPeriodname,
        boost::optional<int32_t> fulltextPeriodmaxPeriodwaitPeriodms,
        boost::optional<double> fulltextPeriodmaxPeriodrate
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="jmxPeriodobjectname"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo>> comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> jmxPeriodobjectname
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="jmxPeriodobjectname"> (optional)</param>
    /// <param name="active"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo>> comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> jmxPeriodobjectname,
        boost::optional<bool> active
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="operation"> (optional)</param>
    /// <param name="emailEnabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo>> comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> operation,
        boost::optional<bool> emailEnabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="operation"> (optional)</param>
    /// <param name="operationIcon"> (optional)</param>
    /// <param name="topicName"> (optional)</param>
    /// <param name="emailEnabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo>> comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> operation,
        boost::optional<utility::string_t> operationIcon,
        boost::optional<utility::string_t> topicName,
        boost::optional<bool> emailEnabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="slingPeriodservletPeriodpaths"> (optional)</param>
    /// <param name="slingPeriodservletPeriodmethods"> (optional)</param>
    /// <param name="cqPerioddamPeriodenablePeriodanonymous"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplLightboxLightboxServletInfo>> comDayCqDamCoreImplLightboxLightboxServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> slingPeriodservletPeriodpaths,
        boost::optional<std::vector<utility::string_t>> slingPeriodservletPeriodmethods,
        boost::optional<bool> cqPerioddamPeriodenablePeriodanonymous
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="graniteData"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo>> comDayCqDamCoreImplMetadataEditorSelectComponentHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> graniteData
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodallowPeriodallPeriodmime"> (optional)</param>
    /// <param name="cqPerioddamPeriodallowedPeriodassetPeriodmimes"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo>> comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPerioddamPeriodallowPeriodallPeriodmime,
        boost::optional<std::vector<utility::string_t>> cqPerioddamPeriodallowedPeriodassetPeriodmimes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPerioddetectPeriodassetPeriodmimePeriodfromPeriodcontent"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo>> comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPerioddamPerioddetectPeriodassetPeriodmimePeriodfromPeriodcontent
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodistimebased"> (optional)</param>
    /// <param name="cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule"> (optional)</param>
    /// <param name="cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodperiodPeriodrule"> (optional)</param>
    /// <param name="cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodrecipient"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplMissingMetadataNotificationJobInfo>> comDayCqDamCoreImplMissingMetadataNotificationJob(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodistimebased,
        boost::optional<utility::string_t> cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodtimebasedPeriodrule,
        boost::optional<int32_t> cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodschedulerPeriodperiodPeriodrule,
        boost::optional<utility::string_t> cqPerioddamPeriodmissingmetadataPeriodnotificationPeriodrecipient
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="processPeriodlabel"> (optional)</param>
    /// <param name="notify_on_Complete"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo>> comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> processPeriodlabel,
        boost::optional<bool> notify_on_Complete
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="mimeTypes"> (optional)</param>
    /// <param name="maxExtract"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplProcessTextExtractionProcessInfo>> comDayCqDamCoreImplProcessTextExtractionProcess(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> mimeTypes,
        boost::optional<int32_t> maxExtract
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="xmpPeriodpropagate"> (optional)</param>
    /// <param name="xmpPeriodexcludes"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplRenditionMakerImplInfo>> comDayCqDamCoreImplRenditionMakerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> xmpPeriodpropagate,
        boost::optional<std::vector<utility::string_t>> xmpPeriodexcludes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="queryBatchSize"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplReportsReportExportServiceInfo>> comDayCqDamCoreImplReportsReportExportService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> queryBatchSize
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="schedulerPeriodexpression"> (optional)</param>
    /// <param name="maxSavedReports"> (optional)</param>
    /// <param name="timeDuration"> (optional)</param>
    /// <param name="enableReportPurge"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplReportsReportPurgeServiceInfo>> comDayCqDamCoreImplReportsReportPurgeService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> schedulerPeriodexpression,
        boost::optional<int32_t> maxSavedReports,
        boost::optional<int32_t> timeDuration,
        boost::optional<bool> enableReportPurge
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplServletAssetDownloadServletInfo>> comDayCqDamCoreImplServletAssetDownloadServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodbatchPeriodstatusPeriodmaxassets"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplServletAssetStatusServletInfo>> comDayCqDamCoreImplServletAssetStatusServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> cqPerioddamPeriodbatchPeriodstatusPeriodmaxassets
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodbatchPeriodindesignPeriodmaxassets"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplServletAssetXMPSearchServletInfo>> comDayCqDamCoreImplServletAssetXMPSearchServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> cqPerioddamPeriodbatchPeriodindesignPeriodmaxassets
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodbatchPeriodmetadataPeriodassetPerioddefault"> (optional)</param>
    /// <param name="cqPerioddamPeriodbatchPeriodmetadataPeriodcollectionPerioddefault"> (optional)</param>
    /// <param name="cqPerioddamPeriodbatchPeriodmetadataPeriodmaxresources"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplServletBatchMetadataServletInfo>> comDayCqDamCoreImplServletBatchMetadataServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPerioddamPeriodbatchPeriodmetadataPeriodassetPerioddefault,
        boost::optional<std::vector<utility::string_t>> cqPerioddamPeriodbatchPeriodmetadataPeriodcollectionPerioddefault,
        boost::optional<int32_t> cqPerioddamPeriodbatchPeriodmetadataPeriodmaxresources
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="slingPeriodservletPeriodresourceTypes"> (optional)</param>
    /// <param name="slingPeriodservletPeriodmethods"> (optional)</param>
    /// <param name="cqPerioddamPerioddrmPeriodenable"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplServletBinaryProviderServletInfo>> comDayCqDamCoreImplServletBinaryProviderServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> slingPeriodservletPeriodresourceTypes,
        boost::optional<std::vector<utility::string_t>> slingPeriodservletPeriodmethods,
        boost::optional<bool> cqPerioddamPerioddrmPeriodenable
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodbatchPeriodcollectionPeriodproperties"> (optional)</param>
    /// <param name="cqPerioddamPeriodbatchPeriodcollectionPeriodmaxcollections"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplServletCollectionServletInfo>> comDayCqDamCoreImplServletCollectionServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPerioddamPeriodbatchPeriodcollectionPeriodproperties,
        boost::optional<int32_t> cqPerioddamPeriodbatchPeriodcollectionPeriodmaxcollections
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodbatchPeriodcollectionsPeriodproperties"> (optional)</param>
    /// <param name="cqPerioddamPeriodbatchPeriodcollectionsPeriodlimit"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplServletCollectionsServletInfo>> comDayCqDamCoreImplServletCollectionsServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPerioddamPeriodbatchPeriodcollectionsPeriodproperties,
        boost::optional<int32_t> cqPerioddamPeriodbatchPeriodcollectionsPeriodlimit
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="more_Info"> (optional)</param>
    /// <param name="SlashmntSlashoverlaySlashdamSlashguiSlashcontentSlashassetsSlashmoreinfoPeriodhtmlSlashDollarLeft_Curly_BracketpathRight_Curly_Bracket"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplServletCompanionServletInfo>> comDayCqDamCoreImplServletCompanionServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> more_Info,
        boost::optional<utility::string_t> SlashmntSlashoverlaySlashdamSlashguiSlashcontentSlashassetsSlashmoreinfoPeriodhtmlSlashDollarLeft_Curly_BracketpathRight_Curly_Bracket
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="detectDuplicate"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplServletCreateAssetServletInfo>> comDayCqDamCoreImplServletCreateAssetServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> detectDuplicate
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodmimePeriodtypePeriodblacklist"> (optional)</param>
    /// <param name="cqPerioddamPeriodemptyPeriodmime"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplServletDamContentDispositionFilterInfo>> comDayCqDamCoreImplServletDamContentDispositionFilter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPeriodmimePeriodtypePeriodblacklist,
        boost::optional<bool> cqPerioddamPeriodemptyPeriodmime
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodcorePeriodguidlookupfilterPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplServletGuidLookupFilterInfo>> comDayCqDamCoreImplServletGuidLookupFilter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPerioddamPeriodcorePeriodguidlookupfilterPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodsyncPeriodworkflowPeriodid"> (optional)</param>
    /// <param name="cqPerioddamPeriodsyncPeriodfolderPeriodtypes"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplServletHealthCheckServletInfo>> comDayCqDamCoreImplServletHealthCheckServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> cqPerioddamPeriodsyncPeriodworkflowPeriodid,
        boost::optional<std::vector<utility::string_t>> cqPerioddamPeriodsyncPeriodfolderPeriodtypes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="slingPeriodservletPeriodresourceTypes"> (optional)</param>
    /// <param name="slingPeriodservletPeriodmethods"> (optional)</param>
    /// <param name="slingPeriodservletPeriodextensions"> (optional)</param>
    /// <param name="slingPeriodservletPeriodselectors"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplServletMetadataGetServletInfo>> comDayCqDamCoreImplServletMetadataGetServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> slingPeriodservletPeriodresourceTypes,
        boost::optional<utility::string_t> slingPeriodservletPeriodmethods,
        boost::optional<utility::string_t> slingPeriodservletPeriodextensions,
        boost::optional<utility::string_t> slingPeriodservletPeriodselectors
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPerioddrmPeriodenable"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo>> comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPerioddamPerioddrmPeriodenable
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="slingPeriodservletPeriodresourceTypes"> (optional)</param>
    /// <param name="slingPeriodservletPeriodmethods"> (optional)</param>
    /// <param name="slingPeriodservletPeriodselectors"> (optional)</param>
    /// <param name="downloadPeriodconfig"> (optional)</param>
    /// <param name="viewPeriodselector"> (optional)</param>
    /// <param name="sendEmail"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplServletResourceCollectionServletInfo>> comDayCqDamCoreImplServletResourceCollectionServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> slingPeriodservletPeriodresourceTypes,
        boost::optional<utility::string_t> slingPeriodservletPeriodmethods,
        boost::optional<utility::string_t> slingPeriodservletPeriodselectors,
        boost::optional<utility::string_t> downloadPeriodconfig,
        boost::optional<utility::string_t> viewPeriodselector,
        boost::optional<bool> sendEmail
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="createPreviewEnabled"> (optional)</param>
    /// <param name="updatePreviewEnabled"> (optional)</param>
    /// <param name="queueSize"> (optional)</param>
    /// <param name="folderPreviewRenditionRegex"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo>> comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> createPreviewEnabled,
        boost::optional<bool> updatePreviewEnabled,
        boost::optional<int32_t> queueSize,
        boost::optional<utility::string_t> folderPreviewRenditionRegex
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodconfigPeriodunzipPeriodmaxuncompressedsize"> (optional)</param>
    /// <param name="cqPerioddamPeriodconfigPeriodunzipPeriodencoding"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreImplUnzipUnzipConfigInfo>> comDayCqDamCoreImplUnzipUnzipConfig(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> cqPerioddamPeriodconfigPeriodunzipPeriodmaxuncompressedsize,
        boost::optional<utility::string_t> cqPerioddamPeriodconfigPeriodunzipPeriodencoding
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="processPeriodlabel"> (optional)</param>
    /// <param name="cqPerioddamPeriodenablePeriodsha1"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo>> comDayCqDamCoreProcessExifToolExtractMetadataProcess(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> processPeriodlabel,
        boost::optional<bool> cqPerioddamPeriodenablePeriodsha1
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="processPeriodlabel"> (optional)</param>
    /// <param name="cqPerioddamPeriodenablePeriodsha1"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreProcessExtractMetadataProcessInfo>> comDayCqDamCoreProcessExtractMetadataProcess(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> processPeriodlabel,
        boost::optional<bool> cqPerioddamPeriodenablePeriodsha1
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="processPeriodlabel"> (optional)</param>
    /// <param name="cqPerioddamPeriodenablePeriodsha1"> (optional)</param>
    /// <param name="cqPerioddamPeriodmetadataPeriodxssprotectedPeriodproperties"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamCoreProcessMetadataProcessorProcessInfo>> comDayCqDamCoreProcessMetadataProcessorProcess(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> processPeriodlabel,
        boost::optional<bool> cqPerioddamPeriodenablePeriodsha1,
        boost::optional<std::vector<utility::string_t>> cqPerioddamPeriodmetadataPeriodxssprotectedPeriodproperties
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="executablePeriodsearchpath"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamHandlerFfmpegLocatorImplInfo>> comDayCqDamHandlerFfmpegLocatorImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> executablePeriodsearchpath
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="eventPeriodfilter"> (optional)</param>
    /// <param name="fontmgrPeriodsystemPeriodfontPerioddir"> (optional)</param>
    /// <param name="fontmgrPeriodadobePeriodfontPerioddir"> (optional)</param>
    /// <param name="fontmgrPeriodcustomerPeriodfontPerioddir"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo>> comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> eventPeriodfilter,
        boost::optional<std::vector<utility::string_t>> fontmgrPeriodsystemPeriodfontPerioddir,
        boost::optional<utility::string_t> fontmgrPeriodadobePeriodfontPerioddir,
        boost::optional<utility::string_t> fontmgrPeriodcustomerPeriodfontPerioddir
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="rasterPeriodannotation"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamHandlerStandardPdfPdfHandlerInfo>> comDayCqDamHandlerStandardPdfPdfHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> rasterPeriodannotation
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="rasterPeriodannotation"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamHandlerStandardPsPostScriptHandlerInfo>> comDayCqDamHandlerStandardPsPostScriptHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> rasterPeriodannotation
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="largeFileThreshold"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamHandlerStandardPsdPsdHandlerInfo>> comDayCqDamHandlerStandardPsdPsdHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> largeFileThreshold
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enablePeriodmultisession"> (optional)</param>
    /// <param name="idsPeriodccPeriodenable"> (optional)</param>
    /// <param name="enablePeriodretry"> (optional)</param>
    /// <param name="enablePeriodretryPeriodscripterror"> (optional)</param>
    /// <param name="externalizerPerioddomainPeriodcqhost"> (optional)</param>
    /// <param name="externalizerPerioddomainPeriodhttp"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamIdsImplIDSJobProcessorInfo>> comDayCqDamIdsImplIDSJobProcessor(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enablePeriodmultisession,
        boost::optional<bool> idsPeriodccPeriodenable,
        boost::optional<bool> enablePeriodretry,
        boost::optional<bool> enablePeriodretryPeriodscripterror,
        boost::optional<utility::string_t> externalizerPerioddomainPeriodcqhost,
        boost::optional<utility::string_t> externalizerPerioddomainPeriodhttp
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="maxPerioderrorsPeriodtoPeriodblacklist"> (optional)</param>
    /// <param name="retryPeriodintervalPeriodtoPeriodwhitelist"> (optional)</param>
    /// <param name="connectPeriodtimeout"> (optional)</param>
    /// <param name="socketPeriodtimeout"> (optional)</param>
    /// <param name="processPeriodlabel"> (optional)</param>
    /// <param name="connectionPeriodusePeriodmax"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamIdsImplIDSPoolManagerImplInfo>> comDayCqDamIdsImplIDSPoolManagerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> maxPerioderrorsPeriodtoPeriodblacklist,
        boost::optional<int32_t> retryPeriodintervalPeriodtoPeriodwhitelist,
        boost::optional<int32_t> connectPeriodtimeout,
        boost::optional<int32_t> socketPeriodtimeout,
        boost::optional<utility::string_t> processPeriodlabel,
        boost::optional<int32_t> connectionPeriodusePeriodmax
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="processPeriodlabel"> (optional)</param>
    /// <param name="extractPeriodpages"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo>> comDayCqDamInddImplHandlerIndesignXMPHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> processPeriodlabel,
        boost::optional<bool> extractPeriodpages
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="snippetcreationPeriodmaxcollections"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamInddImplServletSnippetCreationServletInfo>> comDayCqDamInddImplServletSnippetCreationServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> snippetcreationPeriodmaxcollections
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="processPeriodlabel"> (optional)</param>
    /// <param name="cqPerioddamPeriodinddPeriodpagesPeriodregex"> (optional)</param>
    /// <param name="idsPeriodjobPerioddecoupled"> (optional)</param>
    /// <param name="idsPeriodjobPeriodworkflowPeriodmodel"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamInddProcessINDDMediaExtractProcessInfo>> comDayCqDamInddProcessINDDMediaExtractProcess(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> processPeriodlabel,
        boost::optional<utility::string_t> cqPerioddamPeriodinddPeriodpagesPeriodregex,
        boost::optional<bool> idsPeriodjobPerioddecoupled,
        boost::optional<utility::string_t> idsPeriodjobPeriodworkflowPeriodmodel
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="batchPeriodcommitPeriodsize"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo>> comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> batchPeriodcommitPeriodsize
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="schedulerPeriodexpression"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo>> comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> schedulerPeriodexpression
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="deletePeriodzipPeriodfile"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo>> comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> deletePeriodzipPeriodfile
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriods7damPerioddynamicmediaconfigeventlistenerPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo>> comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPerioddamPeriods7damPerioddynamicmediaconfigeventlistenerPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="schedulerPeriodexpression"> (optional)</param>
    /// <param name="schedulerPeriodconcurrent"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo>> comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> schedulerPeriodexpression,
        boost::optional<bool> schedulerPeriodconcurrent
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="slingPeriodpostPeriodoperation"> (optional)</param>
    /// <param name="slingPeriodservletPeriodmethods"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo>> comDayCqDamS7damCommonPostServletsSetCreateHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> slingPeriodpostPeriodoperation,
        boost::optional<utility::string_t> slingPeriodservletPeriodmethods
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="slingPeriodpostPeriodoperation"> (optional)</param>
    /// <param name="slingPeriodservletPeriodmethods"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo>> comDayCqDamS7damCommonPostServletsSetModifyHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> slingPeriodpostPeriodoperation,
        boost::optional<utility::string_t> slingPeriodservletPeriodmethods
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="processPeriodlabel"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo>> comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> processPeriodlabel
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriods7damPerioddamchangeeventlistenerPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo>> comDayCqDamS7damCommonS7damDamChangeEventListener(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPerioddamPeriods7damPerioddamchangeeventlistenerPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="slingPeriodservletPeriodpaths"> (optional)</param>
    /// <param name="slingPeriodservletPeriodmethods"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo>> comDayCqDamS7damCommonServletsS7damProductInfoServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> slingPeriodservletPeriodpaths,
        boost::optional<utility::string_t> slingPeriodservletPeriodmethods
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodminsizePeriodname"> (optional)</param>
    /// <param name="cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodpartsizePeriodname"> (optional)</param>
    /// <param name="cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodnumthreadPeriodname"> (optional)</param>
    /// <param name="cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodreadtimeoutPeriodname"> (optional)</param>
    /// <param name="cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodconnectiontimeoutPeriodname"> (optional)</param>
    /// <param name="cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodmaxretrycountPeriodname"> (optional)</param>
    /// <param name="cqPerioddamPeriods7damPeriodvideoproxyclientservicePerioduploadprogressPeriodintervalPeriodname"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo>> comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodminsizePeriodname,
        boost::optional<int32_t> cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodpartsizePeriodname,
        boost::optional<int32_t> cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodmultipartuploadPeriodnumthreadPeriodname,
        boost::optional<int32_t> cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodreadtimeoutPeriodname,
        boost::optional<int32_t> cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodconnectiontimeoutPeriodname,
        boost::optional<int32_t> cqPerioddamPeriods7damPeriodvideoproxyclientservicePeriodhttpPeriodmaxretrycountPeriodname,
        boost::optional<int32_t> cqPerioddamPeriods7damPeriodvideoproxyclientservicePerioduploadprogressPeriodintervalPeriodname
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodnofilterPeriodname"> (optional)</param>
    /// <param name="cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodwithfilterPeriodname"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamScene7ImplScene7APIClientImplInfo>> comDayCqDamScene7ImplScene7APIClientImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodnofilterPeriodname,
        boost::optional<int32_t> cqPerioddamPeriodscene7PeriodapiclientPeriodrecordsperpagePeriodwithfilterPeriodname
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodscene7PeriodassetmimetypeservicePeriodmapping"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo>> comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPerioddamPeriodscene7PeriodassetmimetypeservicePeriodmapping
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodscene7PeriodconfigurationeventlistenerPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo>> comDayCqDamScene7ImplScene7ConfigurationEventListener(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPerioddamPeriodscene7PeriodconfigurationeventlistenerPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodenabled"> (optional)</param>
    /// <param name="cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodobservedPeriodpaths"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo>> comDayCqDamScene7ImplScene7DamChangeEventListener(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodenabled,
        boost::optional<std::vector<utility::string_t>> cqPerioddamPeriodscene7PerioddamchangeeventlistenerPeriodobservedPeriodpaths
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="scene7FlashTemplatesPeriodrti"> (optional)</param>
    /// <param name="scene7FlashTemplatesPeriodrsi"> (optional)</param>
    /// <param name="scene7FlashTemplatesPeriodrb"> (optional)</param>
    /// <param name="scene7FlashTemplatesPeriodrurl"> (optional)</param>
    /// <param name="scene7FlashTemplatePeriodurlFormatParameter"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo>> comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> scene7FlashTemplatesPeriodrti,
        boost::optional<utility::string_t> scene7FlashTemplatesPeriodrsi,
        boost::optional<utility::string_t> scene7FlashTemplatesPeriodrb,
        boost::optional<utility::string_t> scene7FlashTemplatesPeriodrurl,
        boost::optional<utility::string_t> scene7FlashTemplatePeriodurlFormatParameter
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPerioddamPeriodscene7PerioduploadservicePeriodactivejobtimeoutPeriodlabel"> (optional)</param>
    /// <param name="cqPerioddamPeriodscene7PerioduploadservicePeriodconnectionmaxperroutePeriodlabel"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamScene7ImplScene7UploadServiceImplInfo>> comDayCqDamScene7ImplScene7UploadServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> cqPerioddamPeriodscene7PerioduploadservicePeriodactivejobtimeoutPeriodlabel,
        boost::optional<int32_t> cqPerioddamPeriodscene7PerioduploadservicePeriodconnectionmaxperroutePeriodlabel
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="getCacheExpirationUnit"> (optional)</param>
    /// <param name="getCacheExpirationValue"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo>> comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> getCacheExpirationUnit,
        boost::optional<int32_t> getCacheExpirationValue
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="locale"> (optional)</param>
    /// <param name="imsConfig"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo>> comDayCqDamStockIntegrationImplConfigurationStockConfiguration(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> locale,
        boost::optional<utility::string_t> imsConfig
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqDamVideoImplServletVideoTestServletInfo>> comDayCqDamVideoImplServletVideoTestServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="maxWidth"> (optional)</param>
    /// <param name="maxHeight"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqExtwidgetServletsImageSpriteServletInfo>> comDayCqExtwidgetServletsImageSpriteServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> maxWidth,
        boost::optional<int32_t> maxHeight
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="fontpath"> (optional)</param>
    /// <param name="oversamplingFactor"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqImageInternalFontFontHelperInfo>> comDayCqImageInternalFontFontHelper(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> fontpath,
        boost::optional<int32_t> oversamplingFactor
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="clusterPeriodlevelPeriodenable"> (optional)</param>
    /// <param name="clusterPeriodmasterPeriodlevel"> (optional)</param>
    /// <param name="clusterPeriodslavePeriodlevel"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqJcrclustersupportClusterStartLevelControllerInfo>> comDayCqJcrclustersupportClusterStartLevelController(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> clusterPeriodlevelPeriodenable,
        boost::optional<int32_t> clusterPeriodmasterPeriodlevel,
        boost::optional<int32_t> clusterPeriodslavePeriodlevel
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="smtpPeriodhost"> (optional)</param>
    /// <param name="smtpPeriodport"> (optional)</param>
    /// <param name="smtpPerioduser"> (optional)</param>
    /// <param name="smtpPeriodpassword"> (optional)</param>
    /// <param name="fromPeriodaddress"> (optional)</param>
    /// <param name="smtpPeriodssl"> (optional)</param>
    /// <param name="smtpPeriodstarttls"> (optional)</param>
    /// <param name="debugPeriodemail"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqMailerDefaultMailServiceInfo>> comDayCqMailerDefaultMailService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> smtpPeriodhost,
        boost::optional<int32_t> smtpPeriodport,
        boost::optional<utility::string_t> smtpPerioduser,
        boost::optional<utility::string_t> smtpPeriodpassword,
        boost::optional<utility::string_t> fromPeriodaddress,
        boost::optional<bool> smtpPeriodssl,
        boost::optional<bool> smtpPeriodstarttls,
        boost::optional<bool> debugPeriodemail
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="maxPeriodrecipientPeriodcount"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqMailerImplCqMailingServiceInfo>> comDayCqMailerImplCqMailingService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> maxPeriodrecipientPeriodcount
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="mailerPeriodemailPeriodcharset"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo>> comDayCqMailerImplEmailCqEmailTemplateFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> mailerPeriodemailPeriodcharset
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="mailerPeriodemailPeriodembed"> (optional)</param>
    /// <param name="mailerPeriodemailPeriodcharset"> (optional)</param>
    /// <param name="mailerPeriodemailPeriodretrieverUserID"> (optional)</param>
    /// <param name="mailerPeriodemailPeriodretrieverUserPWD"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo>> comDayCqMailerImplEmailCqRetrieverTemplateFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> mailerPeriodemailPeriodembed,
        boost::optional<utility::string_t> mailerPeriodemailPeriodcharset,
        boost::optional<utility::string_t> mailerPeriodemailPeriodretrieverUserID,
        boost::optional<utility::string_t> mailerPeriodemailPeriodretrieverUserPWD
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="aemPeriodmcmPeriodcampaignPeriodformConstraints"> (optional)</param>
    /// <param name="aemPeriodmcmPeriodcampaignPeriodpublicUrl"> (optional)</param>
    /// <param name="aemPeriodmcmPeriodcampaignPeriodrelaxedSSL"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqMcmCampaignImplIntegrationConfigImplInfo>> comDayCqMcmCampaignImplIntegrationConfigImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> aemPeriodmcmPeriodcampaignPeriodformConstraints,
        boost::optional<utility::string_t> aemPeriodmcmPeriodcampaignPeriodpublicUrl,
        boost::optional<bool> aemPeriodmcmPeriodcampaignPeriodrelaxedSSL
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo>> comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="fromPeriodaddress"> (optional)</param>
    /// <param name="senderPeriodhost"> (optional)</param>
    /// <param name="maxPeriodbouncePeriodcount"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo>> comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> fromPeriodaddress,
        boost::optional<utility::string_t> senderPeriodhost,
        boost::optional<utility::string_t> maxPeriodbouncePeriodcount
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="experiencePeriodindirection"> (optional)</param>
    /// <param name="touchpointPeriodindirection"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqMcmImplMCMConfigurationInfo>> comDayCqMcmImplMCMConfiguration(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> experiencePeriodindirection,
        boost::optional<std::vector<utility::string_t>> touchpointPeriodindirection
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    /// <param name="componentPeriodresourceType"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo>> comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern,
        boost::optional<utility::string_t> componentPeriodresourceType
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    /// <param name="componentPeriodresourceType"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo>> comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern,
        boost::optional<utility::string_t> componentPeriodresourceType
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo>> comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo>> comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    /// <param name="componentPeriodresourceType"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo>> comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern,
        boost::optional<utility::string_t> componentPeriodresourceType
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="eventPeriodfilter"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqNotificationImplNotificationServiceImplInfo>> comDayCqNotificationImplNotificationServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> eventPeriodfilter
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="forcelocation"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo>> comDayCqPersonalizationImplServletsTargetingConfigurationServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> forcelocation
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="id"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    /// <param name="reference"> (optional)</param>
    /// <param name="interval"> (optional)</param>
    /// <param name="expression"> (optional)</param>
    /// <param name="source"> (optional)</param>
    /// <param name="target"> (optional)</param>
    /// <param name="login"> (optional)</param>
    /// <param name="password"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqPollingImporterImplManagedPollConfigImplInfo>> comDayCqPollingImporterImplManagedPollConfigImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> id,
        boost::optional<bool> enabled,
        boost::optional<bool> reference,
        boost::optional<int32_t> interval,
        boost::optional<utility::string_t> expression,
        boost::optional<utility::string_t> source,
        boost::optional<utility::string_t> target,
        boost::optional<utility::string_t> login,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="importerPerioduser"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqPollingImporterImplManagedPollingImporterImplInfo>> comDayCqPollingImporterImplManagedPollingImporterImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> importerPerioduser
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="importerPeriodminPeriodinterval"> (optional)</param>
    /// <param name="importerPerioduser"> (optional)</param>
    /// <param name="excludePeriodpaths"> (optional)</param>
    /// <param name="includePeriodpaths"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqPollingImporterImplPollingImporterImplInfo>> comDayCqPollingImporterImplPollingImporterImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> importerPeriodminPeriodinterval,
        boost::optional<utility::string_t> importerPerioduser,
        boost::optional<std::vector<utility::string_t>> excludePeriodpaths,
        boost::optional<std::vector<utility::string_t>> includePeriodpaths
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqReplicationAuditReplicationEventListenerInfo>> comDayCqReplicationAuditReplicationEventListener(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="host"> (optional)</param>
    /// <param name="port"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqReplicationContentStaticContentBuilderInfo>> comDayCqReplicationContentStaticContentBuilder(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> host,
        boost::optional<int32_t> port
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="jobPeriodtopics"> (optional)</param>
    /// <param name="serviceUserPeriodtarget"> (optional)</param>
    /// <param name="agentProviderPeriodtarget"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqReplicationImplAgentManagerImplInfo>> comDayCqReplicationImplAgentManagerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> jobPeriodtopics,
        boost::optional<utility::string_t> serviceUserPeriodtarget,
        boost::optional<utility::string_t> agentProviderPeriodtarget
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="binaryPeriodthreshold"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo>> comDayCqReplicationImplContentDurboBinaryLessContentBuilder(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> binaryPeriodthreshold
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="preservePeriodhierarchyPeriodnodes"> (optional)</param>
    /// <param name="ignorePeriodversioning"> (optional)</param>
    /// <param name="importPeriodacl"> (optional)</param>
    /// <param name="savePeriodthreshold"> (optional)</param>
    /// <param name="preservePerioduserPeriodpaths"> (optional)</param>
    /// <param name="preservePerioduuid"> (optional)</param>
    /// <param name="preservePerioduuidPeriodnodetypes"> (optional)</param>
    /// <param name="preservePerioduuidPeriodsubtrees"> (optional)</param>
    /// <param name="autoPeriodcommit"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo>> comDayCqReplicationImplContentDurboDurboImportConfigurationProv(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> preservePeriodhierarchyPeriodnodes,
        boost::optional<bool> ignorePeriodversioning,
        boost::optional<bool> importPeriodacl,
        boost::optional<int32_t> savePeriodthreshold,
        boost::optional<bool> preservePerioduserPeriodpaths,
        boost::optional<bool> preservePerioduuid,
        boost::optional<std::vector<utility::string_t>> preservePerioduuidPeriodnodetypes,
        boost::optional<std::vector<utility::string_t>> preservePerioduuidPeriodsubtrees,
        boost::optional<bool> autoPeriodcommit
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="replicationPeriodcontentPerioduseFileStorage"> (optional)</param>
    /// <param name="replicationPeriodcontentPeriodmaxCommitAttempts"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo>> comDayCqReplicationImplReplicationContentFactoryProviderImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> replicationPeriodcontentPerioduseFileStorage,
        boost::optional<int32_t> replicationPeriodcontentPeriodmaxCommitAttempts
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="receiverPeriodtmpfilePeriodthreshold"> (optional)</param>
    /// <param name="receiverPeriodpackagesPeriodusePeriodinstall"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqReplicationImplReplicationReceiverImplInfo>> comDayCqReplicationImplReplicationReceiverImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> receiverPeriodtmpfilePeriodthreshold,
        boost::optional<bool> receiverPeriodpackagesPeriodusePeriodinstall
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="distributeEvents"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqReplicationImplReplicatorImplInfo>> comDayCqReplicationImplReplicatorImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> distributeEvents
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="schedulerPeriodperiod"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqReplicationImplReverseReplicatorInfo>> comDayCqReplicationImplReverseReplicator(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> schedulerPeriodperiod
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="disabledPeriodcipherPeriodsuites"> (optional)</param>
    /// <param name="enabledPeriodcipherPeriodsuites"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo>> comDayCqReplicationImplTransportBinaryLessTransportHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> disabledPeriodcipherPeriodsuites,
        boost::optional<std::vector<utility::string_t>> enabledPeriodcipherPeriodsuites
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="disabledPeriodcipherPeriodsuites"> (optional)</param>
    /// <param name="enabledPeriodcipherPeriodsuites"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqReplicationImplTransportHttpInfo>> comDayCqReplicationImplTransportHttp(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> disabledPeriodcipherPeriodsuites,
        boost::optional<std::vector<utility::string_t>> enabledPeriodcipherPeriodsuites
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="repcachePeriodenable"> (optional)</param>
    /// <param name="repcachePeriodttl"> (optional)</param>
    /// <param name="repcachePeriodmax"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqReportingImplCacheCacheImplInfo>> comDayCqReportingImplCacheCacheImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> repcachePeriodenable,
        boost::optional<int32_t> repcachePeriodttl,
        boost::optional<int32_t> repcachePeriodmax
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="repconfPeriodtimezone"> (optional)</param>
    /// <param name="repconfPeriodlocale"> (optional)</param>
    /// <param name="repconfPeriodsnapshots"> (optional)</param>
    /// <param name="repconfPeriodrepdir"> (optional)</param>
    /// <param name="repconfPeriodhourofday"> (optional)</param>
    /// <param name="repconfPeriodminofhour"> (optional)</param>
    /// <param name="repconfPeriodmaxrows"> (optional)</param>
    /// <param name="repconfPeriodfakedata"> (optional)</param>
    /// <param name="repconfPeriodsnapshotuser"> (optional)</param>
    /// <param name="repconfPeriodenforcesnapshotuser"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqReportingImplConfigServiceImplInfo>> comDayCqReportingImplConfigServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> repconfPeriodtimezone,
        boost::optional<utility::string_t> repconfPeriodlocale,
        boost::optional<utility::string_t> repconfPeriodsnapshots,
        boost::optional<utility::string_t> repconfPeriodrepdir,
        boost::optional<int32_t> repconfPeriodhourofday,
        boost::optional<int32_t> repconfPeriodminofhour,
        boost::optional<int32_t> repconfPeriodmaxrows,
        boost::optional<bool> repconfPeriodfakedata,
        boost::optional<utility::string_t> repconfPeriodsnapshotuser,
        boost::optional<bool> repconfPeriodenforcesnapshotuser
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="requestPeriodlogPeriodoutput"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqReportingImplRLogAnalyzerInfo>> comDayCqReportingImplRLogAnalyzer(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> requestPeriodlogPeriodoutput
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="schedulerPeriodperiod"> (optional)</param>
    /// <param name="schedulerPeriodconcurrent"> (optional)</param>
    /// <param name="servicePeriodbadLinkToleranceInterval"> (optional)</param>
    /// <param name="servicePeriodcheckOverridePatterns"> (optional)</param>
    /// <param name="servicePeriodcacheBrokenInternalLinks"> (optional)</param>
    /// <param name="servicePeriodspecialLinkPrefix"> (optional)</param>
    /// <param name="servicePeriodspecialLinkPatterns"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo>> comDayCqRewriterLinkcheckerImplLinkCheckerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> schedulerPeriodperiod,
        boost::optional<bool> schedulerPeriodconcurrent,
        boost::optional<int32_t> servicePeriodbadLinkToleranceInterval,
        boost::optional<std::vector<utility::string_t>> servicePeriodcheckOverridePatterns,
        boost::optional<bool> servicePeriodcacheBrokenInternalLinks,
        boost::optional<std::vector<utility::string_t>> servicePeriodspecialLinkPrefix,
        boost::optional<std::vector<utility::string_t>> servicePeriodspecialLinkPatterns
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="schedulerPeriodperiod"> (optional)</param>
    /// <param name="schedulerPeriodconcurrent"> (optional)</param>
    /// <param name="goodLinkTestInterval"> (optional)</param>
    /// <param name="badLinkTestInterval"> (optional)</param>
    /// <param name="linkUnusedInterval"> (optional)</param>
    /// <param name="connectionPeriodtimeout"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo>> comDayCqRewriterLinkcheckerImplLinkCheckerTask(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> schedulerPeriodperiod,
        boost::optional<bool> schedulerPeriodconcurrent,
        boost::optional<int32_t> goodLinkTestInterval,
        boost::optional<int32_t> badLinkTestInterval,
        boost::optional<int32_t> linkUnusedInterval,
        boost::optional<int32_t> connectionPeriodtimeout
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="linkcheckertransformerPerioddisableRewriting"> (optional)</param>
    /// <param name="linkcheckertransformerPerioddisableChecking"> (optional)</param>
    /// <param name="linkcheckertransformerPeriodmapCacheSize"> (optional)</param>
    /// <param name="linkcheckertransformerPeriodstrictExtensionCheck"> (optional)</param>
    /// <param name="linkcheckertransformerPeriodstripHtmltExtension"> (optional)</param>
    /// <param name="linkcheckertransformerPeriodrewriteElements"> (optional)</param>
    /// <param name="linkcheckertransformerPeriodstripExtensionPathBlacklist"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo>> comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> linkcheckertransformerPerioddisableRewriting,
        boost::optional<bool> linkcheckertransformerPerioddisableChecking,
        boost::optional<int32_t> linkcheckertransformerPeriodmapCacheSize,
        boost::optional<bool> linkcheckertransformerPeriodstrictExtensionCheck,
        boost::optional<bool> linkcheckertransformerPeriodstripHtmltExtension,
        boost::optional<std::vector<utility::string_t>> linkcheckertransformerPeriodrewriteElements,
        boost::optional<std::vector<utility::string_t>> linkcheckertransformerPeriodstripExtensionPathBlacklist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodmaxLinksPerHost"> (optional)</param>
    /// <param name="servicePeriodsaveExternalLinkReferences"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo>> comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodmaxLinksPerHost,
        boost::optional<bool> servicePeriodsaveExternalLinkReferences
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="htmlparserPeriodprocessTags"> (optional)</param>
    /// <param name="htmlparserPeriodpreserveCamelCase"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqRewriterProcessorImplHtmlParserFactoryInfo>> comDayCqRewriterProcessorImplHtmlParserFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> htmlparserPeriodprocessTags,
        boost::optional<bool> htmlparserPeriodpreserveCamelCase
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="excerptPeriodproperties"> (optional)</param>
    /// <param name="cachePeriodmaxPeriodentries"> (optional)</param>
    /// <param name="cachePeriodentryPeriodlifetime"> (optional)</param>
    /// <param name="xpathPeriodunion"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqSearchImplBuilderQueryBuilderImplInfo>> comDayCqSearchImplBuilderQueryBuilderImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> excerptPeriodproperties,
        boost::optional<int32_t> cachePeriodmaxPeriodentries,
        boost::optional<int32_t> cachePeriodentryPeriodlifetime,
        boost::optional<bool> xpathPeriodunion
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="pathBuilderPeriodtarget"> (optional)</param>
    /// <param name="suggestPeriodbasepath"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo>> comDayCqSearchSuggestImplSuggestionIndexManagerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> pathBuilderPeriodtarget,
        boost::optional<utility::string_t> suggestPeriodbasepath
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodsearchpromotePeriodconfighandlerPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo>> comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPeriodsearchpromotePeriodconfighandlerPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodsearchpromotePeriodconfigurationPeriodserverPerioduri"> (optional)</param>
    /// <param name="cqPeriodsearchpromotePeriodconfigurationPeriodenvironment"> (optional)</param>
    /// <param name="connectionPeriodtimeout"> (optional)</param>
    /// <param name="socketPeriodtimeout"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo>> comDayCqSearchpromoteImplSearchPromoteServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> cqPeriodsearchpromotePeriodconfigurationPeriodserverPerioduri,
        boost::optional<utility::string_t> cqPeriodsearchpromotePeriodconfigurationPeriodenvironment,
        boost::optional<int32_t> connectionPeriodtimeout,
        boost::optional<int32_t> socketPeriodtimeout
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodaclsetupPeriodrules"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqSecurityACLSetupInfo>> comDayCqSecurityACLSetup(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPeriodaclsetupPeriodrules
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="schedulerPeriodperiod"> (optional)</param>
    /// <param name="schedulerPeriodconcurrent"> (optional)</param>
    /// <param name="path"> (optional)</param>
    /// <param name="workspace"> (optional)</param>
    /// <param name="keywordsPath"> (optional)</param>
    /// <param name="asyncEntries"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqStatisticsImplStatisticsServiceImplInfo>> comDayCqStatisticsImplStatisticsServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> schedulerPeriodperiod,
        boost::optional<bool> schedulerPeriodconcurrent,
        boost::optional<utility::string_t> path,
        boost::optional<utility::string_t> workspace,
        boost::optional<utility::string_t> keywordsPath,
        boost::optional<bool> asyncEntries
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="validationPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqTaggingImplJcrTagManagerFactoryImplInfo>> comDayCqTaggingImplJcrTagManagerFactoryImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> validationPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="ignorePath"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo>> comDayCqTaggingImplSearchTagPredicateEvaluator(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> ignorePath
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="schedulerPeriodexpression"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqTaggingImplTagGarbageCollectorInfo>> comDayCqTaggingImplTagGarbageCollector(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> schedulerPeriodexpression
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodpagesupdatehandlerPeriodimageresourcetypes"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo>> comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPeriodpagesupdatehandlerPeriodimageresourcetypes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodlinks"> (optional)</param>
    /// <param name="cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodclientlibs"> (optional)</param>
    /// <param name="cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodimages"> (optional)</param>
    /// <param name="cqPeriodcontentsyncPeriodpathrewritertransformerPeriodattributePeriodpattern"> (optional)</param>
    /// <param name="cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodpattern"> (optional)</param>
    /// <param name="cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodreplace"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo>> comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodlinks,
        boost::optional<std::vector<utility::string_t>> cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodclientlibs,
        boost::optional<std::vector<utility::string_t>> cqPeriodcontentsyncPeriodpathrewritertransformerPeriodmappingPeriodimages,
        boost::optional<utility::string_t> cqPeriodcontentsyncPeriodpathrewritertransformerPeriodattributePeriodpattern,
        boost::optional<utility::string_t> cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodpattern,
        boost::optional<utility::string_t> cqPeriodcontentsyncPeriodpathrewritertransformerPeriodclientlibraryPeriodreplace
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="authoringUIModeServicePerioddefault"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo>> comDayCqWcmCoreImplAuthoringUIModeServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> authoringUIModeServicePerioddefault
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="wcmcommandservletPerioddeleteWhitelist"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplCommandsWCMCommandServletInfo>> comDayCqWcmCoreImplCommandsWCMCommandServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> wcmcommandservletPerioddeleteWhitelist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="dimPerioddefaultPeriodmode"> (optional)</param>
    /// <param name="dimPeriodappcachePeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo>> comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> dimPerioddefaultPeriodmode,
        boost::optional<bool> dimPeriodappcachePeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="configured"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplEventPageEventAuditListenerInfo>> comDayCqWcmCoreImplEventPageEventAuditListener(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> configured
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="paths"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplEventPagePostProcessorInfo>> comDayCqWcmCoreImplEventPagePostProcessor(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> paths
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="paths"> (optional)</param>
    /// <param name="excludedPaths"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo>> comDayCqWcmCoreImplEventRepositoryChangeEventListener(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> paths,
        boost::optional<std::vector<utility::string_t>> excludedPaths
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="paths"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplEventTemplatePostProcessorInfo>> comDayCqWcmCoreImplEventTemplatePostProcessor(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> paths
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="langmgrPeriodlistPeriodpath"> (optional)</param>
    /// <param name="langmgrPeriodcountryPerioddefault"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplLanguageManagerImplInfo>> comDayCqWcmCoreImplLanguageManagerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> langmgrPeriodlistPeriodpath,
        boost::optional<std::vector<utility::string_t>> langmgrPeriodcountryPerioddefault
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="linkPeriodexpiredPeriodprefix"> (optional)</param>
    /// <param name="linkPeriodexpiredPeriodremove"> (optional)</param>
    /// <param name="linkPeriodexpiredPeriodsuffix"> (optional)</param>
    /// <param name="linkPeriodinvalidPeriodprefix"> (optional)</param>
    /// <param name="linkPeriodinvalidPeriodremove"> (optional)</param>
    /// <param name="linkPeriodinvalidPeriodsuffix"> (optional)</param>
    /// <param name="linkPeriodpredatedPeriodprefix"> (optional)</param>
    /// <param name="linkPeriodpredatedPeriodremove"> (optional)</param>
    /// <param name="linkPeriodpredatedPeriodsuffix"> (optional)</param>
    /// <param name="linkPeriodwcmmodes"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo>> comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> linkPeriodexpiredPeriodprefix,
        boost::optional<bool> linkPeriodexpiredPeriodremove,
        boost::optional<utility::string_t> linkPeriodexpiredPeriodsuffix,
        boost::optional<utility::string_t> linkPeriodinvalidPeriodprefix,
        boost::optional<bool> linkPeriodinvalidPeriodremove,
        boost::optional<utility::string_t> linkPeriodinvalidPeriodsuffix,
        boost::optional<utility::string_t> linkPeriodpredatedPeriodprefix,
        boost::optional<bool> linkPeriodpredatedPeriodremove,
        boost::optional<utility::string_t> linkPeriodpredatedPeriodsuffix,
        boost::optional<std::vector<utility::string_t>> linkPeriodwcmmodes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="pagePeriodinfoPeriodproviderPeriodpropertyPeriodregexPerioddefault"> (optional)</param>
    /// <param name="pagePeriodinfoPeriodproviderPeriodpropertyPeriodname"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo>> comDayCqWcmCoreImplPagePageInfoAggregatorImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> pagePeriodinfoPeriodproviderPeriodpropertyPeriodregexPerioddefault,
        boost::optional<utility::string_t> pagePeriodinfoPeriodproviderPeriodpropertyPeriodname
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="illegalCharMapping"> (optional)</param>
    /// <param name="pageSubTreeActivationCheck"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo>> comDayCqWcmCoreImplPagePageManagerFactoryImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> illegalCharMapping,
        boost::optional<bool> pageSubTreeActivationCheck
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="contentReferenceConfigPeriodresourceTypes"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo>> comDayCqWcmCoreImplReferencesContentContentReferenceConfig(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> contentReferenceConfigPeriodresourceTypes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="damPeriodshowexpired"> (optional)</param>
    /// <param name="damPeriodshowhidden"> (optional)</param>
    /// <param name="tagTitleSearch"> (optional)</param>
    /// <param name="guessTotal"> (optional)</param>
    /// <param name="damPeriodexpiryProperty"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo>> comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> damPeriodshowexpired,
        boost::optional<bool> damPeriodshowhidden,
        boost::optional<bool> tagTitleSearch,
        boost::optional<utility::string_t> guessTotal,
        boost::optional<utility::string_t> damPeriodexpiryProperty
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="itemPeriodresourcePeriodtypes"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo>> comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> itemPeriodresourcePeriodtypes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="guessTotal"> (optional)</param>
    /// <param name="tagTitleSearch"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo>> comDayCqWcmCoreImplServletsContentfinderPageViewHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> guessTotal,
        boost::optional<bool> tagTitleSearch
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="scope"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplServletsFindReplaceServletInfo>> comDayCqWcmCoreImplServletsFindReplaceServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> scope
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="referencesearchservletPeriodmaxReferencesPerPage"> (optional)</param>
    /// <param name="referencesearchservletPeriodmaxPages"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplServletsReferenceSearchServletInfo>> comDayCqWcmCoreImplServletsReferenceSearchServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> referencesearchservletPeriodmaxReferencesPerPage,
        boost::optional<int32_t> referencesearchservletPeriodmaxPages
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="workspace"> (optional)</param>
    /// <param name="dimensions"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplServletsThumbnailServletInfo>> comDayCqWcmCoreImplServletsThumbnailServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> workspace,
        boost::optional<std::vector<utility::string_t>> dimensions
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="nonValidChars"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo>> comDayCqWcmCoreImplUtilsDefaultPageNameValidator(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> nonValidChars
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="defaultPeriodexternalizerPerioddomain"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo>> comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> defaultPeriodexternalizerPerioddomain
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="versionmanagerPeriodcreateVersionOnActivation"> (optional)</param>
    /// <param name="versionmanagerPeriodpurgingEnabled"> (optional)</param>
    /// <param name="versionmanagerPeriodpurgePaths"> (optional)</param>
    /// <param name="versionmanagerPeriodivPaths"> (optional)</param>
    /// <param name="versionmanagerPeriodmaxAgeDays"> (optional)</param>
    /// <param name="versionmanagerPeriodmaxNumberVersions"> (optional)</param>
    /// <param name="versionmanagerPeriodminNumberVersions"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplVersionManagerImplInfo>> comDayCqWcmCoreImplVersionManagerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> versionmanagerPeriodcreateVersionOnActivation,
        boost::optional<bool> versionmanagerPeriodpurgingEnabled,
        boost::optional<std::vector<utility::string_t>> versionmanagerPeriodpurgePaths,
        boost::optional<std::vector<utility::string_t>> versionmanagerPeriodivPaths,
        boost::optional<int32_t> versionmanagerPeriodmaxAgeDays,
        boost::optional<int32_t> versionmanagerPeriodmaxNumberVersions,
        boost::optional<int32_t> versionmanagerPeriodminNumberVersions
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="versionpurgePeriodpaths"> (optional)</param>
    /// <param name="versionpurgePeriodrecursive"> (optional)</param>
    /// <param name="versionpurgePeriodmaxVersions"> (optional)</param>
    /// <param name="versionpurgePeriodminVersions"> (optional)</param>
    /// <param name="versionpurgePeriodmaxAgeDays"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplVersionPurgeTaskInfo>> comDayCqWcmCoreImplVersionPurgeTask(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> versionpurgePeriodpaths,
        boost::optional<bool> versionpurgePeriodrecursive,
        boost::optional<int32_t> versionpurgePeriodmaxVersions,
        boost::optional<int32_t> versionpurgePeriodminVersions,
        boost::optional<int32_t> versionpurgePeriodmaxAgeDays
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="wcmdbgfilterPeriodenabled"> (optional)</param>
    /// <param name="wcmdbgfilterPeriodjspDebug"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplWCMDebugFilterInfo>> comDayCqWcmCoreImplWCMDebugFilter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> wcmdbgfilterPeriodenabled,
        boost::optional<bool> wcmdbgfilterPeriodjspDebug
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="wcmdevmodefilterPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo>> comDayCqWcmCoreImplWCMDeveloperModeFilter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> wcmdevmodefilterPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="filterPeriodorder"> (optional)</param>
    /// <param name="filterPeriodscope"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreImplWarpTimeWarpFilterInfo>> comDayCqWcmCoreImplWarpTimeWarpFilter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> filterPeriodorder,
        boost::optional<utility::string_t> filterPeriodscope
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="mvtstatisticsPeriodtrackingurl"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreMvtMVTStatisticsImplInfo>> comDayCqWcmCoreMvtMVTStatisticsImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> mvtstatisticsPeriodtrackingurl
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="pageviewstatisticsPeriodtrackingurl"> (optional)</param>
    /// <param name="pageviewstatisticsPeriodtrackingscriptPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreStatsPageViewStatisticsImplInfo>> comDayCqWcmCoreStatsPageViewStatisticsImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> pageviewstatisticsPeriodtrackingurl,
        boost::optional<utility::string_t> pageviewstatisticsPeriodtrackingscriptPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="wcmfilterPeriodmode"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmCoreWCMRequestFilterInfo>> comDayCqWcmCoreWCMRequestFilter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> wcmfilterPeriodmode
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="extractPeriodfilter"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterDesignPackageImporterInfo>> comDayCqWcmDesignimporterDesignPackageImporter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> extractPeriodfilter
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="filepattern"> (optional)</param>
    /// <param name="buildPeriodpagePeriodnodes"> (optional)</param>
    /// <param name="buildPeriodclientPeriodlibs"> (optional)</param>
    /// <param name="buildPeriodcanvasPeriodcomponent"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo>> comDayCqWcmDesignimporterImplCanvasBuilderImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> filepattern,
        boost::optional<bool> buildPeriodpagePeriodnodes,
        boost::optional<bool> buildPeriodclientPeriodlibs,
        boost::optional<bool> buildPeriodcanvasPeriodcomponent
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="minThreadPoolSize"> (optional)</param>
    /// <param name="maxThreadPoolSize"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo>> comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> minThreadPoolSize,
        boost::optional<int32_t> maxThreadPoolSize
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="searchPeriodpattern"> (optional)</param>
    /// <param name="replacePeriodpattern"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo>> comDayCqWcmDesignimporterImplEntryPreprocessorImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> searchPeriodpattern,
        boost::optional<utility::string_t> replacePeriodpattern
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="filepattern"> (optional)</param>
    /// <param name="devicePeriodgroups"> (optional)</param>
    /// <param name="buildPeriodpagePeriodnodes"> (optional)</param>
    /// <param name="buildPeriodclientPeriodlibs"> (optional)</param>
    /// <param name="buildPeriodcanvasPeriodcomponent"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo>> comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> filepattern,
        boost::optional<std::vector<utility::string_t>> devicePeriodgroups,
        boost::optional<bool> buildPeriodpagePeriodnodes,
        boost::optional<bool> buildPeriodclientPeriodlibs,
        boost::optional<bool> buildPeriodcanvasPeriodcomponent
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo>> comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo>> comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo>> comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo>> comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo>> comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    /// <param name="componentPeriodresourceType"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo>> comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern,
        boost::optional<utility::string_t> componentPeriodresourceType
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo>> comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo>> comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo>> comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo>> comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo>> comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    /// <param name="componentPeriodresourceType"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo>> comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern,
        boost::optional<utility::string_t> componentPeriodresourceType
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo>> comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo>> comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    /// <param name="componentPeriodresourceType"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo>> comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern,
        boost::optional<utility::string_t> componentPeriodresourceType
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    /// <param name="componentPeriodresourceType"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo>> comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern,
        boost::optional<utility::string_t> componentPeriodresourceType
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="tagpattern"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo>> comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> tagpattern
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodname"> (optional)</param>
    /// <param name="slingPeriodservletPeriodresourceTypes"> (optional)</param>
    /// <param name="slingPeriodservletPeriodselectors"> (optional)</param>
    /// <param name="slingPeriodservletPeriodmethods"> (optional)</param>
    /// <param name="formsPeriodformchooserservletPeriodadvansesearchPeriodrequire"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmFoundationFormsImplFormChooserServletInfo>> comDayCqWcmFoundationFormsImplFormChooserServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> servicePeriodname,
        boost::optional<utility::string_t> slingPeriodservletPeriodresourceTypes,
        boost::optional<utility::string_t> slingPeriodservletPeriodselectors,
        boost::optional<std::vector<utility::string_t>> slingPeriodservletPeriodmethods,
        boost::optional<bool> formsPeriodformchooserservletPeriodadvansesearchPeriodrequire
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="formsPeriodformparagraphpostprocessorPeriodenabled"> (optional)</param>
    /// <param name="formsPeriodformparagraphpostprocessorPeriodformresourcetypes"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo>> comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> formsPeriodformparagraphpostprocessorPeriodenabled,
        boost::optional<std::vector<utility::string_t>> formsPeriodformparagraphpostprocessorPeriodformresourcetypes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="namePeriodwhitelist"> (optional)</param>
    /// <param name="allowPeriodexpressions"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo>> comDayCqWcmFoundationFormsImplFormsHandlingServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> namePeriodwhitelist,
        boost::optional<bool> allowPeriodexpressions
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="slingPeriodservletPeriodresourceTypes"> (optional)</param>
    /// <param name="slingPeriodservletPeriodselectors"> (optional)</param>
    /// <param name="resourcePeriodwhitelist"> (optional)</param>
    /// <param name="resourcePeriodblacklist"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmFoundationFormsImplMailServletInfo>> comDayCqWcmFoundationFormsImplMailServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> slingPeriodservletPeriodresourceTypes,
        boost::optional<utility::string_t> slingPeriodservletPeriodselectors,
        boost::optional<std::vector<utility::string_t>> resourcePeriodwhitelist,
        boost::optional<utility::string_t> resourcePeriodblacklist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="adaptPeriodsupportedPeriodwidths"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo>> comDayCqWcmFoundationImplAdaptiveImageComponentServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> adaptPeriodsupportedPeriodwidths
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="path"> (optional)</param>
    /// <param name="authPeriodhttpPeriodnologin"> (optional)</param>
    /// <param name="authPeriodhttpPeriodrealm"> (optional)</param>
    /// <param name="authPerioddefaultPeriodloginpage"> (optional)</param>
    /// <param name="authPeriodcredPeriodform"> (optional)</param>
    /// <param name="authPeriodcredPeriodutf8"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmFoundationImplHTTPAuthHandlerInfo>> comDayCqWcmFoundationImplHTTPAuthHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> path,
        boost::optional<bool> authPeriodhttpPeriodnologin,
        boost::optional<utility::string_t> authPeriodhttpPeriodrealm,
        boost::optional<utility::string_t> authPerioddefaultPeriodloginpage,
        boost::optional<std::vector<utility::string_t>> authPeriodcredPeriodform,
        boost::optional<std::vector<utility::string_t>> authPeriodcredPeriodutf8
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="slingPeriodauthPeriodrequirements"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmFoundationImplPageImpressionsTrackerInfo>> comDayCqWcmFoundationImplPageImpressionsTracker(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> slingPeriodauthPeriodrequirements
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="excludedPeriodresourcePeriodtypes"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmFoundationImplPageRedirectServletInfo>> comDayCqWcmFoundationImplPageRedirectServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> excludedPeriodresourcePeriodtypes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="defaultPeriodattachmentPeriodtypePeriodblacklist"> (optional)</param>
    /// <param name="baselinePeriodattachmentPeriodtypePeriodblacklist"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo>> comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> defaultPeriodattachmentPeriodtypePeriodblacklist,
        boost::optional<std::vector<utility::string_t>> baselinePeriodattachmentPeriodtypePeriodblacklist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="parameterPeriodwhitelist"> (optional)</param>
    /// <param name="parameterPeriodwhitelistPeriodprefixes"> (optional)</param>
    /// <param name="binaryPeriodparameterPeriodwhitelist"> (optional)</param>
    /// <param name="modifierPeriodwhitelist"> (optional)</param>
    /// <param name="operationPeriodwhitelist"> (optional)</param>
    /// <param name="operationPeriodwhitelistPeriodprefixes"> (optional)</param>
    /// <param name="typehintPeriodwhitelist"> (optional)</param>
    /// <param name="resourcetypePeriodwhitelist"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo>> comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> parameterPeriodwhitelist,
        boost::optional<std::vector<utility::string_t>> parameterPeriodwhitelistPeriodprefixes,
        boost::optional<std::vector<utility::string_t>> binaryPeriodparameterPeriodwhitelist,
        boost::optional<std::vector<utility::string_t>> modifierPeriodwhitelist,
        boost::optional<std::vector<utility::string_t>> operationPeriodwhitelist,
        boost::optional<std::vector<utility::string_t>> operationPeriodwhitelistPeriodprefixes,
        boost::optional<std::vector<utility::string_t>> typehintPeriodwhitelist,
        boost::optional<std::vector<utility::string_t>> resourcetypePeriodwhitelist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="devicePeriodinfoPeriodtransformerPeriodenabled"> (optional)</param>
    /// <param name="devicePeriodinfoPeriodtransformerPeriodcssPeriodstyle"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo>> comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> devicePeriodinfoPeriodtransformerPeriodenabled,
        boost::optional<utility::string_t> devicePeriodinfoPeriodtransformerPeriodcssPeriodstyle
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="redirectPeriodenabled"> (optional)</param>
    /// <param name="redirectPeriodstatsPeriodenabled"> (optional)</param>
    /// <param name="redirectPeriodextensions"> (optional)</param>
    /// <param name="redirectPeriodpaths"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo>> comDayCqWcmMobileCoreImplRedirectRedirectFilter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> redirectPeriodenabled,
        boost::optional<bool> redirectPeriodstatsPeriodenabled,
        boost::optional<std::vector<utility::string_t>> redirectPeriodextensions,
        boost::optional<std::vector<utility::string_t>> redirectPeriodpaths
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops"> (optional)</param>
    /// <param name="contentcopyactionPeriodorderPeriodstyle"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo>> comDayCqWcmMsmImplActionsContentCopyActionFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops,
        boost::optional<utility::string_t> contentcopyactionPeriodorderPeriodstyle
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo>> comDayCqWcmMsmImplActionsContentDeleteActionFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodignoredMixin"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo>> comDayCqWcmMsmImplActionsContentUpdateActionFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodignoredMixin
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo>> comDayCqWcmMsmImplActionsOrderChildrenActionFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodimplPeriodactionsPeriodpagemovePeriodpropReferenceUpdate"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo>> comDayCqWcmMsmImplActionsPageMoveActionFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops,
        boost::optional<bool> cqPeriodwcmPeriodmsmPeriodimplPeriodactionsPeriodpagemovePeriodpropReferenceUpdate
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodimplPeriodactionPeriodreferencesupdatePeriodpropUpdateNested"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo>> comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops,
        boost::optional<bool> cqPeriodwcmPeriodmsmPeriodimplPeriodactionPeriodreferencesupdatePeriodpropUpdateNested
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo>> comDayCqWcmMsmImplActionsVersionCopyActionFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludednodetypes,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedparagraphitems,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodmsmPeriodactionPeriodexcludedprops
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="liverelationshipmgrPeriodrelationsconfigPerioddefault"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo>> comDayCqWcmMsmImplLiveRelationshipManagerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> liverelationshipmgrPeriodrelationsconfigPerioddefault
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="eventPeriodfilter"> (optional)</param>
    /// <param name="rolloutmgrPeriodexcludedpropsPerioddefault"> (optional)</param>
    /// <param name="rolloutmgrPeriodexcludedparagraphpropsPerioddefault"> (optional)</param>
    /// <param name="rolloutmgrPeriodexcludednodetypesPerioddefault"> (optional)</param>
    /// <param name="rolloutmgrPeriodthreadpoolPeriodmaxsize"> (optional)</param>
    /// <param name="rolloutmgrPeriodthreadpoolPeriodmaxshutdowntime"> (optional)</param>
    /// <param name="rolloutmgrPeriodthreadpoolPeriodpriority"> (optional)</param>
    /// <param name="rolloutmgrPeriodcommitPeriodsize"> (optional)</param>
    /// <param name="rolloutmgrPeriodconflicthandlingPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmMsmImplRolloutManagerImplInfo>> comDayCqWcmMsmImplRolloutManagerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> eventPeriodfilter,
        boost::optional<std::vector<utility::string_t>> rolloutmgrPeriodexcludedpropsPerioddefault,
        boost::optional<std::vector<utility::string_t>> rolloutmgrPeriodexcludedparagraphpropsPerioddefault,
        boost::optional<std::vector<utility::string_t>> rolloutmgrPeriodexcludednodetypesPerioddefault,
        boost::optional<int32_t> rolloutmgrPeriodthreadpoolPeriodmaxsize,
        boost::optional<int32_t> rolloutmgrPeriodthreadpoolPeriodmaxshutdowntime,
        boost::optional<utility::string_t> rolloutmgrPeriodthreadpoolPeriodpriority,
        boost::optional<int32_t> rolloutmgrPeriodcommitPeriodsize,
        boost::optional<bool> rolloutmgrPeriodconflicthandlingPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="auditlogservletPerioddefaultPeriodeventsPeriodcount"> (optional)</param>
    /// <param name="auditlogservletPerioddefaultPeriodpath"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmMsmImplServletsAuditLogServletInfo>> comDayCqWcmMsmImplServletsAuditLogServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> auditlogservletPerioddefaultPeriodeventsPeriodcount,
        boost::optional<utility::string_t> auditlogservletPerioddefaultPeriodpath
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="emailPeriodfrom"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmNotificationEmailImplEmailChannelInfo>> comDayCqWcmNotificationEmailImplEmailChannel(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> emailPeriodfrom
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="eventPeriodtopics"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmNotificationImplNotificationManagerImplInfo>> comDayCqWcmNotificationImplNotificationManagerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> eventPeriodtopics
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="comPerioddayPeriodcqPeriodwcmPeriodscriptingPeriodbvpPeriodscriptPeriodengines"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmScriptingImplBVPManagerInfo>> comDayCqWcmScriptingImplBVPManager(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> comPerioddayPeriodcqPeriodwcmPeriodscriptingPeriodbvpPeriodscriptPeriodengines
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodundoPeriodenabled"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodundoPeriodpath"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodundoPeriodvalidity"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodundoPeriodsteps"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodundoPeriodpersistence"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodundoPeriodpersistencePeriodmode"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodundoPeriodmarkermode"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodundoPeriodwhitelist"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodundoPeriodblacklist"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmUndoUndoConfigInfo>> comDayCqWcmUndoUndoConfig(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> cqPeriodwcmPeriodundoPeriodenabled,
        boost::optional<utility::string_t> cqPeriodwcmPeriodundoPeriodpath,
        boost::optional<int32_t> cqPeriodwcmPeriodundoPeriodvalidity,
        boost::optional<int32_t> cqPeriodwcmPeriodundoPeriodsteps,
        boost::optional<utility::string_t> cqPeriodwcmPeriodundoPeriodpersistence,
        boost::optional<bool> cqPeriodwcmPeriodundoPeriodpersistencePeriodmode,
        boost::optional<utility::string_t> cqPeriodwcmPeriodundoPeriodmarkermode,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodundoPeriodwhitelist,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodundoPeriodblacklist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="flush_agents"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo>> comDayCqWcmWebservicesupportImplReplicationEventListener(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> flush_agents
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="eventPeriodfilter"> (optional)</param>
    /// <param name="minThreadPoolSize"> (optional)</param>
    /// <param name="maxThreadPoolSize"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodworkflowPeriodterminatePeriodonPeriodactivate"> (optional)</param>
    /// <param name="cqPeriodwcmPeriodworklfowPeriodterminatePeriodexclusionPeriodlist"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo>> comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> eventPeriodfilter,
        boost::optional<int32_t> minThreadPoolSize,
        boost::optional<int32_t> maxThreadPoolSize,
        boost::optional<bool> cqPeriodwcmPeriodworkflowPeriodterminatePeriodonPeriodactivate,
        boost::optional<std::vector<utility::string_t>> cqPeriodwcmPeriodworklfowPeriodterminatePeriodexclusionPeriodlist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="workflowpackageinfoproviderPeriodfilter"> (optional)</param>
    /// <param name="workflowpackageinfoproviderPeriodfilterPeriodrootpath"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo>> comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> workflowpackageinfoproviderPeriodfilter,
        boost::optional<utility::string_t> workflowpackageinfoproviderPeriodfilterPeriodrootpath
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="htmllibmanagerPeriodclientmanager"> (optional)</param>
    /// <param name="htmllibmanagerPerioddebug"> (optional)</param>
    /// <param name="htmllibmanagerPerioddebugPeriodconsole"> (optional)</param>
    /// <param name="htmllibmanagerPerioddebugPeriodinitPeriodjs"> (optional)</param>
    /// <param name="htmllibmanagerPerioddefaultthemename"> (optional)</param>
    /// <param name="htmllibmanagerPerioddefaultuserthemename"> (optional)</param>
    /// <param name="htmllibmanagerPeriodfirebuglitePeriodpath"> (optional)</param>
    /// <param name="htmllibmanagerPeriodforceCQUrlInfo"> (optional)</param>
    /// <param name="htmllibmanagerPeriodgzip"> (optional)</param>
    /// <param name="htmllibmanagerPeriodmaxage"> (optional)</param>
    /// <param name="htmllibmanagerPeriodmaxDataUriSize"> (optional)</param>
    /// <param name="htmllibmanagerPeriodminify"> (optional)</param>
    /// <param name="htmllibmanagerPeriodpathPeriodlist"> (optional)</param>
    /// <param name="htmllibmanagerPeriodtiming"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWidgetImplHtmlLibraryManagerImplInfo>> comDayCqWidgetImplHtmlLibraryManagerImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> htmllibmanagerPeriodclientmanager,
        boost::optional<bool> htmllibmanagerPerioddebug,
        boost::optional<bool> htmllibmanagerPerioddebugPeriodconsole,
        boost::optional<utility::string_t> htmllibmanagerPerioddebugPeriodinitPeriodjs,
        boost::optional<utility::string_t> htmllibmanagerPerioddefaultthemename,
        boost::optional<utility::string_t> htmllibmanagerPerioddefaultuserthemename,
        boost::optional<utility::string_t> htmllibmanagerPeriodfirebuglitePeriodpath,
        boost::optional<bool> htmllibmanagerPeriodforceCQUrlInfo,
        boost::optional<bool> htmllibmanagerPeriodgzip,
        boost::optional<int32_t> htmllibmanagerPeriodmaxage,
        boost::optional<int32_t> htmllibmanagerPeriodmaxDataUriSize,
        boost::optional<bool> htmllibmanagerPeriodminify,
        boost::optional<std::vector<utility::string_t>> htmllibmanagerPeriodpathPeriodlist,
        boost::optional<bool> htmllibmanagerPeriodtiming
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="extendablePeriodwidgets"> (optional)</param>
    /// <param name="widgetextensionproviderPerioddebug"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWidgetImplWidgetExtensionProviderImplInfo>> comDayCqWidgetImplWidgetExtensionProviderImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> extendablePeriodwidgets,
        boost::optional<bool> widgetextensionproviderPerioddebug
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="fromPeriodaddress"> (optional)</param>
    /// <param name="hostPeriodprefix"> (optional)</param>
    /// <param name="notifyPeriodonabort"> (optional)</param>
    /// <param name="notifyPeriodoncomplete"> (optional)</param>
    /// <param name="notifyPeriodoncontainercomplete"> (optional)</param>
    /// <param name="notifyPerioduseronly"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWorkflowImplEmailEMailNotificationServiceInfo>> comDayCqWorkflowImplEmailEMailNotificationService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> fromPeriodaddress,
        boost::optional<utility::string_t> hostPeriodprefix,
        boost::optional<bool> notifyPeriodonabort,
        boost::optional<bool> notifyPeriodoncomplete,
        boost::optional<bool> notifyPeriodoncontainercomplete,
        boost::optional<bool> notifyPerioduseronly
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="notifyPeriodonupdate"> (optional)</param>
    /// <param name="notifyPeriodoncomplete"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo>> comDayCqWorkflowImplEmailTaskEMailNotificationService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> notifyPeriodonupdate,
        boost::optional<bool> notifyPeriodoncomplete
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="path"> (optional)</param>
    /// <param name="tokenPeriodrequiredPeriodattr"> (optional)</param>
    /// <param name="tokenPeriodalternatePeriodurl"> (optional)</param>
    /// <param name="tokenPeriodencapsulated"> (optional)</param>
    /// <param name="skipPeriodtokenPeriodrefresh"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo>> comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> path,
        boost::optional<utility::string_t> tokenPeriodrequiredPeriodattr,
        boost::optional<utility::string_t> tokenPeriodalternatePeriodurl,
        boost::optional<bool> tokenPeriodencapsulated,
        boost::optional<std::vector<utility::string_t>> skipPeriodtokenPeriodrefresh
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enablePeriodtokenPeriodcleanupPeriodtask"> (optional)</param>
    /// <param name="schedulerPeriodexpression"> (optional)</param>
    /// <param name="batchPeriodsize"> (optional)</param>
    pplx::task<std::shared_ptr<ComDayCrxSecurityTokenImplTokenCleanupTaskInfo>> comDayCrxSecurityTokenImplTokenCleanupTask(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enablePeriodtokenPeriodcleanupPeriodtask,
        boost::optional<utility::string_t> schedulerPeriodexpression,
        boost::optional<int32_t> batchPeriodsize
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="supportedLocales"> (optional)</param>
    /// <param name="localizable_Properties"> (optional)</param>
    pplx::task<std::shared_ptr<GuideLocalizationServiceInfo>> guideLocalizationService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> supportedLocales,
        boost::optional<std::vector<utility::string_t>> localizable_Properties
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="priority"> (optional)</param>
    pplx::task<std::shared_ptr<MessagingUserComponentFactoryInfo>> messagingUserComponentFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> priority
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="attributeChangeNotificationEnabled"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheAriesJmxFrameworkStateConfigInfo>> orgApacheAriesJmxFrameworkStateConfig(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> attributeChangeNotificationEnabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodeventadminPeriodThreadPoolSize"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodeventadminPeriodAsyncToSyncThreadRatio"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodeventadminPeriodTimeout"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodeventadminPeriodRequireTopic"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTimeout"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTopic"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheFelixEventadminImplEventAdminInfo>> orgApacheFelixEventadminImplEventAdmin(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> orgPeriodapachePeriodfelixPeriodeventadminPeriodThreadPoolSize,
        boost::optional<double> orgPeriodapachePeriodfelixPeriodeventadminPeriodAsyncToSyncThreadRatio,
        boost::optional<int32_t> orgPeriodapachePeriodfelixPeriodeventadminPeriodTimeout,
        boost::optional<bool> orgPeriodapachePeriodfelixPeriodeventadminPeriodRequireTopic,
        boost::optional<std::vector<utility::string_t>> orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTimeout,
        boost::optional<std::vector<utility::string_t>> orgPeriodapachePeriodfelixPeriodeventadminPeriodIgnoreTopic
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpPeriodhost"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpPeriodenable"> (optional)</param>
    /// <param name="orgPeriodosgiPeriodservicePeriodhttpPeriodport"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpPeriodtimeout"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpsPeriodenable"> (optional)</param>
    /// <param name="orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpPeriodcontextPath"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpPeriodmbeans"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodtimeout"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodthreadpoolPeriodmax"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodacceptors"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodselectors"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodheaderBufferSize"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodrequestBufferSize"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodresponseBufferSize"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodmaxFormSize"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpPeriodpathExclusions"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodexcluded"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodincluded"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodsendServerHeader"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodincluded"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodexcluded"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodproxyPeriodloadPeriodbalancerPeriodconnectionPeriodenable"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodrenegotiateAllowed"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodhttpOnly"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodsecure"> (optional)</param>
    /// <param name="orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionIdPathParameterName"> (optional)</param>
    /// <param name="orgPeriodeclipsePeriodjettyPeriodservletPeriodCheckingRemoteSessionIdEncoding"> (optional)</param>
    /// <param name="orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionCookie"> (optional)</param>
    /// <param name="orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionDomain"> (optional)</param>
    /// <param name="orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionPath"> (optional)</param>
    /// <param name="orgPeriodeclipsePeriodjettyPeriodservletPeriodMaxAge"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpPeriodname"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodjettyPeriodgziphandlerPeriodenable"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodminGzipSize"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodcompressionLevel"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodinflateBufferSize"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodsyncFlush"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedUserAgents"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMethods"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMethods"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedPaths"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedPaths"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMimeTypes"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMimeTypes"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodinvalidate"> (optional)</param>
    /// <param name="orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPerioduniqueid"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheFelixHttpInfo>> orgApacheFelixHttp(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> orgPeriodapachePeriodfelixPeriodhttpPeriodhost,
        boost::optional<bool> orgPeriodapachePeriodfelixPeriodhttpPeriodenable,
        boost::optional<int32_t> orgPeriodosgiPeriodservicePeriodhttpPeriodport,
        boost::optional<int32_t> orgPeriodapachePeriodfelixPeriodhttpPeriodtimeout,
        boost::optional<bool> orgPeriodapachePeriodfelixPeriodhttpsPeriodenable,
        boost::optional<int32_t> orgPeriodosgiPeriodservicePeriodhttpPeriodportPeriodsecure,
        boost::optional<utility::string_t> orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystore,
        boost::optional<utility::string_t> orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodpassword,
        boost::optional<utility::string_t> orgPeriodapachePeriodfelixPeriodhttpsPeriodkeystorePeriodkeyPeriodpassword,
        boost::optional<utility::string_t> orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststore,
        boost::optional<utility::string_t> orgPeriodapachePeriodfelixPeriodhttpsPeriodtruststorePeriodpassword,
        boost::optional<utility::string_t> orgPeriodapachePeriodfelixPeriodhttpsPeriodclientcertificate,
        boost::optional<utility::string_t> orgPeriodapachePeriodfelixPeriodhttpPeriodcontextPath,
        boost::optional<bool> orgPeriodapachePeriodfelixPeriodhttpPeriodmbeans,
        boost::optional<int32_t> orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodtimeout,
        boost::optional<int32_t> orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodthreadpoolPeriodmax,
        boost::optional<int32_t> orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodacceptors,
        boost::optional<int32_t> orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodselectors,
        boost::optional<int32_t> orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodheaderBufferSize,
        boost::optional<int32_t> orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodrequestBufferSize,
        boost::optional<int32_t> orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodresponseBufferSize,
        boost::optional<int32_t> orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodmaxFormSize,
        boost::optional<std::vector<utility::string_t>> orgPeriodapachePeriodfelixPeriodhttpPeriodpathExclusions,
        boost::optional<std::vector<utility::string_t>> orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodexcluded,
        boost::optional<std::vector<utility::string_t>> orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodciphersuitesPeriodincluded,
        boost::optional<bool> orgPeriodapachePeriodfelixPeriodhttpPeriodjettyPeriodsendServerHeader,
        boost::optional<std::vector<utility::string_t>> orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodincluded,
        boost::optional<std::vector<utility::string_t>> orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodprotocolsPeriodexcluded,
        boost::optional<bool> orgPeriodapachePeriodfelixPeriodproxyPeriodloadPeriodbalancerPeriodconnectionPeriodenable,
        boost::optional<bool> orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodrenegotiateAllowed,
        boost::optional<bool> orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodhttpOnly,
        boost::optional<bool> orgPeriodapachePeriodfelixPeriodhttpsPeriodjettyPeriodsessionPeriodcookiePeriodsecure,
        boost::optional<utility::string_t> orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionIdPathParameterName,
        boost::optional<bool> orgPeriodeclipsePeriodjettyPeriodservletPeriodCheckingRemoteSessionIdEncoding,
        boost::optional<utility::string_t> orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionCookie,
        boost::optional<utility::string_t> orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionDomain,
        boost::optional<utility::string_t> orgPeriodeclipsePeriodjettyPeriodservletPeriodSessionPath,
        boost::optional<int32_t> orgPeriodeclipsePeriodjettyPeriodservletPeriodMaxAge,
        boost::optional<utility::string_t> orgPeriodapachePeriodfelixPeriodhttpPeriodname,
        boost::optional<bool> orgPeriodapachePeriodfelixPeriodjettyPeriodgziphandlerPeriodenable,
        boost::optional<int32_t> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodminGzipSize,
        boost::optional<int32_t> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodcompressionLevel,
        boost::optional<int32_t> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodinflateBufferSize,
        boost::optional<bool> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodsyncFlush,
        boost::optional<std::vector<utility::string_t>> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedUserAgents,
        boost::optional<std::vector<utility::string_t>> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMethods,
        boost::optional<std::vector<utility::string_t>> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMethods,
        boost::optional<std::vector<utility::string_t>> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedPaths,
        boost::optional<std::vector<utility::string_t>> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedPaths,
        boost::optional<std::vector<utility::string_t>> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodincludedMimeTypes,
        boost::optional<std::vector<utility::string_t>> orgPeriodapachePeriodfelixPeriodjettyPeriodgzipPeriodexcludedMimeTypes,
        boost::optional<bool> orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPeriodinvalidate,
        boost::optional<bool> orgPeriodapachePeriodfelixPeriodhttpPeriodsessionPerioduniqueid
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="sslForwardPeriodheader"> (optional)</param>
    /// <param name="sslForwardPeriodvalue"> (optional)</param>
    /// <param name="sslForwardCertPeriodheader"> (optional)</param>
    /// <param name="rewritePeriodabsolutePeriodurls"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheFelixHttpSslfilterSslFilterInfo>> orgApacheFelixHttpSslfilterSslFilter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> sslForwardPeriodheader,
        boost::optional<utility::string_t> sslForwardPeriodvalue,
        boost::optional<utility::string_t> sslForwardCertPeriodheader,
        boost::optional<bool> rewritePeriodabsolutePeriodurls
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="jaasPeriodcontrolFlag"> (optional)</param>
    /// <param name="jaasPeriodranking"> (optional)</param>
    /// <param name="jaasPeriodrealmName"> (optional)</param>
    /// <param name="jaasPeriodclassname"> (optional)</param>
    /// <param name="jaasPeriodoptions"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheFelixJaasConfigurationFactoryInfo>> orgApacheFelixJaasConfigurationFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> jaasPeriodcontrolFlag,
        boost::optional<int32_t> jaasPeriodranking,
        boost::optional<utility::string_t> jaasPeriodrealmName,
        boost::optional<utility::string_t> jaasPeriodclassname,
        boost::optional<std::vector<utility::string_t>> jaasPeriodoptions
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="jaasPerioddefaultRealmName"> (optional)</param>
    /// <param name="jaasPeriodconfigProviderName"> (optional)</param>
    /// <param name="jaasPeriodglobalConfigPolicy"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheFelixJaasConfigurationSpiInfo>> orgApacheFelixJaasConfigurationSpi(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> jaasPerioddefaultRealmName,
        boost::optional<utility::string_t> jaasPeriodconfigProviderName,
        boost::optional<utility::string_t> jaasPeriodglobalConfigPolicy
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="dsPeriodloglevel"> (optional)</param>
    /// <param name="dsPeriodfactoryPeriodenabled"> (optional)</param>
    /// <param name="dsPerioddelayedPeriodkeepInstances"> (optional)</param>
    /// <param name="dsPeriodlockPeriodtimeoutPeriodmilliseconds"> (optional)</param>
    /// <param name="dsPeriodstopPeriodtimeoutPeriodmilliseconds"> (optional)</param>
    /// <param name="dsPeriodglobalPeriodextender"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheFelixScrScrServiceInfo>> orgApacheFelixScrScrService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> dsPeriodloglevel,
        boost::optional<bool> dsPeriodfactoryPeriodenabled,
        boost::optional<bool> dsPerioddelayedPeriodkeepInstances,
        boost::optional<int32_t> dsPeriodlockPeriodtimeoutPeriodmilliseconds,
        boost::optional<int32_t> dsPeriodstopPeriodtimeoutPeriodmilliseconds,
        boost::optional<bool> dsPeriodglobalPeriodextender
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="componentsPeriodlist"> (optional)</param>
    /// <param name="type"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheFelixSystemreadyImplComponentsCheckInfo>> orgApacheFelixSystemreadyImplComponentsCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> componentsPeriodlist,
        boost::optional<utility::string_t> type
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="timeout"> (optional)</param>
    /// <param name="targetPeriodstartPeriodlevel"> (optional)</param>
    /// <param name="targetPeriodstartPeriodlevelPeriodpropPeriodname"> (optional)</param>
    /// <param name="type"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo>> orgApacheFelixSystemreadyImplFrameworkStartCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> timeout,
        boost::optional<int32_t> targetPeriodstartPeriodlevel,
        boost::optional<utility::string_t> targetPeriodstartPeriodlevelPeriodpropPeriodname,
        boost::optional<utility::string_t> type
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicesPeriodlist"> (optional)</param>
    /// <param name="type"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheFelixSystemreadyImplServicesCheckInfo>> orgApacheFelixSystemreadyImplServicesCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> servicesPeriodlist,
        boost::optional<utility::string_t> type
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern"> (optional)</param>
    /// <param name="osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo>> orgApacheFelixSystemreadyImplServletSystemAliveServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern,
        boost::optional<utility::string_t> osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern"> (optional)</param>
    /// <param name="osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo>> orgApacheFelixSystemreadyImplServletSystemReadyServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> osgiPeriodhttpPeriodwhiteboardPeriodservletPeriodpattern,
        boost::optional<utility::string_t> osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="pollPeriodinterval"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheFelixSystemreadySystemReadyMonitorInfo>> orgApacheFelixSystemreadySystemReadyMonitor(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> pollPeriodinterval
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="managerPeriodroot"> (optional)</param>
    /// <param name="httpPeriodservicePeriodfilter"> (optional)</param>
    /// <param name="defaultPeriodrender"> (optional)</param>
    /// <param name="realm"> (optional)</param>
    /// <param name="username"> (optional)</param>
    /// <param name="password"> (optional)</param>
    /// <param name="category"> (optional)</param>
    /// <param name="locale"> (optional)</param>
    /// <param name="loglevel"> (optional)</param>
    /// <param name="plugins"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo>> orgApacheFelixWebconsoleInternalServletOsgiManager(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> managerPeriodroot,
        boost::optional<utility::string_t> httpPeriodservicePeriodfilter,
        boost::optional<utility::string_t> defaultPeriodrender,
        boost::optional<utility::string_t> realm,
        boost::optional<utility::string_t> username,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> category,
        boost::optional<utility::string_t> locale,
        boost::optional<int32_t> loglevel,
        boost::optional<utility::string_t> plugins
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="maxPeriodsize"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo>> orgApacheFelixWebconsolePluginsEventInternalPluginServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> maxPeriodsize
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="felixPeriodmemoryusagePerioddumpPeriodthreshold"> (optional)</param>
    /// <param name="felixPeriodmemoryusagePerioddumpPeriodinterval"> (optional)</param>
    /// <param name="felixPeriodmemoryusagePerioddumpPeriodlocation"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo>> orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> felixPeriodmemoryusagePerioddumpPeriodthreshold,
        boost::optional<int32_t> felixPeriodmemoryusagePerioddumpPeriodinterval,
        boost::optional<utility::string_t> felixPeriodmemoryusagePerioddumpPeriodlocation
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="proxyPeriodenabled"> (optional)</param>
    /// <param name="proxyPeriodhost"> (optional)</param>
    /// <param name="proxyPeriodport"> (optional)</param>
    /// <param name="proxyPerioduser"> (optional)</param>
    /// <param name="proxyPeriodpassword"> (optional)</param>
    /// <param name="proxyPeriodexceptions"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheHttpProxyconfiguratorInfo>> orgApacheHttpProxyconfigurator(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> proxyPeriodenabled,
        boost::optional<utility::string_t> proxyPeriodhost,
        boost::optional<int32_t> proxyPeriodport,
        boost::optional<utility::string_t> proxyPerioduser,
        boost::optional<utility::string_t> proxyPeriodpassword,
        boost::optional<std::vector<utility::string_t>> proxyPeriodexceptions
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="dir"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo>> orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> dir
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="path"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo>> orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> path
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="mongouri"> (optional)</param>
    /// <param name="db"> (optional)</param>
    /// <param name="socketKeepAlive"> (optional)</param>
    /// <param name="cache"> (optional)</param>
    /// <param name="nodeCachePercentage"> (optional)</param>
    /// <param name="prevDocCachePercentage"> (optional)</param>
    /// <param name="childrenCachePercentage"> (optional)</param>
    /// <param name="diffCachePercentage"> (optional)</param>
    /// <param name="cacheSegmentCount"> (optional)</param>
    /// <param name="cacheStackMoveDistance"> (optional)</param>
    /// <param name="blobCacheSize"> (optional)</param>
    /// <param name="persistentCache"> (optional)</param>
    /// <param name="journalCache"> (optional)</param>
    /// <param name="customBlobStore"> (optional)</param>
    /// <param name="journalGCInterval"> (optional)</param>
    /// <param name="journalGCMaxAge"> (optional)</param>
    /// <param name="prefetchExternalChanges"> (optional)</param>
    /// <param name="role"> (optional)</param>
    /// <param name="versionGcMaxAgeInSecs"> (optional)</param>
    /// <param name="versionGCExpression"> (optional)</param>
    /// <param name="versionGCTimeLimitInSecs"> (optional)</param>
    /// <param name="blobGcMaxAgeInSecs"> (optional)</param>
    /// <param name="blobTrackSnapshotIntervalInSecs"> (optional)</param>
    /// <param name="repositoryPeriodhome"> (optional)</param>
    /// <param name="maxReplicationLagInSecs"> (optional)</param>
    /// <param name="documentStoreType"> (optional)</param>
    /// <param name="bundlingDisabled"> (optional)</param>
    /// <param name="updateLimit"> (optional)</param>
    /// <param name="persistentCacheIncludes"> (optional)</param>
    /// <param name="leaseCheckMode"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo>> orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> mongouri,
        boost::optional<utility::string_t> db,
        boost::optional<bool> socketKeepAlive,
        boost::optional<int32_t> cache,
        boost::optional<int32_t> nodeCachePercentage,
        boost::optional<int32_t> prevDocCachePercentage,
        boost::optional<int32_t> childrenCachePercentage,
        boost::optional<int32_t> diffCachePercentage,
        boost::optional<int32_t> cacheSegmentCount,
        boost::optional<int32_t> cacheStackMoveDistance,
        boost::optional<int32_t> blobCacheSize,
        boost::optional<utility::string_t> persistentCache,
        boost::optional<utility::string_t> journalCache,
        boost::optional<bool> customBlobStore,
        boost::optional<int32_t> journalGCInterval,
        boost::optional<int32_t> journalGCMaxAge,
        boost::optional<bool> prefetchExternalChanges,
        boost::optional<utility::string_t> role,
        boost::optional<int32_t> versionGcMaxAgeInSecs,
        boost::optional<utility::string_t> versionGCExpression,
        boost::optional<int32_t> versionGCTimeLimitInSecs,
        boost::optional<int32_t> blobGcMaxAgeInSecs,
        boost::optional<int32_t> blobTrackSnapshotIntervalInSecs,
        boost::optional<utility::string_t> repositoryPeriodhome,
        boost::optional<int32_t> maxReplicationLagInSecs,
        boost::optional<utility::string_t> documentStoreType,
        boost::optional<bool> bundlingDisabled,
        boost::optional<int32_t> updateLimit,
        boost::optional<std::vector<utility::string_t>> persistentCacheIncludes,
        boost::optional<utility::string_t> leaseCheckMode
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="persistentCacheIncludes"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo>> orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> persistentCacheIncludes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="includedPaths"> (optional)</param>
    /// <param name="enableAsyncObserver"> (optional)</param>
    /// <param name="observerQueueSize"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo>> orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> includedPaths,
        boost::optional<bool> enableAsyncObserver,
        boost::optional<int32_t> observerQueueSize
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="asyncConfigs"> (optional)</param>
    /// <param name="leaseTimeOutMinutes"> (optional)</param>
    /// <param name="failingIndexTimeoutSeconds"> (optional)</param>
    /// <param name="errorWarnIntervalSeconds"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo>> orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> asyncConfigs,
        boost::optional<int32_t> leaseTimeOutMinutes,
        boost::optional<int32_t> failingIndexTimeoutSeconds,
        boost::optional<int32_t> errorWarnIntervalSeconds
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="disabled"> (optional)</param>
    /// <param name="debug"> (optional)</param>
    /// <param name="localIndexDir"> (optional)</param>
    /// <param name="enableOpenIndexAsync"> (optional)</param>
    /// <param name="threadPoolSize"> (optional)</param>
    /// <param name="prefetchIndexFiles"> (optional)</param>
    /// <param name="extractedTextCacheSizeInMB"> (optional)</param>
    /// <param name="extractedTextCacheExpiryInSecs"> (optional)</param>
    /// <param name="alwaysUsePreExtractedCache"> (optional)</param>
    /// <param name="booleanClauseLimit"> (optional)</param>
    /// <param name="enableHybridIndexing"> (optional)</param>
    /// <param name="hybridQueueSize"> (optional)</param>
    /// <param name="disableStoredIndexDefinition"> (optional)</param>
    /// <param name="deletedBlobsCollectionEnabled"> (optional)</param>
    /// <param name="propIndexCleanerIntervalInSecs"> (optional)</param>
    /// <param name="enableSingleBlobIndexFiles"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo>> orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> disabled,
        boost::optional<bool> debug,
        boost::optional<utility::string_t> localIndexDir,
        boost::optional<bool> enableOpenIndexAsync,
        boost::optional<int32_t> threadPoolSize,
        boost::optional<bool> prefetchIndexFiles,
        boost::optional<int32_t> extractedTextCacheSizeInMB,
        boost::optional<int32_t> extractedTextCacheExpiryInSecs,
        boost::optional<bool> alwaysUsePreExtractedCache,
        boost::optional<int32_t> booleanClauseLimit,
        boost::optional<bool> enableHybridIndexing,
        boost::optional<int32_t> hybridQueueSize,
        boost::optional<bool> disableStoredIndexDefinition,
        boost::optional<bool> deletedBlobsCollectionEnabled,
        boost::optional<int32_t> propIndexCleanerIntervalInSecs,
        boost::optional<bool> enableSingleBlobIndexFiles
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="solrPeriodhomePeriodpath"> (optional)</param>
    /// <param name="solrPeriodcorePeriodname"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo>> orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> solrPeriodhomePeriodpath,
        boost::optional<utility::string_t> solrPeriodcorePeriodname
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo>> orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="pathPerioddescPeriodfield"> (optional)</param>
    /// <param name="pathPeriodchildPeriodfield"> (optional)</param>
    /// <param name="pathPeriodparentPeriodfield"> (optional)</param>
    /// <param name="pathPeriodexactPeriodfield"> (optional)</param>
    /// <param name="catchPeriodallPeriodfield"> (optional)</param>
    /// <param name="collapsedPeriodpathPeriodfield"> (optional)</param>
    /// <param name="pathPerioddepthPeriodfield"> (optional)</param>
    /// <param name="commitPeriodpolicy"> (optional)</param>
    /// <param name="rows"> (optional)</param>
    /// <param name="pathPeriodrestrictions"> (optional)</param>
    /// <param name="propertyPeriodrestrictions"> (optional)</param>
    /// <param name="primarytypesPeriodrestrictions"> (optional)</param>
    /// <param name="ignoredPeriodproperties"> (optional)</param>
    /// <param name="usedPeriodproperties"> (optional)</param>
    /// <param name="typePeriodmappings"> (optional)</param>
    /// <param name="propertyPeriodmappings"> (optional)</param>
    /// <param name="collapsePeriodjcrcontentPeriodnodes"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo>> orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> pathPerioddescPeriodfield,
        boost::optional<utility::string_t> pathPeriodchildPeriodfield,
        boost::optional<utility::string_t> pathPeriodparentPeriodfield,
        boost::optional<utility::string_t> pathPeriodexactPeriodfield,
        boost::optional<utility::string_t> catchPeriodallPeriodfield,
        boost::optional<utility::string_t> collapsedPeriodpathPeriodfield,
        boost::optional<utility::string_t> pathPerioddepthPeriodfield,
        boost::optional<utility::string_t> commitPeriodpolicy,
        boost::optional<int32_t> rows,
        boost::optional<bool> pathPeriodrestrictions,
        boost::optional<bool> propertyPeriodrestrictions,
        boost::optional<bool> primarytypesPeriodrestrictions,
        boost::optional<std::vector<utility::string_t>> ignoredPeriodproperties,
        boost::optional<std::vector<utility::string_t>> usedPeriodproperties,
        boost::optional<std::vector<utility::string_t>> typePeriodmappings,
        boost::optional<std::vector<utility::string_t>> propertyPeriodmappings,
        boost::optional<bool> collapsePeriodjcrcontentPeriodnodes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="solrPeriodhttpPeriodurl"> (optional)</param>
    /// <param name="solrPeriodzkPeriodhost"> (optional)</param>
    /// <param name="solrPeriodcollection"> (optional)</param>
    /// <param name="solrPeriodsocketPeriodtimeout"> (optional)</param>
    /// <param name="solrPeriodconnectionPeriodtimeout"> (optional)</param>
    /// <param name="solrPeriodshardsPeriodno"> (optional)</param>
    /// <param name="solrPeriodreplicationPeriodfactor"> (optional)</param>
    /// <param name="solrPeriodconfPerioddir"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo>> orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> solrPeriodhttpPeriodurl,
        boost::optional<utility::string_t> solrPeriodzkPeriodhost,
        boost::optional<utility::string_t> solrPeriodcollection,
        boost::optional<int32_t> solrPeriodsocketPeriodtimeout,
        boost::optional<int32_t> solrPeriodconnectionPeriodtimeout,
        boost::optional<int32_t> solrPeriodshardsPeriodno,
        boost::optional<int32_t> solrPeriodreplicationPeriodfactor,
        boost::optional<utility::string_t> solrPeriodconfPerioddir
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="queryPeriodaggregation"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo>> orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> queryPeriodaggregation
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="serverPeriodtype"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo>> orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> serverPeriodtype
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="providerType"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo>> orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> providerType
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="maxItems"> (optional)</param>
    /// <param name="maxPathDepth"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo>> orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> maxItems,
        boost::optional<int32_t> maxPathDepth,
        boost::optional<bool> enabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="queryLimitInMemory"> (optional)</param>
    /// <param name="queryLimitReads"> (optional)</param>
    /// <param name="queryFailTraversal"> (optional)</param>
    /// <param name="fastQuerySize"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo>> orgApacheJackrabbitOakQueryQueryEngineSettingsService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> queryLimitInMemory,
        boost::optional<int32_t> queryLimitReads,
        boost::optional<bool> queryFailTraversal,
        boost::optional<bool> fastQuerySize
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodappName"> (optional)</param>
    /// <param name="orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodconfigSpiName"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo>> orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodappName,
        boost::optional<utility::string_t> orgPeriodapachePeriodjackrabbitPeriodoakPeriodauthenticationPeriodconfigSpiName
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="providerPeriodname"> (optional)</param>
    /// <param name="hostPeriodname"> (optional)</param>
    /// <param name="hostPeriodport"> (optional)</param>
    /// <param name="hostPeriodssl"> (optional)</param>
    /// <param name="hostPeriodtls"> (optional)</param>
    /// <param name="hostPeriodnoCertCheck"> (optional)</param>
    /// <param name="bindPerioddn"> (optional)</param>
    /// <param name="bindPeriodpassword"> (optional)</param>
    /// <param name="searchTimeout"> (optional)</param>
    /// <param name="adminPoolPeriodmaxActive"> (optional)</param>
    /// <param name="adminPoolPeriodlookupOnValidate"> (optional)</param>
    /// <param name="userPoolPeriodmaxActive"> (optional)</param>
    /// <param name="userPoolPeriodlookupOnValidate"> (optional)</param>
    /// <param name="userPeriodbaseDN"> (optional)</param>
    /// <param name="userPeriodobjectclass"> (optional)</param>
    /// <param name="userPeriodidAttribute"> (optional)</param>
    /// <param name="userPeriodextraFilter"> (optional)</param>
    /// <param name="userPeriodmakeDnPath"> (optional)</param>
    /// <param name="groupPeriodbaseDN"> (optional)</param>
    /// <param name="groupPeriodobjectclass"> (optional)</param>
    /// <param name="groupPeriodnameAttribute"> (optional)</param>
    /// <param name="groupPeriodextraFilter"> (optional)</param>
    /// <param name="groupPeriodmakeDnPath"> (optional)</param>
    /// <param name="groupPeriodmemberAttribute"> (optional)</param>
    /// <param name="useUidForExtId"> (optional)</param>
    /// <param name="customattributes"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo>> orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> providerPeriodname,
        boost::optional<utility::string_t> hostPeriodname,
        boost::optional<int32_t> hostPeriodport,
        boost::optional<bool> hostPeriodssl,
        boost::optional<bool> hostPeriodtls,
        boost::optional<bool> hostPeriodnoCertCheck,
        boost::optional<utility::string_t> bindPerioddn,
        boost::optional<utility::string_t> bindPeriodpassword,
        boost::optional<utility::string_t> searchTimeout,
        boost::optional<int32_t> adminPoolPeriodmaxActive,
        boost::optional<bool> adminPoolPeriodlookupOnValidate,
        boost::optional<int32_t> userPoolPeriodmaxActive,
        boost::optional<bool> userPoolPeriodlookupOnValidate,
        boost::optional<utility::string_t> userPeriodbaseDN,
        boost::optional<std::vector<utility::string_t>> userPeriodobjectclass,
        boost::optional<utility::string_t> userPeriodidAttribute,
        boost::optional<utility::string_t> userPeriodextraFilter,
        boost::optional<bool> userPeriodmakeDnPath,
        boost::optional<utility::string_t> groupPeriodbaseDN,
        boost::optional<std::vector<utility::string_t>> groupPeriodobjectclass,
        boost::optional<utility::string_t> groupPeriodnameAttribute,
        boost::optional<utility::string_t> groupPeriodextraFilter,
        boost::optional<bool> groupPeriodmakeDnPath,
        boost::optional<utility::string_t> groupPeriodmemberAttribute,
        boost::optional<bool> useUidForExtId,
        boost::optional<std::vector<utility::string_t>> customattributes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="tokenExpiration"> (optional)</param>
    /// <param name="tokenLength"> (optional)</param>
    /// <param name="tokenRefresh"> (optional)</param>
    /// <param name="tokenCleanupThreshold"> (optional)</param>
    /// <param name="passwordHashAlgorithm"> (optional)</param>
    /// <param name="passwordHashIterations"> (optional)</param>
    /// <param name="passwordSaltSize"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo>> orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> tokenExpiration,
        boost::optional<utility::string_t> tokenLength,
        boost::optional<bool> tokenRefresh,
        boost::optional<int32_t> tokenCleanupThreshold,
        boost::optional<utility::string_t> passwordHashAlgorithm,
        boost::optional<int32_t> passwordHashIterations,
        boost::optional<int32_t> passwordSaltSize
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="permissionsJr2"> (optional)</param>
    /// <param name="importBehavior"> (optional)</param>
    /// <param name="readPaths"> (optional)</param>
    /// <param name="administrativePrincipals"> (optional)</param>
    /// <param name="configurationRanking"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo>> orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> permissionsJr2,
        boost::optional<utility::string_t> importBehavior,
        boost::optional<std::vector<utility::string_t>> readPaths,
        boost::optional<std::vector<utility::string_t>> administrativePrincipals,
        boost::optional<int32_t> configurationRanking
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="requiredServicePids"> (optional)</param>
    /// <param name="authorizationCompositionType"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo>> orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> requiredServicePids,
        boost::optional<utility::string_t> authorizationCompositionType
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="length"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo>> orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> length
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="usersPath"> (optional)</param>
    /// <param name="groupsPath"> (optional)</param>
    /// <param name="systemRelativePath"> (optional)</param>
    /// <param name="defaultDepth"> (optional)</param>
    /// <param name="importBehavior"> (optional)</param>
    /// <param name="passwordHashAlgorithm"> (optional)</param>
    /// <param name="passwordHashIterations"> (optional)</param>
    /// <param name="passwordSaltSize"> (optional)</param>
    /// <param name="omitAdminPw"> (optional)</param>
    /// <param name="supportAutoSave"> (optional)</param>
    /// <param name="passwordMaxAge"> (optional)</param>
    /// <param name="initialPasswordChange"> (optional)</param>
    /// <param name="passwordHistorySize"> (optional)</param>
    /// <param name="passwordExpiryForAdmin"> (optional)</param>
    /// <param name="cacheExpiration"> (optional)</param>
    /// <param name="enableRFC7613UsercaseMappedProfile"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo>> orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> usersPath,
        boost::optional<utility::string_t> groupsPath,
        boost::optional<utility::string_t> systemRelativePath,
        boost::optional<int32_t> defaultDepth,
        boost::optional<utility::string_t> importBehavior,
        boost::optional<utility::string_t> passwordHashAlgorithm,
        boost::optional<int32_t> passwordHashIterations,
        boost::optional<int32_t> passwordSaltSize,
        boost::optional<bool> omitAdminPw,
        boost::optional<bool> supportAutoSave,
        boost::optional<int32_t> passwordMaxAge,
        boost::optional<bool> initialPasswordChange,
        boost::optional<int32_t> passwordHistorySize,
        boost::optional<bool> passwordExpiryForAdmin,
        boost::optional<int32_t> cacheExpiration,
        boost::optional<bool> enableRFC7613UsercaseMappedProfile
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="accountName"> (optional)</param>
    /// <param name="containerName"> (optional)</param>
    /// <param name="accessKey"> (optional)</param>
    /// <param name="rootPath"> (optional)</param>
    /// <param name="connectionURL"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo>> orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> accountName,
        boost::optional<utility::string_t> containerName,
        boost::optional<utility::string_t> accessKey,
        boost::optional<utility::string_t> rootPath,
        boost::optional<utility::string_t> connectionURL
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="repositoryPeriodhome"> (optional)</param>
    /// <param name="tarmkPeriodmode"> (optional)</param>
    /// <param name="tarmkPeriodsize"> (optional)</param>
    /// <param name="segmentCachePeriodsize"> (optional)</param>
    /// <param name="stringCachePeriodsize"> (optional)</param>
    /// <param name="templateCachePeriodsize"> (optional)</param>
    /// <param name="stringDeduplicationCachePeriodsize"> (optional)</param>
    /// <param name="templateDeduplicationCachePeriodsize"> (optional)</param>
    /// <param name="nodeDeduplicationCachePeriodsize"> (optional)</param>
    /// <param name="pauseCompaction"> (optional)</param>
    /// <param name="compactionPeriodretryCount"> (optional)</param>
    /// <param name="compactionPeriodforcePeriodtimeout"> (optional)</param>
    /// <param name="compactionPeriodsizeDeltaEstimation"> (optional)</param>
    /// <param name="compactionPerioddisableEstimation"> (optional)</param>
    /// <param name="compactionPeriodretainedGenerations"> (optional)</param>
    /// <param name="compactionPeriodmemoryThreshold"> (optional)</param>
    /// <param name="compactionPeriodprogressLog"> (optional)</param>
    /// <param name="standby"> (optional)</param>
    /// <param name="customBlobStore"> (optional)</param>
    /// <param name="customSegmentStore"> (optional)</param>
    /// <param name="splitPersistence"> (optional)</param>
    /// <param name="repositoryPeriodbackupPerioddir"> (optional)</param>
    /// <param name="blobGcMaxAgeInSecs"> (optional)</param>
    /// <param name="blobTrackSnapshotIntervalInSecs"> (optional)</param>
    /// <param name="role"> (optional)</param>
    /// <param name="registerDescriptors"> (optional)</param>
    /// <param name="dispatchChanges"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo>> orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> repositoryPeriodhome,
        boost::optional<utility::string_t> tarmkPeriodmode,
        boost::optional<int32_t> tarmkPeriodsize,
        boost::optional<int32_t> segmentCachePeriodsize,
        boost::optional<int32_t> stringCachePeriodsize,
        boost::optional<int32_t> templateCachePeriodsize,
        boost::optional<int32_t> stringDeduplicationCachePeriodsize,
        boost::optional<int32_t> templateDeduplicationCachePeriodsize,
        boost::optional<int32_t> nodeDeduplicationCachePeriodsize,
        boost::optional<bool> pauseCompaction,
        boost::optional<int32_t> compactionPeriodretryCount,
        boost::optional<int32_t> compactionPeriodforcePeriodtimeout,
        boost::optional<int32_t> compactionPeriodsizeDeltaEstimation,
        boost::optional<bool> compactionPerioddisableEstimation,
        boost::optional<int32_t> compactionPeriodretainedGenerations,
        boost::optional<int32_t> compactionPeriodmemoryThreshold,
        boost::optional<int32_t> compactionPeriodprogressLog,
        boost::optional<bool> standby,
        boost::optional<bool> customBlobStore,
        boost::optional<bool> customSegmentStore,
        boost::optional<bool> splitPersistence,
        boost::optional<utility::string_t> repositoryPeriodbackupPerioddir,
        boost::optional<int32_t> blobGcMaxAgeInSecs,
        boost::optional<int32_t> blobTrackSnapshotIntervalInSecs,
        boost::optional<utility::string_t> role,
        boost::optional<bool> registerDescriptors,
        boost::optional<bool> dispatchChanges
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="commitsTrackerWriterGroups"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo>> orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> commitsTrackerWriterGroups
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="repositoryPeriodhome"> (optional)</param>
    /// <param name="tarmkPeriodmode"> (optional)</param>
    /// <param name="tarmkPeriodsize"> (optional)</param>
    /// <param name="segmentCachePeriodsize"> (optional)</param>
    /// <param name="stringCachePeriodsize"> (optional)</param>
    /// <param name="templateCachePeriodsize"> (optional)</param>
    /// <param name="stringDeduplicationCachePeriodsize"> (optional)</param>
    /// <param name="templateDeduplicationCachePeriodsize"> (optional)</param>
    /// <param name="nodeDeduplicationCachePeriodsize"> (optional)</param>
    /// <param name="pauseCompaction"> (optional)</param>
    /// <param name="compactionPeriodretryCount"> (optional)</param>
    /// <param name="compactionPeriodforcePeriodtimeout"> (optional)</param>
    /// <param name="compactionPeriodsizeDeltaEstimation"> (optional)</param>
    /// <param name="compactionPerioddisableEstimation"> (optional)</param>
    /// <param name="compactionPeriodretainedGenerations"> (optional)</param>
    /// <param name="compactionPeriodmemoryThreshold"> (optional)</param>
    /// <param name="compactionPeriodprogressLog"> (optional)</param>
    /// <param name="standby"> (optional)</param>
    /// <param name="customBlobStore"> (optional)</param>
    /// <param name="customSegmentStore"> (optional)</param>
    /// <param name="splitPersistence"> (optional)</param>
    /// <param name="repositoryPeriodbackupPerioddir"> (optional)</param>
    /// <param name="blobGcMaxAgeInSecs"> (optional)</param>
    /// <param name="blobTrackSnapshotIntervalInSecs"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo>> orgApacheJackrabbitOakSegmentSegmentNodeStoreService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> repositoryPeriodhome,
        boost::optional<utility::string_t> tarmkPeriodmode,
        boost::optional<int32_t> tarmkPeriodsize,
        boost::optional<int32_t> segmentCachePeriodsize,
        boost::optional<int32_t> stringCachePeriodsize,
        boost::optional<int32_t> templateCachePeriodsize,
        boost::optional<int32_t> stringDeduplicationCachePeriodsize,
        boost::optional<int32_t> templateDeduplicationCachePeriodsize,
        boost::optional<int32_t> nodeDeduplicationCachePeriodsize,
        boost::optional<bool> pauseCompaction,
        boost::optional<int32_t> compactionPeriodretryCount,
        boost::optional<int32_t> compactionPeriodforcePeriodtimeout,
        boost::optional<int32_t> compactionPeriodsizeDeltaEstimation,
        boost::optional<bool> compactionPerioddisableEstimation,
        boost::optional<int32_t> compactionPeriodretainedGenerations,
        boost::optional<int32_t> compactionPeriodmemoryThreshold,
        boost::optional<int32_t> compactionPeriodprogressLog,
        boost::optional<bool> standby,
        boost::optional<bool> customBlobStore,
        boost::optional<bool> customSegmentStore,
        boost::optional<bool> splitPersistence,
        boost::optional<utility::string_t> repositoryPeriodbackupPerioddir,
        boost::optional<int32_t> blobGcMaxAgeInSecs,
        boost::optional<int32_t> blobTrackSnapshotIntervalInSecs
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist"> (optional)</param>
    /// <param name="mode"> (optional)</param>
    /// <param name="port"> (optional)</param>
    /// <param name="primaryPeriodhost"> (optional)</param>
    /// <param name="interval"> (optional)</param>
    /// <param name="primaryPeriodallowedClientIpRanges"> (optional)</param>
    /// <param name="secure"> (optional)</param>
    /// <param name="standbyPeriodreadtimeout"> (optional)</param>
    /// <param name="standbyPeriodautoclean"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo>> orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist,
        boost::optional<utility::string_t> mode,
        boost::optional<int32_t> port,
        boost::optional<utility::string_t> primaryPeriodhost,
        boost::optional<int32_t> interval,
        boost::optional<std::vector<utility::string_t>> primaryPeriodallowedClientIpRanges,
        boost::optional<bool> secure,
        boost::optional<int32_t> standbyPeriodreadtimeout,
        boost::optional<bool> standbyPeriodautoclean
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="handlerPeriodname"> (optional)</param>
    /// <param name="userPeriodexpirationTime"> (optional)</param>
    /// <param name="userPeriodautoMembership"> (optional)</param>
    /// <param name="userPeriodpropertyMapping"> (optional)</param>
    /// <param name="userPeriodpathPrefix"> (optional)</param>
    /// <param name="userPeriodmembershipExpTime"> (optional)</param>
    /// <param name="userPeriodmembershipNestingDepth"> (optional)</param>
    /// <param name="userPerioddynamicMembership"> (optional)</param>
    /// <param name="userPerioddisableMissing"> (optional)</param>
    /// <param name="groupPeriodexpirationTime"> (optional)</param>
    /// <param name="groupPeriodautoMembership"> (optional)</param>
    /// <param name="groupPeriodpropertyMapping"> (optional)</param>
    /// <param name="groupPeriodpathPrefix"> (optional)</param>
    /// <param name="enableRFC7613UsercaseMappedProfile"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo>> orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> handlerPeriodname,
        boost::optional<utility::string_t> userPeriodexpirationTime,
        boost::optional<std::vector<utility::string_t>> userPeriodautoMembership,
        boost::optional<std::vector<utility::string_t>> userPeriodpropertyMapping,
        boost::optional<utility::string_t> userPeriodpathPrefix,
        boost::optional<utility::string_t> userPeriodmembershipExpTime,
        boost::optional<int32_t> userPeriodmembershipNestingDepth,
        boost::optional<bool> userPerioddynamicMembership,
        boost::optional<bool> userPerioddisableMissing,
        boost::optional<utility::string_t> groupPeriodexpirationTime,
        boost::optional<std::vector<utility::string_t>> groupPeriodautoMembership,
        boost::optional<std::vector<utility::string_t>> groupPeriodpropertyMapping,
        boost::optional<utility::string_t> groupPeriodpathPrefix,
        boost::optional<bool> enableRFC7613UsercaseMappedProfile
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="jaasPeriodranking"> (optional)</param>
    /// <param name="jaasPeriodcontrolFlag"> (optional)</param>
    /// <param name="jaasPeriodrealmName"> (optional)</param>
    /// <param name="idpPeriodname"> (optional)</param>
    /// <param name="syncPeriodhandlerName"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo>> orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> jaasPeriodranking,
        boost::optional<utility::string_t> jaasPeriodcontrolFlag,
        boost::optional<utility::string_t> jaasPeriodrealmName,
        boost::optional<utility::string_t> idpPeriodname,
        boost::optional<utility::string_t> syncPeriodhandlerName
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="protectExternalId"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo>> orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> protectExternalId
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="cugSupportedPaths"> (optional)</param>
    /// <param name="cugEnabled"> (optional)</param>
    /// <param name="configurationRanking"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo>> orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> cugSupportedPaths,
        boost::optional<bool> cugEnabled,
        boost::optional<int32_t> configurationRanking
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="principalNames"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo>> orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> principalNames
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enabledActions"> (optional)</param>
    /// <param name="userPrivilegeNames"> (optional)</param>
    /// <param name="groupPrivilegeNames"> (optional)</param>
    /// <param name="constraint"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo>> orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> enabledActions,
        boost::optional<std::vector<utility::string_t>> userPrivilegeNames,
        boost::optional<std::vector<utility::string_t>> groupPrivilegeNames,
        boost::optional<utility::string_t> constraint
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="packageRoots"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo>> orgApacheJackrabbitVaultPackagingImplPackagingImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> packageRoots
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="homePath"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo>> orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> homePath
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="slingPeriodservletPeriodmethods"> (optional)</param>
    /// <param name="slingPeriodservletPeriodpaths"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingAuthCoreImplLogoutServletInfo>> orgApacheSlingAuthCoreImplLogoutServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> slingPeriodservletPeriodmethods,
        boost::optional<utility::string_t> slingPeriodservletPeriodpaths
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo>> orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="configBucketNames"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingCaconfigImplConfigurationResolverImplInfo>> orgApacheSlingCaconfigImplConfigurationResolverImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> configBucketNames
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    /// <param name="configPropertyInheritancePropertyNames"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo>> orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enabled,
        boost::optional<std::vector<utility::string_t>> configPropertyInheritancePropertyNames
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo>> orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="description"> (optional)</param>
    /// <param name="overrides"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo>> orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> description,
        boost::optional<std::vector<utility::string_t>> overrides,
        boost::optional<bool> enabled,
        boost::optional<int32_t> servicePeriodranking
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo>> orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enabled,
        boost::optional<int32_t> servicePeriodranking
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="ignorePropertyNameRegex"> (optional)</param>
    /// <param name="configCollectionPropertiesResourceNames"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo>> orgApacheSlingCaconfigManagementImplConfigurationManagementSetti(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> ignorePropertyNameRegex,
        boost::optional<std::vector<utility::string_t>> configCollectionPropertiesResourceNames
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    /// <param name="configPath"> (optional)</param>
    /// <param name="fallbackPaths"> (optional)</param>
    /// <param name="configCollectionInheritancePropertyNames"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo>> orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enabled,
        boost::optional<utility::string_t> configPath,
        boost::optional<std::vector<utility::string_t>> fallbackPaths,
        boost::optional<std::vector<utility::string_t>> configCollectionInheritancePropertyNames
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    /// <param name="configRefResourceNames"> (optional)</param>
    /// <param name="configRefPropertyNames"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo>> orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> enabled,
        boost::optional<std::vector<utility::string_t>> configRefResourceNames,
        boost::optional<std::vector<utility::string_t>> configRefPropertyNames,
        boost::optional<int32_t> servicePeriodranking
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="parserPeriodfeatures"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo>> orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> parserPeriodfeatures
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodconfigurationFile"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpackagingDataEnabled"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxCallerDataDepth"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxOldFileCountInDump"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnumOfLines"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingCommonsLogLogManagerInfo>> orgApacheSlingCommonsLogLogManager(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile,
        boost::optional<int32_t> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodconfigurationFile,
        boost::optional<bool> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpackagingDataEnabled,
        boost::optional<int32_t> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxCallerDataDepth,
        boost::optional<int32_t> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodmaxOldFileCountInDump,
        boost::optional<int32_t> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnumOfLines
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnames"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodadditiv"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo>> orgApacheSlingCommonsLogLogManagerFactoryConfig(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodlevel,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodpattern,
        boost::optional<std::vector<utility::string_t>> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodnames,
        boost::optional<bool> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodadditiv
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodbuffered"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo>> orgApacheSlingCommonsLogLogManagerFactoryWriter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfile,
        boost::optional<int32_t> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodnumber,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodsize,
        boost::optional<bool> orgPeriodapachePeriodslingPeriodcommonsPeriodlogPeriodfilePeriodbuffered
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="period"> (optional)</param>
    /// <param name="timeUnit"> (optional)</param>
    /// <param name="level"> (optional)</param>
    /// <param name="loggerName"> (optional)</param>
    /// <param name="prefix"> (optional)</param>
    /// <param name="pattern"> (optional)</param>
    /// <param name="registryName"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingCommonsMetricsInternalLogReporterInfo>> orgApacheSlingCommonsMetricsInternalLogReporter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> period,
        boost::optional<utility::string_t> timeUnit,
        boost::optional<utility::string_t> level,
        boost::optional<utility::string_t> loggerName,
        boost::optional<utility::string_t> prefix,
        boost::optional<utility::string_t> pattern,
        boost::optional<utility::string_t> registryName
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="datasources"> (optional)</param>
    /// <param name="step"> (optional)</param>
    /// <param name="archives"> (optional)</param>
    /// <param name="path"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo>> orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> datasources,
        boost::optional<int32_t> step,
        boost::optional<std::vector<utility::string_t>> archives,
        boost::optional<utility::string_t> path
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="mimePeriodtypes"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo>> orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> mimePeriodtypes
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="poolName"> (optional)</param>
    /// <param name="allowedPoolNames"> (optional)</param>
    /// <param name="schedulerPerioduseleaderforsingle"> (optional)</param>
    /// <param name="metricsPeriodfilters"> (optional)</param>
    /// <param name="slowThresholdMillis"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo>> orgApacheSlingCommonsSchedulerImplQuartzScheduler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> poolName,
        boost::optional<std::vector<utility::string_t>> allowedPoolNames,
        boost::optional<bool> schedulerPerioduseleaderforsingle,
        boost::optional<std::vector<utility::string_t>> metricsPeriodfilters,
        boost::optional<int32_t> slowThresholdMillis
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="maxPeriodquartzJobPerioddurationPeriodacceptable"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo>> orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> maxPeriodquartzJobPerioddurationPeriodacceptable
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="minPoolSize"> (optional)</param>
    /// <param name="maxPoolSize"> (optional)</param>
    /// <param name="queueSize"> (optional)</param>
    /// <param name="maxThreadAge"> (optional)</param>
    /// <param name="keepAliveTime"> (optional)</param>
    /// <param name="blockPolicy"> (optional)</param>
    /// <param name="shutdownGraceful"> (optional)</param>
    /// <param name="daemon"> (optional)</param>
    /// <param name="shutdownWaitTime"> (optional)</param>
    /// <param name="priority"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo>> orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<int32_t> minPoolSize,
        boost::optional<int32_t> maxPoolSize,
        boost::optional<int32_t> queueSize,
        boost::optional<int32_t> maxThreadAge,
        boost::optional<int32_t> keepAliveTime,
        boost::optional<utility::string_t> blockPolicy,
        boost::optional<bool> shutdownGraceful,
        boost::optional<bool> daemon,
        boost::optional<int32_t> shutdownWaitTime,
        boost::optional<utility::string_t> priority
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="datasourcePeriodname"> (optional)</param>
    /// <param name="datasourcePeriodsvcPeriodpropPeriodname"> (optional)</param>
    /// <param name="driverClassName"> (optional)</param>
    /// <param name="url"> (optional)</param>
    /// <param name="username"> (optional)</param>
    /// <param name="password"> (optional)</param>
    /// <param name="defaultAutoCommit"> (optional)</param>
    /// <param name="defaultReadOnly"> (optional)</param>
    /// <param name="defaultTransactionIsolation"> (optional)</param>
    /// <param name="defaultCatalog"> (optional)</param>
    /// <param name="maxActive"> (optional)</param>
    /// <param name="maxIdle"> (optional)</param>
    /// <param name="minIdle"> (optional)</param>
    /// <param name="initialSize"> (optional)</param>
    /// <param name="maxWait"> (optional)</param>
    /// <param name="maxAge"> (optional)</param>
    /// <param name="testOnBorrow"> (optional)</param>
    /// <param name="testOnReturn"> (optional)</param>
    /// <param name="testWhileIdle"> (optional)</param>
    /// <param name="validationQuery"> (optional)</param>
    /// <param name="validationQueryTimeout"> (optional)</param>
    /// <param name="timeBetweenEvictionRunsMillis"> (optional)</param>
    /// <param name="minEvictableIdleTimeMillis"> (optional)</param>
    /// <param name="connectionProperties"> (optional)</param>
    /// <param name="initSQL"> (optional)</param>
    /// <param name="jdbcInterceptors"> (optional)</param>
    /// <param name="validationInterval"> (optional)</param>
    /// <param name="logValidationErrors"> (optional)</param>
    /// <param name="datasourcePeriodsvcPeriodproperties"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDatasourceDataSourceFactoryInfo>> orgApacheSlingDatasourceDataSourceFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> datasourcePeriodname,
        boost::optional<utility::string_t> datasourcePeriodsvcPeriodpropPeriodname,
        boost::optional<utility::string_t> driverClassName,
        boost::optional<utility::string_t> url,
        boost::optional<utility::string_t> username,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> defaultAutoCommit,
        boost::optional<utility::string_t> defaultReadOnly,
        boost::optional<utility::string_t> defaultTransactionIsolation,
        boost::optional<utility::string_t> defaultCatalog,
        boost::optional<int32_t> maxActive,
        boost::optional<int32_t> maxIdle,
        boost::optional<int32_t> minIdle,
        boost::optional<int32_t> initialSize,
        boost::optional<int32_t> maxWait,
        boost::optional<int32_t> maxAge,
        boost::optional<bool> testOnBorrow,
        boost::optional<bool> testOnReturn,
        boost::optional<bool> testWhileIdle,
        boost::optional<utility::string_t> validationQuery,
        boost::optional<int32_t> validationQueryTimeout,
        boost::optional<int32_t> timeBetweenEvictionRunsMillis,
        boost::optional<int32_t> minEvictableIdleTimeMillis,
        boost::optional<utility::string_t> connectionProperties,
        boost::optional<utility::string_t> initSQL,
        boost::optional<utility::string_t> jdbcInterceptors,
        boost::optional<int32_t> validationInterval,
        boost::optional<bool> logValidationErrors,
        boost::optional<std::vector<utility::string_t>> datasourcePeriodsvcPeriodproperties
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="datasourcePeriodname"> (optional)</param>
    /// <param name="datasourcePeriodsvcPeriodpropPeriodname"> (optional)</param>
    /// <param name="datasourcePeriodjndiPeriodname"> (optional)</param>
    /// <param name="jndiPeriodproperties"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo>> orgApacheSlingDatasourceJNDIDataSourceFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> datasourcePeriodname,
        boost::optional<utility::string_t> datasourcePeriodsvcPeriodpropPeriodname,
        boost::optional<utility::string_t> datasourcePeriodjndiPeriodname,
        boost::optional<std::vector<utility::string_t>> jndiPeriodproperties
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="connectorPingTimeout"> (optional)</param>
    /// <param name="connectorPingInterval"> (optional)</param>
    /// <param name="discoveryLiteCheckInterval"> (optional)</param>
    /// <param name="clusterSyncServiceTimeout"> (optional)</param>
    /// <param name="clusterSyncServiceInterval"> (optional)</param>
    /// <param name="enableSyncToken"> (optional)</param>
    /// <param name="minEventDelay"> (optional)</param>
    /// <param name="socketConnectTimeout"> (optional)</param>
    /// <param name="soTimeout"> (optional)</param>
    /// <param name="topologyConnectorUrls"> (optional)</param>
    /// <param name="topologyConnectorWhitelist"> (optional)</param>
    /// <param name="autoStopLocalLoopEnabled"> (optional)</param>
    /// <param name="gzipConnectorRequestsEnabled"> (optional)</param>
    /// <param name="hmacEnabled"> (optional)</param>
    /// <param name="enableEncryption"> (optional)</param>
    /// <param name="sharedKey"> (optional)</param>
    /// <param name="hmacSharedKeyTTL"> (optional)</param>
    /// <param name="backoffStandbyFactor"> (optional)</param>
    /// <param name="backoffStableFactor"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDiscoveryOakConfigInfo>> orgApacheSlingDiscoveryOakConfig(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> connectorPingTimeout,
        boost::optional<int32_t> connectorPingInterval,
        boost::optional<int32_t> discoveryLiteCheckInterval,
        boost::optional<int32_t> clusterSyncServiceTimeout,
        boost::optional<int32_t> clusterSyncServiceInterval,
        boost::optional<bool> enableSyncToken,
        boost::optional<int32_t> minEventDelay,
        boost::optional<int32_t> socketConnectTimeout,
        boost::optional<int32_t> soTimeout,
        boost::optional<std::vector<utility::string_t>> topologyConnectorUrls,
        boost::optional<std::vector<utility::string_t>> topologyConnectorWhitelist,
        boost::optional<bool> autoStopLocalLoopEnabled,
        boost::optional<bool> gzipConnectorRequestsEnabled,
        boost::optional<bool> hmacEnabled,
        boost::optional<bool> enableEncryption,
        boost::optional<utility::string_t> sharedKey,
        boost::optional<int32_t> hmacSharedKeyTTL,
        boost::optional<utility::string_t> backoffStandbyFactor,
        boost::optional<utility::string_t> backoffStableFactor
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodname"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    /// <param name="hcPeriodmbeanPeriodname"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo>> orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> hcPeriodname,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags,
        boost::optional<utility::string_t> hcPeriodmbeanPeriodname
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="title"> (optional)</param>
    /// <param name="details"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    /// <param name="serviceName"> (optional)</param>
    /// <param name="logPeriodlevel"> (optional)</param>
    /// <param name="allowedPeriodroots"> (optional)</param>
    /// <param name="queuePeriodprocessingPeriodenabled"> (optional)</param>
    /// <param name="packageImporterPeriodendpoints"> (optional)</param>
    /// <param name="passiveQueues"> (optional)</param>
    /// <param name="priorityQueues"> (optional)</param>
    /// <param name="retryPeriodstrategy"> (optional)</param>
    /// <param name="retryPeriodattempts"> (optional)</param>
    /// <param name="requestAuthorizationStrategyPeriodtarget"> (optional)</param>
    /// <param name="transportSecretProviderPeriodtarget"> (optional)</param>
    /// <param name="packageBuilderPeriodtarget"> (optional)</param>
    /// <param name="triggersPeriodtarget"> (optional)</param>
    /// <param name="queuePeriodprovider"> (optional)</param>
    /// <param name="asyncPerioddelivery"> (optional)</param>
    /// <param name="httpPeriodconnPeriodtimeout"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo>> orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> title,
        boost::optional<utility::string_t> details,
        boost::optional<bool> enabled,
        boost::optional<utility::string_t> serviceName,
        boost::optional<utility::string_t> logPeriodlevel,
        boost::optional<std::vector<utility::string_t>> allowedPeriodroots,
        boost::optional<bool> queuePeriodprocessingPeriodenabled,
        boost::optional<std::vector<utility::string_t>> packageImporterPeriodendpoints,
        boost::optional<std::vector<utility::string_t>> passiveQueues,
        boost::optional<std::vector<utility::string_t>> priorityQueues,
        boost::optional<utility::string_t> retryPeriodstrategy,
        boost::optional<int32_t> retryPeriodattempts,
        boost::optional<utility::string_t> requestAuthorizationStrategyPeriodtarget,
        boost::optional<utility::string_t> transportSecretProviderPeriodtarget,
        boost::optional<utility::string_t> packageBuilderPeriodtarget,
        boost::optional<utility::string_t> triggersPeriodtarget,
        boost::optional<utility::string_t> queuePeriodprovider,
        boost::optional<bool> asyncPerioddelivery,
        boost::optional<int32_t> httpPeriodconnPeriodtimeout
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="jcrPrivilege"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo>> orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> jcrPrivilege
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="title"> (optional)</param>
    /// <param name="details"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    /// <param name="serviceName"> (optional)</param>
    /// <param name="logPeriodlevel"> (optional)</param>
    /// <param name="allowedPeriodroots"> (optional)</param>
    /// <param name="requestAuthorizationStrategyPeriodtarget"> (optional)</param>
    /// <param name="queueProviderFactoryPeriodtarget"> (optional)</param>
    /// <param name="packageBuilderPeriodtarget"> (optional)</param>
    /// <param name="triggersPeriodtarget"> (optional)</param>
    /// <param name="priorityQueues"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo>> orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> title,
        boost::optional<utility::string_t> details,
        boost::optional<bool> enabled,
        boost::optional<utility::string_t> serviceName,
        boost::optional<utility::string_t> logPeriodlevel,
        boost::optional<std::vector<utility::string_t>> allowedPeriodroots,
        boost::optional<utility::string_t> requestAuthorizationStrategyPeriodtarget,
        boost::optional<utility::string_t> queueProviderFactoryPeriodtarget,
        boost::optional<utility::string_t> packageBuilderPeriodtarget,
        boost::optional<utility::string_t> triggersPeriodtarget,
        boost::optional<std::vector<utility::string_t>> priorityQueues
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="title"> (optional)</param>
    /// <param name="details"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    /// <param name="serviceName"> (optional)</param>
    /// <param name="logPeriodlevel"> (optional)</param>
    /// <param name="queuePeriodprocessingPeriodenabled"> (optional)</param>
    /// <param name="packageExporterPeriodendpoints"> (optional)</param>
    /// <param name="pullPerioditems"> (optional)</param>
    /// <param name="httpPeriodconnPeriodtimeout"> (optional)</param>
    /// <param name="requestAuthorizationStrategyPeriodtarget"> (optional)</param>
    /// <param name="transportSecretProviderPeriodtarget"> (optional)</param>
    /// <param name="packageBuilderPeriodtarget"> (optional)</param>
    /// <param name="triggersPeriodtarget"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo>> orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> title,
        boost::optional<utility::string_t> details,
        boost::optional<bool> enabled,
        boost::optional<utility::string_t> serviceName,
        boost::optional<utility::string_t> logPeriodlevel,
        boost::optional<bool> queuePeriodprocessingPeriodenabled,
        boost::optional<std::vector<utility::string_t>> packageExporterPeriodendpoints,
        boost::optional<int32_t> pullPerioditems,
        boost::optional<int32_t> httpPeriodconnPeriodtimeout,
        boost::optional<utility::string_t> requestAuthorizationStrategyPeriodtarget,
        boost::optional<utility::string_t> transportSecretProviderPeriodtarget,
        boost::optional<utility::string_t> packageBuilderPeriodtarget,
        boost::optional<utility::string_t> triggersPeriodtarget
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="title"> (optional)</param>
    /// <param name="details"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    /// <param name="serviceName"> (optional)</param>
    /// <param name="logPeriodlevel"> (optional)</param>
    /// <param name="queuePeriodprocessingPeriodenabled"> (optional)</param>
    /// <param name="packageExporterPeriodtarget"> (optional)</param>
    /// <param name="packageImporterPeriodtarget"> (optional)</param>
    /// <param name="requestAuthorizationStrategyPeriodtarget"> (optional)</param>
    /// <param name="triggersPeriodtarget"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo>> orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> title,
        boost::optional<utility::string_t> details,
        boost::optional<bool> enabled,
        boost::optional<utility::string_t> serviceName,
        boost::optional<utility::string_t> logPeriodlevel,
        boost::optional<bool> queuePeriodprocessingPeriodenabled,
        boost::optional<utility::string_t> packageExporterPeriodtarget,
        boost::optional<utility::string_t> packageImporterPeriodtarget,
        boost::optional<utility::string_t> requestAuthorizationStrategyPeriodtarget,
        boost::optional<utility::string_t> triggersPeriodtarget
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="title"> (optional)</param>
    /// <param name="details"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    /// <param name="serviceName"> (optional)</param>
    /// <param name="logPeriodlevel"> (optional)</param>
    /// <param name="queuePeriodprocessingPeriodenabled"> (optional)</param>
    /// <param name="passiveQueues"> (optional)</param>
    /// <param name="packageExporterPeriodendpoints"> (optional)</param>
    /// <param name="packageImporterPeriodendpoints"> (optional)</param>
    /// <param name="retryPeriodstrategy"> (optional)</param>
    /// <param name="retryPeriodattempts"> (optional)</param>
    /// <param name="pullPerioditems"> (optional)</param>
    /// <param name="httpPeriodconnPeriodtimeout"> (optional)</param>
    /// <param name="requestAuthorizationStrategyPeriodtarget"> (optional)</param>
    /// <param name="transportSecretProviderPeriodtarget"> (optional)</param>
    /// <param name="packageBuilderPeriodtarget"> (optional)</param>
    /// <param name="triggersPeriodtarget"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo>> orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> title,
        boost::optional<utility::string_t> details,
        boost::optional<bool> enabled,
        boost::optional<utility::string_t> serviceName,
        boost::optional<utility::string_t> logPeriodlevel,
        boost::optional<bool> queuePeriodprocessingPeriodenabled,
        boost::optional<std::vector<utility::string_t>> passiveQueues,
        boost::optional<std::vector<utility::string_t>> packageExporterPeriodendpoints,
        boost::optional<std::vector<utility::string_t>> packageImporterPeriodendpoints,
        boost::optional<utility::string_t> retryPeriodstrategy,
        boost::optional<int32_t> retryPeriodattempts,
        boost::optional<int32_t> pullPerioditems,
        boost::optional<int32_t> httpPeriodconnPeriodtimeout,
        boost::optional<utility::string_t> requestAuthorizationStrategyPeriodtarget,
        boost::optional<utility::string_t> transportSecretProviderPeriodtarget,
        boost::optional<utility::string_t> packageBuilderPeriodtarget,
        boost::optional<utility::string_t> triggersPeriodtarget
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodname"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    /// <param name="hcPeriodmbeanPeriodname"> (optional)</param>
    /// <param name="numberOfRetriesAllowed"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo>> orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> hcPeriodname,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags,
        boost::optional<utility::string_t> hcPeriodmbeanPeriodname,
        boost::optional<int32_t> numberOfRetriesAllowed
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="queue"> (optional)</param>
    /// <param name="dropPeriodinvalidPerioditems"> (optional)</param>
    /// <param name="agentPeriodtarget"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo>> orgApacheSlingDistributionPackagingImplExporterAgentDistributio(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> queue,
        boost::optional<bool> dropPeriodinvalidPerioditems,
        boost::optional<utility::string_t> agentPeriodtarget
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="packageBuilderPeriodtarget"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo>> orgApacheSlingDistributionPackagingImplExporterLocalDistributio(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> packageBuilderPeriodtarget
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="endpoints"> (optional)</param>
    /// <param name="pullPerioditems"> (optional)</param>
    /// <param name="packageBuilderPeriodtarget"> (optional)</param>
    /// <param name="transportSecretProviderPeriodtarget"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo>> orgApacheSlingDistributionPackagingImplExporterRemoteDistributi(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<std::vector<utility::string_t>> endpoints,
        boost::optional<int32_t> pullPerioditems,
        boost::optional<utility::string_t> packageBuilderPeriodtarget,
        boost::optional<utility::string_t> transportSecretProviderPeriodtarget
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="packageBuilderPeriodtarget"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo>> orgApacheSlingDistributionPackagingImplImporterLocalDistributio(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> packageBuilderPeriodtarget
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="endpoints"> (optional)</param>
    /// <param name="transportSecretProviderPeriodtarget"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo>> orgApacheSlingDistributionPackagingImplImporterRemoteDistributi(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<std::vector<utility::string_t>> endpoints,
        boost::optional<utility::string_t> transportSecretProviderPeriodtarget
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="servicePeriodname"> (optional)</param>
    /// <param name="path"> (optional)</param>
    /// <param name="privilegePeriodname"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo>> orgApacheSlingDistributionPackagingImplImporterRepositoryDistri(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> servicePeriodname,
        boost::optional<utility::string_t> path,
        boost::optional<utility::string_t> privilegePeriodname
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="providerPeriodroots"> (optional)</param>
    /// <param name="kind"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo>> orgApacheSlingDistributionResourcesImplDistributionConfiguration(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> providerPeriodroots,
        boost::optional<utility::string_t> kind
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="providerPeriodroots"> (optional)</param>
    /// <param name="kind"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo>> orgApacheSlingDistributionResourcesImplDistributionServiceResour(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> providerPeriodroots,
        boost::optional<utility::string_t> kind
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="type"> (optional)</param>
    /// <param name="formatPeriodtarget"> (optional)</param>
    /// <param name="tempFsFolder"> (optional)</param>
    /// <param name="fileThreshold"> (optional)</param>
    /// <param name="memoryUnit"> (optional)</param>
    /// <param name="useOffHeapMemory"> (optional)</param>
    /// <param name="digestAlgorithm"> (optional)</param>
    /// <param name="monitoringQueueSize"> (optional)</param>
    /// <param name="cleanupDelay"> (optional)</param>
    /// <param name="packagePeriodfilters"> (optional)</param>
    /// <param name="propertyPeriodfilters"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo>> orgApacheSlingDistributionSerializationImplDistributionPackageBu(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> type,
        boost::optional<utility::string_t> formatPeriodtarget,
        boost::optional<utility::string_t> tempFsFolder,
        boost::optional<int32_t> fileThreshold,
        boost::optional<utility::string_t> memoryUnit,
        boost::optional<bool> useOffHeapMemory,
        boost::optional<utility::string_t> digestAlgorithm,
        boost::optional<int32_t> monitoringQueueSize,
        boost::optional<int32_t> cleanupDelay,
        boost::optional<std::vector<utility::string_t>> packagePeriodfilters,
        boost::optional<std::vector<utility::string_t>> propertyPeriodfilters
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="type"> (optional)</param>
    /// <param name="importMode"> (optional)</param>
    /// <param name="aclHandling"> (optional)</param>
    /// <param name="packagePeriodroots"> (optional)</param>
    /// <param name="packagePeriodfilters"> (optional)</param>
    /// <param name="propertyPeriodfilters"> (optional)</param>
    /// <param name="tempFsFolder"> (optional)</param>
    /// <param name="useBinaryReferences"> (optional)</param>
    /// <param name="autoSaveThreshold"> (optional)</param>
    /// <param name="cleanupDelay"> (optional)</param>
    /// <param name="fileThreshold"> (optional)</param>
    /// <param name="mEGABYTES"> (optional)</param>
    /// <param name="useOffHeapMemory"> (optional)</param>
    /// <param name="digestAlgorithm"> (optional)</param>
    /// <param name="monitoringQueueSize"> (optional)</param>
    /// <param name="pathsMapping"> (optional)</param>
    /// <param name="strictImport"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo>> orgApacheSlingDistributionSerializationImplVltVaultDistribution(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> type,
        boost::optional<utility::string_t> importMode,
        boost::optional<utility::string_t> aclHandling,
        boost::optional<utility::string_t> packagePeriodroots,
        boost::optional<std::vector<utility::string_t>> packagePeriodfilters,
        boost::optional<std::vector<utility::string_t>> propertyPeriodfilters,
        boost::optional<utility::string_t> tempFsFolder,
        boost::optional<bool> useBinaryReferences,
        boost::optional<int32_t> autoSaveThreshold,
        boost::optional<int32_t> cleanupDelay,
        boost::optional<int32_t> fileThreshold,
        boost::optional<utility::string_t> mEGABYTES,
        boost::optional<bool> useOffHeapMemory,
        boost::optional<utility::string_t> digestAlgorithm,
        boost::optional<int32_t> monitoringQueueSize,
        boost::optional<std::vector<utility::string_t>> pathsMapping,
        boost::optional<bool> strictImport
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="username"> (optional)</param>
    /// <param name="password"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo>> orgApacheSlingDistributionTransportImplUserCredentialsDistributi(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> username,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="path"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo>> orgApacheSlingDistributionTriggerImplDistributionEventDistribute(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> path
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="path"> (optional)</param>
    /// <param name="ignoredPathsPatterns"> (optional)</param>
    /// <param name="serviceName"> (optional)</param>
    /// <param name="deep"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo>> orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> path,
        boost::optional<std::vector<utility::string_t>> ignoredPathsPatterns,
        boost::optional<utility::string_t> serviceName,
        boost::optional<bool> deep
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="path"> (optional)</param>
    /// <param name="serviceName"> (optional)</param>
    /// <param name="nuggetsPath"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo>> orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> path,
        boost::optional<utility::string_t> serviceName,
        boost::optional<utility::string_t> nuggetsPath
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="endpoint"> (optional)</param>
    /// <param name="transportSecretProviderPeriodtarget"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo>> orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> endpoint,
        boost::optional<utility::string_t> transportSecretProviderPeriodtarget
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="path"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo>> orgApacheSlingDistributionTriggerImplResourceEventDistributionTr(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> path
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="path"> (optional)</param>
    /// <param name="seconds"> (optional)</param>
    /// <param name="serviceName"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo>> orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> path,
        boost::optional<utility::string_t> seconds,
        boost::optional<utility::string_t> serviceName
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect"> (optional)</param>
    /// <param name="osgiPeriodhttpPeriodwhiteboardPeriodlistener"> (optional)</param>
    /// <param name="authPeriodsudoPeriodcookie"> (optional)</param>
    /// <param name="authPeriodsudoPeriodparameter"> (optional)</param>
    /// <param name="authPeriodannonymous"> (optional)</param>
    /// <param name="slingPeriodauthPeriodrequirements"> (optional)</param>
    /// <param name="slingPeriodauthPeriodanonymousPerioduser"> (optional)</param>
    /// <param name="slingPeriodauthPeriodanonymousPeriodpassword"> (optional)</param>
    /// <param name="authPeriodhttp"> (optional)</param>
    /// <param name="authPeriodhttpPeriodrealm"> (optional)</param>
    /// <param name="authPerioduriPeriodsuffix"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo>> orgApacheSlingEngineImplAuthSlingAuthenticator(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect,
        boost::optional<utility::string_t> osgiPeriodhttpPeriodwhiteboardPeriodlistener,
        boost::optional<utility::string_t> authPeriodsudoPeriodcookie,
        boost::optional<utility::string_t> authPeriodsudoPeriodparameter,
        boost::optional<bool> authPeriodannonymous,
        boost::optional<std::vector<utility::string_t>> slingPeriodauthPeriodrequirements,
        boost::optional<utility::string_t> slingPeriodauthPeriodanonymousPerioduser,
        boost::optional<utility::string_t> slingPeriodauthPeriodanonymousPeriodpassword,
        boost::optional<utility::string_t> authPeriodhttp,
        boost::optional<utility::string_t> authPeriodhttpPeriodrealm,
        boost::optional<std::vector<utility::string_t>> authPerioduriPeriodsuffix
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="extensions"> (optional)</param>
    /// <param name="minDurationMs"> (optional)</param>
    /// <param name="maxDurationMs"> (optional)</param>
    /// <param name="compactLogFormat"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo>> orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> extensions,
        boost::optional<int32_t> minDurationMs,
        boost::optional<int32_t> maxDurationMs,
        boost::optional<bool> compactLogFormat
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="requestPeriodlogPeriodoutput"> (optional)</param>
    /// <param name="requestPeriodlogPeriodoutputtype"> (optional)</param>
    /// <param name="requestPeriodlogPeriodenabled"> (optional)</param>
    /// <param name="accessPeriodlogPeriodoutput"> (optional)</param>
    /// <param name="accessPeriodlogPeriodoutputtype"> (optional)</param>
    /// <param name="accessPeriodlogPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingEngineImplLogRequestLoggerInfo>> orgApacheSlingEngineImplLogRequestLogger(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> requestPeriodlogPeriodoutput,
        boost::optional<int32_t> requestPeriodlogPeriodoutputtype,
        boost::optional<bool> requestPeriodlogPeriodenabled,
        boost::optional<utility::string_t> accessPeriodlogPeriodoutput,
        boost::optional<int32_t> accessPeriodlogPeriodoutputtype,
        boost::optional<bool> accessPeriodlogPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="requestPeriodlogPeriodservicePeriodformat"> (optional)</param>
    /// <param name="requestPeriodlogPeriodservicePeriodoutput"> (optional)</param>
    /// <param name="requestPeriodlogPeriodservicePeriodoutputtype"> (optional)</param>
    /// <param name="requestPeriodlogPeriodservicePeriodonentry"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingEngineImplLogRequestLoggerServiceInfo>> orgApacheSlingEngineImplLogRequestLoggerService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> requestPeriodlogPeriodservicePeriodformat,
        boost::optional<utility::string_t> requestPeriodlogPeriodservicePeriodoutput,
        boost::optional<int32_t> requestPeriodlogPeriodservicePeriodoutputtype,
        boost::optional<bool> requestPeriodlogPeriodservicePeriodonentry
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="slingPeriodmaxPeriodcalls"> (optional)</param>
    /// <param name="slingPeriodmaxPeriodinclusions"> (optional)</param>
    /// <param name="slingPeriodtracePeriodallow"> (optional)</param>
    /// <param name="slingPeriodmaxPeriodrecordPeriodrequests"> (optional)</param>
    /// <param name="slingPeriodstorePeriodpatternPeriodrequests"> (optional)</param>
    /// <param name="slingPeriodserverinfo"> (optional)</param>
    /// <param name="slingPeriodadditionalPeriodresponsePeriodheaders"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingEngineImplSlingMainServletInfo>> orgApacheSlingEngineImplSlingMainServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> slingPeriodmaxPeriodcalls,
        boost::optional<int32_t> slingPeriodmaxPeriodinclusions,
        boost::optional<bool> slingPeriodtracePeriodallow,
        boost::optional<int32_t> slingPeriodmaxPeriodrecordPeriodrequests,
        boost::optional<std::vector<utility::string_t>> slingPeriodstorePeriodpatternPeriodrequests,
        boost::optional<utility::string_t> slingPeriodserverinfo,
        boost::optional<std::vector<utility::string_t>> slingPeriodadditionalPeriodresponsePeriodheaders
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="slingPerioddefaultPeriodparameterPeriodencoding"> (optional)</param>
    /// <param name="slingPerioddefaultPeriodmaxPeriodparameters"> (optional)</param>
    /// <param name="filePeriodlocation"> (optional)</param>
    /// <param name="filePeriodthreshold"> (optional)</param>
    /// <param name="filePeriodmax"> (optional)</param>
    /// <param name="requestPeriodmax"> (optional)</param>
    /// <param name="slingPerioddefaultPeriodparameterPeriodcheckForAdditionalContainerParameters"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingEngineParametersInfo>> orgApacheSlingEngineParameters(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> slingPerioddefaultPeriodparameterPeriodencoding,
        boost::optional<int32_t> slingPerioddefaultPeriodmaxPeriodparameters,
        boost::optional<utility::string_t> filePeriodlocation,
        boost::optional<int32_t> filePeriodthreshold,
        boost::optional<int32_t> filePeriodmax,
        boost::optional<int32_t> requestPeriodmax,
        boost::optional<bool> slingPerioddefaultPeriodparameterPeriodcheckForAdditionalContainerParameters
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="minPoolSize"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingEventImplEventingThreadPoolInfo>> orgApacheSlingEventImplEventingThreadPool(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> minPoolSize
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="queuePeriodpriority"> (optional)</param>
    /// <param name="queuePeriodretries"> (optional)</param>
    /// <param name="queuePeriodretrydelay"> (optional)</param>
    /// <param name="queuePeriodmaxparallel"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingEventImplJobsDefaultJobManagerInfo>> orgApacheSlingEventImplJobsDefaultJobManager(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> queuePeriodpriority,
        boost::optional<int32_t> queuePeriodretries,
        boost::optional<int32_t> queuePeriodretrydelay,
        boost::optional<int32_t> queuePeriodmaxparallel
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="jobPeriodconsumermanagerPerioddisableDistribution"> (optional)</param>
    /// <param name="startupPerioddelay"> (optional)</param>
    /// <param name="cleanupPeriodperiod"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo>> orgApacheSlingEventImplJobsJcrPersistenceHandler(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> jobPeriodconsumermanagerPerioddisableDistribution,
        boost::optional<int32_t> startupPerioddelay,
        boost::optional<int32_t> cleanupPeriodperiod
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist"> (optional)</param>
    /// <param name="jobPeriodconsumermanagerPeriodwhitelist"> (optional)</param>
    /// <param name="jobPeriodconsumermanagerPeriodblacklist"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingEventImplJobsJobConsumerManagerInfo>> orgApacheSlingEventImplJobsJobConsumerManager(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> orgPeriodapachePeriodslingPeriodinstallerPeriodconfigurationPeriodpersist,
        boost::optional<std::vector<utility::string_t>> jobPeriodconsumermanagerPeriodwhitelist,
        boost::optional<std::vector<utility::string_t>> jobPeriodconsumermanagerPeriodblacklist
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="queuePeriodname"> (optional)</param>
    /// <param name="queuePeriodtopics"> (optional)</param>
    /// <param name="queuePeriodtype"> (optional)</param>
    /// <param name="queuePeriodpriority"> (optional)</param>
    /// <param name="queuePeriodretries"> (optional)</param>
    /// <param name="queuePeriodretrydelay"> (optional)</param>
    /// <param name="queuePeriodmaxparallel"> (optional)</param>
    /// <param name="queuePeriodkeepJobs"> (optional)</param>
    /// <param name="queuePeriodpreferRunOnCreationInstance"> (optional)</param>
    /// <param name="queuePeriodthreadPoolSize"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingEventJobsQueueConfigurationInfo>> orgApacheSlingEventJobsQueueConfiguration(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> queuePeriodname,
        boost::optional<std::vector<utility::string_t>> queuePeriodtopics,
        boost::optional<utility::string_t> queuePeriodtype,
        boost::optional<utility::string_t> queuePeriodpriority,
        boost::optional<int32_t> queuePeriodretries,
        boost::optional<int32_t> queuePeriodretrydelay,
        boost::optional<double> queuePeriodmaxparallel,
        boost::optional<bool> queuePeriodkeepJobs,
        boost::optional<bool> queuePeriodpreferRunOnCreationInstance,
        boost::optional<int32_t> queuePeriodthreadPoolSize,
        boost::optional<int32_t> servicePeriodranking
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="users"> (optional)</param>
    /// <param name="groups"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo>> orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> users,
        boost::optional<std::vector<utility::string_t>> groups
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="description"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingFeatureflagsFeatureInfo>> orgApacheSlingFeatureflagsFeature(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> description,
        boost::optional<bool> enabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="name"> (optional)</param>
    /// <param name="description"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo>> orgApacheSlingFeatureflagsImplConfiguredFeature(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> description,
        boost::optional<bool> enabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodresourcetype"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodcollectionresourcetype"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodsearchpaths"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodexternalurl"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodenabled"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingHapiImplHApiUtilImplInfo>> orgApacheSlingHapiImplHApiUtilImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodresourcetype,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodcollectionresourcetype,
        boost::optional<std::vector<utility::string_t>> orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodsearchpaths,
        boost::optional<utility::string_t> orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodexternalurl,
        boost::optional<bool> orgPeriodapachePeriodslingPeriodhapiPeriodtoolsPeriodenabled
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodname"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    /// <param name="hcPeriodmbeanPeriodname"> (optional)</param>
    /// <param name="filterPeriodtags"> (optional)</param>
    /// <param name="filterPeriodcombineTagsWithOr"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingHcCoreImplCompositeHealthCheckInfo>> orgApacheSlingHcCoreImplCompositeHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> hcPeriodname,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags,
        boost::optional<utility::string_t> hcPeriodmbeanPeriodname,
        boost::optional<std::vector<utility::string_t>> filterPeriodtags,
        boost::optional<bool> filterPeriodcombineTagsWithOr
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="timeoutInMs"> (optional)</param>
    /// <param name="longRunningFutureThresholdForCriticalMs"> (optional)</param>
    /// <param name="resultCacheTtlInMs"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo>> orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> timeoutInMs,
        boost::optional<int32_t> longRunningFutureThresholdForCriticalMs,
        boost::optional<int32_t> resultCacheTtlInMs
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodname"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    /// <param name="hcPeriodmbeanPeriodname"> (optional)</param>
    /// <param name="mbeanPeriodname"> (optional)</param>
    /// <param name="attributePeriodname"> (optional)</param>
    /// <param name="attributePeriodvaluePeriodconstraint"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo>> orgApacheSlingHcCoreImplJmxAttributeHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> hcPeriodname,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags,
        boost::optional<utility::string_t> hcPeriodmbeanPeriodname,
        boost::optional<utility::string_t> mbeanPeriodname,
        boost::optional<utility::string_t> attributePeriodname,
        boost::optional<utility::string_t> attributePeriodvaluePeriodconstraint
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="hcPeriodname"> (optional)</param>
    /// <param name="hcPeriodtags"> (optional)</param>
    /// <param name="hcPeriodmbeanPeriodname"> (optional)</param>
    /// <param name="expression"> (optional)</param>
    /// <param name="languagePeriodextension"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingHcCoreImplScriptableHealthCheckInfo>> orgApacheSlingHcCoreImplScriptableHealthCheck(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> hcPeriodname,
        boost::optional<std::vector<utility::string_t>> hcPeriodtags,
        boost::optional<utility::string_t> hcPeriodmbeanPeriodname,
        boost::optional<utility::string_t> expression,
        boost::optional<utility::string_t> languagePeriodextension
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servletPath"> (optional)</param>
    /// <param name="disabled"> (optional)</param>
    /// <param name="corsPeriodaccessControlAllowOrigin"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo>> orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> servletPath,
        boost::optional<bool> disabled,
        boost::optional<utility::string_t> corsPeriodaccessControlAllowOrigin
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="totalWidth"> (optional)</param>
    /// <param name="colWidthName"> (optional)</param>
    /// <param name="colWidthResult"> (optional)</param>
    /// <param name="colWidthTiming"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo>> orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> totalWidth,
        boost::optional<int32_t> colWidthName,
        boost::optional<int32_t> colWidthResult,
        boost::optional<int32_t> colWidthTiming
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="slingPeriodfilterPeriodscope"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingI18nImplI18NFilterInfo>> orgApacheSlingI18nImplI18NFilter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<std::vector<utility::string_t>> slingPeriodfilterPeriodscope
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="localePerioddefault"> (optional)</param>
    /// <param name="preloadPeriodbundles"> (optional)</param>
    /// <param name="invalidationPerioddelay"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingI18nImplJcrResourceBundleProviderInfo>> orgApacheSlingI18nImplJcrResourceBundleProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> localePerioddefault,
        boost::optional<bool> preloadPeriodbundles,
        boost::optional<int32_t> invalidationPerioddelay
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="handlerPeriodschemes"> (optional)</param>
    /// <param name="slingPeriodjcrinstallPeriodfolderPeriodnamePeriodregexp"> (optional)</param>
    /// <param name="slingPeriodjcrinstallPeriodfolderPeriodmaxPerioddepth"> (optional)</param>
    /// <param name="slingPeriodjcrinstallPeriodsearchPeriodpath"> (optional)</param>
    /// <param name="slingPeriodjcrinstallPeriodnewPeriodconfigPeriodpath"> (optional)</param>
    /// <param name="slingPeriodjcrinstallPeriodsignalPeriodpath"> (optional)</param>
    /// <param name="slingPeriodjcrinstallPeriodenablePeriodwriteback"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo>> orgApacheSlingInstallerProviderJcrImplJcrInstaller(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> handlerPeriodschemes,
        boost::optional<utility::string_t> slingPeriodjcrinstallPeriodfolderPeriodnamePeriodregexp,
        boost::optional<int32_t> slingPeriodjcrinstallPeriodfolderPeriodmaxPerioddepth,
        boost::optional<std::vector<utility::string_t>> slingPeriodjcrinstallPeriodsearchPeriodpath,
        boost::optional<utility::string_t> slingPeriodjcrinstallPeriodnewPeriodconfigPeriodpath,
        boost::optional<utility::string_t> slingPeriodjcrinstallPeriodsignalPeriodpath,
        boost::optional<bool> slingPeriodjcrinstallPeriodenablePeriodwriteback
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="whitelistPeriodbypass"> (optional)</param>
    /// <param name="whitelistPeriodbundlesPeriodregexp"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo>> orgApacheSlingJcrBaseInternalLoginAdminWhitelist(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> whitelistPeriodbypass,
        boost::optional<utility::string_t> whitelistPeriodbundlesPeriodregexp
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="whitelistPeriodname"> (optional)</param>
    /// <param name="whitelistPeriodbundles"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo>> orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> whitelistPeriodname,
        boost::optional<std::vector<utility::string_t>> whitelistPeriodbundles
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="alias"> (optional)</param>
    /// <param name="davPeriodcreateAbsoluteUri"> (optional)</param>
    /// <param name="davPeriodprotectedhandlers"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo>> orgApacheSlingJcrDavexImplServletsSlingDavExServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> alias,
        boost::optional<bool> davPeriodcreateAbsoluteUri,
        boost::optional<utility::string_t> davPeriodprotectedhandlers
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="javaPeriodnamingPeriodfactoryPeriodinitial"> (optional)</param>
    /// <param name="javaPeriodnamingPeriodproviderPeriodurl"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo>> orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> javaPeriodnamingPeriodfactoryPeriodinitial,
        boost::optional<utility::string_t> javaPeriodnamingPeriodproviderPeriodurl
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="port"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo>> orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> port
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="references"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo>> orgApacheSlingJcrRepoinitImplRepositoryInitializer(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> references
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="references"> (optional)</param>
    /// <param name="scripts"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingJcrRepoinitRepositoryInitializerInfo>> orgApacheSlingJcrRepoinitRepositoryInitializer(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> references,
        boost::optional<std::vector<utility::string_t>> scripts
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="resourcePeriodresolverPeriodsearchpath"> (optional)</param>
    /// <param name="resourcePeriodresolverPeriodmanglenamespaces"> (optional)</param>
    /// <param name="resourcePeriodresolverPeriodallowDirect"> (optional)</param>
    /// <param name="resourcePeriodresolverPeriodrequiredPeriodproviders"> (optional)</param>
    /// <param name="resourcePeriodresolverPeriodrequiredPeriodprovidernames"> (optional)</param>
    /// <param name="resourcePeriodresolverPeriodvirtual"> (optional)</param>
    /// <param name="resourcePeriodresolverPeriodmapping"> (optional)</param>
    /// <param name="resourcePeriodresolverPeriodmapPeriodlocation"> (optional)</param>
    /// <param name="resourcePeriodresolverPeriodmapPeriodobservation"> (optional)</param>
    /// <param name="resourcePeriodresolverPerioddefaultPeriodvanityPeriodredirectPeriodstatus"> (optional)</param>
    /// <param name="resourcePeriodresolverPeriodenablePeriodvanitypath"> (optional)</param>
    /// <param name="resourcePeriodresolverPeriodvanitypathPeriodmaxEntries"> (optional)</param>
    /// <param name="resourcePeriodresolverPeriodvanitypathPeriodmaxEntriesPeriodstartup"> (optional)</param>
    /// <param name="resourcePeriodresolverPeriodvanitypathPeriodbloomfilterPeriodmaxBytes"> (optional)</param>
    /// <param name="resourcePeriodresolverPeriodoptimizePeriodaliasPeriodresolution"> (optional)</param>
    /// <param name="resourcePeriodresolverPeriodvanitypathPeriodwhitelist"> (optional)</param>
    /// <param name="resourcePeriodresolverPeriodvanitypathPeriodblacklist"> (optional)</param>
    /// <param name="resourcePeriodresolverPeriodvanityPeriodprecedence"> (optional)</param>
    /// <param name="resourcePeriodresolverPeriodproviderhandlingPeriodparanoid"> (optional)</param>
    /// <param name="resourcePeriodresolverPeriodlogPeriodclosing"> (optional)</param>
    /// <param name="resourcePeriodresolverPeriodlogPeriodunclosed"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo>> orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> resourcePeriodresolverPeriodsearchpath,
        boost::optional<bool> resourcePeriodresolverPeriodmanglenamespaces,
        boost::optional<bool> resourcePeriodresolverPeriodallowDirect,
        boost::optional<std::vector<utility::string_t>> resourcePeriodresolverPeriodrequiredPeriodproviders,
        boost::optional<std::vector<utility::string_t>> resourcePeriodresolverPeriodrequiredPeriodprovidernames,
        boost::optional<std::vector<utility::string_t>> resourcePeriodresolverPeriodvirtual,
        boost::optional<std::vector<utility::string_t>> resourcePeriodresolverPeriodmapping,
        boost::optional<utility::string_t> resourcePeriodresolverPeriodmapPeriodlocation,
        boost::optional<std::vector<utility::string_t>> resourcePeriodresolverPeriodmapPeriodobservation,
        boost::optional<int32_t> resourcePeriodresolverPerioddefaultPeriodvanityPeriodredirectPeriodstatus,
        boost::optional<bool> resourcePeriodresolverPeriodenablePeriodvanitypath,
        boost::optional<int32_t> resourcePeriodresolverPeriodvanitypathPeriodmaxEntries,
        boost::optional<bool> resourcePeriodresolverPeriodvanitypathPeriodmaxEntriesPeriodstartup,
        boost::optional<int32_t> resourcePeriodresolverPeriodvanitypathPeriodbloomfilterPeriodmaxBytes,
        boost::optional<bool> resourcePeriodresolverPeriodoptimizePeriodaliasPeriodresolution,
        boost::optional<std::vector<utility::string_t>> resourcePeriodresolverPeriodvanitypathPeriodwhitelist,
        boost::optional<std::vector<utility::string_t>> resourcePeriodresolverPeriodvanitypathPeriodblacklist,
        boost::optional<bool> resourcePeriodresolverPeriodvanityPeriodprecedence,
        boost::optional<bool> resourcePeriodresolverPeriodproviderhandlingPeriodparanoid,
        boost::optional<bool> resourcePeriodresolverPeriodlogPeriodclosing,
        boost::optional<bool> resourcePeriodresolverPeriodlogPeriodunclosed
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="allowPeriodonlyPeriodsystemPerioduser"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo>> orgApacheSlingJcrResourceInternalJcrSystemUserValidator(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> allowPeriodonlyPeriodsystemPerioduser
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="path"> (optional)</param>
    /// <param name="checkpathPeriodprefix"> (optional)</param>
    /// <param name="jcrPath"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo>> orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> path,
        boost::optional<utility::string_t> checkpathPeriodprefix,
        boost::optional<utility::string_t> jcrPath
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="typePeriodcollections"> (optional)</param>
    /// <param name="typePeriodnoncollections"> (optional)</param>
    /// <param name="typePeriodcontent"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo>> orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> typePeriodcollections,
        boost::optional<utility::string_t> typePeriodnoncollections,
        boost::optional<utility::string_t> typePeriodcontent
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo>> orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="davPeriodroot"> (optional)</param>
    /// <param name="davPeriodcreateAbsoluteUri"> (optional)</param>
    /// <param name="davPeriodrealm"> (optional)</param>
    /// <param name="collectionPeriodtypes"> (optional)</param>
    /// <param name="filterPeriodprefixes"> (optional)</param>
    /// <param name="filterPeriodtypes"> (optional)</param>
    /// <param name="filterPerioduris"> (optional)</param>
    /// <param name="typePeriodcollections"> (optional)</param>
    /// <param name="typePeriodnoncollections"> (optional)</param>
    /// <param name="typePeriodcontent"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo>> orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> davPeriodroot,
        boost::optional<bool> davPeriodcreateAbsoluteUri,
        boost::optional<utility::string_t> davPeriodrealm,
        boost::optional<std::vector<utility::string_t>> collectionPeriodtypes,
        boost::optional<std::vector<utility::string_t>> filterPeriodprefixes,
        boost::optional<utility::string_t> filterPeriodtypes,
        boost::optional<utility::string_t> filterPerioduris,
        boost::optional<utility::string_t> typePeriodcollections,
        boost::optional<utility::string_t> typePeriodnoncollections,
        boost::optional<utility::string_t> typePeriodcontent
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="providerPeriodroots"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingJmxProviderImplJMXResourceProviderInfo>> orgApacheSlingJmxProviderImplJMXResourceProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> providerPeriodroots
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="osgiPeriodhttpPeriodwhiteboardPeriodlistener"> (optional)</param>
    /// <param name="osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect"> (optional)</param>
    /// <param name="maxPeriodrecursionPerioddepth"> (optional)</param>
    /// <param name="cleanupPeriodjobPeriodperiod"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingModelsImplModelAdapterFactoryInfo>> orgApacheSlingModelsImplModelAdapterFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> osgiPeriodhttpPeriodwhiteboardPeriodlistener,
        boost::optional<utility::string_t> osgiPeriodhttpPeriodwhiteboardPeriodcontextPeriodselect,
        boost::optional<int32_t> maxPeriodrecursionPerioddepth,
        boost::optional<int32_t> cleanupPeriodjobPeriodperiod
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="maxPeriodrecursionPeriodlevels"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo>> orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> maxPeriodrecursionPeriodlevels
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="felixPeriodinventoryPeriodprinterPeriodname"> (optional)</param>
    /// <param name="felixPeriodinventoryPeriodprinterPeriodtitle"> (optional)</param>
    /// <param name="path"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo>> orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> felixPeriodinventoryPeriodprinterPeriodname,
        boost::optional<utility::string_t> felixPeriodinventoryPeriodprinterPeriodtitle,
        boost::optional<utility::string_t> path
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="mergePeriodroot"> (optional)</param>
    /// <param name="mergePeriodreadOnly"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo>> orgApacheSlingResourcemergerImplMergedResourceProviderFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> mergePeriodroot,
        boost::optional<bool> mergePeriodreadOnly
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="mergePeriodroot"> (optional)</param>
    /// <param name="mergePeriodreadOnly"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingResourcemergerPickerOverridingInfo>> orgApacheSlingResourcemergerPickerOverriding(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> mergePeriodroot,
        boost::optional<bool> mergePeriodreadOnly
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodsize"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodadditionalExtensions"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingScriptingCoreImplScriptCacheImplInfo>> orgApacheSlingScriptingCoreImplScriptCacheImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodsize,
        boost::optional<std::vector<utility::string_t>> orgPeriodapachePeriodslingPeriodscriptingPeriodcachePeriodadditionalExtensions
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="logPeriodstacktracePeriodonclose"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo>> orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> logPeriodstacktracePeriodonclose
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="javaPeriodclassdebuginfo"> (optional)</param>
    /// <param name="javaPeriodjavaEncoding"> (optional)</param>
    /// <param name="javaPeriodcompilerSourceVM"> (optional)</param>
    /// <param name="javaPeriodcompilerTargetVM"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo>> orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> javaPeriodclassdebuginfo,
        boost::optional<utility::string_t> javaPeriodjavaEncoding,
        boost::optional<utility::string_t> javaPeriodcompilerSourceVM,
        boost::optional<utility::string_t> javaPeriodcompilerTargetVM
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodscriptingPeriodjavascriptPeriodrhinoPeriodoptLevel"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo>> orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> orgPeriodapachePeriodslingPeriodscriptingPeriodjavascriptPeriodrhinoPeriodoptLevel
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="jasperPeriodcompilerTargetVM"> (optional)</param>
    /// <param name="jasperPeriodcompilerSourceVM"> (optional)</param>
    /// <param name="jasperPeriodclassdebuginfo"> (optional)</param>
    /// <param name="jasperPeriodenablePooling"> (optional)</param>
    /// <param name="jasperPeriodieClassId"> (optional)</param>
    /// <param name="jasperPeriodgenStringAsCharArray"> (optional)</param>
    /// <param name="jasperPeriodkeepgenerated"> (optional)</param>
    /// <param name="jasperPeriodmappedfile"> (optional)</param>
    /// <param name="jasperPeriodtrimSpaces"> (optional)</param>
    /// <param name="jasperPerioddisplaySourceFragments"> (optional)</param>
    /// <param name="defaultPeriodisPeriodsession"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo>> orgApacheSlingScriptingJspJspScriptEngineFactory(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> jasperPeriodcompilerTargetVM,
        boost::optional<utility::string_t> jasperPeriodcompilerSourceVM,
        boost::optional<bool> jasperPeriodclassdebuginfo,
        boost::optional<bool> jasperPeriodenablePooling,
        boost::optional<utility::string_t> jasperPeriodieClassId,
        boost::optional<bool> jasperPeriodgenStringAsCharArray,
        boost::optional<bool> jasperPeriodkeepgenerated,
        boost::optional<bool> jasperPeriodmappedfile,
        boost::optional<bool> jasperPeriodtrimSpaces,
        boost::optional<bool> jasperPerioddisplaySourceFragments,
        boost::optional<bool> defaultPeriodisPeriodsession
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodbindings"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo>> orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> orgPeriodapachePeriodslingPeriodscriptingPeriodsightlyPeriodjsPeriodbindings
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="slingPeriodcontentPerioddispositionPeriodpaths"> (optional)</param>
    /// <param name="slingPeriodcontentPerioddispositionPeriodexcludedPeriodpaths"> (optional)</param>
    /// <param name="slingPeriodcontentPerioddispositionPeriodallPeriodpaths"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingSecurityImplContentDispositionFilterInfo>> orgApacheSlingSecurityImplContentDispositionFilter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> slingPeriodcontentPerioddispositionPeriodpaths,
        boost::optional<std::vector<utility::string_t>> slingPeriodcontentPerioddispositionPeriodexcludedPeriodpaths,
        boost::optional<bool> slingPeriodcontentPerioddispositionPeriodallPeriodpaths
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="allowPeriodempty"> (optional)</param>
    /// <param name="allowPeriodhosts"> (optional)</param>
    /// <param name="allowPeriodhostsPeriodregexp"> (optional)</param>
    /// <param name="filterPeriodmethods"> (optional)</param>
    /// <param name="excludePeriodagentsPeriodregexp"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingSecurityImplReferrerFilterInfo>> orgApacheSlingSecurityImplReferrerFilter(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> allowPeriodempty,
        boost::optional<std::vector<utility::string_t>> allowPeriodhosts,
        boost::optional<std::vector<utility::string_t>> allowPeriodhostsPeriodregexp,
        boost::optional<std::vector<utility::string_t>> filterPeriodmethods,
        boost::optional<std::vector<utility::string_t>> excludePeriodagentsPeriodregexp
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="userPeriodmapping"> (optional)</param>
    /// <param name="userPerioddefault"> (optional)</param>
    /// <param name="userPeriodenablePerioddefaultPeriodmapping"> (optional)</param>
    /// <param name="requirePeriodvalidation"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo>> orgApacheSlingServiceusermappingImplServiceUserMapperImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> userPeriodmapping,
        boost::optional<utility::string_t> userPerioddefault,
        boost::optional<bool> userPeriodenablePerioddefaultPeriodmapping,
        boost::optional<bool> requirePeriodvalidation
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="userPeriodmapping"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo>> orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<std::vector<utility::string_t>> userPeriodmapping
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="aliases"> (optional)</param>
    /// <param name="index"> (optional)</param>
    /// <param name="indexPeriodfiles"> (optional)</param>
    /// <param name="enablePeriodhtml"> (optional)</param>
    /// <param name="enablePeriodjson"> (optional)</param>
    /// <param name="enablePeriodtxt"> (optional)</param>
    /// <param name="enablePeriodxml"> (optional)</param>
    /// <param name="jsonPeriodmaximumresults"> (optional)</param>
    /// <param name="ecmaSuport"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingServletsGetDefaultGetServletInfo>> orgApacheSlingServletsGetDefaultGetServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> aliases,
        boost::optional<bool> index,
        boost::optional<std::vector<utility::string_t>> indexPeriodfiles,
        boost::optional<bool> enablePeriodhtml,
        boost::optional<bool> enablePeriodjson,
        boost::optional<bool> enablePeriodtxt,
        boost::optional<bool> enablePeriodxml,
        boost::optional<int32_t> jsonPeriodmaximumresults,
        boost::optional<bool> ecmaSuport
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="slingPeriodservletPeriodselectors"> (optional)</param>
    /// <param name="ecmaSuport"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo>> orgApacheSlingServletsGetImplVersionVersionInfoServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> slingPeriodservletPeriodselectors,
        boost::optional<bool> ecmaSuport
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="schedulerPeriodexpression"> (optional)</param>
    /// <param name="schedulerPeriodconcurrent"> (optional)</param>
    /// <param name="chunkPeriodcleanupPeriodage"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo>> orgApacheSlingServletsPostImplHelperChunkCleanUpTask(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> schedulerPeriodexpression,
        boost::optional<bool> schedulerPeriodconcurrent,
        boost::optional<int32_t> chunkPeriodcleanupPeriodage
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servletPeriodpostPerioddateFormats"> (optional)</param>
    /// <param name="servletPeriodpostPeriodnodeNameHints"> (optional)</param>
    /// <param name="servletPeriodpostPeriodnodeNameMaxLength"> (optional)</param>
    /// <param name="servletPeriodpostPeriodcheckinNewVersionableNodes"> (optional)</param>
    /// <param name="servletPeriodpostPeriodautoCheckout"> (optional)</param>
    /// <param name="servletPeriodpostPeriodautoCheckin"> (optional)</param>
    /// <param name="servletPeriodpostPeriodignorePattern"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingServletsPostImplSlingPostServletInfo>> orgApacheSlingServletsPostImplSlingPostServlet(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> servletPeriodpostPerioddateFormats,
        boost::optional<std::vector<utility::string_t>> servletPeriodpostPeriodnodeNameHints,
        boost::optional<int32_t> servletPeriodpostPeriodnodeNameMaxLength,
        boost::optional<bool> servletPeriodpostPeriodcheckinNewVersionableNodes,
        boost::optional<bool> servletPeriodpostPeriodautoCheckout,
        boost::optional<bool> servletPeriodpostPeriodautoCheckin,
        boost::optional<utility::string_t> servletPeriodpostPeriodignorePattern
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="servletresolverPeriodservletRoot"> (optional)</param>
    /// <param name="servletresolverPeriodcacheSize"> (optional)</param>
    /// <param name="servletresolverPeriodpaths"> (optional)</param>
    /// <param name="servletresolverPerioddefaultExtensions"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingServletsResolverSlingServletResolverInfo>> orgApacheSlingServletsResolverSlingServletResolver(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> servletresolverPeriodservletRoot,
        boost::optional<int32_t> servletresolverPeriodcacheSize,
        boost::optional<std::vector<utility::string_t>> servletresolverPeriodpaths,
        boost::optional<std::vector<utility::string_t>> servletresolverPerioddefaultExtensions
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="slingPeriodname"> (optional)</param>
    /// <param name="slingPerioddescription"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo>> orgApacheSlingSettingsImplSlingSettingsServiceImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> slingPeriodname,
        boost::optional<utility::string_t> slingPerioddescription
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="activePeriodbyPerioddefault"> (optional)</param>
    /// <param name="defaultPeriodmessage"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingStartupfilterImplStartupFilterImplInfo>> orgApacheSlingStartupfilterImplStartupFilterImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<bool> activePeriodbyPerioddefault,
        boost::optional<utility::string_t> defaultPeriodmessage
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="tenantPeriodroot"> (optional)</param>
    /// <param name="tenantPeriodpathPeriodmatcher"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingTenantInternalTenantProviderImplInfo>> orgApacheSlingTenantInternalTenantProviderImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> tenantPeriodroot,
        boost::optional<std::vector<utility::string_t>> tenantPeriodpathPeriodmatcher
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="tracerSets"> (optional)</param>
    /// <param name="enabled"> (optional)</param>
    /// <param name="servletEnabled"> (optional)</param>
    /// <param name="recordingCacheSizeInMB"> (optional)</param>
    /// <param name="recordingCacheDurationInSecs"> (optional)</param>
    /// <param name="recordingCompressionEnabled"> (optional)</param>
    /// <param name="gzipResponse"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingTracerInternalLogTracerInfo>> orgApacheSlingTracerInternalLogTracer(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<std::vector<utility::string_t>> tracerSets,
        boost::optional<bool> enabled,
        boost::optional<bool> servletEnabled,
        boost::optional<int32_t> recordingCacheSizeInMB,
        boost::optional<int32_t> recordingCacheDurationInSecs,
        boost::optional<bool> recordingCompressionEnabled,
        boost::optional<bool> gzipResponse
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    /// <param name="policyPath"> (optional)</param>
    pplx::task<std::shared_ptr<OrgApacheSlingXssImplXSSFilterImplInfo>> orgApacheSlingXssImplXSSFilterImpl(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> propertylist,
        boost::optional<utility::string_t> policyPath
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_ConfigmgrApi_H_ */

