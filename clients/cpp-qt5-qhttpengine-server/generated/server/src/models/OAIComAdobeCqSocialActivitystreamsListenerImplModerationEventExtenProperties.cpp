/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties() {
    this->init();
}

OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::~OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties() {
    
}

void
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::init() {
    m_accepted_isSet = false;
    m_ranked_isSet = false;
}

void
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(accepted, json[QString("accepted")]);
    
    ::OpenAPI::fromJsonValue(ranked, json[QString("ranked")]);
    
}

QString
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::asJsonObject() const {
    QJsonObject obj;
	if(accepted.isSet()){
        obj.insert(QString("accepted"), ::OpenAPI::toJsonValue(accepted));
    }
	if(ranked.isSet()){
        obj.insert(QString("ranked"), ::OpenAPI::toJsonValue(ranked));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::getAccepted() const {
    return accepted;
}
void
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::setAccepted(const OAIConfigNodePropertyBoolean &accepted) {
    this->accepted = accepted;
    this->m_accepted_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::getRanked() const {
    return ranked;
}
void
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::setRanked(const OAIConfigNodePropertyInteger &ranked) {
    this->ranked = ranked;
    this->m_ranked_isSet = true;
}


bool
OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(accepted.isSet()){ isObjectUpdated = true; break;}
    
        if(ranked.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

