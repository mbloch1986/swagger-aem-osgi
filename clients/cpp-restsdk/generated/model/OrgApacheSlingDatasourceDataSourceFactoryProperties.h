/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingDatasourceDataSourceFactoryProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingDatasourceDataSourceFactoryProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingDatasourceDataSourceFactoryProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingDatasourceDataSourceFactoryProperties
    : public ModelBase
{
public:
    OrgApacheSlingDatasourceDataSourceFactoryProperties();
    virtual ~OrgApacheSlingDatasourceDataSourceFactoryProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingDatasourceDataSourceFactoryProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDatasourceName() const;
    bool datasourceNameIsSet() const;
    void unsetDatasource_name();
    void setDatasourceName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDatasourceSvcPropName() const;
    bool datasourceSvcPropNameIsSet() const;
    void unsetDatasource_svc_prop_name();
    void setDatasourceSvcPropName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDriverClassName() const;
    bool driverClassNameIsSet() const;
    void unsetDriverClassName();
    void setDriverClassName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getUrl() const;
    bool urlIsSet() const;
    void unsetUrl();
    void setUrl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getUsername() const;
    bool usernameIsSet() const;
    void unsetUsername();
    void setUsername(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPassword() const;
    bool passwordIsSet() const;
    void unsetPassword();
    void setPassword(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getDefaultAutoCommit() const;
    bool defaultAutoCommitIsSet() const;
    void unsetDefaultAutoCommit();
    void setDefaultAutoCommit(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getDefaultReadOnly() const;
    bool defaultReadOnlyIsSet() const;
    void unsetDefaultReadOnly();
    void setDefaultReadOnly(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getDefaultTransactionIsolation() const;
    bool defaultTransactionIsolationIsSet() const;
    void unsetDefaultTransactionIsolation();
    void setDefaultTransactionIsolation(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDefaultCatalog() const;
    bool defaultCatalogIsSet() const;
    void unsetDefaultCatalog();
    void setDefaultCatalog(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxActive() const;
    bool maxActiveIsSet() const;
    void unsetMaxActive();
    void setMaxActive(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxIdle() const;
    bool maxIdleIsSet() const;
    void unsetMaxIdle();
    void setMaxIdle(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMinIdle() const;
    bool minIdleIsSet() const;
    void unsetMinIdle();
    void setMinIdle(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getInitialSize() const;
    bool initialSizeIsSet() const;
    void unsetInitialSize();
    void setInitialSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxWait() const;
    bool maxWaitIsSet() const;
    void unsetMaxWait();
    void setMaxWait(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxAge() const;
    bool maxAgeIsSet() const;
    void unsetMaxAge();
    void setMaxAge(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getTestOnBorrow() const;
    bool testOnBorrowIsSet() const;
    void unsetTestOnBorrow();
    void setTestOnBorrow(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getTestOnReturn() const;
    bool testOnReturnIsSet() const;
    void unsetTestOnReturn();
    void setTestOnReturn(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getTestWhileIdle() const;
    bool testWhileIdleIsSet() const;
    void unsetTestWhileIdle();
    void setTestWhileIdle(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getValidationQuery() const;
    bool validationQueryIsSet() const;
    void unsetValidationQuery();
    void setValidationQuery(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getValidationQueryTimeout() const;
    bool validationQueryTimeoutIsSet() const;
    void unsetValidationQueryTimeout();
    void setValidationQueryTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getTimeBetweenEvictionRunsMillis() const;
    bool timeBetweenEvictionRunsMillisIsSet() const;
    void unsetTimeBetweenEvictionRunsMillis();
    void setTimeBetweenEvictionRunsMillis(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMinEvictableIdleTimeMillis() const;
    bool minEvictableIdleTimeMillisIsSet() const;
    void unsetMinEvictableIdleTimeMillis();
    void setMinEvictableIdleTimeMillis(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getConnectionProperties() const;
    bool connectionPropertiesIsSet() const;
    void unsetConnectionProperties();
    void setConnectionProperties(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getInitSQL() const;
    bool initSQLIsSet() const;
    void unsetInitSQL();
    void setInitSQL(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getJdbcInterceptors() const;
    bool jdbcInterceptorsIsSet() const;
    void unsetJdbcInterceptors();
    void setJdbcInterceptors(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getValidationInterval() const;
    bool validationIntervalIsSet() const;
    void unsetValidationInterval();
    void setValidationInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getLogValidationErrors() const;
    bool logValidationErrorsIsSet() const;
    void unsetLogValidationErrors();
    void setLogValidationErrors(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getDatasourceSvcProperties() const;
    bool datasourceSvcPropertiesIsSet() const;
    void unsetDatasource_svc_properties();
    void setDatasourceSvcProperties(std::shared_ptr<ConfigNodePropertyArray> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Datasource_name;
    bool m_Datasource_nameIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Datasource_svc_prop_name;
    bool m_Datasource_svc_prop_nameIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_DriverClassName;
    bool m_DriverClassNameIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Url;
    bool m_UrlIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Username;
    bool m_UsernameIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Password;
    bool m_PasswordIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_DefaultAutoCommit;
    bool m_DefaultAutoCommitIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_DefaultReadOnly;
    bool m_DefaultReadOnlyIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_DefaultTransactionIsolation;
    bool m_DefaultTransactionIsolationIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_DefaultCatalog;
    bool m_DefaultCatalogIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxActive;
    bool m_MaxActiveIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxIdle;
    bool m_MaxIdleIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_MinIdle;
    bool m_MinIdleIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_InitialSize;
    bool m_InitialSizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxWait;
    bool m_MaxWaitIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxAge;
    bool m_MaxAgeIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_TestOnBorrow;
    bool m_TestOnBorrowIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_TestOnReturn;
    bool m_TestOnReturnIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_TestWhileIdle;
    bool m_TestWhileIdleIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_ValidationQuery;
    bool m_ValidationQueryIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_ValidationQueryTimeout;
    bool m_ValidationQueryTimeoutIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_TimeBetweenEvictionRunsMillis;
    bool m_TimeBetweenEvictionRunsMillisIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_MinEvictableIdleTimeMillis;
    bool m_MinEvictableIdleTimeMillisIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_ConnectionProperties;
    bool m_ConnectionPropertiesIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_InitSQL;
    bool m_InitSQLIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_JdbcInterceptors;
    bool m_JdbcInterceptorsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_ValidationInterval;
    bool m_ValidationIntervalIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_LogValidationErrors;
    bool m_LogValidationErrorsIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Datasource_svc_properties;
    bool m_Datasource_svc_propertiesIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingDatasourceDataSourceFactoryProperties_H_ */
