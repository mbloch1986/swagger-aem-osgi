/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.openapitools.client.model.ConfigNodePropertyInteger;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties {
  
  @SerializedName("timeoutInMs")
  private ConfigNodePropertyInteger timeoutInMs = null;
  @SerializedName("longRunningFutureThresholdForCriticalMs")
  private ConfigNodePropertyInteger longRunningFutureThresholdForCriticalMs = null;
  @SerializedName("resultCacheTtlInMs")
  private ConfigNodePropertyInteger resultCacheTtlInMs = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getTimeoutInMs() {
    return timeoutInMs;
  }
  public void setTimeoutInMs(ConfigNodePropertyInteger timeoutInMs) {
    this.timeoutInMs = timeoutInMs;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getLongRunningFutureThresholdForCriticalMs() {
    return longRunningFutureThresholdForCriticalMs;
  }
  public void setLongRunningFutureThresholdForCriticalMs(ConfigNodePropertyInteger longRunningFutureThresholdForCriticalMs) {
    this.longRunningFutureThresholdForCriticalMs = longRunningFutureThresholdForCriticalMs;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getResultCacheTtlInMs() {
    return resultCacheTtlInMs;
  }
  public void setResultCacheTtlInMs(ConfigNodePropertyInteger resultCacheTtlInMs) {
    this.resultCacheTtlInMs = resultCacheTtlInMs;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties = (OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties) o;
    return (this.timeoutInMs == null ? orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties.timeoutInMs == null : this.timeoutInMs.equals(orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties.timeoutInMs)) &&
        (this.longRunningFutureThresholdForCriticalMs == null ? orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties.longRunningFutureThresholdForCriticalMs == null : this.longRunningFutureThresholdForCriticalMs.equals(orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties.longRunningFutureThresholdForCriticalMs)) &&
        (this.resultCacheTtlInMs == null ? orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties.resultCacheTtlInMs == null : this.resultCacheTtlInMs.equals(orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties.resultCacheTtlInMs));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.timeoutInMs == null ? 0: this.timeoutInMs.hashCode());
    result = 31 * result + (this.longRunningFutureThresholdForCriticalMs == null ? 0: this.longRunningFutureThresholdForCriticalMs.hashCode());
    result = 31 * result + (this.resultCacheTtlInMs == null ? 0: this.resultCacheTtlInMs.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties {\n");
    
    sb.append("  timeoutInMs: ").append(timeoutInMs).append("\n");
    sb.append("  longRunningFutureThresholdForCriticalMs: ").append(longRunningFutureThresholdForCriticalMs).append("\n");
    sb.append("  resultCacheTtlInMs: ").append(resultCacheTtlInMs).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
