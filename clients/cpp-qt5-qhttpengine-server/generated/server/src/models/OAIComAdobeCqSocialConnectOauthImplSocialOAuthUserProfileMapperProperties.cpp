/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties() {
    this->init();
}

OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::~OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties() {
    
}

void
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::init() {
    m_facebook_isSet = false;
    m_twitter_isSet = false;
    m_provider_config_user_folder_isSet = false;
}

void
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(facebook, json[QString("facebook")]);
    
    ::OpenAPI::fromJsonValue(twitter, json[QString("twitter")]);
    
    ::OpenAPI::fromJsonValue(provider_config_user_folder, json[QString("provider.config.user.folder")]);
    
}

QString
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::asJsonObject() const {
    QJsonObject obj;
	if(facebook.isSet()){
        obj.insert(QString("facebook"), ::OpenAPI::toJsonValue(facebook));
    }
	if(twitter.isSet()){
        obj.insert(QString("twitter"), ::OpenAPI::toJsonValue(twitter));
    }
	if(provider_config_user_folder.isSet()){
        obj.insert(QString("provider.config.user.folder"), ::OpenAPI::toJsonValue(provider_config_user_folder));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::getFacebook() const {
    return facebook;
}
void
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::setFacebook(const OAIConfigNodePropertyArray &facebook) {
    this->facebook = facebook;
    this->m_facebook_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::getTwitter() const {
    return twitter;
}
void
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::setTwitter(const OAIConfigNodePropertyArray &twitter) {
    this->twitter = twitter;
    this->m_twitter_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::getProviderConfigUserFolder() const {
    return provider_config_user_folder;
}
void
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::setProviderConfigUserFolder(const OAIConfigNodePropertyString &provider_config_user_folder) {
    this->provider_config_user_folder = provider_config_user_folder;
    this->m_provider_config_user_folder_isSet = true;
}


bool
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(facebook.isSet()){ isObjectUpdated = true; break;}
    
        if(twitter.isSet()){ isObjectUpdated = true; break;}
    
        if(provider_config_user_folder.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

